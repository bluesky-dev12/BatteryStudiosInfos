#include "stdafx.h"
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : Engine
# >    File : Code.cpp
# ======================================================================================== #
*/

//unsigned char UwWeaponBaseParams::GetCrosshairType ( struct FString szValue )
//{
//	static UFunction* pGetCrosshairType = 0;
//	UwWeaponBaseParams_execGetCrosshairType_Parms parms;
//
//	if ( !pGetCrosshairType )
//		pGetCrosshairType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponBaseParams.GetCrosshairType" );
//
//	parms.szValue = szValue;
//	this->ProcessEvent ( pGetCrosshairType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char UwWeaponBaseParams::GetReloadType ( struct FString szValue )
//{
//	static UFunction* pGetReloadType = 0;
//	UwWeaponBaseParams_execGetReloadType_Parms parms;
//
//	if ( !pGetReloadType )
//		pGetReloadType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponBaseParams.GetReloadType" );
//
//	parms.szValue = szValue;
//	this->ProcessEvent ( pGetReloadType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char UwWeaponBaseParams::GetProjMoveType ( struct FString szValue )
//{
//	static UFunction* pGetProjMoveType = 0;
//	UwWeaponBaseParams_execGetProjMoveType_Parms parms;
//
//	if ( !pGetProjMoveType )
//		pGetProjMoveType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponBaseParams.GetProjMoveType" );
//
//	parms.szValue = szValue;
//	this->ProcessEvent ( pGetProjMoveType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char UwWeaponBaseParams::GetBulletType ( struct FString szValue )
//{
//	static UFunction* pGetBulletType = 0;
//	UwWeaponBaseParams_execGetBulletType_Parms parms;
//
//	if ( !pGetBulletType )
//		pGetBulletType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponBaseParams.GetBulletType" );
//
//	parms.szValue = szValue;
//	this->ProcessEvent ( pGetBulletType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwWeaponManager::PrecacheSound (  )
//{
//	static UFunction* pPrecacheSound = 0;
//	UwWeaponManager_execPrecacheSound_Parms parms;
//
//	if ( !pPrecacheSound )
//		pPrecacheSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.PrecacheSound" );
//
//	this->ProcessEvent ( pPrecacheSound, &parms, NULL );
//
//}
//
//void UwWeaponManager::PrecacheMaterials ( class ALevelInfo* Level )
//{
//	static UFunction* pPrecacheMaterials = 0;
//	UwWeaponManager_execPrecacheMaterials_Parms parms;
//
//	if ( !pPrecacheMaterials )
//		pPrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.PrecacheMaterials" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pPrecacheMaterials, &parms, NULL );
//
//}
//
//void UwWeaponManager::PrecacheClasses (  )
//{
//	static UFunction* pPrecacheClasses = 0;
//	UwWeaponManager_execPrecacheClasses_Parms parms;
//
//	if ( !pPrecacheClasses )
//		pPrecacheClasses = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.PrecacheClasses" );
//
//	this->ProcessEvent ( pPrecacheClasses, &parms, NULL );
//
//}
//
//class UwWeaponBaseParams* UwWeaponManager::eventGetBaseParam ( int id )
//{
//	static UFunction* pGetBaseParam = 0;
//	UwWeaponManager_eventGetBaseParam_Parms parms;
//
//	if ( !pGetBaseParam )
//		pGetBaseParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.GetBaseParam" );
//
//	parms.id = id;
//	this->ProcessEvent ( pGetBaseParam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwWeaponManager::LoadWeaponExParams (  )
//{
//	static UFunction* pLoadWeaponExParams = 0;
//	UwWeaponManager_execLoadWeaponExParams_Parms parms;
//
//	if ( !pLoadWeaponExParams )
//		pLoadWeaponExParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.LoadWeaponExParams" );
//
//	this->ProcessEvent ( pLoadWeaponExParams, &parms, NULL );
//
//}
//
//void UwWeaponManager::AddParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddParams = 0;
//	UwWeaponManager_execAddParams_Parms parms;
//
//	if ( !pAddParams )
//		pAddParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.AddParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddParams, &parms, NULL );
//
//}
//
//void UwWeaponManager::LoadWeaponParams (  )
//{
//	static UFunction* pLoadWeaponParams = 0;
//	UwWeaponManager_execLoadWeaponParams_Parms parms;
//
//	if ( !pLoadWeaponParams )
//		pLoadWeaponParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.LoadWeaponParams" );
//
//	this->ProcessEvent ( pLoadWeaponParams, &parms, NULL );
//
//}
//
//void UwWeaponManager::AddWeaponRecoilParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddWeaponRecoilParams = 0;
//	UwWeaponManager_execAddWeaponRecoilParams_Parms parms;
//
//	if ( !pAddWeaponRecoilParams )
//		pAddWeaponRecoilParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.AddWeaponRecoilParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddWeaponRecoilParams, &parms, NULL );
//
//}
//
//void UwWeaponManager::LoadWeaponRecoilParams (  )
//{
//	static UFunction* pLoadWeaponRecoilParams = 0;
//	UwWeaponManager_execLoadWeaponRecoilParams_Parms parms;
//
//	if ( !pLoadWeaponRecoilParams )
//		pLoadWeaponRecoilParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.LoadWeaponRecoilParams" );
//
//	this->ProcessEvent ( pLoadWeaponRecoilParams, &parms, NULL );
//
//}
//
//class UClass* UwWeaponManager::GetRes ( struct FString szRes )
//{
//	static UFunction* pGetRes = 0;
//	UwWeaponManager_execGetRes_Parms parms;
//
//	if ( !pGetRes )
//		pGetRes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.GetRes" );
//
//	parms.szRes = szRes;
//	this->ProcessEvent ( pGetRes, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwWeaponManager::eventInitWeaponPrecacheClasses (  )
//{
//	static UFunction* pInitWeaponPrecacheClasses = 0;
//	UwWeaponManager_eventInitWeaponPrecacheClasses_Parms parms;
//
//	if ( !pInitWeaponPrecacheClasses )
//		pInitWeaponPrecacheClasses = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.InitWeaponPrecacheClasses" );
//
//	this->ProcessEvent ( pInitWeaponPrecacheClasses, &parms, NULL );
//
//}
//
//void UwWeaponManager::eventLoadWeaponRes (  )
//{
//	static UFunction* pLoadWeaponRes = 0;
//	UwWeaponManager_eventLoadWeaponRes_Parms parms;
//
//	if ( !pLoadWeaponRes )
//		pLoadWeaponRes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.LoadWeaponRes" );
//
//	this->ProcessEvent ( pLoadWeaponRes, &parms, NULL );
//
//}
//
//void UwWeaponManager::eventDestroyScript (  )
//{
//	static UFunction* pDestroyScript = 0;
//	UwWeaponManager_eventDestroyScript_Parms parms;
//
//	if ( !pDestroyScript )
//		pDestroyScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.DestroyScript" );
//
//	this->ProcessEvent ( pDestroyScript, &parms, NULL );
//
//}
//
//void UwWeaponManager::eventInitScript (  )
//{
//	static UFunction* pInitScript = 0;
//	UwWeaponManager_eventInitScript_Parms parms;
//
//	if ( !pInitScript )
//		pInitScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponManager.InitScript" );
//
//	this->ProcessEvent ( pInitScript, &parms, NULL );
//
//}
//
//void UObjectPool::Shrink (  )
//{
//	static UFunction* pShrink = 0;
//	UObjectPool_execShrink_Parms parms;
//
//	if ( !pShrink )
//		pShrink = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ObjectPool.Shrink" );
//
//	this->ProcessEvent ( pShrink, &parms, NULL );
//
//}
//
//class UObject* UObjectPool::FreeObjectDupCheck ( class UObject* obj )
//{
//	static UFunction* pFreeObjectDupCheck = 0;
//	UObjectPool_execFreeObjectDupCheck_Parms parms;
//
//	if ( !pFreeObjectDupCheck )
//		pFreeObjectDupCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ObjectPool.FreeObjectDupCheck" );
//
//	parms.obj = obj;
//	this->ProcessEvent ( pFreeObjectDupCheck, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UObject* UObjectPool::FreeObject ( class UObject* obj )
//{
//	static UFunction* pFreeObject = 0;
//	UObjectPool_execFreeObject_Parms parms;
//
//	if ( !pFreeObject )
//		pFreeObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ObjectPool.FreeObject" );
//
//	parms.obj = obj;
//	this->ProcessEvent ( pFreeObject, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UObject* UObjectPool::AllocateObject ( class UClass* ObjectClass )
//{
//	static UFunction* pAllocateObject = 0;
//	UObjectPool_execAllocateObject_Parms parms;
//
//	if ( !pAllocateObject )
//		pAllocateObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ObjectPool.AllocateObject" );
//
//	parms.ObjectClass = ObjectClass;
//	this->ProcessEvent ( pAllocateObject, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UObject* UObjectPool::PopObject ( class UClass* ObjectClass )
//{
//	static UFunction* pPopObject = 0;
//	UObjectPool_execPopObject_Parms parms;
//
//	if ( !pPopObject )
//		pPopObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ObjectPool.PopObject" );
//
//	parms.ObjectClass = ObjectClass;
//	this->ProcessEvent ( pPopObject, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::OnEndRound (  )
//{
//	static UFunction* pOnEndRound = 0;
//	AActor_execOnEndRound_Parms parms;
//
//	if ( !pOnEndRound )
//		pOnEndRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.OnEndRound" );
//
//	this->ProcessEvent ( pOnEndRound, &parms, NULL );
//
//}
//
//void AActor::OnBeginRound (  )
//{
//	static UFunction* pOnBeginRound = 0;
//	AActor_execOnBeginRound_Parms parms;
//
//	if ( !pOnBeginRound )
//		pOnBeginRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.OnBeginRound" );
//
//	this->ProcessEvent ( pOnBeginRound, &parms, NULL );
//
//}
//
//void AActor::eventSunLightDirectionUpdate ( struct FVector direction )
//{
//	static UFunction* pSunLightDirectionUpdate = 0;
//	AActor_eventSunLightDirectionUpdate_Parms parms;
//
//	if ( !pSunLightDirectionUpdate )
//		pSunLightDirectionUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SunLightDirectionUpdate" );
//
//	parms.direction = direction;
//	this->ProcessEvent ( pSunLightDirectionUpdate, &parms, NULL );
//
//}
//
//bool AActor::BlocksShotAt ( class AActor* Other )
//{
//	static UFunction* pBlocksShotAt = 0;
//	AActor_execBlocksShotAt_Parms parms;
//
//	if ( !pBlocksShotAt )
//		pBlocksShotAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.BlocksShotAt" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pBlocksShotAt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::PawnBaseDied (  )
//{
//	static UFunction* pPawnBaseDied = 0;
//	AActor_execPawnBaseDied_Parms parms;
//
//	if ( !pPawnBaseDied )
//		pPawnBaseDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PawnBaseDied" );
//
//	this->ProcessEvent ( pPawnBaseDied, &parms, NULL );
//
//}
//
//void AActor::RecoverFromHostChange (  )
//{
//	static UFunction* pRecoverFromHostChange = 0;
//	AActor_execRecoverFromHostChange_Parms parms;
//
//	if ( !pRecoverFromHostChange )
//		pRecoverFromHostChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.RecoverFromHostChange" );
//
//	this->ProcessEvent ( pRecoverFromHostChange, &parms, NULL );
//
//}
//
//float AActor::GetAngleH ( struct FVector V )
//{
//	static UFunction* pGetAngleH = 0;
//	AActor_execGetAngleH_Parms parms;
//
//	if ( !pGetAngleH )
//		pGetAngleH = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetAngleH" );
//
//	parms.V = V;
//	this->ProcessEvent ( pGetAngleH, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AActor::GetDotH ( struct FVector V )
//{
//	static UFunction* pGetDotH = 0;
//	AActor_execGetDotH_Parms parms;
//
//	if ( !pGetDotH )
//		pGetDotH = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetDotH" );
//
//	parms.V = V;
//	this->ProcessEvent ( pGetDotH, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::IsStationary (  )
//{
//	static UFunction* pIsStationary = 0;
//	AActor_execIsStationary_Parms parms;
//
//	if ( !pIsStationary )
//		pIsStationary = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.IsStationary" );
//
//	this->ProcessEvent ( pIsStationary, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::InitBot ( int Grade )
//{
//	static UFunction* pInitBot = 0;
//	AActor_execInitBot_Parms parms;
//
//	if ( !pInitBot )
//		pInitBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.InitBot" );
//
//	parms.Grade = Grade;
//	this->ProcessEvent ( pInitBot, &parms, NULL );
//
//}
//
//void AActor::eventrpclog ( struct FString rpc )
//{
//	static UFunction* prpclog = 0;
//	AActor_eventrpclog_Parms parms;
//
//	if ( !prpclog )
//		prpclog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.rpclog" );
//
//	parms.rpc = rpc;
//	this->ProcessEvent ( prpclog, &parms, NULL );
//
//}
//
//void AActor::eventdblog ( struct FString Msg )
//{
//	static UFunction* pdblog = 0;
//	AActor_eventdblog_Parms parms;
//
//	if ( !pdblog )
//		pdblog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.dblog" );
//
//	parms.Msg = Msg;
//	this->ProcessEvent ( pdblog, &parms, NULL );
//
//}
//
//void AActor::crlog ( struct FString Msg )
//{
//	static UFunction* pcrlog = 0;
//	AActor_execcrlog_Parms parms;
//
//	if ( !pcrlog )
//		pcrlog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.crlog" );
//
//	parms.Msg = Msg;
//	this->ProcessEvent ( pcrlog, &parms, NULL );
//
//}
//
//void AActor::eventclog ( struct FString Msg )
//{
//	static UFunction* pclog = 0;
//	AActor_eventclog_Parms parms;
//
//	if ( !pclog )
//		pclog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.clog" );
//
//	parms.Msg = Msg;
//	this->ProcessEvent ( pclog, &parms, NULL );
//
//}
//
//void AActor::eventctlog ( struct FString Msg )
//{
//	static UFunction* pctlog = 0;
//	AActor_eventctlog_Parms parms;
//
//	if ( !pctlog )
//		pctlog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.ctlog" );
//
//	parms.Msg = Msg;
//	this->ProcessEvent ( pctlog, &parms, NULL );
//
//}
//
//void AActor::eventalllog ( struct FString Msg )
//{
//	static UFunction* palllog = 0;
//	AActor_eventalllog_Parms parms;
//
//	if ( !palllog )
//		palllog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.alllog" );
//
//	parms.Msg = Msg;
//	this->ProcessEvent ( palllog, &parms, NULL );
//
//}
//
//void AActor::NotifyLocalPlayerTeamReceived (  )
//{
//	static UFunction* pNotifyLocalPlayerTeamReceived = 0;
//	AActor_execNotifyLocalPlayerTeamReceived_Parms parms;
//
//	if ( !pNotifyLocalPlayerTeamReceived )
//		pNotifyLocalPlayerTeamReceived = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.NotifyLocalPlayerTeamReceived" );
//
//	this->ProcessEvent ( pNotifyLocalPlayerTeamReceived, &parms, NULL );
//
//}
//
//void AActor::NotifyLocalPlayerDead ( class APlayerController* PC )
//{
//	static UFunction* pNotifyLocalPlayerDead = 0;
//	AActor_execNotifyLocalPlayerDead_Parms parms;
//
//	if ( !pNotifyLocalPlayerDead )
//		pNotifyLocalPlayerDead = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.NotifyLocalPlayerDead" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pNotifyLocalPlayerDead, &parms, NULL );
//
//}
//
//void AActor::SetDelayedDamageInstigatorController ( class AController* C )
//{
//	static UFunction* pSetDelayedDamageInstigatorController = 0;
//	AActor_execSetDelayedDamageInstigatorController_Parms parms;
//
//	if ( !pSetDelayedDamageInstigatorController )
//		pSetDelayedDamageInstigatorController = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetDelayedDamageInstigatorController" );
//
//	parms.C = C;
//	this->ProcessEvent ( pSetDelayedDamageInstigatorController, &parms, NULL );
//
//}
//
//bool AActor::TeamLink ( int TeamNum )
//{
//	static UFunction* pTeamLink = 0;
//	AActor_execTeamLink_Parms parms;
//
//	if ( !pTeamLink )
//		pTeamLink = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TeamLink" );
//
//	parms.TeamNum = TeamNum;
//	this->ProcessEvent ( pTeamLink, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::SelfTriggered (  )
//{
//	static UFunction* pSelfTriggered = 0;
//	AActor_execSelfTriggered_Parms parms;
//
//	if ( !pSelfTriggered )
//		pSelfTriggered = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SelfTriggered" );
//
//	this->ProcessEvent ( pSelfTriggered, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::EffectIsRelevant ( struct FVector SpawnLocation, bool bForceDedicated )
//{
//	static UFunction* pEffectIsRelevant = 0;
//	AActor_execEffectIsRelevant_Parms parms;
//
//	if ( !pEffectIsRelevant )
//		pEffectIsRelevant = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.EffectIsRelevant" );
//
//	parms.SpawnLocation = SpawnLocation;
//	parms.bForceDedicated = bForceDedicated;
//	this->ProcessEvent ( pEffectIsRelevant, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation )
//{
//	static UFunction* pCheckMaxEffectDistance = 0;
//	AActor_execCheckMaxEffectDistance_Parms parms;
//
//	if ( !pCheckMaxEffectDistance )
//		pCheckMaxEffectDistance = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.CheckMaxEffectDistance" );
//
//	parms.P = P;
//	parms.SpawnLocation = SpawnLocation;
//	this->ProcessEvent ( pCheckMaxEffectDistance, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::SetOverlayMaterial ( class UMaterial* mat, float Time, bool bOverride )
//{
//	static UFunction* pSetOverlayMaterial = 0;
//	AActor_execSetOverlayMaterial_Parms parms;
//
//	if ( !pSetOverlayMaterial )
//		pSetOverlayMaterial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetOverlayMaterial" );
//
//	parms.mat = mat;
//	parms.Time = Time;
//	parms.bOverride = bOverride;
//	this->ProcessEvent ( pSetOverlayMaterial, &parms, NULL );
//
//}
//
//void AActor::Crash (  )
//{
//	static UFunction* pCrash = 0;
//	AActor_execCrash_Parms parms;
//
//	if ( !pCrash )
//		pCrash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Crash" );
//
//	this->ProcessEvent ( pCrash, &parms, NULL );
//
//}
//
//struct FVector AActor::GetCollisionExtent (  )
//{
//	static UFunction* pGetCollisionExtent = 0;
//	AActor_execGetCollisionExtent_Parms parms;
//
//	if ( !pGetCollisionExtent )
//		pGetCollisionExtent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetCollisionExtent" );
//
//	this->ProcessEvent ( pGetCollisionExtent, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::CanSplash (  )
//{
//	static UFunction* pCanSplash = 0;
//	AActor_execCanSplash_Parms parms;
//
//	if ( !pCanSplash )
//		pCanSplash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.CanSplash" );
//
//	this->ProcessEvent ( pCanSplash, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::PlayTeleportEffect ( bool bOut, bool bSound )
//{
//	static UFunction* pPlayTeleportEffect = 0;
//	AActor_execPlayTeleportEffect_Parms parms;
//
//	if ( !pPlayTeleportEffect )
//		pPlayTeleportEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PlayTeleportEffect" );
//
//	parms.bOut = bOut;
//	parms.bSound = bSound;
//	this->ProcessEvent ( pPlayTeleportEffect, &parms, NULL );
//
//}
//
//bool AActor::IsInPain (  )
//{
//	static UFunction* pIsInPain = 0;
//	AActor_execIsInPain_Parms parms;
//
//	if ( !pIsInPain )
//		pIsInPain = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.IsInPain" );
//
//	this->ProcessEvent ( pIsInPain, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::IsInVolume ( class AVolume* aVolume )
//{
//	static UFunction* pIsInVolume = 0;
//	AActor_execIsInVolume_Parms parms;
//
//	if ( !pIsInVolume )
//		pIsInVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.IsInVolume" );
//
//	parms.aVolume = aVolume;
//	this->ProcessEvent ( pIsInVolume, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::UntriggerEvent ( struct FName EventName, class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pUntriggerEvent = 0;
//	AActor_execUntriggerEvent_Parms parms;
//
//	if ( !pUntriggerEvent )
//		pUntriggerEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.UntriggerEvent" );
//
//	parms.EventName = EventName;
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pUntriggerEvent, &parms, NULL );
//
//}
//
//void AActor::eventTriggerEvent ( struct FName EventName, class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTriggerEvent = 0;
//	AActor_eventTriggerEvent_Parms parms;
//
//	if ( !pTriggerEvent )
//		pTriggerEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TriggerEvent" );
//
//	parms.EventName = EventName;
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTriggerEvent, &parms, NULL );
//
//}
//
//void AActor::Reset (  )
//{
//	static UFunction* pReset = 0;
//	AActor_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void AActor::StartInterpolation (  )
//{
//	static UFunction* pStartInterpolation = 0;
//	AActor_execStartInterpolation_Parms parms;
//
//	if ( !pStartInterpolation )
//		pStartInterpolation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.StartInterpolation" );
//
//	this->ProcessEvent ( pStartInterpolation, &parms, NULL );
//
//}
//
//bool AActor::TouchingActor ( class AActor* A )
//{
//	static UFunction* pTouchingActor = 0;
//	AActor_execTouchingActor_Parms parms;
//
//	if ( !pTouchingActor )
//		pTouchingActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TouchingActor" );
//
//	parms.A = A;
//	this->ProcessEvent ( pTouchingActor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::NearSpot ( struct FVector Spot )
//{
//	static UFunction* pNearSpot = 0;
//	AActor_execNearSpot_Parms parms;
//
//	if ( !pNearSpot )
//		pNearSpot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.NearSpot" );
//
//	parms.Spot = Spot;
//	this->ProcessEvent ( pNearSpot, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	AActor_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//struct FString AActor::GetDebugName (  )
//{
//	static UFunction* pGetDebugName = 0;
//	AActor_execGetDebugName_Parms parms;
//
//	if ( !pGetDebugName )
//		pGetDebugName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetDebugName" );
//
//	this->ProcessEvent ( pGetDebugName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::SetGRI ( class AGameReplicationInfo* GRI )
//{
//	static UFunction* pSetGRI = 0;
//	AActor_execSetGRI_Parms parms;
//
//	if ( !pSetGRI )
//		pSetGRI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetGRI" );
//
//	parms.GRI = GRI;
//	this->ProcessEvent ( pSetGRI, &parms, NULL );
//
//}
//
//void AActor::MatchStarting (  )
//{
//	static UFunction* pMatchStarting = 0;
//	AActor_execMatchStarting_Parms parms;
//
//	if ( !pMatchStarting )
//		pMatchStarting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.MatchStarting" );
//
//	this->ProcessEvent ( pMatchStarting, &parms, NULL );
//
//}
//
//struct FString AActor::GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2 )
//{
//	static UFunction* pGetLocalString = 0;
//	AActor_execGetLocalString_Parms parms;
//
//	if ( !pGetLocalString )
//		pGetLocalString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetLocalString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	this->ProcessEvent ( pGetLocalString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::SetDefaultDisplayProperties (  )
//{
//	static UFunction* pSetDefaultDisplayProperties = 0;
//	AActor_execSetDefaultDisplayProperties_Parms parms;
//
//	if ( !pSetDefaultDisplayProperties )
//		pSetDefaultDisplayProperties = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetDefaultDisplayProperties" );
//
//	this->ProcessEvent ( pSetDefaultDisplayProperties, &parms, NULL );
//
//}
//
//void AActor::SetDisplayProperties ( unsigned char NewStyle, class UMaterial* NewTexture, bool bLighting )
//{
//	static UFunction* pSetDisplayProperties = 0;
//	AActor_execSetDisplayProperties_Parms parms;
//
//	if ( !pSetDisplayProperties )
//		pSetDisplayProperties = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetDisplayProperties" );
//
//	parms.NewStyle = NewStyle;
//	parms.NewTexture = NewTexture;
//	parms.bLighting = bLighting;
//	this->ProcessEvent ( pSetDisplayProperties, &parms, NULL );
//
//}
//
//struct FString AActor::GetHumanReadableName (  )
//{
//	static UFunction* pGetHumanReadableName = 0;
//	AActor_execGetHumanReadableName_Parms parms;
//
//	if ( !pGetHumanReadableName )
//		pGetHumanReadableName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetHumanReadableName" );
//
//	this->ProcessEvent ( pGetHumanReadableName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::POVChanged ( class APlayerController* PC, bool bBehindViewChanged )
//{
//	static UFunction* pPOVChanged = 0;
//	AActor_execPOVChanged_Parms parms;
//
//	if ( !pPOVChanged )
//		pPOVChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.POVChanged" );
//
//	parms.PC = PC;
//	parms.bBehindViewChanged = bBehindViewChanged;
//	this->ProcessEvent ( pPOVChanged, &parms, NULL );
//
//}
//
//void AActor::BecomeViewTarget (  )
//{
//	static UFunction* pBecomeViewTarget = 0;
//	AActor_execBecomeViewTarget_Parms parms;
//
//	if ( !pBecomeViewTarget )
//		pBecomeViewTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.BecomeViewTarget" );
//
//	this->ProcessEvent ( pBecomeViewTarget, &parms, NULL );
//
//}
//
//void AActor::eventTravelPostAccept (  )
//{
//	static UFunction* pTravelPostAccept = 0;
//	AActor_eventTravelPostAccept_Parms parms;
//
//	if ( !pTravelPostAccept )
//		pTravelPostAccept = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TravelPostAccept" );
//
//	this->ProcessEvent ( pTravelPostAccept, &parms, NULL );
//
//}
//
//void AActor::eventTravelPreAccept (  )
//{
//	static UFunction* pTravelPreAccept = 0;
//	AActor_eventTravelPreAccept_Parms parms;
//
//	if ( !pTravelPreAccept )
//		pTravelPreAccept = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TravelPreAccept" );
//
//	this->ProcessEvent ( pTravelPreAccept, &parms, NULL );
//
//}
//
//bool AActor::CheckForErrors (  )
//{
//	static UFunction* pCheckForErrors = 0;
//	AActor_execCheckForErrors_Parms parms;
//
//	if ( !pCheckForErrors )
//		pCheckForErrors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.CheckForErrors" );
//
//	this->ProcessEvent ( pCheckForErrors, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::HurtRadius ( float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HitLocation )
//{
//	static UFunction* pHurtRadius = 0;
//	AActor_execHurtRadius_Parms parms;
//
//	if ( !pHurtRadius )
//		pHurtRadius = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.HurtRadius" );
//
//	parms.DamageAmount = DamageAmount;
//	parms.DamageRadius = DamageRadius;
//	parms.DamageType = DamageType;
//	parms.Momentum = Momentum;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pHurtRadius, &parms, NULL );
//
//}
//
//void AActor::PrecacheAnnouncer ( class AAnnouncerVoice* V, bool bRewardSounds )
//{
//	static UFunction* pPrecacheAnnouncer = 0;
//	AActor_execPrecacheAnnouncer_Parms parms;
//
//	if ( !pPrecacheAnnouncer )
//		pPrecacheAnnouncer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PrecacheAnnouncer" );
//
//	parms.V = V;
//	parms.bRewardSounds = bRewardSounds;
//	this->ProcessEvent ( pPrecacheAnnouncer, &parms, NULL );
//
//}
//
//void AActor::UpdateAnnouncements (  )
//{
//	static UFunction* pUpdateAnnouncements = 0;
//	AActor_execUpdateAnnouncements_Parms parms;
//
//	if ( !pUpdateAnnouncements )
//		pUpdateAnnouncements = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.UpdateAnnouncements" );
//
//	this->ProcessEvent ( pUpdateAnnouncements, &parms, NULL );
//
//}
//
//void AActor::UpdatePrecacheSkeletalMeshes (  )
//{
//	static UFunction* pUpdatePrecacheSkeletalMeshes = 0;
//	AActor_execUpdatePrecacheSkeletalMeshes_Parms parms;
//
//	if ( !pUpdatePrecacheSkeletalMeshes )
//		pUpdatePrecacheSkeletalMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.UpdatePrecacheSkeletalMeshes" );
//
//	this->ProcessEvent ( pUpdatePrecacheSkeletalMeshes, &parms, NULL );
//
//}
//
//void AActor::UpdatePrecacheStaticMeshes (  )
//{
//	static UFunction* pUpdatePrecacheStaticMeshes = 0;
//	AActor_execUpdatePrecacheStaticMeshes_Parms parms;
//
//	if ( !pUpdatePrecacheStaticMeshes )
//		pUpdatePrecacheStaticMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.UpdatePrecacheStaticMeshes" );
//
//	this->ProcessEvent ( pUpdatePrecacheStaticMeshes, &parms, NULL );
//
//}
//
//void AActor::UpdatePrecacheMaterials (  )
//{
//	static UFunction* pUpdatePrecacheMaterials = 0;
//	AActor_execUpdatePrecacheMaterials_Parms parms;
//
//	if ( !pUpdatePrecacheMaterials )
//		pUpdatePrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.UpdatePrecacheMaterials" );
//
//	this->ProcessEvent ( pUpdatePrecacheMaterials, &parms, NULL );
//
//}
//
//void AActor::eventPostNetBeginPlay (  )
//{
//	static UFunction* pPostNetBeginPlay = 0;
//	AActor_eventPostNetBeginPlay_Parms parms;
//
//	if ( !pPostNetBeginPlay )
//		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PostNetBeginPlay" );
//
//	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );
//
//}
//
//void AActor::eventSetGRIInitialState (  )
//{
//	static UFunction* pSetGRIInitialState = 0;
//	AActor_eventSetGRIInitialState_Parms parms;
//
//	if ( !pSetGRIInitialState )
//		pSetGRIInitialState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetGRIInitialState" );
//
//	this->ProcessEvent ( pSetGRIInitialState, &parms, NULL );
//
//}
//
//void AActor::eventSetInitialState (  )
//{
//	static UFunction* pSetInitialState = 0;
//	AActor_eventSetInitialState_Parms parms;
//
//	if ( !pSetInitialState )
//		pSetInitialState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetInitialState" );
//
//	this->ProcessEvent ( pSetInitialState, &parms, NULL );
//
//}
//
//void AActor::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AActor_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AActor::eventBroadcastLocalizedMessage ( class UClass* MessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pBroadcastLocalizedMessage = 0;
//	AActor_eventBroadcastLocalizedMessage_Parms parms;
//
//	if ( !pBroadcastLocalizedMessage )
//		pBroadcastLocalizedMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.BroadcastLocalizedMessage" );
//
//	parms.MessageClass = MessageClass;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pBroadcastLocalizedMessage, &parms, NULL );
//
//}
//
//void AActor::ForceBegin (  )
//{
//	static UFunction* pForceBegin = 0;
//	AActor_execForceBegin_Parms parms;
//
//	if ( !pForceBegin )
//		pForceBegin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.ForceBegin" );
//
//	this->ProcessEvent ( pForceBegin, &parms, NULL );
//
//}
//
//void AActor::eventPreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AActor_eventPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void AActor::eventRenderTexture ( class UScriptedTexture* Tex )
//{
//	static UFunction* pRenderTexture = 0;
//	AActor_eventRenderTexture_Parms parms;
//
//	if ( !pRenderTexture )
//		pRenderTexture = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.RenderTexture" );
//
//	parms.Tex = Tex;
//	this->ProcessEvent ( pRenderTexture, &parms, NULL );
//
//}
//
//void AActor::RenderOverlays ( class UCanvas* Canvas )
//{
//	static UFunction* pRenderOverlays = 0;
//	AActor_execRenderOverlays_Parms parms;
//
//	if ( !pRenderOverlays )
//		pRenderOverlays = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.RenderOverlays" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pRenderOverlays, &parms, NULL );
//
//}
//
//void AActor::eventRecoverFromBadStateCode (  )
//{
//	static UFunction* pRecoverFromBadStateCode = 0;
//	AActor_eventRecoverFromBadStateCode_Parms parms;
//
//	if ( !pRecoverFromBadStateCode )
//		pRecoverFromBadStateCode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.RecoverFromBadStateCode" );
//
//	this->ProcessEvent ( pRecoverFromBadStateCode, &parms, NULL );
//
//}
//
//class FColor AActor::Multiply_ColorFloat ( class FColor A, float B )
//{
//	static UFunction* pMultiply_ColorFloat = 0;
//	AActor_execMultiply_ColorFloat_Parms parms;
//
//	if ( !pMultiply_ColorFloat )
//		pMultiply_ColorFloat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Multiply_ColorFloat" );
//
//	WORD iNative = pMultiply_ColorFloat->iNative;
//	pMultiply_ColorFloat->FunctionFlags &= ~FUNC_Native;
//	pMultiply_ColorFloat->iNative = 0;
//
//	parms.A = A;
//	parms.B = B;
//	this->ProcessEvent ( pMultiply_ColorFloat, &parms, NULL );
//
//	pMultiply_ColorFloat->iNative = iNative;
//	pMultiply_ColorFloat->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//class FColor AActor::Add_ColorColor ( class FColor A, class FColor B )
//{
//	static UFunction* pAdd_ColorColor = 0;
//	AActor_execAdd_ColorColor_Parms parms;
//
//	if ( !pAdd_ColorColor )
//		pAdd_ColorColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Add_ColorColor" );
//
//	WORD iNative = pAdd_ColorColor->iNative;
//	pAdd_ColorColor->FunctionFlags &= ~FUNC_Native;
//	pAdd_ColorColor->iNative = 0;
//
//	parms.A = A;
//	parms.B = B;
//	this->ProcessEvent ( pAdd_ColorColor, &parms, NULL );
//
//	pAdd_ColorColor->iNative = iNative;
//	pAdd_ColorColor->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//class FColor AActor::Multiply_FloatColor ( float A, class FColor B )
//{
//	static UFunction* pMultiply_FloatColor = 0;
//	AActor_execMultiply_FloatColor_Parms parms;
//
//	if ( !pMultiply_FloatColor )
//		pMultiply_FloatColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Multiply_FloatColor" );
//
//	WORD iNative = pMultiply_FloatColor->iNative;
//	pMultiply_FloatColor->FunctionFlags &= ~FUNC_Native;
//	pMultiply_FloatColor->iNative = 0;
//
//	parms.A = A;
//	parms.B = B;
//	this->ProcessEvent ( pMultiply_FloatColor, &parms, NULL );
//
//	pMultiply_FloatColor->iNative = iNative;
//	pMultiply_FloatColor->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//class FColor AActor::Subtract_ColorColor ( class FColor A, class FColor B )
//{
//	static UFunction* pSubtract_ColorColor = 0;
//	AActor_execSubtract_ColorColor_Parms parms;
//
//	if ( !pSubtract_ColorColor )
//		pSubtract_ColorColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Subtract_ColorColor" );
//
//	WORD iNative = pSubtract_ColorColor->iNative;
//	pSubtract_ColorColor->FunctionFlags &= ~FUNC_Native;
//	pSubtract_ColorColor->iNative = 0;
//
//	parms.A = A;
//	parms.B = B;
//	this->ProcessEvent ( pSubtract_ColorColor, &parms, NULL );
//
//	pSubtract_ColorColor->iNative = iNative;
//	pSubtract_ColorColor->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//void AActor::IterateObjectArray ( class TArray< class UObject* > ObjectArray, class UClass* baseClass, class UObject** Object )
//{
//	static UFunction* pIterateObjectArray = 0;
//	AActor_execIterateObjectArray_Parms parms;
//
//	if ( !pIterateObjectArray )
//		pIterateObjectArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.IterateObjectArray" );
//
//	parms.ObjectArray = ObjectArray;
//	parms.baseClass = baseClass;
//	this->ProcessEvent ( pIterateObjectArray, &parms, NULL );
//
//	*Object = parms.Object;
//}
//
//void AActor::IterateActorArray ( class TArray< class AActor* > ActorArray, class UClass* baseClass, struct FName MatchTag, class AActor** Actor )
//{
//	static UFunction* pIterateActorArray = 0;
//	AActor_execIterateActorArray_Parms parms;
//
//	if ( !pIterateActorArray )
//		pIterateActorArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.IterateActorArray" );
//
//	parms.ActorArray = ActorArray;
//	parms.baseClass = baseClass;
//	parms.MatchTag = MatchTag;
//	this->ProcessEvent ( pIterateActorArray, &parms, NULL );
//
//	*Actor = parms.Actor;
//}
//
//void AActor::CollidingActors ( class UClass* baseClass, float Radius, struct FVector loc, class AActor** Actor )
//{
//	static UFunction* pCollidingActors = 0;
//	AActor_execCollidingActors_Parms parms;
//
//	if ( !pCollidingActors )
//		pCollidingActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.CollidingActors" );
//
//	WORD iNative = pCollidingActors->iNative;
//	pCollidingActors->FunctionFlags &= ~FUNC_Native;
//	pCollidingActors->iNative = 0;
//
//	parms.baseClass = baseClass;
//	parms.Radius = Radius;
//	parms.loc = loc;
//	this->ProcessEvent ( pCollidingActors, &parms, NULL );
//
//	pCollidingActors->iNative = iNative;
//	pCollidingActors->FunctionFlags |= FUNC_Native;
//	*Actor = parms.Actor;
//}
//
//void AActor::VisibleCollidingActors ( class UClass* baseClass, float Radius, struct FVector loc, bool bIgnoreHidden, class AActor** Actor )
//{
//	static UFunction* pVisibleCollidingActors = 0;
//	AActor_execVisibleCollidingActors_Parms parms;
//
//	if ( !pVisibleCollidingActors )
//		pVisibleCollidingActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.VisibleCollidingActors" );
//
//	WORD iNative = pVisibleCollidingActors->iNative;
//	pVisibleCollidingActors->FunctionFlags &= ~FUNC_Native;
//	pVisibleCollidingActors->iNative = 0;
//
//	parms.baseClass = baseClass;
//	parms.Radius = Radius;
//	parms.loc = loc;
//	parms.bIgnoreHidden = bIgnoreHidden;
//	this->ProcessEvent ( pVisibleCollidingActors, &parms, NULL );
//
//	pVisibleCollidingActors->iNative = iNative;
//	pVisibleCollidingActors->FunctionFlags |= FUNC_Native;
//	*Actor = parms.Actor;
//}
//
//void AActor::VisibleActors ( class UClass* baseClass, float Radius, struct FVector loc, class AActor** Actor )
//{
//	static UFunction* pVisibleActors = 0;
//	AActor_execVisibleActors_Parms parms;
//
//	if ( !pVisibleActors )
//		pVisibleActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.VisibleActors" );
//
//	WORD iNative = pVisibleActors->iNative;
//	pVisibleActors->FunctionFlags &= ~FUNC_Native;
//	pVisibleActors->iNative = 0;
//
//	parms.baseClass = baseClass;
//	parms.Radius = Radius;
//	parms.loc = loc;
//	this->ProcessEvent ( pVisibleActors, &parms, NULL );
//
//	pVisibleActors->iNative = iNative;
//	pVisibleActors->FunctionFlags |= FUNC_Native;
//	*Actor = parms.Actor;
//}
//
//void AActor::RadiusActors ( class UClass* baseClass, float Radius, struct FVector loc, class AActor** Actor )
//{
//	static UFunction* pRadiusActors = 0;
//	AActor_execRadiusActors_Parms parms;
//
//	if ( !pRadiusActors )
//		pRadiusActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.RadiusActors" );
//
//	WORD iNative = pRadiusActors->iNative;
//	pRadiusActors->FunctionFlags &= ~FUNC_Native;
//	pRadiusActors->iNative = 0;
//
//	parms.baseClass = baseClass;
//	parms.Radius = Radius;
//	parms.loc = loc;
//	this->ProcessEvent ( pRadiusActors, &parms, NULL );
//
//	pRadiusActors->iNative = iNative;
//	pRadiusActors->FunctionFlags |= FUNC_Native;
//	*Actor = parms.Actor;
//}
//
//void AActor::TraceActors ( class UClass* baseClass, struct FVector End, struct FVector Start, struct FVector Extent, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm )
//{
//	static UFunction* pTraceActors = 0;
//	AActor_execTraceActors_Parms parms;
//
//	if ( !pTraceActors )
//		pTraceActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TraceActors" );
//
//	WORD iNative = pTraceActors->iNative;
//	pTraceActors->FunctionFlags &= ~FUNC_Native;
//	pTraceActors->iNative = 0;
//
//	parms.baseClass = baseClass;
//	parms.End = End;
//	parms.Start = Start;
//	parms.Extent = Extent;
//	this->ProcessEvent ( pTraceActors, &parms, NULL );
//
//	pTraceActors->iNative = iNative;
//	pTraceActors->FunctionFlags |= FUNC_Native;
//	*Actor = parms.Actor;
//	*HitLoc = parms.HitLoc;
//	*HitNorm = parms.HitNorm;
//}
//
//void AActor::TouchingActors ( class UClass* baseClass, class AActor** Actor )
//{
//	static UFunction* pTouchingActors = 0;
//	AActor_execTouchingActors_Parms parms;
//
//	if ( !pTouchingActors )
//		pTouchingActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TouchingActors" );
//
//	WORD iNative = pTouchingActors->iNative;
//	pTouchingActors->FunctionFlags &= ~FUNC_Native;
//	pTouchingActors->iNative = 0;
//
//	parms.baseClass = baseClass;
//	this->ProcessEvent ( pTouchingActors, &parms, NULL );
//
//	pTouchingActors->iNative = iNative;
//	pTouchingActors->FunctionFlags |= FUNC_Native;
//	*Actor = parms.Actor;
//}
//
//void AActor::BasedActors ( class UClass* baseClass, class AActor** Actor )
//{
//	static UFunction* pBasedActors = 0;
//	AActor_execBasedActors_Parms parms;
//
//	if ( !pBasedActors )
//		pBasedActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.BasedActors" );
//
//	WORD iNative = pBasedActors->iNative;
//	pBasedActors->FunctionFlags &= ~FUNC_Native;
//	pBasedActors->iNative = 0;
//
//	parms.baseClass = baseClass;
//	this->ProcessEvent ( pBasedActors, &parms, NULL );
//
//	pBasedActors->iNative = iNative;
//	pBasedActors->FunctionFlags |= FUNC_Native;
//	*Actor = parms.Actor;
//}
//
//void AActor::ChildActors ( class UClass* baseClass, class AActor** Actor )
//{
//	static UFunction* pChildActors = 0;
//	AActor_execChildActors_Parms parms;
//
//	if ( !pChildActors )
//		pChildActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.ChildActors" );
//
//	WORD iNative = pChildActors->iNative;
//	pChildActors->FunctionFlags &= ~FUNC_Native;
//	pChildActors->iNative = 0;
//
//	parms.baseClass = baseClass;
//	this->ProcessEvent ( pChildActors, &parms, NULL );
//
//	pChildActors->iNative = iNative;
//	pChildActors->FunctionFlags |= FUNC_Native;
//	*Actor = parms.Actor;
//}
//
//void AActor::DynamicActors ( class UClass* baseClass, struct FName MatchTag, class AActor** Actor )
//{
//	static UFunction* pDynamicActors = 0;
//	AActor_execDynamicActors_Parms parms;
//
//	if ( !pDynamicActors )
//		pDynamicActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.DynamicActors" );
//
//	WORD iNative = pDynamicActors->iNative;
//	pDynamicActors->FunctionFlags &= ~FUNC_Native;
//	pDynamicActors->iNative = 0;
//
//	parms.baseClass = baseClass;
//	parms.MatchTag = MatchTag;
//	this->ProcessEvent ( pDynamicActors, &parms, NULL );
//
//	pDynamicActors->iNative = iNative;
//	pDynamicActors->FunctionFlags |= FUNC_Native;
//	*Actor = parms.Actor;
//}
//
//void AActor::AllActors ( class UClass* baseClass, struct FName MatchTag, class AActor** Actor )
//{
//	static UFunction* pAllActors = 0;
//	AActor_execAllActors_Parms parms;
//
//	if ( !pAllActors )
//		pAllActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.AllActors" );
//
//	WORD iNative = pAllActors->iNative;
//	pAllActors->FunctionFlags &= ~FUNC_Native;
//	pAllActors->iNative = 0;
//
//	parms.baseClass = baseClass;
//	parms.MatchTag = MatchTag;
//	this->ProcessEvent ( pAllActors, &parms, NULL );
//
//	pAllActors->iNative = iNative;
//	pAllActors->FunctionFlags |= FUNC_Native;
//	*Actor = parms.Actor;
//}
//
//bool AActor::MoveCacheEntry ( struct FString Guid, struct FString NewFilename )
//{
//	static UFunction* pMoveCacheEntry = 0;
//	AActor_execMoveCacheEntry_Parms parms;
//
//	if ( !pMoveCacheEntry )
//		pMoveCacheEntry = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.MoveCacheEntry" );
//
//	parms.Guid = Guid;
//	parms.NewFilename = NewFilename;
//	this->ProcessEvent ( pMoveCacheEntry, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::GetCacheEntry ( int Num, struct FString* Guid, struct FString* fileName )
//{
//	static UFunction* pGetCacheEntry = 0;
//	AActor_execGetCacheEntry_Parms parms;
//
//	if ( !pGetCacheEntry )
//		pGetCacheEntry = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetCacheEntry" );
//
//	parms.Num = Num;
//	this->ProcessEvent ( pGetCacheEntry, &parms, NULL );
//
//	*Guid = parms.Guid;
//	*fileName = parms.fileName;
//	return parms.ReturnValue;
//}
//
//void AActor::GetAllIntDesc ( struct FString MetaClass, class TArray< struct FString >* Entry, class TArray< struct FString >* Description )
//{
//	static UFunction* pGetAllIntDesc = 0;
//	AActor_execGetAllIntDesc_Parms parms;
//
//	if ( !pGetAllIntDesc )
//		pGetAllIntDesc = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetAllIntDesc" );
//
//	parms.MetaClass = MetaClass;
//	this->ProcessEvent ( pGetAllIntDesc, &parms, NULL );
//
//	*Entry = parms.Entry;
//	*Description = parms.Description;
//}
//
//void AActor::GetAllInt ( struct FString MetaClass, class TArray< struct FString > Entries )
//{
//	static UFunction* pGetAllInt = 0;
//	AActor_execGetAllInt_Parms parms;
//
//	if ( !pGetAllInt )
//		pGetAllInt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetAllInt" );
//
//	parms.MetaClass = MetaClass;
//	parms.Entries = Entries;
//	this->ProcessEvent ( pGetAllInt, &parms, NULL );
//
//}
//
//void AActor::GetNextIntDesc ( struct FString ClassName, int Num, struct FString* Entry, struct FString* Description )
//{
//	static UFunction* pGetNextIntDesc = 0;
//	AActor_execGetNextIntDesc_Parms parms;
//
//	if ( !pGetNextIntDesc )
//		pGetNextIntDesc = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetNextIntDesc" );
//
//	parms.ClassName = ClassName;
//	parms.Num = Num;
//	this->ProcessEvent ( pGetNextIntDesc, &parms, NULL );
//
//	*Entry = parms.Entry;
//	*Description = parms.Description;
//}
//
//struct FString AActor::GetNextInt ( struct FString ClassName, int Num )
//{
//	static UFunction* pGetNextInt = 0;
//	AActor_execGetNextInt_Parms parms;
//
//	if ( !pGetNextInt )
//		pGetNextInt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetNextInt" );
//
//	parms.ClassName = ClassName;
//	parms.Num = Num;
//	this->ProcessEvent ( pGetNextInt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AActor::GetURLMap ( bool bIncludeOptions )
//{
//	static UFunction* pGetURLMap = 0;
//	AActor_execGetURLMap_Parms parms;
//
//	if ( !pGetURLMap )
//		pGetURLMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetURLMap" );
//
//	WORD iNative = pGetURLMap->iNative;
//	pGetURLMap->FunctionFlags &= ~FUNC_Native;
//	pGetURLMap->iNative = 0;
//
//	parms.bIncludeOptions = bIncludeOptions;
//	this->ProcessEvent ( pGetURLMap, &parms, NULL );
//
//	pGetURLMap->iNative = iNative;
//	pGetURLMap->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//void AActor::GetNextSkin ( struct FString Prefix, struct FString CurrentSkin, int Dir, struct FString* SkinName, struct FString* SkinDesc )
//{
//	static UFunction* pGetNextSkin = 0;
//	AActor_execGetNextSkin_Parms parms;
//
//	if ( !pGetNextSkin )
//		pGetNextSkin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetNextSkin" );
//
//	WORD iNative = pGetNextSkin->iNative;
//	pGetNextSkin->FunctionFlags &= ~FUNC_Native;
//	pGetNextSkin->iNative = 0;
//
//	parms.Prefix = Prefix;
//	parms.CurrentSkin = CurrentSkin;
//	parms.Dir = Dir;
//	this->ProcessEvent ( pGetNextSkin, &parms, NULL );
//
//	pGetNextSkin->iNative = iNative;
//	pGetNextSkin->FunctionFlags |= FUNC_Native;
//	*SkinName = parms.SkinName;
//	*SkinDesc = parms.SkinDesc;
//}
//
//struct FString AActor::GetMapName ( struct FString NameEnding, struct FString MapName, int Dir )
//{
//	static UFunction* pGetMapName = 0;
//	AActor_execGetMapName_Parms parms;
//
//	if ( !pGetMapName )
//		pGetMapName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetMapName" );
//
//	WORD iNative = pGetMapName->iNative;
//	pGetMapName->FunctionFlags &= ~FUNC_Native;
//	pGetMapName->iNative = 0;
//
//	parms.NameEnding = NameEnding;
//	parms.MapName = MapName;
//	parms.Dir = Dir;
//	this->ProcessEvent ( pGetMapName, &parms, NULL );
//
//	pGetMapName->iNative = iNative;
//	pGetMapName->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//void AActor::AddToPackageMap ( struct FString PackageName )
//{
//	static UFunction* pAddToPackageMap = 0;
//	AActor_execAddToPackageMap_Parms parms;
//
//	if ( !pAddToPackageMap )
//		pAddToPackageMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.AddToPackageMap" );
//
//	parms.PackageName = PackageName;
//	this->ProcessEvent ( pAddToPackageMap, &parms, NULL );
//
//}
//
//void AActor::ResetStaticFilterState (  )
//{
//	static UFunction* pResetStaticFilterState = 0;
//	AActor_execResetStaticFilterState_Parms parms;
//
//	if ( !pResetStaticFilterState )
//		pResetStaticFilterState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.ResetStaticFilterState" );
//
//	this->ProcessEvent ( pResetStaticFilterState, &parms, NULL );
//
//}
//
//void AActor::eventBeginPlay (  )
//{
//	static UFunction* pBeginPlay = 0;
//	AActor_eventBeginPlay_Parms parms;
//
//	if ( !pBeginPlay )
//		pBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.BeginPlay" );
//
//	this->ProcessEvent ( pBeginPlay, &parms, NULL );
//
//}
//
//void AActor::eventPostTeleport ( class ATeleporter* OutTeleporter )
//{
//	static UFunction* pPostTeleport = 0;
//	AActor_eventPostTeleport_Parms parms;
//
//	if ( !pPostTeleport )
//		pPostTeleport = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PostTeleport" );
//
//	parms.OutTeleporter = OutTeleporter;
//	this->ProcessEvent ( pPostTeleport, &parms, NULL );
//
//}
//
//bool AActor::eventPreTeleport ( class ATeleporter* InTeleporter )
//{
//	static UFunction* pPreTeleport = 0;
//	AActor_eventPreTeleport_Parms parms;
//
//	if ( !pPreTeleport )
//		pPreTeleport = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PreTeleport" );
//
//	parms.InTeleporter = InTeleporter;
//	this->ProcessEvent ( pPreTeleport, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FVector AActor::SuggestFallVelocity ( struct FVector Destination, struct FVector Start, float MaxZ, float MaxXYSpeed )
//{
//	static UFunction* pSuggestFallVelocity = 0;
//	AActor_execSuggestFallVelocity_Parms parms;
//
//	if ( !pSuggestFallVelocity )
//		pSuggestFallVelocity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SuggestFallVelocity" );
//
//	parms.Destination = Destination;
//	parms.Start = Start;
//	parms.MaxZ = MaxZ;
//	parms.MaxXYSpeed = MaxXYSpeed;
//	this->ProcessEvent ( pSuggestFallVelocity, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::PlayerCanSeeMe (  )
//{
//	static UFunction* pPlayerCanSeeMe = 0;
//	AActor_execPlayerCanSeeMe_Parms parms;
//
//	if ( !pPlayerCanSeeMe )
//		pPlayerCanSeeMe = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PlayerCanSeeMe" );
//
//	WORD iNative = pPlayerCanSeeMe->iNative;
//	pPlayerCanSeeMe->FunctionFlags &= ~FUNC_Native;
//	pPlayerCanSeeMe->iNative = 0;
//
//	this->ProcessEvent ( pPlayerCanSeeMe, &parms, NULL );
//
//	pPlayerCanSeeMe->iNative = iNative;
//	pPlayerCanSeeMe->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//void AActor::MakeNoise ( float Loudness )
//{
//	static UFunction* pMakeNoise = 0;
//	AActor_execMakeNoise_Parms parms;
//
//	if ( !pMakeNoise )
//		pMakeNoise = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.MakeNoise" );
//
//	WORD iNative = pMakeNoise->iNative;
//	pMakeNoise->FunctionFlags &= ~FUNC_Native;
//	pMakeNoise->iNative = 0;
//
//	parms.Loudness = Loudness;
//	this->ProcessEvent ( pMakeNoise, &parms, NULL );
//
//	pMakeNoise->iNative = iNative;
//	pMakeNoise->FunctionFlags |= FUNC_Native;
//}
//
//bool AActor::ForceFeedbackSupported ( bool Enable )
//{
//	static UFunction* pForceFeedbackSupported = 0;
//	AActor_execForceFeedbackSupported_Parms parms;
//
//	if ( !pForceFeedbackSupported )
//		pForceFeedbackSupported = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.ForceFeedbackSupported" );
//
//	parms.Enable = Enable;
//	this->ProcessEvent ( pForceFeedbackSupported, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::ChangeBaseParamsFeedbackEffect ( struct FString EffectName, float DirectionX, float DirectionY, float Gain )
//{
//	static UFunction* pChangeBaseParamsFeedbackEffect = 0;
//	AActor_execChangeBaseParamsFeedbackEffect_Parms parms;
//
//	if ( !pChangeBaseParamsFeedbackEffect )
//		pChangeBaseParamsFeedbackEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.ChangeBaseParamsFeedbackEffect" );
//
//	WORD iNative = pChangeBaseParamsFeedbackEffect->iNative;
//	pChangeBaseParamsFeedbackEffect->FunctionFlags &= ~FUNC_Native;
//	pChangeBaseParamsFeedbackEffect->iNative = 0;
//
//	parms.EffectName = EffectName;
//	parms.DirectionX = DirectionX;
//	parms.DirectionY = DirectionY;
//	parms.Gain = Gain;
//	this->ProcessEvent ( pChangeBaseParamsFeedbackEffect, &parms, NULL );
//
//	pChangeBaseParamsFeedbackEffect->iNative = iNative;
//	pChangeBaseParamsFeedbackEffect->FunctionFlags |= FUNC_Native;
//}
//
//void AActor::ChangeSpringFeedbackEffect ( struct FString EffectName, float CenterX, float CenterY )
//{
//	static UFunction* pChangeSpringFeedbackEffect = 0;
//	AActor_execChangeSpringFeedbackEffect_Parms parms;
//
//	if ( !pChangeSpringFeedbackEffect )
//		pChangeSpringFeedbackEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.ChangeSpringFeedbackEffect" );
//
//	WORD iNative = pChangeSpringFeedbackEffect->iNative;
//	pChangeSpringFeedbackEffect->FunctionFlags &= ~FUNC_Native;
//	pChangeSpringFeedbackEffect->iNative = 0;
//
//	parms.EffectName = EffectName;
//	parms.CenterX = CenterX;
//	parms.CenterY = CenterY;
//	this->ProcessEvent ( pChangeSpringFeedbackEffect, &parms, NULL );
//
//	pChangeSpringFeedbackEffect->iNative = iNative;
//	pChangeSpringFeedbackEffect->FunctionFlags |= FUNC_Native;
//}
//
//void AActor::StopFeedbackEffect ( struct FString EffectName )
//{
//	static UFunction* pStopFeedbackEffect = 0;
//	AActor_execStopFeedbackEffect_Parms parms;
//
//	if ( !pStopFeedbackEffect )
//		pStopFeedbackEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.StopFeedbackEffect" );
//
//	WORD iNative = pStopFeedbackEffect->iNative;
//	pStopFeedbackEffect->FunctionFlags &= ~FUNC_Native;
//	pStopFeedbackEffect->iNative = 0;
//
//	parms.EffectName = EffectName;
//	this->ProcessEvent ( pStopFeedbackEffect, &parms, NULL );
//
//	pStopFeedbackEffect->iNative = iNative;
//	pStopFeedbackEffect->FunctionFlags |= FUNC_Native;
//}
//
//void AActor::PlayFeedbackEffect ( struct FString EffectName )
//{
//	static UFunction* pPlayFeedbackEffect = 0;
//	AActor_execPlayFeedbackEffect_Parms parms;
//
//	if ( !pPlayFeedbackEffect )
//		pPlayFeedbackEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PlayFeedbackEffect" );
//
//	WORD iNative = pPlayFeedbackEffect->iNative;
//	pPlayFeedbackEffect->FunctionFlags &= ~FUNC_Native;
//	pPlayFeedbackEffect->iNative = 0;
//
//	parms.EffectName = EffectName;
//	this->ProcessEvent ( pPlayFeedbackEffect, &parms, NULL );
//
//	pPlayFeedbackEffect->iNative = iNative;
//	pPlayFeedbackEffect->FunctionFlags |= FUNC_Native;
//}
//
//float AActor::GetSoundDuration ( class USound* Sound )
//{
//	static UFunction* pGetSoundDuration = 0;
//	AActor_execGetSoundDuration_Parms parms;
//
//	if ( !pGetSoundDuration )
//		pGetSoundDuration = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetSoundDuration" );
//
//	parms.Sound = Sound;
//	this->ProcessEvent ( pGetSoundDuration, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::IsSoundPlayingHK ( int SourceID )
//{
//	static UFunction* pIsSoundPlayingHK = 0;
//	AActor_execIsSoundPlayingHK_Parms parms;
//
//	if ( !pIsSoundPlayingHK )
//		pIsSoundPlayingHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.IsSoundPlayingHK" );
//
//	parms.SourceID = SourceID;
//	this->ProcessEvent ( pIsSoundPlayingHK, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::StopSoundHK ( int SourceID )
//{
//	static UFunction* pStopSoundHK = 0;
//	AActor_execStopSoundHK_Parms parms;
//
//	if ( !pStopSoundHK )
//		pStopSoundHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.StopSoundHK" );
//
//	parms.SourceID = SourceID;
//	this->ProcessEvent ( pStopSoundHK, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::StopLoopSoundByActor (  )
//{
//	static UFunction* pStopLoopSoundByActor = 0;
//	AActor_execStopLoopSoundByActor_Parms parms;
//
//	if ( !pStopLoopSoundByActor )
//		pStopLoopSoundByActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.StopLoopSoundByActor" );
//
//	this->ProcessEvent ( pStopLoopSoundByActor, &parms, NULL );
//
//}
//
//void AActor::StopAllSoundByActor (  )
//{
//	static UFunction* pStopAllSoundByActor = 0;
//	AActor_execStopAllSoundByActor_Parms parms;
//
//	if ( !pStopAllSoundByActor )
//		pStopAllSoundByActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.StopAllSoundByActor" );
//
//	this->ProcessEvent ( pStopAllSoundByActor, &parms, NULL );
//
//}
//
//void AActor::StopAllSound (  )
//{
//	static UFunction* pStopAllSound = 0;
//	AActor_execStopAllSound_Parms parms;
//
//	if ( !pStopAllSound )
//		pStopAllSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.StopAllSound" );
//
//	this->ProcessEvent ( pStopAllSound, &parms, NULL );
//
//}
//
//void AActor::StopSound ( unsigned char Slot, bool bNoOverride )
//{
//	static UFunction* pStopSound = 0;
//	AActor_execStopSound_Parms parms;
//
//	if ( !pStopSound )
//		pStopSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.StopSound" );
//
//	parms.Slot = Slot;
//	parms.bNoOverride = bNoOverride;
//	this->ProcessEvent ( pStopSound, &parms, NULL );
//
//}
//
//void AActor::eventDemoPlaySound ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate )
//{
//	static UFunction* pDemoPlaySound = 0;
//	AActor_eventDemoPlaySound_Parms parms;
//
//	if ( !pDemoPlaySound )
//		pDemoPlaySound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.DemoPlaySound" );
//
//	parms.Sound = Sound;
//	parms.Slot = Slot;
//	parms.Volume = Volume;
//	parms.bNoOverride = bNoOverride;
//	parms.Radius = Radius;
//	parms.Pitch = Pitch;
//	parms.Attenuate = Attenuate;
//	this->ProcessEvent ( pDemoPlaySound, &parms, NULL );
//
//}
//
//int AActor::PlayOwnedSound ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner )
//{
//	static UFunction* pPlayOwnedSound = 0;
//	AActor_execPlayOwnedSound_Parms parms;
//
//	if ( !pPlayOwnedSound )
//		pPlayOwnedSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PlayOwnedSound" );
//
//	parms.Sound = Sound;
//	parms.Slot = Slot;
//	parms.Volume = Volume;
//	parms.bNoOverride = bNoOverride;
//	parms.Radius = Radius;
//	parms.Pitch = Pitch;
//	parms.Attenuate = Attenuate;
//	parms.Loop = Loop;
//	parms.SellectTeam = SellectTeam;
//	parms.bExceptOwner = bExceptOwner;
//	this->ProcessEvent ( pPlayOwnedSound, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AActor::PlaySound ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner )
//{
//	static UFunction* pPlaySound = 0;
//	AActor_execPlaySound_Parms parms;
//
//	if ( !pPlaySound )
//		pPlaySound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PlaySound" );
//
//	WORD iNative = pPlaySound->iNative;
//	pPlaySound->FunctionFlags &= ~FUNC_Native;
//	pPlaySound->iNative = 0;
//
//	parms.Sound = Sound;
//	parms.Slot = Slot;
//	parms.Volume = Volume;
//	parms.bNoOverride = bNoOverride;
//	parms.Radius = Radius;
//	parms.Pitch = Pitch;
//	parms.Attenuate = Attenuate;
//	parms.Loop = Loop;
//	parms.SellectTeam = SellectTeam;
//	parms.bExceptOwner = bExceptOwner;
//	this->ProcessEvent ( pPlaySound, &parms, NULL );
//
//	pPlaySound->iNative = iNative;
//	pPlaySound->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//int AActor::SpecPlaySoundHK2 ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner, struct FVector SoundLocation )
//{
//	static UFunction* pSpecPlaySoundHK2 = 0;
//	AActor_execSpecPlaySoundHK2_Parms parms;
//
//	if ( !pSpecPlaySoundHK2 )
//		pSpecPlaySoundHK2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SpecPlaySoundHK2" );
//
//	parms.Sound = Sound;
//	parms.Slot = Slot;
//	parms.Volume = Volume;
//	parms.bNoOverride = bNoOverride;
//	parms.Radius = Radius;
//	parms.Pitch = Pitch;
//	parms.Attenuate = Attenuate;
//	parms.Loop = Loop;
//	parms.SellectTeam = SellectTeam;
//	parms.bExceptOwner = bExceptOwner;
//	parms.SoundLocation = SoundLocation;
//	this->ProcessEvent ( pSpecPlaySoundHK2, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AActor::PlaySoundHK2 ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner, struct FVector SoundLocation )
//{
//	static UFunction* pPlaySoundHK2 = 0;
//	AActor_execPlaySoundHK2_Parms parms;
//
//	if ( !pPlaySoundHK2 )
//		pPlaySoundHK2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PlaySoundHK2" );
//
//	parms.Sound = Sound;
//	parms.Slot = Slot;
//	parms.Volume = Volume;
//	parms.bNoOverride = bNoOverride;
//	parms.Radius = Radius;
//	parms.Pitch = Pitch;
//	parms.Attenuate = Attenuate;
//	parms.Loop = Loop;
//	parms.SellectTeam = SellectTeam;
//	parms.bExceptOwner = bExceptOwner;
//	parms.SoundLocation = SoundLocation;
//	this->ProcessEvent ( pPlaySoundHK2, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AActor::ServerSpecPlaySoundHK ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner )
//{
//	static UFunction* pServerSpecPlaySoundHK = 0;
//	AActor_execServerSpecPlaySoundHK_Parms parms;
//
//	if ( !pServerSpecPlaySoundHK )
//		pServerSpecPlaySoundHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.ServerSpecPlaySoundHK" );
//
//	parms.Sound = Sound;
//	parms.Slot = Slot;
//	parms.Volume = Volume;
//	parms.bNoOverride = bNoOverride;
//	parms.Radius = Radius;
//	parms.Pitch = Pitch;
//	parms.Attenuate = Attenuate;
//	parms.Loop = Loop;
//	parms.SellectTeam = SellectTeam;
//	parms.bExceptOwner = bExceptOwner;
//	this->ProcessEvent ( pServerSpecPlaySoundHK, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AActor::SpecPlaySoundHK ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner )
//{
//	static UFunction* pSpecPlaySoundHK = 0;
//	AActor_execSpecPlaySoundHK_Parms parms;
//
//	if ( !pSpecPlaySoundHK )
//		pSpecPlaySoundHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SpecPlaySoundHK" );
//
//	parms.Sound = Sound;
//	parms.Slot = Slot;
//	parms.Volume = Volume;
//	parms.bNoOverride = bNoOverride;
//	parms.Radius = Radius;
//	parms.Pitch = Pitch;
//	parms.Attenuate = Attenuate;
//	parms.Loop = Loop;
//	parms.SellectTeam = SellectTeam;
//	parms.bExceptOwner = bExceptOwner;
//	this->ProcessEvent ( pSpecPlaySoundHK, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AActor::PlaySoundHK ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner )
//{
//	static UFunction* pPlaySoundHK = 0;
//	AActor_execPlaySoundHK_Parms parms;
//
//	if ( !pPlaySoundHK )
//		pPlaySoundHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PlaySoundHK" );
//
//	parms.Sound = Sound;
//	parms.Slot = Slot;
//	parms.Volume = Volume;
//	parms.bNoOverride = bNoOverride;
//	parms.Radius = Radius;
//	parms.Pitch = Pitch;
//	parms.Attenuate = Attenuate;
//	parms.Loop = Loop;
//	parms.SellectTeam = SellectTeam;
//	parms.bExceptOwner = bExceptOwner;
//	this->ProcessEvent ( pPlaySoundHK, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AActor::fPlaySound ( struct FString fileName, unsigned char Slot, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner )
//{
//	static UFunction* pfPlaySound = 0;
//	AActor_execfPlaySound_Parms parms;
//
//	if ( !pfPlaySound )
//		pfPlaySound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.fPlaySound" );
//
//	parms.fileName = fileName;
//	parms.Slot = Slot;
//	parms.bNoOverride = bNoOverride;
//	parms.Attenuate = Attenuate;
//	parms.Loop = Loop;
//	parms.SellectTeam = SellectTeam;
//	parms.bExceptOwner = bExceptOwner;
//	this->ProcessEvent ( pfPlaySound, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::eventPostLoadSavedGame (  )
//{
//	static UFunction* pPostLoadSavedGame = 0;
//	AActor_eventPostLoadSavedGame_Parms parms;
//
//	if ( !pPostLoadSavedGame )
//		pPostLoadSavedGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PostLoadSavedGame" );
//
//	this->ProcessEvent ( pPostLoadSavedGame, &parms, NULL );
//
//}
//
//void AActor::eventPreSaveGame (  )
//{
//	static UFunction* pPreSaveGame = 0;
//	AActor_eventPreSaveGame_Parms parms;
//
//	if ( !pPreSaveGame )
//		pPreSaveGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PreSaveGame" );
//
//	this->ProcessEvent ( pPreSaveGame, &parms, NULL );
//
//}
//
//void AActor::SetTimer ( float NewTimerRate, bool bLoop )
//{
//	static UFunction* pSetTimer = 0;
//	AActor_execSetTimer_Parms parms;
//
//	if ( !pSetTimer )
//		pSetTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetTimer" );
//
//	WORD iNative = pSetTimer->iNative;
//	pSetTimer->FunctionFlags &= ~FUNC_Native;
//	pSetTimer->iNative = 0;
//
//	parms.NewTimerRate = NewTimerRate;
//	parms.bLoop = bLoop;
//	this->ProcessEvent ( pSetTimer, &parms, NULL );
//
//	pSetTimer->iNative = iNative;
//	pSetTimer->FunctionFlags |= FUNC_Native;
//}
//
//void AActor::eventTornOff (  )
//{
//	static UFunction* pTornOff = 0;
//	AActor_eventTornOff_Parms parms;
//
//	if ( !pTornOff )
//		pTornOff = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TornOff" );
//
//	this->ProcessEvent ( pTornOff, &parms, NULL );
//
//}
//
////bool AActor::Destroy (  )
////{
////	static UFunction* pDestroy = 0;
////	AActor_execDestroy_Parms parms;
////
////	if ( !pDestroy )
////		pDestroy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Destroy" );
////
////	WORD iNative = pDestroy->iNative;
////	pDestroy->FunctionFlags &= ~FUNC_Native;
////	pDestroy->iNative = 0;
////
////	this->ProcessEvent ( pDestroy, &parms, NULL );
////
////	pDestroy->iNative = iNative;
////	pDestroy->FunctionFlags |= FUNC_Native;
////	return parms.ReturnValue;
////}
//
//class AActor* AActor::Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, bool bNoCollisionFail )
//{
//	static UFunction* pSpawn = 0;
//	AActor_execSpawn_Parms parms;
//
//	if ( !pSpawn )
//		pSpawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Spawn" );
//
//	WORD iNative = pSpawn->iNative;
//	pSpawn->FunctionFlags &= ~FUNC_Native;
//	pSpawn->iNative = 0;
//
//	parms.SpawnClass = SpawnClass;
//	parms.SpawnOwner = SpawnOwner;
//	parms.SpawnTag = SpawnTag;
//	parms.SpawnLocation = SpawnLocation;
//	parms.SpawnRotation = SpawnRotation;
//	parms.bNoCollisionFail = bNoCollisionFail;
//	this->ProcessEvent ( pSpawn, &parms, NULL );
//
//	pSpawn->iNative = iNative;
//	pSpawn->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool AActor::TraceThisActorHitPart ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, struct FVector* HitLocation, struct FVector* HitNormal, unsigned char* HitCollisionPart )
//{
//	static UFunction* pTraceThisActorHitPart = 0;
//	AActor_execTraceThisActorHitPart_Parms parms;
//
//	if ( !pTraceThisActorHitPart )
//		pTraceThisActorHitPart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TraceThisActorHitPart" );
//
//	parms.TraceEnd = TraceEnd;
//	parms.TraceStart = TraceStart;
//	parms.Extent = Extent;
//	this->ProcessEvent ( pTraceThisActorHitPart, &parms, NULL );
//
//	*HitLocation = parms.HitLocation;
//	*HitNormal = parms.HitNormal;
//	*HitCollisionPart = parms.HitCollisionPart;
//	return parms.ReturnValue;
//}
//
//bool AActor::TraceThisActor ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, struct FVector* HitLocation, struct FVector* HitNormal )
//{
//	static UFunction* pTraceThisActor = 0;
//	AActor_execTraceThisActor_Parms parms;
//
//	if ( !pTraceThisActor )
//		pTraceThisActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TraceThisActor" );
//
//	parms.TraceEnd = TraceEnd;
//	parms.TraceStart = TraceStart;
//	parms.Extent = Extent;
//	this->ProcessEvent ( pTraceThisActor, &parms, NULL );
//
//	*HitLocation = parms.HitLocation;
//	*HitNormal = parms.HitNormal;
//	return parms.ReturnValue;
//}
//
//bool AActor::FastTrace ( struct FVector TraceEnd, struct FVector TraceStart )
//{
//	static UFunction* pFastTrace = 0;
//	AActor_execFastTrace_Parms parms;
//
//	if ( !pFastTrace )
//		pFastTrace = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.FastTrace" );
//
//	WORD iNative = pFastTrace->iNative;
//	pFastTrace->FunctionFlags &= ~FUNC_Native;
//	pFastTrace->iNative = 0;
//
//	parms.TraceEnd = TraceEnd;
//	parms.TraceStart = TraceStart;
//	this->ProcessEvent ( pFastTrace, &parms, NULL );
//
//	pFastTrace->iNative = iNative;
//	pFastTrace->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//void AActor::MultiTrace ( struct FVector TraceEnd, struct FVector TraceStart, bool bTraceActors, bool bTraceMaterial, struct FVector Extent, class UBtrTraceResult** BtrResult )
//{
//	static UFunction* pMultiTrace = 0;
//	AActor_execMultiTrace_Parms parms;
//
//	if ( !pMultiTrace )
//		pMultiTrace = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.MultiTrace" );
//
//	parms.TraceEnd = TraceEnd;
//	parms.TraceStart = TraceStart;
//	parms.bTraceActors = bTraceActors;
//	parms.bTraceMaterial = bTraceMaterial;
//	parms.Extent = Extent;
//	this->ProcessEvent ( pMultiTrace, &parms, NULL );
//
//	*BtrResult = parms.BtrResult;
//}
//
//class AActor* AActor::Trace ( struct FVector TraceEnd, struct FVector TraceStart, bool bTraceActors, struct FVector Extent, struct FVector* HitLocation, struct FVector* HitNormal, class UMaterial** Material, unsigned char* CollPart )
//{
//	static UFunction* pTrace = 0;
//	AActor_execTrace_Parms parms;
//
//	if ( !pTrace )
//		pTrace = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Trace" );
//
//	WORD iNative = pTrace->iNative;
//	pTrace->FunctionFlags &= ~FUNC_Native;
//	pTrace->iNative = 0;
//
//	parms.TraceEnd = TraceEnd;
//	parms.TraceStart = TraceStart;
//	parms.bTraceActors = bTraceActors;
//	parms.Extent = Extent;
//	this->ProcessEvent ( pTrace, &parms, NULL );
//
//	pTrace->iNative = iNative;
//	pTrace->FunctionFlags |= FUNC_Native;
//	*HitLocation = parms.HitLocation;
//	*HitNormal = parms.HitNormal;
//	*Material = parms.Material;
//	*CollPart = parms.CollPart;
//	return parms.ReturnValue;
//}
//
//bool AActor::GetNameFromStr ( struct FString strName, struct FName* retName )
//{
//	static UFunction* pGetNameFromStr = 0;
//	AActor_execGetNameFromStr_Parms parms;
//
//	if ( !pGetNameFromStr )
//		pGetNameFromStr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetNameFromStr" );
//
//	parms.strName = strName;
//	this->ProcessEvent ( pGetNameFromStr, &parms, NULL );
//
//	*retName = parms.retName;
//	return parms.ReturnValue;
//}
//
//void AActor::eventTakeHeadRoundBullet ( struct FVector HitLocation, int WeaponType )
//{
//	static UFunction* pTakeHeadRoundBullet = 0;
//	AActor_eventTakeHeadRoundBullet_Parms parms;
//
//	if ( !pTakeHeadRoundBullet )
//		pTakeHeadRoundBullet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TakeHeadRoundBullet" );
//
//	parms.HitLocation = HitLocation;
//	parms.WeaponType = WeaponType;
//	this->ProcessEvent ( pTakeHeadRoundBullet, &parms, NULL );
//
//}
//
//bool AActor::HealDamage ( int Amount, class AController* Healer, class UClass* DamageType )
//{
//	static UFunction* pHealDamage = 0;
//	AActor_execHealDamage_Parms parms;
//
//	if ( !pHealDamage )
//		pHealDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.HealDamage" );
//
//	parms.Amount = Amount;
//	parms.Healer = Healer;
//	parms.DamageType = DamageType;
//	this->ProcessEvent ( pHealDamage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::eventTakeDamage ( int Damage, class APawn* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pTakeDamage = 0;
//	AActor_eventTakeDamage_Parms parms;
//
//	if ( !pTakeDamage )
//		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TakeDamage" );
//
//	parms.Damage = Damage;
//	parms.EventInstigator = EventInstigator;
//	parms.HitLocation = HitLocation;
//	parms.Momentum = Momentum;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pTakeDamage, &parms, NULL );
//
//}
//
//void AActor::eventKilledBy ( class APawn* EventInstigator )
//{
//	static UFunction* pKilledBy = 0;
//	AActor_eventKilledBy_Parms parms;
//
//	if ( !pKilledBy )
//		pKilledBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KilledBy" );
//
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pKilledBy, &parms, NULL );
//
//}
//
//void AActor::eventFellOutOfWorld ( unsigned char KillType )
//{
//	static UFunction* pFellOutOfWorld = 0;
//	AActor_eventFellOutOfWorld_Parms parms;
//
//	if ( !pFellOutOfWorld )
//		pFellOutOfWorld = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.FellOutOfWorld" );
//
//	parms.KillType = KillType;
//	this->ProcessEvent ( pFellOutOfWorld, &parms, NULL );
//
//}
//
//void AActor::eventUsedBy ( class APawn* User )
//{
//	static UFunction* pUsedBy = 0;
//	AActor_eventUsedBy_Parms parms;
//
//	if ( !pUsedBy )
//		pUsedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.UsedBy" );
//
//	parms.User = User;
//	this->ProcessEvent ( pUsedBy, &parms, NULL );
//
//}
//
//void AActor::eventEndedRotation (  )
//{
//	static UFunction* pEndedRotation = 0;
//	AActor_eventEndedRotation_Parms parms;
//
//	if ( !pEndedRotation )
//		pEndedRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.EndedRotation" );
//
//	this->ProcessEvent ( pEndedRotation, &parms, NULL );
//
//}
//
//void AActor::eventFinishedInterpolation (  )
//{
//	static UFunction* pFinishedInterpolation = 0;
//	AActor_eventFinishedInterpolation_Parms parms;
//
//	if ( !pFinishedInterpolation )
//		pFinishedInterpolation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.FinishedInterpolation" );
//
//	this->ProcessEvent ( pFinishedInterpolation, &parms, NULL );
//
//}
//
//void AActor::eventRanInto ( class AActor* Other )
//{
//	static UFunction* pRanInto = 0;
//	AActor_eventRanInto_Parms parms;
//
//	if ( !pRanInto )
//		pRanInto = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.RanInto" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pRanInto, &parms, NULL );
//
//}
//
//void AActor::eventEncroachedBy ( class AActor* Other )
//{
//	static UFunction* pEncroachedBy = 0;
//	AActor_eventEncroachedBy_Parms parms;
//
//	if ( !pEncroachedBy )
//		pEncroachedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.EncroachedBy" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pEncroachedBy, &parms, NULL );
//
//}
//
//bool AActor::eventEncroachingOn ( class AActor* Other )
//{
//	static UFunction* pEncroachingOn = 0;
//	AActor_eventEncroachingOn_Parms parms;
//
//	if ( !pEncroachingOn )
//		pEncroachingOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.EncroachingOn" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pEncroachingOn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* AActor::eventSpecialHandling ( class APawn* Other )
//{
//	static UFunction* pSpecialHandling = 0;
//	AActor_eventSpecialHandling_Parms parms;
//
//	if ( !pSpecialHandling )
//		pSpecialHandling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SpecialHandling" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSpecialHandling, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::eventDetach ( class AActor* Other )
//{
//	static UFunction* pDetach = 0;
//	AActor_eventDetach_Parms parms;
//
//	if ( !pDetach )
//		pDetach = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Detach" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pDetach, &parms, NULL );
//
//}
//
//void AActor::eventAttach ( class AActor* Other )
//{
//	static UFunction* pAttach = 0;
//	AActor_eventAttach_Parms parms;
//
//	if ( !pAttach )
//		pAttach = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Attach" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pAttach, &parms, NULL );
//
//}
//
//void AActor::eventBaseChange (  )
//{
//	static UFunction* pBaseChange = 0;
//	AActor_eventBaseChange_Parms parms;
//
//	if ( !pBaseChange )
//		pBaseChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.BaseChange" );
//
//	this->ProcessEvent ( pBaseChange, &parms, NULL );
//
//}
//
//void AActor::eventBump ( class AActor* Other )
//{
//	static UFunction* pBump = 0;
//	AActor_eventBump_Parms parms;
//
//	if ( !pBump )
//		pBump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Bump" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pBump, &parms, NULL );
//
//}
//
//void AActor::eventUnTouch ( class AActor* Other )
//{
//	static UFunction* pUnTouch = 0;
//	AActor_eventUnTouch_Parms parms;
//
//	if ( !pUnTouch )
//		pUnTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.UnTouch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pUnTouch, &parms, NULL );
//
//}
//
//void AActor::eventPostTouch ( class AActor* Other )
//{
//	static UFunction* pPostTouch = 0;
//	AActor_eventPostTouch_Parms parms;
//
//	if ( !pPostTouch )
//		pPostTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PostTouch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pPostTouch, &parms, NULL );
//
//}
//
//void AActor::eventTouch ( class AActor* Other )
//{
//	static UFunction* pTouch = 0;
//	AActor_eventTouch_Parms parms;
//
//	if ( !pTouch )
//		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Touch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTouch, &parms, NULL );
//
//}
//
//void AActor::eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume )
//{
//	static UFunction* pPhysicsVolumeChange = 0;
//	AActor_eventPhysicsVolumeChange_Parms parms;
//
//	if ( !pPhysicsVolumeChange )
//		pPhysicsVolumeChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PhysicsVolumeChange" );
//
//	parms.NewVolume = NewVolume;
//	this->ProcessEvent ( pPhysicsVolumeChange, &parms, NULL );
//
//}
//
//void AActor::eventZoneChange ( class AZoneInfo* NewZone )
//{
//	static UFunction* pZoneChange = 0;
//	AActor_eventZoneChange_Parms parms;
//
//	if ( !pZoneChange )
//		pZoneChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.ZoneChange" );
//
//	parms.NewZone = NewZone;
//	this->ProcessEvent ( pZoneChange, &parms, NULL );
//
//}
//
//void AActor::eventLanded ( struct FVector HitNormal )
//{
//	static UFunction* pLanded = 0;
//	AActor_eventLanded_Parms parms;
//
//	if ( !pLanded )
//		pLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Landed" );
//
//	parms.HitNormal = HitNormal;
//	this->ProcessEvent ( pLanded, &parms, NULL );
//
//}
//
//void AActor::eventFalling (  )
//{
//	static UFunction* pFalling = 0;
//	AActor_eventFalling_Parms parms;
//
//	if ( !pFalling )
//		pFalling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Falling" );
//
//	this->ProcessEvent ( pFalling, &parms, NULL );
//
//}
//
//void AActor::eventHitWall ( struct FVector HitNormal, class AActor* HitWall, class UMaterial* HitMaterial )
//{
//	static UFunction* pHitWall = 0;
//	AActor_eventHitWall_Parms parms;
//
//	if ( !pHitWall )
//		pHitWall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.HitWall" );
//
//	parms.HitNormal = HitNormal;
//	parms.HitWall = HitWall;
//	parms.HitMaterial = HitMaterial;
//	this->ProcessEvent ( pHitWall, &parms, NULL );
//
//}
//
//void AActor::eventTimer (  )
//{
//	static UFunction* pTimer = 0;
//	AActor_eventTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//void AActor::TimerPop ( class AVolumeTimer* t )
//{
//	static UFunction* pTimerPop = 0;
//	AActor_execTimerPop_Parms parms;
//
//	if ( !pTimerPop )
//		pTimerPop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TimerPop" );
//
//	parms.t = t;
//	this->ProcessEvent ( pTimerPop, &parms, NULL );
//
//}
//
//void AActor::eventEndEvent (  )
//{
//	static UFunction* pEndEvent = 0;
//	AActor_eventEndEvent_Parms parms;
//
//	if ( !pEndEvent )
//		pEndEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.EndEvent" );
//
//	this->ProcessEvent ( pEndEvent, &parms, NULL );
//
//}
//
//void AActor::eventBeginEvent (  )
//{
//	static UFunction* pBeginEvent = 0;
//	AActor_eventBeginEvent_Parms parms;
//
//	if ( !pBeginEvent )
//		pBeginEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.BeginEvent" );
//
//	this->ProcessEvent ( pBeginEvent, &parms, NULL );
//
//}
//
//void AActor::eventUnTrigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pUnTrigger = 0;
//	AActor_eventUnTrigger_Parms parms;
//
//	if ( !pUnTrigger )
//		pUnTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.UnTrigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pUnTrigger, &parms, NULL );
//
//}
//
//void AActor::eventTrigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	AActor_eventTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void AActor::eventClientTrigger (  )
//{
//	static UFunction* pClientTrigger = 0;
//	AActor_eventClientTrigger_Parms parms;
//
//	if ( !pClientTrigger )
//		pClientTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.ClientTrigger" );
//
//	this->ProcessEvent ( pClientTrigger, &parms, NULL );
//
//}
//
//void AActor::eventPostNetReceive (  )
//{
//	static UFunction* pPostNetReceive = 0;
//	AActor_eventPostNetReceive_Parms parms;
//
//	if ( !pPostNetReceive )
//		pPostNetReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PostNetReceive" );
//
//	this->ProcessEvent ( pPostNetReceive, &parms, NULL );
//
//}
//
//void AActor::eventTick ( float DeltaTime )
//{
//	static UFunction* pTick = 0;
//	AActor_eventTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Tick" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void AActor::eventLostChild ( class AActor* Other )
//{
//	static UFunction* pLostChild = 0;
//	AActor_eventLostChild_Parms parms;
//
//	if ( !pLostChild )
//		pLostChild = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.LostChild" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pLostChild, &parms, NULL );
//
//}
//
//void AActor::eventGainedChild ( class AActor* Other )
//{
//	static UFunction* pGainedChild = 0;
//	AActor_eventGainedChild_Parms parms;
//
//	if ( !pGainedChild )
//		pGainedChild = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GainedChild" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pGainedChild, &parms, NULL );
//
//}
//
//void AActor::CheckLifeSpanReplicated (  )
//{
//	static UFunction* pCheckLifeSpanReplicated = 0;
//	AActor_execCheckLifeSpanReplicated_Parms parms;
//
//	if ( !pCheckLifeSpanReplicated )
//		pCheckLifeSpanReplicated = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.CheckLifeSpanReplicated" );
//
//	this->ProcessEvent ( pCheckLifeSpanReplicated, &parms, NULL );
//
//}
//
//void AActor::RegisterDestroyListener ( class UObject* o )
//{
//	static UFunction* pRegisterDestroyListener = 0;
//	AActor_execRegisterDestroyListener_Parms parms;
//
//	if ( !pRegisterDestroyListener )
//		pRegisterDestroyListener = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.RegisterDestroyListener" );
//
//	parms.o = o;
//	this->ProcessEvent ( pRegisterDestroyListener, &parms, NULL );
//
//}
//
//void AActor::eventDestroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AActor_eventDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//bool AActor::IsPenetrate (  )
//{
//	static UFunction* pIsPenetrate = 0;
//	AActor_execIsPenetrate_Parms parms;
//
//	if ( !pIsPenetrate )
//		pIsPenetrate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.IsPenetrate" );
//
//	this->ProcessEvent ( pIsPenetrate, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AActor::GetMusicDuration ( int SongHandle )
//{
//	static UFunction* pGetMusicDuration = 0;
//	AActor_execGetMusicDuration_Parms parms;
//
//	if ( !pGetMusicDuration )
//		pGetMusicDuration = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetMusicDuration" );
//
//	parms.SongHandle = SongHandle;
//	this->ProcessEvent ( pGetMusicDuration, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::StopAllMusicAndClearQueue ( float FadeOutTime )
//{
//	static UFunction* pStopAllMusicAndClearQueue = 0;
//	AActor_execStopAllMusicAndClearQueue_Parms parms;
//
//	if ( !pStopAllMusicAndClearQueue )
//		pStopAllMusicAndClearQueue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.StopAllMusicAndClearQueue" );
//
//	parms.FadeOutTime = FadeOutTime;
//	this->ProcessEvent ( pStopAllMusicAndClearQueue, &parms, NULL );
//
//}
//
//void AActor::StopAllMusic ( float FadeOutTime )
//{
//	static UFunction* pStopAllMusic = 0;
//	AActor_execStopAllMusic_Parms parms;
//
//	if ( !pStopAllMusic )
//		pStopAllMusic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.StopAllMusic" );
//
//	parms.FadeOutTime = FadeOutTime;
//	this->ProcessEvent ( pStopAllMusic, &parms, NULL );
//
//}
//
//void AActor::StopMusic ( int SongHandle, float FadeOutTime )
//{
//	static UFunction* pStopMusic = 0;
//	AActor_execStopMusic_Parms parms;
//
//	if ( !pStopMusic )
//		pStopMusic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.StopMusic" );
//
//	parms.SongHandle = SongHandle;
//	parms.FadeOutTime = FadeOutTime;
//	this->ProcessEvent ( pStopMusic, &parms, NULL );
//
//}
//
//bool AActor::IsPlayingMusic ( int SongHandle )
//{
//	static UFunction* pIsPlayingMusic = 0;
//	AActor_execIsPlayingMusic_Parms parms;
//
//	if ( !pIsPlayingMusic )
//		pIsPlayingMusic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.IsPlayingMusic" );
//
//	parms.SongHandle = SongHandle;
//	this->ProcessEvent ( pIsPlayingMusic, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AActor::PlayMusic ( struct FString Song, float FadeInTime, float InitialSeekTime )
//{
//	static UFunction* pPlayMusic = 0;
//	AActor_execPlayMusic_Parms parms;
//
//	if ( !pPlayMusic )
//		pPlayMusic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PlayMusic" );
//
//	parms.Song = Song;
//	parms.FadeInTime = FadeInTime;
//	parms.InitialSeekTime = InitialSeekTime;
//	this->ProcessEvent ( pPlayMusic, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::PauseStream ( int Handle )
//{
//	static UFunction* pPauseStream = 0;
//	AActor_execPauseStream_Parms parms;
//
//	if ( !pPauseStream )
//		pPauseStream = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PauseStream" );
//
//	parms.Handle = Handle;
//	this->ProcessEvent ( pPauseStream, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::AdjustVolume ( int Handle, float NewVolume )
//{
//	static UFunction* pAdjustVolume = 0;
//	AActor_execAdjustVolume_Parms parms;
//
//	if ( !pAdjustVolume )
//		pAdjustVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.AdjustVolume" );
//
//	parms.Handle = Handle;
//	parms.NewVolume = NewVolume;
//	this->ProcessEvent ( pAdjustVolume, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AActor::SeekStream ( int Handle, float Seconds )
//{
//	static UFunction* pSeekStream = 0;
//	AActor_execSeekStream_Parms parms;
//
//	if ( !pSeekStream )
//		pSeekStream = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SeekStream" );
//
//	parms.Handle = Handle;
//	parms.Seconds = Seconds;
//	this->ProcessEvent ( pSeekStream, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::StopStream ( int Handle, float FadeOutTime )
//{
//	static UFunction* pStopStream = 0;
//	AActor_execStopStream_Parms parms;
//
//	if ( !pStopStream )
//		pStopStream = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.StopStream" );
//
//	parms.Handle = Handle;
//	parms.FadeOutTime = FadeOutTime;
//	this->ProcessEvent ( pStopStream, &parms, NULL );
//
//}
//
//int AActor::PlayStream ( struct FString Song, bool UseMusicVolume, float Volume, float FadeInTime, float SeekTime )
//{
//	static UFunction* pPlayStream = 0;
//	AActor_execPlayStream_Parms parms;
//
//	if ( !pPlayStream )
//		pPlayStream = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PlayStream" );
//
//	parms.Song = Song;
//	parms.UseMusicVolume = UseMusicVolume;
//	parms.Volume = Volume;
//	parms.FadeInTime = FadeInTime;
//	parms.SeekTime = SeekTime;
//	this->ProcessEvent ( pPlayStream, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::AllowMusicPlayback ( bool Allow )
//{
//	static UFunction* pAllowMusicPlayback = 0;
//	AActor_execAllowMusicPlayback_Parms parms;
//
//	if ( !pAllowMusicPlayback )
//		pAllowMusicPlayback = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.AllowMusicPlayback" );
//
//	parms.Allow = Allow;
//	this->ProcessEvent ( pAllowMusicPlayback, &parms, NULL );
//
//}
//
//void AActor::UnClock ( float* Time )
//{
//	static UFunction* pUnClock = 0;
//	AActor_execUnClock_Parms parms;
//
//	if ( !pUnClock )
//		pUnClock = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.UnClock" );
//
//	parms.Time = *Time;
//	this->ProcessEvent ( pUnClock, &parms, NULL );
//
//	*Time = parms.Time;
//}
//
//void AActor::Clock ( float* Time )
//{
//	static UFunction* pClock = 0;
//	AActor_execClock_Parms parms;
//
//	if ( !pClock )
//		pClock = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Clock" );
//
//	parms.Time = *Time;
//	this->ProcessEvent ( pClock, &parms, NULL );
//
//	*Time = parms.Time;
//}
//
//bool AActor::eventKUpdateState ( struct FKRigidBodyState* NewState )
//{
//	static UFunction* pKUpdateState = 0;
//	AActor_eventKUpdateState_Parms parms;
//
//	if ( !pKUpdateState )
//		pKUpdateState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KUpdateState" );
//
//	parms.NewState = *NewState;
//	this->ProcessEvent ( pKUpdateState, &parms, NULL );
//
//	*NewState = parms.NewState;
//	return parms.ReturnValue;
//}
//
//void AActor::eventKApplyForce ( struct FVector* Force, struct FVector* Torque )
//{
//	static UFunction* pKApplyForce = 0;
//	AActor_eventKApplyForce_Parms parms;
//
//	if ( !pKApplyForce )
//		pKApplyForce = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KApplyForce" );
//
//	parms.Force = *Force;
//	parms.Torque = *Torque;
//	this->ProcessEvent ( pKApplyForce, &parms, NULL );
//
//	*Force = parms.Force;
//	*Torque = parms.Torque;
//}
//
//void AActor::eventKSkelConvulse (  )
//{
//	static UFunction* pKSkelConvulse = 0;
//	AActor_eventKSkelConvulse_Parms parms;
//
//	if ( !pKSkelConvulse )
//		pKSkelConvulse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSkelConvulse" );
//
//	this->ProcessEvent ( pKSkelConvulse, &parms, NULL );
//
//}
//
//void AActor::eventKVelDropBelow (  )
//{
//	static UFunction* pKVelDropBelow = 0;
//	AActor_eventKVelDropBelow_Parms parms;
//
//	if ( !pKVelDropBelow )
//		pKVelDropBelow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KVelDropBelow" );
//
//	this->ProcessEvent ( pKVelDropBelow, &parms, NULL );
//
//}
//
//void AActor::eventKImpact ( class AActor* Other, struct FVector pos, struct FVector impactVel, struct FVector impactNorm )
//{
//	static UFunction* pKImpact = 0;
//	AActor_eventKImpact_Parms parms;
//
//	if ( !pKImpact )
//		pKImpact = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KImpact" );
//
//	parms.Other = Other;
//	parms.pos = pos;
//	parms.impactVel = impactVel;
//	parms.impactNorm = impactNorm;
//	this->ProcessEvent ( pKImpact, &parms, NULL );
//
//}
//
//bool AActor::KIsRagdollAvailable (  )
//{
//	static UFunction* pKIsRagdollAvailable = 0;
//	AActor_execKIsRagdollAvailable_Parms parms;
//
//	if ( !pKIsRagdollAvailable )
//		pKIsRagdollAvailable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KIsRagdollAvailable" );
//
//	this->ProcessEvent ( pKIsRagdollAvailable, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::KMakeRagdollAvailable (  )
//{
//	static UFunction* pKMakeRagdollAvailable = 0;
//	AActor_execKMakeRagdollAvailable_Parms parms;
//
//	if ( !pKMakeRagdollAvailable )
//		pKMakeRagdollAvailable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KMakeRagdollAvailable" );
//
//	this->ProcessEvent ( pKMakeRagdollAvailable, &parms, NULL );
//
//}
//
//void AActor::KRemoveAllBoneLifters (  )
//{
//	static UFunction* pKRemoveAllBoneLifters = 0;
//	AActor_execKRemoveAllBoneLifters_Parms parms;
//
//	if ( !pKRemoveAllBoneLifters )
//		pKRemoveAllBoneLifters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KRemoveAllBoneLifters" );
//
//	this->ProcessEvent ( pKRemoveAllBoneLifters, &parms, NULL );
//
//}
//
//void AActor::KRemoveLifterFromBone ( struct FName BoneName )
//{
//	static UFunction* pKRemoveLifterFromBone = 0;
//	AActor_execKRemoveLifterFromBone_Parms parms;
//
//	if ( !pKRemoveLifterFromBone )
//		pKRemoveLifterFromBone = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KRemoveLifterFromBone" );
//
//	parms.BoneName = BoneName;
//	this->ProcessEvent ( pKRemoveLifterFromBone, &parms, NULL );
//
//}
//
//void AActor::KAddBoneLifter ( struct FName BoneName, struct FInterpCurve LiftVel, float LateralFriction, struct FInterpCurve Softness )
//{
//	static UFunction* pKAddBoneLifter = 0;
//	AActor_execKAddBoneLifter_Parms parms;
//
//	if ( !pKAddBoneLifter )
//		pKAddBoneLifter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KAddBoneLifter" );
//
//	parms.BoneName = BoneName;
//	parms.LiftVel = LiftVel;
//	parms.LateralFriction = LateralFriction;
//	parms.Softness = Softness;
//	this->ProcessEvent ( pKAddBoneLifter, &parms, NULL );
//
//}
//
//void AActor::KScaleJointLimits ( float Scale, float stiffness )
//{
//	static UFunction* pKScaleJointLimits = 0;
//	AActor_execKScaleJointLimits_Parms parms;
//
//	if ( !pKScaleJointLimits )
//		pKScaleJointLimits = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KScaleJointLimits" );
//
//	parms.Scale = Scale;
//	parms.stiffness = stiffness;
//	this->ProcessEvent ( pKScaleJointLimits, &parms, NULL );
//
//}
//
//void AActor::KFreezeRagdoll (  )
//{
//	static UFunction* pKFreezeRagdoll = 0;
//	AActor_execKFreezeRagdoll_Parms parms;
//
//	if ( !pKFreezeRagdoll )
//		pKFreezeRagdoll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KFreezeRagdoll" );
//
//	this->ProcessEvent ( pKFreezeRagdoll, &parms, NULL );
//
//}
//
//float AActor::KGetSkelMass (  )
//{
//	static UFunction* pKGetSkelMass = 0;
//	AActor_execKGetSkelMass_Parms parms;
//
//	if ( !pKGetSkelMass )
//		pKGetSkelMass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KGetSkelMass" );
//
//	this->ProcessEvent ( pKGetSkelMass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::KSetSkelVel ( struct FVector Velocity, struct FVector AngVelocity, bool AddToCurrent )
//{
//	static UFunction* pKSetSkelVel = 0;
//	AActor_execKSetSkelVel_Parms parms;
//
//	if ( !pKSetSkelVel )
//		pKSetSkelVel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSetSkelVel" );
//
//	parms.Velocity = Velocity;
//	parms.AngVelocity = AngVelocity;
//	parms.AddToCurrent = AddToCurrent;
//	this->ProcessEvent ( pKSetSkelVel, &parms, NULL );
//
//}
//
//void AActor::KEnableCollision ( class AActor* Other )
//{
//	static UFunction* pKEnableCollision = 0;
//	AActor_execKEnableCollision_Parms parms;
//
//	if ( !pKEnableCollision )
//		pKEnableCollision = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KEnableCollision" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pKEnableCollision, &parms, NULL );
//
//}
//
//void AActor::KDisableCollision ( class AActor* Other )
//{
//	static UFunction* pKDisableCollision = 0;
//	AActor_execKDisableCollision_Parms parms;
//
//	if ( !pKDisableCollision )
//		pKDisableCollision = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KDisableCollision" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pKDisableCollision, &parms, NULL );
//
//}
//
//float AActor::KGetActorGravScale (  )
//{
//	static UFunction* pKGetActorGravScale = 0;
//	AActor_execKGetActorGravScale_Parms parms;
//
//	if ( !pKGetActorGravScale )
//		pKGetActorGravScale = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KGetActorGravScale" );
//
//	this->ProcessEvent ( pKGetActorGravScale, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::KSetActorGravScale ( float ActorGravScale )
//{
//	static UFunction* pKSetActorGravScale = 0;
//	AActor_execKSetActorGravScale_Parms parms;
//
//	if ( !pKSetActorGravScale )
//		pKSetActorGravScale = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSetActorGravScale" );
//
//	parms.ActorGravScale = ActorGravScale;
//	this->ProcessEvent ( pKSetActorGravScale, &parms, NULL );
//
//}
//
//void AActor::KSetBlockKarma ( bool newBlock )
//{
//	static UFunction* pKSetBlockKarma = 0;
//	AActor_execKSetBlockKarma_Parms parms;
//
//	if ( !pKSetBlockKarma )
//		pKSetBlockKarma = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSetBlockKarma" );
//
//	parms.newBlock = newBlock;
//	this->ProcessEvent ( pKSetBlockKarma, &parms, NULL );
//
//}
//
//void AActor::KSetStayUprightParams ( float stiffness, float damping )
//{
//	static UFunction* pKSetStayUprightParams = 0;
//	AActor_execKSetStayUprightParams_Parms parms;
//
//	if ( !pKSetStayUprightParams )
//		pKSetStayUprightParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSetStayUprightParams" );
//
//	parms.stiffness = stiffness;
//	parms.damping = damping;
//	this->ProcessEvent ( pKSetStayUprightParams, &parms, NULL );
//
//}
//
//void AActor::KSetStayUpright ( bool stayUpright, bool allowRotate )
//{
//	static UFunction* pKSetStayUpright = 0;
//	AActor_execKSetStayUpright_Parms parms;
//
//	if ( !pKSetStayUpright )
//		pKSetStayUpright = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSetStayUpright" );
//
//	parms.stayUpright = stayUpright;
//	parms.allowRotate = allowRotate;
//	this->ProcessEvent ( pKSetStayUpright, &parms, NULL );
//
//}
//
//void AActor::KAddAngularImpulse ( struct FVector AngImpulse )
//{
//	static UFunction* pKAddAngularImpulse = 0;
//	AActor_execKAddAngularImpulse_Parms parms;
//
//	if ( !pKAddAngularImpulse )
//		pKAddAngularImpulse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KAddAngularImpulse" );
//
//	parms.AngImpulse = AngImpulse;
//	this->ProcessEvent ( pKAddAngularImpulse, &parms, NULL );
//
//}
//
//void AActor::KAddImpulse ( struct FVector Impulse, struct FVector Position, struct FName BoneName )
//{
//	static UFunction* pKAddImpulse = 0;
//	AActor_execKAddImpulse_Parms parms;
//
//	if ( !pKAddImpulse )
//		pKAddImpulse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KAddImpulse" );
//
//	parms.Impulse = Impulse;
//	parms.Position = Position;
//	parms.BoneName = BoneName;
//	this->ProcessEvent ( pKAddImpulse, &parms, NULL );
//
//}
//
////bool AActor::KIsAwake (  )
////{
////	static UFunction* pKIsAwake = 0;
////	AActor_execKIsAwake_Parms parms;
////
////	if ( !pKIsAwake )
////		pKIsAwake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KIsAwake" );
////
////	this->ProcessEvent ( pKIsAwake, &parms, NULL );
////
////	return parms.ReturnValue;
////}
////
////void AActor::KWake (  )
////{
////	static UFunction* pKWake = 0;
////	AActor_execKWake_Parms parms;
////
////	if ( !pKWake )
////		pKWake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KWake" );
////
////	this->ProcessEvent ( pKWake, &parms, NULL );
////
////}
//
//float AActor::KGetImpactThreshold (  )
//{
//	static UFunction* pKGetImpactThreshold = 0;
//	AActor_execKGetImpactThreshold_Parms parms;
//
//	if ( !pKGetImpactThreshold )
//		pKGetImpactThreshold = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KGetImpactThreshold" );
//
//	this->ProcessEvent ( pKGetImpactThreshold, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::KSetImpactThreshold ( float thresh )
//{
//	static UFunction* pKSetImpactThreshold = 0;
//	AActor_execKSetImpactThreshold_Parms parms;
//
//	if ( !pKSetImpactThreshold )
//		pKSetImpactThreshold = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSetImpactThreshold" );
//
//	parms.thresh = thresh;
//	this->ProcessEvent ( pKSetImpactThreshold, &parms, NULL );
//
//}
//
//void AActor::KGetCOMPosition ( struct FVector* pos )
//{
//	static UFunction* pKGetCOMPosition = 0;
//	AActor_execKGetCOMPosition_Parms parms;
//
//	if ( !pKGetCOMPosition )
//		pKGetCOMPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KGetCOMPosition" );
//
//	parms.pos = *pos;
//	this->ProcessEvent ( pKGetCOMPosition, &parms, NULL );
//
//	*pos = parms.pos;
//}
//
//void AActor::KGetCOMOffset ( struct FVector* offset )
//{
//	static UFunction* pKGetCOMOffset = 0;
//	AActor_execKGetCOMOffset_Parms parms;
//
//	if ( !pKGetCOMOffset )
//		pKGetCOMOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KGetCOMOffset" );
//
//	parms.offset = *offset;
//	this->ProcessEvent ( pKGetCOMOffset, &parms, NULL );
//
//	*offset = parms.offset;
//}
//
//void AActor::KSetCOMOffset ( struct FVector offset )
//{
//	static UFunction* pKSetCOMOffset = 0;
//	AActor_execKSetCOMOffset_Parms parms;
//
//	if ( !pKSetCOMOffset )
//		pKSetCOMOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSetCOMOffset" );
//
//	parms.offset = offset;
//	this->ProcessEvent ( pKSetCOMOffset, &parms, NULL );
//
//}
//
//float AActor::KGetRestitution (  )
//{
//	static UFunction* pKGetRestitution = 0;
//	AActor_execKGetRestitution_Parms parms;
//
//	if ( !pKGetRestitution )
//		pKGetRestitution = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KGetRestitution" );
//
//	this->ProcessEvent ( pKGetRestitution, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::KSetRestitution ( float rest )
//{
//	static UFunction* pKSetRestitution = 0;
//	AActor_execKSetRestitution_Parms parms;
//
//	if ( !pKSetRestitution )
//		pKSetRestitution = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSetRestitution" );
//
//	parms.rest = rest;
//	this->ProcessEvent ( pKSetRestitution, &parms, NULL );
//
//}
//
//float AActor::KGetFriction (  )
//{
//	static UFunction* pKGetFriction = 0;
//	AActor_execKGetFriction_Parms parms;
//
//	if ( !pKGetFriction )
//		pKGetFriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KGetFriction" );
//
//	this->ProcessEvent ( pKGetFriction, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::KSetFriction ( float friction )
//{
//	static UFunction* pKSetFriction = 0;
//	AActor_execKSetFriction_Parms parms;
//
//	if ( !pKSetFriction )
//		pKSetFriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSetFriction" );
//
//	parms.friction = friction;
//	this->ProcessEvent ( pKSetFriction, &parms, NULL );
//
//}
//
//void AActor::KGetDampingProps ( float* lindamp, float* angdamp )
//{
//	static UFunction* pKGetDampingProps = 0;
//	AActor_execKGetDampingProps_Parms parms;
//
//	if ( !pKGetDampingProps )
//		pKGetDampingProps = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KGetDampingProps" );
//
//	parms.lindamp = *lindamp;
//	parms.angdamp = *angdamp;
//	this->ProcessEvent ( pKGetDampingProps, &parms, NULL );
//
//	*lindamp = parms.lindamp;
//	*angdamp = parms.angdamp;
//}
//
//void AActor::KSetDampingProps ( float lindamp, float angdamp )
//{
//	static UFunction* pKSetDampingProps = 0;
//	AActor_execKSetDampingProps_Parms parms;
//
//	if ( !pKSetDampingProps )
//		pKSetDampingProps = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSetDampingProps" );
//
//	parms.lindamp = lindamp;
//	parms.angdamp = angdamp;
//	this->ProcessEvent ( pKSetDampingProps, &parms, NULL );
//
//}
//
//void AActor::KGetInertiaTensor ( struct FVector* it1, struct FVector* it2 )
//{
//	static UFunction* pKGetInertiaTensor = 0;
//	AActor_execKGetInertiaTensor_Parms parms;
//
//	if ( !pKGetInertiaTensor )
//		pKGetInertiaTensor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KGetInertiaTensor" );
//
//	parms.it1 = *it1;
//	parms.it2 = *it2;
//	this->ProcessEvent ( pKGetInertiaTensor, &parms, NULL );
//
//	*it1 = parms.it1;
//	*it2 = parms.it2;
//}
//
//void AActor::KSetInertiaTensor ( struct FVector it1, struct FVector it2 )
//{
//	static UFunction* pKSetInertiaTensor = 0;
//	AActor_execKSetInertiaTensor_Parms parms;
//
//	if ( !pKSetInertiaTensor )
//		pKSetInertiaTensor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSetInertiaTensor" );
//
//	parms.it1 = it1;
//	parms.it2 = it2;
//	this->ProcessEvent ( pKSetInertiaTensor, &parms, NULL );
//
//}
//
//float AActor::KGetMass (  )
//{
//	static UFunction* pKGetMass = 0;
//	AActor_execKGetMass_Parms parms;
//
//	if ( !pKGetMass )
//		pKGetMass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KGetMass" );
//
//	this->ProcessEvent ( pKGetMass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::KSetMass ( float Mass )
//{
//	static UFunction* pKSetMass = 0;
//	AActor_execKSetMass_Parms parms;
//
//	if ( !pKSetMass )
//		pKSetMass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSetMass" );
//
//	parms.Mass = Mass;
//	this->ProcessEvent ( pKSetMass, &parms, NULL );
//
//}
//
//struct FKRBVec AActor::KRBVecFromVector ( struct FVector V )
//{
//	static UFunction* pKRBVecFromVector = 0;
//	AActor_execKRBVecFromVector_Parms parms;
//
//	if ( !pKRBVecFromVector )
//		pKRBVecFromVector = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KRBVecFromVector" );
//
//	parms.V = V;
//	this->ProcessEvent ( pKRBVecFromVector, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FVector AActor::KRBVecToVector ( struct FKRBVec RBvec )
//{
//	static UFunction* pKRBVecToVector = 0;
//	AActor_execKRBVecToVector_Parms parms;
//
//	if ( !pKRBVecToVector )
//		pKRBVecToVector = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KRBVecToVector" );
//
//	parms.RBvec = RBvec;
//	this->ProcessEvent ( pKRBVecToVector, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::KDrawRigidBodyState ( struct FKRigidBodyState RBstate, bool AltColour )
//{
//	static UFunction* pKDrawRigidBodyState = 0;
//	AActor_execKDrawRigidBodyState_Parms parms;
//
//	if ( !pKDrawRigidBodyState )
//		pKDrawRigidBodyState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KDrawRigidBodyState" );
//
//	parms.RBstate = RBstate;
//	parms.AltColour = AltColour;
//	this->ProcessEvent ( pKDrawRigidBodyState, &parms, NULL );
//
//}
//
//void AActor::KGetRigidBodyState ( struct FKRigidBodyState* RBstate )
//{
//	static UFunction* pKGetRigidBodyState = 0;
//	AActor_execKGetRigidBodyState_Parms parms;
//
//	if ( !pKGetRigidBodyState )
//		pKGetRigidBodyState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KGetRigidBodyState" );
//
//	parms.RBstate = *RBstate;
//	this->ProcessEvent ( pKGetRigidBodyState, &parms, NULL );
//
//	*RBstate = parms.RBstate;
//}
//
//struct FQuat AActor::KGetRBQuaternion (  )
//{
//	static UFunction* pKGetRBQuaternion = 0;
//	AActor_execKGetRBQuaternion_Parms parms;
//
//	if ( !pKGetRBQuaternion )
//		pKGetRBQuaternion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KGetRBQuaternion" );
//
//	this->ProcessEvent ( pKGetRBQuaternion, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::KSetSimParams ( struct FKSimParams SimParams )
//{
//	static UFunction* pKSetSimParams = 0;
//	AActor_execKSetSimParams_Parms parms;
//
//	if ( !pKSetSimParams )
//		pKSetSimParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KSetSimParams" );
//
//	parms.SimParams = SimParams;
//	this->ProcessEvent ( pKSetSimParams, &parms, NULL );
//
//}
//
//void AActor::KGetSimParams ( struct FKSimParams* SimParams )
//{
//	static UFunction* pKGetSimParams = 0;
//	AActor_execKGetSimParams_Parms parms;
//
//	if ( !pKGetSimParams )
//		pKGetSimParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.KGetSimParams" );
//
//	parms.SimParams = *SimParams;
//	this->ProcessEvent ( pKGetSimParams, &parms, NULL );
//
//	*SimParams = parms.SimParams;
//}
//
//void AActor::OnlyAffectPawns ( bool B )
//{
//	static UFunction* pOnlyAffectPawns = 0;
//	AActor_execOnlyAffectPawns_Parms parms;
//
//	if ( !pOnlyAffectPawns )
//		pOnlyAffectPawns = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.OnlyAffectPawns" );
//
//	parms.B = B;
//	this->ProcessEvent ( pOnlyAffectPawns, &parms, NULL );
//
//}
//
//void AActor::SetPhysics ( unsigned char newPhysics )
//{
//	static UFunction* pSetPhysics = 0;
//	AActor_execSetPhysics_Parms parms;
//
//	if ( !pSetPhysics )
//		pSetPhysics = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetPhysics" );
//
//	WORD iNative = pSetPhysics->iNative;
//	pSetPhysics->FunctionFlags &= ~FUNC_Native;
//	pSetPhysics->iNative = 0;
//
//	parms.newPhysics = newPhysics;
//	this->ProcessEvent ( pSetPhysics, &parms, NULL );
//
//	pSetPhysics->iNative = iNative;
//	pSetPhysics->FunctionFlags |= FUNC_Native;
//}
//
//void AActor::FinishInterpolation (  )
//{
//	static UFunction* pFinishInterpolation = 0;
//	AActor_execFinishInterpolation_Parms parms;
//
//	if ( !pFinishInterpolation )
//		pFinishInterpolation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.FinishInterpolation" );
//
//	WORD iNative = pFinishInterpolation->iNative;
//	pFinishInterpolation->FunctionFlags &= ~FUNC_Native;
//	pFinishInterpolation->iNative = 0;
//
//	this->ProcessEvent ( pFinishInterpolation, &parms, NULL );
//
//	pFinishInterpolation->iNative = iNative;
//	pFinishInterpolation->FunctionFlags |= FUNC_Native;
//}
//
//void AActor::DebugUnclock (  )
//{
//	static UFunction* pDebugUnclock = 0;
//	AActor_execDebugUnclock_Parms parms;
//
//	if ( !pDebugUnclock )
//		pDebugUnclock = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.DebugUnclock" );
//
//	this->ProcessEvent ( pDebugUnclock, &parms, NULL );
//
//}
//
//void AActor::DebugClock (  )
//{
//	static UFunction* pDebugClock = 0;
//	AActor_execDebugClock_Parms parms;
//
//	if ( !pDebugClock )
//		pDebugClock = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.DebugClock" );
//
//	this->ProcessEvent ( pDebugClock, &parms, NULL );
//
//}
//
//void AActor::ClearStayingDebugLines (  )
//{
//	static UFunction* pClearStayingDebugLines = 0;
//	AActor_execClearStayingDebugLines_Parms parms;
//
//	if ( !pClearStayingDebugLines )
//		pClearStayingDebugLines = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.ClearStayingDebugLines" );
//
//	this->ProcessEvent ( pClearStayingDebugLines, &parms, NULL );
//
//}
//
//void AActor::DrawDebugSphere ( struct FVector Base, float Radius, int NumDivisions, unsigned char R, unsigned char G, unsigned char B )
//{
//	static UFunction* pDrawDebugSphere = 0;
//	AActor_execDrawDebugSphere_Parms parms;
//
//	if ( !pDrawDebugSphere )
//		pDrawDebugSphere = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.DrawDebugSphere" );
//
//	parms.Base = Base;
//	parms.Radius = Radius;
//	parms.NumDivisions = NumDivisions;
//	parms.R = R;
//	parms.G = G;
//	parms.B = B;
//	this->ProcessEvent ( pDrawDebugSphere, &parms, NULL );
//
//}
//
//void AActor::DrawDebugCircle ( struct FVector Base, struct FVector X, struct FVector Y, float Radius, int NumSides, unsigned char R, unsigned char G, unsigned char B )
//{
//	static UFunction* pDrawDebugCircle = 0;
//	AActor_execDrawDebugCircle_Parms parms;
//
//	if ( !pDrawDebugCircle )
//		pDrawDebugCircle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.DrawDebugCircle" );
//
//	parms.Base = Base;
//	parms.X = X;
//	parms.Y = Y;
//	parms.Radius = Radius;
//	parms.NumSides = NumSides;
//	parms.R = R;
//	parms.G = G;
//	parms.B = B;
//	this->ProcessEvent ( pDrawDebugCircle, &parms, NULL );
//
//}
//
//void AActor::DrawStayingDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B )
//{
//	static UFunction* pDrawStayingDebugLine = 0;
//	AActor_execDrawStayingDebugLine_Parms parms;
//
//	if ( !pDrawStayingDebugLine )
//		pDrawStayingDebugLine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.DrawStayingDebugLine" );
//
//	parms.LineStart = LineStart;
//	parms.LineEnd = LineEnd;
//	parms.R = R;
//	parms.G = G;
//	parms.B = B;
//	this->ProcessEvent ( pDrawStayingDebugLine, &parms, NULL );
//
//}
//
//void AActor::DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B )
//{
//	static UFunction* pDrawDebugLine = 0;
//	AActor_execDrawDebugLine_Parms parms;
//
//	if ( !pDrawDebugLine )
//		pDrawDebugLine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.DrawDebugLine" );
//
//	parms.LineStart = LineStart;
//	parms.LineEnd = LineEnd;
//	parms.R = R;
//	parms.G = G;
//	parms.B = B;
//	this->ProcessEvent ( pDrawDebugLine, &parms, NULL );
//
//}
//
//struct FPlane AActor::GetRenderBoundingSphere (  )
//{
//	static UFunction* pGetRenderBoundingSphere = 0;
//	AActor_execGetRenderBoundingSphere_Parms parms;
//
//	if ( !pGetRenderBoundingSphere )
//		pGetRenderBoundingSphere = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetRenderBoundingSphere" );
//
//	this->ProcessEvent ( pGetRenderBoundingSphere, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AActor::GetUrlOption ( struct FString Option )
//{
//	static UFunction* pGetUrlOption = 0;
//	AActor_execGetUrlOption_Parms parms;
//
//	if ( !pGetUrlOption )
//		pGetUrlOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetUrlOption" );
//
//	parms.Option = Option;
//	this->ProcessEvent ( pGetUrlOption, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::UpdateURL ( struct FString NewOption, struct FString NewValue, bool bSaveDefault )
//{
//	static UFunction* pUpdateURL = 0;
//	AActor_execUpdateURL_Parms parms;
//
//	if ( !pUpdateURL )
//		pUpdateURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.UpdateURL" );
//
//	parms.NewOption = NewOption;
//	parms.NewValue = NewValue;
//	parms.bSaveDefault = bSaveDefault;
//	this->ProcessEvent ( pUpdateURL, &parms, NULL );
//
//}
//
//struct FName AActor::GetClosestBone ( struct FVector loc, struct FVector ray, struct FName BiasBone, float BiasDistance, float* boneDist )
//{
//	static UFunction* pGetClosestBone = 0;
//	AActor_execGetClosestBone_Parms parms;
//
//	if ( !pGetClosestBone )
//		pGetClosestBone = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetClosestBone" );
//
//	parms.loc = loc;
//	parms.ray = ray;
//	parms.BiasBone = BiasBone;
//	parms.BiasDistance = BiasDistance;
//	this->ProcessEvent ( pGetClosestBone, &parms, NULL );
//
//	*boneDist = parms.boneDist;
//	return parms.ReturnValue;
//}
//
//bool AActor::AnimIsInGroup ( int Channel, struct FName GroupName )
//{
//	static UFunction* pAnimIsInGroup = 0;
//	AActor_execAnimIsInGroup_Parms parms;
//
//	if ( !pAnimIsInGroup )
//		pAnimIsInGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.AnimIsInGroup" );
//
//	parms.Channel = Channel;
//	parms.GroupName = GroupName;
//	this->ProcessEvent ( pAnimIsInGroup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::GetAnimParams ( int Channel, struct FName* OutSeqName, float* OutAnimFrame, float* OutAnimRate )
//{
//	static UFunction* pGetAnimParams = 0;
//	AActor_execGetAnimParams_Parms parms;
//
//	if ( !pGetAnimParams )
//		pGetAnimParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetAnimParams" );
//
//	parms.Channel = Channel;
//	this->ProcessEvent ( pGetAnimParams, &parms, NULL );
//
//	*OutSeqName = parms.OutSeqName;
//	*OutAnimFrame = parms.OutAnimFrame;
//	*OutAnimRate = parms.OutAnimRate;
//}
//
//void AActor::SetBoneRotation ( struct FName BoneName, struct FRotator BoneTurn, int Space, float Alpha )
//{
//	static UFunction* pSetBoneRotation = 0;
//	AActor_execSetBoneRotation_Parms parms;
//
//	if ( !pSetBoneRotation )
//		pSetBoneRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetBoneRotation" );
//
//	parms.BoneName = BoneName;
//	parms.BoneTurn = BoneTurn;
//	parms.Space = Space;
//	parms.Alpha = Alpha;
//	this->ProcessEvent ( pSetBoneRotation, &parms, NULL );
//
//}
//
//void AActor::SetBoneLocation ( struct FName BoneName, struct FVector BoneTrans, float Alpha )
//{
//	static UFunction* pSetBoneLocation = 0;
//	AActor_execSetBoneLocation_Parms parms;
//
//	if ( !pSetBoneLocation )
//		pSetBoneLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetBoneLocation" );
//
//	parms.BoneName = BoneName;
//	parms.BoneTrans = BoneTrans;
//	parms.Alpha = Alpha;
//	this->ProcessEvent ( pSetBoneLocation, &parms, NULL );
//
//}
//
//void AActor::SetBoneDirection ( struct FName BoneName, struct FRotator BoneTurn, struct FVector BoneTrans, float Alpha, int Space )
//{
//	static UFunction* pSetBoneDirection = 0;
//	AActor_execSetBoneDirection_Parms parms;
//
//	if ( !pSetBoneDirection )
//		pSetBoneDirection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetBoneDirection" );
//
//	parms.BoneName = BoneName;
//	parms.BoneTurn = BoneTurn;
//	parms.BoneTrans = BoneTrans;
//	parms.Alpha = Alpha;
//	parms.Space = Space;
//	this->ProcessEvent ( pSetBoneDirection, &parms, NULL );
//
//}
//
//void AActor::SetBoneScale ( int Slot, float BoneScale, struct FName BoneName )
//{
//	static UFunction* pSetBoneScale = 0;
//	AActor_execSetBoneScale_Parms parms;
//
//	if ( !pSetBoneScale )
//		pSetBoneScale = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetBoneScale" );
//
//	parms.Slot = Slot;
//	parms.BoneScale = BoneScale;
//	parms.BoneName = BoneName;
//	this->ProcessEvent ( pSetBoneScale, &parms, NULL );
//
//}
//
//void AActor::LockRootMotion ( int Lock )
//{
//	static UFunction* pLockRootMotion = 0;
//	AActor_execLockRootMotion_Parms parms;
//
//	if ( !pLockRootMotion )
//		pLockRootMotion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.LockRootMotion" );
//
//	parms.Lock = Lock;
//	this->ProcessEvent ( pLockRootMotion, &parms, NULL );
//
//}
//
////bool AActor::DetachFromBone ( class AActor* Attachment )
////{
////	static UFunction* pDetachFromBone = 0;
////	AActor_execDetachFromBone_Parms parms;
////
////	if ( !pDetachFromBone )
////		pDetachFromBone = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.DetachFromBone" );
////
////	parms.Attachment = Attachment;
////	this->ProcessEvent ( pDetachFromBone, &parms, NULL );
////
////	return parms.ReturnValue;
////}
////
////bool AActor::AttachToBone ( class AActor* Attachment, struct FName BoneName )
////{
////	static UFunction* pAttachToBone = 0;
////	AActor_execAttachToBone_Parms parms;
////
////	if ( !pAttachToBone )
////		pAttachToBone = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.AttachToBone" );
////
////	parms.Attachment = Attachment;
////	parms.BoneName = BoneName;
////	this->ProcessEvent ( pAttachToBone, &parms, NULL );
////
////	return parms.ReturnValue;
////}
//
//struct FRotator AActor::GetRootRotationDelta (  )
//{
//	static UFunction* pGetRootRotationDelta = 0;
//	AActor_execGetRootRotationDelta_Parms parms;
//
//	if ( !pGetRootRotationDelta )
//		pGetRootRotationDelta = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetRootRotationDelta" );
//
//	this->ProcessEvent ( pGetRootRotationDelta, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FVector AActor::GetRootLocationDelta (  )
//{
//	static UFunction* pGetRootLocationDelta = 0;
//	AActor_execGetRootLocationDelta_Parms parms;
//
//	if ( !pGetRootLocationDelta )
//		pGetRootLocationDelta = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetRootLocationDelta" );
//
//	this->ProcessEvent ( pGetRootLocationDelta, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FRotator AActor::GetRootRotation (  )
//{
//	static UFunction* pGetRootRotation = 0;
//	AActor_execGetRootRotation_Parms parms;
//
//	if ( !pGetRootRotation )
//		pGetRootRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetRootRotation" );
//
//	this->ProcessEvent ( pGetRootRotation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FVector AActor::GetRootLocation (  )
//{
//	static UFunction* pGetRootLocation = 0;
//	AActor_execGetRootLocation_Parms parms;
//
//	if ( !pGetRootLocation )
//		pGetRootLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetRootLocation" );
//
//	this->ProcessEvent ( pGetRootLocation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FRotator AActor::GetBoneRotation ( struct FName BoneName, int Space )
//{
//	static UFunction* pGetBoneRotation = 0;
//	AActor_execGetBoneRotation_Parms parms;
//
//	if ( !pGetBoneRotation )
//		pGetBoneRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetBoneRotation" );
//
//	parms.BoneName = BoneName;
//	parms.Space = Space;
//	this->ProcessEvent ( pGetBoneRotation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FCoords AActor::GetBoneCoords ( struct FName BoneName )
//{
//	static UFunction* pGetBoneCoords = 0;
//	AActor_execGetBoneCoords_Parms parms;
//
//	if ( !pGetBoneCoords )
//		pGetBoneCoords = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetBoneCoords" );
//
//	parms.BoneName = BoneName;
//	this->ProcessEvent ( pGetBoneCoords, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::AnimBlendToAlpha ( int Stage, float TargetAlpha, float TimeInterval )
//{
//	static UFunction* pAnimBlendToAlpha = 0;
//	AActor_execAnimBlendToAlpha_Parms parms;
//
//	if ( !pAnimBlendToAlpha )
//		pAnimBlendToAlpha = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.AnimBlendToAlpha" );
//
//	parms.Stage = Stage;
//	parms.TargetAlpha = TargetAlpha;
//	parms.TimeInterval = TimeInterval;
//	this->ProcessEvent ( pAnimBlendToAlpha, &parms, NULL );
//
//}
//
//void AActor::AnimBlendParams ( int Stage, float BlendAlpha, float InTime, float OutTime, struct FName BoneName, bool bGlobalPose )
//{
//	static UFunction* pAnimBlendParams = 0;
//	AActor_execAnimBlendParams_Parms parms;
//
//	if ( !pAnimBlendParams )
//		pAnimBlendParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.AnimBlendParams" );
//
//	parms.Stage = Stage;
//	parms.BlendAlpha = BlendAlpha;
//	parms.InTime = InTime;
//	parms.OutTime = OutTime;
//	parms.BoneName = BoneName;
//	parms.bGlobalPose = bGlobalPose;
//	this->ProcessEvent ( pAnimBlendParams, &parms, NULL );
//
//}
//
//void AActor::BoneRefresh (  )
//{
//	static UFunction* pBoneRefresh = 0;
//	AActor_execBoneRefresh_Parms parms;
//
//	if ( !pBoneRefresh )
//		pBoneRefresh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.BoneRefresh" );
//
//	this->ProcessEvent ( pBoneRefresh, &parms, NULL );
//
//}
//
//void AActor::LinkMesh ( class UMesh* NewMesh, bool bKeepAnim )
//{
//	static UFunction* pLinkMesh = 0;
//	AActor_execLinkMesh_Parms parms;
//
//	if ( !pLinkMesh )
//		pLinkMesh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.LinkMesh" );
//
//	parms.NewMesh = NewMesh;
//	parms.bKeepAnim = bKeepAnim;
//	this->ProcessEvent ( pLinkMesh, &parms, NULL );
//
//}
//
//void AActor::LinkSkelAnim ( class UMeshAnimation* Anim, class UMesh* NewMesh )
//{
//	static UFunction* pLinkSkelAnim = 0;
//	AActor_execLinkSkelAnim_Parms parms;
//
//	if ( !pLinkSkelAnim )
//		pLinkSkelAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.LinkSkelAnim" );
//
//	parms.Anim = Anim;
//	parms.NewMesh = NewMesh;
//	this->ProcessEvent ( pLinkSkelAnim, &parms, NULL );
//
//}
//
//int AActor::GetNotifyChannel (  )
//{
//	static UFunction* pGetNotifyChannel = 0;
//	AActor_execGetNotifyChannel_Parms parms;
//
//	if ( !pGetNotifyChannel )
//		pGetNotifyChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetNotifyChannel" );
//
//	this->ProcessEvent ( pGetNotifyChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::EnableChannelNotify ( int Channel, int Switch )
//{
//	static UFunction* pEnableChannelNotify = 0;
//	AActor_execEnableChannelNotify_Parms parms;
//
//	if ( !pEnableChannelNotify )
//		pEnableChannelNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.EnableChannelNotify" );
//
//	parms.Channel = Channel;
//	parms.Switch = Switch;
//	this->ProcessEvent ( pEnableChannelNotify, &parms, NULL );
//
//}
//
//void AActor::eventAnimEnd ( int Channel )
//{
//	static UFunction* pAnimEnd = 0;
//	AActor_eventAnimEnd_Parms parms;
//
//	if ( !pAnimEnd )
//		pAnimEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.AnimEnd" );
//
//	parms.Channel = Channel;
//	this->ProcessEvent ( pAnimEnd, &parms, NULL );
//
//}
//
//void AActor::eventLIPSincAnimEnd (  )
//{
//	static UFunction* pLIPSincAnimEnd = 0;
//	AActor_eventLIPSincAnimEnd_Parms parms;
//
//	if ( !pLIPSincAnimEnd )
//		pLIPSincAnimEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.LIPSincAnimEnd" );
//
//	this->ProcessEvent ( pLIPSincAnimEnd, &parms, NULL );
//
//}
//
//struct FString AActor::CurrentLIPSincAnim (  )
//{
//	static UFunction* pCurrentLIPSincAnim = 0;
//	AActor_execCurrentLIPSincAnim_Parms parms;
//
//	if ( !pCurrentLIPSincAnim )
//		pCurrentLIPSincAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.CurrentLIPSincAnim" );
//
//	this->ProcessEvent ( pCurrentLIPSincAnim, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::IsPlayingLIPSincAnim (  )
//{
//	static UFunction* pIsPlayingLIPSincAnim = 0;
//	AActor_execIsPlayingLIPSincAnim_Parms parms;
//
//	if ( !pIsPlayingLIPSincAnim )
//		pIsPlayingLIPSincAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.IsPlayingLIPSincAnim" );
//
//	this->ProcessEvent ( pIsPlayingLIPSincAnim, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::HasLIPSincAnim ( struct FName LIPSincAnimName )
//{
//	static UFunction* pHasLIPSincAnim = 0;
//	AActor_execHasLIPSincAnim_Parms parms;
//
//	if ( !pHasLIPSincAnim )
//		pHasLIPSincAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.HasLIPSincAnim" );
//
//	parms.LIPSincAnimName = LIPSincAnimName;
//	this->ProcessEvent ( pHasLIPSincAnim, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::StopLIPSincAnim (  )
//{
//	static UFunction* pStopLIPSincAnim = 0;
//	AActor_execStopLIPSincAnim_Parms parms;
//
//	if ( !pStopLIPSincAnim )
//		pStopLIPSincAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.StopLIPSincAnim" );
//
//	this->ProcessEvent ( pStopLIPSincAnim, &parms, NULL );
//
//}
//
//void AActor::PlayLIPSincAnim ( struct FName LIPSincAnimName, float Volume, float Radius, float Pitch )
//{
//	static UFunction* pPlayLIPSincAnim = 0;
//	AActor_execPlayLIPSincAnim_Parms parms;
//
//	if ( !pPlayLIPSincAnim )
//		pPlayLIPSincAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PlayLIPSincAnim" );
//
//	parms.LIPSincAnimName = LIPSincAnimName;
//	parms.Volume = Volume;
//	parms.Radius = Radius;
//	parms.Pitch = Pitch;
//	this->ProcessEvent ( pPlayLIPSincAnim, &parms, NULL );
//
//}
//
//void AActor::AnimStopLooping ( int Channel )
//{
//	static UFunction* pAnimStopLooping = 0;
//	AActor_execAnimStopLooping_Parms parms;
//
//	if ( !pAnimStopLooping )
//		pAnimStopLooping = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.AnimStopLooping" );
//
//	parms.Channel = Channel;
//	this->ProcessEvent ( pAnimStopLooping, &parms, NULL );
//
//}
//
//bool AActor::IsTweening ( int Channel )
//{
//	static UFunction* pIsTweening = 0;
//	AActor_execIsTweening_Parms parms;
//
//	if ( !pIsTweening )
//		pIsTweening = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.IsTweening" );
//
//	parms.Channel = Channel;
//	this->ProcessEvent ( pIsTweening, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::SetAnimFrame ( float Time, int Channel, int UnitFlag )
//{
//	static UFunction* pSetAnimFrame = 0;
//	AActor_execSetAnimFrame_Parms parms;
//
//	if ( !pSetAnimFrame )
//		pSetAnimFrame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetAnimFrame" );
//
//	parms.Time = Time;
//	parms.Channel = Channel;
//	parms.UnitFlag = UnitFlag;
//	this->ProcessEvent ( pSetAnimFrame, &parms, NULL );
//
//}
//
//void AActor::FreezeAnimAt ( float Time, int Channel )
//{
//	static UFunction* pFreezeAnimAt = 0;
//	AActor_execFreezeAnimAt_Parms parms;
//
//	if ( !pFreezeAnimAt )
//		pFreezeAnimAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.FreezeAnimAt" );
//
//	parms.Time = Time;
//	parms.Channel = Channel;
//	this->ProcessEvent ( pFreezeAnimAt, &parms, NULL );
//
//}
//
//void AActor::StopAnimating ( bool ClearAllButBase )
//{
//	static UFunction* pStopAnimating = 0;
//	AActor_execStopAnimating_Parms parms;
//
//	if ( !pStopAnimating )
//		pStopAnimating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.StopAnimating" );
//
//	parms.ClearAllButBase = ClearAllButBase;
//	this->ProcessEvent ( pStopAnimating, &parms, NULL );
//
//}
//
//bool AActor::HasAnim ( struct FName Sequence )
//{
//	static UFunction* pHasAnim = 0;
//	AActor_execHasAnim_Parms parms;
//
//	if ( !pHasAnim )
//		pHasAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.HasAnim" );
//
//	WORD iNative = pHasAnim->iNative;
//	pHasAnim->FunctionFlags &= ~FUNC_Native;
//	pHasAnim->iNative = 0;
//
//	parms.Sequence = Sequence;
//	this->ProcessEvent ( pHasAnim, &parms, NULL );
//
//	pHasAnim->iNative = iNative;
//	pHasAnim->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//void AActor::FinishAnim ( int Channel )
//{
//	static UFunction* pFinishAnim = 0;
//	AActor_execFinishAnim_Parms parms;
//
//	if ( !pFinishAnim )
//		pFinishAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.FinishAnim" );
//
//	WORD iNative = pFinishAnim->iNative;
//	pFinishAnim->FunctionFlags &= ~FUNC_Native;
//	pFinishAnim->iNative = 0;
//
//	parms.Channel = Channel;
//	this->ProcessEvent ( pFinishAnim, &parms, NULL );
//
//	pFinishAnim->iNative = iNative;
//	pFinishAnim->FunctionFlags |= FUNC_Native;
//}
//
//bool AActor::IsAnimating ( int Channel )
//{
//	static UFunction* pIsAnimating = 0;
//	AActor_execIsAnimating_Parms parms;
//
//	if ( !pIsAnimating )
//		pIsAnimating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.IsAnimating" );
//
//	WORD iNative = pIsAnimating->iNative;
//	pIsAnimating->FunctionFlags &= ~FUNC_Native;
//	pIsAnimating->iNative = 0;
//
//	parms.Channel = Channel;
//	this->ProcessEvent ( pIsAnimating, &parms, NULL );
//
//	pIsAnimating->iNative = iNative;
//	pIsAnimating->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool AActor::TweenAnim ( struct FName Sequence, float Time, int Channel )
//{
//	static UFunction* pTweenAnim = 0;
//	AActor_execTweenAnim_Parms parms;
//
//	if ( !pTweenAnim )
//		pTweenAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TweenAnim" );
//
//	WORD iNative = pTweenAnim->iNative;
//	pTweenAnim->FunctionFlags &= ~FUNC_Native;
//	pTweenAnim->iNative = 0;
//
//	parms.Sequence = Sequence;
//	parms.Time = Time;
//	parms.Channel = Channel;
//	this->ProcessEvent ( pTweenAnim, &parms, NULL );
//
//	pTweenAnim->iNative = iNative;
//	pTweenAnim->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool AActor::LoopAnim ( struct FName Sequence, float Rate, float TweenTime, int Channel )
//{
//	static UFunction* pLoopAnim = 0;
//	AActor_execLoopAnim_Parms parms;
//
//	if ( !pLoopAnim )
//		pLoopAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.LoopAnim" );
//
//	WORD iNative = pLoopAnim->iNative;
//	pLoopAnim->FunctionFlags &= ~FUNC_Native;
//	pLoopAnim->iNative = 0;
//
//	parms.Sequence = Sequence;
//	parms.Rate = Rate;
//	parms.TweenTime = TweenTime;
//	parms.Channel = Channel;
//	this->ProcessEvent ( pLoopAnim, &parms, NULL );
//
//	pLoopAnim->iNative = iNative;
//	pLoopAnim->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool AActor::PlayAnim ( struct FName Sequence, float Rate, float TweenTime, int Channel )
//{
//	static UFunction* pPlayAnim = 0;
//	AActor_execPlayAnim_Parms parms;
//
//	if ( !pPlayAnim )
//		pPlayAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.PlayAnim" );
//
//	WORD iNative = pPlayAnim->iNative;
//	pPlayAnim->FunctionFlags &= ~FUNC_Native;
//	pPlayAnim->iNative = 0;
//
//	parms.Sequence = Sequence;
//	parms.Rate = Rate;
//	parms.TweenTime = TweenTime;
//	parms.Channel = Channel;
//	this->ProcessEvent ( pPlayAnim, &parms, NULL );
//
//	pPlayAnim->iNative = iNative;
//	pPlayAnim->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//struct FString AActor::GetMeshName (  )
//{
//	static UFunction* pGetMeshName = 0;
//	AActor_execGetMeshName_Parms parms;
//
//	if ( !pGetMeshName )
//		pGetMeshName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.GetMeshName" );
//
//	this->ProcessEvent ( pGetMeshName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::IsJoinedTo ( class AActor* Other )
//{
//	static UFunction* pIsJoinedTo = 0;
//	AActor_execIsJoinedTo_Parms parms;
//
//	if ( !pIsJoinedTo )
//		pIsJoinedTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.IsJoinedTo" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pIsJoinedTo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::SetOwner ( class AActor* NewOwner )
//{
//	static UFunction* pSetOwner = 0;
//	AActor_execSetOwner_Parms parms;
//
//	if ( !pSetOwner )
//		pSetOwner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetOwner" );
//
//	WORD iNative = pSetOwner->iNative;
//	pSetOwner->FunctionFlags &= ~FUNC_Native;
//	pSetOwner->iNative = 0;
//
//	parms.NewOwner = NewOwner;
//	this->ProcessEvent ( pSetOwner, &parms, NULL );
//
//	pSetOwner->iNative = iNative;
//	pSetOwner->FunctionFlags |= FUNC_Native;
//}
//
//void AActor::SetBase ( class AActor* NewBase, struct FVector NewFloor )
//{
//	static UFunction* pSetBase = 0;
//	AActor_execSetBase_Parms parms;
//
//	if ( !pSetBase )
//		pSetBase = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetBase" );
//
//	WORD iNative = pSetBase->iNative;
//	pSetBase->FunctionFlags &= ~FUNC_Native;
//	pSetBase->iNative = 0;
//
//	parms.NewBase = NewBase;
//	parms.NewFloor = NewFloor;
//	this->ProcessEvent ( pSetBase, &parms, NULL );
//
//	pSetBase->iNative = iNative;
//	pSetBase->FunctionFlags |= FUNC_Native;
//}
//
//void AActor::SetBaseMaterial ( class UMaterial* NewBaseMaterial )
//{
//	static UFunction* pSetBaseMaterial = 0;
//	AActor_execSetBaseMaterial_Parms parms;
//
//	if ( !pSetBaseMaterial )
//		pSetBaseMaterial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetBaseMaterial" );
//
//	parms.NewBaseMaterial = NewBaseMaterial;
//	this->ProcessEvent ( pSetBaseMaterial, &parms, NULL );
//
//}
//
//void AActor::AutonomousPhysics ( float DeltaSeconds )
//{
//	static UFunction* pAutonomousPhysics = 0;
//	AActor_execAutonomousPhysics_Parms parms;
//
//	if ( !pAutonomousPhysics )
//		pAutonomousPhysics = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.AutonomousPhysics" );
//
//	WORD iNative = pAutonomousPhysics->iNative;
//	pAutonomousPhysics->FunctionFlags &= ~FUNC_Native;
//	pAutonomousPhysics->iNative = 0;
//
//	parms.DeltaSeconds = DeltaSeconds;
//	this->ProcessEvent ( pAutonomousPhysics, &parms, NULL );
//
//	pAutonomousPhysics->iNative = iNative;
//	pAutonomousPhysics->FunctionFlags |= FUNC_Native;
//}
//
//bool AActor::MoveSmooth ( struct FVector Delta, bool TestCollide )
//{
//	static UFunction* pMoveSmooth = 0;
//	AActor_execMoveSmooth_Parms parms;
//
//	if ( !pMoveSmooth )
//		pMoveSmooth = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.MoveSmooth" );
//
//	WORD iNative = pMoveSmooth->iNative;
//	pMoveSmooth->FunctionFlags &= ~FUNC_Native;
//	pMoveSmooth->iNative = 0;
//
//	parms.Delta = Delta;
//	parms.TestCollide = TestCollide;
//	this->ProcessEvent ( pMoveSmooth, &parms, NULL );
//
//	pMoveSmooth->iNative = iNative;
//	pMoveSmooth->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool AActor::SetRelativeLocation ( struct FVector NewLocation )
//{
//	static UFunction* pSetRelativeLocation = 0;
//	AActor_execSetRelativeLocation_Parms parms;
//
//	if ( !pSetRelativeLocation )
//		pSetRelativeLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetRelativeLocation" );
//
//	parms.NewLocation = NewLocation;
//	this->ProcessEvent ( pSetRelativeLocation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::SetRelativeRotation ( struct FRotator NewRotation )
//{
//	static UFunction* pSetRelativeRotation = 0;
//	AActor_execSetRelativeRotation_Parms parms;
//
//	if ( !pSetRelativeRotation )
//		pSetRelativeRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetRelativeRotation" );
//
//	parms.NewRotation = NewRotation;
//	this->ProcessEvent ( pSetRelativeRotation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AActor::SetRotation ( struct FRotator NewRotation )
//{
//	static UFunction* pSetRotation = 0;
//	AActor_execSetRotation_Parms parms;
//
//	if ( !pSetRotation )
//		pSetRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetRotation" );
//
//	WORD iNative = pSetRotation->iNative;
//	pSetRotation->FunctionFlags &= ~FUNC_Native;
//	pSetRotation->iNative = 0;
//
//	parms.NewRotation = NewRotation;
//	this->ProcessEvent ( pSetRotation, &parms, NULL );
//
//	pSetRotation->iNative = iNative;
//	pSetRotation->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool AActor::SetLocation ( struct FVector NewLocation )
//{
//	static UFunction* pSetLocation = 0;
//	AActor_execSetLocation_Parms parms;
//
//	if ( !pSetLocation )
//		pSetLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetLocation" );
//
//	WORD iNative = pSetLocation->iNative;
//	pSetLocation->FunctionFlags &= ~FUNC_Native;
//	pSetLocation->iNative = 0;
//
//	parms.NewLocation = NewLocation;
//	this->ProcessEvent ( pSetLocation, &parms, NULL );
//
//	pSetLocation->iNative = iNative;
//	pSetLocation->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool AActor::Move ( struct FVector Delta )
//{
//	static UFunction* pMove = 0;
//	AActor_execMove_Parms parms;
//
//	if ( !pMove )
//		pMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Move" );
//
//	WORD iNative = pMove->iNative;
//	pMove->FunctionFlags &= ~FUNC_Native;
//	pMove->iNative = 0;
//
//	parms.Delta = Delta;
//	this->ProcessEvent ( pMove, &parms, NULL );
//
//	pMove->iNative = iNative;
//	pMove->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//void AActor::SetDrawType ( unsigned char NewDrawType )
//{
//	static UFunction* pSetDrawType = 0;
//	AActor_execSetDrawType_Parms parms;
//
//	if ( !pSetDrawType )
//		pSetDrawType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetDrawType" );
//
//	parms.NewDrawType = NewDrawType;
//	this->ProcessEvent ( pSetDrawType, &parms, NULL );
//
//}
//
//void AActor::SetStaticMesh ( class UStaticMesh* NewStaticMesh )
//{
//	static UFunction* pSetStaticMesh = 0;
//	AActor_execSetStaticMesh_Parms parms;
//
//	if ( !pSetStaticMesh )
//		pSetStaticMesh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetStaticMesh" );
//
//	parms.NewStaticMesh = NewStaticMesh;
//	this->ProcessEvent ( pSetStaticMesh, &parms, NULL );
//
//}
//
//void AActor::SetDrawScale3D ( struct FVector NewScale3D )
//{
//	static UFunction* pSetDrawScale3D = 0;
//	AActor_execSetDrawScale3D_Parms parms;
//
//	if ( !pSetDrawScale3D )
//		pSetDrawScale3D = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetDrawScale3D" );
//
//	parms.NewScale3D = NewScale3D;
//	this->ProcessEvent ( pSetDrawScale3D, &parms, NULL );
//
//}
//
//void AActor::SetDrawScale ( float NewScale )
//{
//	static UFunction* pSetDrawScale = 0;
//	AActor_execSetDrawScale_Parms parms;
//
//	if ( !pSetDrawScale )
//		pSetDrawScale = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetDrawScale" );
//
//	parms.NewScale = NewScale;
//	this->ProcessEvent ( pSetDrawScale, &parms, NULL );
//
//}
//
////bool AActor::SetCollisionSize ( float NewRadius, float NewHeight )
////{
////	static UFunction* pSetCollisionSize = 0;
////	AActor_execSetCollisionSize_Parms parms;
////
////	if ( !pSetCollisionSize )
////		pSetCollisionSize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetCollisionSize" );
////
////	WORD iNative = pSetCollisionSize->iNative;
////	pSetCollisionSize->FunctionFlags &= ~FUNC_Native;
////	pSetCollisionSize->iNative = 0;
////
////	parms.NewRadius = NewRadius;
////	parms.NewHeight = NewHeight;
////	this->ProcessEvent ( pSetCollisionSize, &parms, NULL );
////
////	pSetCollisionSize->iNative = iNative;
////	pSetCollisionSize->FunctionFlags |= FUNC_Native;
////	return parms.ReturnValue;
////}
//
//void AActor::SetCollision ( bool NewColActors, bool NewBlockActors, bool NewBlockPlayers )
//{
//	static UFunction* pSetCollision = 0;
//	AActor_execSetCollision_Parms parms;
//
//	if ( !pSetCollision )
//		pSetCollision = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.SetCollision" );
//
//	WORD iNative = pSetCollision->iNative;
//	pSetCollision->FunctionFlags &= ~FUNC_Native;
//	pSetCollision->iNative = 0;
//
//	parms.NewColActors = NewColActors;
//	parms.NewBlockActors = NewBlockActors;
//	parms.NewBlockPlayers = NewBlockPlayers;
//	this->ProcessEvent ( pSetCollision, &parms, NULL );
//
//	pSetCollision->iNative = iNative;
//	pSetCollision->FunctionFlags |= FUNC_Native;
//}
//
//void AActor::Sleep ( float Seconds )
//{
//	static UFunction* pSleep = 0;
//	AActor_execSleep_Parms parms;
//
//	if ( !pSleep )
//		pSleep = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Sleep" );
//
//	WORD iNative = pSleep->iNative;
//	pSleep->FunctionFlags &= ~FUNC_Native;
//	pSleep->iNative = 0;
//
//	parms.Seconds = Seconds;
//	this->ProcessEvent ( pSleep, &parms, NULL );
//
//	pSleep->iNative = iNative;
//	pSleep->FunctionFlags |= FUNC_Native;
//}
//
//bool AActor::ShouldBeHidden (  )
//{
//	static UFunction* pShouldBeHidden = 0;
//	AActor_execShouldBeHidden_Parms parms;
//
//	if ( !pShouldBeHidden )
//		pShouldBeHidden = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.ShouldBeHidden" );
//
//	this->ProcessEvent ( pShouldBeHidden, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AActor::Error ( struct FString S )
//{
//	static UFunction* pError = 0;
//	AActor_execError_Parms parms;
//
//	if ( !pError )
//		pError = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.Error" );
//
//	WORD iNative = pError->iNative;
//	pError->FunctionFlags &= ~FUNC_Native;
//	pError->iNative = 0;
//
//	parms.S = S;
//	this->ProcessEvent ( pError, &parms, NULL );
//
//	pError->iNative = iNative;
//	pError->FunctionFlags |= FUNC_Native;
//}
//
//void AActor::TextToSpeech ( struct FString Text, float Volume )
//{
//	static UFunction* pTextToSpeech = 0;
//	AActor_execTextToSpeech_Parms parms;
//
//	if ( !pTextToSpeech )
//		pTextToSpeech = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.TextToSpeech" );
//
//	parms.Text = Text;
//	parms.Volume = Volume;
//	this->ProcessEvent ( pTextToSpeech, &parms, NULL );
//
//}
//
//void AActor::CopyObjectToClipboard ( class UObject* obj )
//{
//	static UFunction* pCopyObjectToClipboard = 0;
//	AActor_execCopyObjectToClipboard_Parms parms;
//
//	if ( !pCopyObjectToClipboard )
//		pCopyObjectToClipboard = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.CopyObjectToClipboard" );
//
//	parms.obj = obj;
//	this->ProcessEvent ( pCopyObjectToClipboard, &parms, NULL );
//
//}
//
//struct FString AActor::ConsoleCommand ( struct FString Command, bool bWriteToLog )
//{
//	static UFunction* pConsoleCommand = 0;
//	AActor_execConsoleCommand_Parms parms;
//
//	if ( !pConsoleCommand )
//		pConsoleCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Actor.ConsoleCommand" );
//
//	parms.Command = Command;
//	parms.bWriteToLog = bWriteToLog;
//	this->ProcessEvent ( pConsoleCommand, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwAILevelBase::ClearReferences (  )
//{
//	static UFunction* pClearReferences = 0;
//	AwAILevelBase_execClearReferences_Parms parms;
//
//	if ( !pClearReferences )
//		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAILevelBase.ClearReferences" );
//
//	this->ProcessEvent ( pClearReferences, &parms, NULL );
//
//}
//
//void AwAILevelBase::KillBotsTeam ( int Num, int inTeam )
//{
//	static UFunction* pKillBotsTeam = 0;
//	AwAILevelBase_execKillBotsTeam_Parms parms;
//
//	if ( !pKillBotsTeam )
//		pKillBotsTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAILevelBase.KillBotsTeam" );
//
//	parms.Num = Num;
//	parms.inTeam = inTeam;
//	this->ProcessEvent ( pKillBotsTeam, &parms, NULL );
//
//}
//
//void AwAILevelBase::KillBots ( int Num )
//{
//	static UFunction* pKillBots = 0;
//	AwAILevelBase_execKillBots_Parms parms;
//
//	if ( !pKillBots )
//		pKillBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAILevelBase.KillBots" );
//
//	parms.Num = Num;
//	this->ProcessEvent ( pKillBots, &parms, NULL );
//
//}
//
//void AwAILevelBase::KillBot ( class AAIController* Bot )
//{
//	static UFunction* pKillBot = 0;
//	AwAILevelBase_execKillBot_Parms parms;
//
//	if ( !pKillBot )
//		pKillBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAILevelBase.KillBot" );
//
//	parms.Bot = Bot;
//	this->ProcessEvent ( pKillBot, &parms, NULL );
//
//}
//
//void AwAILevelBase::Initialize (  )
//{
//	static UFunction* pInitialize = 0;
//	AwAILevelBase_execInitialize_Parms parms;
//
//	if ( !pInitialize )
//		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAILevelBase.Initialize" );
//
//	this->ProcessEvent ( pInitialize, &parms, NULL );
//
//}
//
//void UwMatchMaker::SendUpdateUserPerformenceInfo ( int UserID, int MinFps, int MaxFps, int AvgFps, int MinPing, int MaxPing, int AvgPing )
//{
//	static UFunction* pSendUpdateUserPerformenceInfo = 0;
//	UwMatchMaker_execSendUpdateUserPerformenceInfo_Parms parms;
//
//	if ( !pSendUpdateUserPerformenceInfo )
//		pSendUpdateUserPerformenceInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SendUpdateUserPerformenceInfo" );
//
//	parms.UserID = UserID;
//	parms.MinFps = MinFps;
//	parms.MaxFps = MaxFps;
//	parms.AvgFps = AvgFps;
//	parms.MinPing = MinPing;
//	parms.MaxPing = MaxPing;
//	parms.AvgPing = AvgPing;
//	this->ProcessEvent ( pSendUpdateUserPerformenceInfo, &parms, NULL );
//
//}
//
//void UwMatchMaker::SetLastBuyItemInfo ( struct FString ItemName, int ItemType, int ItemGrade )
//{
//	static UFunction* pSetLastBuyItemInfo = 0;
//	UwMatchMaker_execSetLastBuyItemInfo_Parms parms;
//
//	if ( !pSetLastBuyItemInfo )
//		pSetLastBuyItemInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetLastBuyItemInfo" );
//
//	parms.ItemName = ItemName;
//	parms.ItemType = ItemType;
//	parms.ItemGrade = ItemGrade;
//	this->ProcessEvent ( pSetLastBuyItemInfo, &parms, NULL );
//
//}
//
//bool UwMatchMaker::IsPCBangItem ( class UwItemBoxHK* ItemInfo )
//{
//	static UFunction* pIsPCBangItem = 0;
//	UwMatchMaker_execIsPCBangItem_Parms parms;
//
//	if ( !pIsPCBangItem )
//		pIsPCBangItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsPCBangItem" );
//
//	parms.ItemInfo = ItemInfo;
//	this->ProcessEvent ( pIsPCBangItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::CheckUsingItem ( class UwItemBoxHK* ItemInfo )
//{
//	static UFunction* pCheckUsingItem = 0;
//	UwMatchMaker_execCheckUsingItem_Parms parms;
//
//	if ( !pCheckUsingItem )
//		pCheckUsingItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.CheckUsingItem" );
//
//	parms.ItemInfo = ItemInfo;
//	this->ProcessEvent ( pCheckUsingItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::IsPlayingPCBangPlus (  )
//{
//	static UFunction* pIsPlayingPCBangPlus = 0;
//	UwMatchMaker_execIsPlayingPCBangPlus_Parms parms;
//
//	if ( !pIsPlayingPCBangPlus )
//		pIsPlayingPCBangPlus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsPlayingPCBangPlus" );
//
//	this->ProcessEvent ( pIsPlayingPCBangPlus, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::IsPlayingPCBang (  )
//{
//	static UFunction* pIsPlayingPCBang = 0;
//	UwMatchMaker_execIsPlayingPCBang_Parms parms;
//
//	if ( !pIsPlayingPCBang )
//		pIsPlayingPCBang = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsPlayingPCBang" );
//
//	this->ProcessEvent ( pIsPlayingPCBang, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::SetAASLevel ( unsigned char _level )
//{
//	static UFunction* pSetAASLevel = 0;
//	UwMatchMaker_execSetAASLevel_Parms parms;
//
//	if ( !pSetAASLevel )
//		pSetAASLevel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetAASLevel" );
//
//	parms._level = _level;
//	this->ProcessEvent ( pSetAASLevel, &parms, NULL );
//
//}
//
//unsigned char UwMatchMaker::GetIsAASLevel (  )
//{
//	static UFunction* pGetIsAASLevel = 0;
//	UwMatchMaker_execGetIsAASLevel_Parms parms;
//
//	if ( !pGetIsAASLevel )
//		pGetIsAASLevel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetIsAASLevel" );
//
//	this->ProcessEvent ( pGetIsAASLevel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::IsSDRespawn (  )
//{
//	static UFunction* pIsSDRespawn = 0;
//	UwMatchMaker_execIsSDRespawn_Parms parms;
//
//	if ( !pIsSDRespawn )
//		pIsSDRespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsSDRespawn" );
//
//	this->ProcessEvent ( pIsSDRespawn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::IsFriendlyUser ( struct FString CharName, struct FString ClanName )
//{
//	static UFunction* pIsFriendlyUser = 0;
//	UwMatchMaker_execIsFriendlyUser_Parms parms;
//
//	if ( !pIsFriendlyUser )
//		pIsFriendlyUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsFriendlyUser" );
//
//	parms.CharName = CharName;
//	parms.ClanName = ClanName;
//	this->ProcessEvent ( pIsFriendlyUser, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::IsBlockUser ( struct FString UserName )
//{
//	static UFunction* pIsBlockUser = 0;
//	UwMatchMaker_execIsBlockUser_Parms parms;
//
//	if ( !pIsBlockUser )
//		pIsBlockUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsBlockUser" );
//
//	parms.UserName = UserName;
//	this->ProcessEvent ( pIsBlockUser, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::UpdateBlockList ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdateBlockList = 0;
//	UwMatchMaker_execUpdateBlockList_Parms parms;
//
//	if ( !pUpdateBlockList )
//		pUpdateBlockList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateBlockList" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdateBlockList, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdatePCBangList ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdatePCBangList = 0;
//	UwMatchMaker_execUpdatePCBangList_Parms parms;
//
//	if ( !pUpdatePCBangList )
//		pUpdatePCBangList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdatePCBangList" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdatePCBangList, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateClanList ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdateClanList = 0;
//	UwMatchMaker_execUpdateClanList_Parms parms;
//
//	if ( !pUpdateClanList )
//		pUpdateClanList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateClanList" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdateClanList, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateFriendList ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdateFriendList = 0;
//	UwMatchMaker_execUpdateFriendList_Parms parms;
//
//	if ( !pUpdateFriendList )
//		pUpdateFriendList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateFriendList" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdateFriendList, &parms, NULL );
//
//}
//
//void UwMatchMaker::ReplaceBlockNickName ( struct FString old_name, struct FString new_name )
//{
//	static UFunction* pReplaceBlockNickName = 0;
//	UwMatchMaker_execReplaceBlockNickName_Parms parms;
//
//	if ( !pReplaceBlockNickName )
//		pReplaceBlockNickName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ReplaceBlockNickName" );
//
//	parms.old_name = old_name;
//	parms.new_name = new_name;
//	this->ProcessEvent ( pReplaceBlockNickName, &parms, NULL );
//
//}
//
//void UwMatchMaker::AddBlockList ( struct FString UserName )
//{
//	static UFunction* pAddBlockList = 0;
//	UwMatchMaker_execAddBlockList_Parms parms;
//
//	if ( !pAddBlockList )
//		pAddBlockList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AddBlockList" );
//
//	parms.UserName = UserName;
//	this->ProcessEvent ( pAddBlockList, &parms, NULL );
//
//}
//
//void UwMatchMaker::SetBlockListCount ( int cnt )
//{
//	static UFunction* pSetBlockListCount = 0;
//	UwMatchMaker_execSetBlockListCount_Parms parms;
//
//	if ( !pSetBlockListCount )
//		pSetBlockListCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetBlockListCount" );
//
//	parms.cnt = cnt;
//	this->ProcessEvent ( pSetBlockListCount, &parms, NULL );
//
//}
//
//void UwMatchMaker::ClearBlockList (  )
//{
//	static UFunction* pClearBlockList = 0;
//	UwMatchMaker_execClearBlockList_Parms parms;
//
//	if ( !pClearBlockList )
//		pClearBlockList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ClearBlockList" );
//
//	this->ProcessEvent ( pClearBlockList, &parms, NULL );
//
//}
//
//void UwMatchMaker::AddClanList ( struct FString UserName, unsigned char IsLogOn, int Level, int ClanGrade, int ClanWin, int ClanLose, int LevelMarkID, int TitleMarkID )
//{
//	static UFunction* pAddClanList = 0;
//	UwMatchMaker_execAddClanList_Parms parms;
//
//	if ( !pAddClanList )
//		pAddClanList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AddClanList" );
//
//	parms.UserName = UserName;
//	parms.IsLogOn = IsLogOn;
//	parms.Level = Level;
//	parms.ClanGrade = ClanGrade;
//	parms.ClanWin = ClanWin;
//	parms.ClanLose = ClanLose;
//	parms.LevelMarkID = LevelMarkID;
//	parms.TitleMarkID = TitleMarkID;
//	this->ProcessEvent ( pAddClanList, &parms, NULL );
//
//}
//
//void UwMatchMaker::SetClanListCount ( int cnt )
//{
//	static UFunction* pSetClanListCount = 0;
//	UwMatchMaker_execSetClanListCount_Parms parms;
//
//	if ( !pSetClanListCount )
//		pSetClanListCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetClanListCount" );
//
//	parms.cnt = cnt;
//	this->ProcessEvent ( pSetClanListCount, &parms, NULL );
//
//}
//
//void UwMatchMaker::ClearClanList (  )
//{
//	static UFunction* pClearClanList = 0;
//	UwMatchMaker_execClearClanList_Parms parms;
//
//	if ( !pClearClanList )
//		pClearClanList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ClearClanList" );
//
//	this->ProcessEvent ( pClearClanList, &parms, NULL );
//
//}
//
//void UwMatchMaker::AddPCBangList2 ( struct FString UserName, unsigned char IsLogOn, int ClanMark, int ClanBG, int ClanBL, struct FString ClanName, int Level, int ClanGrade, int ClanWin, int ClanLose, int IsLookForClan, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 )
//{
//	static UFunction* pAddPCBangList2 = 0;
//	UwMatchMaker_execAddPCBangList2_Parms parms;
//
//	if ( !pAddPCBangList2 )
//		pAddPCBangList2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AddPCBangList2" );
//
//	parms.UserName = UserName;
//	parms.IsLogOn = IsLogOn;
//	parms.ClanMark = ClanMark;
//	parms.ClanBG = ClanBG;
//	parms.ClanBL = ClanBL;
//	parms.ClanName = ClanName;
//	parms.Level = Level;
//	parms.ClanGrade = ClanGrade;
//	parms.ClanWin = ClanWin;
//	parms.ClanLose = ClanLose;
//	parms.IsLookForClan = IsLookForClan;
//	parms.ClanLevel = ClanLevel;
//	parms.LevelMarkID = LevelMarkID;
//	parms.TitleMarkID = TitleMarkID;
//	parms.Reserved1 = Reserved1;
//	parms.Reserved2 = Reserved2;
//	parms.Reserved3 = Reserved3;
//	this->ProcessEvent ( pAddPCBangList2, &parms, NULL );
//
//}
//
//void UwMatchMaker::AddPCBangList ( struct FString UserName, int ClanMark, int ClanBG, int ClanBL, struct FString ClanName, int Level, struct FString ServerName, struct FString ServerShortName, struct FString ServerIP, int serverPort, int CurPos, int ChannelNum, struct FString ChannelNickName, int RoomNum, int ClanGrade, int ClanWin, int ClanLose, int IsLookForClan, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 )
//{
//	static UFunction* pAddPCBangList = 0;
//	UwMatchMaker_execAddPCBangList_Parms parms;
//
//	if ( !pAddPCBangList )
//		pAddPCBangList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AddPCBangList" );
//
//	parms.UserName = UserName;
//	parms.ClanMark = ClanMark;
//	parms.ClanBG = ClanBG;
//	parms.ClanBL = ClanBL;
//	parms.ClanName = ClanName;
//	parms.Level = Level;
//	parms.ServerName = ServerName;
//	parms.ServerShortName = ServerShortName;
//	parms.ServerIP = ServerIP;
//	parms.serverPort = serverPort;
//	parms.CurPos = CurPos;
//	parms.ChannelNum = ChannelNum;
//	parms.ChannelNickName = ChannelNickName;
//	parms.RoomNum = RoomNum;
//	parms.ClanGrade = ClanGrade;
//	parms.ClanWin = ClanWin;
//	parms.ClanLose = ClanLose;
//	parms.IsLookForClan = IsLookForClan;
//	parms.ClanLevel = ClanLevel;
//	parms.LevelMarkID = LevelMarkID;
//	parms.TitleMarkID = TitleMarkID;
//	parms.Reserved1 = Reserved1;
//	parms.Reserved2 = Reserved2;
//	parms.Reserved3 = Reserved3;
//	this->ProcessEvent ( pAddPCBangList, &parms, NULL );
//
//}
//
//void UwMatchMaker::RemovePCBangList ( struct FString UserName )
//{
//	static UFunction* pRemovePCBangList = 0;
//	UwMatchMaker_execRemovePCBangList_Parms parms;
//
//	if ( !pRemovePCBangList )
//		pRemovePCBangList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.RemovePCBangList" );
//
//	parms.UserName = UserName;
//	this->ProcessEvent ( pRemovePCBangList, &parms, NULL );
//
//}
//
//void UwMatchMaker::SetPCBangListCount ( int cnt )
//{
//	static UFunction* pSetPCBangListCount = 0;
//	UwMatchMaker_execSetPCBangListCount_Parms parms;
//
//	if ( !pSetPCBangListCount )
//		pSetPCBangListCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetPCBangListCount" );
//
//	parms.cnt = cnt;
//	this->ProcessEvent ( pSetPCBangListCount, &parms, NULL );
//
//}
//
//void UwMatchMaker::ClearPCBangList (  )
//{
//	static UFunction* pClearPCBangList = 0;
//	UwMatchMaker_execClearPCBangList_Parms parms;
//
//	if ( !pClearPCBangList )
//		pClearPCBangList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ClearPCBangList" );
//
//	this->ProcessEvent ( pClearPCBangList, &parms, NULL );
//
//}
//
//void UwMatchMaker::AddFriendList ( struct FString UserName, unsigned char IsLogOn, int ClanMark, int ClanBG, int ClanBL, struct FString ClanName, int Level, unsigned char IsLookForClan, int ClanLevel, int LevelMarkID )
//{
//	static UFunction* pAddFriendList = 0;
//	UwMatchMaker_execAddFriendList_Parms parms;
//
//	if ( !pAddFriendList )
//		pAddFriendList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AddFriendList" );
//
//	parms.UserName = UserName;
//	parms.IsLogOn = IsLogOn;
//	parms.ClanMark = ClanMark;
//	parms.ClanBG = ClanBG;
//	parms.ClanBL = ClanBL;
//	parms.ClanName = ClanName;
//	parms.Level = Level;
//	parms.IsLookForClan = IsLookForClan;
//	parms.ClanLevel = ClanLevel;
//	parms.LevelMarkID = LevelMarkID;
//	this->ProcessEvent ( pAddFriendList, &parms, NULL );
//
//}
//
//void UwMatchMaker::SetFriendListCount ( int cnt )
//{
//	static UFunction* pSetFriendListCount = 0;
//	UwMatchMaker_execSetFriendListCount_Parms parms;
//
//	if ( !pSetFriendListCount )
//		pSetFriendListCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetFriendListCount" );
//
//	parms.cnt = cnt;
//	this->ProcessEvent ( pSetFriendListCount, &parms, NULL );
//
//}
//
//void UwMatchMaker::ClearFriendList (  )
//{
//	static UFunction* pClearFriendList = 0;
//	UwMatchMaker_execClearFriendList_Parms parms;
//
//	if ( !pClearFriendList )
//		pClearFriendList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ClearFriendList" );
//
//	this->ProcessEvent ( pClearFriendList, &parms, NULL );
//
//}
//
//bool UwMatchMaker::IsDisconnectedUser (  )
//{
//	static UFunction* pIsDisconnectedUser = 0;
//	UwMatchMaker_execIsDisconnectedUser_Parms parms;
//
//	if ( !pIsDisconnectedUser )
//		pIsDisconnectedUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsDisconnectedUser" );
//
//	this->ProcessEvent ( pIsDisconnectedUser, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::SetDisconnectedUser ( bool bSet, int UserID )
//{
//	static UFunction* pSetDisconnectedUser = 0;
//	UwMatchMaker_execSetDisconnectedUser_Parms parms;
//
//	if ( !pSetDisconnectedUser )
//		pSetDisconnectedUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetDisconnectedUser" );
//
//	parms.bSet = bSet;
//	parms.UserID = UserID;
//	this->ProcessEvent ( pSetDisconnectedUser, &parms, NULL );
//
//}
//
//int UwMatchMaker::GetHostPoint (  )
//{
//	static UFunction* pGetHostPoint = 0;
//	UwMatchMaker_execGetHostPoint_Parms parms;
//
//	if ( !pGetHostPoint )
//		pGetHostPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetHostPoint" );
//
//	this->ProcessEvent ( pGetHostPoint, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMatchMaker::CalculateHostPoint ( bool bInGame )
//{
//	static UFunction* pCalculateHostPoint = 0;
//	UwMatchMaker_execCalculateHostPoint_Parms parms;
//
//	if ( !pCalculateHostPoint )
//		pCalculateHostPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.CalculateHostPoint" );
//
//	parms.bInGame = bInGame;
//	this->ProcessEvent ( pCalculateHostPoint, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMatchMaker::ReceivedPing ( struct FString fromAddr, int msec )
//{
//	static UFunction* pReceivedPing = 0;
//	UwMatchMaker_execReceivedPing_Parms parms;
//
//	if ( !pReceivedPing )
//		pReceivedPing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ReceivedPing" );
//
//	parms.fromAddr = fromAddr;
//	parms.msec = msec;
//	this->ProcessEvent ( pReceivedPing, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::OnRecivedPing ( class UwMatchMaker* MM, struct FString fromAddr, int msec )
//{
//	static UFunction* pOnRecivedPing = 0;
//	UwMatchMaker_execOnRecivedPing_Parms parms;
//
//	if ( !pOnRecivedPing )
//		pOnRecivedPing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.OnRecivedPing" );
//
//	parms.MM = MM;
//	parms.fromAddr = fromAddr;
//	parms.msec = msec;
//	this->ProcessEvent ( pOnRecivedPing, &parms, NULL );
//
//}
//
//void UwMatchMaker::ReceivedPingHK ( struct FString fromAddr, int msec )
//{
//	static UFunction* pReceivedPingHK = 0;
//	UwMatchMaker_execReceivedPingHK_Parms parms;
//
//	if ( !pReceivedPingHK )
//		pReceivedPingHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ReceivedPingHK" );
//
//	parms.fromAddr = fromAddr;
//	parms.msec = msec;
//	this->ProcessEvent ( pReceivedPingHK, &parms, NULL );
//
//}
//
//void UwMatchMaker::ClearReceivedPingHK (  )
//{
//	static UFunction* pClearReceivedPingHK = 0;
//	UwMatchMaker_execClearReceivedPingHK_Parms parms;
//
//	if ( !pClearReceivedPingHK )
//		pClearReceivedPingHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ClearReceivedPingHK" );
//
//	this->ProcessEvent ( pClearReceivedPingHK, &parms, NULL );
//
//}
//
//int UwMatchMaker::GetLastestPingValue ( struct FString fromAddr )
//{
//	static UFunction* pGetLastestPingValue = 0;
//	UwMatchMaker_execGetLastestPingValue_Parms parms;
//
//	if ( !pGetLastestPingValue )
//		pGetLastestPingValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetLastestPingValue" );
//
//	parms.fromAddr = fromAddr;
//	this->ProcessEvent ( pGetLastestPingValue, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::SendPingHK ( struct FString fromAddr )
//{
//	static UFunction* pSendPingHK = 0;
//	UwMatchMaker_execSendPingHK_Parms parms;
//
//	if ( !pSendPingHK )
//		pSendPingHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SendPingHK" );
//
//	parms.fromAddr = fromAddr;
//	this->ProcessEvent ( pSendPingHK, &parms, NULL );
//
//}
//
//void UwMatchMaker::SendPingToClient (  )
//{
//	static UFunction* pSendPingToClient = 0;
//	UwMatchMaker_execSendPingToClient_Parms parms;
//
//	if ( !pSendPingToClient )
//		pSendPingToClient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SendPingToClient" );
//
//	this->ProcessEvent ( pSendPingToClient, &parms, NULL );
//
//}
//
//void UwMatchMaker::eventDrawOtherLoadingState ( int UserID, unsigned char bLoadingState )
//{
//	static UFunction* pDrawOtherLoadingState = 0;
//	UwMatchMaker_eventDrawOtherLoadingState_Parms parms;
//
//	if ( !pDrawOtherLoadingState )
//		pDrawOtherLoadingState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.DrawOtherLoadingState" );
//
//	parms.UserID = UserID;
//	parms.bLoadingState = bLoadingState;
//	this->ProcessEvent ( pDrawOtherLoadingState, &parms, NULL );
//
//}
//
//void UwMatchMaker::OnReqSuccessStartGame ( int Step )
//{
//	static UFunction* pOnReqSuccessStartGame = 0;
//	UwMatchMaker_execOnReqSuccessStartGame_Parms parms;
//
//	if ( !pOnReqSuccessStartGame )
//		pOnReqSuccessStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.OnReqSuccessStartGame" );
//
//	parms.Step = Step;
//	this->ProcessEvent ( pOnReqSuccessStartGame, &parms, NULL );
//
//}
//
//void UwMatchMaker::eventReqSuccessStartGame ( int Step )
//{
//	static UFunction* pReqSuccessStartGame = 0;
//	UwMatchMaker_eventReqSuccessStartGame_Parms parms;
//
//	if ( !pReqSuccessStartGame )
//		pReqSuccessStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ReqSuccessStartGame" );
//
//	parms.Step = Step;
//	this->ProcessEvent ( pReqSuccessStartGame, &parms, NULL );
//
//}
//
//void UwMatchMaker::GetItemDurabilityInfo ( class TArray< int >* OwnerID, class TArray< int >* PlayedNumber, class TArray< int >* PlayedRound, class TArray< struct FBtrDouble >* UniqueItemID, class TArray< int >* UsingTime, class TArray< int >* PlayedCount )
//{
//	static UFunction* pGetItemDurabilityInfo = 0;
//	UwMatchMaker_execGetItemDurabilityInfo_Parms parms;
//
//	if ( !pGetItemDurabilityInfo )
//		pGetItemDurabilityInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetItemDurabilityInfo" );
//
//	parms.OwnerID = *OwnerID;
//	parms.PlayedNumber = *PlayedNumber;
//	parms.PlayedRound = *PlayedRound;
//	parms.UniqueItemID = *UniqueItemID;
//	parms.UsingTime = *UsingTime;
//	parms.PlayedCount = *PlayedCount;
//	this->ProcessEvent ( pGetItemDurabilityInfo, &parms, NULL );
//
//	*OwnerID = parms.OwnerID;
//	*PlayedNumber = parms.PlayedNumber;
//	*PlayedRound = parms.PlayedRound;
//	*UniqueItemID = parms.UniqueItemID;
//	*UsingTime = parms.UsingTime;
//	*PlayedCount = parms.PlayedCount;
//}
//
//bool UwMatchMaker::eventForceGameOver ( class APlayerReplicationInfo* Winner )
//{
//	static UFunction* pForceGameOver = 0;
//	UwMatchMaker_eventForceGameOver_Parms parms;
//
//	if ( !pForceGameOver )
//		pForceGameOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ForceGameOver" );
//
//	parms.Winner = Winner;
//	this->ProcessEvent ( pForceGameOver, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::ProcessPendingChangeNewHostOrChangeNewGuest (  )
//{
//	static UFunction* pProcessPendingChangeNewHostOrChangeNewGuest = 0;
//	UwMatchMaker_execProcessPendingChangeNewHostOrChangeNewGuest_Parms parms;
//
//	if ( !pProcessPendingChangeNewHostOrChangeNewGuest )
//		pProcessPendingChangeNewHostOrChangeNewGuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ProcessPendingChangeNewHostOrChangeNewGuest" );
//
//	this->ProcessEvent ( pProcessPendingChangeNewHostOrChangeNewGuest, &parms, NULL );
//
//}
//
//void UwMatchMaker::PendingChangeNewGuest ( struct FString hostAddress )
//{
//	static UFunction* pPendingChangeNewGuest = 0;
//	UwMatchMaker_execPendingChangeNewGuest_Parms parms;
//
//	if ( !pPendingChangeNewGuest )
//		pPendingChangeNewGuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.PendingChangeNewGuest" );
//
//	parms.hostAddress = hostAddress;
//	this->ProcessEvent ( pPendingChangeNewGuest, &parms, NULL );
//
//}
//
//void UwMatchMaker::PendingChangeHost ( int ClientNum )
//{
//	static UFunction* pPendingChangeHost = 0;
//	UwMatchMaker_execPendingChangeHost_Parms parms;
//
//	if ( !pPendingChangeHost )
//		pPendingChangeHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.PendingChangeHost" );
//
//	parms.ClientNum = ClientNum;
//	this->ProcessEvent ( pPendingChangeHost, &parms, NULL );
//
//}
//
//void UwMatchMaker::SetChangeHostMessageFlag (  )
//{
//	static UFunction* pSetChangeHostMessageFlag = 0;
//	UwMatchMaker_execSetChangeHostMessageFlag_Parms parms;
//
//	if ( !pSetChangeHostMessageFlag )
//		pSetChangeHostMessageFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetChangeHostMessageFlag" );
//
//	this->ProcessEvent ( pSetChangeHostMessageFlag, &parms, NULL );
//
//}
//
//bool UwMatchMaker::ChangeNewGuest ( struct FString HostIP )
//{
//	static UFunction* pChangeNewGuest = 0;
//	UwMatchMaker_execChangeNewGuest_Parms parms;
//
//	if ( !pChangeNewGuest )
//		pChangeNewGuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ChangeNewGuest" );
//
//	parms.HostIP = HostIP;
//	this->ProcessEvent ( pChangeNewGuest, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::ChangeHost ( int ClientNum )
//{
//	static UFunction* pChangeHost = 0;
//	UwMatchMaker_execChangeHost_Parms parms;
//
//	if ( !pChangeHost )
//		pChangeHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ChangeHost" );
//
//	parms.ClientNum = ClientNum;
//	this->ProcessEvent ( pChangeHost, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::eventSetChangingHostFlag ( bool flag )
//{
//	static UFunction* pSetChangingHostFlag = 0;
//	UwMatchMaker_eventSetChangingHostFlag_Parms parms;
//
//	if ( !pSetChangingHostFlag )
//		pSetChangingHostFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetChangingHostFlag" );
//
//	parms.flag = flag;
//	this->ProcessEvent ( pSetChangingHostFlag, &parms, NULL );
//
//}
//
//bool UwMatchMaker::ResetChangingHostGuest (  )
//{
//	static UFunction* pResetChangingHostGuest = 0;
//	UwMatchMaker_execResetChangingHostGuest_Parms parms;
//
//	if ( !pResetChangingHostGuest )
//		pResetChangingHostGuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ResetChangingHostGuest" );
//
//	this->ProcessEvent ( pResetChangingHostGuest, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::eventIsLoading (  )
//{
//	static UFunction* pIsLoading = 0;
//	UwMatchMaker_eventIsLoading_Parms parms;
//
//	if ( !pIsLoading )
//		pIsLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsLoading" );
//
//	this->ProcessEvent ( pIsLoading, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::eventEndLoading (  )
//{
//	static UFunction* pEndLoading = 0;
//	UwMatchMaker_eventEndLoading_Parms parms;
//
//	if ( !pEndLoading )
//		pEndLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.EndLoading" );
//
//	this->ProcessEvent ( pEndLoading, &parms, NULL );
//
//}
//
//void UwMatchMaker::eventStartLoading (  )
//{
//	static UFunction* pStartLoading = 0;
//	UwMatchMaker_eventStartLoading_Parms parms;
//
//	if ( !pStartLoading )
//		pStartLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.StartLoading" );
//
//	this->ProcessEvent ( pStartLoading, &parms, NULL );
//
//}
//
//class UMaterial* UwMatchMaker::eventGetMiniMapInfoImage (  )
//{
//	static UFunction* pGetMiniMapInfoImage = 0;
//	UwMatchMaker_eventGetMiniMapInfoImage_Parms parms;
//
//	if ( !pGetMiniMapInfoImage )
//		pGetMiniMapInfoImage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetMiniMapInfoImage" );
//
//	this->ProcessEvent ( pGetMiniMapInfoImage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UMaterial* UwMatchMaker::eventGetLoadingImage (  )
//{
//	static UFunction* pGetLoadingImage = 0;
//	UwMatchMaker_eventGetLoadingImage_Parms parms;
//
//	if ( !pGetLoadingImage )
//		pGetLoadingImage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetLoadingImage" );
//
//	this->ProcessEvent ( pGetLoadingImage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::eventInitializeMapSettings_DS_Server (  )
//{
//	static UFunction* pInitializeMapSettings_DS_Server = 0;
//	UwMatchMaker_eventInitializeMapSettings_DS_Server_Parms parms;
//
//	if ( !pInitializeMapSettings_DS_Server )
//		pInitializeMapSettings_DS_Server = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.InitializeMapSettings_DS_Server" );
//
//	this->ProcessEvent ( pInitializeMapSettings_DS_Server, &parms, NULL );
//
//}
//
//void UwMatchMaker::InitializeMapSettings (  )
//{
//	static UFunction* pInitializeMapSettings = 0;
//	UwMatchMaker_execInitializeMapSettings_Parms parms;
//
//	if ( !pInitializeMapSettings )
//		pInitializeMapSettings = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.InitializeMapSettings" );
//
//	this->ProcessEvent ( pInitializeMapSettings, &parms, NULL );
//
//}
//
//void UwMatchMaker::ClearConsole (  )
//{
//	static UFunction* pClearConsole = 0;
//	UwMatchMaker_execClearConsole_Parms parms;
//
//	if ( !pClearConsole )
//		pClearConsole = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ClearConsole" );
//
//	this->ProcessEvent ( pClearConsole, &parms, NULL );
//
//}
//
//void UwMatchMaker::eventEndMatch ( bool bForceEndMatch )
//{
//	static UFunction* pEndMatch = 0;
//	UwMatchMaker_eventEndMatch_Parms parms;
//
//	if ( !pEndMatch )
//		pEndMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.EndMatch" );
//
//	parms.bForceEndMatch = bForceEndMatch;
//	this->ProcessEvent ( pEndMatch, &parms, NULL );
//
//}
//
//void UwMatchMaker::ResetGameFlag (  )
//{
//	static UFunction* pResetGameFlag = 0;
//	UwMatchMaker_execResetGameFlag_Parms parms;
//
//	if ( !pResetGameFlag )
//		pResetGameFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ResetGameFlag" );
//
//	this->ProcessEvent ( pResetGameFlag, &parms, NULL );
//
//}
//
//int UwMatchMaker::GetTeamCount (  )
//{
//	static UFunction* pGetTeamCount = 0;
//	UwMatchMaker_execGetTeamCount_Parms parms;
//
//	if ( !pGetTeamCount )
//		pGetTeamCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetTeamCount" );
//
//	this->ProcessEvent ( pGetTeamCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
unsigned char UwMatchMaker::GetGameModeNum ( struct FString szGameClassName )
{
	static UFunction* pGetGameModeNum = 0;
	UwMatchMaker_execGetGameModeNum_Parms parms;

	if ( !pGetGameModeNum )
		pGetGameModeNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetGameModeNum" );

	parms.szGameClassName = szGameClassName;
	this->ProcessEvent ( pGetGameModeNum, &parms, NULL );

	return parms.ReturnValue;
}
//
//void UwMatchMaker::SetCurMatchState ( struct FMatchState kState )
//{
//	static UFunction* pSetCurMatchState = 0;
//	UwMatchMaker_execSetCurMatchState_Parms parms;
//
//	if ( !pSetCurMatchState )
//		pSetCurMatchState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetCurMatchState" );
//
//	parms.kState = kState;
//	this->ProcessEvent ( pSetCurMatchState, &parms, NULL );
//
//}
//
//bool UwMatchMaker::IsHost ( struct FString UserName )
//{
//	static UFunction* pIsHost = 0;
//	UwMatchMaker_execIsHost_Parms parms;
//
//	if ( !pIsHost )
//		pIsHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsHost" );
//
//	parms.UserName = UserName;
//	this->ProcessEvent ( pIsHost, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::SetNewHost ( struct FString UserName )
//{
//	static UFunction* pSetNewHost = 0;
//	UwMatchMaker_execSetNewHost_Parms parms;
//
//	if ( !pSetNewHost )
//		pSetNewHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetNewHost" );
//
//	parms.UserName = UserName;
//	this->ProcessEvent ( pSetNewHost, &parms, NULL );
//
//}
//
//struct FString UwMatchMaker::GetUserClanNameByUserName ( struct FString UserName )
//{
//	static UFunction* pGetUserClanNameByUserName = 0;
//	UwMatchMaker_execGetUserClanNameByUserName_Parms parms;
//
//	if ( !pGetUserClanNameByUserName )
//		pGetUserClanNameByUserName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetUserClanNameByUserName" );
//
//	parms.UserName = UserName;
//	this->ProcessEvent ( pGetUserClanNameByUserName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMatchMaker::GetUserLevelMarkIDByUserName ( struct FString UserName )
//{
//	static UFunction* pGetUserLevelMarkIDByUserName = 0;
//	UwMatchMaker_execGetUserLevelMarkIDByUserName_Parms parms;
//
//	if ( !pGetUserLevelMarkIDByUserName )
//		pGetUserLevelMarkIDByUserName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetUserLevelMarkIDByUserName" );
//
//	parms.UserName = UserName;
//	this->ProcessEvent ( pGetUserLevelMarkIDByUserName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::ReplaceUserName ( struct FString OldName, struct FString NewName )
//{
//	static UFunction* pReplaceUserName = 0;
//	UwMatchMaker_execReplaceUserName_Parms parms;
//
//	if ( !pReplaceUserName )
//		pReplaceUserName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ReplaceUserName" );
//
//	parms.OldName = OldName;
//	parms.NewName = NewName;
//	this->ProcessEvent ( pReplaceUserName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMatchMaker::GetUserGradeByUserName ( struct FString UserName )
//{
//	static UFunction* pGetUserGradeByUserName = 0;
//	UwMatchMaker_execGetUserGradeByUserName_Parms parms;
//
//	if ( !pGetUserGradeByUserName )
//		pGetUserGradeByUserName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetUserGradeByUserName" );
//
//	parms.UserName = UserName;
//	this->ProcessEvent ( pGetUserGradeByUserName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMatchMaker::GetUIDByUserName ( struct FString UserName )
//{
//	static UFunction* pGetUIDByUserName = 0;
//	UwMatchMaker_execGetUIDByUserName_Parms parms;
//
//	if ( !pGetUIDByUserName )
//		pGetUIDByUserName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetUIDByUserName" );
//
//	parms.UserName = UserName;
//	this->ProcessEvent ( pGetUIDByUserName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwMatchUserInfo* UwMatchMaker::GetUserInfoByUserName ( struct FString UserName )
//{
//	static UFunction* pGetUserInfoByUserName = 0;
//	UwMatchMaker_execGetUserInfoByUserName_Parms parms;
//
//	if ( !pGetUserInfoByUserName )
//		pGetUserInfoByUserName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetUserInfoByUserName" );
//
//	parms.UserName = UserName;
//	this->ProcessEvent ( pGetUserInfoByUserName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwMatchUserInfo* UwMatchMaker::GetUserInfoByUID ( int UserID )
//{
//	static UFunction* pGetUserInfoByUID = 0;
//	UwMatchMaker_execGetUserInfoByUID_Parms parms;
//
//	if ( !pGetUserInfoByUID )
//		pGetUserInfoByUID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetUserInfoByUID" );
//
//	parms.UserID = UserID;
//	this->ProcessEvent ( pGetUserInfoByUID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::SetMyTeam ( int iTeam )
//{
//	static UFunction* pSetMyTeam = 0;
//	UwMatchMaker_execSetMyTeam_Parms parms;
//
//	if ( !pSetMyTeam )
//		pSetMyTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetMyTeam" );
//
//	parms.iTeam = iTeam;
//	this->ProcessEvent ( pSetMyTeam, &parms, NULL );
//
//}
//
//struct FString UwMatchMaker::GetMyNetworkCheckFailedMsg ( int LoadingStep )
//{
//	static UFunction* pGetMyNetworkCheckFailedMsg = 0;
//	UwMatchMaker_execGetMyNetworkCheckFailedMsg_Parms parms;
//
//	if ( !pGetMyNetworkCheckFailedMsg )
//		pGetMyNetworkCheckFailedMsg = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetMyNetworkCheckFailedMsg" );
//
//	parms.LoadingStep = LoadingStep;
//	this->ProcessEvent ( pGetMyNetworkCheckFailedMsg, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwMatchMaker::GetHostNetworkCheckFailedMsg ( int LoadingStep )
//{
//	static UFunction* pGetHostNetworkCheckFailedMsg = 0;
//	UwMatchMaker_execGetHostNetworkCheckFailedMsg_Parms parms;
//
//	if ( !pGetHostNetworkCheckFailedMsg )
//		pGetHostNetworkCheckFailedMsg = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetHostNetworkCheckFailedMsg" );
//
//	parms.LoadingStep = LoadingStep;
//	this->ProcessEvent ( pGetHostNetworkCheckFailedMsg, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::FailedNetworkChecking (  )
//{
//	static UFunction* pFailedNetworkChecking = 0;
//	UwMatchMaker_execFailedNetworkChecking_Parms parms;
//
//	if ( !pFailedNetworkChecking )
//		pFailedNetworkChecking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.FailedNetworkChecking" );
//
//	this->ProcessEvent ( pFailedNetworkChecking, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::StartNetworkChecking ( int ClientsCount, bool bConnectGame )
//{
//	static UFunction* pStartNetworkChecking = 0;
//	UwMatchMaker_execStartNetworkChecking_Parms parms;
//
//	if ( !pStartNetworkChecking )
//		pStartNetworkChecking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.StartNetworkChecking" );
//
//	parms.ClientsCount = ClientsCount;
//	parms.bConnectGame = bConnectGame;
//	this->ProcessEvent ( pStartNetworkChecking, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::eventSendPingToChannelServer (  )
//{
//	static UFunction* pSendPingToChannelServer = 0;
//	UwMatchMaker_eventSendPingToChannelServer_Parms parms;
//
//	if ( !pSendPingToChannelServer )
//		pSendPingToChannelServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SendPingToChannelServer" );
//
//	this->ProcessEvent ( pSendPingToChannelServer, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::eventSendPingToOtherUser ( struct FString toAddr )
//{
//	static UFunction* pSendPingToOtherUser = 0;
//	UwMatchMaker_eventSendPingToOtherUser_Parms parms;
//
//	if ( !pSendPingToOtherUser )
//		pSendPingToOtherUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SendPingToOtherUser" );
//
//	parms.toAddr = toAddr;
//	this->ProcessEvent ( pSendPingToOtherUser, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::eventSendText ( struct FString d_ip, int d_port, struct FString dText )
//{
//	static UFunction* pSendText = 0;
//	UwMatchMaker_eventSendText_Parms parms;
//
//	if ( !pSendText )
//		pSendText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SendText" );
//
//	parms.d_ip = d_ip;
//	parms.d_port = d_port;
//	parms.dText = dText;
//	this->ProcessEvent ( pSendText, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::SendErrorReportC ( int Code, int windowtype, struct FString ct )
//{
//	static UFunction* pSendErrorReportC = 0;
//	UwMatchMaker_execSendErrorReportC_Parms parms;
//
//	if ( !pSendErrorReportC )
//		pSendErrorReportC = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SendErrorReportC" );
//
//	parms.Code = Code;
//	parms.windowtype = windowtype;
//	parms.ct = ct;
//	this->ProcessEvent ( pSendErrorReportC, &parms, NULL );
//
//}
//
//void UwMatchMaker::SendErrorReportS ( int Code, struct FString ct )
//{
//	static UFunction* pSendErrorReportS = 0;
//	UwMatchMaker_execSendErrorReportS_Parms parms;
//
//	if ( !pSendErrorReportS )
//		pSendErrorReportS = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SendErrorReportS" );
//
//	parms.Code = Code;
//	parms.ct = ct;
//	this->ProcessEvent ( pSendErrorReportS, &parms, NULL );
//
//}
//
//class UBTPingCheckerLinker* UwMatchMaker::eventCreatePingChecker (  )
//{
//	static UFunction* pCreatePingChecker = 0;
//	UwMatchMaker_eventCreatePingChecker_Parms parms;
//
//	if ( !pCreatePingChecker )
//		pCreatePingChecker = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.CreatePingChecker" );
//
//	this->ProcessEvent ( pCreatePingChecker, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::eventGetHostBlocking (  )
//{
//	static UFunction* pGetHostBlocking = 0;
//	UwMatchMaker_eventGetHostBlocking_Parms parms;
//
//	if ( !pGetHostBlocking )
//		pGetHostBlocking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetHostBlocking" );
//
//	this->ProcessEvent ( pGetHostBlocking, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::eventSetHostBlocking ( bool Blocking )
//{
//	static UFunction* pSetHostBlocking = 0;
//	UwMatchMaker_eventSetHostBlocking_Parms parms;
//
//	if ( !pSetHostBlocking )
//		pSetHostBlocking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetHostBlocking" );
//
//	parms.Blocking = Blocking;
//	this->ProcessEvent ( pSetHostBlocking, &parms, NULL );
//
//}
//
//void UwMatchMaker::MakeHSResponseData ( class TArray< unsigned char > Data, class TArray< unsigned char >* Result )
//{
//	static UFunction* pMakeHSResponseData = 0;
//	UwMatchMaker_execMakeHSResponseData_Parms parms;
//
//	if ( !pMakeHSResponseData )
//		pMakeHSResponseData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.MakeHSResponseData" );
//
//	parms.Data = Data;
//	this->ProcessEvent ( pMakeHSResponseData, &parms, NULL );
//
//	*Result = parms.Result;
//}
//
//bool UwMatchMaker::TenProtectRelease (  )
//{
//	static UFunction* pTenProtectRelease = 0;
//	UwMatchMaker_execTenProtectRelease_Parms parms;
//
//	if ( !pTenProtectRelease )
//		pTenProtectRelease = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.TenProtectRelease" );
//
//	this->ProcessEvent ( pTenProtectRelease, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::TenProtectCreate ( int QQUserID )
//{
//	static UFunction* pTenProtectCreate = 0;
//	UwMatchMaker_execTenProtectCreate_Parms parms;
//
//	if ( !pTenProtectCreate )
//		pTenProtectCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.TenProtectCreate" );
//
//	parms.QQUserID = QQUserID;
//	this->ProcessEvent ( pTenProtectCreate, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::TenProtectDProtoEncrypt (  )
//{
//	static UFunction* pTenProtectDProtoEncrypt = 0;
//	UwMatchMaker_execTenProtectDProtoEncrypt_Parms parms;
//
//	if ( !pTenProtectDProtoEncrypt )
//		pTenProtectDProtoEncrypt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.TenProtectDProtoEncrypt" );
//
//	this->ProcessEvent ( pTenProtectDProtoEncrypt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::TenProtectDProtoDecrypt (  )
//{
//	static UFunction* pTenProtectDProtoDecrypt = 0;
//	UwMatchMaker_execTenProtectDProtoDecrypt_Parms parms;
//
//	if ( !pTenProtectDProtoDecrypt )
//		pTenProtectDProtoDecrypt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.TenProtectDProtoDecrypt" );
//
//	this->ProcessEvent ( pTenProtectDProtoDecrypt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::TenProtectUpdate_AntiBot (  )
//{
//	static UFunction* pTenProtectUpdate_AntiBot = 0;
//	UwMatchMaker_execTenProtectUpdate_AntiBot_Parms parms;
//
//	if ( !pTenProtectUpdate_AntiBot )
//		pTenProtectUpdate_AntiBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.TenProtectUpdate_AntiBot" );
//
//	this->ProcessEvent ( pTenProtectUpdate_AntiBot, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::TenProtectStopLocalCheck (  )
//{
//	static UFunction* pTenProtectStopLocalCheck = 0;
//	UwMatchMaker_execTenProtectStopLocalCheck_Parms parms;
//
//	if ( !pTenProtectStopLocalCheck )
//		pTenProtectStopLocalCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.TenProtectStopLocalCheck" );
//
//	this->ProcessEvent ( pTenProtectStopLocalCheck, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::TenProtectStartLocalOnceCheck (  )
//{
//	static UFunction* pTenProtectStartLocalOnceCheck = 0;
//	UwMatchMaker_execTenProtectStartLocalOnceCheck_Parms parms;
//
//	if ( !pTenProtectStartLocalOnceCheck )
//		pTenProtectStartLocalOnceCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.TenProtectStartLocalOnceCheck" );
//
//	this->ProcessEvent ( pTenProtectStartLocalOnceCheck, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::TenProtectSendInitData (  )
//{
//	static UFunction* pTenProtectSendInitData = 0;
//	UwMatchMaker_execTenProtectSendInitData_Parms parms;
//
//	if ( !pTenProtectSendInitData )
//		pTenProtectSendInitData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.TenProtectSendInitData" );
//
//	this->ProcessEvent ( pTenProtectSendInitData, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::TenProtectSetInitData (  )
//{
//	static UFunction* pTenProtectSetInitData = 0;
//	UwMatchMaker_execTenProtectSetInitData_Parms parms;
//
//	if ( !pTenProtectSetInitData )
//		pTenProtectSetInitData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.TenProtectSetInitData" );
//
//	this->ProcessEvent ( pTenProtectSetInitData, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMatchMaker::GetClientVersion (  )
//{
//	static UFunction* pGetClientVersion = 0;
//	UwMatchMaker_execGetClientVersion_Parms parms;
//
//	if ( !pGetClientVersion )
//		pGetClientVersion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetClientVersion" );
//
//	this->ProcessEvent ( pGetClientVersion, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::ConsoleCmd_DS ( struct FString strCmd )
//{
//	static UFunction* pConsoleCmd_DS = 0;
//	UwMatchMaker_execConsoleCmd_DS_Parms parms;
//
//	if ( !pConsoleCmd_DS )
//		pConsoleCmd_DS = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ConsoleCmd_DS" );
//
//	parms.strCmd = strCmd;
//	this->ProcessEvent ( pConsoleCmd_DS, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::ForceSetLoadingStep ( int LoadingStep )
//{
//	static UFunction* pForceSetLoadingStep = 0;
//	UwMatchMaker_execForceSetLoadingStep_Parms parms;
//
//	if ( !pForceSetLoadingStep )
//		pForceSetLoadingStep = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ForceSetLoadingStep" );
//
//	parms.LoadingStep = LoadingStep;
//	this->ProcessEvent ( pForceSetLoadingStep, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::StartHolePunchingClient ( int GameType, int ReqStartUserID )
//{
//	static UFunction* pStartHolePunchingClient = 0;
//	UwMatchMaker_execStartHolePunchingClient_Parms parms;
//
//	if ( !pStartHolePunchingClient )
//		pStartHolePunchingClient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.StartHolePunchingClient" );
//
//	parms.GameType = GameType;
//	parms.ReqStartUserID = ReqStartUserID;
//	this->ProcessEvent ( pStartHolePunchingClient, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::StartHolePunchingHost ( int GameType, int ReqStartUserID )
//{
//	static UFunction* pStartHolePunchingHost = 0;
//	UwMatchMaker_execStartHolePunchingHost_Parms parms;
//
//	if ( !pStartHolePunchingHost )
//		pStartHolePunchingHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.StartHolePunchingHost" );
//
//	parms.GameType = GameType;
//	parms.ReqStartUserID = ReqStartUserID;
//	this->ProcessEvent ( pStartHolePunchingHost, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::SetTcpTimeOutInTempReset (  )
//{
//	static UFunction* pSetTcpTimeOutInTempReset = 0;
//	UwMatchMaker_execSetTcpTimeOutInTempReset_Parms parms;
//
//	if ( !pSetTcpTimeOutInTempReset )
//		pSetTcpTimeOutInTempReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetTcpTimeOutInTempReset" );
//
//	this->ProcessEvent ( pSetTcpTimeOutInTempReset, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::SetTcpTimeOutInGame (  )
//{
//	static UFunction* pSetTcpTimeOutInGame = 0;
//	UwMatchMaker_execSetTcpTimeOutInGame_Parms parms;
//
//	if ( !pSetTcpTimeOutInGame )
//		pSetTcpTimeOutInGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetTcpTimeOutInGame" );
//
//	this->ProcessEvent ( pSetTcpTimeOutInGame, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::SetTcpTimeOutInUI (  )
//{
//	static UFunction* pSetTcpTimeOutInUI = 0;
//	UwMatchMaker_execSetTcpTimeOutInUI_Parms parms;
//
//	if ( !pSetTcpTimeOutInUI )
//		pSetTcpTimeOutInUI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetTcpTimeOutInUI" );
//
//	this->ProcessEvent ( pSetTcpTimeOutInUI, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::ForceDisconnectGameWithErrMessage ( struct FString strErrMsg )
//{
//	static UFunction* pForceDisconnectGameWithErrMessage = 0;
//	UwMatchMaker_execForceDisconnectGameWithErrMessage_Parms parms;
//
//	if ( !pForceDisconnectGameWithErrMessage )
//		pForceDisconnectGameWithErrMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ForceDisconnectGameWithErrMessage" );
//
//	parms.strErrMsg = strErrMsg;
//	this->ProcessEvent ( pForceDisconnectGameWithErrMessage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::SetUDPConnectionTimeLimit ( float fLimitSec )
//{
//	static UFunction* pSetUDPConnectionTimeLimit = 0;
//	UwMatchMaker_execSetUDPConnectionTimeLimit_Parms parms;
//
//	if ( !pSetUDPConnectionTimeLimit )
//		pSetUDPConnectionTimeLimit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetUDPConnectionTimeLimit" );
//
//	parms.fLimitSec = fLimitSec;
//	this->ProcessEvent ( pSetUDPConnectionTimeLimit, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::IsCompletedLoading (  )
//{
//	static UFunction* pIsCompletedLoading = 0;
//	UwMatchMaker_execIsCompletedLoading_Parms parms;
//
//	if ( !pIsCompletedLoading )
//		pIsCompletedLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsCompletedLoading" );
//
//	this->ProcessEvent ( pIsCompletedLoading, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::CheckHolePunchingResult ( int Result, unsigned char Phrase, int InterventionUserID, unsigned char Intervention, class TArray< int > FailedUserIDs )
//{
//	static UFunction* pCheckHolePunchingResult = 0;
//	UwMatchMaker_execCheckHolePunchingResult_Parms parms;
//
//	if ( !pCheckHolePunchingResult )
//		pCheckHolePunchingResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.CheckHolePunchingResult" );
//
//	parms.Result = Result;
//	parms.Phrase = Phrase;
//	parms.InterventionUserID = InterventionUserID;
//	parms.Intervention = Intervention;
//	parms.FailedUserIDs = FailedUserIDs;
//	this->ProcessEvent ( pCheckHolePunchingResult, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwMatchMaker::GetStrLoadingState ( unsigned char bState )
//{
//	static UFunction* pGetStrLoadingState = 0;
//	UwMatchMaker_execGetStrLoadingState_Parms parms;
//
//	if ( !pGetStrLoadingState )
//		pGetStrLoadingState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetStrLoadingState" );
//
//	parms.bState = bState;
//	this->ProcessEvent ( pGetStrLoadingState, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::PrintLoadingMsg ( struct FLoadingMessageItem Item )
//{
//	static UFunction* pPrintLoadingMsg = 0;
//	UwMatchMaker_execPrintLoadingMsg_Parms parms;
//
//	if ( !pPrintLoadingMsg )
//		pPrintLoadingMsg = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.PrintLoadingMsg" );
//
//	parms.Item = Item;
//	this->ProcessEvent ( pPrintLoadingMsg, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwMatchMaker::MakeMD5 ( struct FString strsrc )
//{
//	static UFunction* pMakeMD5 = 0;
//	UwMatchMaker_execMakeMD5_Parms parms;
//
//	if ( !pMakeMD5 )
//		pMakeMD5 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.MakeMD5" );
//
//	parms.strsrc = strsrc;
//	this->ProcessEvent ( pMakeMD5, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::DestoryLoadingStater (  )
//{
//	static UFunction* pDestoryLoadingStater = 0;
//	UwMatchMaker_execDestoryLoadingStater_Parms parms;
//
//	if ( !pDestoryLoadingStater )
//		pDestoryLoadingStater = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.DestoryLoadingStater" );
//
//	this->ProcessEvent ( pDestoryLoadingStater, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::CreateLoadingStater ( struct FString LoginName )
//{
//	static UFunction* pCreateLoadingStater = 0;
//	UwMatchMaker_execCreateLoadingStater_Parms parms;
//
//	if ( !pCreateLoadingStater )
//		pCreateLoadingStater = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.CreateLoadingStater" );
//
//	parms.LoginName = LoginName;
//	this->ProcessEvent ( pCreateLoadingStater, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::LowRelayServerOff (  )
//{
//	static UFunction* pLowRelayServerOff = 0;
//	UwMatchMaker_execLowRelayServerOff_Parms parms;
//
//	if ( !pLowRelayServerOff )
//		pLowRelayServerOff = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.LowRelayServerOff" );
//
//	this->ProcessEvent ( pLowRelayServerOff, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::LowRelayServerOn ( struct FString RelayServerIP, int RelayServerPortNum )
//{
//	static UFunction* pLowRelayServerOn = 0;
//	UwMatchMaker_execLowRelayServerOn_Parms parms;
//
//	if ( !pLowRelayServerOn )
//		pLowRelayServerOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.LowRelayServerOn" );
//
//	parms.RelayServerIP = RelayServerIP;
//	parms.RelayServerPortNum = RelayServerPortNum;
//	this->ProcessEvent ( pLowRelayServerOn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::LowChangeClient ( struct FString HostAddr )
//{
//	static UFunction* pLowChangeClient = 0;
//	UwMatchMaker_execLowChangeClient_Parms parms;
//
//	if ( !pLowChangeClient )
//		pLowChangeClient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.LowChangeClient" );
//
//	parms.HostAddr = HostAddr;
//	this->ProcessEvent ( pLowChangeClient, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::LowChangeServer (  )
//{
//	static UFunction* pLowChangeServer = 0;
//	UwMatchMaker_execLowChangeServer_Parms parms;
//
//	if ( !pLowChangeServer )
//		pLowChangeServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.LowChangeServer" );
//
//	this->ProcessEvent ( pLowChangeServer, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::ForceDisconnectUDPConnectionClientSide (  )
//{
//	static UFunction* pForceDisconnectUDPConnectionClientSide = 0;
//	UwMatchMaker_execForceDisconnectUDPConnectionClientSide_Parms parms;
//
//	if ( !pForceDisconnectUDPConnectionClientSide )
//		pForceDisconnectUDPConnectionClientSide = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ForceDisconnectUDPConnectionClientSide" );
//
//	this->ProcessEvent ( pForceDisconnectUDPConnectionClientSide, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::ForceDisconnectUDPConnectionHostSide ( int UserID )
//{
//	static UFunction* pForceDisconnectUDPConnectionHostSide = 0;
//	UwMatchMaker_execForceDisconnectUDPConnectionHostSide_Parms parms;
//
//	if ( !pForceDisconnectUDPConnectionHostSide )
//		pForceDisconnectUDPConnectionHostSide = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ForceDisconnectUDPConnectionHostSide" );
//
//	parms.UserID = UserID;
//	this->ProcessEvent ( pForceDisconnectUDPConnectionHostSide, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::StartTickCheck (  )
//{
//	static UFunction* pStartTickCheck = 0;
//	UwMatchMaker_execStartTickCheck_Parms parms;
//
//	if ( !pStartTickCheck )
//		pStartTickCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.StartTickCheck" );
//
//	this->ProcessEvent ( pStartTickCheck, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::SetNatTypeToEngine ( int NatType )
//{
//	static UFunction* pSetNatTypeToEngine = 0;
//	UwMatchMaker_execSetNatTypeToEngine_Parms parms;
//
//	if ( !pSetNatTypeToEngine )
//		pSetNatTypeToEngine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetNatTypeToEngine" );
//
//	parms.NatType = NatType;
//	this->ProcessEvent ( pSetNatTypeToEngine, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::ClientInitNatChecker ( int HostUserID, struct FString HostIP, int hostPortNum, unsigned char NatType, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort )
//{
//	static UFunction* pClientInitNatChecker = 0;
//	UwMatchMaker_execClientInitNatChecker_Parms parms;
//
//	if ( !pClientInitNatChecker )
//		pClientInitNatChecker = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ClientInitNatChecker" );
//
//	parms.HostUserID = HostUserID;
//	parms.HostIP = HostIP;
//	parms.hostPortNum = hostPortNum;
//	parms.NatType = NatType;
//	parms.Intervention = Intervention;
//	parms.HostInnerIP = HostInnerIP;
//	parms.HostInnerPort = HostInnerPort;
//	this->ProcessEvent ( pClientInitNatChecker, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::HostInitNatChecker ( int ClientUserID, struct FString ClientIP, int clientPortNum, unsigned char NatType, unsigned char Intervention_Own )
//{
//	static UFunction* pHostInitNatChecker = 0;
//	UwMatchMaker_execHostInitNatChecker_Parms parms;
//
//	if ( !pHostInitNatChecker )
//		pHostInitNatChecker = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.HostInitNatChecker" );
//
//	parms.ClientUserID = ClientUserID;
//	parms.ClientIP = ClientIP;
//	parms.clientPortNum = clientPortNum;
//	parms.NatType = NatType;
//	parms.Intervention_Own = Intervention_Own;
//	this->ProcessEvent ( pHostInitNatChecker, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::NatServerAddrStoreToEngine ( struct FString natServerIP1, int natServerPortNum1, struct FString natServerIP2, int natServerPortNum2 )
//{
//	static UFunction* pNatServerAddrStoreToEngine = 0;
//	UwMatchMaker_execNatServerAddrStoreToEngine_Parms parms;
//
//	if ( !pNatServerAddrStoreToEngine )
//		pNatServerAddrStoreToEngine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.NatServerAddrStoreToEngine" );
//
//	parms.natServerIP1 = natServerIP1;
//	parms.natServerPortNum1 = natServerPortNum1;
//	parms.natServerIP2 = natServerIP2;
//	parms.natServerPortNum2 = natServerPortNum2;
//	this->ProcessEvent ( pNatServerAddrStoreToEngine, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::StartMatch ( int GameRoomNum, bool bHost, struct FString szHostAddr, int hostPortNum )
//{
//	static UFunction* pStartMatch = 0;
//	UwMatchMaker_execStartMatch_Parms parms;
//
//	if ( !pStartMatch )
//		pStartMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.StartMatch" );
//
//	parms.GameRoomNum = GameRoomNum;
//	parms.bHost = bHost;
//	parms.szHostAddr = szHostAddr;
//	parms.hostPortNum = hostPortNum;
//	this->ProcessEvent ( pStartMatch, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::UpdateQuest_WinnerInBotMode ( int Level, int RecodeType )
//{
//	static UFunction* pUpdateQuest_WinnerInBotMode = 0;
//	UwMatchMaker_execUpdateQuest_WinnerInBotMode_Parms parms;
//
//	if ( !pUpdateQuest_WinnerInBotMode )
//		pUpdateQuest_WinnerInBotMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_WinnerInBotMode" );
//
//	parms.Level = Level;
//	parms.RecodeType = RecodeType;
//	this->ProcessEvent ( pUpdateQuest_WinnerInBotMode, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_RoundCompletedInBotMode ( int Level, int CompletedRound )
//{
//	static UFunction* pUpdateQuest_RoundCompletedInBotMode = 0;
//	UwMatchMaker_execUpdateQuest_RoundCompletedInBotMode_Parms parms;
//
//	if ( !pUpdateQuest_RoundCompletedInBotMode )
//		pUpdateQuest_RoundCompletedInBotMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_RoundCompletedInBotMode" );
//
//	parms.Level = Level;
//	parms.CompletedRound = CompletedRound;
//	this->ProcessEvent ( pUpdateQuest_RoundCompletedInBotMode, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_MatchCompletedInBotMode ( int Level )
//{
//	static UFunction* pUpdateQuest_MatchCompletedInBotMode = 0;
//	UwMatchMaker_execUpdateQuest_MatchCompletedInBotMode_Parms parms;
//
//	if ( !pUpdateQuest_MatchCompletedInBotMode )
//		pUpdateQuest_MatchCompletedInBotMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_MatchCompletedInBotMode" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pUpdateQuest_MatchCompletedInBotMode, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_SprintTime ( int sec )
//{
//	static UFunction* pUpdateQuest_SprintTime = 0;
//	UwMatchMaker_execUpdateQuest_SprintTime_Parms parms;
//
//	if ( !pUpdateQuest_SprintTime )
//		pUpdateQuest_SprintTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_SprintTime" );
//
//	parms.sec = sec;
//	this->ProcessEvent ( pUpdateQuest_SprintTime, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_AcquireTrophy ( int ItemID )
//{
//	static UFunction* pUpdateQuest_AcquireTrophy = 0;
//	UwMatchMaker_execUpdateQuest_AcquireTrophy_Parms parms;
//
//	if ( !pUpdateQuest_AcquireTrophy )
//		pUpdateQuest_AcquireTrophy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_AcquireTrophy" );
//
//	parms.ItemID = ItemID;
//	this->ProcessEvent ( pUpdateQuest_AcquireTrophy, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_MatchEndInBotMode ( int difficult, int Map )
//{
//	static UFunction* pUpdateQuest_MatchEndInBotMode = 0;
//	UwMatchMaker_execUpdateQuest_MatchEndInBotMode_Parms parms;
//
//	if ( !pUpdateQuest_MatchEndInBotMode )
//		pUpdateQuest_MatchEndInBotMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_MatchEndInBotMode" );
//
//	parms.difficult = difficult;
//	parms.Map = Map;
//	this->ProcessEvent ( pUpdateQuest_MatchEndInBotMode, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_KillInBotMode ( int difficult, int Map )
//{
//	static UFunction* pUpdateQuest_KillInBotMode = 0;
//	UwMatchMaker_execUpdateQuest_KillInBotMode_Parms parms;
//
//	if ( !pUpdateQuest_KillInBotMode )
//		pUpdateQuest_KillInBotMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_KillInBotMode" );
//
//	parms.difficult = difficult;
//	parms.Map = Map;
//	this->ProcessEvent ( pUpdateQuest_KillInBotMode, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_MatchEnd ( int Mode, int Map )
//{
//	static UFunction* pUpdateQuest_MatchEnd = 0;
//	UwMatchMaker_execUpdateQuest_MatchEnd_Parms parms;
//
//	if ( !pUpdateQuest_MatchEnd )
//		pUpdateQuest_MatchEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_MatchEnd" );
//
//	parms.Mode = Mode;
//	parms.Map = Map;
//	this->ProcessEvent ( pUpdateQuest_MatchEnd, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_CombatTime ( int Mode, int Map, int Min )
//{
//	static UFunction* pUpdateQuest_CombatTime = 0;
//	UwMatchMaker_execUpdateQuest_CombatTime_Parms parms;
//
//	if ( !pUpdateQuest_CombatTime )
//		pUpdateQuest_CombatTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_CombatTime" );
//
//	parms.Mode = Mode;
//	parms.Map = Map;
//	parms.Min = Min;
//	this->ProcessEvent ( pUpdateQuest_CombatTime, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_ExecTime ( int Mode, int Map, int Min )
//{
//	static UFunction* pUpdateQuest_ExecTime = 0;
//	UwMatchMaker_execUpdateQuest_ExecTime_Parms parms;
//
//	if ( !pUpdateQuest_ExecTime )
//		pUpdateQuest_ExecTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_ExecTime" );
//
//	parms.Mode = Mode;
//	parms.Map = Map;
//	parms.Min = Min;
//	this->ProcessEvent ( pUpdateQuest_ExecTime, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_Death ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_Death = 0;
//	UwMatchMaker_execUpdateQuest_Death_Parms parms;
//
//	if ( !pUpdateQuest_Death )
//		pUpdateQuest_Death = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_Death" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_Death, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_Assist ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_Assist = 0;
//	UwMatchMaker_execUpdateQuest_Assist_Parms parms;
//
//	if ( !pUpdateQuest_Assist )
//		pUpdateQuest_Assist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_Assist" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_Assist, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_15Kill ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_15Kill = 0;
//	UwMatchMaker_execUpdateQuest_15Kill_Parms parms;
//
//	if ( !pUpdateQuest_15Kill )
//		pUpdateQuest_15Kill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_15Kill" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_15Kill, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_10Kill ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_10Kill = 0;
//	UwMatchMaker_execUpdateQuest_10Kill_Parms parms;
//
//	if ( !pUpdateQuest_10Kill )
//		pUpdateQuest_10Kill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_10Kill" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_10Kill, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_9Kill ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_9Kill = 0;
//	UwMatchMaker_execUpdateQuest_9Kill_Parms parms;
//
//	if ( !pUpdateQuest_9Kill )
//		pUpdateQuest_9Kill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_9Kill" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_9Kill, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_8Kill ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_8Kill = 0;
//	UwMatchMaker_execUpdateQuest_8Kill_Parms parms;
//
//	if ( !pUpdateQuest_8Kill )
//		pUpdateQuest_8Kill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_8Kill" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_8Kill, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_7Kill ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_7Kill = 0;
//	UwMatchMaker_execUpdateQuest_7Kill_Parms parms;
//
//	if ( !pUpdateQuest_7Kill )
//		pUpdateQuest_7Kill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_7Kill" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_7Kill, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_6Kill ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_6Kill = 0;
//	UwMatchMaker_execUpdateQuest_6Kill_Parms parms;
//
//	if ( !pUpdateQuest_6Kill )
//		pUpdateQuest_6Kill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_6Kill" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_6Kill, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_5Kill ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_5Kill = 0;
//	UwMatchMaker_execUpdateQuest_5Kill_Parms parms;
//
//	if ( !pUpdateQuest_5Kill )
//		pUpdateQuest_5Kill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_5Kill" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_5Kill, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_4Kill ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_4Kill = 0;
//	UwMatchMaker_execUpdateQuest_4Kill_Parms parms;
//
//	if ( !pUpdateQuest_4Kill )
//		pUpdateQuest_4Kill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_4Kill" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_4Kill, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_3Kill ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_3Kill = 0;
//	UwMatchMaker_execUpdateQuest_3Kill_Parms parms;
//
//	if ( !pUpdateQuest_3Kill )
//		pUpdateQuest_3Kill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_3Kill" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_3Kill, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_2Kill ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_2Kill = 0;
//	UwMatchMaker_execUpdateQuest_2Kill_Parms parms;
//
//	if ( !pUpdateQuest_2Kill )
//		pUpdateQuest_2Kill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_2Kill" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_2Kill, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_MeeleAttackKill (  )
//{
//	static UFunction* pUpdateQuest_MeeleAttackKill = 0;
//	UwMatchMaker_execUpdateQuest_MeeleAttackKill_Parms parms;
//
//	if ( !pUpdateQuest_MeeleAttackKill )
//		pUpdateQuest_MeeleAttackKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_MeeleAttackKill" );
//
//	this->ProcessEvent ( pUpdateQuest_MeeleAttackKill, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_HeadshotKill ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_HeadshotKill = 0;
//	UwMatchMaker_execUpdateQuest_HeadshotKill_Parms parms;
//
//	if ( !pUpdateQuest_HeadshotKill )
//		pUpdateQuest_HeadshotKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_HeadshotKill" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_HeadshotKill, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_AimedKill ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_AimedKill = 0;
//	UwMatchMaker_execUpdateQuest_AimedKill_Parms parms;
//
//	if ( !pUpdateQuest_AimedKill )
//		pUpdateQuest_AimedKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_AimedKill" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_AimedKill, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest_Kill ( int WeaponType, int weaponID )
//{
//	static UFunction* pUpdateQuest_Kill = 0;
//	UwMatchMaker_execUpdateQuest_Kill_Parms parms;
//
//	if ( !pUpdateQuest_Kill )
//		pUpdateQuest_Kill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest_Kill" );
//
//	parms.WeaponType = WeaponType;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pUpdateQuest_Kill, &parms, NULL );
//
//}
//
//void UwMatchMaker::QuestLog ( struct FString Msg )
//{
//	static UFunction* pQuestLog = 0;
//	UwMatchMaker_execQuestLog_Parms parms;
//
//	if ( !pQuestLog )
//		pQuestLog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.QuestLog" );
//
//	parms.Msg = Msg;
//	this->ProcessEvent ( pQuestLog, &parms, NULL );
//
//}
//
//int UwMatchMaker::GetNextQuestID (  )
//{
//	static UFunction* pGetNextQuestID = 0;
//	UwMatchMaker_execGetNextQuestID_Parms parms;
//
//	if ( !pGetNextQuestID )
//		pGetNextQuestID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GetNextQuestID" );
//
//	this->ProcessEvent ( pGetNextQuestID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::UpdateTutorial ( int QuestID, int AddCount )
//{
//	static UFunction* pUpdateTutorial = 0;
//	UwMatchMaker_execUpdateTutorial_Parms parms;
//
//	if ( !pUpdateTutorial )
//		pUpdateTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateTutorial" );
//
//	parms.QuestID = QuestID;
//	parms.AddCount = AddCount;
//	this->ProcessEvent ( pUpdateTutorial, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuest ( int MissionType, int MissionOption1, int MissionOption2, int AddCount )
//{
//	static UFunction* pUpdateQuest = 0;
//	UwMatchMaker_execUpdateQuest_Parms parms;
//
//	if ( !pUpdateQuest )
//		pUpdateQuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuest" );
//
//	parms.MissionType = MissionType;
//	parms.MissionOption1 = MissionOption1;
//	parms.MissionOption2 = MissionOption2;
//	parms.AddCount = AddCount;
//	this->ProcessEvent ( pUpdateQuest, &parms, NULL );
//
//}
//
//void UwMatchMaker::CheckMissionProgress ( int i, int AddCount )
//{
//	static UFunction* pCheckMissionProgress = 0;
//	UwMatchMaker_execCheckMissionProgress_Parms parms;
//
//	if ( !pCheckMissionProgress )
//		pCheckMissionProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.CheckMissionProgress" );
//
//	parms.i = i;
//	parms.AddCount = AddCount;
//	this->ProcessEvent ( pCheckMissionProgress, &parms, NULL );
//
//}
//
//void UwMatchMaker::AccomplishMission100Percent ( struct FString MissionDesc, int cur, int Max )
//{
//	static UFunction* pAccomplishMission100Percent = 0;
//	UwMatchMaker_execAccomplishMission100Percent_Parms parms;
//
//	if ( !pAccomplishMission100Percent )
//		pAccomplishMission100Percent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AccomplishMission100Percent" );
//
//	parms.MissionDesc = MissionDesc;
//	parms.cur = cur;
//	parms.Max = Max;
//	this->ProcessEvent ( pAccomplishMission100Percent, &parms, NULL );
//
//}
//
//void UwMatchMaker::AccomplishMission75Percent ( struct FString MissionDesc, int cur, int Max )
//{
//	static UFunction* pAccomplishMission75Percent = 0;
//	UwMatchMaker_execAccomplishMission75Percent_Parms parms;
//
//	if ( !pAccomplishMission75Percent )
//		pAccomplishMission75Percent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AccomplishMission75Percent" );
//
//	parms.MissionDesc = MissionDesc;
//	parms.cur = cur;
//	parms.Max = Max;
//	this->ProcessEvent ( pAccomplishMission75Percent, &parms, NULL );
//
//}
//
//void UwMatchMaker::AccomplishMission50Percent ( struct FString MissionDesc, int cur, int Max )
//{
//	static UFunction* pAccomplishMission50Percent = 0;
//	UwMatchMaker_execAccomplishMission50Percent_Parms parms;
//
//	if ( !pAccomplishMission50Percent )
//		pAccomplishMission50Percent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AccomplishMission50Percent" );
//
//	parms.MissionDesc = MissionDesc;
//	parms.cur = cur;
//	parms.Max = Max;
//	this->ProcessEvent ( pAccomplishMission50Percent, &parms, NULL );
//
//}
//
//void UwMatchMaker::AccomplishMission25Percent ( struct FString MissionDesc, int cur, int Max )
//{
//	static UFunction* pAccomplishMission25Percent = 0;
//	UwMatchMaker_execAccomplishMission25Percent_Parms parms;
//
//	if ( !pAccomplishMission25Percent )
//		pAccomplishMission25Percent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AccomplishMission25Percent" );
//
//	parms.MissionDesc = MissionDesc;
//	parms.cur = cur;
//	parms.Max = Max;
//	this->ProcessEvent ( pAccomplishMission25Percent, &parms, NULL );
//
//}
//
//void UwMatchMaker::GenerateMissionList ( class UwGameManager* GameMgr )
//{
//	static UFunction* pGenerateMissionList = 0;
//	UwMatchMaker_execGenerateMissionList_Parms parms;
//
//	if ( !pGenerateMissionList )
//		pGenerateMissionList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.GenerateMissionList" );
//
//	parms.GameMgr = GameMgr;
//	this->ProcessEvent ( pGenerateMissionList, &parms, NULL );
//
//}
//
//void UwMatchMaker::SortQuestList ( class UwGameManager* GameMgr )
//{
//	static UFunction* pSortQuestList = 0;
//	UwMatchMaker_execSortQuestList_Parms parms;
//
//	if ( !pSortQuestList )
//		pSortQuestList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SortQuestList" );
//
//	parms.GameMgr = GameMgr;
//	this->ProcessEvent ( pSortQuestList, &parms, NULL );
//
//}
//
//int UwMatchMaker::FindQuest ( int nQuestID )
//{
//	static UFunction* pFindQuest = 0;
//	UwMatchMaker_execFindQuest_Parms parms;
//
//	if ( !pFindQuest )
//		pFindQuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.FindQuest" );
//
//	parms.nQuestID = nQuestID;
//	this->ProcessEvent ( pFindQuest, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::RemoveDailyQuestArray ( class TArray< int > QuestID )
//{
//	static UFunction* pRemoveDailyQuestArray = 0;
//	UwMatchMaker_execRemoveDailyQuestArray_Parms parms;
//
//	if ( !pRemoveDailyQuestArray )
//		pRemoveDailyQuestArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.RemoveDailyQuestArray" );
//
//	parms.QuestID = QuestID;
//	this->ProcessEvent ( pRemoveDailyQuestArray, &parms, NULL );
//
//}
//
//void UwMatchMaker::AddDailyQuestArray ( class TArray< int > QuestID )
//{
//	static UFunction* pAddDailyQuestArray = 0;
//	UwMatchMaker_execAddDailyQuestArray_Parms parms;
//
//	if ( !pAddDailyQuestArray )
//		pAddDailyQuestArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AddDailyQuestArray" );
//
//	parms.QuestID = QuestID;
//	this->ProcessEvent ( pAddDailyQuestArray, &parms, NULL );
//
//}
//
//void UwMatchMaker::RemoveDailyQuest ( int QuestID )
//{
//	static UFunction* pRemoveDailyQuest = 0;
//	UwMatchMaker_execRemoveDailyQuest_Parms parms;
//
//	if ( !pRemoveDailyQuest )
//		pRemoveDailyQuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.RemoveDailyQuest" );
//
//	parms.QuestID = QuestID;
//	this->ProcessEvent ( pRemoveDailyQuest, &parms, NULL );
//
//}
//
//void UwMatchMaker::AddDailyQuest ( int QuestID )
//{
//	static UFunction* pAddDailyQuest = 0;
//	UwMatchMaker_execAddDailyQuest_Parms parms;
//
//	if ( !pAddDailyQuest )
//		pAddDailyQuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AddDailyQuest" );
//
//	parms.QuestID = QuestID;
//	this->ProcessEvent ( pAddDailyQuest, &parms, NULL );
//
//}
//
//void UwMatchMaker::RemoveQuestArray ( class TArray< int > QuestID )
//{
//	static UFunction* pRemoveQuestArray = 0;
//	UwMatchMaker_execRemoveQuestArray_Parms parms;
//
//	if ( !pRemoveQuestArray )
//		pRemoveQuestArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.RemoveQuestArray" );
//
//	parms.QuestID = QuestID;
//	this->ProcessEvent ( pRemoveQuestArray, &parms, NULL );
//
//}
//
//void UwMatchMaker::AddQuestArray ( class TArray< int > QuestID )
//{
//	static UFunction* pAddQuestArray = 0;
//	UwMatchMaker_execAddQuestArray_Parms parms;
//
//	if ( !pAddQuestArray )
//		pAddQuestArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AddQuestArray" );
//
//	parms.QuestID = QuestID;
//	this->ProcessEvent ( pAddQuestArray, &parms, NULL );
//
//}
//
//void UwMatchMaker::RemoveQuest ( int QuestID )
//{
//	static UFunction* pRemoveQuest = 0;
//	UwMatchMaker_execRemoveQuest_Parms parms;
//
//	if ( !pRemoveQuest )
//		pRemoveQuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.RemoveQuest" );
//
//	parms.QuestID = QuestID;
//	this->ProcessEvent ( pRemoveQuest, &parms, NULL );
//
//}
//
//void UwMatchMaker::AddQuest ( int QuestID )
//{
//	static UFunction* pAddQuest = 0;
//	UwMatchMaker_execAddQuest_Parms parms;
//
//	if ( !pAddQuest )
//		pAddQuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AddQuest" );
//
//	parms.QuestID = QuestID;
//	this->ProcessEvent ( pAddQuest, &parms, NULL );
//
//}
//
//bool UwMatchMaker::IsEnableAltTab (  )
//{
//	static UFunction* pIsEnableAltTab = 0;
//	UwMatchMaker_execIsEnableAltTab_Parms parms;
//
//	if ( !pIsEnableAltTab )
//		pIsEnableAltTab = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsEnableAltTab" );
//
//	this->ProcessEvent ( pIsEnableAltTab, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::SetCurSubPos ( int CurSubPos )
//{
//	static UFunction* pSetCurSubPos = 0;
//	UwMatchMaker_execSetCurSubPos_Parms parms;
//
//	if ( !pSetCurSubPos )
//		pSetCurSubPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetCurSubPos" );
//
//	parms.CurSubPos = CurSubPos;
//	this->ProcessEvent ( pSetCurSubPos, &parms, NULL );
//
//}
//
//void UwMatchMaker::SetCurpos ( int CurPos, int CurSubPos )
//{
//	static UFunction* pSetCurpos = 0;
//	UwMatchMaker_execSetCurpos_Parms parms;
//
//	if ( !pSetCurpos )
//		pSetCurpos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.SetCurpos" );
//
//	parms.CurPos = CurPos;
//	parms.CurSubPos = CurSubPos;
//	this->ProcessEvent ( pSetCurpos, &parms, NULL );
//
//}
//
//bool UwMatchMaker::IsClanGrade ( int Grade )
//{
//	static UFunction* pIsClanGrade = 0;
//	UwMatchMaker_execIsClanGrade_Parms parms;
//
//	if ( !pIsClanGrade )
//		pIsClanGrade = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsClanGrade" );
//
//	parms.Grade = Grade;
//	this->ProcessEvent ( pIsClanGrade, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::IsClanMember (  )
//{
//	static UFunction* pIsClanMember = 0;
//	UwMatchMaker_execIsClanMember_Parms parms;
//
//	if ( !pIsClanMember )
//		pIsClanMember = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsClanMember" );
//
//	this->ProcessEvent ( pIsClanMember, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchMaker::RI_Clear (  )
//{
//	static UFunction* pRI_Clear = 0;
//	UwMatchMaker_execRI_Clear_Parms parms;
//
//	if ( !pRI_Clear )
//		pRI_Clear = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.RI_Clear" );
//
//	this->ProcessEvent ( pRI_Clear, &parms, NULL );
//
//}
//
//void UwMatchMaker::PI_LeavelRoom (  )
//{
//	static UFunction* pPI_LeavelRoom = 0;
//	UwMatchMaker_execPI_LeavelRoom_Parms parms;
//
//	if ( !pPI_LeavelRoom )
//		pPI_LeavelRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.PI_LeavelRoom" );
//
//	this->ProcessEvent ( pPI_LeavelRoom, &parms, NULL );
//
//}
//
//void UwMatchMaker::RemoveGMList ( int GMUID )
//{
//	static UFunction* pRemoveGMList = 0;
//	UwMatchMaker_execRemoveGMList_Parms parms;
//
//	if ( !pRemoveGMList )
//		pRemoveGMList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.RemoveGMList" );
//
//	parms.GMUID = GMUID;
//	this->ProcessEvent ( pRemoveGMList, &parms, NULL );
//
//}
//
//void UwMatchMaker::AddGMList ( int GMUID )
//{
//	static UFunction* pAddGMList = 0;
//	UwMatchMaker_execAddGMList_Parms parms;
//
//	if ( !pAddGMList )
//		pAddGMList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.AddGMList" );
//
//	parms.GMUID = GMUID;
//	this->ProcessEvent ( pAddGMList, &parms, NULL );
//
//}
//
//void UwMatchMaker::ClearGMList (  )
//{
//	static UFunction* pClearGMList = 0;
//	UwMatchMaker_execClearGMList_Parms parms;
//
//	if ( !pClearGMList )
//		pClearGMList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.ClearGMList" );
//
//	this->ProcessEvent ( pClearGMList, &parms, NULL );
//
//}
//
//void UwMatchMaker::PI_EnterRoom ( int RoomID, int TeamID )
//{
//	static UFunction* pPI_EnterRoom = 0;
//	UwMatchMaker_execPI_EnterRoom_Parms parms;
//
//	if ( !pPI_EnterRoom )
//		pPI_EnterRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.PI_EnterRoom" );
//
//	parms.RoomID = RoomID;
//	parms.TeamID = TeamID;
//	this->ProcessEvent ( pPI_EnterRoom, &parms, NULL );
//
//}
//
//void UwMatchMaker::PI_LeaveChannel (  )
//{
//	static UFunction* pPI_LeaveChannel = 0;
//	UwMatchMaker_execPI_LeaveChannel_Parms parms;
//
//	if ( !pPI_LeaveChannel )
//		pPI_LeaveChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.PI_LeaveChannel" );
//
//	this->ProcessEvent ( pPI_LeaveChannel, &parms, NULL );
//
//}
//
//void UwMatchMaker::PI_EnterChannel ( int ServerGroupID, struct FString ServerGroupName, int ServerID, struct FString ServerName, int ChannelID, struct FString ChannelName, bool bClanWarChannel, int ChannelTypeValue, bool IsDedicatedServer )
//{
//	static UFunction* pPI_EnterChannel = 0;
//	UwMatchMaker_execPI_EnterChannel_Parms parms;
//
//	if ( !pPI_EnterChannel )
//		pPI_EnterChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.PI_EnterChannel" );
//
//	parms.ServerGroupID = ServerGroupID;
//	parms.ServerGroupName = ServerGroupName;
//	parms.ServerID = ServerID;
//	parms.ServerName = ServerName;
//	parms.ChannelID = ChannelID;
//	parms.ChannelName = ChannelName;
//	parms.bClanWarChannel = bClanWarChannel;
//	parms.ChannelTypeValue = ChannelTypeValue;
//	parms.IsDedicatedServer = IsDedicatedServer;
//	this->ProcessEvent ( pPI_EnterChannel, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateCharInfoAndReqClanUserList (  )
//{
//	static UFunction* pUpdateCharInfoAndReqClanUserList = 0;
//	UwMatchMaker_execUpdateCharInfoAndReqClanUserList_Parms parms;
//
//	if ( !pUpdateCharInfoAndReqClanUserList )
//		pUpdateCharInfoAndReqClanUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateCharInfoAndReqClanUserList" );
//
//	this->ProcessEvent ( pUpdateCharInfoAndReqClanUserList, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateQuestList ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdateQuestList = 0;
//	UwMatchMaker_execUpdateQuestList_Parms parms;
//
//	if ( !pUpdateQuestList )
//		pUpdateQuestList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateQuestList" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdateQuestList, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateRecv_CharInfo ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdateRecv_CharInfo = 0;
//	UwMatchMaker_execUpdateRecv_CharInfo_Parms parms;
//
//	if ( !pUpdateRecv_CharInfo )
//		pUpdateRecv_CharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateRecv_CharInfo" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdateRecv_CharInfo, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdatePositionInfo ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdatePositionInfo = 0;
//	UwMatchMaker_execUpdatePositionInfo_Parms parms;
//
//	if ( !pUpdatePositionInfo )
//		pUpdatePositionInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdatePositionInfo" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdatePositionInfo, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateClanInfo ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdateClanInfo = 0;
//	UwMatchMaker_execUpdateClanInfo_Parms parms;
//
//	if ( !pUpdateClanInfo )
//		pUpdateClanInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateClanInfo" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdateClanInfo, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateMoneyInfo ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdateMoneyInfo = 0;
//	UwMatchMaker_execUpdateMoneyInfo_Parms parms;
//
//	if ( !pUpdateMoneyInfo )
//		pUpdateMoneyInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateMoneyInfo" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdateMoneyInfo, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateEquipItemInfo ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdateEquipItemInfo = 0;
//	UwMatchMaker_execUpdateEquipItemInfo_Parms parms;
//
//	if ( !pUpdateEquipItemInfo )
//		pUpdateEquipItemInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateEquipItemInfo" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdateEquipItemInfo, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateRankingInfo ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdateRankingInfo = 0;
//	UwMatchMaker_execUpdateRankingInfo_Parms parms;
//
//	if ( !pUpdateRankingInfo )
//		pUpdateRankingInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateRankingInfo" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdateRankingInfo, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateCharInfo ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdateCharInfo = 0;
//	UwMatchMaker_execUpdateCharInfo_Parms parms;
//
//	if ( !pUpdateCharInfo )
//		pUpdateCharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateCharInfo" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdateCharInfo, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdateGameRoomInfo ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdateGameRoomInfo = 0;
//	UwMatchMaker_execUpdateGameRoomInfo_Parms parms;
//
//	if ( !pUpdateGameRoomInfo )
//		pUpdateGameRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdateGameRoomInfo" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdateGameRoomInfo, &parms, NULL );
//
//}
//
//void UwMatchMaker::UpdatePCBangInfo ( class UwMatchMaker* MM )
//{
//	static UFunction* pUpdatePCBangInfo = 0;
//	UwMatchMaker_execUpdatePCBangInfo_Parms parms;
//
//	if ( !pUpdatePCBangInfo )
//		pUpdatePCBangInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.UpdatePCBangInfo" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pUpdatePCBangInfo, &parms, NULL );
//
//}
//
//void UwMatchMaker::CMDHK ( int Index, struct FString Param1, struct FString Param2, struct FString param3 )
//{
//	static UFunction* pCMDHK = 0;
//	UwMatchMaker_execCMDHK_Parms parms;
//
//	if ( !pCMDHK )
//		pCMDHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.CMDHK" );
//
//	parms.Index = Index;
//	parms.Param1 = Param1;
//	parms.Param2 = Param2;
//	parms.param3 = param3;
//	this->ProcessEvent ( pCMDHK, &parms, NULL );
//
//}
//
//bool UwMatchMaker::IsChannelRestrictionMaps ( int MapNum )
//{
//	static UFunction* pIsChannelRestrictionMaps = 0;
//	UwMatchMaker_execIsChannelRestrictionMaps_Parms parms;
//
//	if ( !pIsChannelRestrictionMaps )
//		pIsChannelRestrictionMaps = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsChannelRestrictionMaps" );
//
//	parms.MapNum = MapNum;
//	this->ProcessEvent ( pIsChannelRestrictionMaps, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMatchMaker::IsChannelRestrictionModes ( int ModeNum )
//{
//	static UFunction* pIsChannelRestrictionModes = 0;
//	UwMatchMaker_execIsChannelRestrictionModes_Parms parms;
//
//	if ( !pIsChannelRestrictionModes )
//		pIsChannelRestrictionModes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchMaker.IsChannelRestrictionModes" );
//
//	parms.ModeNum = ModeNum;
//	this->ProcessEvent ( pIsChannelRestrictionModes, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwWeaponFire::eventDamageLog ( class APawn* Victim, float fDam, float fDist, unsigned char CParts )
//{
//	static UFunction* pDamageLog = 0;
//	UwWeaponFire_eventDamageLog_Parms parms;
//
//	if ( !pDamageLog )
//		pDamageLog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.DamageLog" );
//
//	parms.Victim = Victim;
//	parms.fDam = fDam;
//	parms.fDist = fDist;
//	parms.CParts = CParts;
//	this->ProcessEvent ( pDamageLog, &parms, NULL );
//
//}
//
//void UwWeaponFire::MakeFireNoise (  )
//{
//	static UFunction* pMakeFireNoise = 0;
//	UwWeaponFire_execMakeFireNoise_Parms parms;
//
//	if ( !pMakeFireNoise )
//		pMakeFireNoise = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.MakeFireNoise" );
//
//	this->ProcessEvent ( pMakeFireNoise, &parms, NULL );
//
//}
//
//void UwWeaponFire::SetSpreadStance ( unsigned char ss )
//{
//	static UFunction* pSetSpreadStance = 0;
//	UwWeaponFire_execSetSpreadStance_Parms parms;
//
//	if ( !pSetSpreadStance )
//		pSetSpreadStance = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.SetSpreadStance" );
//
//	parms.ss = ss;
//	this->ProcessEvent ( pSetSpreadStance, &parms, NULL );
//
//}
//
//void UwWeaponFire::wLoadOut (  )
//{
//	static UFunction* pwLoadOut = 0;
//	UwWeaponFire_execwLoadOut_Parms parms;
//
//	if ( !pwLoadOut )
//		pwLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.wLoadOut" );
//
//	this->ProcessEvent ( pwLoadOut, &parms, NULL );
//
//}
//
//class AActor* UwWeaponFire::Trace ( struct FVector TraceEnd, struct FVector TraceStart, bool bTraceActors, struct FVector Extent, struct FVector* HitLocation, struct FVector* HitNormal, class UMaterial** Material )
//{
//	static UFunction* pTrace = 0;
//	UwWeaponFire_execTrace_Parms parms;
//
//	if ( !pTrace )
//		pTrace = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.Trace" );
//
//	parms.TraceEnd = TraceEnd;
//	parms.TraceStart = TraceStart;
//	parms.bTraceActors = bTraceActors;
//	parms.Extent = Extent;
//	this->ProcessEvent ( pTrace, &parms, NULL );
//
//	*HitLocation = parms.HitLocation;
//	*HitNormal = parms.HitNormal;
//	*Material = parms.Material;
//	return parms.ReturnValue;
//}
//
//class AActor* UwWeaponFire::Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation )
//{
//	static UFunction* pSpawn = 0;
//	UwWeaponFire_execSpawn_Parms parms;
//
//	if ( !pSpawn )
//		pSpawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.Spawn" );
//
//	parms.SpawnClass = SpawnClass;
//	parms.SpawnOwner = SpawnOwner;
//	parms.SpawnTag = SpawnTag;
//	parms.SpawnLocation = SpawnLocation;
//	parms.SpawnRotation = SpawnRotation;
//	this->ProcessEvent ( pSpawn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float UwWeaponFire::MaxRange (  )
//{
//	static UFunction* pMaxRange = 0;
//	UwWeaponFire_execMaxRange_Parms parms;
//
//	if ( !pMaxRange )
//		pMaxRange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.MaxRange" );
//
//	this->ProcessEvent ( pMaxRange, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwWeaponFire::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	UwWeaponFire_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//struct FVector UwWeaponFire::GetFireStart ( struct FVector X, struct FVector Y, struct FVector Z )
//{
//	static UFunction* pGetFireStart = 0;
//	UwWeaponFire_execGetFireStart_Parms parms;
//
//	if ( !pGetFireStart )
//		pGetFireStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.GetFireStart" );
//
//	parms.X = X;
//	parms.Y = Y;
//	parms.Z = Z;
//	this->ProcessEvent ( pGetFireStart, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FRotator UwWeaponFire::AdjustAim ( struct FVector Start, float InAimError )
//{
//	static UFunction* pAdjustAim = 0;
//	UwWeaponFire_execAdjustAim_Parms parms;
//
//	if ( !pAdjustAim )
//		pAdjustAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.AdjustAim" );
//
//	parms.Start = Start;
//	parms.InAimError = InAimError;
//	this->ProcessEvent ( pAdjustAim, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwWeaponFire::PlayFireEnd (  )
//{
//	static UFunction* pPlayFireEnd = 0;
//	UwWeaponFire_execPlayFireEnd_Parms parms;
//
//	if ( !pPlayFireEnd )
//		pPlayFireEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.PlayFireEnd" );
//
//	this->ProcessEvent ( pPlayFireEnd, &parms, NULL );
//
//}
//
//void UwWeaponFire::PlayFiring (  )
//{
//	static UFunction* pPlayFiring = 0;
//	UwWeaponFire_execPlayFiring_Parms parms;
//
//	if ( !pPlayFiring )
//		pPlayFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.PlayFiring" );
//
//	this->ProcessEvent ( pPlayFiring, &parms, NULL );
//
//}
//
//void UwWeaponFire::PlayStartHold (  )
//{
//	static UFunction* pPlayStartHold = 0;
//	UwWeaponFire_execPlayStartHold_Parms parms;
//
//	if ( !pPlayStartHold )
//		pPlayStartHold = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.PlayStartHold" );
//
//	this->ProcessEvent ( pPlayStartHold, &parms, NULL );
//
//}
//
//void UwWeaponFire::PlayPreFire (  )
//{
//	static UFunction* pPlayPreFire = 0;
//	UwWeaponFire_execPlayPreFire_Parms parms;
//
//	if ( !pPlayPreFire )
//		pPlayPreFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.PlayPreFire" );
//
//	this->ProcessEvent ( pPlayPreFire, &parms, NULL );
//
//}
//
//void UwWeaponFire::PlaySoundTeam (  )
//{
//	static UFunction* pPlaySoundTeam = 0;
//	UwWeaponFire_execPlaySoundTeam_Parms parms;
//
//	if ( !pPlaySoundTeam )
//		pPlaySoundTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.PlaySoundTeam" );
//
//	this->ProcessEvent ( pPlaySoundTeam, &parms, NULL );
//
//}
//
//void UwWeaponFire::ServerPlayFiring (  )
//{
//	static UFunction* pServerPlayFiring = 0;
//	UwWeaponFire_execServerPlayFiring_Parms parms;
//
//	if ( !pServerPlayFiring )
//		pServerPlayFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.ServerPlayFiring" );
//
//	this->ProcessEvent ( pServerPlayFiring, &parms, NULL );
//
//}
//
//bool UwWeaponFire::AllowFire (  )
//{
//	static UFunction* pAllowFire = 0;
//	UwWeaponFire_execAllowFire_Parms parms;
//
//	if ( !pAllowFire )
//		pAllowFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.AllowFire" );
//
//	this->ProcessEvent ( pAllowFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwWeaponFire::eventModeHoldFire (  )
//{
//	static UFunction* pModeHoldFire = 0;
//	UwWeaponFire_eventModeHoldFire_Parms parms;
//
//	if ( !pModeHoldFire )
//		pModeHoldFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.ModeHoldFire" );
//
//	this->ProcessEvent ( pModeHoldFire, &parms, NULL );
//
//}
//
//void UwWeaponFire::eventModeDoFire (  )
//{
//	static UFunction* pModeDoFire = 0;
//	UwWeaponFire_eventModeDoFire_Parms parms;
//
//	if ( !pModeDoFire )
//		pModeDoFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.ModeDoFire" );
//
//	this->ProcessEvent ( pModeDoFire, &parms, NULL );
//
//}
//
//void UwWeaponFire::SyncRandSeed (  )
//{
//	static UFunction* pSyncRandSeed = 0;
//	UwWeaponFire_execSyncRandSeed_Parms parms;
//
//	if ( !pSyncRandSeed )
//		pSyncRandSeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.SyncRandSeed" );
//
//	this->ProcessEvent ( pSyncRandSeed, &parms, NULL );
//
//}
//
//void UwWeaponFire::eventModeTick ( float dt )
//{
//	static UFunction* pModeTick = 0;
//	UwWeaponFire_eventModeTick_Parms parms;
//
//	if ( !pModeTick )
//		pModeTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.ModeTick" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pModeTick, &parms, NULL );
//
//}
//
//bool UwWeaponFire::IsFiring (  )
//{
//	static UFunction* pIsFiring = 0;
//	UwWeaponFire_execIsFiring_Parms parms;
//
//	if ( !pIsFiring )
//		pIsFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.IsFiring" );
//
//	this->ProcessEvent ( pIsFiring, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwWeaponFire::StopFiring (  )
//{
//	static UFunction* pStopFiring = 0;
//	UwWeaponFire_execStopFiring_Parms parms;
//
//	if ( !pStopFiring )
//		pStopFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.StopFiring" );
//
//	this->ProcessEvent ( pStopFiring, &parms, NULL );
//
//}
//
//void UwWeaponFire::StartFiring (  )
//{
//	static UFunction* pStartFiring = 0;
//	UwWeaponFire_execStartFiring_Parms parms;
//
//	if ( !pStartFiring )
//		pStartFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.StartFiring" );
//
//	this->ProcessEvent ( pStartFiring, &parms, NULL );
//
//}
//
//void UwWeaponFire::Update ( float dt )
//{
//	static UFunction* pUpdate = 0;
//	UwWeaponFire_execUpdate_Parms parms;
//
//	if ( !pUpdate )
//		pUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.Update" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pUpdate, &parms, NULL );
//
//}
//
//void UwWeaponFire::StopForceFeedback ( struct FString EffectName )
//{
//	static UFunction* pStopForceFeedback = 0;
//	UwWeaponFire_execStopForceFeedback_Parms parms;
//
//	if ( !pStopForceFeedback )
//		pStopForceFeedback = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.StopForceFeedback" );
//
//	parms.EffectName = EffectName;
//	this->ProcessEvent ( pStopForceFeedback, &parms, NULL );
//
//}
//
//void UwWeaponFire::ClientPlayForceFeedback ( struct FString EffectName )
//{
//	static UFunction* pClientPlayForceFeedback = 0;
//	UwWeaponFire_execClientPlayForceFeedback_Parms parms;
//
//	if ( !pClientPlayForceFeedback )
//		pClientPlayForceFeedback = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.ClientPlayForceFeedback" );
//
//	parms.EffectName = EffectName;
//	this->ProcessEvent ( pClientPlayForceFeedback, &parms, NULL );
//
//}
//
//void UwWeaponFire::ShakeView (  )
//{
//	static UFunction* pShakeView = 0;
//	UwWeaponFire_execShakeView_Parms parms;
//
//	if ( !pShakeView )
//		pShakeView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.ShakeView" );
//
//	this->ProcessEvent ( pShakeView, &parms, NULL );
//
//}
//
//void UwWeaponFire::StartMuzzleSmoke (  )
//{
//	static UFunction* pStartMuzzleSmoke = 0;
//	UwWeaponFire_execStartMuzzleSmoke_Parms parms;
//
//	if ( !pStartMuzzleSmoke )
//		pStartMuzzleSmoke = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.StartMuzzleSmoke" );
//
//	this->ProcessEvent ( pStartMuzzleSmoke, &parms, NULL );
//
//}
//
//void UwWeaponFire::FlashMuzzleFlash (  )
//{
//	static UFunction* pFlashMuzzleFlash = 0;
//	UwWeaponFire_execFlashMuzzleFlash_Parms parms;
//
//	if ( !pFlashMuzzleFlash )
//		pFlashMuzzleFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.FlashMuzzleFlash" );
//
//	this->ProcessEvent ( pFlashMuzzleFlash, &parms, NULL );
//
//}
//
//void UwWeaponFire::DrawMuzzleFlash ( class UCanvas* Canvas )
//{
//	static UFunction* pDrawMuzzleFlash = 0;
//	UwWeaponFire_execDrawMuzzleFlash_Parms parms;
//
//	if ( !pDrawMuzzleFlash )
//		pDrawMuzzleFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.DrawMuzzleFlash" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDrawMuzzleFlash, &parms, NULL );
//
//}
//
//void UwWeaponFire::DoFireEffectForClient (  )
//{
//	static UFunction* pDoFireEffectForClient = 0;
//	UwWeaponFire_execDoFireEffectForClient_Parms parms;
//
//	if ( !pDoFireEffectForClient )
//		pDoFireEffectForClient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.DoFireEffectForClient" );
//
//	this->ProcessEvent ( pDoFireEffectForClient, &parms, NULL );
//
//}
//
//void UwWeaponFire::DoFireEffect (  )
//{
//	static UFunction* pDoFireEffect = 0;
//	UwWeaponFire_execDoFireEffect_Parms parms;
//
//	if ( !pDoFireEffect )
//		pDoFireEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.DoFireEffect" );
//
//	this->ProcessEvent ( pDoFireEffect, &parms, NULL );
//
//}
//
//void UwWeaponFire::InitEffects (  )
//{
//	static UFunction* pInitEffects = 0;
//	UwWeaponFire_execInitEffects_Parms parms;
//
//	if ( !pInitEffects )
//		pInitEffects = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.InitEffects" );
//
//	this->ProcessEvent ( pInitEffects, &parms, NULL );
//
//}
//
//void UwWeaponFire::DestroyEffects (  )
//{
//	static UFunction* pDestroyEffects = 0;
//	UwWeaponFire_execDestroyEffects_Parms parms;
//
//	if ( !pDestroyEffects )
//		pDestroyEffects = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.DestroyEffects" );
//
//	this->ProcessEvent ( pDestroyEffects, &parms, NULL );
//
//}
//
//void UwWeaponFire::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	UwWeaponFire_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void UwWeaponFire::eventSetInitialState (  )
//{
//	static UFunction* pSetInitialState = 0;
//	UwWeaponFire_eventSetInitialState_Parms parms;
//
//	if ( !pSetInitialState )
//		pSetInitialState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.SetInitialState" );
//
//	this->ProcessEvent ( pSetInitialState, &parms, NULL );
//
//}
//
//void UwWeaponFire::PostNetBeginPlay (  )
//{
//	static UFunction* pPostNetBeginPlay = 0;
//	UwWeaponFire_execPostNetBeginPlay_Parms parms;
//
//	if ( !pPostNetBeginPlay )
//		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.PostNetBeginPlay" );
//
//	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );
//
//}
//
//void UwWeaponFire::BeginPlay (  )
//{
//	static UFunction* pBeginPlay = 0;
//	UwWeaponFire_execBeginPlay_Parms parms;
//
//	if ( !pBeginPlay )
//		pBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.BeginPlay" );
//
//	this->ProcessEvent ( pBeginPlay, &parms, NULL );
//
//}
//
//void UwWeaponFire::PreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	UwWeaponFire_execPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void UwWeaponFire::eventTimer (  )
//{
//	static UFunction* pTimer = 0;
//	UwWeaponFire_eventTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//void UwWeaponFire::SetTimer ( float NewTimerRate, bool bLoop )
//{
//	static UFunction* pSetTimer = 0;
//	UwWeaponFire_execSetTimer_Parms parms;
//
//	if ( !pSetTimer )
//		pSetTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponFire.SetTimer" );
//
//	parms.NewTimerRate = NewTimerRate;
//	parms.bLoop = bLoop;
//	this->ProcessEvent ( pSetTimer, &parms, NULL );
//
//}
//
//void UwInstantFire::MakeFireNoise (  )
//{
//	static UFunction* pMakeFireNoise = 0;
//	UwInstantFire_execMakeFireNoise_Parms parms;
//
//	if ( !pMakeFireNoise )
//		pMakeFireNoise = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.MakeFireNoise" );
//
//	this->ProcessEvent ( pMakeFireNoise, &parms, NULL );
//
//}
//
//void UwInstantFire::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	UwInstantFire_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//void UwInstantFire::CalcSpread (  )
//{
//	static UFunction* pCalcSpread = 0;
//	UwInstantFire_execCalcSpread_Parms parms;
//
//	if ( !pCalcSpread )
//		pCalcSpread = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.CalcSpread" );
//
//	this->ProcessEvent ( pCalcSpread, &parms, NULL );
//
//}
//
//void UwInstantFire::SetSpreadStance ( unsigned char ss )
//{
//	static UFunction* pSetSpreadStance = 0;
//	UwInstantFire_execSetSpreadStance_Parms parms;
//
//	if ( !pSetSpreadStance )
//		pSetSpreadStance = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.SetSpreadStance" );
//
//	parms.ss = ss;
//	this->ProcessEvent ( pSetSpreadStance, &parms, NULL );
//
//}
//
//void UwInstantFire::StartMuzzleSmoke (  )
//{
//	static UFunction* pStartMuzzleSmoke = 0;
//	UwInstantFire_execStartMuzzleSmoke_Parms parms;
//
//	if ( !pStartMuzzleSmoke )
//		pStartMuzzleSmoke = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.StartMuzzleSmoke" );
//
//	this->ProcessEvent ( pStartMuzzleSmoke, &parms, NULL );
//
//}
//
//void UwInstantFire::DrawMuzzleFlash ( class UCanvas* Canvas )
//{
//	static UFunction* pDrawMuzzleFlash = 0;
//	UwInstantFire_execDrawMuzzleFlash_Parms parms;
//
//	if ( !pDrawMuzzleFlash )
//		pDrawMuzzleFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.DrawMuzzleFlash" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDrawMuzzleFlash, &parms, NULL );
//
//}
//
//void UwInstantFire::DestroyEffects (  )
//{
//	static UFunction* pDestroyEffects = 0;
//	UwInstantFire_execDestroyEffects_Parms parms;
//
//	if ( !pDestroyEffects )
//		pDestroyEffects = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.DestroyEffects" );
//
//	this->ProcessEvent ( pDestroyEffects, &parms, NULL );
//
//}
//
//void UwInstantFire::InitEffects (  )
//{
//	static UFunction* pInitEffects = 0;
//	UwInstantFire_execInitEffects_Parms parms;
//
//	if ( !pInitEffects )
//		pInitEffects = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.InitEffects" );
//
//	this->ProcessEvent ( pInitEffects, &parms, NULL );
//
//}
//
//void UwInstantFire::wLoadOut (  )
//{
//	static UFunction* pwLoadOut = 0;
//	UwInstantFire_execwLoadOut_Parms parms;
//
//	if ( !pwLoadOut )
//		pwLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.wLoadOut" );
//
//	this->ProcessEvent ( pwLoadOut, &parms, NULL );
//
//}
//
//void UwInstantFire::FlashMuzzleFlash (  )
//{
//	static UFunction* pFlashMuzzleFlash = 0;
//	UwInstantFire_execFlashMuzzleFlash_Parms parms;
//
//	if ( !pFlashMuzzleFlash )
//		pFlashMuzzleFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.FlashMuzzleFlash" );
//
//	this->ProcessEvent ( pFlashMuzzleFlash, &parms, NULL );
//
//}
//
//void UwInstantFire::DoTrace ( struct FVector Start, struct FRotator Dir )
//{
//	static UFunction* pDoTrace = 0;
//	UwInstantFire_execDoTrace_Parms parms;
//
//	if ( !pDoTrace )
//		pDoTrace = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.DoTrace" );
//
//	parms.Start = Start;
//	parms.Dir = Dir;
//	this->ProcessEvent ( pDoTrace, &parms, NULL );
//
//}
//
//void UwInstantFire::DoTraceForClient ( struct FVector Start, struct FRotator Dir )
//{
//	static UFunction* pDoTraceForClient = 0;
//	UwInstantFire_execDoTraceForClient_Parms parms;
//
//	if ( !pDoTraceForClient )
//		pDoTraceForClient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.DoTraceForClient" );
//
//	parms.Start = Start;
//	parms.Dir = Dir;
//	this->ProcessEvent ( pDoTraceForClient, &parms, NULL );
//
//}
//
//void UwInstantFire::DoFireEffectForClient (  )
//{
//	static UFunction* pDoFireEffectForClient = 0;
//	UwInstantFire_execDoFireEffectForClient_Parms parms;
//
//	if ( !pDoFireEffectForClient )
//		pDoFireEffectForClient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.DoFireEffectForClient" );
//
//	this->ProcessEvent ( pDoFireEffectForClient, &parms, NULL );
//
//}
//
//void UwInstantFire::DoTraceNative ( struct FVector Start, struct FRotator Dir )
//{
//	static UFunction* pDoTraceNative = 0;
//	UwInstantFire_execDoTraceNative_Parms parms;
//
//	if ( !pDoTraceNative )
//		pDoTraceNative = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.DoTraceNative" );
//
//	parms.Start = Start;
//	parms.Dir = Dir;
//	this->ProcessEvent ( pDoTraceNative, &parms, NULL );
//
//}
//
//void UwInstantFire::DoFireEffect (  )
//{
//	static UFunction* pDoFireEffect = 0;
//	UwInstantFire_execDoFireEffect_Parms parms;
//
//	if ( !pDoFireEffect )
//		pDoFireEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.DoFireEffect" );
//
//	this->ProcessEvent ( pDoFireEffect, &parms, NULL );
//
//}
//
//void UwInstantFire::eventModeTick ( float dt )
//{
//	static UFunction* pModeTick = 0;
//	UwInstantFire_eventModeTick_Parms parms;
//
//	if ( !pModeTick )
//		pModeTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.ModeTick" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pModeTick, &parms, NULL );
//
//}
//
//float UwInstantFire::MaxRange (  )
//{
//	static UFunction* pMaxRange = 0;
//	UwInstantFire_execMaxRange_Parms parms;
//
//	if ( !pMaxRange )
//		pMaxRange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.MaxRange" );
//
//	this->ProcessEvent ( pMaxRange, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwInstantFire::ServerPlayFiring (  )
//{
//	static UFunction* pServerPlayFiring = 0;
//	UwInstantFire_execServerPlayFiring_Parms parms;
//
//	if ( !pServerPlayFiring )
//		pServerPlayFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.ServerPlayFiring" );
//
//	this->ProcessEvent ( pServerPlayFiring, &parms, NULL );
//
//}
//
//void UwInstantFire::PlayFiring (  )
//{
//	static UFunction* pPlayFiring = 0;
//	UwInstantFire_execPlayFiring_Parms parms;
//
//	if ( !pPlayFiring )
//		pPlayFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.PlayFiring" );
//
//	this->ProcessEvent ( pPlayFiring, &parms, NULL );
//
//}
//
//bool UwInstantFire::AllowFire (  )
//{
//	static UFunction* pAllowFire = 0;
//	UwInstantFire_execAllowFire_Parms parms;
//
//	if ( !pAllowFire )
//		pAllowFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.AllowFire" );
//
//	this->ProcessEvent ( pAllowFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwInstantFire::eventModeDoFire (  )
//{
//	static UFunction* pModeDoFire = 0;
//	UwInstantFire_eventModeDoFire_Parms parms;
//
//	if ( !pModeDoFire )
//		pModeDoFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wInstantFire.ModeDoFire" );
//
//	this->ProcessEvent ( pModeDoFire, &parms, NULL );
//
//}
//
//void UwMapInfo::CopyTo ( class UwMapInfo* Dest )
//{
//	static UFunction* pCopyTo = 0;
//	UwMapInfo_execCopyTo_Parms parms;
//
//	if ( !pCopyTo )
//		pCopyTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapInfo.CopyTo" );
//
//	parms.Dest = Dest;
//	this->ProcessEvent ( pCopyTo, &parms, NULL );
//
//}
//
//bool UwQuestParam::IsEnabledEventQuest ( struct FBtrDouble CurrentTime )
//{
//	static UFunction* pIsEnabledEventQuest = 0;
//	UwQuestParam_execIsEnabledEventQuest_Parms parms;
//
//	if ( !pIsEnabledEventQuest )
//		pIsEnabledEventQuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wQuestParam.IsEnabledEventQuest" );
//
//	parms.CurrentTime = CurrentTime;
//	this->ProcessEvent ( pIsEnabledEventQuest, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwQuestParam::IsEventQuest (  )
//{
//	static UFunction* pIsEventQuest = 0;
//	UwQuestParam_execIsEventQuest_Parms parms;
//
//	if ( !pIsEventQuest )
//		pIsEventQuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wQuestParam.IsEventQuest" );
//
//	this->ProcessEvent ( pIsEventQuest, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckSpCharItem ( int iItemType )
//{
//	static UFunction* pCheckSpCharItem = 0;
//	UwGameManager_execCheckSpCharItem_Parms parms;
//
//	if ( !pCheckSpCharItem )
//		pCheckSpCharItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckSpCharItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckSpCharItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckAccessoryItem ( int iItemType )
//{
//	static UFunction* pCheckAccessoryItem = 0;
//	UwGameManager_execCheckAccessoryItem_Parms parms;
//
//	if ( !pCheckAccessoryItem )
//		pCheckAccessoryItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckAccessoryItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckAccessoryItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckFaceItem ( int iItemType )
//{
//	static UFunction* pCheckFaceItem = 0;
//	UwGameManager_execCheckFaceItem_Parms parms;
//
//	if ( !pCheckFaceItem )
//		pCheckFaceItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckFaceItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckFaceItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckHeadItem ( int iItemType )
//{
//	static UFunction* pCheckHeadItem = 0;
//	UwGameManager_execCheckHeadItem_Parms parms;
//
//	if ( !pCheckHeadItem )
//		pCheckHeadItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckHeadItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckHeadItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckThrowingWeapon ( int iItemType )
//{
//	static UFunction* pCheckThrowingWeapon = 0;
//	UwGameManager_execCheckThrowingWeapon_Parms parms;
//
//	if ( !pCheckThrowingWeapon )
//		pCheckThrowingWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckThrowingWeapon" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckThrowingWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckLvMark ( int iItemType )
//{
//	static UFunction* pCheckLvMark = 0;
//	UwGameManager_execCheckLvMark_Parms parms;
//
//	if ( !pCheckLvMark )
//		pCheckLvMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckLvMark" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckLvMark, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckRandBoxItem ( int iItemType )
//{
//	static UFunction* pCheckRandBoxItem = 0;
//	UwGameManager_execCheckRandBoxItem_Parms parms;
//
//	if ( !pCheckRandBoxItem )
//		pCheckRandBoxItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckRandBoxItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckRandBoxItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckUseItem ( int iItemType )
//{
//	static UFunction* pCheckUseItem = 0;
//	UwGameManager_execCheckUseItem_Parms parms;
//
//	if ( !pCheckUseItem )
//		pCheckUseItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckUseItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckUseItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckItemBox ( int iItemType )
//{
//	static UFunction* pCheckItemBox = 0;
//	UwGameManager_execCheckItemBox_Parms parms;
//
//	if ( !pCheckItemBox )
//		pCheckItemBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckItemBox" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckItemBox, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckSkillItem ( int iItemType )
//{
//	static UFunction* pCheckSkillItem = 0;
//	UwGameManager_execCheckSkillItem_Parms parms;
//
//	if ( !pCheckSkillItem )
//		pCheckSkillItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckSkillItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckSkillItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckPistolItem ( int iItemType )
//{
//	static UFunction* pCheckPistolItem = 0;
//	UwGameManager_execCheckPistolItem_Parms parms;
//
//	if ( !pCheckPistolItem )
//		pCheckPistolItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckPistolItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckPistolItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckMGItem ( int iItemType )
//{
//	static UFunction* pCheckMGItem = 0;
//	UwGameManager_execCheckMGItem_Parms parms;
//
//	if ( !pCheckMGItem )
//		pCheckMGItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckMGItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckMGItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckSGItem ( int iItemType )
//{
//	static UFunction* pCheckSGItem = 0;
//	UwGameManager_execCheckSGItem_Parms parms;
//
//	if ( !pCheckSGItem )
//		pCheckSGItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckSGItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckSGItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckSRItem ( int iItemType )
//{
//	static UFunction* pCheckSRItem = 0;
//	UwGameManager_execCheckSRItem_Parms parms;
//
//	if ( !pCheckSRItem )
//		pCheckSRItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckSRItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckSRItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckSMGItem ( int iItemType )
//{
//	static UFunction* pCheckSMGItem = 0;
//	UwGameManager_execCheckSMGItem_Parms parms;
//
//	if ( !pCheckSMGItem )
//		pCheckSMGItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckSMGItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckSMGItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckARItem ( int iItemType )
//{
//	static UFunction* pCheckARItem = 0;
//	UwGameManager_execCheckARItem_Parms parms;
//
//	if ( !pCheckARItem )
//		pCheckARItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckARItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckARItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckEquipQuickSlotItem ( int iItemType )
//{
//	static UFunction* pCheckEquipQuickSlotItem = 0;
//	UwGameManager_execCheckEquipQuickSlotItem_Parms parms;
//
//	if ( !pCheckEquipQuickSlotItem )
//		pCheckEquipQuickSlotItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckEquipQuickSlotItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckEquipQuickSlotItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckMainQuickSlotItem ( int iItemType )
//{
//	static UFunction* pCheckMainQuickSlotItem = 0;
//	UwGameManager_execCheckMainQuickSlotItem_Parms parms;
//
//	if ( !pCheckMainQuickSlotItem )
//		pCheckMainQuickSlotItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckMainQuickSlotItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckMainQuickSlotItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckQuickSlotItem ( int iItemType )
//{
//	static UFunction* pCheckQuickSlotItem = 0;
//	UwGameManager_execCheckQuickSlotItem_Parms parms;
//
//	if ( !pCheckQuickSlotItem )
//		pCheckQuickSlotItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckQuickSlotItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckQuickSlotItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckSubWeaponItem ( int iItemType )
//{
//	static UFunction* pCheckSubWeaponItem = 0;
//	UwGameManager_execCheckSubWeaponItem_Parms parms;
//
//	if ( !pCheckSubWeaponItem )
//		pCheckSubWeaponItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckSubWeaponItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckSubWeaponItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckMainWeaponItem ( int iItemType )
//{
//	static UFunction* pCheckMainWeaponItem = 0;
//	UwGameManager_execCheckMainWeaponItem_Parms parms;
//
//	if ( !pCheckMainWeaponItem )
//		pCheckMainWeaponItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckMainWeaponItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckMainWeaponItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CheckWeaponItem ( int iItemType )
//{
//	static UFunction* pCheckWeaponItem = 0;
//	UwGameManager_execCheckWeaponItem_Parms parms;
//
//	if ( !pCheckWeaponItem )
//		pCheckWeaponItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CheckWeaponItem" );
//
//	parms.iItemType = iItemType;
//	this->ProcessEvent ( pCheckWeaponItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UI3DL2Listener* UwGameManager::GetEAXEffect ( struct FString strEffectClassName )
//{
//	static UFunction* pGetEAXEffect = 0;
//	UwGameManager_execGetEAXEffect_Parms parms;
//
//	if ( !pGetEAXEffect )
//		pGetEAXEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetEAXEffect" );
//
//	parms.strEffectClassName = strEffectClassName;
//	this->ProcessEvent ( pGetEAXEffect, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwGameManager::GetLevelImageString ( int Level, int LevelMarkID )
//{
//	static UFunction* pGetLevelImageString = 0;
//	UwGameManager_execGetLevelImageString_Parms parms;
//
//	if ( !pGetLevelImageString )
//		pGetLevelImageString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetLevelImageString" );
//
//	parms.Level = Level;
//	parms.LevelMarkID = LevelMarkID;
//	this->ProcessEvent ( pGetLevelImageString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FFloatBox UwGameManager::GetLevelImageCoordi ( int Level, int LevelMarkID )
//{
//	static UFunction* pGetLevelImageCoordi = 0;
//	UwGameManager_execGetLevelImageCoordi_Parms parms;
//
//	if ( !pGetLevelImageCoordi )
//		pGetLevelImageCoordi = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetLevelImageCoordi" );
//
//	parms.Level = Level;
//	parms.LevelMarkID = LevelMarkID;
//	this->ProcessEvent ( pGetLevelImageCoordi, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwGameManager::GetClanLevelImages ( int Level )
//{
//	static UFunction* pGetClanLevelImages = 0;
//	UwGameManager_execGetClanLevelImages_Parms parms;
//
//	if ( !pGetClanLevelImages )
//		pGetClanLevelImages = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetClanLevelImages" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pGetClanLevelImages, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetLevelByLevelMarkID ( int LevelMarkID )
//{
//	static UFunction* pGetLevelByLevelMarkID = 0;
//	UwGameManager_execGetLevelByLevelMarkID_Parms parms;
//
//	if ( !pGetLevelByLevelMarkID )
//		pGetLevelByLevelMarkID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetLevelByLevelMarkID" );
//
//	parms.LevelMarkID = LevelMarkID;
//	this->ProcessEvent ( pGetLevelByLevelMarkID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetLevel ( int Exp )
//{
//	static UFunction* pGetLevel = 0;
//	UwGameManager_execGetLevel_Parms parms;
//
//	if ( !pGetLevel )
//		pGetLevel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetLevel" );
//
//	parms.Exp = Exp;
//	this->ProcessEvent ( pGetLevel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::LoadSupplyRandomTable (  )
//{
//	static UFunction* pLoadSupplyRandomTable = 0;
//	UwGameManager_execLoadSupplyRandomTable_Parms parms;
//
//	if ( !pLoadSupplyRandomTable )
//		pLoadSupplyRandomTable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadSupplyRandomTable" );
//
//	this->ProcessEvent ( pLoadSupplyRandomTable, &parms, NULL );
//
//}
//
//void UwGameManager::LoadMapInfos (  )
//{
//	static UFunction* pLoadMapInfos = 0;
//	UwGameManager_execLoadMapInfos_Parms parms;
//
//	if ( !pLoadMapInfos )
//		pLoadMapInfos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadMapInfos" );
//
//	this->ProcessEvent ( pLoadMapInfos, &parms, NULL );
//
//}
//
//int UwGameManager::GetPaintingItemIDbyPaintingID ( int PaintingID )
//{
//	static UFunction* pGetPaintingItemIDbyPaintingID = 0;
//	UwGameManager_execGetPaintingItemIDbyPaintingID_Parms parms;
//
//	if ( !pGetPaintingItemIDbyPaintingID )
//		pGetPaintingItemIDbyPaintingID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetPaintingItemIDbyPaintingID" );
//
//	parms.PaintingID = PaintingID;
//	this->ProcessEvent ( pGetPaintingItemIDbyPaintingID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetPaintGroupParamsIndex ( int PaintingID )
//{
//	static UFunction* pGetPaintGroupParamsIndex = 0;
//	UwGameManager_execGetPaintGroupParamsIndex_Parms parms;
//
//	if ( !pGetPaintGroupParamsIndex )
//		pGetPaintGroupParamsIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetPaintGroupParamsIndex" );
//
//	parms.PaintingID = PaintingID;
//	this->ProcessEvent ( pGetPaintGroupParamsIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwPaintGroupParam* UwGameManager::GetPaintGroupParam ( int iPaintingID )
//{
//	static UFunction* pGetPaintGroupParam = 0;
//	UwGameManager_execGetPaintGroupParam_Parms parms;
//
//	if ( !pGetPaintGroupParam )
//		pGetPaintGroupParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetPaintGroupParam" );
//
//	parms.iPaintingID = iPaintingID;
//	this->ProcessEvent ( pGetPaintGroupParam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwGameManager::GetPaintingUIIcon ( int iItemID )
//{
//	static UFunction* pGetPaintingUIIcon = 0;
//	UwGameManager_execGetPaintingUIIcon_Parms parms;
//
//	if ( !pGetPaintingUIIcon )
//		pGetPaintingUIIcon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetPaintingUIIcon" );
//
//	parms.iItemID = iItemID;
//	this->ProcessEvent ( pGetPaintingUIIcon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::AddPaintGroupParam_NullData (  )
//{
//	static UFunction* pAddPaintGroupParam_NullData = 0;
//	UwGameManager_execAddPaintGroupParam_NullData_Parms parms;
//
//	if ( !pAddPaintGroupParam_NullData )
//		pAddPaintGroupParam_NullData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddPaintGroupParam_NullData" );
//
//	this->ProcessEvent ( pAddPaintGroupParam_NullData, &parms, NULL );
//
//}
//
//void UwGameManager::AddPaintGroupParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddPaintGroupParams = 0;
//	UwGameManager_execAddPaintGroupParams_Parms parms;
//
//	if ( !pAddPaintGroupParams )
//		pAddPaintGroupParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddPaintGroupParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddPaintGroupParams, &parms, NULL );
//
//}
//
//void UwGameManager::LoadPaintGroupParameters (  )
//{
//	static UFunction* pLoadPaintGroupParameters = 0;
//	UwGameManager_execLoadPaintGroupParameters_Parms parms;
//
//	if ( !pLoadPaintGroupParameters )
//		pLoadPaintGroupParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadPaintGroupParameters" );
//
//	this->ProcessEvent ( pLoadPaintGroupParameters, &parms, NULL );
//
//}
//
//class UMaterial* UwGameManager::GetPartsGroupPainting ( int iItemID, int iPartsID, bool bThird, int iPainting_Item_ID )
//{
//	static UFunction* pGetPartsGroupPainting = 0;
//	UwGameManager_execGetPartsGroupPainting_Parms parms;
//
//	if ( !pGetPartsGroupPainting )
//		pGetPartsGroupPainting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetPartsGroupPainting" );
//
//	parms.iItemID = iItemID;
//	parms.iPartsID = iPartsID;
//	parms.bThird = bThird;
//	parms.iPainting_Item_ID = iPainting_Item_ID;
//	this->ProcessEvent ( pGetPartsGroupPainting, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwPartsGroupParam* UwGameManager::GetDefaultAddPartsGroupParam ( int iItemID )
//{
//	static UFunction* pGetDefaultAddPartsGroupParam = 0;
//	UwGameManager_execGetDefaultAddPartsGroupParam_Parms parms;
//
//	if ( !pGetDefaultAddPartsGroupParam )
//		pGetDefaultAddPartsGroupParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetDefaultAddPartsGroupParam" );
//
//	parms.iItemID = iItemID;
//	this->ProcessEvent ( pGetDefaultAddPartsGroupParam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwPartsGroupParam* UwGameManager::GetAddPartsGroupParam ( int iPartsGrouplID )
//{
//	static UFunction* pGetAddPartsGroupParam = 0;
//	UwGameManager_execGetAddPartsGroupParam_Parms parms;
//
//	if ( !pGetAddPartsGroupParam )
//		pGetAddPartsGroupParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetAddPartsGroupParam" );
//
//	parms.iPartsGrouplID = iPartsGrouplID;
//	this->ProcessEvent ( pGetAddPartsGroupParam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::AddAddPartsGroupParam_NullData (  )
//{
//	static UFunction* pAddAddPartsGroupParam_NullData = 0;
//	UwGameManager_execAddAddPartsGroupParam_NullData_Parms parms;
//
//	if ( !pAddAddPartsGroupParam_NullData )
//		pAddAddPartsGroupParam_NullData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddAddPartsGroupParam_NullData" );
//
//	this->ProcessEvent ( pAddAddPartsGroupParam_NullData, &parms, NULL );
//
//}
//
//void UwGameManager::AddAddPartsGroupParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddAddPartsGroupParams = 0;
//	UwGameManager_execAddAddPartsGroupParams_Parms parms;
//
//	if ( !pAddAddPartsGroupParams )
//		pAddAddPartsGroupParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddAddPartsGroupParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddAddPartsGroupParams, &parms, NULL );
//
//}
//
//void UwGameManager::LoadAddPartsGroupParameters (  )
//{
//	static UFunction* pLoadAddPartsGroupParameters = 0;
//	UwGameManager_execLoadAddPartsGroupParameters_Parms parms;
//
//	if ( !pLoadAddPartsGroupParameters )
//		pLoadAddPartsGroupParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadAddPartsGroupParameters" );
//
//	this->ProcessEvent ( pLoadAddPartsGroupParameters, &parms, NULL );
//
//}
//
//void UwGameManager::AddItemBoxParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddItemBoxParams = 0;
//	UwGameManager_execAddItemBoxParams_Parms parms;
//
//	if ( !pAddItemBoxParams )
//		pAddItemBoxParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddItemBoxParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddItemBoxParams, &parms, NULL );
//
//}
//
//void UwGameManager::AddItemBoxParam_NullData (  )
//{
//	static UFunction* pAddItemBoxParam_NullData = 0;
//	UwGameManager_execAddItemBoxParam_NullData_Parms parms;
//
//	if ( !pAddItemBoxParam_NullData )
//		pAddItemBoxParam_NullData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddItemBoxParam_NullData" );
//
//	this->ProcessEvent ( pAddItemBoxParam_NullData, &parms, NULL );
//
//}
//
//void UwGameManager::LoadItemBoxParameters (  )
//{
//	static UFunction* pLoadItemBoxParameters = 0;
//	UwGameManager_execLoadItemBoxParameters_Parms parms;
//
//	if ( !pLoadItemBoxParameters )
//		pLoadItemBoxParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadItemBoxParameters" );
//
//	this->ProcessEvent ( pLoadItemBoxParameters, &parms, NULL );
//
//}
//
//struct FImage UwGameManager::GetClanMark128 ( int clanmarkid )
//{
//	static UFunction* pGetClanMark128 = 0;
//	UwGameManager_execGetClanMark128_Parms parms;
//
//	if ( !pGetClanMark128 )
//		pGetClanMark128 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetClanMark128" );
//
//	parms.clanmarkid = clanmarkid;
//	this->ProcessEvent ( pGetClanMark128, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FImage UwGameManager::GetClanMark32 ( int clanmarkid )
//{
//	static UFunction* pGetClanMark32 = 0;
//	UwGameManager_execGetClanMark32_Parms parms;
//
//	if ( !pGetClanMark32 )
//		pGetClanMark32 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetClanMark32" );
//
//	parms.clanmarkid = clanmarkid;
//	this->ProcessEvent ( pGetClanMark32, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FImage UwGameManager::GetMyClanBL (  )
//{
//	static UFunction* pGetMyClanBL = 0;
//	UwGameManager_execGetMyClanBL_Parms parms;
//
//	if ( !pGetMyClanBL )
//		pGetMyClanBL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetMyClanBL" );
//
//	this->ProcessEvent ( pGetMyClanBL, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FImage UwGameManager::GetMyClanBG (  )
//{
//	static UFunction* pGetMyClanBG = 0;
//	UwGameManager_execGetMyClanBG_Parms parms;
//
//	if ( !pGetMyClanBG )
//		pGetMyClanBG = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetMyClanBG" );
//
//	this->ProcessEvent ( pGetMyClanBG, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FImage UwGameManager::GetMyClanPattern (  )
//{
//	static UFunction* pGetMyClanPattern = 0;
//	UwGameManager_execGetMyClanPattern_Parms parms;
//
//	if ( !pGetMyClanPattern )
//		pGetMyClanPattern = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetMyClanPattern" );
//
//	this->ProcessEvent ( pGetMyClanPattern, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::FindClanMarkIndex ( int clanmarkid )
//{
//	static UFunction* pFindClanMarkIndex = 0;
//	UwGameManager_execFindClanMarkIndex_Parms parms;
//
//	if ( !pFindClanMarkIndex )
//		pFindClanMarkIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindClanMarkIndex" );
//
//	parms.clanmarkid = clanmarkid;
//	this->ProcessEvent ( pFindClanMarkIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwClanMarkParam* UwGameManager::FindClanMarkParams ( int clanmarkid )
//{
//	static UFunction* pFindClanMarkParams = 0;
//	UwGameManager_execFindClanMarkParams_Parms parms;
//
//	if ( !pFindClanMarkParams )
//		pFindClanMarkParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindClanMarkParams" );
//
//	parms.clanmarkid = clanmarkid;
//	this->ProcessEvent ( pFindClanMarkParams, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::AddClanMarkParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddClanMarkParams = 0;
//	UwGameManager_execAddClanMarkParams_Parms parms;
//
//	if ( !pAddClanMarkParams )
//		pAddClanMarkParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddClanMarkParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddClanMarkParams, &parms, NULL );
//
//}
//
//void UwGameManager::AddClanMarkParam_NullData (  )
//{
//	static UFunction* pAddClanMarkParam_NullData = 0;
//	UwGameManager_execAddClanMarkParam_NullData_Parms parms;
//
//	if ( !pAddClanMarkParam_NullData )
//		pAddClanMarkParam_NullData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddClanMarkParam_NullData" );
//
//	this->ProcessEvent ( pAddClanMarkParam_NullData, &parms, NULL );
//
//}
//
//void UwGameManager::LoadModeDOAParameters (  )
//{
//	static UFunction* pLoadModeDOAParameters = 0;
//	UwGameManager_execLoadModeDOAParameters_Parms parms;
//
//	if ( !pLoadModeDOAParameters )
//		pLoadModeDOAParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadModeDOAParameters" );
//
//	this->ProcessEvent ( pLoadModeDOAParameters, &parms, NULL );
//
//}
//
//bool UwGameManager::GetRandBoxItems ( int ItemID, int RandNum, class TArray< int >* ItemIDs, class TArray< int >* PartIDs )
//{
//	static UFunction* pGetRandBoxItems = 0;
//	UwGameManager_execGetRandBoxItems_Parms parms;
//
//	if ( !pGetRandBoxItems )
//		pGetRandBoxItems = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetRandBoxItems" );
//
//	parms.ItemID = ItemID;
//	parms.RandNum = RandNum;
//	this->ProcessEvent ( pGetRandBoxItems, &parms, NULL );
//
//	*ItemIDs = parms.ItemIDs;
//	*PartIDs = parms.PartIDs;
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetRandBoxItemsCount ( int ItemID )
//{
//	static UFunction* pGetRandBoxItemsCount = 0;
//	UwGameManager_execGetRandBoxItemsCount_Parms parms;
//
//	if ( !pGetRandBoxItemsCount )
//		pGetRandBoxItemsCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetRandBoxItemsCount" );
//
//	parms.ItemID = ItemID;
//	this->ProcessEvent ( pGetRandBoxItemsCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::AddRandBoxParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddRandBoxParams = 0;
//	UwGameManager_execAddRandBoxParams_Parms parms;
//
//	if ( !pAddRandBoxParams )
//		pAddRandBoxParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddRandBoxParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddRandBoxParams, &parms, NULL );
//
//}
//
//void UwGameManager::AddRandBoxParam_NullData (  )
//{
//	static UFunction* pAddRandBoxParam_NullData = 0;
//	UwGameManager_execAddRandBoxParam_NullData_Parms parms;
//
//	if ( !pAddRandBoxParam_NullData )
//		pAddRandBoxParam_NullData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddRandBoxParam_NullData" );
//
//	this->ProcessEvent ( pAddRandBoxParam_NullData, &parms, NULL );
//
//}
//
//void UwGameManager::LoadRandBoxParameters (  )
//{
//	static UFunction* pLoadRandBoxParameters = 0;
//	UwGameManager_execLoadRandBoxParameters_Parms parms;
//
//	if ( !pLoadRandBoxParameters )
//		pLoadRandBoxParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadRandBoxParameters" );
//
//	this->ProcessEvent ( pLoadRandBoxParameters, &parms, NULL );
//
//}
//
//int UwGameManager::GetLastDailyQuestID ( int QuestID )
//{
//	static UFunction* pGetLastDailyQuestID = 0;
//	UwGameManager_execGetLastDailyQuestID_Parms parms;
//
//	if ( !pGetLastDailyQuestID )
//		pGetLastDailyQuestID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetLastDailyQuestID" );
//
//	parms.QuestID = QuestID;
//	this->ProcessEvent ( pGetLastDailyQuestID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetPrevDailyQuestID ( int QuestID )
//{
//	static UFunction* pGetPrevDailyQuestID = 0;
//	UwGameManager_execGetPrevDailyQuestID_Parms parms;
//
//	if ( !pGetPrevDailyQuestID )
//		pGetPrevDailyQuestID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetPrevDailyQuestID" );
//
//	parms.QuestID = QuestID;
//	this->ProcessEvent ( pGetPrevDailyQuestID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetDailyQuestIDFromTypeAndStep ( int ServerTime, int DailyQuestType, int Step )
//{
//	static UFunction* pGetDailyQuestIDFromTypeAndStep = 0;
//	UwGameManager_execGetDailyQuestIDFromTypeAndStep_Parms parms;
//
//	if ( !pGetDailyQuestIDFromTypeAndStep )
//		pGetDailyQuestIDFromTypeAndStep = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetDailyQuestIDFromTypeAndStep" );
//
//	parms.ServerTime = ServerTime;
//	parms.DailyQuestType = DailyQuestType;
//	parms.Step = Step;
//	this->ProcessEvent ( pGetDailyQuestIDFromTypeAndStep, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetDailyQuestType ( int QuestID )
//{
//	static UFunction* pGetDailyQuestType = 0;
//	UwGameManager_execGetDailyQuestType_Parms parms;
//
//	if ( !pGetDailyQuestType )
//		pGetDailyQuestType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetDailyQuestType" );
//
//	parms.QuestID = QuestID;
//	this->ProcessEvent ( pGetDailyQuestType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::AddDailyQuestParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddDailyQuestParams = 0;
//	UwGameManager_execAddDailyQuestParams_Parms parms;
//
//	if ( !pAddDailyQuestParams )
//		pAddDailyQuestParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddDailyQuestParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddDailyQuestParams, &parms, NULL );
//
//}
//
//void UwGameManager::AddDailyQuestParam_NullData (  )
//{
//	static UFunction* pAddDailyQuestParam_NullData = 0;
//	UwGameManager_execAddDailyQuestParam_NullData_Parms parms;
//
//	if ( !pAddDailyQuestParam_NullData )
//		pAddDailyQuestParam_NullData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddDailyQuestParam_NullData" );
//
//	this->ProcessEvent ( pAddDailyQuestParam_NullData, &parms, NULL );
//
//}
//
//void UwGameManager::LoadDailyQuestParameters (  )
//{
//	static UFunction* pLoadDailyQuestParameters = 0;
//	UwGameManager_execLoadDailyQuestParameters_Parms parms;
//
//	if ( !pLoadDailyQuestParameters )
//		pLoadDailyQuestParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadDailyQuestParameters" );
//
//	this->ProcessEvent ( pLoadDailyQuestParameters, &parms, NULL );
//
//}
//
//struct FBtrTime UwGameManager::TimeStringToBtrTime ( struct FString strInTime )
//{
//	static UFunction* pTimeStringToBtrTime = 0;
//	UwGameManager_execTimeStringToBtrTime_Parms parms;
//
//	if ( !pTimeStringToBtrTime )
//		pTimeStringToBtrTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.TimeStringToBtrTime" );
//
//	parms.strInTime = strInTime;
//	this->ProcessEvent ( pTimeStringToBtrTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::HasEnableEventQuest ( struct FBtrDouble ServerTime, class UwMatchMaker* wMM )
//{
//	static UFunction* pHasEnableEventQuest = 0;
//	UwGameManager_execHasEnableEventQuest_Parms parms;
//
//	if ( !pHasEnableEventQuest )
//		pHasEnableEventQuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.HasEnableEventQuest" );
//
//	parms.ServerTime = ServerTime;
//	parms.wMM = wMM;
//	this->ProcessEvent ( pHasEnableEventQuest, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetLinkQuestMaxStep ( int LinkQuestID )
//{
//	static UFunction* pGetLinkQuestMaxStep = 0;
//	UwGameManager_execGetLinkQuestMaxStep_Parms parms;
//
//	if ( !pGetLinkQuestMaxStep )
//		pGetLinkQuestMaxStep = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetLinkQuestMaxStep" );
//
//	parms.LinkQuestID = LinkQuestID;
//	this->ProcessEvent ( pGetLinkQuestMaxStep, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwQuestParam* UwGameManager::GetLinkQuestInfo ( int LinkQuestID, int LinkQuestStep )
//{
//	static UFunction* pGetLinkQuestInfo = 0;
//	UwGameManager_execGetLinkQuestInfo_Parms parms;
//
//	if ( !pGetLinkQuestInfo )
//		pGetLinkQuestInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetLinkQuestInfo" );
//
//	parms.LinkQuestID = LinkQuestID;
//	parms.LinkQuestStep = LinkQuestStep;
//	this->ProcessEvent ( pGetLinkQuestInfo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetQuestInfoIndex ( int QuestID )
//{
//	static UFunction* pGetQuestInfoIndex = 0;
//	UwGameManager_execGetQuestInfoIndex_Parms parms;
//
//	if ( !pGetQuestInfoIndex )
//		pGetQuestInfoIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetQuestInfoIndex" );
//
//	parms.QuestID = QuestID;
//	this->ProcessEvent ( pGetQuestInfoIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwQuestParam* UwGameManager::GetQuestInfoFromIndex ( int Index )
//{
//	static UFunction* pGetQuestInfoFromIndex = 0;
//	UwGameManager_execGetQuestInfoFromIndex_Parms parms;
//
//	if ( !pGetQuestInfoFromIndex )
//		pGetQuestInfoFromIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetQuestInfoFromIndex" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pGetQuestInfoFromIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwQuestParam* UwGameManager::GetQuestInfo ( int QuestID )
//{
//	static UFunction* pGetQuestInfo = 0;
//	UwGameManager_execGetQuestInfo_Parms parms;
//
//	if ( !pGetQuestInfo )
//		pGetQuestInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetQuestInfo" );
//
//	parms.QuestID = QuestID;
//	this->ProcessEvent ( pGetQuestInfo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetItemType ( class UwItemBoxHK* ItemInfo, class UwItemBoxInstanceHK* instanceInfo )
//{
//	static UFunction* pGetItemType = 0;
//	UwGameManager_execGetItemType_Parms parms;
//
//	if ( !pGetItemType )
//		pGetItemType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetItemType" );
//
//	parms.ItemInfo = ItemInfo;
//	parms.instanceInfo = instanceInfo;
//	this->ProcessEvent ( pGetItemType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::IsEnableWeaponModify ( class UwItemBoxHK* ItemInfo )
//{
//	static UFunction* pIsEnableWeaponModify = 0;
//	UwGameManager_execIsEnableWeaponModify_Parms parms;
//
//	if ( !pIsEnableWeaponModify )
//		pIsEnableWeaponModify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.IsEnableWeaponModify" );
//
//	parms.ItemInfo = ItemInfo;
//	this->ProcessEvent ( pIsEnableWeaponModify, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::AddQuestParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddQuestParams = 0;
//	UwGameManager_execAddQuestParams_Parms parms;
//
//	if ( !pAddQuestParams )
//		pAddQuestParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddQuestParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddQuestParams, &parms, NULL );
//
//}
//
//void UwGameManager::AddQuestParam_NullData (  )
//{
//	static UFunction* pAddQuestParam_NullData = 0;
//	UwGameManager_execAddQuestParam_NullData_Parms parms;
//
//	if ( !pAddQuestParam_NullData )
//		pAddQuestParam_NullData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddQuestParam_NullData" );
//
//	this->ProcessEvent ( pAddQuestParam_NullData, &parms, NULL );
//
//}
//
//void UwGameManager::LoadQuestParameters (  )
//{
//	static UFunction* pLoadQuestParameters = 0;
//	UwGameManager_execLoadQuestParameters_Parms parms;
//
//	if ( !pLoadQuestParameters )
//		pLoadQuestParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadQuestParameters" );
//
//	this->ProcessEvent ( pLoadQuestParameters, &parms, NULL );
//
//}
//
//void UwGameManager::GetPromotionItems ( int Level, class TArray< class UwPromotionParam* >* arrItems )
//{
//	static UFunction* pGetPromotionItems = 0;
//	UwGameManager_execGetPromotionItems_Parms parms;
//
//	if ( !pGetPromotionItems )
//		pGetPromotionItems = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetPromotionItems" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pGetPromotionItems, &parms, NULL );
//
//	*arrItems = parms.arrItems;
//}
//
//int UwGameManager::GetPromotionItemsCount ( int Level )
//{
//	static UFunction* pGetPromotionItemsCount = 0;
//	UwGameManager_execGetPromotionItemsCount_Parms parms;
//
//	if ( !pGetPromotionItemsCount )
//		pGetPromotionItemsCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetPromotionItemsCount" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pGetPromotionItemsCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::AddPromotionParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddPromotionParams = 0;
//	UwGameManager_execAddPromotionParams_Parms parms;
//
//	if ( !pAddPromotionParams )
//		pAddPromotionParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddPromotionParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddPromotionParams, &parms, NULL );
//
//}
//
//void UwGameManager::AddPromotionParam_NullData (  )
//{
//	static UFunction* pAddPromotionParam_NullData = 0;
//	UwGameManager_execAddPromotionParam_NullData_Parms parms;
//
//	if ( !pAddPromotionParam_NullData )
//		pAddPromotionParam_NullData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddPromotionParam_NullData" );
//
//	this->ProcessEvent ( pAddPromotionParam_NullData, &parms, NULL );
//
//}
//
//void UwGameManager::LoadPromotionParameters (  )
//{
//	static UFunction* pLoadPromotionParameters = 0;
//	UwGameManager_execLoadPromotionParameters_Parms parms;
//
//	if ( !pLoadPromotionParameters )
//		pLoadPromotionParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadPromotionParameters" );
//
//	this->ProcessEvent ( pLoadPromotionParameters, &parms, NULL );
//
//}
//
//void UwGameManager::AddClanLevelInfoParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddClanLevelInfoParams = 0;
//	UwGameManager_execAddClanLevelInfoParams_Parms parms;
//
//	if ( !pAddClanLevelInfoParams )
//		pAddClanLevelInfoParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddClanLevelInfoParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddClanLevelInfoParams, &parms, NULL );
//
//}
//
//void UwGameManager::AddClanLevelInfoParam_NullData (  )
//{
//	static UFunction* pAddClanLevelInfoParam_NullData = 0;
//	UwGameManager_execAddClanLevelInfoParam_NullData_Parms parms;
//
//	if ( !pAddClanLevelInfoParam_NullData )
//		pAddClanLevelInfoParam_NullData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddClanLevelInfoParam_NullData" );
//
//	this->ProcessEvent ( pAddClanLevelInfoParam_NullData, &parms, NULL );
//
//}
//
//void UwGameManager::LoadClanLevelInfoParams (  )
//{
//	static UFunction* pLoadClanLevelInfoParams = 0;
//	UwGameManager_execLoadClanLevelInfoParams_Parms parms;
//
//	if ( !pLoadClanLevelInfoParams )
//		pLoadClanLevelInfoParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadClanLevelInfoParams" );
//
//	this->ProcessEvent ( pLoadClanLevelInfoParams, &parms, NULL );
//
//}
//
//void UwGameManager::AddLevelInfoParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddLevelInfoParams = 0;
//	UwGameManager_execAddLevelInfoParams_Parms parms;
//
//	if ( !pAddLevelInfoParams )
//		pAddLevelInfoParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddLevelInfoParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddLevelInfoParams, &parms, NULL );
//
//}
//
//void UwGameManager::AddLevelInfoParam_NullData (  )
//{
//	static UFunction* pAddLevelInfoParam_NullData = 0;
//	UwGameManager_execAddLevelInfoParam_NullData_Parms parms;
//
//	if ( !pAddLevelInfoParam_NullData )
//		pAddLevelInfoParam_NullData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddLevelInfoParam_NullData" );
//
//	this->ProcessEvent ( pAddLevelInfoParam_NullData, &parms, NULL );
//
//}
//
//void UwGameManager::LoadLevelInfoParams (  )
//{
//	static UFunction* pLoadLevelInfoParams = 0;
//	UwGameManager_execLoadLevelInfoParams_Parms parms;
//
//	if ( !pLoadLevelInfoParams )
//		pLoadLevelInfoParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadLevelInfoParams" );
//
//	this->ProcessEvent ( pLoadLevelInfoParams, &parms, NULL );
//
//}
//
//class UwSkillBaseParam* UwGameManager::GetSkillParam ( int iSkillID )
//{
//	static UFunction* pGetSkillParam = 0;
//	UwGameManager_execGetSkillParam_Parms parms;
//
//	if ( !pGetSkillParam )
//		pGetSkillParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetSkillParam" );
//
//	parms.iSkillID = iSkillID;
//	this->ProcessEvent ( pGetSkillParam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::AddSkillParam_NullData (  )
//{
//	static UFunction* pAddSkillParam_NullData = 0;
//	UwGameManager_execAddSkillParam_NullData_Parms parms;
//
//	if ( !pAddSkillParam_NullData )
//		pAddSkillParam_NullData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddSkillParam_NullData" );
//
//	this->ProcessEvent ( pAddSkillParam_NullData, &parms, NULL );
//
//}
//
//void UwGameManager::AddSkillParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddSkillParams = 0;
//	UwGameManager_execAddSkillParams_Parms parms;
//
//	if ( !pAddSkillParams )
//		pAddSkillParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddSkillParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddSkillParams, &parms, NULL );
//
//}
//
//void UwGameManager::LoadSkillParameters (  )
//{
//	static UFunction* pLoadSkillParameters = 0;
//	UwGameManager_execLoadSkillParameters_Parms parms;
//
//	if ( !pLoadSkillParameters )
//		pLoadSkillParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadSkillParameters" );
//
//	this->ProcessEvent ( pLoadSkillParameters, &parms, NULL );
//
//}
//
//class UStaticMesh* UwGameManager::GetItemResourceStaticMesh ( int iItemID, bool b3rd, unsigned char byTeam, unsigned char byCase )
//{
//	static UFunction* pGetItemResourceStaticMesh = 0;
//	UwGameManager_execGetItemResourceStaticMesh_Parms parms;
//
//	if ( !pGetItemResourceStaticMesh )
//		pGetItemResourceStaticMesh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetItemResourceStaticMesh" );
//
//	parms.iItemID = iItemID;
//	parms.b3rd = b3rd;
//	parms.byTeam = byTeam;
//	parms.byCase = byCase;
//	this->ProcessEvent ( pGetItemResourceStaticMesh, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UMesh* UwGameManager::GetItemResourceMesh ( int iItemID, bool b3rd, unsigned char byTeam, unsigned char byCase )
//{
//	static UFunction* pGetItemResourceMesh = 0;
//	UwGameManager_execGetItemResourceMesh_Parms parms;
//
//	if ( !pGetItemResourceMesh )
//		pGetItemResourceMesh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetItemResourceMesh" );
//
//	parms.iItemID = iItemID;
//	parms.b3rd = b3rd;
//	parms.byTeam = byTeam;
//	parms.byCase = byCase;
//	this->ProcessEvent ( pGetItemResourceMesh, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::PrecacheItemResources ( class ALevelInfo* Level )
//{
//	static UFunction* pPrecacheItemResources = 0;
//	UwGameManager_execPrecacheItemResources_Parms parms;
//
//	if ( !pPrecacheItemResources )
//		pPrecacheItemResources = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.PrecacheItemResources" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pPrecacheItemResources, &parms, NULL );
//
//}
//
//class UwItemResourceParam* UwGameManager::GetItemResourceParam ( int iItemID )
//{
//	static UFunction* pGetItemResourceParam = 0;
//	UwGameManager_execGetItemResourceParam_Parms parms;
//
//	if ( !pGetItemResourceParam )
//		pGetItemResourceParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetItemResourceParam" );
//
//	parms.iItemID = iItemID;
//	this->ProcessEvent ( pGetItemResourceParam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::AddItemResourceParam_NullData (  )
//{
//	static UFunction* pAddItemResourceParam_NullData = 0;
//	UwGameManager_execAddItemResourceParam_NullData_Parms parms;
//
//	if ( !pAddItemResourceParam_NullData )
//		pAddItemResourceParam_NullData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddItemResourceParam_NullData" );
//
//	this->ProcessEvent ( pAddItemResourceParam_NullData, &parms, NULL );
//
//}
//
//void UwGameManager::AddItemResourceParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddItemResourceParams = 0;
//	UwGameManager_execAddItemResourceParams_Parms parms;
//
//	if ( !pAddItemResourceParams )
//		pAddItemResourceParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddItemResourceParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddItemResourceParams, &parms, NULL );
//
//}
//
//void UwGameManager::LoadItemResourceParams (  )
//{
//	static UFunction* pLoadItemResourceParams = 0;
//	UwGameManager_execLoadItemResourceParams_Parms parms;
//
//	if ( !pLoadItemResourceParams )
//		pLoadItemResourceParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadItemResourceParams" );
//
//	this->ProcessEvent ( pLoadItemResourceParams, &parms, NULL );
//
//}
//
//class UwItemBaseParam* UwGameManager::GetItemParam ( int iItemID )
//{
//	static UFunction* pGetItemParam = 0;
//	UwGameManager_execGetItemParam_Parms parms;
//
//	if ( !pGetItemParam )
//		pGetItemParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetItemParam" );
//
//	parms.iItemID = iItemID;
//	this->ProcessEvent ( pGetItemParam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::AddItemParam_NullData (  )
//{
//	static UFunction* pAddItemParam_NullData = 0;
//	UwGameManager_execAddItemParam_NullData_Parms parms;
//
//	if ( !pAddItemParam_NullData )
//		pAddItemParam_NullData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddItemParam_NullData" );
//
//	this->ProcessEvent ( pAddItemParam_NullData, &parms, NULL );
//
//}
//
//void UwGameManager::AddItemParams ( class UBTNetGameData* GameData )
//{
//	static UFunction* pAddItemParams = 0;
//	UwGameManager_execAddItemParams_Parms parms;
//
//	if ( !pAddItemParams )
//		pAddItemParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddItemParams" );
//
//	parms.GameData = GameData;
//	this->ProcessEvent ( pAddItemParams, &parms, NULL );
//
//}
//
//void UwGameManager::LoadItemParameters (  )
//{
//	static UFunction* pLoadItemParameters = 0;
//	UwGameManager_execLoadItemParameters_Parms parms;
//
//	if ( !pLoadItemParameters )
//		pLoadItemParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadItemParameters" );
//
//	this->ProcessEvent ( pLoadItemParameters, &parms, NULL );
//
//}
//
//void UwGameManager::eventDestroyScript (  )
//{
//	static UFunction* pDestroyScript = 0;
//	UwGameManager_eventDestroyScript_Parms parms;
//
//	if ( !pDestroyScript )
//		pDestroyScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.DestroyScript" );
//
//	this->ProcessEvent ( pDestroyScript, &parms, NULL );
//
//}
//
//bool UwGameManager::ContainsBadNicks ( struct FString S, struct FString* badword )
//{
//	static UFunction* pContainsBadNicks = 0;
//	UwGameManager_execContainsBadNicks_Parms parms;
//
//	if ( !pContainsBadNicks )
//		pContainsBadNicks = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ContainsBadNicks" );
//
//	parms.S = S;
//	this->ProcessEvent ( pContainsBadNicks, &parms, NULL );
//
//	*badword = parms.badword;
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::FilterBadWords ( struct FString* S )
//{
//	static UFunction* pFilterBadWords = 0;
//	UwGameManager_execFilterBadWords_Parms parms;
//
//	if ( !pFilterBadWords )
//		pFilterBadWords = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FilterBadWords" );
//
//	parms.S = *S;
//	this->ProcessEvent ( pFilterBadWords, &parms, NULL );
//
//	*S = parms.S;
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::ContainsBadWords ( struct FString S, struct FString* badword )
//{
//	static UFunction* pContainsBadWords = 0;
//	UwGameManager_execContainsBadWords_Parms parms;
//
//	if ( !pContainsBadWords )
//		pContainsBadWords = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ContainsBadWords" );
//
//	parms.S = S;
//	this->ProcessEvent ( pContainsBadWords, &parms, NULL );
//
//	*badword = parms.badword;
//	return parms.ReturnValue;
//}
//
//void UwGameManager::LoadBadwords (  )
//{
//	static UFunction* pLoadBadwords = 0;
//	UwGameManager_execLoadBadwords_Parms parms;
//
//	if ( !pLoadBadwords )
//		pLoadBadwords = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadBadwords" );
//
//	this->ProcessEvent ( pLoadBadwords, &parms, NULL );
//
//}
//
//void UwGameManager::LoadAlienGameInfo (  )
//{
//	static UFunction* pLoadAlienGameInfo = 0;
//	UwGameManager_execLoadAlienGameInfo_Parms parms;
//
//	if ( !pLoadAlienGameInfo )
//		pLoadAlienGameInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadAlienGameInfo" );
//
//	this->ProcessEvent ( pLoadAlienGameInfo, &parms, NULL );
//
//}
//
//int UwGameManager::GetDefenceGameRoundCount2 ( int Level, int MapID )
//{
//	static UFunction* pGetDefenceGameRoundCount2 = 0;
//	UwGameManager_execGetDefenceGameRoundCount2_Parms parms;
//
//	if ( !pGetDefenceGameRoundCount2 )
//		pGetDefenceGameRoundCount2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetDefenceGameRoundCount2" );
//
//	parms.Level = Level;
//	parms.MapID = MapID;
//	this->ProcessEvent ( pGetDefenceGameRoundCount2, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::GetDefenceGameBotGradeList2 ( int Level, int MapID, int Round, class TArray< int >* GradeList )
//{
//	static UFunction* pGetDefenceGameBotGradeList2 = 0;
//	UwGameManager_execGetDefenceGameBotGradeList2_Parms parms;
//
//	if ( !pGetDefenceGameBotGradeList2 )
//		pGetDefenceGameBotGradeList2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetDefenceGameBotGradeList2" );
//
//	parms.Level = Level;
//	parms.MapID = MapID;
//	parms.Round = Round;
//	this->ProcessEvent ( pGetDefenceGameBotGradeList2, &parms, NULL );
//
//	*GradeList = parms.GradeList;
//}
//
//void UwGameManager::GetDefenceGamePrams2 ( int Level, int MapID, int Round, class TArray< int >* DelayTime, class TArray< int >* RegenLoc, class TArray< int >* Grade, class TArray< int >* Unit )
//{
//	static UFunction* pGetDefenceGamePrams2 = 0;
//	UwGameManager_execGetDefenceGamePrams2_Parms parms;
//
//	if ( !pGetDefenceGamePrams2 )
//		pGetDefenceGamePrams2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetDefenceGamePrams2" );
//
//	parms.Level = Level;
//	parms.MapID = MapID;
//	parms.Round = Round;
//	this->ProcessEvent ( pGetDefenceGamePrams2, &parms, NULL );
//
//	*DelayTime = parms.DelayTime;
//	*RegenLoc = parms.RegenLoc;
//	*Grade = parms.Grade;
//	*Unit = parms.Unit;
//}
//
//void UwGameManager::LoadDefenceGameInfo (  )
//{
//	static UFunction* pLoadDefenceGameInfo = 0;
//	UwGameManager_execLoadDefenceGameInfo_Parms parms;
//
//	if ( !pLoadDefenceGameInfo )
//		pLoadDefenceGameInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadDefenceGameInfo" );
//
//	this->ProcessEvent ( pLoadDefenceGameInfo, &parms, NULL );
//
//}
//
//void UwGameManager::LoadClanMarkParameters (  )
//{
//	static UFunction* pLoadClanMarkParameters = 0;
//	UwGameManager_execLoadClanMarkParameters_Parms parms;
//
//	if ( !pLoadClanMarkParameters )
//		pLoadClanMarkParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadClanMarkParameters" );
//
//	this->ProcessEvent ( pLoadClanMarkParameters, &parms, NULL );
//
//}
//
//void UwGameManager::GetLevelDefenceGameParam ( int iLevel, class TArray< class UwDefenceGameParam* >* params )
//{
//	static UFunction* pGetLevelDefenceGameParam = 0;
//	UwGameManager_execGetLevelDefenceGameParam_Parms parms;
//
//	if ( !pGetLevelDefenceGameParam )
//		pGetLevelDefenceGameParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetLevelDefenceGameParam" );
//
//	parms.iLevel = iLevel;
//	this->ProcessEvent ( pGetLevelDefenceGameParam, &parms, NULL );
//
//	*params = parms.params;
//}
//
//void UwGameManager::SetLevelDefenceGameParam ( int iLevel, class TArray< class UwDefenceGameParam* > params )
//{
//	static UFunction* pSetLevelDefenceGameParam = 0;
//	UwGameManager_execSetLevelDefenceGameParam_Parms parms;
//
//	if ( !pSetLevelDefenceGameParam )
//		pSetLevelDefenceGameParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.SetLevelDefenceGameParam" );
//
//	parms.iLevel = iLevel;
//	parms.params = params;
//	this->ProcessEvent ( pSetLevelDefenceGameParam, &parms, NULL );
//
//}
//
//void UwGameManager::LoadNPCActionGroup (  )
//{
//	static UFunction* pLoadNPCActionGroup = 0;
//	UwGameManager_execLoadNPCActionGroup_Parms parms;
//
//	if ( !pLoadNPCActionGroup )
//		pLoadNPCActionGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadNPCActionGroup" );
//
//	this->ProcessEvent ( pLoadNPCActionGroup, &parms, NULL );
//
//}
//
//void UwGameManager::LoadNPCItemGroup (  )
//{
//	static UFunction* pLoadNPCItemGroup = 0;
//	UwGameManager_execLoadNPCItemGroup_Parms parms;
//
//	if ( !pLoadNPCItemGroup )
//		pLoadNPCItemGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadNPCItemGroup" );
//
//	this->ProcessEvent ( pLoadNPCItemGroup, &parms, NULL );
//
//}
//
//void UwGameManager::LoadNPCNameGroup (  )
//{
//	static UFunction* pLoadNPCNameGroup = 0;
//	UwGameManager_execLoadNPCNameGroup_Parms parms;
//
//	if ( !pLoadNPCNameGroup )
//		pLoadNPCNameGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadNPCNameGroup" );
//
//	this->ProcessEvent ( pLoadNPCNameGroup, &parms, NULL );
//
//}
//
//void UwGameManager::LoadNPC (  )
//{
//	static UFunction* pLoadNPC = 0;
//	UwGameManager_execLoadNPC_Parms parms;
//
//	if ( !pLoadNPC )
//		pLoadNPC = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadNPC" );
//
//	this->ProcessEvent ( pLoadNPC, &parms, NULL );
//
//}
//
//void UwGameManager::LoadNPCSpawn (  )
//{
//	static UFunction* pLoadNPCSpawn = 0;
//	UwGameManager_execLoadNPCSpawn_Parms parms;
//
//	if ( !pLoadNPCSpawn )
//		pLoadNPCSpawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadNPCSpawn" );
//
//	this->ProcessEvent ( pLoadNPCSpawn, &parms, NULL );
//
//}
//
//void UwGameManager::LoadLevelTextures (  )
//{
//	static UFunction* pLoadLevelTextures = 0;
//	UwGameManager_execLoadLevelTextures_Parms parms;
//
//	if ( !pLoadLevelTextures )
//		pLoadLevelTextures = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadLevelTextures" );
//
//	this->ProcessEvent ( pLoadLevelTextures, &parms, NULL );
//
//}
//
//void UwGameManager::eventInitPrecacheItems (  )
//{
//	static UFunction* pInitPrecacheItems = 0;
//	UwGameManager_eventInitPrecacheItems_Parms parms;
//
//	if ( !pInitPrecacheItems )
//		pInitPrecacheItems = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.InitPrecacheItems" );
//
//	this->ProcessEvent ( pInitPrecacheItems, &parms, NULL );
//
//}
//
//void UwGameManager::eventInitHK (  )
//{
//	static UFunction* pInitHK = 0;
//	UwGameManager_eventInitHK_Parms parms;
//
//	if ( !pInitHK )
//		pInitHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.InitHK" );
//
//	this->ProcessEvent ( pInitHK, &parms, NULL );
//
//}
//
//void UwGameManager::LoadWeaponCustomPartsParameters (  )
//{
//	static UFunction* pLoadWeaponCustomPartsParameters = 0;
//	UwGameManager_execLoadWeaponCustomPartsParameters_Parms parms;
//
//	if ( !pLoadWeaponCustomPartsParameters )
//		pLoadWeaponCustomPartsParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadWeaponCustomPartsParameters" );
//
//	this->ProcessEvent ( pLoadWeaponCustomPartsParameters, &parms, NULL );
//
//}
//
//void UwGameManager::LoadWeaponCustomInfoParameters (  )
//{
//	static UFunction* pLoadWeaponCustomInfoParameters = 0;
//	UwGameManager_execLoadWeaponCustomInfoParameters_Parms parms;
//
//	if ( !pLoadWeaponCustomInfoParameters )
//		pLoadWeaponCustomInfoParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadWeaponCustomInfoParameters" );
//
//	this->ProcessEvent ( pLoadWeaponCustomInfoParameters, &parms, NULL );
//
//}
//
//class UwWeaponCustomInfoParam* UwGameManager::GetWeaponCustomInfoParam ( int iInItemID )
//{
//	static UFunction* pGetWeaponCustomInfoParam = 0;
//	UwGameManager_execGetWeaponCustomInfoParam_Parms parms;
//
//	if ( !pGetWeaponCustomInfoParam )
//		pGetWeaponCustomInfoParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetWeaponCustomInfoParam" );
//
//	parms.iInItemID = iInItemID;
//	this->ProcessEvent ( pGetWeaponCustomInfoParam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwWeaponCustomPartsParam* UwGameManager::GetWeaponCustomPartsParamByUnionedPartID ( int iInUnionedPartID )
//{
//	static UFunction* pGetWeaponCustomPartsParamByUnionedPartID = 0;
//	UwGameManager_execGetWeaponCustomPartsParamByUnionedPartID_Parms parms;
//
//	if ( !pGetWeaponCustomPartsParamByUnionedPartID )
//		pGetWeaponCustomPartsParamByUnionedPartID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetWeaponCustomPartsParamByUnionedPartID" );
//
//	parms.iInUnionedPartID = iInUnionedPartID;
//	this->ProcessEvent ( pGetWeaponCustomPartsParamByUnionedPartID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwWeaponCustomPartsParam* UwGameManager::GetWeaponCustomPartsParamByItemID ( int iInItemID )
//{
//	static UFunction* pGetWeaponCustomPartsParamByItemID = 0;
//	UwGameManager_execGetWeaponCustomPartsParamByItemID_Parms parms;
//
//	if ( !pGetWeaponCustomPartsParamByItemID )
//		pGetWeaponCustomPartsParamByItemID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetWeaponCustomPartsParamByItemID" );
//
//	parms.iInItemID = iInItemID;
//	this->ProcessEvent ( pGetWeaponCustomPartsParamByItemID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::eventInitScript (  )
//{
//	static UFunction* pInitScript = 0;
//	UwGameManager_eventInitScript_Parms parms;
//
//	if ( !pInitScript )
//		pInitScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.InitScript" );
//
//	this->ProcessEvent ( pInitScript, &parms, NULL );
//
//}
//
//int UwGameManager::GetWeaponCustomPartsIndex ( int iUnionedPartID )
//{
//	static UFunction* pGetWeaponCustomPartsIndex = 0;
//	UwGameManager_execGetWeaponCustomPartsIndex_Parms parms;
//
//	if ( !pGetWeaponCustomPartsIndex )
//		pGetWeaponCustomPartsIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetWeaponCustomPartsIndex" );
//
//	parms.iUnionedPartID = iUnionedPartID;
//	this->ProcessEvent ( pGetWeaponCustomPartsIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::SetWeaponCustomPartsIndex ( int iUnionedPartID, int iArrayIndex )
//{
//	static UFunction* pSetWeaponCustomPartsIndex = 0;
//	UwGameManager_execSetWeaponCustomPartsIndex_Parms parms;
//
//	if ( !pSetWeaponCustomPartsIndex )
//		pSetWeaponCustomPartsIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.SetWeaponCustomPartsIndex" );
//
//	parms.iUnionedPartID = iUnionedPartID;
//	parms.iArrayIndex = iArrayIndex;
//	this->ProcessEvent ( pSetWeaponCustomPartsIndex, &parms, NULL );
//
//}
//
//int UwGameManager::GetWeaponCustomInfoIndex ( int iItemIndex )
//{
//	static UFunction* pGetWeaponCustomInfoIndex = 0;
//	UwGameManager_execGetWeaponCustomInfoIndex_Parms parms;
//
//	if ( !pGetWeaponCustomInfoIndex )
//		pGetWeaponCustomInfoIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetWeaponCustomInfoIndex" );
//
//	parms.iItemIndex = iItemIndex;
//	this->ProcessEvent ( pGetWeaponCustomInfoIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::SetWeaponCustomInfoIndex ( int iItemIndex, int iArrayIndex )
//{
//	static UFunction* pSetWeaponCustomInfoIndex = 0;
//	UwGameManager_execSetWeaponCustomInfoIndex_Parms parms;
//
//	if ( !pSetWeaponCustomInfoIndex )
//		pSetWeaponCustomInfoIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.SetWeaponCustomInfoIndex" );
//
//	parms.iItemIndex = iItemIndex;
//	parms.iArrayIndex = iArrayIndex;
//	this->ProcessEvent ( pSetWeaponCustomInfoIndex, &parms, NULL );
//
//}
//
//int UwGameManager::GetPartsGroupArrayIndex ( int iPartsGroupIndex )
//{
//	static UFunction* pGetPartsGroupArrayIndex = 0;
//	UwGameManager_execGetPartsGroupArrayIndex_Parms parms;
//
//	if ( !pGetPartsGroupArrayIndex )
//		pGetPartsGroupArrayIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetPartsGroupArrayIndex" );
//
//	parms.iPartsGroupIndex = iPartsGroupIndex;
//	this->ProcessEvent ( pGetPartsGroupArrayIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::SetPartsGroupIndex ( int iPartsGroupIndex, int iArrayIndex )
//{
//	static UFunction* pSetPartsGroupIndex = 0;
//	UwGameManager_execSetPartsGroupIndex_Parms parms;
//
//	if ( !pSetPartsGroupIndex )
//		pSetPartsGroupIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.SetPartsGroupIndex" );
//
//	parms.iPartsGroupIndex = iPartsGroupIndex;
//	parms.iArrayIndex = iArrayIndex;
//	this->ProcessEvent ( pSetPartsGroupIndex, &parms, NULL );
//
//}
//
//int UwGameManager::GetSkillArrayIndex ( int iSkillIndex )
//{
//	static UFunction* pGetSkillArrayIndex = 0;
//	UwGameManager_execGetSkillArrayIndex_Parms parms;
//
//	if ( !pGetSkillArrayIndex )
//		pGetSkillArrayIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetSkillArrayIndex" );
//
//	parms.iSkillIndex = iSkillIndex;
//	this->ProcessEvent ( pGetSkillArrayIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::SetSkillIndex ( int iSkillIndex, int iArrayIndex )
//{
//	static UFunction* pSetSkillIndex = 0;
//	UwGameManager_execSetSkillIndex_Parms parms;
//
//	if ( !pSetSkillIndex )
//		pSetSkillIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.SetSkillIndex" );
//
//	parms.iSkillIndex = iSkillIndex;
//	parms.iArrayIndex = iArrayIndex;
//	this->ProcessEvent ( pSetSkillIndex, &parms, NULL );
//
//}
//
//int UwGameManager::GetItemArrayIndex ( int iItemIndex )
//{
//	static UFunction* pGetItemArrayIndex = 0;
//	UwGameManager_execGetItemArrayIndex_Parms parms;
//
//	if ( !pGetItemArrayIndex )
//		pGetItemArrayIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetItemArrayIndex" );
//
//	parms.iItemIndex = iItemIndex;
//	this->ProcessEvent ( pGetItemArrayIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::SetItemIndex ( int iItemIndex, int iArrayIndex )
//{
//	static UFunction* pSetItemIndex = 0;
//	UwGameManager_execSetItemIndex_Parms parms;
//
//	if ( !pSetItemIndex )
//		pSetItemIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.SetItemIndex" );
//
//	parms.iItemIndex = iItemIndex;
//	parms.iArrayIndex = iArrayIndex;
//	this->ProcessEvent ( pSetItemIndex, &parms, NULL );
//
//}
//
//struct FBtrDouble UwGameManager::GetSubWeaponUniqueID (  )
//{
//	static UFunction* pGetSubWeaponUniqueID = 0;
//	UwGameManager_execGetSubWeaponUniqueID_Parms parms;
//
//	if ( !pGetSubWeaponUniqueID )
//		pGetSubWeaponUniqueID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetSubWeaponUniqueID" );
//
//	this->ProcessEvent ( pGetSubWeaponUniqueID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FBtrDouble UwGameManager::GetMainWeaponUniqueID (  )
//{
//	static UFunction* pGetMainWeaponUniqueID = 0;
//	UwGameManager_execGetMainWeaponUniqueID_Parms parms;
//
//	if ( !pGetMainWeaponUniqueID )
//		pGetMainWeaponUniqueID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetMainWeaponUniqueID" );
//
//	this->ProcessEvent ( pGetMainWeaponUniqueID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetSubWeaponID (  )
//{
//	static UFunction* pGetSubWeaponID = 0;
//	UwGameManager_execGetSubWeaponID_Parms parms;
//
//	if ( !pGetSubWeaponID )
//		pGetSubWeaponID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetSubWeaponID" );
//
//	this->ProcessEvent ( pGetSubWeaponID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetMainWeaponID (  )
//{
//	static UFunction* pGetMainWeaponID = 0;
//	UwGameManager_execGetMainWeaponID_Parms parms;
//
//	if ( !pGetMainWeaponID )
//		pGetMainWeaponID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetMainWeaponID" );
//
//	this->ProcessEvent ( pGetMainWeaponID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::ClearInstanceItem (  )
//{
//	static UFunction* pClearInstanceItem = 0;
//	UwGameManager_execClearInstanceItem_Parms parms;
//
//	if ( !pClearInstanceItem )
//		pClearInstanceItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ClearInstanceItem" );
//
//	this->ProcessEvent ( pClearInstanceItem, &parms, NULL );
//
//}
//
//int UwGameManager::FindInstanceItemIDBySlotPos ( int SlotPos )
//{
//	static UFunction* pFindInstanceItemIDBySlotPos = 0;
//	UwGameManager_execFindInstanceItemIDBySlotPos_Parms parms;
//
//	if ( !pFindInstanceItemIDBySlotPos )
//		pFindInstanceItemIDBySlotPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindInstanceItemIDBySlotPos" );
//
//	parms.SlotPos = SlotPos;
//	this->ProcessEvent ( pFindInstanceItemIDBySlotPos, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwItemBoxInstanceHK* UwGameManager::FindInstanceItemBySlotPos ( int SlotPos )
//{
//	static UFunction* pFindInstanceItemBySlotPos = 0;
//	UwGameManager_execFindInstanceItemBySlotPos_Parms parms;
//
//	if ( !pFindInstanceItemBySlotPos )
//		pFindInstanceItemBySlotPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindInstanceItemBySlotPos" );
//
//	parms.SlotPos = SlotPos;
//	this->ProcessEvent ( pFindInstanceItemBySlotPos, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::FindInstanceItemReturnIndexByUniqueSkillID ( int UniqueSkillID )
//{
//	static UFunction* pFindInstanceItemReturnIndexByUniqueSkillID = 0;
//	UwGameManager_execFindInstanceItemReturnIndexByUniqueSkillID_Parms parms;
//
//	if ( !pFindInstanceItemReturnIndexByUniqueSkillID )
//		pFindInstanceItemReturnIndexByUniqueSkillID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindInstanceItemReturnIndexByUniqueSkillID" );
//
//	parms.UniqueSkillID = UniqueSkillID;
//	this->ProcessEvent ( pFindInstanceItemReturnIndexByUniqueSkillID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::FindInstanceItemReturnIndex ( struct FBtrDouble UniqueID )
//{
//	static UFunction* pFindInstanceItemReturnIndex = 0;
//	UwGameManager_execFindInstanceItemReturnIndex_Parms parms;
//
//	if ( !pFindInstanceItemReturnIndex )
//		pFindInstanceItemReturnIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindInstanceItemReturnIndex" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pFindInstanceItemReturnIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::RemoveInstanceItemByUniqueSkillID ( int UniqueSkillID )
//{
//	static UFunction* pRemoveInstanceItemByUniqueSkillID = 0;
//	UwGameManager_execRemoveInstanceItemByUniqueSkillID_Parms parms;
//
//	if ( !pRemoveInstanceItemByUniqueSkillID )
//		pRemoveInstanceItemByUniqueSkillID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.RemoveInstanceItemByUniqueSkillID" );
//
//	parms.UniqueSkillID = UniqueSkillID;
//	this->ProcessEvent ( pRemoveInstanceItemByUniqueSkillID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::RemoveInstanceItem ( struct FBtrDouble UniqueID )
//{
//	static UFunction* pRemoveInstanceItem = 0;
//	UwGameManager_execRemoveInstanceItem_Parms parms;
//
//	if ( !pRemoveInstanceItem )
//		pRemoveInstanceItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.RemoveInstanceItem" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pRemoveInstanceItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::FindInstanceSkillItemReturnIndex ( int UniqueID )
//{
//	static UFunction* pFindInstanceSkillItemReturnIndex = 0;
//	UwGameManager_execFindInstanceSkillItemReturnIndex_Parms parms;
//
//	if ( !pFindInstanceSkillItemReturnIndex )
//		pFindInstanceSkillItemReturnIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindInstanceSkillItemReturnIndex" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pFindInstanceSkillItemReturnIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwItemBoxInstanceHK* UwGameManager::FindFirstInstanceItemByItemID ( int ItemID )
//{
//	static UFunction* pFindFirstInstanceItemByItemID = 0;
//	UwGameManager_execFindFirstInstanceItemByItemID_Parms parms;
//
//	if ( !pFindFirstInstanceItemByItemID )
//		pFindFirstInstanceItemByItemID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindFirstInstanceItemByItemID" );
//
//	parms.ItemID = ItemID;
//	this->ProcessEvent ( pFindFirstInstanceItemByItemID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwItemBoxInstanceHK* UwGameManager::FindInstanceSkillItem ( int UniqueID )
//{
//	static UFunction* pFindInstanceSkillItem = 0;
//	UwGameManager_execFindInstanceSkillItem_Parms parms;
//
//	if ( !pFindInstanceSkillItem )
//		pFindInstanceSkillItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindInstanceSkillItem" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pFindInstanceSkillItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwItemBoxInstanceHK* UwGameManager::FindInstanceItemSameWeapon ( int ItemID, int PartID )
//{
//	static UFunction* pFindInstanceItemSameWeapon = 0;
//	UwGameManager_execFindInstanceItemSameWeapon_Parms parms;
//
//	if ( !pFindInstanceItemSameWeapon )
//		pFindInstanceItemSameWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindInstanceItemSameWeapon" );
//
//	parms.ItemID = ItemID;
//	parms.PartID = PartID;
//	this->ProcessEvent ( pFindInstanceItemSameWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwItemBoxInstanceHK* UwGameManager::FindInstanceItem ( struct FBtrDouble UniqueID )
//{
//	static UFunction* pFindInstanceItem = 0;
//	UwGameManager_execFindInstanceItem_Parms parms;
//
//	if ( !pFindInstanceItem )
//		pFindInstanceItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindInstanceItem" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pFindInstanceItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::ChangeInstance_SkillSlotPos ( int SkillUniqueID, int SlotPos )
//{
//	static UFunction* pChangeInstance_SkillSlotPos = 0;
//	UwGameManager_execChangeInstance_SkillSlotPos_Parms parms;
//
//	if ( !pChangeInstance_SkillSlotPos )
//		pChangeInstance_SkillSlotPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ChangeInstance_SkillSlotPos" );
//
//	parms.SkillUniqueID = SkillUniqueID;
//	parms.SlotPos = SlotPos;
//	this->ProcessEvent ( pChangeInstance_SkillSlotPos, &parms, NULL );
//
//}
//
//bool UwGameManager::ChangeInstance_ItemSlotPos ( struct FBtrDouble UniqueID, int SlotPos )
//{
//	static UFunction* pChangeInstance_ItemSlotPos = 0;
//	UwGameManager_execChangeInstance_ItemSlotPos_Parms parms;
//
//	if ( !pChangeInstance_ItemSlotPos )
//		pChangeInstance_ItemSlotPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ChangeInstance_ItemSlotPos" );
//
//	parms.UniqueID = UniqueID;
//	parms.SlotPos = SlotPos;
//	this->ProcessEvent ( pChangeInstance_ItemSlotPos, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::ChangeInstance_StackCount ( struct FBtrDouble UniqueID, int StackCount )
//{
//	static UFunction* pChangeInstance_StackCount = 0;
//	UwGameManager_execChangeInstance_StackCount_Parms parms;
//
//	if ( !pChangeInstance_StackCount )
//		pChangeInstance_StackCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ChangeInstance_StackCount" );
//
//	parms.UniqueID = UniqueID;
//	parms.StackCount = StackCount;
//	this->ProcessEvent ( pChangeInstance_StackCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::ChangeInstance_ItemReduceDurability ( struct FBtrDouble UniqueID, int dur )
//{
//	static UFunction* pChangeInstance_ItemReduceDurability = 0;
//	UwGameManager_execChangeInstance_ItemReduceDurability_Parms parms;
//
//	if ( !pChangeInstance_ItemReduceDurability )
//		pChangeInstance_ItemReduceDurability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ChangeInstance_ItemReduceDurability" );
//
//	parms.UniqueID = UniqueID;
//	parms.dur = dur;
//	this->ProcessEvent ( pChangeInstance_ItemReduceDurability, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::ChangeInstance_ItemDamageDegree ( struct FBtrDouble UniqueID, int dd )
//{
//	static UFunction* pChangeInstance_ItemDamageDegree = 0;
//	UwGameManager_execChangeInstance_ItemDamageDegree_Parms parms;
//
//	if ( !pChangeInstance_ItemDamageDegree )
//		pChangeInstance_ItemDamageDegree = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ChangeInstance_ItemDamageDegree" );
//
//	parms.UniqueID = UniqueID;
//	parms.dd = dd;
//	this->ProcessEvent ( pChangeInstance_ItemDamageDegree, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::ChangeInstance_ItemDurability ( struct FBtrDouble UniqueID, int dur )
//{
//	static UFunction* pChangeInstance_ItemDurability = 0;
//	UwGameManager_execChangeInstance_ItemDurability_Parms parms;
//
//	if ( !pChangeInstance_ItemDurability )
//		pChangeInstance_ItemDurability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ChangeInstance_ItemDurability" );
//
//	parms.UniqueID = UniqueID;
//	parms.dur = dur;
//	this->ProcessEvent ( pChangeInstance_ItemDurability, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::ChangeInstance_DefaultWeapon ( int SlotPos )
//{
//	static UFunction* pChangeInstance_DefaultWeapon = 0;
//	UwGameManager_execChangeInstance_DefaultWeapon_Parms parms;
//
//	if ( !pChangeInstance_DefaultWeapon )
//		pChangeInstance_DefaultWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ChangeInstance_DefaultWeapon" );
//
//	parms.SlotPos = SlotPos;
//	this->ProcessEvent ( pChangeInstance_DefaultWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::ChangeInstance_ItemLeftTime ( struct FBtrDouble CurrentTime )
//{
//	static UFunction* pChangeInstance_ItemLeftTime = 0;
//	UwGameManager_execChangeInstance_ItemLeftTime_Parms parms;
//
//	if ( !pChangeInstance_ItemLeftTime )
//		pChangeInstance_ItemLeftTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ChangeInstance_ItemLeftTime" );
//
//	parms.CurrentTime = CurrentTime;
//	this->ProcessEvent ( pChangeInstance_ItemLeftTime, &parms, NULL );
//
//}
//
//bool UwGameManager::AddInstanceItem ( class UwItemBoxInstanceHK* Item )
//{
//	static UFunction* pAddInstanceItem = 0;
//	UwGameManager_execAddInstanceItem_Parms parms;
//
//	if ( !pAddInstanceItem )
//		pAddInstanceItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddInstanceItem" );
//
//	parms.Item = Item;
//	this->ProcessEvent ( pAddInstanceItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::AddCashItem ( struct FString strEndDate, class UwItemBoxHK** ItemInfo, class UwItemBoxInstanceHK** instanceInfo )
//{
//	static UFunction* pAddCashItem = 0;
//	UwGameManager_execAddCashItem_Parms parms;
//
//	if ( !pAddCashItem )
//		pAddCashItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddCashItem" );
//
//	parms.strEndDate = strEndDate;
//	this->ProcessEvent ( pAddCashItem, &parms, NULL );
//
//	*ItemInfo = parms.ItemInfo;
//	*instanceInfo = parms.instanceInfo;
//	return parms.ReturnValue;
//}
//
//class UwItemBoxInstanceHK* UwGameManager::AddInstanceItemByParameter ( int ItemID, struct FBtrDouble UniqueID, int UniqueSkillID, int SlotPos, int ItemState, int Durability, int PartID, int PaintID, int StackCount, int DamageDegree, struct FBtrDouble UntilTime, bool bStackAdd, int TradeCount )
//{
//	static UFunction* pAddInstanceItemByParameter = 0;
//	UwGameManager_execAddInstanceItemByParameter_Parms parms;
//
//	if ( !pAddInstanceItemByParameter )
//		pAddInstanceItemByParameter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddInstanceItemByParameter" );
//
//	parms.ItemID = ItemID;
//	parms.UniqueID = UniqueID;
//	parms.UniqueSkillID = UniqueSkillID;
//	parms.SlotPos = SlotPos;
//	parms.ItemState = ItemState;
//	parms.Durability = Durability;
//	parms.PartID = PartID;
//	parms.PaintID = PaintID;
//	parms.StackCount = StackCount;
//	parms.DamageDegree = DamageDegree;
//	parms.UntilTime = UntilTime;
//	parms.bStackAdd = bStackAdd;
//	parms.TradeCount = TradeCount;
//	this->ProcessEvent ( pAddInstanceItemByParameter, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::AddInstanceSkillItemFromSkillBoxList (  )
//{
//	static UFunction* pAddInstanceSkillItemFromSkillBoxList = 0;
//	UwGameManager_execAddInstanceSkillItemFromSkillBoxList_Parms parms;
//
//	if ( !pAddInstanceSkillItemFromSkillBoxList )
//		pAddInstanceSkillItemFromSkillBoxList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddInstanceSkillItemFromSkillBoxList" );
//
//	this->ProcessEvent ( pAddInstanceSkillItemFromSkillBoxList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::FindUIItemReturnIndex ( int ItemID )
//{
//	static UFunction* pFindUIItemReturnIndex = 0;
//	UwGameManager_execFindUIItemReturnIndex_Parms parms;
//
//	if ( !pFindUIItemReturnIndex )
//		pFindUIItemReturnIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindUIItemReturnIndex" );
//
//	parms.ItemID = ItemID;
//	this->ProcessEvent ( pFindUIItemReturnIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwItemBoxHK* UwGameManager::FindUIItem ( int ItemID )
//{
//	static UFunction* pFindUIItem = 0;
//	UwGameManager_execFindUIItem_Parms parms;
//
//	if ( !pFindUIItem )
//		pFindUIItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindUIItem" );
//
//	parms.ItemID = ItemID;
//	this->ProcessEvent ( pFindUIItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::AddUIItem ( class UwItemBoxHK* Item )
//{
//	static UFunction* pAddUIItem = 0;
//	UwGameManager_execAddUIItem_Parms parms;
//
//	if ( !pAddUIItem )
//		pAddUIItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddUIItem" );
//
//	parms.Item = Item;
//	this->ProcessEvent ( pAddUIItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::CompareLE_UIShowItemLists ( class UwItemBoxHK* L, class UwItemBoxHK* R )
//{
//	static UFunction* pCompareLE_UIShowItemLists = 0;
//	UwGameManager_execCompareLE_UIShowItemLists_Parms parms;
//
//	if ( !pCompareLE_UIShowItemLists )
//		pCompareLE_UIShowItemLists = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.CompareLE_UIShowItemLists" );
//
//	parms.L = L;
//	parms.R = R;
//	this->ProcessEvent ( pCompareLE_UIShowItemLists, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::SetQuickSlotBox_Skill ( int DispOrder, int SlotPos, int SkillID, int UniqueSkillID )
//{
//	static UFunction* pSetQuickSlotBox_Skill = 0;
//	UwGameManager_execSetQuickSlotBox_Skill_Parms parms;
//
//	if ( !pSetQuickSlotBox_Skill )
//		pSetQuickSlotBox_Skill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.SetQuickSlotBox_Skill" );
//
//	parms.DispOrder = DispOrder;
//	parms.SlotPos = SlotPos;
//	parms.SkillID = SkillID;
//	parms.UniqueSkillID = UniqueSkillID;
//	this->ProcessEvent ( pSetQuickSlotBox_Skill, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::SetQuickSlotBox_Item ( int DispOrder, int SlotPos, int ItemID, struct FBtrDouble UniqueID )
//{
//	static UFunction* pSetQuickSlotBox_Item = 0;
//	UwGameManager_execSetQuickSlotBox_Item_Parms parms;
//
//	if ( !pSetQuickSlotBox_Item )
//		pSetQuickSlotBox_Item = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.SetQuickSlotBox_Item" );
//
//	parms.DispOrder = DispOrder;
//	parms.SlotPos = SlotPos;
//	parms.ItemID = ItemID;
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pSetQuickSlotBox_Item, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::RemoveQuickSlotItem ( struct FBtrDouble UniqueID )
//{
//	static UFunction* pRemoveQuickSlotItem = 0;
//	UwGameManager_execRemoveQuickSlotItem_Parms parms;
//
//	if ( !pRemoveQuickSlotItem )
//		pRemoveQuickSlotItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.RemoveQuickSlotItem" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pRemoveQuickSlotItem, &parms, NULL );
//
//}
//
//bool UwGameManager::SetQuickSlotBox_ID ( int DispOrder, int QuickSlotID )
//{
//	static UFunction* pSetQuickSlotBox_ID = 0;
//	UwGameManager_execSetQuickSlotBox_ID_Parms parms;
//
//	if ( !pSetQuickSlotBox_ID )
//		pSetQuickSlotBox_ID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.SetQuickSlotBox_ID" );
//
//	parms.DispOrder = DispOrder;
//	parms.QuickSlotID = QuickSlotID;
//	this->ProcessEvent ( pSetQuickSlotBox_ID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::SetQuickSlotBox_Name ( int DispOrder, struct FString QSName )
//{
//	static UFunction* pSetQuickSlotBox_Name = 0;
//	UwGameManager_execSetQuickSlotBox_Name_Parms parms;
//
//	if ( !pSetQuickSlotBox_Name )
//		pSetQuickSlotBox_Name = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.SetQuickSlotBox_Name" );
//
//	parms.DispOrder = DispOrder;
//	parms.QSName = QSName;
//	this->ProcessEvent ( pSetQuickSlotBox_Name, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::AllocateQuickSlotBoxList ( int Len )
//{
//	static UFunction* pAllocateQuickSlotBoxList = 0;
//	UwGameManager_execAllocateQuickSlotBoxList_Parms parms;
//
//	if ( !pAllocateQuickSlotBoxList )
//		pAllocateQuickSlotBoxList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AllocateQuickSlotBoxList" );
//
//	parms.Len = Len;
//	this->ProcessEvent ( pAllocateQuickSlotBoxList, &parms, NULL );
//
//}
//
//void UwGameManager::ClearQuickSlotBoxList (  )
//{
//	static UFunction* pClearQuickSlotBoxList = 0;
//	UwGameManager_execClearQuickSlotBoxList_Parms parms;
//
//	if ( !pClearQuickSlotBoxList )
//		pClearQuickSlotBoxList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ClearQuickSlotBoxList" );
//
//	this->ProcessEvent ( pClearQuickSlotBoxList, &parms, NULL );
//
//}
//
//void UwGameManager::ReplaceQuickSkillSlotItem ( int SkillID, int UniqueSkillID )
//{
//	static UFunction* pReplaceQuickSkillSlotItem = 0;
//	UwGameManager_execReplaceQuickSkillSlotItem_Parms parms;
//
//	if ( !pReplaceQuickSkillSlotItem )
//		pReplaceQuickSkillSlotItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ReplaceQuickSkillSlotItem" );
//
//	parms.SkillID = SkillID;
//	parms.UniqueSkillID = UniqueSkillID;
//	this->ProcessEvent ( pReplaceQuickSkillSlotItem, &parms, NULL );
//
//}
//
//bool UwGameManager::RemoveQuickSlotBoxSkillItem ( int UniqueID )
//{
//	static UFunction* pRemoveQuickSlotBoxSkillItem = 0;
//	UwGameManager_execRemoveQuickSlotBoxSkillItem_Parms parms;
//
//	if ( !pRemoveQuickSlotBoxSkillItem )
//		pRemoveQuickSlotBoxSkillItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.RemoveQuickSlotBoxSkillItem" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pRemoveQuickSlotBoxSkillItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< int > UwGameManager::GetQuickSlotIndexOfBoxSkillItem ( int UniqueSkillID )
//{
//	static UFunction* pGetQuickSlotIndexOfBoxSkillItem = 0;
//	UwGameManager_execGetQuickSlotIndexOfBoxSkillItem_Parms parms;
//
//	if ( !pGetQuickSlotIndexOfBoxSkillItem )
//		pGetQuickSlotIndexOfBoxSkillItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetQuickSlotIndexOfBoxSkillItem" );
//
//	parms.UniqueSkillID = UniqueSkillID;
//	this->ProcessEvent ( pGetQuickSlotIndexOfBoxSkillItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::IsQuickSlotBoxSkillItem ( int UniqueSkillID )
//{
//	static UFunction* pIsQuickSlotBoxSkillItem = 0;
//	UwGameManager_execIsQuickSlotBoxSkillItem_Parms parms;
//
//	if ( !pIsQuickSlotBoxSkillItem )
//		pIsQuickSlotBoxSkillItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.IsQuickSlotBoxSkillItem" );
//
//	parms.UniqueSkillID = UniqueSkillID;
//	this->ProcessEvent ( pIsQuickSlotBoxSkillItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::ReplaceQuickSlotBoxItem ( struct FBtrDouble OldUniqueID, int ItemID, struct FBtrDouble NewUniqueID )
//{
//	static UFunction* pReplaceQuickSlotBoxItem = 0;
//	UwGameManager_execReplaceQuickSlotBoxItem_Parms parms;
//
//	if ( !pReplaceQuickSlotBoxItem )
//		pReplaceQuickSlotBoxItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ReplaceQuickSlotBoxItem" );
//
//	parms.OldUniqueID = OldUniqueID;
//	parms.ItemID = ItemID;
//	parms.NewUniqueID = NewUniqueID;
//	this->ProcessEvent ( pReplaceQuickSlotBoxItem, &parms, NULL );
//
//}
//
//int UwGameManager::GetQuickSlotIndexOfBoxItem ( struct FBtrDouble UniqueID )
//{
//	static UFunction* pGetQuickSlotIndexOfBoxItem = 0;
//	UwGameManager_execGetQuickSlotIndexOfBoxItem_Parms parms;
//
//	if ( !pGetQuickSlotIndexOfBoxItem )
//		pGetQuickSlotIndexOfBoxItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetQuickSlotIndexOfBoxItem" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pGetQuickSlotIndexOfBoxItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::IsQuickSlotBoxItem ( struct FBtrDouble UniqueID )
//{
//	static UFunction* pIsQuickSlotBoxItem = 0;
//	UwGameManager_execIsQuickSlotBoxItem_Parms parms;
//
//	if ( !pIsQuickSlotBoxItem )
//		pIsQuickSlotBoxItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.IsQuickSlotBoxItem" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pIsQuickSlotBoxItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::RemoveQuickSlotBoxItem ( struct FBtrDouble UniqueID )
//{
//	static UFunction* pRemoveQuickSlotBoxItem = 0;
//	UwGameManager_execRemoveQuickSlotBoxItem_Parms parms;
//
//	if ( !pRemoveQuickSlotBoxItem )
//		pRemoveQuickSlotBoxItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.RemoveQuickSlotBoxItem" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pRemoveQuickSlotBoxItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::AddUISkillBox ( unsigned char SlotPos, int SkillID, int UniqueSkillID, struct FBtrDouble UntilTime )
//{
//	static UFunction* pAddUISkillBox = 0;
//	UwGameManager_execAddUISkillBox_Parms parms;
//
//	if ( !pAddUISkillBox )
//		pAddUISkillBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddUISkillBox" );
//
//	parms.SlotPos = SlotPos;
//	parms.SkillID = SkillID;
//	parms.UniqueSkillID = UniqueSkillID;
//	parms.UntilTime = UntilTime;
//	this->ProcessEvent ( pAddUISkillBox, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::ChangeSkillBox_SlotPos ( int SkillUniqueID, int SlotPos )
//{
//	static UFunction* pChangeSkillBox_SlotPos = 0;
//	UwGameManager_execChangeSkillBox_SlotPos_Parms parms;
//
//	if ( !pChangeSkillBox_SlotPos )
//		pChangeSkillBox_SlotPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ChangeSkillBox_SlotPos" );
//
//	parms.SkillUniqueID = SkillUniqueID;
//	parms.SlotPos = SlotPos;
//	this->ProcessEvent ( pChangeSkillBox_SlotPos, &parms, NULL );
//
//}
//
//class UwSkillBoxHK* UwGameManager::FindSkillBoxBySlotPos ( int SlotPos )
//{
//	static UFunction* pFindSkillBoxBySlotPos = 0;
//	UwGameManager_execFindSkillBoxBySlotPos_Parms parms;
//
//	if ( !pFindSkillBoxBySlotPos )
//		pFindSkillBoxBySlotPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindSkillBoxBySlotPos" );
//
//	parms.SlotPos = SlotPos;
//	this->ProcessEvent ( pFindSkillBoxBySlotPos, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwSkillBoxHK* UwGameManager::FindSkillBox ( int UniqueSkillID )
//{
//	static UFunction* pFindSkillBox = 0;
//	UwGameManager_execFindSkillBox_Parms parms;
//
//	if ( !pFindSkillBox )
//		pFindSkillBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.FindSkillBox" );
//
//	parms.UniqueSkillID = UniqueSkillID;
//	this->ProcessEvent ( pFindSkillBox, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::ClearSkillBoxList (  )
//{
//	static UFunction* pClearSkillBoxList = 0;
//	UwGameManager_execClearSkillBoxList_Parms parms;
//
//	if ( !pClearSkillBoxList )
//		pClearSkillBoxList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ClearSkillBoxList" );
//
//	this->ProcessEvent ( pClearSkillBoxList, &parms, NULL );
//
//}
//
//void UwGameManager::LoadUILists (  )
//{
//	static UFunction* pLoadUILists = 0;
//	UwGameManager_execLoadUILists_Parms parms;
//
//	if ( !pLoadUILists )
//		pLoadUILists = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LoadUILists" );
//
//	this->ProcessEvent ( pLoadUILists, &parms, NULL );
//
//}
//
//int UwGameManager::IsEnableRemovePart ( class UwItemBaseParam* Inip, unsigned char InType )
//{
//	static UFunction* pIsEnableRemovePart = 0;
//	UwGameManager_execIsEnableRemovePart_Parms parms;
//
//	if ( !pIsEnableRemovePart )
//		pIsEnableRemovePart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.IsEnableRemovePart" );
//
//	parms.Inip = Inip;
//	parms.InType = InType;
//	this->ProcessEvent ( pIsEnableRemovePart, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::IsUsablePartItem ( int iItemID, int iPartsArrayIndex )
//{
//	static UFunction* pIsUsablePartItem = 0;
//	UwGameManager_execIsUsablePartItem_Parms parms;
//
//	if ( !pIsUsablePartItem )
//		pIsUsablePartItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.IsUsablePartItem" );
//
//	parms.iItemID = iItemID;
//	parms.iPartsArrayIndex = iPartsArrayIndex;
//	this->ProcessEvent ( pIsUsablePartItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::IsExistShopItemList ( int iItemID )
//{
//	static UFunction* pIsExistShopItemList = 0;
//	UwGameManager_execIsExistShopItemList_Parms parms;
//
//	if ( !pIsExistShopItemList )
//		pIsExistShopItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.IsExistShopItemList" );
//
//	parms.iItemID = iItemID;
//	this->ProcessEvent ( pIsExistShopItemList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameManager::GetClanLevelMarkInfo ( struct FString ClanName, int* ClanPattern, int* ClanBG, int* ClanBL )
//{
//	static UFunction* pGetClanLevelMarkInfo = 0;
//	UwGameManager_execGetClanLevelMarkInfo_Parms parms;
//
//	if ( !pGetClanLevelMarkInfo )
//		pGetClanLevelMarkInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetClanLevelMarkInfo" );
//
//	parms.ClanName = ClanName;
//	this->ProcessEvent ( pGetClanLevelMarkInfo, &parms, NULL );
//
//	*ClanPattern = parms.ClanPattern;
//	*ClanBG = parms.ClanBG;
//	*ClanBL = parms.ClanBL;
//	return parms.ReturnValue;
//}
//
//struct FImage UwGameManager::GetClanLevelImage ( int Level )
//{
//	static UFunction* pGetClanLevelImage = 0;
//	UwGameManager_execGetClanLevelImage_Parms parms;
//
//	if ( !pGetClanLevelImage )
//		pGetClanLevelImage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetClanLevelImage" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pGetClanLevelImage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UTexture* UwGameManager::GetClanLevelTexture ( int Level )
//{
//	static UFunction* pGetClanLevelTexture = 0;
//	UwGameManager_execGetClanLevelTexture_Parms parms;
//
//	if ( !pGetClanLevelTexture )
//		pGetClanLevelTexture = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetClanLevelTexture" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pGetClanLevelTexture, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwGameManager::GetClanLevelName ( int Level )
//{
//	static UFunction* pGetClanLevelName = 0;
//	UwGameManager_execGetClanLevelName_Parms parms;
//
//	if ( !pGetClanLevelName )
//		pGetClanLevelName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetClanLevelName" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pGetClanLevelName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetClanEndExp ( int Level )
//{
//	static UFunction* pGetClanEndExp = 0;
//	UwGameManager_execGetClanEndExp_Parms parms;
//
//	if ( !pGetClanEndExp )
//		pGetClanEndExp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetClanEndExp" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pGetClanEndExp, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetClanStartExp ( int Level )
//{
//	static UFunction* pGetClanStartExp = 0;
//	UwGameManager_execGetClanStartExp_Parms parms;
//
//	if ( !pGetClanStartExp )
//		pGetClanStartExp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetClanStartExp" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pGetClanStartExp, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UTexture* UwGameManager::GetLevelTexture ( int Level, int LevelMarkID )
//{
//	static UFunction* pGetLevelTexture = 0;
//	UwGameManager_execGetLevelTexture_Parms parms;
//
//	if ( !pGetLevelTexture )
//		pGetLevelTexture = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetLevelTexture" );
//
//	parms.Level = Level;
//	parms.LevelMarkID = LevelMarkID;
//	this->ProcessEvent ( pGetLevelTexture, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::GetLevelImage ( int Level, int LevelMarkID, struct FImage* LevelImage )
//{
//	static UFunction* pGetLevelImage = 0;
//	UwGameManager_execGetLevelImage_Parms parms;
//
//	if ( !pGetLevelImage )
//		pGetLevelImage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetLevelImage" );
//
//	parms.Level = Level;
//	parms.LevelMarkID = LevelMarkID;
//	this->ProcessEvent ( pGetLevelImage, &parms, NULL );
//
//	*LevelImage = parms.LevelImage;
//}
//
//struct FString UwGameManager::GetLevelName ( int Level )
//{
//	static UFunction* pGetLevelName = 0;
//	UwGameManager_execGetLevelName_Parms parms;
//
//	if ( !pGetLevelName )
//		pGetLevelName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetLevelName" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pGetLevelName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetEndExp ( int Level )
//{
//	static UFunction* pGetEndExp = 0;
//	UwGameManager_execGetEndExp_Parms parms;
//
//	if ( !pGetEndExp )
//		pGetEndExp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetEndExp" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pGetEndExp, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameManager::GetStartExp ( int Level )
//{
//	static UFunction* pGetStartExp = 0;
//	UwGameManager_execGetStartExp_Parms parms;
//
//	if ( !pGetStartExp )
//		pGetStartExp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetStartExp" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pGetStartExp, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::dele_UpdateEventTimer ( int EventType, struct FBtrDouble EventTime )
//{
//	static UFunction* pdele_UpdateEventTimer = 0;
//	UwGameManager_execdele_UpdateEventTimer_Parms parms;
//
//	if ( !pdele_UpdateEventTimer )
//		pdele_UpdateEventTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.dele_UpdateEventTimer" );
//
//	parms.EventType = EventType;
//	parms.EventTime = EventTime;
//	this->ProcessEvent ( pdele_UpdateEventTimer, &parms, NULL );
//
//}
//
//struct FBtrDouble UwGameManager::NextEventTime ( struct FBtrDouble t )
//{
//	static UFunction* pNextEventTime = 0;
//	UwGameManager_execNextEventTime_Parms parms;
//
//	if ( !pNextEventTime )
//		pNextEventTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.NextEventTime" );
//
//	parms.t = t;
//	this->ProcessEvent ( pNextEventTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::UpdateEventTimer ( struct FBtrDouble st, int msec )
//{
//	static UFunction* pUpdateEventTimer = 0;
//	UwGameManager_execUpdateEventTimer_Parms parms;
//
//	if ( !pUpdateEventTimer )
//		pUpdateEventTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.UpdateEventTimer" );
//
//	parms.st = st;
//	parms.msec = msec;
//	this->ProcessEvent ( pUpdateEventTimer, &parms, NULL );
//
//}
//
//void UwGameManager::LogEventTimerList ( int AddItemIndex )
//{
//	static UFunction* pLogEventTimerList = 0;
//	UwGameManager_execLogEventTimerList_Parms parms;
//
//	if ( !pLogEventTimerList )
//		pLogEventTimerList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.LogEventTimerList" );
//
//	parms.AddItemIndex = AddItemIndex;
//	this->ProcessEvent ( pLogEventTimerList, &parms, NULL );
//
//}
//
//int UwGameManager::GetEventTimerCount ( int EventType )
//{
//	static UFunction* pGetEventTimerCount = 0;
//	UwGameManager_execGetEventTimerCount_Parms parms;
//
//	if ( !pGetEventTimerCount )
//		pGetEventTimerCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetEventTimerCount" );
//
//	parms.EventType = EventType;
//	this->ProcessEvent ( pGetEventTimerCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FBtrDouble UwGameManager::GetLeftEventTime ( int EventType )
//{
//	static UFunction* pGetLeftEventTime = 0;
//	UwGameManager_execGetLeftEventTime_Parms parms;
//
//	if ( !pGetLeftEventTime )
//		pGetLeftEventTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetLeftEventTime" );
//
//	parms.EventType = EventType;
//	this->ProcessEvent ( pGetLeftEventTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::RemoveEventTimer ( int EventType )
//{
//	static UFunction* pRemoveEventTimer = 0;
//	UwGameManager_execRemoveEventTimer_Parms parms;
//
//	if ( !pRemoveEventTimer )
//		pRemoveEventTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.RemoveEventTimer" );
//
//	parms.EventType = EventType;
//	this->ProcessEvent ( pRemoveEventTimer, &parms, NULL );
//
//}
//
//void UwGameManager::AddEventTimerCount ( int EventType )
//{
//	static UFunction* pAddEventTimerCount = 0;
//	UwGameManager_execAddEventTimerCount_Parms parms;
//
//	if ( !pAddEventTimerCount )
//		pAddEventTimerCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddEventTimerCount" );
//
//	parms.EventType = EventType;
//	this->ProcessEvent ( pAddEventTimerCount, &parms, NULL );
//
//}
//
//void UwGameManager::AddEventTimer ( int EventType, struct FBtrDouble EventTime, class UDelegateEventTimer* EventDelegate, int EventMSec )
//{
//	static UFunction* pAddEventTimer = 0;
//	UwGameManager_execAddEventTimer_Parms parms;
//
//	if ( !pAddEventTimer )
//		pAddEventTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddEventTimer" );
//
//	parms.EventType = EventType;
//	parms.EventTime = EventTime;
//	parms.EventDelegate = EventDelegate;
//	parms.EventMSec = EventMSec;
//	this->ProcessEvent ( pAddEventTimer, &parms, NULL );
//
//}
//
//bool UwGameManager::IsBlockedItemIdx ( struct FBtrDouble D )
//{
//	static UFunction* pIsBlockedItemIdx = 0;
//	UwGameManager_execIsBlockedItemIdx_Parms parms;
//
//	if ( !pIsBlockedItemIdx )
//		pIsBlockedItemIdx = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.IsBlockedItemIdx" );
//
//	parms.D = D;
//	this->ProcessEvent ( pIsBlockedItemIdx, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::AddBlockedItem ( struct FBtrDouble D )
//{
//	static UFunction* pAddBlockedItem = 0;
//	UwGameManager_execAddBlockedItem_Parms parms;
//
//	if ( !pAddBlockedItem )
//		pAddBlockedItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddBlockedItem" );
//
//	parms.D = D;
//	this->ProcessEvent ( pAddBlockedItem, &parms, NULL );
//
//}
//
//void UwGameManager::ClearBlockedItem (  )
//{
//	static UFunction* pClearBlockedItem = 0;
//	UwGameManager_execClearBlockedItem_Parms parms;
//
//	if ( !pClearBlockedItem )
//		pClearBlockedItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.ClearBlockedItem" );
//
//	this->ProcessEvent ( pClearBlockedItem, &parms, NULL );
//
//}
//
//void UwGameManager::AddEventTimerHMS ( int EventType, int Hour, int Min, int sec, class UDelegateEventTimer* EventDelegate, int msec )
//{
//	static UFunction* pAddEventTimerHMS = 0;
//	UwGameManager_execAddEventTimerHMS_Parms parms;
//
//	if ( !pAddEventTimerHMS )
//		pAddEventTimerHMS = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.AddEventTimerHMS" );
//
//	parms.EventType = EventType;
//	parms.Hour = Hour;
//	parms.Min = Min;
//	parms.sec = sec;
//	parms.EventDelegate = EventDelegate;
//	parms.msec = msec;
//	this->ProcessEvent ( pAddEventTimerHMS, &parms, NULL );
//
//}
//
//struct FBtrDouble UwGameManager::GetClientTime ( bool bUpdate )
//{
//	static UFunction* pGetClientTime = 0;
//	UwGameManager_execGetClientTime_Parms parms;
//
//	if ( !pGetClientTime )
//		pGetClientTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetClientTime" );
//
//	parms.bUpdate = bUpdate;
//	this->ProcessEvent ( pGetClientTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwGameManager::UpdateClientTime (  )
//{
//	static UFunction* pUpdateClientTime = 0;
//	UwGameManager_execUpdateClientTime_Parms parms;
//
//	if ( !pUpdateClientTime )
//		pUpdateClientTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.UpdateClientTime" );
//
//	this->ProcessEvent ( pUpdateClientTime, &parms, NULL );
//
//}
//
//void UwGameManager::SetServerTime ( struct FBtrDouble S )
//{
//	static UFunction* pSetServerTime = 0;
//	UwGameManager_execSetServerTime_Parms parms;
//
//	if ( !pSetServerTime )
//		pSetServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.SetServerTime" );
//
//	parms.S = S;
//	this->ProcessEvent ( pSetServerTime, &parms, NULL );
//
//}
//
//void UwGameManager::UpdateQuickSlotBoxList ( class UwGameManager* GameMgr )
//{
//	static UFunction* pUpdateQuickSlotBoxList = 0;
//	UwGameManager_execUpdateQuickSlotBoxList_Parms parms;
//
//	if ( !pUpdateQuickSlotBoxList )
//		pUpdateQuickSlotBoxList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.UpdateQuickSlotBoxList" );
//
//	parms.GameMgr = GameMgr;
//	this->ProcessEvent ( pUpdateQuickSlotBoxList, &parms, NULL );
//
//}
//
//void UwGameManager::UpdateSkillBoxList ( class UwGameManager* GameMgr )
//{
//	static UFunction* pUpdateSkillBoxList = 0;
//	UwGameManager_execUpdateSkillBoxList_Parms parms;
//
//	if ( !pUpdateSkillBoxList )
//		pUpdateSkillBoxList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.UpdateSkillBoxList" );
//
//	parms.GameMgr = GameMgr;
//	this->ProcessEvent ( pUpdateSkillBoxList, &parms, NULL );
//
//}
//
//void UwGameManager::UpdateWebzenItemList ( class UwGameManager* GameMgr )
//{
//	static UFunction* pUpdateWebzenItemList = 0;
//	UwGameManager_execUpdateWebzenItemList_Parms parms;
//
//	if ( !pUpdateWebzenItemList )
//		pUpdateWebzenItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.UpdateWebzenItemList" );
//
//	parms.GameMgr = GameMgr;
//	this->ProcessEvent ( pUpdateWebzenItemList, &parms, NULL );
//
//}
//
//void UwGameManager::UpdateItemList ( class UwGameManager* GameMgr )
//{
//	static UFunction* pUpdateItemList = 0;
//	UwGameManager_execUpdateItemList_Parms parms;
//
//	if ( !pUpdateItemList )
//		pUpdateItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.UpdateItemList" );
//
//	parms.GameMgr = GameMgr;
//	this->ProcessEvent ( pUpdateItemList, &parms, NULL );
//
//}
//
//void UwGameManager::UpdateWebzenShopItemList ( class UwGameManager* GameMgr )
//{
//	static UFunction* pUpdateWebzenShopItemList = 0;
//	UwGameManager_execUpdateWebzenShopItemList_Parms parms;
//
//	if ( !pUpdateWebzenShopItemList )
//		pUpdateWebzenShopItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.UpdateWebzenShopItemList" );
//
//	parms.GameMgr = GameMgr;
//	this->ProcessEvent ( pUpdateWebzenShopItemList, &parms, NULL );
//
//}
//
//void UwGameManager::UpdateWebzenShopVerInfo ( class UwGameManager* GameMgr )
//{
//	static UFunction* pUpdateWebzenShopVerInfo = 0;
//	UwGameManager_execUpdateWebzenShopVerInfo_Parms parms;
//
//	if ( !pUpdateWebzenShopVerInfo )
//		pUpdateWebzenShopVerInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.UpdateWebzenShopVerInfo" );
//
//	parms.GameMgr = GameMgr;
//	this->ProcessEvent ( pUpdateWebzenShopVerInfo, &parms, NULL );
//
//}
//
//void UwGameManager::UpdateServerTime ( class UwGameManager* GameMgr )
//{
//	static UFunction* pUpdateServerTime = 0;
//	UwGameManager_execUpdateServerTime_Parms parms;
//
//	if ( !pUpdateServerTime )
//		pUpdateServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.UpdateServerTime" );
//
//	parms.GameMgr = GameMgr;
//	this->ProcessEvent ( pUpdateServerTime, &parms, NULL );
//
//}
//
//void UwGameManager::DownloadWebzenShopItemList ( int Year, int YearId, int salescode )
//{
//	static UFunction* pDownloadWebzenShopItemList = 0;
//	UwGameManager_execDownloadWebzenShopItemList_Parms parms;
//
//	if ( !pDownloadWebzenShopItemList )
//		pDownloadWebzenShopItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.DownloadWebzenShopItemList" );
//
//	parms.Year = Year;
//	parms.YearId = YearId;
//	parms.salescode = salescode;
//	this->ProcessEvent ( pDownloadWebzenShopItemList, &parms, NULL );
//
//}
//
//int UwGameManager::GetGP20ProductNo ( int ProductCode, int ProductCost, unsigned char SaleType )
//{
//	static UFunction* pGetGP20ProductNo = 0;
//	UwGameManager_execGetGP20ProductNo_Parms parms;
//
//	if ( !pGetGP20ProductNo )
//		pGetGP20ProductNo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetGP20ProductNo" );
//
//	parms.ProductCode = ProductCode;
//	parms.ProductCost = ProductCost;
//	parms.SaleType = SaleType;
//	this->ProcessEvent ( pGetGP20ProductNo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FGP20Product UwGameManager::GetGP20ProductFromCode ( int ProductCode, int* iResult )
//{
//	static UFunction* pGetGP20ProductFromCode = 0;
//	UwGameManager_execGetGP20ProductFromCode_Parms parms;
//
//	if ( !pGetGP20ProductFromCode )
//		pGetGP20ProductFromCode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetGP20ProductFromCode" );
//
//	parms.ProductCode = ProductCode;
//	this->ProcessEvent ( pGetGP20ProductFromCode, &parms, NULL );
//
//	*iResult = parms.iResult;
//	return parms.ReturnValue;
//}
//
//struct FWebzenShopPackage UwGameManager::GetWebzenShopPackage2 ( int ItemID, int* iResult )
//{
//	static UFunction* pGetWebzenShopPackage2 = 0;
//	UwGameManager_execGetWebzenShopPackage2_Parms parms;
//
//	if ( !pGetWebzenShopPackage2 )
//		pGetWebzenShopPackage2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetWebzenShopPackage2" );
//
//	parms.ItemID = ItemID;
//	this->ProcessEvent ( pGetWebzenShopPackage2, &parms, NULL );
//
//	*iResult = parms.iResult;
//	return parms.ReturnValue;
//}
//
//struct FWebzenShopProduct UwGameManager::GetWebzenShopProduct ( int ProductSeq, int PriceSeq )
//{
//	static UFunction* pGetWebzenShopProduct = 0;
//	UwGameManager_execGetWebzenShopProduct_Parms parms;
//
//	if ( !pGetWebzenShopProduct )
//		pGetWebzenShopProduct = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetWebzenShopProduct" );
//
//	parms.ProductSeq = ProductSeq;
//	parms.PriceSeq = PriceSeq;
//	this->ProcessEvent ( pGetWebzenShopProduct, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FWebzenShopPackage UwGameManager::GetWebzenShopPackage ( int ProductSeq, int PriceSeq )
//{
//	static UFunction* pGetWebzenShopPackage = 0;
//	UwGameManager_execGetWebzenShopPackage_Parms parms;
//
//	if ( !pGetWebzenShopPackage )
//		pGetWebzenShopPackage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameManager.GetWebzenShopPackage" );
//
//	parms.ProductSeq = ProductSeq;
//	parms.PriceSeq = PriceSeq;
//	this->ProcessEvent ( pGetWebzenShopPackage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwCharacterManager::eventRemoveBasePlayers (  )
//{
//	static UFunction* pRemoveBasePlayers = 0;
//	UwCharacterManager_eventRemoveBasePlayers_Parms parms;
//
//	if ( !pRemoveBasePlayers )
//		pRemoveBasePlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wCharacterManager.RemoveBasePlayers" );
//
//	this->ProcessEvent ( pRemoveBasePlayers, &parms, NULL );
//
//}
//
//void UwCharacterManager::eventAddBasePlayers (  )
//{
//	static UFunction* pAddBasePlayers = 0;
//	UwCharacterManager_eventAddBasePlayers_Parms parms;
//
//	if ( !pAddBasePlayers )
//		pAddBasePlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wCharacterManager.AddBasePlayers" );
//
//	this->ProcessEvent ( pAddBasePlayers, &parms, NULL );
//
//}
//
//void UwCharacterManager::eventInitMyPlayer (  )
//{
//	static UFunction* pInitMyPlayer = 0;
//	UwCharacterManager_eventInitMyPlayer_Parms parms;
//
//	if ( !pInitMyPlayer )
//		pInitMyPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wCharacterManager.InitMyPlayer" );
//
//	this->ProcessEvent ( pInitMyPlayer, &parms, NULL );
//
//}
//
//void UwCharacterManager::LoadCacheMoveParam (  )
//{
//	static UFunction* pLoadCacheMoveParam = 0;
//	UwCharacterManager_execLoadCacheMoveParam_Parms parms;
//
//	if ( !pLoadCacheMoveParam )
//		pLoadCacheMoveParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wCharacterManager.LoadCacheMoveParam" );
//
//	this->ProcessEvent ( pLoadCacheMoveParam, &parms, NULL );
//
//}
//
//void UwCharacterManager::LoadPartsData (  )
//{
//	static UFunction* pLoadPartsData = 0;
//	UwCharacterManager_execLoadPartsData_Parms parms;
//
//	if ( !pLoadPartsData )
//		pLoadPartsData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wCharacterManager.LoadPartsData" );
//
//	this->ProcessEvent ( pLoadPartsData, &parms, NULL );
//
//}
//
//struct FPlayerPartsInfo UwCharacterManager::GetPartsById ( int iID )
//{
//	static UFunction* pGetPartsById = 0;
//	UwCharacterManager_execGetPartsById_Parms parms;
//
//	if ( !pGetPartsById )
//		pGetPartsById = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wCharacterManager.GetPartsById" );
//
//	parms.iID = iID;
//	this->ProcessEvent ( pGetPartsById, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FPlayerSet UwCharacterManager::GetPlayerSetTest ( struct FString TestName )
//{
//	static UFunction* pGetPlayerSetTest = 0;
//	UwCharacterManager_execGetPlayerSetTest_Parms parms;
//
//	if ( !pGetPlayerSetTest )
//		pGetPlayerSetTest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wCharacterManager.GetPlayerSetTest" );
//
//	parms.TestName = TestName;
//	this->ProcessEvent ( pGetPlayerSetTest, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwMyPlayerStatus* UwCharacterManager::GetMyStatus (  )
//{
//	static UFunction* pGetMyStatus = 0;
//	UwCharacterManager_execGetMyStatus_Parms parms;
//
//	if ( !pGetMyStatus )
//		pGetMyStatus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wCharacterManager.GetMyStatus" );
//
//	this->ProcessEvent ( pGetMyStatus, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwCharacterManager::eventDestroyScript (  )
//{
//	static UFunction* pDestroyScript = 0;
//	UwCharacterManager_eventDestroyScript_Parms parms;
//
//	if ( !pDestroyScript )
//		pDestroyScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wCharacterManager.DestroyScript" );
//
//	this->ProcessEvent ( pDestroyScript, &parms, NULL );
//
//}
//
//void UwCharacterManager::eventInitScript (  )
//{
//	static UFunction* pInitScript = 0;
//	UwCharacterManager_eventInitScript_Parms parms;
//
//	if ( !pInitScript )
//		pInitScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wCharacterManager.InitScript" );
//
//	this->ProcessEvent ( pInitScript, &parms, NULL );
//
//}
//
//void UwCharacterManager::InitNative (  )
//{
//	static UFunction* pInitNative = 0;
//	UwCharacterManager_execInitNative_Parms parms;
//
//	if ( !pInitNative )
//		pInitNative = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wCharacterManager.InitNative" );
//
//	this->ProcessEvent ( pInitNative, &parms, NULL );
//
//}
//
//void UwCharacterManager::Get ( class AActor* P )
//{
//	static UFunction* pGet = 0;
//	UwCharacterManager_execGet_Parms parms;
//
//	if ( !pGet )
//		pGet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wCharacterManager.Get" );
//
//	parms.P = P;
//	this->ProcessEvent ( pGet, &parms, NULL );
//
//}
//
//void UwMyPlayerStatus::SetQSlotList ( class TArray< int > QSlotID, class TArray< struct FString > QSlotName, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWItemID, class TArray< struct FBtrDouble > PistolItemID, class TArray< struct FBtrDouble > TWItemID1, class TArray< struct FBtrDouble > TWItemID2, class TArray< int > Skill1, class TArray< int > Skill2, class TArray< int > Skill3, class TArray< int > Skill4 )
//{
//	static UFunction* pSetQSlotList = 0;
//	UwMyPlayerStatus_execSetQSlotList_Parms parms;
//
//	if ( !pSetQSlotList )
//		pSetQSlotList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.SetQSlotList" );
//
//	parms.QSlotID = QSlotID;
//	parms.QSlotName = QSlotName;
//	parms.QSlotDispOrder = QSlotDispOrder;
//	parms.MWItemID = MWItemID;
//	parms.PistolItemID = PistolItemID;
//	parms.TWItemID1 = TWItemID1;
//	parms.TWItemID2 = TWItemID2;
//	parms.Skill1 = Skill1;
//	parms.Skill2 = Skill2;
//	parms.Skill3 = Skill3;
//	parms.Skill4 = Skill4;
//	this->ProcessEvent ( pSetQSlotList, &parms, NULL );
//
//}
//
//void UwMyPlayerStatus::SetSkillListEnd (  )
//{
//	static UFunction* pSetSkillListEnd = 0;
//	UwMyPlayerStatus_execSetSkillListEnd_Parms parms;
//
//	if ( !pSetSkillListEnd )
//		pSetSkillListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.SetSkillListEnd" );
//
//	this->ProcessEvent ( pSetSkillListEnd, &parms, NULL );
//
//}
//
//void UwMyPlayerStatus::SetSkillList ( class TArray< int > UniqueSkillID, class TArray< int > SkillID, class TArray< struct FBtrDouble > UntilTime, class TArray< unsigned char > SlotPosition )
//{
//	static UFunction* pSetSkillList = 0;
//	UwMyPlayerStatus_execSetSkillList_Parms parms;
//
//	if ( !pSetSkillList )
//		pSetSkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.SetSkillList" );
//
//	parms.UniqueSkillID = UniqueSkillID;
//	parms.SkillID = SkillID;
//	parms.UntilTime = UntilTime;
//	parms.SlotPosition = SlotPosition;
//	this->ProcessEvent ( pSetSkillList, &parms, NULL );
//
//}
//
//void UwMyPlayerStatus::SetSkillListStart ( int Count )
//{
//	static UFunction* pSetSkillListStart = 0;
//	UwMyPlayerStatus_execSetSkillListStart_Parms parms;
//
//	if ( !pSetSkillListStart )
//		pSetSkillListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.SetSkillListStart" );
//
//	parms.Count = Count;
//	this->ProcessEvent ( pSetSkillListStart, &parms, NULL );
//
//}
//
//void UwMyPlayerStatus::SetItemListEnd (  )
//{
//	static UFunction* pSetItemListEnd = 0;
//	UwMyPlayerStatus_execSetItemListEnd_Parms parms;
//
//	if ( !pSetItemListEnd )
//		pSetItemListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.SetItemListEnd" );
//
//	this->ProcessEvent ( pSetItemListEnd, &parms, NULL );
//
//}
//
//void UwMyPlayerStatus::SetItemList ( class TArray< struct FBtrDouble > UniqueID, class TArray< int > ItemID, class TArray< int > ItemType, class TArray< int > Durability, class TArray< struct FBtrDouble > UntilTime, class TArray< int > SlotPosition, class TArray< int > AddPartsID, class TArray< int > DamageDegree, class TArray< unsigned char > ItemState, class TArray< int > StackCount, class TArray< int > PaintID )
//{
//	static UFunction* pSetItemList = 0;
//	UwMyPlayerStatus_execSetItemList_Parms parms;
//
//	if ( !pSetItemList )
//		pSetItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.SetItemList" );
//
//	parms.UniqueID = UniqueID;
//	parms.ItemID = ItemID;
//	parms.ItemType = ItemType;
//	parms.Durability = Durability;
//	parms.UntilTime = UntilTime;
//	parms.SlotPosition = SlotPosition;
//	parms.AddPartsID = AddPartsID;
//	parms.DamageDegree = DamageDegree;
//	parms.ItemState = ItemState;
//	parms.StackCount = StackCount;
//	parms.PaintID = PaintID;
//	this->ProcessEvent ( pSetItemList, &parms, NULL );
//
//}
//
//void UwMyPlayerStatus::SetItemListStart ( int Count )
//{
//	static UFunction* pSetItemListStart = 0;
//	UwMyPlayerStatus_execSetItemListStart_Parms parms;
//
//	if ( !pSetItemListStart )
//		pSetItemListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.SetItemListStart" );
//
//	parms.Count = Count;
//	this->ProcessEvent ( pSetItemListStart, &parms, NULL );
//
//}
//
//void UwMyPlayerStatus::RemoveQuickSlotSkillItem ( int UniqueID )
//{
//	static UFunction* pRemoveQuickSlotSkillItem = 0;
//	UwMyPlayerStatus_execRemoveQuickSlotSkillItem_Parms parms;
//
//	if ( !pRemoveQuickSlotSkillItem )
//		pRemoveQuickSlotSkillItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.RemoveQuickSlotSkillItem" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pRemoveQuickSlotSkillItem, &parms, NULL );
//
//}
//
//void UwMyPlayerStatus::RemoveQuickSlotItem ( struct FBtrDouble UniqueID )
//{
//	static UFunction* pRemoveQuickSlotItem = 0;
//	UwMyPlayerStatus_execRemoveQuickSlotItem_Parms parms;
//
//	if ( !pRemoveQuickSlotItem )
//		pRemoveQuickSlotItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.RemoveQuickSlotItem" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pRemoveQuickSlotItem, &parms, NULL );
//
//}
//
//void UwMyPlayerStatus::RemoveItem ( struct FBtrDouble UniqueID )
//{
//	static UFunction* pRemoveItem = 0;
//	UwMyPlayerStatus_execRemoveItem_Parms parms;
//
//	if ( !pRemoveItem )
//		pRemoveItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.RemoveItem" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pRemoveItem, &parms, NULL );
//
//}
//
//bool UwMyPlayerStatus::IsQuickSlotSkillItem ( int UniqueID )
//{
//	static UFunction* pIsQuickSlotSkillItem = 0;
//	UwMyPlayerStatus_execIsQuickSlotSkillItem_Parms parms;
//
//	if ( !pIsQuickSlotSkillItem )
//		pIsQuickSlotSkillItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.IsQuickSlotSkillItem" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pIsQuickSlotSkillItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMyPlayerStatus::IsQuickSlotItem ( struct FBtrDouble UniqueID )
//{
//	static UFunction* pIsQuickSlotItem = 0;
//	UwMyPlayerStatus_execIsQuickSlotItem_Parms parms;
//
//	if ( !pIsQuickSlotItem )
//		pIsQuickSlotItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.IsQuickSlotItem" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pIsQuickSlotItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMyPlayerStatus::FindSkillItemIndexByUniqueID ( int UniqueID )
//{
//	static UFunction* pFindSkillItemIndexByUniqueID = 0;
//	UwMyPlayerStatus_execFindSkillItemIndexByUniqueID_Parms parms;
//
//	if ( !pFindSkillItemIndexByUniqueID )
//		pFindSkillItemIndexByUniqueID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.FindSkillItemIndexByUniqueID" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pFindSkillItemIndexByUniqueID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMyPlayerStatus::FindItemIndexByUniqueID ( struct FBtrDouble UniqueID )
//{
//	static UFunction* pFindItemIndexByUniqueID = 0;
//	UwMyPlayerStatus_execFindItemIndexByUniqueID_Parms parms;
//
//	if ( !pFindItemIndexByUniqueID )
//		pFindItemIndexByUniqueID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.FindItemIndexByUniqueID" );
//
//	parms.UniqueID = UniqueID;
//	this->ProcessEvent ( pFindItemIndexByUniqueID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMyPlayerStatus::FindItemIDBySlotPos ( int SlotPos )
//{
//	static UFunction* pFindItemIDBySlotPos = 0;
//	UwMyPlayerStatus_execFindItemIDBySlotPos_Parms parms;
//
//	if ( !pFindItemIDBySlotPos )
//		pFindItemIDBySlotPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMyPlayerStatus.FindItemIDBySlotPos" );
//
//	parms.SlotPos = SlotPos;
//	this->ProcessEvent ( pFindItemIDBySlotPos, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwBtrIni::eventRegistMap (  )
//{
//	static UFunction* pRegistMap = 0;
//	UwBtrIni_eventRegistMap_Parms parms;
//
//	if ( !pRegistMap )
//		pRegistMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBtrIni.RegistMap" );
//
//	this->ProcessEvent ( pRegistMap, &parms, NULL );
//
//}
//
//bool UwBtrIni::AddBoolToMap ( struct FString key, bool Value )
//{
//	static UFunction* pAddBoolToMap = 0;
//	UwBtrIni_execAddBoolToMap_Parms parms;
//
//	if ( !pAddBoolToMap )
//		pAddBoolToMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBtrIni.AddBoolToMap" );
//
//	parms.key = key;
//	parms.Value = Value;
//	this->ProcessEvent ( pAddBoolToMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwBtrIni::AddFloatToMap ( struct FString key, float Value )
//{
//	static UFunction* pAddFloatToMap = 0;
//	UwBtrIni_execAddFloatToMap_Parms parms;
//
//	if ( !pAddFloatToMap )
//		pAddFloatToMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBtrIni.AddFloatToMap" );
//
//	parms.key = key;
//	parms.Value = Value;
//	this->ProcessEvent ( pAddFloatToMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwBtrIni::AddIntToMap ( struct FString key, int Value )
//{
//	static UFunction* pAddIntToMap = 0;
//	UwBtrIni_execAddIntToMap_Parms parms;
//
//	if ( !pAddIntToMap )
//		pAddIntToMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBtrIni.AddIntToMap" );
//
//	parms.key = key;
//	parms.Value = Value;
//	this->ProcessEvent ( pAddIntToMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwBtrIni::AddStringToMap ( struct FString key, struct FString Value )
//{
//	static UFunction* pAddStringToMap = 0;
//	UwBtrIni_execAddStringToMap_Parms parms;
//
//	if ( !pAddStringToMap )
//		pAddStringToMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBtrIni.AddStringToMap" );
//
//	parms.key = key;
//	parms.Value = Value;
//	this->ProcessEvent ( pAddStringToMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamBase::HandleDebugExec ( struct FString Command, struct FString Param )
//{
//	static UFunction* pHandleDebugExec = 0;
//	UStreamBase_execHandleDebugExec_Parms parms;
//
//	if ( !pHandleDebugExec )
//		pHandleDebugExec = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.HandleDebugExec" );
//
//	parms.Command = Command;
//	parms.Param = Param;
//	this->ProcessEvent ( pHandleDebugExec, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamBase::CompareNames ( struct FString NameA, struct FString NameB )
//{
//	static UFunction* pCompareNames = 0;
//	UStreamBase_execCompareNames_Parms parms;
//
//	if ( !pCompareNames )
//		pCompareNames = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.CompareNames" );
//
//	parms.NameA = NameA;
//	parms.NameB = NameB;
//	this->ProcessEvent ( pCompareNames, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char UStreamBase::eventConvertToFileType ( struct FString Extension )
//{
//	static UFunction* pConvertToFileType = 0;
//	UStreamBase_eventConvertToFileType_Parms parms;
//
//	if ( !pConvertToFileType )
//		pConvertToFileType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.ConvertToFileType" );
//
//	parms.Extension = Extension;
//	this->ProcessEvent ( pConvertToFileType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStreamBase::eventConvertToFileExtension ( unsigned char Type )
//{
//	static UFunction* pConvertToFileExtension = 0;
//	UStreamBase_eventConvertToFileExtension_Parms parms;
//
//	if ( !pConvertToFileExtension )
//		pConvertToFileExtension = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.ConvertToFileExtension" );
//
//	parms.Type = Type;
//	this->ProcessEvent ( pConvertToFileExtension, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStreamBase::FormatTimeDisplay ( float Seconds )
//{
//	static UFunction* pFormatTimeDisplay = 0;
//	UStreamBase_execFormatTimeDisplay_Parms parms;
//
//	if ( !pFormatTimeDisplay )
//		pFormatTimeDisplay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.FormatTimeDisplay" );
//
//	parms.Seconds = Seconds;
//	this->ProcessEvent ( pFormatTimeDisplay, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamBase::RevInStr ( struct FString Src, struct FString Match )
//{
//	static UFunction* pRevInStr = 0;
//	UStreamBase_execRevInStr_Parms parms;
//
//	if ( !pRevInStr )
//		pRevInStr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.RevInStr" );
//
//	parms.Src = Src;
//	parms.Match = Match;
//	this->ProcessEvent ( pRevInStr, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > UStreamBase::eventParseDirectories ( struct FString* InPath )
//{
//	static UFunction* pParseDirectories = 0;
//	UStreamBase_eventParseDirectories_Parms parms;
//
//	if ( !pParseDirectories )
//		pParseDirectories = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.ParseDirectories" );
//
//	parms.InPath = *InPath;
//	this->ProcessEvent ( pParseDirectories, &parms, NULL );
//
//	*InPath = parms.InPath;
//	return parms.ReturnValue;
//}
//
//struct FString UStreamBase::eventParseExtension ( struct FString* FileNameWithExtension )
//{
//	static UFunction* pParseExtension = 0;
//	UStreamBase_eventParseExtension_Parms parms;
//
//	if ( !pParseExtension )
//		pParseExtension = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.ParseExtension" );
//
//	parms.FileNameWithExtension = *FileNameWithExtension;
//	this->ProcessEvent ( pParseExtension, &parms, NULL );
//
//	*FileNameWithExtension = parms.FileNameWithExtension;
//	return parms.ReturnValue;
//}
//
//bool UStreamBase::eventParsePath ( struct FString InPath, struct FFilePath* ParsedPath )
//{
//	static UFunction* pParsePath = 0;
//	UStreamBase_eventParsePath_Parms parms;
//
//	if ( !pParsePath )
//		pParsePath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.ParsePath" );
//
//	parms.InPath = InPath;
//	this->ProcessEvent ( pParsePath, &parms, NULL );
//
//	*ParsedPath = parms.ParsedPath;
//	return parms.ReturnValue;
//}
//
//bool UStreamBase::eventHasExtension ( struct FString Test )
//{
//	static UFunction* pHasExtension = 0;
//	UStreamBase_eventHasExtension_Parms parms;
//
//	if ( !pHasExtension )
//		pHasExtension = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.HasExtension" );
//
//	parms.Test = Test;
//	this->ProcessEvent ( pHasExtension, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStreamBase::eventGetPathRoot ( struct FString* InPath )
//{
//	static UFunction* pGetPathRoot = 0;
//	UStreamBase_eventGetPathRoot_Parms parms;
//
//	if ( !pGetPathRoot )
//		pGetPathRoot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.GetPathRoot" );
//
//	parms.InPath = *InPath;
//	this->ProcessEvent ( pGetPathRoot, &parms, NULL );
//
//	*InPath = parms.InPath;
//	return parms.ReturnValue;
//}
//
//bool UStreamBase::IsCaseSensitive (  )
//{
//	static UFunction* pIsCaseSensitive = 0;
//	UStreamBase_execIsCaseSensitive_Parms parms;
//
//	if ( !pIsCaseSensitive )
//		pIsCaseSensitive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.IsCaseSensitive" );
//
//	this->ProcessEvent ( pIsCaseSensitive, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStreamBase::GetPathSeparator (  )
//{
//	static UFunction* pGetPathSeparator = 0;
//	UStreamBase_execGetPathSeparator_Parms parms;
//
//	if ( !pGetPathSeparator )
//		pGetPathSeparator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.GetPathSeparator" );
//
//	this->ProcessEvent ( pGetPathSeparator, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStreamBase::MultiplyEqual_StrStr ( struct FString B, struct FString* A )
//{
//	static UFunction* pMultiplyEqual_StrStr = 0;
//	UStreamBase_execMultiplyEqual_StrStr_Parms parms;
//
//	if ( !pMultiplyEqual_StrStr )
//		pMultiplyEqual_StrStr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.MultiplyEqual_StrStr" );
//
//	parms.B = B;
//	this->ProcessEvent ( pMultiplyEqual_StrStr, &parms, NULL );
//
//	*A = parms.A;
//	return parms.ReturnValue;
//}
//
//struct FString UStreamBase::Multiply_StrStr ( struct FString A, struct FString B )
//{
//	static UFunction* pMultiply_StrStr = 0;
//	UStreamBase_execMultiply_StrStr_Parms parms;
//
//	if ( !pMultiply_StrStr )
//		pMultiply_StrStr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamBase.Multiply_StrStr" );
//
//	parms.A = A;
//	parms.B = B;
//	this->ProcessEvent ( pMultiply_StrStr, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamTag::DumpTag (  )
//{
//	static UFunction* pDumpTag = 0;
//	UStreamTag_execDumpTag_Parms parms;
//
//	if ( !pDumpTag )
//		pDumpTag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamTag.DumpTag" );
//
//	this->ProcessEvent ( pDumpTag, &parms, NULL );
//
//}
//
//void UStreamTag::DumpScriptTag (  )
//{
//	static UFunction* pDumpScriptTag = 0;
//	UStreamTag_execDumpScriptTag_Parms parms;
//
//	if ( !pDumpScriptTag )
//		pDumpScriptTag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamTag.DumpScriptTag" );
//
//	this->ProcessEvent ( pDumpScriptTag, &parms, NULL );
//
//}
//
//void UStreamTag::OnRefresh (  )
//{
//	static UFunction* pOnRefresh = 0;
//	UStreamTag_execOnRefresh_Parms parms;
//
//	if ( !pOnRefresh )
//		pOnRefresh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamTag.OnRefresh" );
//
//	this->ProcessEvent ( pOnRefresh, &parms, NULL );
//
//}
//
//void UStream::DumpTags (  )
//{
//	static UFunction* pDumpTags = 0;
//	UStream_execDumpTags_Parms parms;
//
//	if ( !pDumpTags )
//		pDumpTags = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.DumpTags" );
//
//	this->ProcessEvent ( pDumpTags, &parms, NULL );
//
//}
//
//void UStream::DumpScriptTag (  )
//{
//	static UFunction* pDumpScriptTag = 0;
//	UStream_execDumpScriptTag_Parms parms;
//
//	if ( !pDumpScriptTag )
//		pDumpScriptTag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.DumpScriptTag" );
//
//	this->ProcessEvent ( pDumpScriptTag, &parms, NULL );
//
//}
//
//bool UStream::eventSetHandle ( int NewHandle )
//{
//	static UFunction* pSetHandle = 0;
//	UStream_eventSetHandle_Parms parms;
//
//	if ( !pSetHandle )
//		pSetHandle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.SetHandle" );
//
//	parms.NewHandle = NewHandle;
//	this->ProcessEvent ( pSetHandle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStream::GetSongTitle (  )
//{
//	static UFunction* pGetSongTitle = 0;
//	UStream_execGetSongTitle_Parms parms;
//
//	if ( !pGetSongTitle )
//		pGetSongTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.GetSongTitle" );
//
//	this->ProcessEvent ( pGetSongTitle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStream::GetFullName (  )
//{
//	static UFunction* pGetFullName = 0;
//	UStream_execGetFullName_Parms parms;
//
//	if ( !pGetFullName )
//		pGetFullName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.GetFullName" );
//
//	this->ProcessEvent ( pGetFullName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStream::GetPath (  )
//{
//	static UFunction* pGetPath = 0;
//	UStream_execGetPath_Parms parms;
//
//	if ( !pGetPath )
//		pGetPath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.GetPath" );
//
//	this->ProcessEvent ( pGetPath, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStream::GetExtension (  )
//{
//	static UFunction* pGetExtension = 0;
//	UStream_execGetExtension_Parms parms;
//
//	if ( !pGetExtension )
//		pGetExtension = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.GetExtension" );
//
//	this->ProcessEvent ( pGetExtension, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStream::GetFileName (  )
//{
//	static UFunction* pGetFileName = 0;
//	UStream_execGetFileName_Parms parms;
//
//	if ( !pGetFileName )
//		pGetFileName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.GetFileName" );
//
//	this->ProcessEvent ( pGetFileName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStream::GetDirectory (  )
//{
//	static UFunction* pGetDirectory = 0;
//	UStream_execGetDirectory_Parms parms;
//
//	if ( !pGetDirectory )
//		pGetDirectory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.GetDirectory" );
//
//	this->ProcessEvent ( pGetDirectory, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char UStream::GetType (  )
//{
//	static UFunction* pGetType = 0;
//	UStream_execGetType_Parms parms;
//
//	if ( !pGetType )
//		pGetType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.GetType" );
//
//	this->ProcessEvent ( pGetType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UStreamTag* UStream::GetTag (  )
//{
//	static UFunction* pGetTag = 0;
//	UStream_execGetTag_Parms parms;
//
//	if ( !pGetTag )
//		pGetTag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.GetTag" );
//
//	this->ProcessEvent ( pGetTag, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStream::GetHandle (  )
//{
//	static UFunction* pGetHandle = 0;
//	UStream_execGetHandle_Parms parms;
//
//	if ( !pGetHandle )
//		pGetHandle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.GetHandle" );
//
//	this->ProcessEvent ( pGetHandle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStream::IsReadOnly (  )
//{
//	static UFunction* pIsReadOnly = 0;
//	UStream_execIsReadOnly_Parms parms;
//
//	if ( !pIsReadOnly )
//		pIsReadOnly = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.IsReadOnly" );
//
//	this->ProcessEvent ( pIsReadOnly, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
////bool UStream::LoadID3Tag (  )
////{
////	static UFunction* pLoadID3Tag = 0;
////	UStream_execLoadID3Tag_Parms parms;
////
////	if ( !pLoadID3Tag )
////		pLoadID3Tag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.LoadID3Tag" );
////
////	this->ProcessEvent ( pLoadID3Tag, &parms, NULL );
////
////	return parms.ReturnValue;
////}
////
////bool UStream::SaveID3Tag (  )
////{
////	static UFunction* pSaveID3Tag = 0;
////	UStream_execSaveID3Tag_Parms parms;
////
////	if ( !pSaveID3Tag )
////		pSaveID3Tag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Stream.SaveID3Tag" );
////
////	this->ProcessEvent ( pSaveID3Tag, &parms, NULL );
////
////	return parms.ReturnValue;
////}
//
//bool UStreamInterface::HandleDebugExec ( struct FString Command, struct FString Param )
//{
//	static UFunction* pHandleDebugExec = 0;
//	UStreamInterface_execHandleDebugExec_Parms parms;
//
//	if ( !pHandleDebugExec )
//		pHandleDebugExec = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInterface.HandleDebugExec" );
//
//	parms.Command = Command;
//	parms.Param = Param;
//	this->ProcessEvent ( pHandleDebugExec, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamInterface::ChangeDirectory ( struct FString DirectoryName )
//{
//	static UFunction* pChangeDirectory = 0;
//	UStreamInterface_execChangeDirectory_Parms parms;
//
//	if ( !pChangeDirectory )
//		pChangeDirectory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInterface.ChangeDirectory" );
//
//	parms.DirectoryName = DirectoryName;
//	this->ProcessEvent ( pChangeDirectory, &parms, NULL );
//
//}
//
//struct FString UStreamInterface::GetCurrentDirectory (  )
//{
//	static UFunction* pGetCurrentDirectory = 0;
//	UStreamInterface_execGetCurrentDirectory_Parms parms;
//
//	if ( !pGetCurrentDirectory )
//		pGetCurrentDirectory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInterface.GetCurrentDirectory" );
//
//	this->ProcessEvent ( pGetCurrentDirectory, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamInterface::LoadPlaylist ( struct FString fileName, bool bStrict, class TArray< struct FString >* Lines )
//{
//	static UFunction* pLoadPlaylist = 0;
//	UStreamInterface_execLoadPlaylist_Parms parms;
//
//	if ( !pLoadPlaylist )
//		pLoadPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInterface.LoadPlaylist" );
//
//	parms.fileName = fileName;
//	parms.bStrict = bStrict;
//	this->ProcessEvent ( pLoadPlaylist, &parms, NULL );
//
//	*Lines = parms.Lines;
//	return parms.ReturnValue;
//}
//
//bool UStreamInterface::ValidFile ( struct FString fileName )
//{
//	static UFunction* pValidFile = 0;
//	UStreamInterface_execValidFile_Parms parms;
//
//	if ( !pValidFile )
//		pValidFile = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInterface.ValidFile" );
//
//	parms.fileName = fileName;
//	this->ProcessEvent ( pValidFile, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UStream* UStreamInterface::CreateStream ( struct FString fileName, bool bStrict )
//{
//	static UFunction* pCreateStream = 0;
//	UStreamInterface_execCreateStream_Parms parms;
//
//	if ( !pCreateStream )
//		pCreateStream = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInterface.CreateStream" );
//
//	parms.fileName = fileName;
//	parms.bStrict = bStrict;
//	this->ProcessEvent ( pCreateStream, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamInterface::ValidDirectory ( struct FString DirectoryPath )
//{
//	static UFunction* pValidDirectory = 0;
//	UStreamInterface_execValidDirectory_Parms parms;
//
//	if ( !pValidDirectory )
//		pValidDirectory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInterface.ValidDirectory" );
//
//	parms.DirectoryPath = DirectoryPath;
//	this->ProcessEvent ( pValidDirectory, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamInterface::RemoveDirectory ( struct FString DirectoryName )
//{
//	static UFunction* pRemoveDirectory = 0;
//	UStreamInterface_execRemoveDirectory_Parms parms;
//
//	if ( !pRemoveDirectory )
//		pRemoveDirectory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInterface.RemoveDirectory" );
//
//	parms.DirectoryName = DirectoryName;
//	this->ProcessEvent ( pRemoveDirectory, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStreamInterface::CreateDirectory ( struct FString DirectoryName )
//{
//	static UFunction* pCreateDirectory = 0;
//	UStreamInterface_execCreateDirectory_Parms parms;
//
//	if ( !pCreateDirectory )
//		pCreateDirectory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInterface.CreateDirectory" );
//
//	parms.DirectoryName = DirectoryName;
//	this->ProcessEvent ( pCreateDirectory, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamInterface::GetDirectoryContents ( struct FString DirectoryName, unsigned char FileType, class TArray< struct FString >* contents )
//{
//	static UFunction* pGetDirectoryContents = 0;
//	UStreamInterface_execGetDirectoryContents_Parms parms;
//
//	if ( !pGetDirectoryContents )
//		pGetDirectoryContents = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInterface.GetDirectoryContents" );
//
//	parms.DirectoryName = DirectoryName;
//	parms.FileType = FileType;
//	this->ProcessEvent ( pGetDirectoryContents, &parms, NULL );
//
//	*contents = parms.contents;
//	return parms.ReturnValue;
//}
//
//bool UStreamInterface::GetDriveLetters ( class TArray< struct FString >* Letters )
//{
//	static UFunction* pGetDriveLetters = 0;
//	UStreamInterface_execGetDriveLetters_Parms parms;
//
//	if ( !pGetDriveLetters )
//		pGetDriveLetters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInterface.GetDriveLetters" );
//
//	parms.Letters = *Letters;
//	this->ProcessEvent ( pGetDriveLetters, &parms, NULL );
//
//	*Letters = parms.Letters;
//	return parms.ReturnValue;
//}
//
//struct FString UStreamInterface::GetBaseDirectory (  )
//{
//	static UFunction* pGetBaseDirectory = 0;
//	UStreamInterface_execGetBaseDirectory_Parms parms;
//
//	if ( !pGetBaseDirectory )
//		pGetBaseDirectory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInterface.GetBaseDirectory" );
//
//	this->ProcessEvent ( pGetBaseDirectory, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UInteractions::IsMouseKey ( unsigned char key )
//{
//	static UFunction* pIsMouseKey = 0;
//	UInteractions_execIsMouseKey_Parms parms;
//
//	if ( !pIsMouseKey )
//		pIsMouseKey = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interactions.IsMouseKey" );
//
//	parms.key = key;
//	this->ProcessEvent ( pIsMouseKey, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UInteractions::IsKeyboardKey ( unsigned char key )
//{
//	static UFunction* pIsKeyboardKey = 0;
//	UInteractions_execIsKeyboardKey_Parms parms;
//
//	if ( !pIsKeyboardKey )
//		pIsKeyboardKey = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interactions.IsKeyboardKey" );
//
//	parms.key = key;
//	this->ProcessEvent ( pIsKeyboardKey, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UInteractions::GetFriendlyName ( unsigned char iKey )
//{
//	static UFunction* pGetFriendlyName = 0;
//	UInteractions_execGetFriendlyName_Parms parms;
//
//	if ( !pGetFriendlyName )
//		pGetFriendlyName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interactions.GetFriendlyName" );
//
//	parms.iKey = iKey;
//	this->ProcessEvent ( pGetFriendlyName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UInteraction::eventOnIME_Notify ( int Type, int LangID, struct FString strText, int StartPos, int Size )
//{
//	static UFunction* pOnIME_Notify = 0;
//	UInteraction_eventOnIME_Notify_Parms parms;
//
//	if ( !pOnIME_Notify )
//		pOnIME_Notify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.OnIME_Notify" );
//
//	parms.Type = Type;
//	parms.LangID = LangID;
//	parms.strText = strText;
//	parms.StartPos = StartPos;
//	parms.Size = Size;
//	this->ProcessEvent ( pOnIME_Notify, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UInteraction::eventEnableInteraction (  )
//{
//	static UFunction* pEnableInteraction = 0;
//	UInteraction_eventEnableInteraction_Parms parms;
//
//	if ( !pEnableInteraction )
//		pEnableInteraction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.EnableInteraction" );
//
//	this->ProcessEvent ( pEnableInteraction, &parms, NULL );
//
//}
//
//void UInteraction::eventDisableInteraction (  )
//{
//	static UFunction* pDisableInteraction = 0;
//	UInteraction_eventDisableInteraction_Parms parms;
//
//	if ( !pDisableInteraction )
//		pDisableInteraction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.DisableInteraction" );
//
//	this->ProcessEvent ( pDisableInteraction, &parms, NULL );
//
//}
//
//void UInteraction::eventNotifyMusicChange (  )
//{
//	static UFunction* pNotifyMusicChange = 0;
//	UInteraction_eventNotifyMusicChange_Parms parms;
//
//	if ( !pNotifyMusicChange )
//		pNotifyMusicChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.NotifyMusicChange" );
//
//	this->ProcessEvent ( pNotifyMusicChange, &parms, NULL );
//
//}
//
//void UInteraction::StreamFinished ( int Handle, unsigned char Reason )
//{
//	static UFunction* pStreamFinished = 0;
//	UInteraction_execStreamFinished_Parms parms;
//
//	if ( !pStreamFinished )
//		pStreamFinished = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.StreamFinished" );
//
//	parms.Handle = Handle;
//	parms.Reason = Reason;
//	this->ProcessEvent ( pStreamFinished, &parms, NULL );
//
//}
//
//void UInteraction::Tick ( float DeltaTime )
//{
//	static UFunction* pTick = 0;
//	UInteraction_execTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.Tick" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void UInteraction::SetFocus (  )
//{
//	static UFunction* pSetFocus = 0;
//	UInteraction_execSetFocus_Parms parms;
//
//	if ( !pSetFocus )
//		pSetFocus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.SetFocus" );
//
//	this->ProcessEvent ( pSetFocus, &parms, NULL );
//
//}
//
//void UInteraction::PostRender ( class UCanvas* Canvas )
//{
//	static UFunction* pPostRender = 0;
//	UInteraction_execPostRender_Parms parms;
//
//	if ( !pPostRender )
//		pPostRender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.PostRender" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pPostRender, &parms, NULL );
//
//}
//
//void UInteraction::PreRender ( class UCanvas* Canvas )
//{
//	static UFunction* pPreRender = 0;
//	UInteraction_execPreRender_Parms parms;
//
//	if ( !pPreRender )
//		pPreRender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.PreRender" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pPreRender, &parms, NULL );
//
//}
//
//bool UInteraction::KeyEvent ( float Delta, unsigned char* key, unsigned char* Action )
//{
//	static UFunction* pKeyEvent = 0;
//	UInteraction_execKeyEvent_Parms parms;
//
//	if ( !pKeyEvent )
//		pKeyEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.KeyEvent" );
//
//	parms.Delta = Delta;
//	this->ProcessEvent ( pKeyEvent, &parms, NULL );
//
//	*key = parms.key;
//	*Action = parms.Action;
//	return parms.ReturnValue;
//}
//
//bool UInteraction::KeyType ( struct FString Unicode, unsigned char* key )
//{
//	static UFunction* pKeyType = 0;
//	UInteraction_execKeyType_Parms parms;
//
//	if ( !pKeyType )
//		pKeyType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.KeyType" );
//
//	parms.Unicode = Unicode;
//	this->ProcessEvent ( pKeyType, &parms, NULL );
//
//	*key = parms.key;
//	return parms.ReturnValue;
//}
//
//void UInteraction::Message ( struct FString Msg, float MsgLife )
//{
//	static UFunction* pMessage = 0;
//	UInteraction_execMessage_Parms parms;
//
//	if ( !pMessage )
//		pMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.Message" );
//
//	parms.Msg = Msg;
//	parms.MsgLife = MsgLife;
//	this->ProcessEvent ( pMessage, &parms, NULL );
//
//}
//
//void UInteraction::eventNotifyLevelChange (  )
//{
//	static UFunction* pNotifyLevelChange = 0;
//	UInteraction_eventNotifyLevelChange_Parms parms;
//
//	if ( !pNotifyLevelChange )
//		pNotifyLevelChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.NotifyLevelChange" );
//
//	this->ProcessEvent ( pNotifyLevelChange, &parms, NULL );
//
//}
//
//void UInteraction::eventInitialized (  )
//{
//	static UFunction* pInitialized = 0;
//	UInteraction_eventInitialized_Parms parms;
//
//	if ( !pInitialized )
//		pInitialized = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.Initialized" );
//
//	this->ProcessEvent ( pInitialized, &parms, NULL );
//
//}
//
//struct FVector UInteraction::ScreenToWorld ( struct FVector Location, struct FVector CameraLocation, struct FRotator CameraRotation )
//{
//	static UFunction* pScreenToWorld = 0;
//	UInteraction_execScreenToWorld_Parms parms;
//
//	if ( !pScreenToWorld )
//		pScreenToWorld = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.ScreenToWorld" );
//
//	parms.Location = Location;
//	parms.CameraLocation = CameraLocation;
//	parms.CameraRotation = CameraRotation;
//	this->ProcessEvent ( pScreenToWorld, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FVector UInteraction::WorldToScreen ( struct FVector Location, struct FVector CameraLocation, struct FRotator CameraRotation )
//{
//	static UFunction* pWorldToScreen = 0;
//	UInteraction_execWorldToScreen_Parms parms;
//
//	if ( !pWorldToScreen )
//		pWorldToScreen = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.WorldToScreen" );
//
//	parms.Location = Location;
//	parms.CameraLocation = CameraLocation;
//	parms.CameraRotation = CameraRotation;
//	this->ProcessEvent ( pWorldToScreen, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UInteraction::ConsoleCommand ( struct FString S )
//{
//	static UFunction* pConsoleCommand = 0;
//	UInteraction_execConsoleCommand_Parms parms;
//
//	if ( !pConsoleCommand )
//		pConsoleCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.ConsoleCommand" );
//
//	parms.S = S;
//	this->ProcessEvent ( pConsoleCommand, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UInteraction::Initialize (  )
//{
//	static UFunction* pInitialize = 0;
//	UInteraction_execInitialize_Parms parms;
//
//	if ( !pInitialize )
//		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Interaction.Initialize" );
//
//	this->ProcessEvent ( pInitialize, &parms, NULL );
//
//}
//
//void UStreamInteraction::execstreamdebug ( struct FString Command, struct FString Param )
//{
//	static UFunction* pstreamdebug = 0;
//	UStreamInteraction_execstreamdebug_Parms parms;
//
//	if ( !pstreamdebug )
//		pstreamdebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.streamdebug" );
//
//	parms.Command = Command;
//	parms.Param = Param;
//	this->ProcessEvent ( pstreamdebug, &parms, NULL );
//
//}
//
//class APlayerController* UStreamInteraction::PC (  )
//{
//	static UFunction* pPC = 0;
//	UStreamInteraction_execPC_Parms parms;
//
//	if ( !pPC )
//		pPC = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.PC" );
//
//	this->ProcessEvent ( pPC, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamInteraction::KillMusic (  )
//{
//	static UFunction* pKillMusic = 0;
//	UStreamInteraction_execKillMusic_Parms parms;
//
//	if ( !pKillMusic )
//		pKillMusic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.KillMusic" );
//
//	this->ProcessEvent ( pKillMusic, &parms, NULL );
//
//}
//
//void UStreamInteraction::ClearSongInfo (  )
//{
//	static UFunction* pClearSongInfo = 0;
//	UStreamInteraction_execClearSongInfo_Parms parms;
//
//	if ( !pClearSongInfo )
//		pClearSongInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.ClearSongInfo" );
//
//	this->ProcessEvent ( pClearSongInfo, &parms, NULL );
//
//}
//
//bool UStreamInteraction::HasPlayer (  )
//{
//	static UFunction* pHasPlayer = 0;
//	UStreamInteraction_execHasPlayer_Parms parms;
//
//	if ( !pHasPlayer )
//		pHasPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.HasPlayer" );
//
//	this->ProcessEvent ( pHasPlayer, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamInteraction::IsPlaying (  )
//{
//	static UFunction* pIsPlaying = 0;
//	UStreamInteraction_execIsPlaying_Parms parms;
//
//	if ( !pIsPlaying )
//		pIsPlaying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.IsPlaying" );
//
//	this->ProcessEvent ( pIsPlaying, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float UStreamInteraction::GetStreamDuration (  )
//{
//	static UFunction* pGetStreamDuration = 0;
//	UStreamInteraction_execGetStreamDuration_Parms parms;
//
//	if ( !pGetStreamDuration )
//		pGetStreamDuration = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.GetStreamDuration" );
//
//	this->ProcessEvent ( pGetStreamDuration, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float UStreamInteraction::GetStreamVolume (  )
//{
//	static UFunction* pGetStreamVolume = 0;
//	UStreamInteraction_execGetStreamVolume_Parms parms;
//
//	if ( !pGetStreamVolume )
//		pGetStreamVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.GetStreamVolume" );
//
//	this->ProcessEvent ( pGetStreamVolume, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float UStreamInteraction::GetStreamPosition (  )
//{
//	static UFunction* pGetStreamPosition = 0;
//	UStreamInteraction_execGetStreamPosition_Parms parms;
//
//	if ( !pGetStreamPosition )
//		pGetStreamPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.GetStreamPosition" );
//
//	this->ProcessEvent ( pGetStreamPosition, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamInteraction::PlayStream ( struct FString fileName, int SeekSeconds )
//{
//	static UFunction* pPlayStream = 0;
//	UStreamInteraction_execPlayStream_Parms parms;
//
//	if ( !pPlayStream )
//		pPlayStream = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.PlayStream" );
//
//	parms.fileName = fileName;
//	parms.SeekSeconds = SeekSeconds;
//	this->ProcessEvent ( pPlayStream, &parms, NULL );
//
//}
//
//bool UStreamInteraction::Seek ( float SeekSeconds )
//{
//	static UFunction* pSeek = 0;
//	UStreamInteraction_execSeek_Parms parms;
//
//	if ( !pSeek )
//		pSeek = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.Seek" );
//
//	parms.SeekSeconds = SeekSeconds;
//	this->ProcessEvent ( pSeek, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamInteraction::execSeekStream ( float Seconds )
//{
//	static UFunction* pSeekStream = 0;
//	UStreamInteraction_execSeekStream_Parms parms;
//
//	if ( !pSeekStream )
//		pSeekStream = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.SeekStream" );
//
//	parms.Seconds = Seconds;
//	this->ProcessEvent ( pSeekStream, &parms, NULL );
//
//}
//
//void UStreamInteraction::execSetMusicVolume ( float NewVolume )
//{
//	static UFunction* pSetMusicVolume = 0;
//	UStreamInteraction_execSetMusicVolume_Parms parms;
//
//	if ( !pSetMusicVolume )
//		pSetMusicVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.SetMusicVolume" );
//
//	parms.NewVolume = NewVolume;
//	this->ProcessEvent ( pSetMusicVolume, &parms, NULL );
//
//}
//
//void UStreamInteraction::execStopSong (  )
//{
//	static UFunction* pStopSong = 0;
//	UStreamInteraction_execStopSong_Parms parms;
//
//	if ( !pStopSong )
//		pStopSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.StopSong" );
//
//	this->ProcessEvent ( pStopSong, &parms, NULL );
//
//}
//
//void UStreamInteraction::execPlaySong ( struct FString SongName, float InitialTime )
//{
//	static UFunction* pPlaySong = 0;
//	UStreamInteraction_execPlaySong_Parms parms;
//
//	if ( !pPlaySong )
//		pPlaySong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.PlaySong" );
//
//	parms.SongName = SongName;
//	parms.InitialTime = InitialTime;
//	this->ProcessEvent ( pPlaySong, &parms, NULL );
//
//}
//
//void UStreamInteraction::execPauseSong (  )
//{
//	static UFunction* pPauseSong = 0;
//	UStreamInteraction_execPauseSong_Parms parms;
//
//	if ( !pPauseSong )
//		pPauseSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.PauseSong" );
//
//	this->ProcessEvent ( pPauseSong, &parms, NULL );
//
//}
//
//void UStreamInteraction::execPrevSong ( bool bForce )
//{
//	static UFunction* pPrevSong = 0;
//	UStreamInteraction_execPrevSong_Parms parms;
//
//	if ( !pPrevSong )
//		pPrevSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.PrevSong" );
//
//	parms.bForce = bForce;
//	this->ProcessEvent ( pPrevSong, &parms, NULL );
//
//}
//
//void UStreamInteraction::execNextSong ( bool bForce )
//{
//	static UFunction* pNextSong = 0;
//	UStreamInteraction_execNextSong_Parms parms;
//
//	if ( !pNextSong )
//		pNextSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.NextSong" );
//
//	parms.bForce = bForce;
//	this->ProcessEvent ( pNextSong, &parms, NULL );
//
//}
//
//int UStreamInteraction::CurrentHandle (  )
//{
//	static UFunction* pCurrentHandle = 0;
//	UStreamInteraction_execCurrentHandle_Parms parms;
//
//	if ( !pCurrentHandle )
//		pCurrentHandle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.CurrentHandle" );
//
//	this->ProcessEvent ( pCurrentHandle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStreamInteraction::execGetCurrentStream (  )
//{
//	static UFunction* pGetCurrentStream = 0;
//	UStreamInteraction_execGetCurrentStream_Parms parms;
//
//	if ( !pGetCurrentStream )
//		pGetCurrentStream = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.GetCurrentStream" );
//
//	this->ProcessEvent ( pGetCurrentStream, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamInteraction::eventNotifyLevelChange (  )
//{
//	static UFunction* pNotifyLevelChange = 0;
//	UStreamInteraction_eventNotifyLevelChange_Parms parms;
//
//	if ( !pNotifyLevelChange )
//		pNotifyLevelChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.NotifyLevelChange" );
//
//	this->ProcessEvent ( pNotifyLevelChange, &parms, NULL );
//
//}
//
//void UStreamInteraction::StreamFinished ( int Handle, unsigned char Reason )
//{
//	static UFunction* pStreamFinished = 0;
//	UStreamInteraction_execStreamFinished_Parms parms;
//
//	if ( !pStreamFinished )
//		pStreamFinished = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.StreamFinished" );
//
//	parms.Handle = Handle;
//	parms.Reason = Reason;
//	this->ProcessEvent ( pStreamFinished, &parms, NULL );
//
//}
//
//void UStreamInteraction::SetStreamAttachment ( class UStream* StreamObj )
//{
//	static UFunction* pSetStreamAttachment = 0;
//	UStreamInteraction_execSetStreamAttachment_Parms parms;
//
//	if ( !pSetStreamAttachment )
//		pSetStreamAttachment = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.SetStreamAttachment" );
//
//	parms.StreamObj = StreamObj;
//	this->ProcessEvent ( pSetStreamAttachment, &parms, NULL );
//
//}
//
//bool UStreamInteraction::IsPaused ( int SongHandle )
//{
//	static UFunction* pIsPaused = 0;
//	UStreamInteraction_execIsPaused_Parms parms;
//
//	if ( !pIsPaused )
//		pIsPaused = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.IsPaused" );
//
//	parms.SongHandle = SongHandle;
//	this->ProcessEvent ( pIsPaused, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamInteraction::eventTick ( float DeltaTime )
//{
//	static UFunction* pTick = 0;
//	UStreamInteraction_eventTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.Tick" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void UStreamInteraction::QueueNextSong (  )
//{
//	static UFunction* pQueueNextSong = 0;
//	UStreamInteraction_execQueueNextSong_Parms parms;
//
//	if ( !pQueueNextSong )
//		pQueueNextSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.QueueNextSong" );
//
//	this->ProcessEvent ( pQueueNextSong, &parms, NULL );
//
//}
//
//class UStreamPlaylistManager* UStreamInteraction::CreatePlaylistManager (  )
//{
//	static UFunction* pCreatePlaylistManager = 0;
//	UStreamInteraction_execCreatePlaylistManager_Parms parms;
//
//	if ( !pCreatePlaylistManager )
//		pCreatePlaylistManager = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.CreatePlaylistManager" );
//
//	this->ProcessEvent ( pCreatePlaylistManager, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UStreamInterface* UStreamInteraction::CreateFileManager (  )
//{
//	static UFunction* pCreateFileManager = 0;
//	UStreamInteraction_execCreateFileManager_Parms parms;
//
//	if ( !pCreateFileManager )
//		pCreateFileManager = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.CreateFileManager" );
//
//	this->ProcessEvent ( pCreateFileManager, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamInteraction::eventInitialized (  )
//{
//	static UFunction* pInitialized = 0;
//	UStreamInteraction_eventInitialized_Parms parms;
//
//	if ( !pInitialized )
//		pInitialized = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.Initialized" );
//
//	this->ProcessEvent ( pInitialized, &parms, NULL );
//
//}
//
//void UStreamInteraction::OnAdjustVolume ( float NewVolume )
//{
//	static UFunction* pOnAdjustVolume = 0;
//	UStreamInteraction_execOnAdjustVolume_Parms parms;
//
//	if ( !pOnAdjustVolume )
//		pOnAdjustVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.OnAdjustVolume" );
//
//	parms.NewVolume = NewVolume;
//	this->ProcessEvent ( pOnAdjustVolume, &parms, NULL );
//
//}
//
//void UStreamInteraction::OnStreamingStopped (  )
//{
//	static UFunction* pOnStreamingStopped = 0;
//	UStreamInteraction_execOnStreamingStopped_Parms parms;
//
//	if ( !pOnStreamingStopped )
//		pOnStreamingStopped = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.OnStreamingStopped" );
//
//	this->ProcessEvent ( pOnStreamingStopped, &parms, NULL );
//
//}
//
//void UStreamInteraction::OnStreamChanged ( struct FString NewStreamFileName )
//{
//	static UFunction* pOnStreamChanged = 0;
//	UStreamInteraction_execOnStreamChanged_Parms parms;
//
//	if ( !pOnStreamChanged )
//		pOnStreamChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamInteraction.OnStreamChanged" );
//
//	parms.NewStreamFileName = NewStreamFileName;
//	this->ProcessEvent ( pOnStreamChanged, &parms, NULL );
//
//}
//
//bool USpline::NextSplineRot ( float dt, bool bSmoothDt, bool bAccumDeltas, struct FRotator* D, struct FRotator* V, struct FRotator* A, float* outdt )
//{
//	static UFunction* pNextSplineRot = 0;
//	USpline_execNextSplineRot_Parms parms;
//
//	if ( !pNextSplineRot )
//		pNextSplineRot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Spline.NextSplineRot" );
//
//	parms.dt = dt;
//	parms.bSmoothDt = bSmoothDt;
//	parms.bAccumDeltas = bAccumDeltas;
//	this->ProcessEvent ( pNextSplineRot, &parms, NULL );
//
//	*D = parms.D;
//	*V = parms.V;
//	*A = parms.A;
//	*outdt = parms.outdt;
//	return parms.ReturnValue;
//}
//
//bool USpline::NextSplinePos ( float dt, bool bSmoothDt, bool bAccumDeltas, struct FVector* D, struct FVector* V, struct FVector* A, float* outdt )
//{
//	static UFunction* pNextSplinePos = 0;
//	USpline_execNextSplinePos_Parms parms;
//
//	if ( !pNextSplinePos )
//		pNextSplinePos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Spline.NextSplinePos" );
//
//	parms.dt = dt;
//	parms.bSmoothDt = bSmoothDt;
//	parms.bAccumDeltas = bAccumDeltas;
//	this->ProcessEvent ( pNextSplinePos, &parms, NULL );
//
//	*D = parms.D;
//	*V = parms.V;
//	*A = parms.A;
//	*outdt = parms.outdt;
//	return parms.ReturnValue;
//}
//
//bool USpline::InitSplineRot ( float t0, struct FRotator d0, struct FRotator v0, float t1, struct FRotator d1, struct FRotator v1 )
//{
//	static UFunction* pInitSplineRot = 0;
//	USpline_execInitSplineRot_Parms parms;
//
//	if ( !pInitSplineRot )
//		pInitSplineRot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Spline.InitSplineRot" );
//
//	parms.t0 = t0;
//	parms.d0 = d0;
//	parms.v0 = v0;
//	parms.t1 = t1;
//	parms.d1 = d1;
//	parms.v1 = v1;
//	this->ProcessEvent ( pInitSplineRot, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool USpline::InitSplinePath ( float t0, struct FVector d0, struct FVector v0, float t1, struct FVector d1, struct FVector v1 )
//{
//	static UFunction* pInitSplinePath = 0;
//	USpline_execInitSplinePath_Parms parms;
//
//	if ( !pInitSplinePath )
//		pInitSplinePath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Spline.InitSplinePath" );
//
//	parms.t0 = t0;
//	parms.d0 = d0;
//	parms.v0 = v0;
//	parms.t1 = t1;
//	parms.d1 = d1;
//	parms.v1 = v1;
//	this->ProcessEvent ( pInitSplinePath, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwBTLoadingScreenDrawer::eventDrawLoadingScreen ( class UCanvas* C )
//{
//	static UFunction* pDrawLoadingScreen = 0;
//	UwBTLoadingScreenDrawer_eventDrawLoadingScreen_Parms parms;
//
//	if ( !pDrawLoadingScreen )
//		pDrawLoadingScreen = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBTLoadingScreenDrawer.DrawLoadingScreen" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawLoadingScreen, &parms, NULL );
//
//}
//
//void UwBTLoadingScreenDrawer::eventClearOtherLoadingState (  )
//{
//	static UFunction* pClearOtherLoadingState = 0;
//	UwBTLoadingScreenDrawer_eventClearOtherLoadingState_Parms parms;
//
//	if ( !pClearOtherLoadingState )
//		pClearOtherLoadingState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBTLoadingScreenDrawer.ClearOtherLoadingState" );
//
//	this->ProcessEvent ( pClearOtherLoadingState, &parms, NULL );
//
//}
//
//void UwBTLoadingScreenDrawer::eventUpdateOtherLoadingState ( struct FLoadingMessageItem Item, struct FString strMsg )
//{
//	static UFunction* pUpdateOtherLoadingState = 0;
//	UwBTLoadingScreenDrawer_eventUpdateOtherLoadingState_Parms parms;
//
//	if ( !pUpdateOtherLoadingState )
//		pUpdateOtherLoadingState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBTLoadingScreenDrawer.UpdateOtherLoadingState" );
//
//	parms.Item = Item;
//	parms.strMsg = strMsg;
//	this->ProcessEvent ( pUpdateOtherLoadingState, &parms, NULL );
//
//}
//
//void UwBTLoadingScreenDrawer::eventUpdateMyLoadingState ( struct FString LoadingState )
//{
//	static UFunction* pUpdateMyLoadingState = 0;
//	UwBTLoadingScreenDrawer_eventUpdateMyLoadingState_Parms parms;
//
//	if ( !pUpdateMyLoadingState )
//		pUpdateMyLoadingState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBTLoadingScreenDrawer.UpdateMyLoadingState" );
//
//	parms.LoadingState = LoadingState;
//	this->ProcessEvent ( pUpdateMyLoadingState, &parms, NULL );
//
//}
//
//bool UwBTLoadingScreenDrawer::eventUpdateProgress ( int CurrenetProgress )
//{
//	static UFunction* pUpdateProgress = 0;
//	UwBTLoadingScreenDrawer_eventUpdateProgress_Parms parms;
//
//	if ( !pUpdateProgress )
//		pUpdateProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBTLoadingScreenDrawer.UpdateProgress" );
//
//	parms.CurrenetProgress = CurrenetProgress;
//	this->ProcessEvent ( pUpdateProgress, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwBTLoadingScreenDrawer::eventDestroyBackGroundImage (  )
//{
//	static UFunction* pDestroyBackGroundImage = 0;
//	UwBTLoadingScreenDrawer_eventDestroyBackGroundImage_Parms parms;
//
//	if ( !pDestroyBackGroundImage )
//		pDestroyBackGroundImage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBTLoadingScreenDrawer.DestroyBackGroundImage" );
//
//	this->ProcessEvent ( pDestroyBackGroundImage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwBTLoadingScreenDrawer::eventCreateBackGroundImage ( class UwMatchMaker* MatchMaker )
//{
//	static UFunction* pCreateBackGroundImage = 0;
//	UwBTLoadingScreenDrawer_eventCreateBackGroundImage_Parms parms;
//
//	if ( !pCreateBackGroundImage )
//		pCreateBackGroundImage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBTLoadingScreenDrawer.CreateBackGroundImage" );
//
//	parms.MatchMaker = MatchMaker;
//	this->ProcessEvent ( pCreateBackGroundImage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwBTLoadingScreenDrawer::eventInitialize (  )
//{
//	static UFunction* pInitialize = 0;
//	UwBTLoadingScreenDrawer_eventInitialize_Parms parms;
//
//	if ( !pInitialize )
//		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBTLoadingScreenDrawer.Initialize" );
//
//	this->ProcessEvent ( pInitialize, &parms, NULL );
//
//}
//
//void UwBTLoadingScreenDrawer::RemoveFromRoot ( class UMaterial* Image )
//{
//	static UFunction* pRemoveFromRoot = 0;
//	UwBTLoadingScreenDrawer_execRemoveFromRoot_Parms parms;
//
//	if ( !pRemoveFromRoot )
//		pRemoveFromRoot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBTLoadingScreenDrawer.RemoveFromRoot" );
//
//	parms.Image = Image;
//	this->ProcessEvent ( pRemoveFromRoot, &parms, NULL );
//
//}
//
//void UwBTLoadingScreenDrawer::AddToRoot ( class UMaterial* Image )
//{
//	static UFunction* pAddToRoot = 0;
//	UwBTLoadingScreenDrawer_execAddToRoot_Parms parms;
//
//	if ( !pAddToRoot )
//		pAddToRoot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wBTLoadingScreenDrawer.AddToRoot" );
//
//	parms.Image = Image;
//	this->ProcessEvent ( pAddToRoot, &parms, NULL );
//
//}
//
//struct FString AInfo::eventGetDescriptionText ( struct FString PropName )
//{
//	static UFunction* pGetDescriptionText = 0;
//	AInfo_eventGetDescriptionText_Parms parms;
//
//	if ( !pGetDescriptionText )
//		pGetDescriptionText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Info.GetDescriptionText" );
//
//	parms.PropName = PropName;
//	this->ProcessEvent ( pGetDescriptionText, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char AInfo::eventGetSecurityLevel ( struct FString PropName )
//{
//	static UFunction* pGetSecurityLevel = 0;
//	AInfo_eventGetSecurityLevel_Parms parms;
//
//	if ( !pGetSecurityLevel )
//		pGetSecurityLevel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Info.GetSecurityLevel" );
//
//	parms.PropName = PropName;
//	this->ProcessEvent ( pGetSecurityLevel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AInfo::eventAllowClassRemoval (  )
//{
//	static UFunction* pAllowClassRemoval = 0;
//	AInfo_eventAllowClassRemoval_Parms parms;
//
//	if ( !pAllowClassRemoval )
//		pAllowClassRemoval = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Info.AllowClassRemoval" );
//
//	this->ProcessEvent ( pAllowClassRemoval, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AInfo::eventAcceptPlayInfoProperty ( struct FString PropertyName )
//{
//	static UFunction* pAcceptPlayInfoProperty = 0;
//	AInfo_eventAcceptPlayInfoProperty_Parms parms;
//
//	if ( !pAcceptPlayInfoProperty )
//		pAcceptPlayInfoProperty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Info.AcceptPlayInfoProperty" );
//
//	parms.PropertyName = PropertyName;
//	this->ProcessEvent ( pAcceptPlayInfoProperty, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AInfo::FillPlayInfo ( class UPlayInfo* PlayInfo )
//{
//	static UFunction* pFillPlayInfo = 0;
//	AInfo_execFillPlayInfo_Parms parms;
//
//	if ( !pFillPlayInfo )
//		pFillPlayInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Info.FillPlayInfo" );
//
//	parms.PlayInfo = PlayInfo;
//	this->ProcessEvent ( pFillPlayInfo, &parms, NULL );
//
//}
//
//void APlayerChatManager::ChatDebug (  )
//{
//	static UFunction* pChatDebug = 0;
//	APlayerChatManager_execChatDebug_Parms parms;
//
//	if ( !pChatDebug )
//		pChatDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.ChatDebug" );
//
//	this->ProcessEvent ( pChatDebug, &parms, NULL );
//
//}
//
//int APlayerChatManager::Count (  )
//{
//	static UFunction* pCount = 0;
//	APlayerChatManager_execCount_Parms parms;
//
//	if ( !pCount )
//		pCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.Count" );
//
//	this->ProcessEvent ( pCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char APlayerChatManager::GetPlayerRestriction ( int PlayerID )
//{
//	static UFunction* pGetPlayerRestriction = 0;
//	APlayerChatManager_execGetPlayerRestriction_Parms parms;
//
//	if ( !pGetPlayerRestriction )
//		pGetPlayerRestriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.GetPlayerRestriction" );
//
//	parms.PlayerID = PlayerID;
//	this->ProcessEvent ( pGetPlayerRestriction, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerChatManager::ClientIsBanned ( struct FString PlayerHash )
//{
//	static UFunction* pClientIsBanned = 0;
//	APlayerChatManager_execClientIsBanned_Parms parms;
//
//	if ( !pClientIsBanned )
//		pClientIsBanned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.ClientIsBanned" );
//
//	parms.PlayerHash = PlayerHash;
//	this->ProcessEvent ( pClientIsBanned, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerChatManager::IsBanned ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pIsBanned = 0;
//	APlayerChatManager_execIsBanned_Parms parms;
//
//	if ( !pIsBanned )
//		pIsBanned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.IsBanned" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pIsBanned, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerChatManager::ClearRestrictionID ( int PlayerID, unsigned char Type )
//{
//	static UFunction* pClearRestrictionID = 0;
//	APlayerChatManager_execClearRestrictionID_Parms parms;
//
//	if ( !pClearRestrictionID )
//		pClearRestrictionID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.ClearRestrictionID" );
//
//	parms.PlayerID = PlayerID;
//	parms.Type = Type;
//	this->ProcessEvent ( pClearRestrictionID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerChatManager::ClearRestriction ( struct FString PlayerHash, unsigned char Type )
//{
//	static UFunction* pClearRestriction = 0;
//	APlayerChatManager_execClearRestriction_Parms parms;
//
//	if ( !pClearRestriction )
//		pClearRestriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.ClearRestriction" );
//
//	parms.PlayerHash = PlayerHash;
//	parms.Type = Type;
//	this->ProcessEvent ( pClearRestriction, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerChatManager::AddRestrictionID ( int PlayerID, unsigned char Type )
//{
//	static UFunction* pAddRestrictionID = 0;
//	APlayerChatManager_execAddRestrictionID_Parms parms;
//
//	if ( !pAddRestrictionID )
//		pAddRestrictionID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.AddRestrictionID" );
//
//	parms.PlayerID = PlayerID;
//	parms.Type = Type;
//	this->ProcessEvent ( pAddRestrictionID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerChatManager::AddRestriction ( struct FString PlayerHash, unsigned char Type )
//{
//	static UFunction* pAddRestriction = 0;
//	APlayerChatManager_execAddRestriction_Parms parms;
//
//	if ( !pAddRestriction )
//		pAddRestriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.AddRestriction" );
//
//	parms.PlayerHash = PlayerHash;
//	parms.Type = Type;
//	this->ProcessEvent ( pAddRestriction, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerChatManager::SetRestrictionID ( int PlayerID, unsigned char Type )
//{
//	static UFunction* pSetRestrictionID = 0;
//	APlayerChatManager_execSetRestrictionID_Parms parms;
//
//	if ( !pSetRestrictionID )
//		pSetRestrictionID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.SetRestrictionID" );
//
//	parms.PlayerID = PlayerID;
//	parms.Type = Type;
//	this->ProcessEvent ( pSetRestrictionID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerChatManager::SetRestriction ( struct FString PlayerHash, unsigned char Type )
//{
//	static UFunction* pSetRestriction = 0;
//	APlayerChatManager_execSetRestriction_Parms parms;
//
//	if ( !pSetRestriction )
//		pSetRestriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.SetRestriction" );
//
//	parms.PlayerHash = PlayerHash;
//	parms.Type = Type;
//	this->ProcessEvent ( pSetRestriction, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerChatManager::eventAcceptVoice ( class APlayerReplicationInfo* Sender )
//{
//	static UFunction* pAcceptVoice = 0;
//	APlayerChatManager_eventAcceptVoice_Parms parms;
//
//	if ( !pAcceptVoice )
//		pAcceptVoice = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.AcceptVoice" );
//
//	parms.Sender = Sender;
//	this->ProcessEvent ( pAcceptVoice, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerChatManager::AcceptSpeech ( class APlayerReplicationInfo* Sender )
//{
//	static UFunction* pAcceptSpeech = 0;
//	APlayerChatManager_execAcceptSpeech_Parms parms;
//
//	if ( !pAcceptSpeech )
//		pAcceptSpeech = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.AcceptSpeech" );
//
//	parms.Sender = Sender;
//	this->ProcessEvent ( pAcceptSpeech, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerChatManager::AcceptLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* obj )
//{
//	static UFunction* pAcceptLocalized = 0;
//	APlayerChatManager_execAcceptLocalized_Parms parms;
//
//	if ( !pAcceptLocalized )
//		pAcceptLocalized = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.AcceptLocalized" );
//
//	parms.Sender = Sender;
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.obj = obj;
//	this->ProcessEvent ( pAcceptLocalized, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerChatManager::AcceptText ( class APlayerReplicationInfo* Sender, struct FName Type, struct FString* Msg )
//{
//	static UFunction* pAcceptText = 0;
//	APlayerChatManager_execAcceptText_Parms parms;
//
//	if ( !pAcceptText )
//		pAcceptText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.AcceptText" );
//
//	parms.Sender = Sender;
//	parms.Type = Type;
//	this->ProcessEvent ( pAcceptText, &parms, NULL );
//
//	*Msg = parms.Msg;
//	return parms.ReturnValue;
//}
//
//void APlayerChatManager::UnTrackPlayer ( int PlayerID )
//{
//	static UFunction* pUnTrackPlayer = 0;
//	APlayerChatManager_execUnTrackPlayer_Parms parms;
//
//	if ( !pUnTrackPlayer )
//		pUnTrackPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.UnTrackPlayer" );
//
//	parms.PlayerID = PlayerID;
//	this->ProcessEvent ( pUnTrackPlayer, &parms, NULL );
//
//}
//
//void APlayerChatManager::TrackNewPlayer ( int PlayerID, struct FString PlayerHash, struct FString PlayerAddress )
//{
//	static UFunction* pTrackNewPlayer = 0;
//	APlayerChatManager_execTrackNewPlayer_Parms parms;
//
//	if ( !pTrackNewPlayer )
//		pTrackNewPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.TrackNewPlayer" );
//
//	parms.PlayerID = PlayerID;
//	parms.PlayerHash = PlayerHash;
//	parms.PlayerAddress = PlayerAddress;
//	this->ProcessEvent ( pTrackNewPlayer, &parms, NULL );
//
//}
//
//void APlayerChatManager::ReceiveBanInfo ( struct FString S )
//{
//	static UFunction* pReceiveBanInfo = 0;
//	APlayerChatManager_execReceiveBanInfo_Parms parms;
//
//	if ( !pReceiveBanInfo )
//		pReceiveBanInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.ReceiveBanInfo" );
//
//	parms.S = S;
//	this->ProcessEvent ( pReceiveBanInfo, &parms, NULL );
//
//}
//
//void APlayerChatManager::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	APlayerChatManager_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerChatManager.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//bool AVoiceChatRoom::NotifyTeamChange ( class APlayerReplicationInfo* PRI, int NewTeamIndex )
//{
//	static UFunction* pNotifyTeamChange = 0;
//	AVoiceChatRoom_execNotifyTeamChange_Parms parms;
//
//	if ( !pNotifyTeamChange )
//		pNotifyTeamChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.NotifyTeamChange" );
//
//	parms.PRI = PRI;
//	parms.NewTeamIndex = NewTeamIndex;
//	this->ProcessEvent ( pNotifyTeamChange, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVoiceChatRoom::RemoveChild ( class AVoiceChatRoom* Child )
//{
//	static UFunction* pRemoveChild = 0;
//	AVoiceChatRoom_execRemoveChild_Parms parms;
//
//	if ( !pRemoveChild )
//		pRemoveChild = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.RemoveChild" );
//
//	parms.Child = Child;
//	this->ProcessEvent ( pRemoveChild, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVoiceChatRoom::AddChild ( class AVoiceChatRoom* NewChild )
//{
//	static UFunction* pAddChild = 0;
//	AVoiceChatRoom_execAddChild_Parms parms;
//
//	if ( !pAddChild )
//		pAddChild = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.AddChild" );
//
//	parms.NewChild = NewChild;
//	this->ProcessEvent ( pAddChild, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVoiceChatRoom::SetChannelPassword ( struct FString InPassword )
//{
//	static UFunction* pSetChannelPassword = 0;
//	AVoiceChatRoom_execSetChannelPassword_Parms parms;
//
//	if ( !pSetChannelPassword )
//		pSetChannelPassword = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.SetChannelPassword" );
//
//	parms.InPassword = InPassword;
//	this->ProcessEvent ( pSetChannelPassword, &parms, NULL );
//
//}
//
//void AVoiceChatRoom::SetMemberMask ( int NewMask )
//{
//	static UFunction* pSetMemberMask = 0;
//	AVoiceChatRoom_execSetMemberMask_Parms parms;
//
//	if ( !pSetMemberMask )
//		pSetMemberMask = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.SetMemberMask" );
//
//	parms.NewMask = NewMask;
//	this->ProcessEvent ( pSetMemberMask, &parms, NULL );
//
//}
//
//void AVoiceChatRoom::SetTeam ( int NewTeam )
//{
//	static UFunction* pSetTeam = 0;
//	AVoiceChatRoom_execSetTeam_Parms parms;
//
//	if ( !pSetTeam )
//		pSetTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.SetTeam" );
//
//	parms.NewTeam = NewTeam;
//	this->ProcessEvent ( pSetTeam, &parms, NULL );
//
//}
//
//void AVoiceChatRoom::RemoveMember ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pRemoveMember = 0;
//	AVoiceChatRoom_execRemoveMember_Parms parms;
//
//	if ( !pRemoveMember )
//		pRemoveMember = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.RemoveMember" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pRemoveMember, &parms, NULL );
//
//}
//
//void AVoiceChatRoom::AddMember ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pAddMember = 0;
//	AVoiceChatRoom_execAddMember_Parms parms;
//
//	if ( !pAddMember )
//		pAddMember = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.AddMember" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pAddMember, &parms, NULL );
//
//}
//
//bool AVoiceChatRoom::LeaveChannel ( class APlayerReplicationInfo* LeavingPRI )
//{
//	static UFunction* pLeaveChannel = 0;
//	AVoiceChatRoom_execLeaveChannel_Parms parms;
//
//	if ( !pLeaveChannel )
//		pLeaveChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.LeaveChannel" );
//
//	parms.LeavingPRI = LeavingPRI;
//	this->ProcessEvent ( pLeaveChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char AVoiceChatRoom::JoinChannel ( class APlayerReplicationInfo* NewPRI, struct FString InPassword )
//{
//	static UFunction* pJoinChannel = 0;
//	AVoiceChatRoom_execJoinChannel_Parms parms;
//
//	if ( !pJoinChannel )
//		pJoinChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.JoinChannel" );
//
//	parms.NewPRI = NewPRI;
//	parms.InPassword = InPassword;
//	this->ProcessEvent ( pJoinChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVoiceChatRoom::eventIsMember ( class APlayerReplicationInfo* PRI, bool bNoCascade )
//{
//	static UFunction* pIsMember = 0;
//	AVoiceChatRoom_eventIsMember_Parms parms;
//
//	if ( !pIsMember )
//		pIsMember = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.IsMember" );
//
//	parms.PRI = PRI;
//	parms.bNoCascade = bNoCascade;
//	this->ProcessEvent ( pIsMember, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVoiceChatRoom::IsFull (  )
//{
//	static UFunction* pIsFull = 0;
//	AVoiceChatRoom_execIsFull_Parms parms;
//
//	if ( !pIsFull )
//		pIsFull = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.IsFull" );
//
//	this->ProcessEvent ( pIsFull, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVoiceChatRoom::CanJoinChannel ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pCanJoinChannel = 0;
//	AVoiceChatRoom_execCanJoinChannel_Parms parms;
//
//	if ( !pCanJoinChannel )
//		pCanJoinChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.CanJoinChannel" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pCanJoinChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVoiceChatRoom::IsPrivateChannel (  )
//{
//	static UFunction* pIsPrivateChannel = 0;
//	AVoiceChatRoom_execIsPrivateChannel_Parms parms;
//
//	if ( !pIsPrivateChannel )
//		pIsPrivateChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.IsPrivateChannel" );
//
//	this->ProcessEvent ( pIsPrivateChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVoiceChatRoom::IsTeamChannel (  )
//{
//	static UFunction* pIsTeamChannel = 0;
//	AVoiceChatRoom_execIsTeamChannel_Parms parms;
//
//	if ( !pIsTeamChannel )
//		pIsTeamChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.IsTeamChannel" );
//
//	this->ProcessEvent ( pIsTeamChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVoiceChatRoom::IsPublicChannel (  )
//{
//	static UFunction* pIsPublicChannel = 0;
//	AVoiceChatRoom_execIsPublicChannel_Parms parms;
//
//	if ( !pIsPublicChannel )
//		pIsPublicChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.IsPublicChannel" );
//
//	this->ProcessEvent ( pIsPublicChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AVoiceChatRoom::GetTeam (  )
//{
//	static UFunction* pGetTeam = 0;
//	AVoiceChatRoom_execGetTeam_Parms parms;
//
//	if ( !pGetTeam )
//		pGetTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.GetTeam" );
//
//	this->ProcessEvent ( pGetTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AVoiceChatRoom::GetTitle (  )
//{
//	static UFunction* pGetTitle = 0;
//	AVoiceChatRoom_execGetTitle_Parms parms;
//
//	if ( !pGetTitle )
//		pGetTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.GetTitle" );
//
//	this->ProcessEvent ( pGetTitle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVoiceChatRoom::ValidMask (  )
//{
//	static UFunction* pValidMask = 0;
//	AVoiceChatRoom_execValidMask_Parms parms;
//
//	if ( !pValidMask )
//		pValidMask = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.ValidMask" );
//
//	this->ProcessEvent ( pValidMask, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AVoiceChatRoom::GetPassword (  )
//{
//	static UFunction* pGetPassword = 0;
//	AVoiceChatRoom_execGetPassword_Parms parms;
//
//	if ( !pGetPassword )
//		pGetPassword = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.GetPassword" );
//
//	this->ProcessEvent ( pGetPassword, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AVoiceChatRoom::GetMask (  )
//{
//	static UFunction* pGetMask = 0;
//	AVoiceChatRoom_execGetMask_Parms parms;
//
//	if ( !pGetMask )
//		pGetMask = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.GetMask" );
//
//	this->ProcessEvent ( pGetMask, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AVoiceChatRoom::GetMaxChatters (  )
//{
//	static UFunction* pGetMaxChatters = 0;
//	AVoiceChatRoom_execGetMaxChatters_Parms parms;
//
//	if ( !pGetMaxChatters )
//		pGetMaxChatters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.GetMaxChatters" );
//
//	this->ProcessEvent ( pGetMaxChatters, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< class APlayerReplicationInfo* > AVoiceChatRoom::GetMembers (  )
//{
//	static UFunction* pGetMembers = 0;
//	AVoiceChatRoom_execGetMembers_Parms parms;
//
//	if ( !pGetMembers )
//		pGetMembers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatRoom.GetMembers" );
//
//	this->ProcessEvent ( pGetMembers, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AVoiceChatReplicationInfo::GetTitle ( class AVoiceChatRoom* Room )
//{
//	static UFunction* pGetTitle = 0;
//	AVoiceChatReplicationInfo_execGetTitle_Parms parms;
//
//	if ( !pGetTitle )
//		pGetTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetTitle" );
//
//	parms.Room = Room;
//	this->ProcessEvent ( pGetTitle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AVoiceChatReplicationInfo::GetMask ( class AVoiceChatRoom* Room )
//{
//	static UFunction* pGetMask = 0;
//	AVoiceChatReplicationInfo_execGetMask_Parms parms;
//
//	if ( !pGetMask )
//		pGetMask = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetMask" );
//
//	parms.Room = Room;
//	this->ProcessEvent ( pGetMask, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVoiceChatReplicationInfo::SetMask ( class AVoiceChatRoom* Room, int NewMask )
//{
//	static UFunction* pSetMask = 0;
//	AVoiceChatReplicationInfo_execSetMask_Parms parms;
//
//	if ( !pSetMask )
//		pSetMask = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.SetMask" );
//
//	parms.Room = Room;
//	parms.NewMask = NewMask;
//	this->ProcessEvent ( pSetMask, &parms, NULL );
//
//}
//
//bool AVoiceChatReplicationInfo::ValidRoom ( class AVoiceChatRoom* Room )
//{
//	static UFunction* pValidRoom = 0;
//	AVoiceChatReplicationInfo_execValidRoom_Parms parms;
//
//	if ( !pValidRoom )
//		pValidRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.ValidRoom" );
//
//	parms.Room = Room;
//	this->ProcessEvent ( pValidRoom, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVoiceChatReplicationInfo::GetCodecInfo ( struct FString Codec, struct FString* CodecName, struct FString* CodecDescription )
//{
//	static UFunction* pGetCodecInfo = 0;
//	AVoiceChatReplicationInfo_execGetCodecInfo_Parms parms;
//
//	if ( !pGetCodecInfo )
//		pGetCodecInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetCodecInfo" );
//
//	parms.Codec = Codec;
//	this->ProcessEvent ( pGetCodecInfo, &parms, NULL );
//
//	*CodecName = parms.CodecName;
//	*CodecDescription = parms.CodecDescription;
//	return parms.ReturnValue;
//}
//
//void AVoiceChatReplicationInfo::GetInstalledCodecs ( class TArray< struct FString >* Codecs )
//{
//	static UFunction* pGetInstalledCodecs = 0;
//	AVoiceChatReplicationInfo_execGetInstalledCodecs_Parms parms;
//
//	if ( !pGetInstalledCodecs )
//		pGetInstalledCodecs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetInstalledCodecs" );
//
//	parms.Codecs = *Codecs;
//	this->ProcessEvent ( pGetInstalledCodecs, &parms, NULL );
//
//	*Codecs = parms.Codecs;
//}
//
//struct FString AVoiceChatReplicationInfo::eventGetDescriptionText ( struct FString PropName )
//{
//	static UFunction* pGetDescriptionText = 0;
//	AVoiceChatReplicationInfo_eventGetDescriptionText_Parms parms;
//
//	if ( !pGetDescriptionText )
//		pGetDescriptionText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetDescriptionText" );
//
//	parms.PropName = PropName;
//	this->ProcessEvent ( pGetDescriptionText, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVoiceChatReplicationInfo::FillPlayInfo ( class UPlayInfo* PlayInfo )
//{
//	static UFunction* pFillPlayInfo = 0;
//	AVoiceChatReplicationInfo_execFillPlayInfo_Parms parms;
//
//	if ( !pFillPlayInfo )
//		pFillPlayInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.FillPlayInfo" );
//
//	parms.PlayInfo = PlayInfo;
//	this->ProcessEvent ( pFillPlayInfo, &parms, NULL );
//
//}
//
//void AVoiceChatReplicationInfo::CheckChannels (  )
//{
//	static UFunction* pCheckChannels = 0;
//	AVoiceChatReplicationInfo_execCheckChannels_Parms parms;
//
//	if ( !pCheckChannels )
//		pCheckChannels = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.CheckChannels" );
//
//	this->ProcessEvent ( pCheckChannels, &parms, NULL );
//
//}
//
//void AVoiceChatReplicationInfo::DestroyVoiceChannel ( class AVoiceChatRoom* Channel )
//{
//	static UFunction* pDestroyVoiceChannel = 0;
//	AVoiceChatReplicationInfo_execDestroyVoiceChannel_Parms parms;
//
//	if ( !pDestroyVoiceChannel )
//		pDestroyVoiceChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.DestroyVoiceChannel" );
//
//	parms.Channel = Channel;
//	this->ProcessEvent ( pDestroyVoiceChannel, &parms, NULL );
//
//}
//
//class AVoiceChatRoom* AVoiceChatReplicationInfo::CreateNewVoiceChannel ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pCreateNewVoiceChannel = 0;
//	AVoiceChatReplicationInfo_execCreateNewVoiceChannel_Parms parms;
//
//	if ( !pCreateNewVoiceChannel )
//		pCreateNewVoiceChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.CreateNewVoiceChannel" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pCreateNewVoiceChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVoiceChatReplicationInfo::IsMember ( class APlayerReplicationInfo* TestPRI, int ChannelIndex, bool bNoCascade )
//{
//	static UFunction* pIsMember = 0;
//	AVoiceChatReplicationInfo_execIsMember_Parms parms;
//
//	if ( !pIsMember )
//		pIsMember = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.IsMember" );
//
//	parms.TestPRI = TestPRI;
//	parms.ChannelIndex = ChannelIndex;
//	parms.bNoCascade = bNoCascade;
//	this->ProcessEvent ( pIsMember, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AVoiceChatReplicationInfo::GetPlayerChannelCount (  )
//{
//	static UFunction* pGetPlayerChannelCount = 0;
//	AVoiceChatReplicationInfo_execGetPlayerChannelCount_Parms parms;
//
//	if ( !pGetPlayerChannelCount )
//		pGetPlayerChannelCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetPlayerChannelCount" );
//
//	this->ProcessEvent ( pGetPlayerChannelCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AVoiceChatReplicationInfo::GetPublicChannelCount ( bool bSingleTeam )
//{
//	static UFunction* pGetPublicChannelCount = 0;
//	AVoiceChatReplicationInfo_execGetPublicChannelCount_Parms parms;
//
//	if ( !pGetPublicChannelCount )
//		pGetPublicChannelCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetPublicChannelCount" );
//
//	parms.bSingleTeam = bSingleTeam;
//	this->ProcessEvent ( pGetPublicChannelCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< class AVoiceChatRoom* > AVoiceChatReplicationInfo::GetPlayerChannels (  )
//{
//	static UFunction* pGetPlayerChannels = 0;
//	AVoiceChatReplicationInfo_execGetPlayerChannels_Parms parms;
//
//	if ( !pGetPlayerChannels )
//		pGetPlayerChannels = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetPlayerChannels" );
//
//	this->ProcessEvent ( pGetPlayerChannels, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< class AVoiceChatRoom* > AVoiceChatReplicationInfo::GetPublicChannels (  )
//{
//	static UFunction* pGetPublicChannels = 0;
//	AVoiceChatReplicationInfo_execGetPublicChannels_Parms parms;
//
//	if ( !pGetPublicChannels )
//		pGetPublicChannels = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetPublicChannels" );
//
//	this->ProcessEvent ( pGetPublicChannels, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< class AVoiceChatRoom* > AVoiceChatReplicationInfo::GetChannels (  )
//{
//	static UFunction* pGetChannels = 0;
//	AVoiceChatReplicationInfo_execGetChannels_Parms parms;
//
//	if ( !pGetChannels )
//		pGetChannels = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetChannels" );
//
//	this->ProcessEvent ( pGetChannels, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AVoiceChatReplicationInfo::GetDefaultChannel (  )
//{
//	static UFunction* pGetDefaultChannel = 0;
//	AVoiceChatReplicationInfo_execGetDefaultChannel_Parms parms;
//
//	if ( !pGetDefaultChannel )
//		pGetDefaultChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetDefaultChannel" );
//
//	this->ProcessEvent ( pGetDefaultChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< int > AVoiceChatReplicationInfo::GetMemberChannels ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pGetMemberChannels = 0;
//	AVoiceChatReplicationInfo_execGetMemberChannels_Parms parms;
//
//	if ( !pGetMemberChannels )
//		pGetMemberChannels = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetMemberChannels" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pGetMemberChannels, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< int > AVoiceChatReplicationInfo::GetChannelMembersAt ( int Index )
//{
//	static UFunction* pGetChannelMembersAt = 0;
//	AVoiceChatReplicationInfo_execGetChannelMembersAt_Parms parms;
//
//	if ( !pGetChannelMembersAt )
//		pGetChannelMembersAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetChannelMembersAt" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pGetChannelMembersAt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< int > AVoiceChatReplicationInfo::GetChannelMembers ( struct FString ChatRoomName, int TeamIndex )
//{
//	static UFunction* pGetChannelMembers = 0;
//	AVoiceChatReplicationInfo_execGetChannelMembers_Parms parms;
//
//	if ( !pGetChannelMembers )
//		pGetChannelMembers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetChannelMembers" );
//
//	parms.ChatRoomName = ChatRoomName;
//	parms.TeamIndex = TeamIndex;
//	this->ProcessEvent ( pGetChannelMembers, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AVoiceChatRoom* AVoiceChatReplicationInfo::GetChannelAt ( int Index )
//{
//	static UFunction* pGetChannelAt = 0;
//	AVoiceChatReplicationInfo_execGetChannelAt_Parms parms;
//
//	if ( !pGetChannelAt )
//		pGetChannelAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetChannelAt" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pGetChannelAt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AVoiceChatRoom* AVoiceChatReplicationInfo::GetChannel ( struct FString ChatRoomName, int TeamIndex )
//{
//	static UFunction* pGetChannel = 0;
//	AVoiceChatReplicationInfo_execGetChannel_Parms parms;
//
//	if ( !pGetChannel )
//		pGetChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetChannel" );
//
//	parms.ChatRoomName = ChatRoomName;
//	parms.TeamIndex = TeamIndex;
//	this->ProcessEvent ( pGetChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AVoiceChatReplicationInfo::eventGetChannelIndex ( struct FString ChannelTitle, int TeamIndex )
//{
//	static UFunction* pGetChannelIndex = 0;
//	AVoiceChatReplicationInfo_eventGetChannelIndex_Parms parms;
//
//	if ( !pGetChannelIndex )
//		pGetChannelIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetChannelIndex" );
//
//	parms.ChannelTitle = ChannelTitle;
//	parms.TeamIndex = TeamIndex;
//	this->ProcessEvent ( pGetChannelIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AVoiceChatReplicationInfo::eventGetChannelCount (  )
//{
//	static UFunction* pGetChannelCount = 0;
//	AVoiceChatReplicationInfo_eventGetChannelCount_Parms parms;
//
//	if ( !pGetChannelCount )
//		pGetChannelCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.GetChannelCount" );
//
//	this->ProcessEvent ( pGetChannelCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVoiceChatReplicationInfo::NotifyTeamChange ( class APlayerReplicationInfo* PRI, int TeamIndex )
//{
//	static UFunction* pNotifyTeamChange = 0;
//	AVoiceChatReplicationInfo_execNotifyTeamChange_Parms parms;
//
//	if ( !pNotifyTeamChange )
//		pNotifyTeamChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.NotifyTeamChange" );
//
//	parms.PRI = PRI;
//	parms.TeamIndex = TeamIndex;
//	this->ProcessEvent ( pNotifyTeamChange, &parms, NULL );
//
//}
//
//bool AVoiceChatReplicationInfo::RemoveVoiceChannel ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pRemoveVoiceChannel = 0;
//	AVoiceChatReplicationInfo_execRemoveVoiceChannel_Parms parms;
//
//	if ( !pRemoveVoiceChannel )
//		pRemoveVoiceChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.RemoveVoiceChannel" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pRemoveVoiceChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AVoiceChatRoom* AVoiceChatReplicationInfo::AddVoiceChannel ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pAddVoiceChannel = 0;
//	AVoiceChatReplicationInfo_execAddVoiceChannel_Parms parms;
//
//	if ( !pAddVoiceChannel )
//		pAddVoiceChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.AddVoiceChannel" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pAddVoiceChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVoiceChatReplicationInfo::LeaveChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pLeaveChannel = 0;
//	AVoiceChatReplicationInfo_execLeaveChannel_Parms parms;
//
//	if ( !pLeaveChannel )
//		pLeaveChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.LeaveChannel" );
//
//	parms.ChannelTitle = ChannelTitle;
//	parms.PRI = PRI;
//	this->ProcessEvent ( pLeaveChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char AVoiceChatReplicationInfo::JoinChannelAt ( int ChannelIndex, class APlayerReplicationInfo* PRI, struct FString Password )
//{
//	static UFunction* pJoinChannelAt = 0;
//	AVoiceChatReplicationInfo_execJoinChannelAt_Parms parms;
//
//	if ( !pJoinChannelAt )
//		pJoinChannelAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.JoinChannelAt" );
//
//	parms.ChannelIndex = ChannelIndex;
//	parms.PRI = PRI;
//	parms.Password = Password;
//	this->ProcessEvent ( pJoinChannelAt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char AVoiceChatReplicationInfo::JoinChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI, struct FString Password )
//{
//	static UFunction* pJoinChannel = 0;
//	AVoiceChatReplicationInfo_execJoinChannel_Parms parms;
//
//	if ( !pJoinChannel )
//		pJoinChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.JoinChannel" );
//
//	parms.ChannelTitle = ChannelTitle;
//	parms.PRI = PRI;
//	parms.Password = Password;
//	this->ProcessEvent ( pJoinChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVoiceChatReplicationInfo::CanJoinChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pCanJoinChannel = 0;
//	AVoiceChatReplicationInfo_execCanJoinChannel_Parms parms;
//
//	if ( !pCanJoinChannel )
//		pCanJoinChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.CanJoinChannel" );
//
//	parms.ChannelTitle = ChannelTitle;
//	parms.PRI = PRI;
//	this->ProcessEvent ( pCanJoinChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVoiceChatReplicationInfo::RemoveVoiceChatter ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pRemoveVoiceChatter = 0;
//	AVoiceChatReplicationInfo_execRemoveVoiceChatter_Parms parms;
//
//	if ( !pRemoveVoiceChatter )
//		pRemoveVoiceChatter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.RemoveVoiceChatter" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pRemoveVoiceChatter, &parms, NULL );
//
//}
//
//void AVoiceChatReplicationInfo::AddVoiceChatter ( class APlayerReplicationInfo* NewPRI )
//{
//	static UFunction* pAddVoiceChatter = 0;
//	AVoiceChatReplicationInfo_execAddVoiceChatter_Parms parms;
//
//	if ( !pAddVoiceChatter )
//		pAddVoiceChatter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.AddVoiceChatter" );
//
//	parms.NewPRI = NewPRI;
//	this->ProcessEvent ( pAddVoiceChatter, &parms, NULL );
//
//}
//
//void AVoiceChatReplicationInfo::InitChannels (  )
//{
//	static UFunction* pInitChannels = 0;
//	AVoiceChatReplicationInfo_execInitChannels_Parms parms;
//
//	if ( !pInitChannels )
//		pInitChannels = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.InitChannels" );
//
//	this->ProcessEvent ( pInitChannels, &parms, NULL );
//
//}
//
//void AVoiceChatReplicationInfo::eventPostNetBeginPlay (  )
//{
//	static UFunction* pPostNetBeginPlay = 0;
//	AVoiceChatReplicationInfo_eventPostNetBeginPlay_Parms parms;
//
//	if ( !pPostNetBeginPlay )
//		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.PostNetBeginPlay" );
//
//	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );
//
//}
//
//void AVoiceChatReplicationInfo::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AVoiceChatReplicationInfo_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AVoiceChatReplicationInfo::eventTimer (  )
//{
//	static UFunction* pTimer = 0;
//	AVoiceChatReplicationInfo_eventTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VoiceChatReplicationInfo.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//void AVertMeshActor::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AVertMeshActor_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VertMeshActor.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void UParticleEmitter::Reset (  )
//{
//	static UFunction* pReset = 0;
//	UParticleEmitter_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ParticleEmitter.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void UParticleEmitter::Trigger (  )
//{
//	static UFunction* pTrigger = 0;
//	UParticleEmitter_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ParticleEmitter.Trigger" );
//
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void UParticleEmitter::SpawnParticle ( int Amount )
//{
//	static UFunction* pSpawnParticle = 0;
//	UParticleEmitter_execSpawnParticle_Parms parms;
//
//	if ( !pSpawnParticle )
//		pSpawnParticle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ParticleEmitter.SpawnParticle" );
//
//	parms.Amount = Amount;
//	this->ProcessEvent ( pSpawnParticle, &parms, NULL );
//
//}
//
//void UTrailEmitter::ResetTrail (  )
//{
//	static UFunction* pResetTrail = 0;
//	UTrailEmitter_execResetTrail_Parms parms;
//
//	if ( !pResetTrail )
//		pResetTrail = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TrailEmitter.ResetTrail" );
//
//	this->ProcessEvent ( pResetTrail, &parms, NULL );
//
//}
//
//int UMaterial::MaterialVSize (  )
//{
//	static UFunction* pMaterialVSize = 0;
//	UMaterial_execMaterialVSize_Parms parms;
//
//	if ( !pMaterialVSize )
//		pMaterialVSize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Material.MaterialVSize" );
//
//	this->ProcessEvent ( pMaterialVSize, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UMaterial::MaterialUSize (  )
//{
//	static UFunction* pMaterialUSize = 0;
//	UMaterial_execMaterialUSize_Parms parms;
//
//	if ( !pMaterialUSize )
//		pMaterialUSize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Material.MaterialUSize" );
//
//	this->ProcessEvent ( pMaterialUSize, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UMaterial::Trigger ( class AActor* Other, class AActor* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	UMaterial_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Material.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void UMaterial::Reset (  )
//{
//	static UFunction* pReset = 0;
//	UMaterial_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Material.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void ATerrainInfo::PokeTerrain ( struct FVector WorldLocation, int Radius, int MaxDepth )
//{
//	static UFunction* pPokeTerrain = 0;
//	ATerrainInfo_execPokeTerrain_Parms parms;
//
//	if ( !pPokeTerrain )
//		pPokeTerrain = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TerrainInfo.PokeTerrain" );
//
//	parms.WorldLocation = WorldLocation;
//	parms.Radius = Radius;
//	parms.MaxDepth = MaxDepth;
//	this->ProcessEvent ( pPokeTerrain, &parms, NULL );
//
//}
//
//float APawn::GetBaseStaminaTime (  )
//{
//	static UFunction* pGetBaseStaminaTime = 0;
//	APawn_execGetBaseStaminaTime_Parms parms;
//
//	if ( !pGetBaseStaminaTime )
//		pGetBaseStaminaTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetBaseStaminaTime" );
//
//	this->ProcessEvent ( pGetBaseStaminaTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::execSet1stFov ( float f )
//{
//	static UFunction* pSet1stFov = 0;
//	APawn_execSet1stFov_Parms parms;
//
//	if ( !pSet1stFov )
//		pSet1stFov = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.Set1stFov" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSet1stFov, &parms, NULL );
//
//}
//
//void APawn::SetInfiniteAmmoTutorial ( bool bDeleteGranade, int iGranadeCount )
//{
//	static UFunction* pSetInfiniteAmmoTutorial = 0;
//	APawn_execSetInfiniteAmmoTutorial_Parms parms;
//
//	if ( !pSetInfiniteAmmoTutorial )
//		pSetInfiniteAmmoTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetInfiniteAmmoTutorial" );
//
//	parms.bDeleteGranade = bDeleteGranade;
//	parms.iGranadeCount = iGranadeCount;
//	this->ProcessEvent ( pSetInfiniteAmmoTutorial, &parms, NULL );
//
//}
//
//bool APawn::CanQuickWeaponChange (  )
//{
//	static UFunction* pCanQuickWeaponChange = 0;
//	APawn_execCanQuickWeaponChange_Parms parms;
//
//	if ( !pCanQuickWeaponChange )
//		pCanQuickWeaponChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CanQuickWeaponChange" );
//
//	this->ProcessEvent ( pCanQuickWeaponChange, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::SetRemoveWeaponSkill ( class AwWeapon* W )
//{
//	static UFunction* pSetRemoveWeaponSkill = 0;
//	APawn_execSetRemoveWeaponSkill_Parms parms;
//
//	if ( !pSetRemoveWeaponSkill )
//		pSetRemoveWeaponSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetRemoveWeaponSkill" );
//
//	parms.W = W;
//	this->ProcessEvent ( pSetRemoveWeaponSkill, &parms, NULL );
//
//}
//
//void APawn::SetWeaponQuickChange ( bool bOn )
//{
//	static UFunction* pSetWeaponQuickChange = 0;
//	APawn_execSetWeaponQuickChange_Parms parms;
//
//	if ( !pSetWeaponQuickChange )
//		pSetWeaponQuickChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetWeaponQuickChange" );
//
//	parms.bOn = bOn;
//	this->ProcessEvent ( pSetWeaponQuickChange, &parms, NULL );
//
//}
//
//void APawn::SetWeaponQuickReload ( bool bOn )
//{
//	static UFunction* pSetWeaponQuickReload = 0;
//	APawn_execSetWeaponQuickReload_Parms parms;
//
//	if ( !pSetWeaponQuickReload )
//		pSetWeaponQuickReload = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetWeaponQuickReload" );
//
//	parms.bOn = bOn;
//	this->ProcessEvent ( pSetWeaponQuickReload, &parms, NULL );
//
//}
//
//void APawn::SetWeaponQuickAimZoom ( bool bOn )
//{
//	static UFunction* pSetWeaponQuickAimZoom = 0;
//	APawn_execSetWeaponQuickAimZoom_Parms parms;
//
//	if ( !pSetWeaponQuickAimZoom )
//		pSetWeaponQuickAimZoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetWeaponQuickAimZoom" );
//
//	parms.bOn = bOn;
//	this->ProcessEvent ( pSetWeaponQuickAimZoom, &parms, NULL );
//
//}
//
//void APawn::AddWeaponMagazine (  )
//{
//	static UFunction* pAddWeaponMagazine = 0;
//	APawn_execAddWeaponMagazine_Parms parms;
//
//	if ( !pAddWeaponMagazine )
//		pAddWeaponMagazine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.AddWeaponMagazine" );
//
//	this->ProcessEvent ( pAddWeaponMagazine, &parms, NULL );
//
//}
//
//bool APawn::IsEnableBombSetting (  )
//{
//	static UFunction* pIsEnableBombSetting = 0;
//	APawn_execIsEnableBombSetting_Parms parms;
//
//	if ( !pIsEnableBombSetting )
//		pIsEnableBombSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.IsEnableBombSetting" );
//
//	this->ProcessEvent ( pIsEnableBombSetting, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::GetWeaponAttachmentInfo ( unsigned char* byFlashCount, unsigned char* byFiringMode )
//{
//	static UFunction* pGetWeaponAttachmentInfo = 0;
//	APawn_execGetWeaponAttachmentInfo_Parms parms;
//
//	if ( !pGetWeaponAttachmentInfo )
//		pGetWeaponAttachmentInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetWeaponAttachmentInfo" );
//
//	parms.byFlashCount = *byFlashCount;
//	parms.byFiringMode = *byFiringMode;
//	this->ProcessEvent ( pGetWeaponAttachmentInfo, &parms, NULL );
//
//	*byFlashCount = parms.byFlashCount;
//	*byFiringMode = parms.byFiringMode;
//}
//
//void APawn::QuickTurn (  )
//{
//	static UFunction* pQuickTurn = 0;
//	APawn_execQuickTurn_Parms parms;
//
//	if ( !pQuickTurn )
//		pQuickTurn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.QuickTurn" );
//
//	this->ProcessEvent ( pQuickTurn, &parms, NULL );
//
//}
//
//void APawn::SetDesiredRotationCheck ( bool Yaw, bool Pitch, bool Roll )
//{
//	static UFunction* pSetDesiredRotationCheck = 0;
//	APawn_execSetDesiredRotationCheck_Parms parms;
//
//	if ( !pSetDesiredRotationCheck )
//		pSetDesiredRotationCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetDesiredRotationCheck" );
//
//	parms.Yaw = Yaw;
//	parms.Pitch = Pitch;
//	parms.Roll = Roll;
//	this->ProcessEvent ( pSetDesiredRotationCheck, &parms, NULL );
//
//}
//
//void APawn::ServerRefreshCollisionHash (  )
//{
//	static UFunction* pServerRefreshCollisionHash = 0;
//	APawn_execServerRefreshCollisionHash_Parms parms;
//
//	if ( !pServerRefreshCollisionHash )
//		pServerRefreshCollisionHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerRefreshCollisionHash" );
//
//	this->ProcessEvent ( pServerRefreshCollisionHash, &parms, NULL );
//
//}
//
//class AwWeapon* APawn::AddWeapon ( struct FBtrDouble iUniqueID, int iWeaponID, int iAddPartsID, bool bPickupChange, int iPainting_Item_ID )
//{
//	static UFunction* pAddWeapon = 0;
//	APawn_execAddWeapon_Parms parms;
//
//	if ( !pAddWeapon )
//		pAddWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.AddWeapon" );
//
//	parms.iUniqueID = iUniqueID;
//	parms.iWeaponID = iWeaponID;
//	parms.iAddPartsID = iAddPartsID;
//	parms.bPickupChange = bPickupChange;
//	parms.iPainting_Item_ID = iPainting_Item_ID;
//	this->ProcessEvent ( pAddWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::AddWeaponFromSkill ( struct FBtrDouble iUniqueID, int iWeaponID )
//{
//	static UFunction* pAddWeaponFromSkill = 0;
//	APawn_execAddWeaponFromSkill_Parms parms;
//
//	if ( !pAddWeaponFromSkill )
//		pAddWeaponFromSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.AddWeaponFromSkill" );
//
//	parms.iUniqueID = iUniqueID;
//	parms.iWeaponID = iWeaponID;
//	this->ProcessEvent ( pAddWeaponFromSkill, &parms, NULL );
//
//}
//
//void APawn::ServerAddWeapon ( struct FBtrDouble iUniqueID, int iWeaponID )
//{
//	static UFunction* pServerAddWeapon = 0;
//	APawn_execServerAddWeapon_Parms parms;
//
//	if ( !pServerAddWeapon )
//		pServerAddWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerAddWeapon" );
//
//	parms.iUniqueID = iUniqueID;
//	parms.iWeaponID = iWeaponID;
//	this->ProcessEvent ( pServerAddWeapon, &parms, NULL );
//
//}
//
//void APawn::UAVScan (  )
//{
//	static UFunction* pUAVScan = 0;
//	APawn_execUAVScan_Parms parms;
//
//	if ( !pUAVScan )
//		pUAVScan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.UAVScan" );
//
//	this->ProcessEvent ( pUAVScan, &parms, NULL );
//
//}
//
//int APawn::GetCurHealth (  )
//{
//	static UFunction* pGetCurHealth = 0;
//	APawn_execGetCurHealth_Parms parms;
//
//	if ( !pGetCurHealth )
//		pGetCurHealth = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetCurHealth" );
//
//	this->ProcessEvent ( pGetCurHealth, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float APawn::GetMaxHealth (  )
//{
//	static UFunction* pGetMaxHealth = 0;
//	APawn_execGetMaxHealth_Parms parms;
//
//	if ( !pGetMaxHealth )
//		pGetMaxHealth = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetMaxHealth" );
//
//	this->ProcessEvent ( pGetMaxHealth, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::eventUpdateLastKnownPosAndTime ( struct FVector loc, float Time )
//{
//	static UFunction* pUpdateLastKnownPosAndTime = 0;
//	APawn_eventUpdateLastKnownPosAndTime_Parms parms;
//
//	if ( !pUpdateLastKnownPosAndTime )
//		pUpdateLastKnownPosAndTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.UpdateLastKnownPosAndTime" );
//
//	parms.loc = loc;
//	parms.Time = Time;
//	this->ProcessEvent ( pUpdateLastKnownPosAndTime, &parms, NULL );
//
//}
//
//void APawn::CalcRadioMessageTime (  )
//{
//	static UFunction* pCalcRadioMessageTime = 0;
//	APawn_execCalcRadioMessageTime_Parms parms;
//
//	if ( !pCalcRadioMessageTime )
//		pCalcRadioMessageTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CalcRadioMessageTime" );
//
//	this->ProcessEvent ( pCalcRadioMessageTime, &parms, NULL );
//
//}
//
//void APawn::MakeRadioMessage (  )
//{
//	static UFunction* pMakeRadioMessage = 0;
//	APawn_execMakeRadioMessage_Parms parms;
//
//	if ( !pMakeRadioMessage )
//		pMakeRadioMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.MakeRadioMessage" );
//
//	this->ProcessEvent ( pMakeRadioMessage, &parms, NULL );
//
//}
//
//void APawn::eventCalcFireNoiseTime (  )
//{
//	static UFunction* pCalcFireNoiseTime = 0;
//	APawn_eventCalcFireNoiseTime_Parms parms;
//
//	if ( !pCalcFireNoiseTime )
//		pCalcFireNoiseTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CalcFireNoiseTime" );
//
//	this->ProcessEvent ( pCalcFireNoiseTime, &parms, NULL );
//
//}
//
//void APawn::MakeFireNoise (  )
//{
//	static UFunction* pMakeFireNoise = 0;
//	APawn_execMakeFireNoise_Parms parms;
//
//	if ( !pMakeFireNoise )
//		pMakeFireNoise = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.MakeFireNoise" );
//
//	this->ProcessEvent ( pMakeFireNoise, &parms, NULL );
//
//}
//
//void APawn::SetEaxEffect ( class UI3DL2Listener* EAXEffect, float fTime )
//{
//	static UFunction* pSetEaxEffect = 0;
//	APawn_execSetEaxEffect_Parms parms;
//
//	if ( !pSetEaxEffect )
//		pSetEaxEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetEaxEffect" );
//
//	parms.EAXEffect = EAXEffect;
//	parms.fTime = fTime;
//	this->ProcessEvent ( pSetEaxEffect, &parms, NULL );
//
//}
//
//void APawn::eventTick ( float Delta )
//{
//	static UFunction* pTick = 0;
//	APawn_eventTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.Tick" );
//
//	parms.Delta = Delta;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void APawn::ServerSetTypeOfWeapon ( unsigned char ty )
//{
//	static UFunction* pServerSetTypeOfWeapon = 0;
//	APawn_execServerSetTypeOfWeapon_Parms parms;
//
//	if ( !pServerSetTypeOfWeapon )
//		pServerSetTypeOfWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerSetTypeOfWeapon" );
//
//	parms.ty = ty;
//	this->ProcessEvent ( pServerSetTypeOfWeapon, &parms, NULL );
//
//}
//
//void APawn::ClientSetWaitingPreAnimMode ( bool bWaiting )
//{
//	static UFunction* pClientSetWaitingPreAnimMode = 0;
//	APawn_execClientSetWaitingPreAnimMode_Parms parms;
//
//	if ( !pClientSetWaitingPreAnimMode )
//		pClientSetWaitingPreAnimMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClientSetWaitingPreAnimMode" );
//
//	parms.bWaiting = bWaiting;
//	this->ProcessEvent ( pClientSetWaitingPreAnimMode, &parms, NULL );
//
//}
//
//void APawn::ServerSetWaitingPreAnimMode ( bool bWaiting )
//{
//	static UFunction* pServerSetWaitingPreAnimMode = 0;
//	APawn_execServerSetWaitingPreAnimMode_Parms parms;
//
//	if ( !pServerSetWaitingPreAnimMode )
//		pServerSetWaitingPreAnimMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerSetWaitingPreAnimMode" );
//
//	parms.bWaiting = bWaiting;
//	this->ProcessEvent ( pServerSetWaitingPreAnimMode, &parms, NULL );
//
//}
//
//void APawn::ClientSetWasReloadMode ( bool bReload )
//{
//	static UFunction* pClientSetWasReloadMode = 0;
//	APawn_execClientSetWasReloadMode_Parms parms;
//
//	if ( !pClientSetWasReloadMode )
//		pClientSetWasReloadMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClientSetWasReloadMode" );
//
//	parms.bReload = bReload;
//	this->ProcessEvent ( pClientSetWasReloadMode, &parms, NULL );
//
//}
//
//void APawn::ServerSetWasReloadMode ( bool bReload )
//{
//	static UFunction* pServerSetWasReloadMode = 0;
//	APawn_execServerSetWasReloadMode_Parms parms;
//
//	if ( !pServerSetWasReloadMode )
//		pServerSetWasReloadMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerSetWasReloadMode" );
//
//	parms.bReload = bReload;
//	this->ProcessEvent ( pServerSetWasReloadMode, &parms, NULL );
//
//}
//
//void APawn::ClientSetReloadMode ( bool bReload )
//{
//	static UFunction* pClientSetReloadMode = 0;
//	APawn_execClientSetReloadMode_Parms parms;
//
//	if ( !pClientSetReloadMode )
//		pClientSetReloadMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClientSetReloadMode" );
//
//	parms.bReload = bReload;
//	this->ProcessEvent ( pClientSetReloadMode, &parms, NULL );
//
//}
//
//void APawn::ServerSetReloadMode ( bool bReload )
//{
//	static UFunction* pServerSetReloadMode = 0;
//	APawn_execServerSetReloadMode_Parms parms;
//
//	if ( !pServerSetReloadMode )
//		pServerSetReloadMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerSetReloadMode" );
//
//	parms.bReload = bReload;
//	this->ProcessEvent ( pServerSetReloadMode, &parms, NULL );
//
//}
//
//void APawn::ClientSetTurretingMode ( bool bTurret )
//{
//	static UFunction* pClientSetTurretingMode = 0;
//	APawn_execClientSetTurretingMode_Parms parms;
//
//	if ( !pClientSetTurretingMode )
//		pClientSetTurretingMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClientSetTurretingMode" );
//
//	parms.bTurret = bTurret;
//	this->ProcessEvent ( pClientSetTurretingMode, &parms, NULL );
//
//}
//
//void APawn::ServerSetTurretingMode ( bool bTurret )
//{
//	static UFunction* pServerSetTurretingMode = 0;
//	APawn_execServerSetTurretingMode_Parms parms;
//
//	if ( !pServerSetTurretingMode )
//		pServerSetTurretingMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerSetTurretingMode" );
//
//	parms.bTurret = bTurret;
//	this->ProcessEvent ( pServerSetTurretingMode, &parms, NULL );
//
//}
//
//void APawn::eventSetTurretIdleAnimFrame ( float frame, float UpDownFrame )
//{
//	static UFunction* pSetTurretIdleAnimFrame = 0;
//	APawn_eventSetTurretIdleAnimFrame_Parms parms;
//
//	if ( !pSetTurretIdleAnimFrame )
//		pSetTurretIdleAnimFrame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetTurretIdleAnimFrame" );
//
//	parms.frame = frame;
//	parms.UpDownFrame = UpDownFrame;
//	this->ProcessEvent ( pSetTurretIdleAnimFrame, &parms, NULL );
//
//}
//
//void APawn::eventPlayTurretIdleAnim ( bool UpDown )
//{
//	static UFunction* pPlayTurretIdleAnim = 0;
//	APawn_eventPlayTurretIdleAnim_Parms parms;
//
//	if ( !pPlayTurretIdleAnim )
//		pPlayTurretIdleAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayTurretIdleAnim" );
//
//	parms.UpDown = UpDown;
//	this->ProcessEvent ( pPlayTurretIdleAnim, &parms, NULL );
//
//}
//
//void APawn::SetDriverFrame ( float frame, float UpDownFrame )
//{
//	static UFunction* pSetDriverFrame = 0;
//	APawn_execSetDriverFrame_Parms parms;
//
//	if ( !pSetDriverFrame )
//		pSetDriverFrame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetDriverFrame" );
//
//	parms.frame = frame;
//	parms.UpDownFrame = UpDownFrame;
//	this->ProcessEvent ( pSetDriverFrame, &parms, NULL );
//
//}
//
//void APawn::SetAimModeValueOnly ( bool bToggle )
//{
//	static UFunction* pSetAimModeValueOnly = 0;
//	APawn_execSetAimModeValueOnly_Parms parms;
//
//	if ( !pSetAimModeValueOnly )
//		pSetAimModeValueOnly = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetAimModeValueOnly" );
//
//	parms.bToggle = bToggle;
//	this->ProcessEvent ( pSetAimModeValueOnly, &parms, NULL );
//
//}
//
//void APawn::SetAimMode ( bool bToggle )
//{
//	static UFunction* pSetAimMode = 0;
//	APawn_execSetAimMode_Parms parms;
//
//	if ( !pSetAimMode )
//		pSetAimMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetAimMode" );
//
//	parms.bToggle = bToggle;
//	this->ProcessEvent ( pSetAimMode, &parms, NULL );
//
//}
//
//struct FVector APawn::GetTargetLocation (  )
//{
//	static UFunction* pGetTargetLocation = 0;
//	APawn_execGetTargetLocation_Parms parms;
//
//	if ( !pGetTargetLocation )
//		pGetTargetLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetTargetLocation" );
//
//	this->ProcessEvent ( pGetTargetLocation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float APawn::RangedAttackTime (  )
//{
//	static UFunction* pRangedAttackTime = 0;
//	APawn_execRangedAttackTime_Parms parms;
//
//	if ( !pRangedAttackTime )
//		pRangedAttackTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.RangedAttackTime" );
//
//	this->ProcessEvent ( pRangedAttackTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::CheatFly (  )
//{
//	static UFunction* pCheatFly = 0;
//	APawn_execCheatFly_Parms parms;
//
//	if ( !pCheatFly )
//		pCheatFly = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CheatFly" );
//
//	this->ProcessEvent ( pCheatFly, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::CheatGhost (  )
//{
//	static UFunction* pCheatGhost = 0;
//	APawn_execCheatGhost_Parms parms;
//
//	if ( !pCheatGhost )
//		pCheatGhost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CheatGhost" );
//
//	this->ProcessEvent ( pCheatGhost, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::CheatWalk (  )
//{
//	static UFunction* pCheatWalk = 0;
//	APawn_execCheatWalk_Parms parms;
//
//	if ( !pCheatWalk )
//		pCheatWalk = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CheatWalk" );
//
//	this->ProcessEvent ( pCheatWalk, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::Suicide (  )
//{
//	static UFunction* pSuicide = 0;
//	APawn_execSuicide_Parms parms;
//
//	if ( !pSuicide )
//		pSuicide = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.Suicide" );
//
//	this->ProcessEvent ( pSuicide, &parms, NULL );
//
//}
//
//void APawn::RawInput ( float DeltaTime, float aBaseX, float aBaseY, float aBaseZ, float aMouseX, float aMouseY, float aForward, float aTurn, float aStrafe, float aUp, float aLookUp )
//{
//	static UFunction* pRawInput = 0;
//	APawn_execRawInput_Parms parms;
//
//	if ( !pRawInput )
//		pRawInput = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.RawInput" );
//
//	parms.DeltaTime = DeltaTime;
//	parms.aBaseX = aBaseX;
//	parms.aBaseY = aBaseY;
//	parms.aBaseZ = aBaseZ;
//	parms.aMouseX = aMouseX;
//	parms.aMouseY = aMouseY;
//	parms.aForward = aForward;
//	parms.aTurn = aTurn;
//	parms.aStrafe = aStrafe;
//	parms.aUp = aUp;
//	parms.aLookUp = aLookUp;
//	this->ProcessEvent ( pRawInput, &parms, NULL );
//
//}
//
//void APawn::IncrementSpree (  )
//{
//	static UFunction* pIncrementSpree = 0;
//	APawn_execIncrementSpree_Parms parms;
//
//	if ( !pIncrementSpree )
//		pIncrementSpree = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.IncrementSpree" );
//
//	this->ProcessEvent ( pIncrementSpree, &parms, NULL );
//
//}
//
//int APawn::GetSpree (  )
//{
//	static UFunction* pGetSpree = 0;
//	APawn_execGetSpree_Parms parms;
//
//	if ( !pGetSpree )
//		pGetSpree = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetSpree" );
//
//	this->ProcessEvent ( pGetSpree, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AVehicle* APawn::GetVehicleBase (  )
//{
//	static UFunction* pGetVehicleBase = 0;
//	APawn_execGetVehicleBase_Parms parms;
//
//	if ( !pGetVehicleBase )
//		pGetVehicleBase = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetVehicleBase" );
//
//	this->ProcessEvent ( pGetVehicleBase, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::PlayVictoryAnimation (  )
//{
//	static UFunction* pPlayVictoryAnimation = 0;
//	APawn_execPlayVictoryAnimation_Parms parms;
//
//	if ( !pPlayVictoryAnimation )
//		pPlayVictoryAnimation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayVictoryAnimation" );
//
//	this->ProcessEvent ( pPlayVictoryAnimation, &parms, NULL );
//
//}
//
//void APawn::eventPlayLandingAnimation ( float impactVel )
//{
//	static UFunction* pPlayLandingAnimation = 0;
//	APawn_eventPlayLandingAnimation_Parms parms;
//
//	if ( !pPlayLandingAnimation )
//		pPlayLandingAnimation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayLandingAnimation" );
//
//	parms.impactVel = impactVel;
//	this->ProcessEvent ( pPlayLandingAnimation, &parms, NULL );
//
//}
//
//void APawn::PlayLanded ( float impactVel )
//{
//	static UFunction* pPlayLanded = 0;
//	APawn_execPlayLanded_Parms parms;
//
//	if ( !pPlayLanded )
//		pPlayLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayLanded" );
//
//	parms.impactVel = impactVel;
//	this->ProcessEvent ( pPlayLanded, &parms, NULL );
//
//}
//
//void APawn::eventCheckProneAni ( bool bGoProne )
//{
//	static UFunction* pCheckProneAni = 0;
//	APawn_eventCheckProneAni_Parms parms;
//
//	if ( !pCheckProneAni )
//		pCheckProneAni = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CheckProneAni" );
//
//	parms.bGoProne = bGoProne;
//	this->ProcessEvent ( pCheckProneAni, &parms, NULL );
//
//}
//
//void APawn::PlayRechamber (  )
//{
//	static UFunction* pPlayRechamber = 0;
//	APawn_execPlayRechamber_Parms parms;
//
//	if ( !pPlayRechamber )
//		pPlayRechamber = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayRechamber" );
//
//	this->ProcessEvent ( pPlayRechamber, &parms, NULL );
//
//}
//
//void APawn::PlayReload (  )
//{
//	static UFunction* pPlayReload = 0;
//	APawn_execPlayReload_Parms parms;
//
//	if ( !pPlayReload )
//		pPlayReload = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayReload" );
//
//	this->ProcessEvent ( pPlayReload, &parms, NULL );
//
//}
//
//void APawn::PlayWaiting (  )
//{
//	static UFunction* pPlayWaiting = 0;
//	APawn_execPlayWaiting_Parms parms;
//
//	if ( !pPlayWaiting )
//		pPlayWaiting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayWaiting" );
//
//	this->ProcessEvent ( pPlayWaiting, &parms, NULL );
//
//}
//
//void APawn::PlayMoving (  )
//{
//	static UFunction* pPlayMoving = 0;
//	APawn_execPlayMoving_Parms parms;
//
//	if ( !pPlayMoving )
//		pPlayMoving = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayMoving" );
//
//	this->ProcessEvent ( pPlayMoving, &parms, NULL );
//
//}
//
//void APawn::eventPlayFalling (  )
//{
//	static UFunction* pPlayFalling = 0;
//	APawn_eventPlayFalling_Parms parms;
//
//	if ( !pPlayFalling )
//		pPlayFalling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayFalling" );
//
//	this->ProcessEvent ( pPlayFalling, &parms, NULL );
//
//}
//
//void APawn::eventPlayJump (  )
//{
//	static UFunction* pPlayJump = 0;
//	APawn_eventPlayJump_Parms parms;
//
//	if ( !pPlayJump )
//		pPlayJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayJump" );
//
//	this->ProcessEvent ( pPlayJump, &parms, NULL );
//
//}
//
//bool APawn::CannotJumpNow (  )
//{
//	static UFunction* pCannotJumpNow = 0;
//	APawn_execCannotJumpNow_Parms parms;
//
//	if ( !pCannotJumpNow )
//		pCannotJumpNow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CannotJumpNow" );
//
//	this->ProcessEvent ( pCannotJumpNow, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::eventAnimEnd ( int Channel )
//{
//	static UFunction* pAnimEnd = 0;
//	APawn_eventAnimEnd_Parms parms;
//
//	if ( !pAnimEnd )
//		pAnimEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.AnimEnd" );
//
//	parms.Channel = Channel;
//	this->ProcessEvent ( pAnimEnd, &parms, NULL );
//
//}
//
//void APawn::eventChangeAnimation (  )
//{
//	static UFunction* pChangeAnimation = 0;
//	APawn_eventChangeAnimation_Parms parms;
//
//	if ( !pChangeAnimation )
//		pChangeAnimation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ChangeAnimation" );
//
//	this->ProcessEvent ( pChangeAnimation, &parms, NULL );
//
//}
//
//void APawn::PlayTakeHit ( struct FVector HitLoc, int Damage, class UClass* DamageType )
//{
//	static UFunction* pPlayTakeHit = 0;
//	APawn_execPlayTakeHit_Parms parms;
//
//	if ( !pPlayTakeHit )
//		pPlayTakeHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayTakeHit" );
//
//	parms.HitLoc = HitLoc;
//	parms.Damage = Damage;
//	parms.DamageType = DamageType;
//	this->ProcessEvent ( pPlayTakeHit, &parms, NULL );
//
//}
//
//void APawn::eventStopPlayFiring (  )
//{
//	static UFunction* pStopPlayFiring = 0;
//	APawn_eventStopPlayFiring_Parms parms;
//
//	if ( !pStopPlayFiring )
//		pStopPlayFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.StopPlayFiring" );
//
//	this->ProcessEvent ( pStopPlayFiring, &parms, NULL );
//
//}
//
//void APawn::ServerThrowsWeaponAnim ( bool bQuick )
//{
//	static UFunction* pServerThrowsWeaponAnim = 0;
//	APawn_execServerThrowsWeaponAnim_Parms parms;
//
//	if ( !pServerThrowsWeaponAnim )
//		pServerThrowsWeaponAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerThrowsWeaponAnim" );
//
//	parms.bQuick = bQuick;
//	this->ProcessEvent ( pServerThrowsWeaponAnim, &parms, NULL );
//
//}
//
//void APawn::ServerPlayPutdownWeaponAnim ( bool bQuick )
//{
//	static UFunction* pServerPlayPutdownWeaponAnim = 0;
//	APawn_execServerPlayPutdownWeaponAnim_Parms parms;
//
//	if ( !pServerPlayPutdownWeaponAnim )
//		pServerPlayPutdownWeaponAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerPlayPutdownWeaponAnim" );
//
//	parms.bQuick = bQuick;
//	this->ProcessEvent ( pServerPlayPutdownWeaponAnim, &parms, NULL );
//
//}
//
//void APawn::PlayWeaponSwitch ( class AwWeapon* newWeapon )
//{
//	static UFunction* pPlayWeaponSwitch = 0;
//	APawn_execPlayWeaponSwitch_Parms parms;
//
//	if ( !pPlayWeaponSwitch )
//		pPlayWeaponSwitch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayWeaponSwitch" );
//
//	parms.newWeapon = newWeapon;
//	this->ProcessEvent ( pPlayWeaponSwitch, &parms, NULL );
//
//}
//
//void APawn::PlayFiring ( float Rate, struct FName FiringMode )
//{
//	static UFunction* pPlayFiring = 0;
//	APawn_execPlayFiring_Parms parms;
//
//	if ( !pPlayFiring )
//		pPlayFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayFiring" );
//
//	parms.Rate = Rate;
//	parms.FiringMode = FiringMode;
//	this->ProcessEvent ( pPlayFiring, &parms, NULL );
//
//}
//
//void APawn::eventPlayDying ( class UClass* DamageType, struct FVector HitLoc, int CollisionPart )
//{
//	static UFunction* pPlayDying = 0;
//	APawn_eventPlayDying_Parms parms;
//
//	if ( !pPlayDying )
//		pPlayDying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayDying" );
//
//	parms.DamageType = DamageType;
//	parms.HitLoc = HitLoc;
//	parms.CollisionPart = CollisionPart;
//	this->ProcessEvent ( pPlayDying, &parms, NULL );
//
//}
//
//void APawn::eventSetAnimAction ( struct FName NewAction )
//{
//	static UFunction* pSetAnimAction = 0;
//	APawn_eventSetAnimAction_Parms parms;
//
//	if ( !pSetAnimAction )
//		pSetAnimAction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetAnimAction" );
//
//	parms.NewAction = NewAction;
//	this->ProcessEvent ( pSetAnimAction, &parms, NULL );
//
//}
//
//void APawn::ServerSetAnimAction ( struct FName NewAction )
//{
//	static UFunction* pServerSetAnimAction = 0;
//	APawn_execServerSetAnimAction_Parms parms;
//
//	if ( !pServerSetAnimAction )
//		pServerSetAnimAction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerSetAnimAction" );
//
//	parms.NewAction = NewAction;
//	this->ProcessEvent ( pServerSetAnimAction, &parms, NULL );
//
//}
//
//bool APawn::IsInLoadout ( class UClass* InventoryClass )
//{
//	static UFunction* pIsInLoadout = 0;
//	APawn_execIsInLoadout_Parms parms;
//
//	if ( !pIsInLoadout )
//		pIsInLoadout = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.IsInLoadout" );
//
//	parms.InventoryClass = InventoryClass;
//	this->ProcessEvent ( pIsInLoadout, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::TurnOff (  )
//{
//	static UFunction* pTurnOff = 0;
//	APawn_execTurnOff_Parms parms;
//
//	if ( !pTurnOff )
//		pTurnOff = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.TurnOff" );
//
//	this->ProcessEvent ( pTurnOff, &parms, NULL );
//
//}
//
//void APawn::ChunkUp ( struct FRotator HitRotation, float ChunkPerterbation )
//{
//	static UFunction* pChunkUp = 0;
//	APawn_execChunkUp_Parms parms;
//
//	if ( !pChunkUp )
//		pChunkUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ChunkUp" );
//
//	parms.HitRotation = HitRotation;
//	parms.ChunkPerterbation = ChunkPerterbation;
//	this->ProcessEvent ( pChunkUp, &parms, NULL );
//
//}
//
//void APawn::PlayHit ( float Damage, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, int CollisionPart )
//{
//	static UFunction* pPlayHit = 0;
//	APawn_execPlayHit_Parms parms;
//
//	if ( !pPlayHit )
//		pPlayHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayHit" );
//
//	parms.Damage = Damage;
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.DamageType = DamageType;
//	parms.Momentum = Momentum;
//	parms.CollisionPart = CollisionPart;
//	this->ProcessEvent ( pPlayHit, &parms, NULL );
//
//}
//
//void APawn::PlayDyingSound (  )
//{
//	static UFunction* pPlayDyingSound = 0;
//	APawn_execPlayDyingSound_Parms parms;
//
//	if ( !pPlayDyingSound )
//		pPlayDyingSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayDyingSound" );
//
//	this->ProcessEvent ( pPlayDyingSound, &parms, NULL );
//
//}
//
//void APawn::PlayMoverHitSound (  )
//{
//	static UFunction* pPlayMoverHitSound = 0;
//	APawn_execPlayMoverHitSound_Parms parms;
//
//	if ( !pPlayMoverHitSound )
//		pPlayMoverHitSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayMoverHitSound" );
//
//	this->ProcessEvent ( pPlayMoverHitSound, &parms, NULL );
//
//}
//
//bool APawn::DoJump ( bool bUpdating )
//{
//	static UFunction* pDoJump = 0;
//	APawn_execDoJump_Parms parms;
//
//	if ( !pDoJump )
//		pDoJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.DoJump" );
//
//	parms.bUpdating = bUpdating;
//	this->ProcessEvent ( pDoJump, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::Dodge ( unsigned char DoubleClickMove )
//{
//	static UFunction* pDodge = 0;
//	APawn_execDodge_Parms parms;
//
//	if ( !pDodge )
//		pDodge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.Dodge" );
//
//	parms.DoubleClickMove = DoubleClickMove;
//	this->ProcessEvent ( pDodge, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::ProcessMove ( float DeltaTime, struct FVector NewAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot )
//{
//	static UFunction* pProcessMove = 0;
//	APawn_execProcessMove_Parms parms;
//
//	if ( !pProcessMove )
//		pProcessMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ProcessMove" );
//
//	parms.DeltaTime = DeltaTime;
//	parms.NewAccel = NewAccel;
//	parms.DoubleClickMove = DoubleClickMove;
//	parms.DeltaRot = DeltaRot;
//	this->ProcessEvent ( pProcessMove, &parms, NULL );
//
//}
//
//void APawn::UpdateRocketAcceleration ( float DeltaTime, float YawChange, float PitchChange )
//{
//	static UFunction* pUpdateRocketAcceleration = 0;
//	APawn_execUpdateRocketAcceleration_Parms parms;
//
//	if ( !pUpdateRocketAcceleration )
//		pUpdateRocketAcceleration = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.UpdateRocketAcceleration" );
//
//	parms.DeltaTime = DeltaTime;
//	parms.YawChange = YawChange;
//	parms.PitchChange = PitchChange;
//	this->ProcessEvent ( pUpdateRocketAcceleration, &parms, NULL );
//
//}
//
//bool APawn::CanMultiJump (  )
//{
//	static UFunction* pCanMultiJump = 0;
//	APawn_execCanMultiJump_Parms parms;
//
//	if ( !pCanMultiJump )
//		pCanMultiJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CanMultiJump" );
//
//	this->ProcessEvent ( pCanMultiJump, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::CanDoubleJump (  )
//{
//	static UFunction* pCanDoubleJump = 0;
//	APawn_execCanDoubleJump_Parms parms;
//
//	if ( !pCanDoubleJump )
//		pCanDoubleJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CanDoubleJump" );
//
//	this->ProcessEvent ( pCanDoubleJump, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::DoDoubleJump ( bool bUpdating )
//{
//	static UFunction* pDoDoubleJump = 0;
//	APawn_execDoDoubleJump_Parms parms;
//
//	if ( !pDoDoubleJump )
//		pDoDoubleJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.DoDoubleJump" );
//
//	parms.bUpdating = bUpdating;
//	this->ProcessEvent ( pDoDoubleJump, &parms, NULL );
//
//}
//
//bool APawn::CheckWaterJump ( struct FVector* WallNormal )
//{
//	static UFunction* pCheckWaterJump = 0;
//	APawn_execCheckWaterJump_Parms parms;
//
//	if ( !pCheckWaterJump )
//		pCheckWaterJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CheckWaterJump" );
//
//	parms.WallNormal = *WallNormal;
//	this->ProcessEvent ( pCheckWaterJump, &parms, NULL );
//
//	*WallNormal = parms.WallNormal;
//	return parms.ReturnValue;
//}
//
//void APawn::TakeDrowningDamage (  )
//{
//	static UFunction* pTakeDrowningDamage = 0;
//	APawn_execTakeDrowningDamage_Parms parms;
//
//	if ( !pTakeDrowningDamage )
//		pTakeDrowningDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.TakeDrowningDamage" );
//
//	this->ProcessEvent ( pTakeDrowningDamage, &parms, NULL );
//
//}
//
//void APawn::eventBreathTimer (  )
//{
//	static UFunction* pBreathTimer = 0;
//	APawn_eventBreathTimer_Parms parms;
//
//	if ( !pBreathTimer )
//		pBreathTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.BreathTimer" );
//
//	this->ProcessEvent ( pBreathTimer, &parms, NULL );
//
//}
//
//bool APawn::IsInPain (  )
//{
//	static UFunction* pIsInPain = 0;
//	APawn_execIsInPain_Parms parms;
//
//	if ( !pIsInPain )
//		pIsInPain = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.IsInPain" );
//
//	this->ProcessEvent ( pIsInPain, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::TouchingWaterVolume (  )
//{
//	static UFunction* pTouchingWaterVolume = 0;
//	APawn_execTouchingWaterVolume_Parms parms;
//
//	if ( !pTouchingWaterVolume )
//		pTouchingWaterVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.TouchingWaterVolume" );
//
//	this->ProcessEvent ( pTouchingWaterVolume, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::eventHeadVolumeChange ( class APhysicsVolume* newHeadVolume )
//{
//	static UFunction* pHeadVolumeChange = 0;
//	APawn_eventHeadVolumeChange_Parms parms;
//
//	if ( !pHeadVolumeChange )
//		pHeadVolumeChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.HeadVolumeChange" );
//
//	parms.newHeadVolume = newHeadVolume;
//	this->ProcessEvent ( pHeadVolumeChange, &parms, NULL );
//
//}
//
//void APawn::eventLanded ( struct FVector HitNormal )
//{
//	static UFunction* pLanded = 0;
//	APawn_eventLanded_Parms parms;
//
//	if ( !pLanded )
//		pLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.Landed" );
//
//	parms.HitNormal = HitNormal;
//	this->ProcessEvent ( pLanded, &parms, NULL );
//
//}
//
//void APawn::eventPlayLandedSound ( int SurfType )
//{
//	static UFunction* pPlayLandedSound = 0;
//	APawn_eventPlayLandedSound_Parms parms;
//
//	if ( !pPlayLandedSound )
//		pPlayLandedSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayLandedSound" );
//
//	parms.SurfType = SurfType;
//	this->ProcessEvent ( pPlayLandedSound, &parms, NULL );
//
//}
//
//void APawn::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UMaterial* HitMaterial )
//{
//	static UFunction* pHitWall = 0;
//	APawn_eventHitWall_Parms parms;
//
//	if ( !pHitWall )
//		pHitWall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.HitWall" );
//
//	parms.HitNormal = HitNormal;
//	parms.Wall = Wall;
//	parms.HitMaterial = HitMaterial;
//	this->ProcessEvent ( pHitWall, &parms, NULL );
//
//}
//
//void APawn::eventFalling (  )
//{
//	static UFunction* pFalling = 0;
//	APawn_eventFalling_Parms parms;
//
//	if ( !pFalling )
//		pFalling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.Falling" );
//
//	this->ProcessEvent ( pFalling, &parms, NULL );
//
//}
//
//void APawn::RemovePowerups (  )
//{
//	static UFunction* pRemovePowerups = 0;
//	APawn_execRemovePowerups_Parms parms;
//
//	if ( !pRemovePowerups )
//		pRemovePowerups = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.RemovePowerups" );
//
//	this->ProcessEvent ( pRemovePowerups, &parms, NULL );
//
//}
//
//void APawn::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pDied = 0;
//	APawn_execDied_Parms parms;
//
//	if ( !pDied )
//		pDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.Died" );
//
//	parms.Killer = Killer;
//	parms.DamageType = DamageType;
//	parms.HitLocation = HitLocation;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pDied, &parms, NULL );
//
//}
//
//void APawn::CalcItemUsedTime ( class UwMatchUserInfo* kUser )
//{
//	static UFunction* pCalcItemUsedTime = 0;
//	APawn_execCalcItemUsedTime_Parms parms;
//
//	if ( !pCalcItemUsedTime )
//		pCalcItemUsedTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CalcItemUsedTime" );
//
//	parms.kUser = kUser;
//	this->ProcessEvent ( pCalcItemUsedTime, &parms, NULL );
//
//}
//
//void APawn::CalcItemUsedTimeSelf (  )
//{
//	static UFunction* pCalcItemUsedTimeSelf = 0;
//	APawn_execCalcItemUsedTimeSelf_Parms parms;
//
//	if ( !pCalcItemUsedTimeSelf )
//		pCalcItemUsedTimeSelf = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CalcItemUsedTimeSelf" );
//
//	this->ProcessEvent ( pCalcItemUsedTimeSelf, &parms, NULL );
//
//}
//
//class AController* APawn::GetKillerController (  )
//{
//	static UFunction* pGetKillerController = 0;
//	APawn_execGetKillerController_Parms parms;
//
//	if ( !pGetKillerController )
//		pGetKillerController = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetKillerController" );
//
//	this->ProcessEvent ( pGetKillerController, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class ATeamInfo* APawn::GetTeam (  )
//{
//	static UFunction* pGetTeam = 0;
//	APawn_execGetTeam_Parms parms;
//
//	if ( !pGetTeam )
//		pGetTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetTeam" );
//
//	this->ProcessEvent ( pGetTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int APawn::GetTeamNum (  )
//{
//	static UFunction* pGetTeamNum = 0;
//	APawn_execGetTeamNum_Parms parms;
//
//	if ( !pGetTeamNum )
//		pGetTeamNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetTeamNum" );
//
//	this->ProcessEvent ( pGetTeamNum, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::SetDelayedDamageInstigatorController ( class AController* C )
//{
//	static UFunction* pSetDelayedDamageInstigatorController = 0;
//	APawn_execSetDelayedDamageInstigatorController_Parms parms;
//
//	if ( !pSetDelayedDamageInstigatorController )
//		pSetDelayedDamageInstigatorController = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetDelayedDamageInstigatorController" );
//
//	parms.C = C;
//	this->ProcessEvent ( pSetDelayedDamageInstigatorController, &parms, NULL );
//
//}
//
//class TArray< class AController* > APawn::GetAssistList ( class APawn* Killer )
//{
//	static UFunction* pGetAssistList = 0;
//	APawn_execGetAssistList_Parms parms;
//
//	if ( !pGetAssistList )
//		pGetAssistList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetAssistList" );
//
//	parms.Killer = Killer;
//	this->ProcessEvent ( pGetAssistList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int APawn::GetAssistScore ( int UID )
//{
//	static UFunction* pGetAssistScore = 0;
//	APawn_execGetAssistScore_Parms parms;
//
//	if ( !pGetAssistScore )
//		pGetAssistScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetAssistScore" );
//
//	parms.UID = UID;
//	this->ProcessEvent ( pGetAssistScore, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::AddDamageInfo ( class APawn* instigatedBy, int Damage, class UClass* DamageType )
//{
//	static UFunction* pAddDamageInfo = 0;
//	APawn_execAddDamageInfo_Parms parms;
//
//	if ( !pAddDamageInfo )
//		pAddDamageInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.AddDamageInfo" );
//
//	parms.instigatedBy = instigatedBy;
//	parms.Damage = Damage;
//	parms.DamageType = DamageType;
//	this->ProcessEvent ( pAddDamageInfo, &parms, NULL );
//
//}
//
//void APawn::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pTakeDamage = 0;
//	APawn_execTakeDamage_Parms parms;
//
//	if ( !pTakeDamage )
//		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.TakeDamage" );
//
//	parms.Damage = Damage;
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.Momentum = Momentum;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pTakeDamage, &parms, NULL );
//
//}
//
//class AController* APawn::GetDamagedByKiller ( class UClass* DamageType, class APawn* instigatedBy )
//{
//	static UFunction* pGetDamagedByKiller = 0;
//	APawn_execGetDamagedByKiller_Parms parms;
//
//	if ( !pGetDamagedByKiller )
//		pGetDamagedByKiller = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetDamagedByKiller" );
//
//	parms.DamageType = DamageType;
//	parms.instigatedBy = instigatedBy;
//	this->ProcessEvent ( pGetDamagedByKiller, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::ApplyDealDamageRatio ( class APawn* instigatedBy, class UClass* DamageType, int WeaponType, int* ActualDamage )
//{
//	static UFunction* pApplyDealDamageRatio = 0;
//	APawn_execApplyDealDamageRatio_Parms parms;
//
//	if ( !pApplyDealDamageRatio )
//		pApplyDealDamageRatio = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ApplyDealDamageRatio" );
//
//	parms.instigatedBy = instigatedBy;
//	parms.DamageType = DamageType;
//	parms.WeaponType = WeaponType;
//	this->ProcessEvent ( pApplyDealDamageRatio, &parms, NULL );
//
//	*ActualDamage = parms.ActualDamage;
//}
//
//class AController* APawn::GetDelayedInstigatorController ( class APawn* instigatedBy )
//{
//	static UFunction* pGetDelayedInstigatorController = 0;
//	APawn_execGetDelayedInstigatorController_Parms parms;
//
//	if ( !pGetDelayedInstigatorController )
//		pGetDelayedInstigatorController = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetDelayedInstigatorController" );
//
//	parms.instigatedBy = instigatedBy;
//	this->ProcessEvent ( pGetDelayedInstigatorController, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::TakeDamageSound ( int LeftHealth, int ActualDamage, struct FVector HitLocation, class UClass* DamageType, int CollisionPart, int WeaponType, class AController* Killer )
//{
//	static UFunction* pTakeDamageSound = 0;
//	APawn_execTakeDamageSound_Parms parms;
//
//	if ( !pTakeDamageSound )
//		pTakeDamageSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.TakeDamageSound" );
//
//	parms.LeftHealth = LeftHealth;
//	parms.ActualDamage = ActualDamage;
//	parms.HitLocation = HitLocation;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.Killer = Killer;
//	this->ProcessEvent ( pTakeDamageSound, &parms, NULL );
//
//}
//
//void APawn::TakeHeadRoundBullet ( struct FVector HitLocation, int WeaponType )
//{
//	static UFunction* pTakeHeadRoundBullet = 0;
//	APawn_execTakeHeadRoundBullet_Parms parms;
//
//	if ( !pTakeHeadRoundBullet )
//		pTakeHeadRoundBullet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.TakeHeadRoundBullet" );
//
//	parms.HitLocation = HitLocation;
//	parms.WeaponType = WeaponType;
//	this->ProcessEvent ( pTakeHeadRoundBullet, &parms, NULL );
//
//}
//
//int APawn::ShieldAbsorb ( int Damage )
//{
//	static UFunction* pShieldAbsorb = 0;
//	APawn_execShieldAbsorb_Parms parms;
//
//	if ( !pShieldAbsorb )
//		pShieldAbsorb = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ShieldAbsorb" );
//
//	parms.Damage = Damage;
//	this->ProcessEvent ( pShieldAbsorb, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::HasUDamage (  )
//{
//	static UFunction* pHasUDamage = 0;
//	APawn_execHasUDamage_Parms parms;
//
//	if ( !pHasUDamage )
//		pHasUDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.HasUDamage" );
//
//	this->ProcessEvent ( pHasUDamage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::GiveHealth ( int HealAmount, int HealMax )
//{
//	static UFunction* pGiveHealth = 0;
//	APawn_execGiveHealth_Parms parms;
//
//	if ( !pGiveHealth )
//		pGiveHealth = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GiveHealth" );
//
//	parms.HealAmount = HealAmount;
//	parms.HealMax = HealMax;
//	this->ProcessEvent ( pGiveHealth, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::SetMovementPhysics (  )
//{
//	static UFunction* pSetMovementPhysics = 0;
//	APawn_execSetMovementPhysics_Parms parms;
//
//	if ( !pSetMovementPhysics )
//		pSetMovementPhysics = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetMovementPhysics" );
//
//	this->ProcessEvent ( pSetMovementPhysics, &parms, NULL );
//
//}
//
//void APawn::Gasp (  )
//{
//	static UFunction* pGasp = 0;
//	APawn_execGasp_Parms parms;
//
//	if ( !pGasp )
//		pGasp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.Gasp" );
//
//	this->ProcessEvent ( pGasp, &parms, NULL );
//
//}
//
//void APawn::SetMesh (  )
//{
//	static UFunction* pSetMesh = 0;
//	APawn_execSetMesh_Parms parms;
//
//	if ( !pSetMesh )
//		pSetMesh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetMesh" );
//
//	this->ProcessEvent ( pSetMesh, &parms, NULL );
//
//}
//
//void APawn::eventSetShadowLight ( struct FVector vLightDir )
//{
//	static UFunction* pSetShadowLight = 0;
//	APawn_eventSetShadowLight_Parms parms;
//
//	if ( !pSetShadowLight )
//		pSetShadowLight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetShadowLight" );
//
//	parms.vLightDir = vLightDir;
//	this->ProcessEvent ( pSetShadowLight, &parms, NULL );
//
//}
//
//void APawn::eventPostNetBeginPlay (  )
//{
//	static UFunction* pPostNetBeginPlay = 0;
//	APawn_eventPostNetBeginPlay_Parms parms;
//
//	if ( !pPostNetBeginPlay )
//		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PostNetBeginPlay" );
//
//	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );
//
//}
//
//void APawn::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	APawn_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void APawn::eventPreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	APawn_eventPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void APawn::eventDestroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	APawn_eventDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//struct FVector APawn::EyePosition (  )
//{
//	static UFunction* pEyePosition = 0;
//	APawn_execEyePosition_Parms parms;
//
//	if ( !pEyePosition )
//		pEyePosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.EyePosition" );
//
//	this->ProcessEvent ( pEyePosition, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::UpdateEyeHeightScript ( float DeltaTime )
//{
//	static UFunction* pUpdateEyeHeightScript = 0;
//	APawn_execUpdateEyeHeightScript_Parms parms;
//
//	if ( !pUpdateEyeHeightScript )
//		pUpdateEyeHeightScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.UpdateEyeHeightScript" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pUpdateEyeHeightScript, &parms, NULL );
//
//}
//
//void APawn::eventUpdateEyeHeight ( float DeltaTime )
//{
//	static UFunction* pUpdateEyeHeight = 0;
//	APawn_eventUpdateEyeHeight_Parms parms;
//
//	if ( !pUpdateEyeHeight )
//		pUpdateEyeHeight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.UpdateEyeHeight" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pUpdateEyeHeight, &parms, NULL );
//
//}
//
//void APawn::UpdateEyeHeightNative ( float DeltaTime )
//{
//	static UFunction* pUpdateEyeHeightNative = 0;
//	APawn_execUpdateEyeHeightNative_Parms parms;
//
//	if ( !pUpdateEyeHeightNative )
//		pUpdateEyeHeightNative = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.UpdateEyeHeightNative" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pUpdateEyeHeightNative, &parms, NULL );
//
//}
//
//void APawn::eventBaseChange (  )
//{
//	static UFunction* pBaseChange = 0;
//	APawn_eventBaseChange_Parms parms;
//
//	if ( !pBaseChange )
//		pBaseChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.BaseChange" );
//
//	this->ProcessEvent ( pBaseChange, &parms, NULL );
//
//}
//
//void APawn::JumpOffPawn (  )
//{
//	static UFunction* pJumpOffPawn = 0;
//	APawn_execJumpOffPawn_Parms parms;
//
//	if ( !pJumpOffPawn )
//		pJumpOffPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.JumpOffPawn" );
//
//	this->ProcessEvent ( pJumpOffPawn, &parms, NULL );
//
//}
//
//void APawn::gibbedBy ( class AActor* Other )
//{
//	static UFunction* pgibbedBy = 0;
//	APawn_execgibbedBy_Parms parms;
//
//	if ( !pgibbedBy )
//		pgibbedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.gibbedBy" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pgibbedBy, &parms, NULL );
//
//}
//
//void APawn::eventEncroachedBy ( class AActor* Other )
//{
//	static UFunction* pEncroachedBy = 0;
//	APawn_eventEncroachedBy_Parms parms;
//
//	if ( !pEncroachedBy )
//		pEncroachedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.EncroachedBy" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pEncroachedBy, &parms, NULL );
//
//}
//
//bool APawn::eventEncroachingOn ( class AActor* Other )
//{
//	static UFunction* pEncroachingOn = 0;
//	APawn_eventEncroachingOn_Parms parms;
//
//	if ( !pEncroachingOn )
//		pEncroachingOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.EncroachingOn" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pEncroachingOn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::IsHeadShot ( struct FVector loc, struct FVector ray, float AdditionalScale )
//{
//	static UFunction* pIsHeadShot = 0;
//	APawn_execIsHeadShot_Parms parms;
//
//	if ( !pIsHeadShot )
//		pIsHeadShot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.IsHeadShot" );
//
//	parms.loc = loc;
//	parms.ray = ray;
//	parms.AdditionalScale = AdditionalScale;
//	this->ProcessEvent ( pIsHeadShot, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::ServerChangedWeapon ( class AwWeapon* OldWeapon, class AwWeapon* newWeapon )
//{
//	static UFunction* pServerChangedWeapon = 0;
//	APawn_execServerChangedWeapon_Parms parms;
//
//	if ( !pServerChangedWeapon )
//		pServerChangedWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerChangedWeapon" );
//
//	parms.OldWeapon = OldWeapon;
//	parms.newWeapon = newWeapon;
//	this->ProcessEvent ( pServerChangedWeapon, &parms, NULL );
//
//}
//
//struct FName APawn::GetWeaponBoneFor ( class AInventory* i )
//{
//	static UFunction* pGetWeaponBoneFor = 0;
//	APawn_execGetWeaponBoneFor_Parms parms;
//
//	if ( !pGetWeaponBoneFor )
//		pGetWeaponBoneFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetWeaponBoneFor" );
//
//	parms.i = i;
//	this->ProcessEvent ( pGetWeaponBoneFor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FName APawn::GetOffhandBoneFor ( class AInventory* i )
//{
//	static UFunction* pGetOffhandBoneFor = 0;
//	APawn_execGetOffhandBoneFor_Parms parms;
//
//	if ( !pGetOffhandBoneFor )
//		pGetOffhandBoneFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetOffhandBoneFor" );
//
//	parms.i = i;
//	this->ProcessEvent ( pGetOffhandBoneFor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::ChangedWeapon (  )
//{
//	static UFunction* pChangedWeapon = 0;
//	APawn_execChangedWeapon_Parms parms;
//
//	if ( !pChangedWeapon )
//		pChangedWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ChangedWeapon" );
//
//	this->ProcessEvent ( pChangedWeapon, &parms, NULL );
//
//}
//
//void APawn::ClientForceChangedWeapon ( class AwWeapon* newWeapon )
//{
//	static UFunction* pClientForceChangedWeapon = 0;
//	APawn_execClientForceChangedWeapon_Parms parms;
//
//	if ( !pClientForceChangedWeapon )
//		pClientForceChangedWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClientForceChangedWeapon" );
//
//	parms.newWeapon = newWeapon;
//	this->ProcessEvent ( pClientForceChangedWeapon, &parms, NULL );
//
//}
//
//void APawn::DeleteInventory ( class AInventory* Item )
//{
//	static UFunction* pDeleteInventory = 0;
//	APawn_execDeleteInventory_Parms parms;
//
//	if ( !pDeleteInventory )
//		pDeleteInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.DeleteInventory" );
//
//	parms.Item = Item;
//	this->ProcessEvent ( pDeleteInventory, &parms, NULL );
//
//}
//
//void APawn::DeleteInventoryFromStorage ( class AInventory* Item )
//{
//	static UFunction* pDeleteInventoryFromStorage = 0;
//	APawn_execDeleteInventoryFromStorage_Parms parms;
//
//	if ( !pDeleteInventoryFromStorage )
//		pDeleteInventoryFromStorage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.DeleteInventoryFromStorage" );
//
//	parms.Item = Item;
//	this->ProcessEvent ( pDeleteInventoryFromStorage, &parms, NULL );
//
//}
//
//void APawn::DeleteInventoriesFromStorage (  )
//{
//	static UFunction* pDeleteInventoriesFromStorage = 0;
//	APawn_execDeleteInventoriesFromStorage_Parms parms;
//
//	if ( !pDeleteInventoriesFromStorage )
//		pDeleteInventoriesFromStorage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.DeleteInventoriesFromStorage" );
//
//	this->ProcessEvent ( pDeleteInventoriesFromStorage, &parms, NULL );
//
//}
//
//bool APawn::AddInventory ( class AInventory* NewItem )
//{
//	static UFunction* pAddInventory = 0;
//	APawn_execAddInventory_Parms parms;
//
//	if ( !pAddInventory )
//		pAddInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.AddInventory" );
//
//	parms.NewItem = NewItem;
//	this->ProcessEvent ( pAddInventory, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AInventory* APawn::FindInventoryType ( class UClass* DesiredClass )
//{
//	static UFunction* pFindInventoryType = 0;
//	APawn_execFindInventoryType_Parms parms;
//
//	if ( !pFindInventoryType )
//		pFindInventoryType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.FindInventoryType" );
//
//	parms.DesiredClass = DesiredClass;
//	this->ProcessEvent ( pFindInventoryType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::execNextItem (  )
//{
//	static UFunction* pNextItem = 0;
//	APawn_execNextItem_Parms parms;
//
//	if ( !pNextItem )
//		pNextItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.NextItem" );
//
//	this->ProcessEvent ( pNextItem, &parms, NULL );
//
//}
//
//void APawn::ServerNoTranslocator (  )
//{
//	static UFunction* pServerNoTranslocator = 0;
//	APawn_execServerNoTranslocator_Parms parms;
//
//	if ( !pServerNoTranslocator )
//		pServerNoTranslocator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerNoTranslocator" );
//
//	this->ProcessEvent ( pServerNoTranslocator, &parms, NULL );
//
//}
//
//void APawn::SwitchWeaponWClass ( struct FName ClassName, struct FString sReason )
//{
//	static UFunction* pSwitchWeaponWClass = 0;
//	APawn_execSwitchWeaponWClass_Parms parms;
//
//	if ( !pSwitchWeaponWClass )
//		pSwitchWeaponWClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SwitchWeaponWClass" );
//
//	parms.ClassName = ClassName;
//	parms.sReason = sReason;
//	this->ProcessEvent ( pSwitchWeaponWClass, &parms, NULL );
//
//}
//
//bool APawn::SwitchWeaponByWeaponItem ( class AwWeapon* wSwitchWeapon, bool bQuickGr )
//{
//	static UFunction* pSwitchWeaponByWeaponItem = 0;
//	APawn_execSwitchWeaponByWeaponItem_Parms parms;
//
//	if ( !pSwitchWeaponByWeaponItem )
//		pSwitchWeaponByWeaponItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SwitchWeaponByWeaponItem" );
//
//	parms.wSwitchWeapon = wSwitchWeapon;
//	parms.bQuickGr = bQuickGr;
//	this->ProcessEvent ( pSwitchWeaponByWeaponItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::SwitchWeapon ( unsigned char f, bool bQuickGr )
//{
//	static UFunction* pSwitchWeapon = 0;
//	APawn_execSwitchWeapon_Parms parms;
//
//	if ( !pSwitchWeapon )
//		pSwitchWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SwitchWeapon" );
//
//	parms.f = f;
//	parms.bQuickGr = bQuickGr;
//	this->ProcessEvent ( pSwitchWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::SelectPrevWeapon (  )
//{
//	static UFunction* pSelectPrevWeapon = 0;
//	APawn_execSelectPrevWeapon_Parms parms;
//
//	if ( !pSelectPrevWeapon )
//		pSelectPrevWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SelectPrevWeapon" );
//
//	this->ProcessEvent ( pSelectPrevWeapon, &parms, NULL );
//
//}
//
//void APawn::NextWeapon (  )
//{
//	static UFunction* pNextWeapon = 0;
//	APawn_execNextWeapon_Parms parms;
//
//	if ( !pNextWeapon )
//		pNextWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.NextWeapon" );
//
//	this->ProcessEvent ( pNextWeapon, &parms, NULL );
//
//}
//
//void APawn::PrevWeapon (  )
//{
//	static UFunction* pPrevWeapon = 0;
//	APawn_execPrevWeapon_Parms parms;
//
//	if ( !pPrevWeapon )
//		pPrevWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PrevWeapon" );
//
//	this->ProcessEvent ( pPrevWeapon, &parms, NULL );
//
//}
//
//void APawn::SwitchToLastWeapon_ThrowsWeapon (  )
//{
//	static UFunction* pSwitchToLastWeapon_ThrowsWeapon = 0;
//	APawn_execSwitchToLastWeapon_ThrowsWeapon_Parms parms;
//
//	if ( !pSwitchToLastWeapon_ThrowsWeapon )
//		pSwitchToLastWeapon_ThrowsWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SwitchToLastWeapon_ThrowsWeapon" );
//
//	this->ProcessEvent ( pSwitchToLastWeapon_ThrowsWeapon, &parms, NULL );
//
//}
//
//void APawn::execSwitchToLastWeapon (  )
//{
//	static UFunction* pSwitchToLastWeapon = 0;
//	APawn_execSwitchToLastWeapon_Parms parms;
//
//	if ( !pSwitchToLastWeapon )
//		pSwitchToLastWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SwitchToLastWeapon" );
//
//	this->ProcessEvent ( pSwitchToLastWeapon, &parms, NULL );
//
//}
//
//void APawn::ClientPickupWeapon (  )
//{
//	static UFunction* pClientPickupWeapon = 0;
//	APawn_execClientPickupWeapon_Parms parms;
//
//	if ( !pClientPickupWeapon )
//		pClientPickupWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClientPickupWeapon" );
//
//	this->ProcessEvent ( pClientPickupWeapon, &parms, NULL );
//
//}
//
//void APawn::ServerPickupWeapon (  )
//{
//	static UFunction* pServerPickupWeapon = 0;
//	APawn_execServerPickupWeapon_Parms parms;
//
//	if ( !pServerPickupWeapon )
//		pServerPickupWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerPickupWeapon" );
//
//	this->ProcessEvent ( pServerPickupWeapon, &parms, NULL );
//
//}
//
//void APawn::CheckEntryVehicle (  )
//{
//	static UFunction* pCheckEntryVehicle = 0;
//	APawn_execCheckEntryVehicle_Parms parms;
//
//	if ( !pCheckEntryVehicle )
//		pCheckEntryVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CheckEntryVehicle" );
//
//	this->ProcessEvent ( pCheckEntryVehicle, &parms, NULL );
//
//}
//
//void APawn::CheckTouchWeaponPickup (  )
//{
//	static UFunction* pCheckTouchWeaponPickup = 0;
//	APawn_execCheckTouchWeaponPickup_Parms parms;
//
//	if ( !pCheckTouchWeaponPickup )
//		pCheckTouchWeaponPickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CheckTouchWeaponPickup" );
//
//	this->ProcessEvent ( pCheckTouchWeaponPickup, &parms, NULL );
//
//}
//
//void APawn::TossWeapon ( struct FVector TossVel )
//{
//	static UFunction* pTossWeapon = 0;
//	APawn_execTossWeapon_Parms parms;
//
//	if ( !pTossWeapon )
//		pTossWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.TossWeapon" );
//
//	parms.TossVel = TossVel;
//	this->ProcessEvent ( pTossWeapon, &parms, NULL );
//
//}
//
//bool APawn::CanThrowWeapon (  )
//{
//	static UFunction* pCanThrowWeapon = 0;
//	APawn_execCanThrowWeapon_Parms parms;
//
//	if ( !pCanThrowWeapon )
//		pCanThrowWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CanThrowWeapon" );
//
//	this->ProcessEvent ( pCanThrowWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int APawn::CanUseShield ( int Amount )
//{
//	static UFunction* pCanUseShield = 0;
//	APawn_execCanUseShield_Parms parms;
//
//	if ( !pCanUseShield )
//		pCanUseShield = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CanUseShield" );
//
//	parms.Amount = Amount;
//	this->ProcessEvent ( pCanUseShield, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::AddShieldStrength ( int Amount )
//{
//	static UFunction* pAddShieldStrength = 0;
//	APawn_execAddShieldStrength_Parms parms;
//
//	if ( !pAddShieldStrength )
//		pAddShieldStrength = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.AddShieldStrength" );
//
//	parms.Amount = Amount;
//	this->ProcessEvent ( pAddShieldStrength, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float APawn::GetShieldStrength (  )
//{
//	static UFunction* pGetShieldStrength = 0;
//	APawn_execGetShieldStrength_Parms parms;
//
//	if ( !pGetShieldStrength )
//		pGetShieldStrength = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetShieldStrength" );
//
//	this->ProcessEvent ( pGetShieldStrength, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float APawn::GetShieldStrengthMax (  )
//{
//	static UFunction* pGetShieldStrengthMax = 0;
//	APawn_execGetShieldStrengthMax_Parms parms;
//
//	if ( !pGetShieldStrengthMax )
//		pGetShieldStrengthMax = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetShieldStrengthMax" );
//
//	this->ProcessEvent ( pGetShieldStrengthMax, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::DisableUDamage (  )
//{
//	static UFunction* pDisableUDamage = 0;
//	APawn_execDisableUDamage_Parms parms;
//
//	if ( !pDisableUDamage )
//		pDisableUDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.DisableUDamage" );
//
//	this->ProcessEvent ( pDisableUDamage, &parms, NULL );
//
//}
//
//void APawn::EnableUDamage ( float Amount )
//{
//	static UFunction* pEnableUDamage = 0;
//	APawn_execEnableUDamage_Parms parms;
//
//	if ( !pEnableUDamage )
//		pEnableUDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.EnableUDamage" );
//
//	parms.Amount = Amount;
//	this->ProcessEvent ( pEnableUDamage, &parms, NULL );
//
//}
//
//bool APawn::InCurrentCombo (  )
//{
//	static UFunction* pInCurrentCombo = 0;
//	APawn_execInCurrentCombo_Parms parms;
//
//	if ( !pInCurrentCombo )
//		pInCurrentCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.InCurrentCombo" );
//
//	this->ProcessEvent ( pInCurrentCombo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::DoComboName ( struct FString ComboClassName )
//{
//	static UFunction* pDoComboName = 0;
//	APawn_execDoComboName_Parms parms;
//
//	if ( !pDoComboName )
//		pDoComboName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.DoComboName" );
//
//	parms.ComboClassName = ComboClassName;
//	this->ProcessEvent ( pDoComboName, &parms, NULL );
//
//}
//
//void APawn::ClientDying ( class UClass* DamageType, struct FVector HitLocation )
//{
//	static UFunction* pClientDying = 0;
//	APawn_execClientDying_Parms parms;
//
//	if ( !pClientDying )
//		pClientDying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClientDying" );
//
//	parms.DamageType = DamageType;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pClientDying, &parms, NULL );
//
//}
//
//int APawn::LimitPitch ( int Pitch )
//{
//	static UFunction* pLimitPitch = 0;
//	APawn_execLimitPitch_Parms parms;
//
//	if ( !pLimitPitch )
//		pLimitPitch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.LimitPitch" );
//
//	parms.Pitch = Pitch;
//	this->ProcessEvent ( pLimitPitch, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::FaceRotation ( struct FRotator NewRotation, float DeltaTime )
//{
//	static UFunction* pFaceRotation = 0;
//	APawn_execFaceRotation_Parms parms;
//
//	if ( !pFaceRotation )
//		pFaceRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.FaceRotation" );
//
//	parms.NewRotation = NewRotation;
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pFaceRotation, &parms, NULL );
//
//}
//
//void APawn::ClientSetRotation ( struct FRotator NewRotation )
//{
//	static UFunction* pClientSetRotation = 0;
//	APawn_execClientSetRotation_Parms parms;
//
//	if ( !pClientSetRotation )
//		pClientSetRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClientSetRotation" );
//
//	parms.NewRotation = NewRotation;
//	this->ProcessEvent ( pClientSetRotation, &parms, NULL );
//
//}
//
//void APawn::ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation )
//{
//	static UFunction* pClientSetLocation = 0;
//	APawn_execClientSetLocation_Parms parms;
//
//	if ( !pClientSetLocation )
//		pClientSetLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClientSetLocation" );
//
//	parms.NewLocation = NewLocation;
//	parms.NewRotation = NewRotation;
//	this->ProcessEvent ( pClientSetLocation, &parms, NULL );
//
//}
//
//void APawn::ClientReStart (  )
//{
//	static UFunction* pClientReStart = 0;
//	APawn_execClientReStart_Parms parms;
//
//	if ( !pClientReStart )
//		pClientReStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClientReStart" );
//
//	this->ProcessEvent ( pClientReStart, &parms, NULL );
//
//}
//
//void APawn::TakeFallingDamage (  )
//{
//	static UFunction* pTakeFallingDamage = 0;
//	APawn_execTakeFallingDamage_Parms parms;
//
//	if ( !pTakeFallingDamage )
//		pTakeFallingDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.TakeFallingDamage" );
//
//	this->ProcessEvent ( pTakeFallingDamage, &parms, NULL );
//
//}
//
//void APawn::KilledBy ( class APawn* EventInstigator )
//{
//	static UFunction* pKilledBy = 0;
//	APawn_execKilledBy_Parms parms;
//
//	if ( !pKilledBy )
//		pKilledBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.KilledBy" );
//
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pKilledBy, &parms, NULL );
//
//}
//
//void APawn::AddVelocity ( struct FVector NewVelocity )
//{
//	static UFunction* pAddVelocity = 0;
//	APawn_execAddVelocity_Parms parms;
//
//	if ( !pAddVelocity )
//		pAddVelocity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.AddVelocity" );
//
//	parms.NewVelocity = NewVelocity;
//	this->ProcessEvent ( pAddVelocity, &parms, NULL );
//
//}
//
//void APawn::RestartPlayer (  )
//{
//	static UFunction* pRestartPlayer = 0;
//	APawn_execRestartPlayer_Parms parms;
//
//	if ( !pRestartPlayer )
//		pRestartPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.RestartPlayer" );
//
//	this->ProcessEvent ( pRestartPlayer, &parms, NULL );
//
//}
//
//void APawn::eventStartProne ( float HeightAdjust )
//{
//	static UFunction* pStartProne = 0;
//	APawn_eventStartProne_Parms parms;
//
//	if ( !pStartProne )
//		pStartProne = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.StartProne" );
//
//	parms.HeightAdjust = HeightAdjust;
//	this->ProcessEvent ( pStartProne, &parms, NULL );
//
//}
//
//void APawn::eventEndProne ( float HeightAdjust )
//{
//	static UFunction* pEndProne = 0;
//	APawn_eventEndProne_Parms parms;
//
//	if ( !pEndProne )
//		pEndProne = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.EndProne" );
//
//	parms.HeightAdjust = HeightAdjust;
//	this->ProcessEvent ( pEndProne, &parms, NULL );
//
//}
//
//void APawn::eventStartCrouch ( float HeightAdjust )
//{
//	static UFunction* pStartCrouch = 0;
//	APawn_eventStartCrouch_Parms parms;
//
//	if ( !pStartCrouch )
//		pStartCrouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.StartCrouch" );
//
//	parms.HeightAdjust = HeightAdjust;
//	this->ProcessEvent ( pStartCrouch, &parms, NULL );
//
//}
//
//void APawn::eventEndCrouch ( float HeightAdjust )
//{
//	static UFunction* pEndCrouch = 0;
//	APawn_eventEndCrouch_Parms parms;
//
//	if ( !pEndCrouch )
//		pEndCrouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.EndCrouch" );
//
//	parms.HeightAdjust = HeightAdjust;
//	this->ProcessEvent ( pEndCrouch, &parms, NULL );
//
//}
//
//void APawn::ServerSetUseKeyState ( unsigned char byKey )
//{
//	static UFunction* pServerSetUseKeyState = 0;
//	APawn_execServerSetUseKeyState_Parms parms;
//
//	if ( !pServerSetUseKeyState )
//		pServerSetUseKeyState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerSetUseKeyState" );
//
//	parms.byKey = byKey;
//	this->ProcessEvent ( pServerSetUseKeyState, &parms, NULL );
//
//}
//
//void APawn::ShouldProne ( bool Prone )
//{
//	static UFunction* pShouldProne = 0;
//	APawn_execShouldProne_Parms parms;
//
//	if ( !pShouldProne )
//		pShouldProne = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ShouldProne" );
//
//	parms.Prone = Prone;
//	this->ProcessEvent ( pShouldProne, &parms, NULL );
//
//}
//
//void APawn::ShouldCrouch ( bool crouch )
//{
//	static UFunction* pShouldCrouch = 0;
//	APawn_execShouldCrouch_Parms parms;
//
//	if ( !pShouldCrouch )
//		pShouldCrouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ShouldCrouch" );
//
//	parms.crouch = crouch;
//	this->ProcessEvent ( pShouldCrouch, &parms, NULL );
//
//}
//
//void APawn::eventFellOutOfWorld ( unsigned char KillType )
//{
//	static UFunction* pFellOutOfWorld = 0;
//	APawn_eventFellOutOfWorld_Parms parms;
//
//	if ( !pFellOutOfWorld )
//		pFellOutOfWorld = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.FellOutOfWorld" );
//
//	parms.KillType = KillType;
//	this->ProcessEvent ( pFellOutOfWorld, &parms, NULL );
//
//}
//
//void APawn::eventModifyVelocity ( float DeltaTime, struct FVector OldVelocity )
//{
//	static UFunction* pModifyVelocity = 0;
//	APawn_eventModifyVelocity_Parms parms;
//
//	if ( !pModifyVelocity )
//		pModifyVelocity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ModifyVelocity" );
//
//	parms.DeltaTime = DeltaTime;
//	parms.OldVelocity = OldVelocity;
//	this->ProcessEvent ( pModifyVelocity, &parms, NULL );
//
//}
//
//void APawn::JumpOutOfWater ( struct FVector jumpDir )
//{
//	static UFunction* pJumpOutOfWater = 0;
//	APawn_execJumpOutOfWater_Parms parms;
//
//	if ( !pJumpOutOfWater )
//		pJumpOutOfWater = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.JumpOutOfWater" );
//
//	parms.jumpDir = jumpDir;
//	this->ProcessEvent ( pJumpOutOfWater, &parms, NULL );
//
//}
//
//void APawn::FinishedInterpolation (  )
//{
//	static UFunction* pFinishedInterpolation = 0;
//	APawn_execFinishedInterpolation_Parms parms;
//
//	if ( !pFinishedInterpolation )
//		pFinishedInterpolation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.FinishedInterpolation" );
//
//	this->ProcessEvent ( pFinishedInterpolation, &parms, NULL );
//
//}
//
//void APawn::SetDefaultDisplayProperties (  )
//{
//	static UFunction* pSetDefaultDisplayProperties = 0;
//	APawn_execSetDefaultDisplayProperties_Parms parms;
//
//	if ( !pSetDefaultDisplayProperties )
//		pSetDefaultDisplayProperties = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetDefaultDisplayProperties" );
//
//	this->ProcessEvent ( pSetDefaultDisplayProperties, &parms, NULL );
//
//}
//
//void APawn::SetDisplayProperties ( unsigned char NewStyle, class UMaterial* NewTexture, bool bLighting )
//{
//	static UFunction* pSetDisplayProperties = 0;
//	APawn_execSetDisplayProperties_Parms parms;
//
//	if ( !pSetDisplayProperties )
//		pSetDisplayProperties = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetDisplayProperties" );
//
//	parms.NewStyle = NewStyle;
//	parms.NewTexture = NewTexture;
//	parms.bLighting = bLighting;
//	this->ProcessEvent ( pSetDisplayProperties, &parms, NULL );
//
//}
//
//void APawn::GiveWeapon ( struct FString aClassName )
//{
//	static UFunction* pGiveWeapon = 0;
//	APawn_execGiveWeapon_Parms parms;
//
//	if ( !pGiveWeapon )
//		pGiveWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GiveWeapon" );
//
//	parms.aClassName = aClassName;
//	this->ProcessEvent ( pGiveWeapon, &parms, NULL );
//
//}
//
//class AInventory* APawn::CreateInventory ( struct FString InventoryClassName )
//{
//	static UFunction* pCreateInventory = 0;
//	APawn_execCreateInventory_Parms parms;
//
//	if ( !pCreateInventory )
//		pCreateInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CreateInventory" );
//
//	parms.InventoryClassName = InventoryClassName;
//	this->ProcessEvent ( pCreateInventory, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::CanTrigger ( class ATrigger* t )
//{
//	static UFunction* pCanTrigger = 0;
//	APawn_execCanTrigger_Parms parms;
//
//	if ( !pCanTrigger )
//		pCanTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CanTrigger" );
//
//	parms.t = t;
//	this->ProcessEvent ( pCanTrigger, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::Trigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	APawn_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void APawn::eventClientMessage ( struct FString S, struct FName Type )
//{
//	static UFunction* pClientMessage = 0;
//	APawn_eventClientMessage_Parms parms;
//
//	if ( !pClientMessage )
//		pClientMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClientMessage" );
//
//	parms.S = S;
//	parms.Type = Type;
//	this->ProcessEvent ( pClientMessage, &parms, NULL );
//
//}
//
//void APawn::ReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pReceiveLocalizedMessage = 0;
//	APawn_execReceiveLocalizedMessage_Parms parms;
//
//	if ( !pReceiveLocalizedMessage )
//		pReceiveLocalizedMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ReceiveLocalizedMessage" );
//
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pReceiveLocalizedMessage, &parms, NULL );
//
//}
//
//void APawn::HandlePickup ( class APickup* pick )
//{
//	static UFunction* pHandlePickup = 0;
//	APawn_execHandlePickup_Parms parms;
//
//	if ( !pHandlePickup )
//		pHandlePickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.HandlePickup" );
//
//	parms.pick = pick;
//	this->ProcessEvent ( pHandlePickup, &parms, NULL );
//
//}
//
//float APawn::AdjustedStrength (  )
//{
//	static UFunction* pAdjustedStrength = 0;
//	APawn_execAdjustedStrength_Parms parms;
//
//	if ( !pAdjustedStrength )
//		pAdjustedStrength = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.AdjustedStrength" );
//
//	this->ProcessEvent ( pAdjustedStrength, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* APawn::ShootSpecial ( class AActor* A )
//{
//	static UFunction* pShootSpecial = 0;
//	APawn_execShootSpecial_Parms parms;
//
//	if ( !pShootSpecial )
//		pShootSpecial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ShootSpecial" );
//
//	parms.A = A;
//	this->ProcessEvent ( pShootSpecial, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FRotator APawn::AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError )
//{
//	static UFunction* pAdjustAim = 0;
//	APawn_execAdjustAim_Parms parms;
//
//	if ( !pAdjustAim )
//		pAdjustAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.AdjustAim" );
//
//	parms.FiredAmmunition = FiredAmmunition;
//	parms.projStart = projStart;
//	parms.AimError = AimError;
//	this->ProcessEvent ( pAdjustAim, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
bool APawn::LineOfSightTo ( class AActor* Other )
{
	static UFunction* pLineOfSightTo = 0;
	APawn_execLineOfSightTo_Parms parms;

	if ( !pLineOfSightTo )
		pLineOfSightTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.LineOfSightTo" );

	parms.Other = Other;
	this->ProcessEvent ( pLineOfSightTo, &parms, NULL );

	return parms.ReturnValue;
}

void APawn::SetMoveTarget ( class AActor* NewTarget )
{
	static UFunction* pSetMoveTarget = 0;
	APawn_execSetMoveTarget_Parms parms;

	if ( !pSetMoveTarget )
		pSetMoveTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetMoveTarget" );

	parms.NewTarget = NewTarget;
	this->ProcessEvent ( pSetMoveTarget, &parms, NULL );

}

class AActor* APawn::GetMoveTarget (  )
{
	static UFunction* pGetMoveTarget = 0;
	APawn_execGetMoveTarget_Parms parms;

	if ( !pGetMoveTarget )
		pGetMoveTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetMoveTarget" );

	this->ProcessEvent ( pGetMoveTarget, &parms, NULL );

	return parms.ReturnValue;
}

bool APawn::PressingAltFire (  )
{
	static UFunction* pPressingAltFire = 0;
	APawn_execPressingAltFire_Parms parms;

	if ( !pPressingAltFire )
		pPressingAltFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PressingAltFire" );

	this->ProcessEvent ( pPressingAltFire, &parms, NULL );

	return parms.ReturnValue;
}

bool APawn::PressingFire (  )
{
	static UFunction* pPressingFire = 0;
	APawn_execPressingFire_Parms parms;

	if ( !pPressingFire )
		pPressingFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PressingFire" );

	this->ProcessEvent ( pPressingFire, &parms, NULL );

	return parms.ReturnValue;
}

bool APawn::NearMoveTarget (  )
{
	static UFunction* pNearMoveTarget = 0;
	APawn_execNearMoveTarget_Parms parms;

	if ( !pNearMoveTarget )
		pNearMoveTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.NearMoveTarget" );

	this->ProcessEvent ( pNearMoveTarget, &parms, NULL );

	return parms.ReturnValue;
}

bool APawn::InGodMode (  )
{
	static UFunction* pInGodMode = 0;
	APawn_execInGodMode_Parms parms;

	if ( !pInGodMode )
		pInGodMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.InGodMode" );

	this->ProcessEvent ( pInGodMode, &parms, NULL );

	return parms.ReturnValue;
}

void APawn::SetViewRotation ( struct FRotator NewRotation )
{
	static UFunction* pSetViewRotation = 0;
	APawn_execSetViewRotation_Parms parms;

	if ( !pSetViewRotation )
		pSetViewRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetViewRotation" );

	parms.NewRotation = NewRotation;
	this->ProcessEvent ( pSetViewRotation, &parms, NULL );

}

struct FRotator APawn::GetViewRotationForFP (  )
{
	static UFunction* pGetViewRotationForFP = 0;
	APawn_execGetViewRotationForFP_Parms parms;

	if ( !pGetViewRotationForFP )
		pGetViewRotationForFP = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetViewRotationForFP" );

	this->ProcessEvent ( pGetViewRotationForFP, &parms, NULL );

	return parms.ReturnValue;
}

struct FRotator APawn::GetViewRotation (  )
{
	static UFunction* pGetViewRotation = 0;
	APawn_execGetViewRotation_Parms parms;

	if ( !pGetViewRotation )
		pGetViewRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetViewRotation" );

	this->ProcessEvent ( pGetViewRotation, &parms, NULL );

	return parms.ReturnValue;
}
//
//bool APawn::IsLocalPlayerViewtarget (  )
//{
//	static UFunction* pIsLocalPlayerViewtarget = 0;
//	APawn_execIsLocalPlayerViewtarget_Parms parms;
//
//	if ( !pIsLocalPlayerViewtarget )
//		pIsLocalPlayerViewtarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.IsLocalPlayerViewtarget" );
//
//	this->ProcessEvent ( pIsLocalPlayerViewtarget, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::IsFirstPerson (  )
//{
//	static UFunction* pIsFirstPerson = 0;
//	APawn_execIsFirstPerson_Parms parms;
//
//	if ( !pIsFirstPerson )
//		pIsFirstPerson = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.IsFirstPerson" );
//
//	this->ProcessEvent ( pIsFirstPerson, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
////bool APawn::IsLocallyControlled (  )
////{
////	static UFunction* pIsLocallyControlled = 0;
////	APawn_execIsLocallyControlled_Parms parms;
////
////	if ( !pIsLocallyControlled )
////		pIsLocallyControlled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.IsLocallyControlled" );
////
////	this->ProcessEvent ( pIsLocallyControlled, &parms, NULL );
////
////	return parms.ReturnValue;
////}
////
////bool APawn::IsHumanControlled (  )
////{
////	static UFunction* pIsHumanControlled = 0;
////	APawn_execIsHumanControlled_Parms parms;
////
////	if ( !pIsHumanControlled )
////		pIsHumanControlled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.IsHumanControlled" );
////
////	this->ProcessEvent ( pIsHumanControlled, &parms, NULL );
////
////	return parms.ReturnValue;
////}
//
//bool APawn::WasPlayerPawn (  )
//{
//	static UFunction* pWasPlayerPawn = 0;
//	APawn_execWasPlayerPawn_Parms parms;
//
//	if ( !pWasPlayerPawn )
//		pWasPlayerPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.WasPlayerPawn" );
//
//	this->ProcessEvent ( pWasPlayerPawn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::IsPlayerPawn (  )
//{
//	static UFunction* pIsPlayerPawn = 0;
//	APawn_execIsPlayerPawn_Parms parms;
//
//	if ( !pIsPlayerPawn )
//		pIsPlayerPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.IsPlayerPawn" );
//
//	this->ProcessEvent ( pIsPlayerPawn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::CheckTauntValid ( struct FName Sequence )
//{
//	static UFunction* pCheckTauntValid = 0;
//	APawn_execCheckTauntValid_Parms parms;
//
//	if ( !pCheckTauntValid )
//		pCheckTauntValid = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CheckTauntValid" );
//
//	parms.Sequence = Sequence;
//	this->ProcessEvent ( pCheckTauntValid, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::FindValidTaunt ( struct FName* Sequence )
//{
//	static UFunction* pFindValidTaunt = 0;
//	APawn_execFindValidTaunt_Parms parms;
//
//	if ( !pFindValidTaunt )
//		pFindValidTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.FindValidTaunt" );
//
//	parms.Sequence = *Sequence;
//	this->ProcessEvent ( pFindValidTaunt, &parms, NULL );
//
//	*Sequence = parms.Sequence;
//	return parms.ReturnValue;
//}
//
//void APawn::eventStopDriving ( class AVehicle* V )
//{
//	static UFunction* pStopDriving = 0;
//	APawn_eventStopDriving_Parms parms;
//
//	if ( !pStopDriving )
//		pStopDriving = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.StopDriving" );
//
//	parms.V = V;
//	this->ProcessEvent ( pStopDriving, &parms, NULL );
//
//}
//
//void APawn::eventStartDriving ( class AVehicle* V )
//{
//	static UFunction* pStartDriving = 0;
//	APawn_eventStartDriving_Parms parms;
//
//	if ( !pStartDriving )
//		pStartDriving = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.StartDriving" );
//
//	parms.V = V;
//	this->ProcessEvent ( pStartDriving, &parms, NULL );
//
//}
//
//void APawn::ForceStandup (  )
//{
//	static UFunction* pForceStandup = 0;
//	APawn_execForceStandup_Parms parms;
//
//	if ( !pForceStandup )
//		pForceStandup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ForceStandup" );
//
//	this->ProcessEvent ( pForceStandup, &parms, NULL );
//
//}
//
//void APawn::InitialPlayer (  )
//{
//	static UFunction* pInitialPlayer = 0;
//	APawn_execInitialPlayer_Parms parms;
//
//	if ( !pInitialPlayer )
//		pInitialPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.InitialPlayer" );
//
//	this->ProcessEvent ( pInitialPlayer, &parms, NULL );
//
//}
//
//void APawn::CheckBob ( float DeltaTime, struct FVector Y )
//{
//	static UFunction* pCheckBob = 0;
//	APawn_execCheckBob_Parms parms;
//
//	if ( !pCheckBob )
//		pCheckBob = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CheckBob" );
//
//	parms.DeltaTime = DeltaTime;
//	parms.Y = Y;
//	this->ProcessEvent ( pCheckBob, &parms, NULL );
//
//}
//
//void APawn::GetBobParam ( float* Bob, float* BobCamera, float* fBobZ, float* fBobCameraZ )
//{
//	static UFunction* pGetBobParam = 0;
//	APawn_execGetBobParam_Parms parms;
//
//	if ( !pGetBobParam )
//		pGetBobParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetBobParam" );
//
//	parms.Bob = *Bob;
//	parms.BobCamera = *BobCamera;
//	parms.fBobZ = *fBobZ;
//	parms.fBobCameraZ = *fBobCameraZ;
//	this->ProcessEvent ( pGetBobParam, &parms, NULL );
//
//	*Bob = parms.Bob;
//	*BobCamera = parms.BobCamera;
//	*fBobZ = parms.fBobZ;
//	*fBobCameraZ = parms.fBobCameraZ;
//}
//
//float APawn::GetMaxSpeed (  )
//{
//	static UFunction* pGetMaxSpeed = 0;
//	APawn_execGetMaxSpeed_Parms parms;
//
//	if ( !pGetMaxSpeed )
//		pGetMaxSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetMaxSpeed" );
//
//	this->ProcessEvent ( pGetMaxSpeed, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FVector APawn::WeaponBob ( float BobDamping )
//{
//	static UFunction* pWeaponBob = 0;
//	APawn_execWeaponBob_Parms parms;
//
//	if ( !pWeaponBob )
//		pWeaponBob = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.WeaponBob" );
//
//	parms.BobDamping = BobDamping;
//	this->ProcessEvent ( pWeaponBob, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FVector APawn::ModifiedPlayerViewOffset ( class AInventory* Inv )
//{
//	static UFunction* pModifiedPlayerViewOffset = 0;
//	APawn_execModifiedPlayerViewOffset_Parms parms;
//
//	if ( !pModifiedPlayerViewOffset )
//		pModifiedPlayerViewOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ModifiedPlayerViewOffset" );
//
//	parms.Inv = Inv;
//	this->ProcessEvent ( pModifiedPlayerViewOffset, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FVector APawn::CameraShake (  )
//{
//	static UFunction* pCameraShake = 0;
//	APawn_execCameraShake_Parms parms;
//
//	if ( !pCameraShake )
//		pCameraShake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CameraShake" );
//
//	this->ProcessEvent ( pCameraShake, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FVector APawn::CalcFPSpectatorDrawOffset ( struct FVector VOffset, struct FRotator rRotation, struct FVector vBobOffset )
//{
//	static UFunction* pCalcFPSpectatorDrawOffset = 0;
//	APawn_execCalcFPSpectatorDrawOffset_Parms parms;
//
//	if ( !pCalcFPSpectatorDrawOffset )
//		pCalcFPSpectatorDrawOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CalcFPSpectatorDrawOffset" );
//
//	parms.VOffset = VOffset;
//	parms.rRotation = rRotation;
//	parms.vBobOffset = vBobOffset;
//	this->ProcessEvent ( pCalcFPSpectatorDrawOffset, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FVector APawn::CalcDrawOffset ( class AInventory* Inv )
//{
//	static UFunction* pCalcDrawOffset = 0;
//	APawn_execCalcDrawOffset_Parms parms;
//
//	if ( !pCalcDrawOffset )
//		pCalcDrawOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CalcDrawOffset" );
//
//	parms.Inv = Inv;
//	this->ProcessEvent ( pCalcDrawOffset, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	APawn_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//void APawn::ClimbLadder ( class ALadderVolume* L )
//{
//	static UFunction* pClimbLadder = 0;
//	APawn_execClimbLadder_Parms parms;
//
//	if ( !pClimbLadder )
//		pClimbLadder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClimbLadder" );
//
//	parms.L = L;
//	this->ProcessEvent ( pClimbLadder, &parms, NULL );
//
//}
//
//void APawn::EndClimbLadder ( class ALadderVolume* OldLadder )
//{
//	static UFunction* pEndClimbLadder = 0;
//	APawn_execEndClimbLadder_Parms parms;
//
//	if ( !pEndClimbLadder )
//		pEndClimbLadder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.EndClimbLadder" );
//
//	parms.OldLadder = OldLadder;
//	this->ProcessEvent ( pEndClimbLadder, &parms, NULL );
//
//}
//
//bool APawn::CanSplash (  )
//{
//	static UFunction* pCanSplash = 0;
//	APawn_execCanSplash_Parms parms;
//
//	if ( !pCanSplash )
//		pCanSplash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CanSplash" );
//
//	this->ProcessEvent ( pCanSplash, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::eventSetSprinting ( bool bNewIsSprinting )
//{
//	static UFunction* pSetSprinting = 0;
//	APawn_eventSetSprinting_Parms parms;
//
//	if ( !pSetSprinting )
//		pSetSprinting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetSprinting" );
//
//	parms.bNewIsSprinting = bNewIsSprinting;
//	this->ProcessEvent ( pSetSprinting, &parms, NULL );
//
//}
//
//bool APawn::CanGrabLadder (  )
//{
//	static UFunction* pCanGrabLadder = 0;
//	APawn_execCanGrabLadder_Parms parms;
//
//	if ( !pCanGrabLadder )
//		pCanGrabLadder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CanGrabLadder" );
//
//	this->ProcessEvent ( pCanGrabLadder, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::DropToGround (  )
//{
//	static UFunction* pDropToGround = 0;
//	APawn_execDropToGround_Parms parms;
//
//	if ( !pDropToGround )
//		pDropToGround = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.DropToGround" );
//
//	this->ProcessEvent ( pDropToGround, &parms, NULL );
//
//}
//
//void APawn::BecomeViewTarget (  )
//{
//	static UFunction* pBecomeViewTarget = 0;
//	APawn_execBecomeViewTarget_Parms parms;
//
//	if ( !pBecomeViewTarget )
//		pBecomeViewTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.BecomeViewTarget" );
//
//	this->ProcessEvent ( pBecomeViewTarget, &parms, NULL );
//
//}
//
//bool APawn::PointOfView (  )
//{
//	static UFunction* pPointOfView = 0;
//	APawn_execPointOfView_Parms parms;
//
//	if ( !pPointOfView )
//		pPointOfView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PointOfView" );
//
//	this->ProcessEvent ( pPointOfView, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::UnPossessed (  )
//{
//	static UFunction* pUnPossessed = 0;
//	APawn_execUnPossessed_Parms parms;
//
//	if ( !pUnPossessed )
//		pUnPossessed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.UnPossessed" );
//
//	this->ProcessEvent ( pUnPossessed, &parms, NULL );
//
//}
//
//void APawn::PossessedBy ( class AController* C )
//{
//	static UFunction* pPossessedBy = 0;
//	APawn_execPossessedBy_Parms parms;
//
//	if ( !pPossessedBy )
//		pPossessedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PossessedBy" );
//
//	parms.C = C;
//	this->ProcessEvent ( pPossessedBy, &parms, NULL );
//
//}
//
//void APawn::ChangeInventoryByQSlot (  )
//{
//	static UFunction* pChangeInventoryByQSlot = 0;
//	APawn_execChangeInventoryByQSlot_Parms parms;
//
//	if ( !pChangeInventoryByQSlot )
//		pChangeInventoryByQSlot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ChangeInventoryByQSlot" );
//
//	this->ProcessEvent ( pChangeInventoryByQSlot, &parms, NULL );
//
//}
//
//void APawn::AddDefaultSkills ( bool bQuickslotChange )
//{
//	static UFunction* pAddDefaultSkills = 0;
//	APawn_execAddDefaultSkills_Parms parms;
//
//	if ( !pAddDefaultSkills )
//		pAddDefaultSkills = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.AddDefaultSkills" );
//
//	parms.bQuickslotChange = bQuickslotChange;
//	this->ProcessEvent ( pAddDefaultSkills, &parms, NULL );
//
//}
//
//void APawn::NotifyTeamChanged (  )
//{
//	static UFunction* pNotifyTeamChanged = 0;
//	APawn_execNotifyTeamChanged_Parms parms;
//
//	if ( !pNotifyTeamChanged )
//		pNotifyTeamChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.NotifyTeamChanged" );
//
//	this->ProcessEvent ( pNotifyTeamChanged, &parms, NULL );
//
//}
//
//bool APawn::PerformDodge ( unsigned char DoubleClickMove, struct FVector Dir, struct FVector Cross )
//{
//	static UFunction* pPerformDodge = 0;
//	APawn_execPerformDodge_Parms parms;
//
//	if ( !pPerformDodge )
//		pPerformDodge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PerformDodge" );
//
//	parms.DoubleClickMove = DoubleClickMove;
//	parms.Dir = Dir;
//	parms.Cross = Cross;
//	this->ProcessEvent ( pPerformDodge, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::DropFlag ( struct FString sReason )
//{
//	static UFunction* pDropFlag = 0;
//	APawn_execDropFlag_Parms parms;
//
//	if ( !pDropFlag )
//		pDropFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.DropFlag" );
//
//	parms.sReason = sReason;
//	this->ProcessEvent ( pDropFlag, &parms, NULL );
//
//}
//
//void APawn::HoldFlag ( class AActor* FlagActor )
//{
//	static UFunction* pHoldFlag = 0;
//	APawn_execHoldFlag_Parms parms;
//
//	if ( !pHoldFlag )
//		pHoldFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.HoldFlag" );
//
//	parms.FlagActor = FlagActor;
//	this->ProcessEvent ( pHoldFlag, &parms, NULL );
//
//}
//
//void APawn::PlayTeleportEffect ( bool bOut, bool bSound )
//{
//	static UFunction* pPlayTeleportEffect = 0;
//	APawn_execPlayTeleportEffect_Parms parms;
//
//	if ( !pPlayTeleportEffect )
//		pPlayTeleportEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayTeleportEffect" );
//
//	parms.bOut = bOut;
//	parms.bSound = bSound;
//	this->ProcessEvent ( pPlayTeleportEffect, &parms, NULL );
//
//}
//
//struct FString APawn::GetHumanReadableName (  )
//{
//	static UFunction* pGetHumanReadableName = 0;
//	APawn_execGetHumanReadableName_Parms parms;
//
//	if ( !pGetHumanReadableName )
//		pGetHumanReadableName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetHumanReadableName" );
//
//	this->ProcessEvent ( pGetHumanReadableName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::SpectatorSpecialCalcView ( class APlayerController* Viewer, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation )
//{
//	static UFunction* pSpectatorSpecialCalcView = 0;
//	APawn_execSpectatorSpecialCalcView_Parms parms;
//
//	if ( !pSpectatorSpecialCalcView )
//		pSpectatorSpecialCalcView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SpectatorSpecialCalcView" );
//
//	parms.Viewer = Viewer;
//	this->ProcessEvent ( pSpectatorSpecialCalcView, &parms, NULL );
//
//	*ViewActor = parms.ViewActor;
//	*CameraLocation = parms.CameraLocation;
//	*CameraRotation = parms.CameraRotation;
//	return parms.ReturnValue;
//}
//
//bool APawn::SpecialCalcView ( class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation )
//{
//	static UFunction* pSpecialCalcView = 0;
//	APawn_execSpecialCalcView_Parms parms;
//
//	if ( !pSpecialCalcView )
//		pSpecialCalcView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SpecialCalcView" );
//
//	parms.ViewActor = *ViewActor;
//	parms.CameraLocation = *CameraLocation;
//	parms.CameraRotation = *CameraRotation;
//	this->ProcessEvent ( pSpecialCalcView, &parms, NULL );
//
//	*ViewActor = parms.ViewActor;
//	*CameraLocation = parms.CameraLocation;
//	*CameraRotation = parms.CameraRotation;
//	return parms.ReturnValue;
//}
//
//void APawn::SpecialDrawCrosshair ( class UCanvas* C )
//{
//	static UFunction* pSpecialDrawCrosshair = 0;
//	APawn_execSpecialDrawCrosshair_Parms parms;
//
//	if ( !pSpecialDrawCrosshair )
//		pSpecialDrawCrosshair = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SpecialDrawCrosshair" );
//
//	parms.C = C;
//	this->ProcessEvent ( pSpecialDrawCrosshair, &parms, NULL );
//
//}
//
//void APawn::DrawHUD ( class UCanvas* Canvas )
//{
//	static UFunction* pDrawHUD = 0;
//	APawn_execDrawHUD_Parms parms;
//
//	if ( !pDrawHUD )
//		pDrawHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.DrawHUD" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDrawHUD, &parms, NULL );
//
//}
//
//float APawn::ModifyThreat ( float Current, class APawn* Threat )
//{
//	static UFunction* pModifyThreat = 0;
//	APawn_execModifyThreat_Parms parms;
//
//	if ( !pModifyThreat )
//		pModifyThreat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ModifyThreat" );
//
//	parms.Current = Current;
//	parms.Threat = Threat;
//	this->ProcessEvent ( pModifyThreat, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::NeedToTurn ( struct FVector targ )
//{
//	static UFunction* pNeedToTurn = 0;
//	APawn_execNeedToTurn_Parms parms;
//
//	if ( !pNeedToTurn )
//		pNeedToTurn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.NeedToTurn" );
//
//	parms.targ = targ;
//	this->ProcessEvent ( pNeedToTurn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::FireOnRelease (  )
//{
//	static UFunction* pFireOnRelease = 0;
//	APawn_execFireOnRelease_Parms parms;
//
//	if ( !pFireOnRelease )
//		pFireOnRelease = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.FireOnRelease" );
//
//	this->ProcessEvent ( pFireOnRelease, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::IsWeaponSingleFire (  )
//{
//	static UFunction* pIsWeaponSingleFire = 0;
//	APawn_execIsWeaponSingleFire_Parms parms;
//
//	if ( !pIsWeaponSingleFire )
//		pIsWeaponSingleFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.IsWeaponSingleFire" );
//
//	this->ProcessEvent ( pIsWeaponSingleFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::IsFiring (  )
//{
//	static UFunction* pIsFiring = 0;
//	APawn_execIsFiring_Parms parms;
//
//	if ( !pIsFiring )
//		pIsFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.IsFiring" );
//
//	this->ProcessEvent ( pIsFiring, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float APawn::RefireRate (  )
//{
//	static UFunction* pRefireRate = 0;
//	APawn_execRefireRate_Parms parms;
//
//	if ( !pRefireRate )
//		pRefireRate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.RefireRate" );
//
//	this->ProcessEvent ( pRefireRate, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::TooCloseToAttack ( class AActor* Other )
//{
//	static UFunction* pTooCloseToAttack = 0;
//	APawn_execTooCloseToAttack_Parms parms;
//
//	if ( !pTooCloseToAttack )
//		pTooCloseToAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.TooCloseToAttack" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTooCloseToAttack, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::CanAttack ( class AActor* Other )
//{
//	static UFunction* pCanAttack = 0;
//	APawn_execCanAttack_Parms parms;
//
//	if ( !pCanAttack )
//		pCanAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CanAttack" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pCanAttack, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::RecommendLongRangedAttack (  )
//{
//	static UFunction* pRecommendLongRangedAttack = 0;
//	APawn_execRecommendLongRangedAttack_Parms parms;
//
//	if ( !pRecommendLongRangedAttack )
//		pRecommendLongRangedAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.RecommendLongRangedAttack" );
//
//	this->ProcessEvent ( pRecommendLongRangedAttack, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::AltFire ( float f )
//{
//	static UFunction* pAltFire = 0;
//	APawn_execAltFire_Parms parms;
//
//	if ( !pAltFire )
//		pAltFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.AltFire" );
//
//	parms.f = f;
//	this->ProcessEvent ( pAltFire, &parms, NULL );
//
//}
//
//void APawn::Fire ( float f )
//{
//	static UFunction* pFire = 0;
//	APawn_execFire_Parms parms;
//
//	if ( !pFire )
//		pFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.Fire" );
//
//	parms.f = f;
//	this->ProcessEvent ( pFire, &parms, NULL );
//
//}
//
bool APawn::StopWeaponFiring (  )
{
	static UFunction* pStopWeaponFiring = 0;
	APawn_execStopWeaponFiring_Parms parms;

	if ( !pStopWeaponFiring )
		pStopWeaponFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.StopWeaponFiring" );

	this->ProcessEvent ( pStopWeaponFiring, &parms, NULL );

	return parms.ReturnValue;
}
//
//void APawn::ChooseFireAt ( class AActor* A )
//{
//	static UFunction* pChooseFireAt = 0;
//	APawn_execChooseFireAt_Parms parms;
//
//	if ( !pChooseFireAt )
//		pChooseFireAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ChooseFireAt" );
//
//	parms.A = A;
//	this->ProcessEvent ( pChooseFireAt, &parms, NULL );
//
//}
//
//class AwWeapon* APawn::GetWeaponByInvenGroup ( int nInvenGroupID )
//{
//	static UFunction* pGetWeaponByInvenGroup = 0;
//	APawn_execGetWeaponByInvenGroup_Parms parms;
//
//	if ( !pGetWeaponByInvenGroup )
//		pGetWeaponByInvenGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetWeaponByInvenGroup" );
//
//	parms.nInvenGroupID = nInvenGroupID;
//	this->ProcessEvent ( pGetWeaponByInvenGroup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::HasWeaponByWeaponID ( int weaponID )
//{
//	static UFunction* pHasWeaponByWeaponID = 0;
//	APawn_execHasWeaponByWeaponID_Parms parms;
//
//	if ( !pHasWeaponByWeaponID )
//		pHasWeaponByWeaponID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.HasWeaponByWeaponID" );
//
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pHasWeaponByWeaponID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APawn::HasWeapon (  )
//{
//	static UFunction* pHasWeapon = 0;
//	APawn_execHasWeapon_Parms parms;
//
//	if ( !pHasWeapon )
//		pHasWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.HasWeapon" );
//
//	this->ProcessEvent ( pHasWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::Reset (  )
//{
//	static UFunction* pReset = 0;
//	APawn_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void APawn::PlayerChangedTeam (  )
//{
//	static UFunction* pPlayerChangedTeam = 0;
//	APawn_execPlayerChangedTeam_Parms parms;
//
//	if ( !pPlayerChangedTeam )
//		pPlayerChangedTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayerChangedTeam" );
//
//	this->ProcessEvent ( pPlayerChangedTeam, &parms, NULL );
//
//}
//
//class AActor* APawn::GetPathTo ( class AActor* Dest )
//{
//	static UFunction* pGetPathTo = 0;
//	APawn_execGetPathTo_Parms parms;
//
//	if ( !pGetPathTo )
//		pGetPathTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetPathTo" );
//
//	parms.Dest = Dest;
//	this->ProcessEvent ( pGetPathTo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::DeactivateSpawnProtection (  )
//{
//	static UFunction* pDeactivateSpawnProtection = 0;
//	APawn_execDeactivateSpawnProtection_Parms parms;
//
//	if ( !pDeactivateSpawnProtection )
//		pDeactivateSpawnProtection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.DeactivateSpawnProtection" );
//
//	this->ProcessEvent ( pDeactivateSpawnProtection, &parms, NULL );
//
//}
//
class APawn* APawn::GetAimTarget (  )
{
	static UFunction* pGetAimTarget = 0;
	APawn_execGetAimTarget_Parms parms;

	if ( !pGetAimTarget )
		pGetAimTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetAimTarget" );

	this->ProcessEvent ( pGetAimTarget, &parms, NULL );

	return parms.ReturnValue;
}
//
//bool APawn::GetIsFiring (  )
//{
//	static UFunction* pGetIsFiring = 0;
//	APawn_execGetIsFiring_Parms parms;
//
//	if ( !pGetIsFiring )
//		pGetIsFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetIsFiring" );
//
//	this->ProcessEvent ( pGetIsFiring, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::SetBaseEyeheight (  )
//{
//	static UFunction* pSetBaseEyeheight = 0;
//	APawn_execSetBaseEyeheight_Parms parms;
//
//	if ( !pSetBaseEyeheight )
//		pSetBaseEyeheight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetBaseEyeheight" );
//
//	this->ProcessEvent ( pSetBaseEyeheight, &parms, NULL );
//
//}
//
//class AwWeapon* APawn::GetDemoRecordingWeapon (  )
//{
//	static UFunction* pGetDemoRecordingWeapon = 0;
//	APawn_execGetDemoRecordingWeapon_Parms parms;
//
//	if ( !pGetDemoRecordingWeapon )
//		pGetDemoRecordingWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetDemoRecordingWeapon" );
//
//	this->ProcessEvent ( pGetDemoRecordingWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int APawn::GetPostureIndex (  )
//{
//	static UFunction* pGetPostureIndex = 0;
//	APawn_execGetPostureIndex_Parms parms;
//
//	if ( !pGetPostureIndex )
//		pGetPostureIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetPostureIndex" );
//
//	this->ProcessEvent ( pGetPostureIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::SpawnMedals (  )
//{
//	static UFunction* pSpawnMedals = 0;
//	APawn_execSpawnMedals_Parms parms;
//
//	if ( !pSpawnMedals )
//		pSpawnMedals = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SpawnMedals" );
//
//	this->ProcessEvent ( pSpawnMedals, &parms, NULL );
//
//}
//
//int APawn::SpawnSupplyItem (  )
//{
//	static UFunction* pSpawnSupplyItem = 0;
//	APawn_execSpawnSupplyItem_Parms parms;
//
//	if ( !pSpawnSupplyItem )
//		pSpawnSupplyItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SpawnSupplyItem" );
//
//	this->ProcessEvent ( pSpawnSupplyItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::MakeShellEffect_Rechamber (  )
//{
//	static UFunction* pMakeShellEffect_Rechamber = 0;
//	APawn_execMakeShellEffect_Rechamber_Parms parms;
//
//	if ( !pMakeShellEffect_Rechamber )
//		pMakeShellEffect_Rechamber = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.MakeShellEffect_Rechamber" );
//
//	this->ProcessEvent ( pMakeShellEffect_Rechamber, &parms, NULL );
//
//}
//
//void APawn::MakeShellEffect (  )
//{
//	static UFunction* pMakeShellEffect = 0;
//	APawn_execMakeShellEffect_Parms parms;
//
//	if ( !pMakeShellEffect )
//		pMakeShellEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.MakeShellEffect" );
//
//	this->ProcessEvent ( pMakeShellEffect, &parms, NULL );
//
//}
//
//void APawn::ForcePlayIdle (  )
//{
//	static UFunction* pForcePlayIdle = 0;
//	APawn_execForcePlayIdle_Parms parms;
//
//	if ( !pForcePlayIdle )
//		pForcePlayIdle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ForcePlayIdle" );
//
//	this->ProcessEvent ( pForcePlayIdle, &parms, NULL );
//
//}
//
//bool APawn::CheckProneRotate ( int CurYaw, int NewYaw )
//{
//	static UFunction* pCheckProneRotate = 0;
//	APawn_execCheckProneRotate_Parms parms;
//
//	if ( !pCheckProneRotate )
//		pCheckProneRotate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CheckProneRotate" );
//
//	parms.CurYaw = CurYaw;
//	parms.NewYaw = NewYaw;
//	this->ProcessEvent ( pCheckProneRotate, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::RefreshCollisionHash (  )
//{
//	static UFunction* pRefreshCollisionHash = 0;
//	APawn_execRefreshCollisionHash_Parms parms;
//
//	if ( !pRefreshCollisionHash )
//		pRefreshCollisionHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.RefreshCollisionHash" );
//
//	this->ProcessEvent ( pRefreshCollisionHash, &parms, NULL );
//
//}
//
//void APawn::ForceCrouch (  )
//{
//	static UFunction* pForceCrouch = 0;
//	APawn_execForceCrouch_Parms parms;
//
//	if ( !pForceCrouch )
//		pForceCrouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ForceCrouch" );
//
//	this->ProcessEvent ( pForceCrouch, &parms, NULL );
//
//}
//
//bool APawn::ReachedDestination ( class AActor* Goal )
//{
//	static UFunction* pReachedDestination = 0;
//	APawn_execReachedDestination_Parms parms;
//
//	if ( !pReachedDestination )
//		pReachedDestination = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ReachedDestination" );
//
//	parms.Goal = Goal;
//	this->ProcessEvent ( pReachedDestination, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::eventPostRender2D ( class UCanvas* C, float ScreenLocX, float ScreenLocY )
//{
//	static UFunction* pPostRender2D = 0;
//	APawn_eventPostRender2D_Parms parms;
//
//	if ( !pPostRender2D )
//		pPostRender2D = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PostRender2D" );
//
//	parms.C = C;
//	parms.ScreenLocX = ScreenLocX;
//	parms.ScreenLocY = ScreenLocY;
//	this->ProcessEvent ( pPostRender2D, &parms, NULL );
//
//}
//
//struct FVector APawn::GetDetailOffset ( struct FVector vLoc, struct FRotator rRot )
//{
//	static UFunction* pGetDetailOffset = 0;
//	APawn_execGetDetailOffset_Parms parms;
//
//	if ( !pGetDetailOffset )
//		pGetDetailOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetDetailOffset" );
//
//	parms.vLoc = vLoc;
//	parms.rRot = rRot;
//	this->ProcessEvent ( pGetDetailOffset, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::AddNoWeaponChangeMessage ( unsigned char bySlot )
//{
//	static UFunction* pAddNoWeaponChangeMessage = 0;
//	APawn_execAddNoWeaponChangeMessage_Parms parms;
//
//	if ( !pAddNoWeaponChangeMessage )
//		pAddNoWeaponChangeMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.AddNoWeaponChangeMessage" );
//
//	parms.bySlot = bySlot;
//	this->ProcessEvent ( pAddNoWeaponChangeMessage, &parms, NULL );
//
//}
//
//void APawn::eventSetHeadScale ( float NewScale )
//{
//	static UFunction* pSetHeadScale = 0;
//	APawn_eventSetHeadScale_Parms parms;
//
//	if ( !pSetHeadScale )
//		pSetHeadScale = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetHeadScale" );
//
//	parms.NewScale = NewScale;
//	this->ProcessEvent ( pSetHeadScale, &parms, NULL );
//
//}
//
//bool APawn::GetIsEnableProne (  )
//{
//	static UFunction* pGetIsEnableProne = 0;
//	APawn_execGetIsEnableProne_Parms parms;
//
//	if ( !pGetIsEnableProne )
//		pGetIsEnableProne = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.GetIsEnableProne" );
//
//	this->ProcessEvent ( pGetIsEnableProne, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int APawn::Get4WayDirection (  )
//{
//	static UFunction* pGet4WayDirection = 0;
//	APawn_execGet4WayDirection_Parms parms;
//
//	if ( !pGet4WayDirection )
//		pGet4WayDirection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.Get4WayDirection" );
//
//	this->ProcessEvent ( pGet4WayDirection, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::SetTwistLook ( int twist, int look )
//{
//	static UFunction* pSetTwistLook = 0;
//	APawn_execSetTwistLook_Parms parms;
//
//	if ( !pSetTwistLook )
//		pSetTwistLook = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetTwistLook" );
//
//	parms.twist = twist;
//	parms.look = look;
//	this->ProcessEvent ( pSetTwistLook, &parms, NULL );
//
//}
//
//void APawn::SetViewPitch ( int NewPitch )
//{
//	static UFunction* pSetViewPitch = 0;
//	APawn_execSetViewPitch_Parms parms;
//
//	if ( !pSetViewPitch )
//		pSetViewPitch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.SetViewPitch" );
//
//	parms.NewPitch = NewPitch;
//	this->ProcessEvent ( pSetViewPitch, &parms, NULL );
//
//}
//
//void APawn::StaticPrecache ( class ALevelInfo* L )
//{
//	static UFunction* pStaticPrecache = 0;
//	APawn_execStaticPrecache_Parms parms;
//
//	if ( !pStaticPrecache )
//		pStaticPrecache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.StaticPrecache" );
//
//	parms.L = L;
//	this->ProcessEvent ( pStaticPrecache, &parms, NULL );
//
//}
//
//void APawn::ServerStanceChanged ( unsigned char ss )
//{
//	static UFunction* pServerStanceChanged = 0;
//	APawn_execServerStanceChanged_Parms parms;
//
//	if ( !pServerStanceChanged )
//		pServerStanceChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerStanceChanged" );
//
//	parms.ss = ss;
//	this->ProcessEvent ( pServerStanceChanged, &parms, NULL );
//
//}
//
//void APawn::eventServerSetPlayerScoreInfo ( int TeamIndex, int Kills, int Assists, int Deaths, int EXPs, int Points, int Scores )
//{
//	static UFunction* pServerSetPlayerScoreInfo = 0;
//	APawn_eventServerSetPlayerScoreInfo_Parms parms;
//
//	if ( !pServerSetPlayerScoreInfo )
//		pServerSetPlayerScoreInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerSetPlayerScoreInfo" );
//
//	parms.TeamIndex = TeamIndex;
//	parms.Kills = Kills;
//	parms.Assists = Assists;
//	parms.Deaths = Deaths;
//	parms.EXPs = EXPs;
//	parms.Points = Points;
//	parms.Scores = Scores;
//	this->ProcessEvent ( pServerSetPlayerScoreInfo, &parms, NULL );
//
//}
//
//void APawn::eventClientSetPlayerScoreInfo (  )
//{
//	static UFunction* pClientSetPlayerScoreInfo = 0;
//	APawn_eventClientSetPlayerScoreInfo_Parms parms;
//
//	if ( !pClientSetPlayerScoreInfo )
//		pClientSetPlayerScoreInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClientSetPlayerScoreInfo" );
//
//	this->ProcessEvent ( pClientSetPlayerScoreInfo, &parms, NULL );
//
//}
//
//void APawn::eventStorePlayerScoreInfo (  )
//{
//	static UFunction* pStorePlayerScoreInfo = 0;
//	APawn_eventStorePlayerScoreInfo_Parms parms;
//
//	if ( !pStorePlayerScoreInfo )
//		pStorePlayerScoreInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.StorePlayerScoreInfo" );
//
//	this->ProcessEvent ( pStorePlayerScoreInfo, &parms, NULL );
//
//}
//
//void APawn::eventServerSetWeaponInfo ( int WeaponClassNumber, int WeaponAddPartsID, int WeaponTotalAmmo, int WeaponCurrentAmmo )
//{
//	static UFunction* pServerSetWeaponInfo = 0;
//	APawn_eventServerSetWeaponInfo_Parms parms;
//
//	if ( !pServerSetWeaponInfo )
//		pServerSetWeaponInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerSetWeaponInfo" );
//
//	parms.WeaponClassNumber = WeaponClassNumber;
//	parms.WeaponAddPartsID = WeaponAddPartsID;
//	parms.WeaponTotalAmmo = WeaponTotalAmmo;
//	parms.WeaponCurrentAmmo = WeaponCurrentAmmo;
//	this->ProcessEvent ( pServerSetWeaponInfo, &parms, NULL );
//
//}
//
//void APawn::eventClientSetWeaponInfo (  )
//{
//	static UFunction* pClientSetWeaponInfo = 0;
//	APawn_eventClientSetWeaponInfo_Parms parms;
//
//	if ( !pClientSetWeaponInfo )
//		pClientSetWeaponInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ClientSetWeaponInfo" );
//
//	this->ProcessEvent ( pClientSetWeaponInfo, &parms, NULL );
//
//}
//
//void APawn::eventStoreWeaponInfo (  )
//{
//	static UFunction* pStoreWeaponInfo = 0;
//	APawn_eventStoreWeaponInfo_Parms parms;
//
//	if ( !pStoreWeaponInfo )
//		pStoreWeaponInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.StoreWeaponInfo" );
//
//	this->ProcessEvent ( pStoreWeaponInfo, &parms, NULL );
//
//}
//
//void APawn::PlayEquipHitSound (  )
//{
//	static UFunction* pPlayEquipHitSound = 0;
//	APawn_execPlayEquipHitSound_Parms parms;
//
//	if ( !pPlayEquipHitSound )
//		pPlayEquipHitSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayEquipHitSound" );
//
//	this->ProcessEvent ( pPlayEquipHitSound, &parms, NULL );
//
//}
//
//void APawn::PlayBreathSounds (  )
//{
//	static UFunction* pPlayBreathSounds = 0;
//	APawn_execPlayBreathSounds_Parms parms;
//
//	if ( !pPlayBreathSounds )
//		pPlayBreathSounds = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayBreathSounds" );
//
//	this->ProcessEvent ( pPlayBreathSounds, &parms, NULL );
//
//}
//
//void APawn::PlayBreathSound (  )
//{
//	static UFunction* pPlayBreathSound = 0;
//	APawn_execPlayBreathSound_Parms parms;
//
//	if ( !pPlayBreathSound )
//		pPlayBreathSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.PlayBreathSound" );
//
//	this->ProcessEvent ( pPlayBreathSound, &parms, NULL );
//
//}
//
//void APawn::FootStepping ( int side )
//{
//	static UFunction* pFootStepping = 0;
//	APawn_execFootStepping_Parms parms;
//
//	if ( !pFootStepping )
//		pFootStepping = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.FootStepping" );
//
//	parms.side = side;
//	this->ProcessEvent ( pFootStepping, &parms, NULL );
//
//}
//
//struct FString APawn::CanSee (  )
//{
//	static UFunction* pCanSee = 0;
//	APawn_execCanSee_Parms parms;
//
//	if ( !pCanSee )
//		pCanSee = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CanSee" );
//
//	this->ProcessEvent ( pCanSee, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APawn::IsNetReady (  )
//{
//	static UFunction* pIsNetReady = 0;
//	APawn_execIsNetReady_Parms parms;
//
//	if ( !pIsNetReady )
//		pIsNetReady = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.IsNetReady" );
//
//	this->ProcessEvent ( pIsNetReady, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APawn::CheckRelevantTimeOut (  )
//{
//	static UFunction* pCheckRelevantTimeOut = 0;
//	APawn_execCheckRelevantTimeOut_Parms parms;
//
//	if ( !pCheckRelevantTimeOut )
//		pCheckRelevantTimeOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.CheckRelevantTimeOut" );
//
//	this->ProcessEvent ( pCheckRelevantTimeOut, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APawn::HasChannel (  )
//{
//	static UFunction* pHasChannel = 0;
//	APawn_execHasChannel_Parms parms;
//
//	if ( !pHasChannel )
//		pHasChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.HasChannel" );
//
//	this->ProcessEvent ( pHasChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APawn::ServerStopLoopSoundByActor (  )
//{
//	static UFunction* pServerStopLoopSoundByActor = 0;
//	APawn_execServerStopLoopSoundByActor_Parms parms;
//
//	if ( !pServerStopLoopSoundByActor )
//		pServerStopLoopSoundByActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerStopLoopSoundByActor" );
//
//	this->ProcessEvent ( pServerStopLoopSoundByActor, &parms, NULL );
//
//}
//
//void APawn::ServerStopAllSoundByActor (  )
//{
//	static UFunction* pServerStopAllSoundByActor = 0;
//	APawn_execServerStopAllSoundByActor_Parms parms;
//
//	if ( !pServerStopAllSoundByActor )
//		pServerStopAllSoundByActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerStopAllSoundByActor" );
//
//	this->ProcessEvent ( pServerStopAllSoundByActor, &parms, NULL );
//
//}
//
//void APawn::ServerPlaySound ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner )
//{
//	static UFunction* pServerPlaySound = 0;
//	APawn_execServerPlaySound_Parms parms;
//
//	if ( !pServerPlaySound )
//		pServerPlaySound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.ServerPlaySound" );
//
//	parms.Sound = Sound;
//	parms.Slot = Slot;
//	parms.Volume = Volume;
//	parms.bNoOverride = bNoOverride;
//	parms.Radius = Radius;
//	parms.Pitch = Pitch;
//	parms.Attenuate = Attenuate;
//	parms.Loop = Loop;
//	parms.SellectTeam = SellectTeam;
//	parms.bExceptOwner = bExceptOwner;
//	this->ProcessEvent ( pServerPlaySound, &parms, NULL );
//
//}
//
//bool APawn::OnReachedDestination ( struct FVector Dir, class AActor* GoalActor )
//{
//	static UFunction* pOnReachedDestination = 0;
//	APawn_execOnReachedDestination_Parms parms;
//
//	if ( !pOnReachedDestination )
//		pOnReachedDestination = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pawn.OnReachedDestination" );
//
//	parms.Dir = Dir;
//	parms.GoalActor = GoalActor;
//	this->ProcessEvent ( pOnReachedDestination, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::SetExitViewRotation ( class APawn* Driver )
//{
//	static UFunction* pSetExitViewRotation = 0;
//	AVehicle_execSetExitViewRotation_Parms parms;
//
//	if ( !pSetExitViewRotation )
//		pSetExitViewRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.SetExitViewRotation" );
//
//	parms.Driver = Driver;
//	this->ProcessEvent ( pSetExitViewRotation, &parms, NULL );
//
//}
//
//void AVehicle::SetEntryViewRotation ( struct FRotator R )
//{
//	static UFunction* pSetEntryViewRotation = 0;
//	AVehicle_execSetEntryViewRotation_Parms parms;
//
//	if ( !pSetEntryViewRotation )
//		pSetEntryViewRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.SetEntryViewRotation" );
//
//	parms.R = R;
//	this->ProcessEvent ( pSetEntryViewRotation, &parms, NULL );
//
//}
//
//bool AVehicle::IsArtillery (  )
//{
//	static UFunction* pIsArtillery = 0;
//	AVehicle_execIsArtillery_Parms parms;
//
//	if ( !pIsArtillery )
//		pIsArtillery = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.IsArtillery" );
//
//	this->ProcessEvent ( pIsArtillery, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::ImportantVehicle (  )
//{
//	static UFunction* pImportantVehicle = 0;
//	AVehicle_execImportantVehicle_Parms parms;
//
//	if ( !pImportantVehicle )
//		pImportantVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ImportantVehicle" );
//
//	this->ProcessEvent ( pImportantVehicle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::ShootMissile ( class AwProjectile* P )
//{
//	static UFunction* pShootMissile = 0;
//	AVehicle_execShootMissile_Parms parms;
//
//	if ( !pShootMissile )
//		pShootMissile = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ShootMissile" );
//
//	parms.P = P;
//	this->ProcessEvent ( pShootMissile, &parms, NULL );
//
//}
//
//void AVehicle::ShouldTargetMissile ( class AwProjectile* P )
//{
//	static UFunction* pShouldTargetMissile = 0;
//	AVehicle_execShouldTargetMissile_Parms parms;
//
//	if ( !pShouldTargetMissile )
//		pShouldTargetMissile = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ShouldTargetMissile" );
//
//	parms.P = P;
//	this->ProcessEvent ( pShouldTargetMissile, &parms, NULL );
//
//}
//
//class AActor* AVehicle::AlternateTarget (  )
//{
//	static UFunction* pAlternateTarget = 0;
//	AVehicle_execAlternateTarget_Parms parms;
//
//	if ( !pAlternateTarget )
//		pAlternateTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.AlternateTarget" );
//
//	this->ProcessEvent ( pAlternateTarget, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::eventVerifyLock ( class AActor* Aggressor, class AActor** NewTarget )
//{
//	static UFunction* pVerifyLock = 0;
//	AVehicle_eventVerifyLock_Parms parms;
//
//	if ( !pVerifyLock )
//		pVerifyLock = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.VerifyLock" );
//
//	parms.Aggressor = Aggressor;
//	this->ProcessEvent ( pVerifyLock, &parms, NULL );
//
//	*NewTarget = parms.NewTarget;
//	return parms.ReturnValue;
//}
//
//void AVehicle::CheckSuperBerserk (  )
//{
//	static UFunction* pCheckSuperBerserk = 0;
//	AVehicle_execCheckSuperBerserk_Parms parms;
//
//	if ( !pCheckSuperBerserk )
//		pCheckSuperBerserk = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.CheckSuperBerserk" );
//
//	this->ProcessEvent ( pCheckSuperBerserk, &parms, NULL );
//
//}
//
//class TArray< class AVehicle* > AVehicle::GetTurrets (  )
//{
//	static UFunction* pGetTurrets = 0;
//	AVehicle_execGetTurrets_Parms parms;
//
//	if ( !pGetTurrets )
//		pGetTurrets = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.GetTurrets" );
//
//	this->ProcessEvent ( pGetTurrets, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::PlayTakeHit ( struct FVector HitLocation, int Damage, class UClass* DamageType )
//{
//	static UFunction* pPlayTakeHit = 0;
//	AVehicle_execPlayTakeHit_Parms parms;
//
//	if ( !pPlayTakeHit )
//		pPlayTakeHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.PlayTakeHit" );
//
//	parms.HitLocation = HitLocation;
//	parms.Damage = Damage;
//	parms.DamageType = DamageType;
//	this->ProcessEvent ( pPlayTakeHit, &parms, NULL );
//
//}
//
//void AVehicle::POVChanged ( class APlayerController* PC, bool bBehindViewChanged )
//{
//	static UFunction* pPOVChanged = 0;
//	AVehicle_execPOVChanged_Parms parms;
//
//	if ( !pPOVChanged )
//		pPOVChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.POVChanged" );
//
//	parms.PC = PC;
//	parms.bBehindViewChanged = bBehindViewChanged;
//	this->ProcessEvent ( pPOVChanged, &parms, NULL );
//
//}
//
//void AVehicle::IncrementSpree (  )
//{
//	static UFunction* pIncrementSpree = 0;
//	AVehicle_execIncrementSpree_Parms parms;
//
//	if ( !pIncrementSpree )
//		pIncrementSpree = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.IncrementSpree" );
//
//	this->ProcessEvent ( pIncrementSpree, &parms, NULL );
//
//}
//
//int AVehicle::GetSpree (  )
//{
//	static UFunction* pGetSpree = 0;
//	AVehicle_execGetSpree_Parms parms;
//
//	if ( !pGetSpree )
//		pGetSpree = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.GetSpree" );
//
//	this->ProcessEvent ( pGetSpree, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::StaticPrecache ( class ALevelInfo* L )
//{
//	static UFunction* pStaticPrecache = 0;
//	AVehicle_execStaticPrecache_Parms parms;
//
//	if ( !pStaticPrecache )
//		pStaticPrecache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.StaticPrecache" );
//
//	parms.L = L;
//	this->ProcessEvent ( pStaticPrecache, &parms, NULL );
//
//}
//
//float AVehicle::AdjustedStrength (  )
//{
//	static UFunction* pAdjustedStrength = 0;
//	AVehicle_execAdjustedStrength_Parms parms;
//
//	if ( !pAdjustedStrength )
//		pAdjustedStrength = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.AdjustedStrength" );
//
//	this->ProcessEvent ( pAdjustedStrength, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::HasOccupiedTurret (  )
//{
//	static UFunction* pHasOccupiedTurret = 0;
//	AVehicle_execHasOccupiedTurret_Parms parms;
//
//	if ( !pHasOccupiedTurret )
//		pHasOccupiedTurret = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.HasOccupiedTurret" );
//
//	this->ProcessEvent ( pHasOccupiedTurret, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::eventIsVehicleEmpty (  )
//{
//	static UFunction* pIsVehicleEmpty = 0;
//	AVehicle_eventIsVehicleEmpty_Parms parms;
//
//	if ( !pIsVehicleEmpty )
//		pIsVehicleEmpty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.IsVehicleEmpty" );
//
//	this->ProcessEvent ( pIsVehicleEmpty, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AAIController* AVehicle::GetBotPassenger (  )
//{
//	static UFunction* pGetBotPassenger = 0;
//	AVehicle_execGetBotPassenger_Parms parms;
//
//	if ( !pGetBotPassenger )
//		pGetBotPassenger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.GetBotPassenger" );
//
//	this->ProcessEvent ( pGetBotPassenger, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class APawn* AVehicle::GetInstigator (  )
//{
//	static UFunction* pGetInstigator = 0;
//	AVehicle_execGetInstigator_Parms parms;
//
//	if ( !pGetInstigator )
//		pGetInstigator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.GetInstigator" );
//
//	this->ProcessEvent ( pGetInstigator, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AVehicle::NumPassengers (  )
//{
//	static UFunction* pNumPassengers = 0;
//	AVehicle_execNumPassengers_Parms parms;
//
//	if ( !pNumPassengers )
//		pNumPassengers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.NumPassengers" );
//
//	this->ProcessEvent ( pNumPassengers, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::ServerPlayHorn ( int HornIndex )
//{
//	static UFunction* pServerPlayHorn = 0;
//	AVehicle_execServerPlayHorn_Parms parms;
//
//	if ( !pServerPlayHorn )
//		pServerPlayHorn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ServerPlayHorn" );
//
//	parms.HornIndex = HornIndex;
//	this->ProcessEvent ( pServerPlayHorn, &parms, NULL );
//
//}
//
//void AVehicle::StopForceFeedback ( struct FString EffectName )
//{
//	static UFunction* pStopForceFeedback = 0;
//	AVehicle_execStopForceFeedback_Parms parms;
//
//	if ( !pStopForceFeedback )
//		pStopForceFeedback = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.StopForceFeedback" );
//
//	parms.EffectName = EffectName;
//	this->ProcessEvent ( pStopForceFeedback, &parms, NULL );
//
//}
//
//void AVehicle::ClientPlayForceFeedback ( struct FString EffectName )
//{
//	static UFunction* pClientPlayForceFeedback = 0;
//	AVehicle_execClientPlayForceFeedback_Parms parms;
//
//	if ( !pClientPlayForceFeedback )
//		pClientPlayForceFeedback = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ClientPlayForceFeedback" );
//
//	parms.EffectName = EffectName;
//	this->ProcessEvent ( pClientPlayForceFeedback, &parms, NULL );
//
//}
//
//float AVehicle::ChargeBar (  )
//{
//	static UFunction* pChargeBar = 0;
//	AVehicle_execChargeBar_Parms parms;
//
//	if ( !pChargeBar )
//		pChargeBar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ChargeBar" );
//
//	this->ProcessEvent ( pChargeBar, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::Flip ( struct FVector HitNormal, float ForceScale )
//{
//	static UFunction* pFlip = 0;
//	AVehicle_execFlip_Parms parms;
//
//	if ( !pFlip )
//		pFlip = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.Flip" );
//
//	parms.HitNormal = HitNormal;
//	parms.ForceScale = ForceScale;
//	this->ProcessEvent ( pFlip, &parms, NULL );
//
//}
//
//bool AVehicle::eventNeedsFlip (  )
//{
//	static UFunction* pNeedsFlip = 0;
//	AVehicle_eventNeedsFlip_Parms parms;
//
//	if ( !pNeedsFlip )
//		pNeedsFlip = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.NeedsFlip" );
//
//	this->ProcessEvent ( pNeedsFlip, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::TeamLink ( int TeamNum )
//{
//	static UFunction* pTeamLink = 0;
//	AVehicle_execTeamLink_Parms parms;
//
//	if ( !pTeamLink )
//		pTeamLink = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.TeamLink" );
//
//	parms.TeamNum = TeamNum;
//	this->ProcessEvent ( pTeamLink, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::PrevWeapon (  )
//{
//	static UFunction* pPrevWeapon = 0;
//	AVehicle_execPrevWeapon_Parms parms;
//
//	if ( !pPrevWeapon )
//		pPrevWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.PrevWeapon" );
//
//	this->ProcessEvent ( pPrevWeapon, &parms, NULL );
//
//}
//
//void AVehicle::NextWeapon (  )
//{
//	static UFunction* pNextWeapon = 0;
//	AVehicle_execNextWeapon_Parms parms;
//
//	if ( !pNextWeapon )
//		pNextWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.NextWeapon" );
//
//	this->ProcessEvent ( pNextWeapon, &parms, NULL );
//
//}
//
//void AVehicle::eventUnStalled (  )
//{
//	static UFunction* pUnStalled = 0;
//	AVehicle_eventUnStalled_Parms parms;
//
//	if ( !pUnStalled )
//		pUnStalled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.UnStalled" );
//
//	this->ProcessEvent ( pUnStalled, &parms, NULL );
//
//}
//
//void AVehicle::eventStalled (  )
//{
//	static UFunction* pStalled = 0;
//	AVehicle_eventStalled_Parms parms;
//
//	if ( !pStalled )
//		pStalled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.Stalled" );
//
//	this->ProcessEvent ( pStalled, &parms, NULL );
//
//}
//
//class AActor* AVehicle::ShootSpecial ( class AActor* A )
//{
//	static UFunction* pShootSpecial = 0;
//	AVehicle_execShootSpecial_Parms parms;
//
//	if ( !pShootSpecial )
//		pShootSpecial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ShootSpecial" );
//
//	parms.A = A;
//	this->ProcessEvent ( pShootSpecial, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	AVehicle_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//void AVehicle::eventTeamChanged (  )
//{
//	static UFunction* pTeamChanged = 0;
//	AVehicle_eventTeamChanged_Parms parms;
//
//	if ( !pTeamChanged )
//		pTeamChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.TeamChanged" );
//
//	this->ProcessEvent ( pTeamChanged, &parms, NULL );
//
//}
//
//void AVehicle::SetTeamNum ( unsigned char t )
//{
//	static UFunction* pSetTeamNum = 0;
//	AVehicle_execSetTeamNum_Parms parms;
//
//	if ( !pSetTeamNum )
//		pSetTeamNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.SetTeamNum" );
//
//	parms.t = t;
//	this->ProcessEvent ( pSetTeamNum, &parms, NULL );
//
//}
//
//void AVehicle::eventNotifyEnemyLostLock (  )
//{
//	static UFunction* pNotifyEnemyLostLock = 0;
//	AVehicle_eventNotifyEnemyLostLock_Parms parms;
//
//	if ( !pNotifyEnemyLostLock )
//		pNotifyEnemyLostLock = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.NotifyEnemyLostLock" );
//
//	this->ProcessEvent ( pNotifyEnemyLostLock, &parms, NULL );
//
//}
//
//void AVehicle::IncomingMissile ( class AwProjectile* P )
//{
//	static UFunction* pIncomingMissile = 0;
//	AVehicle_execIncomingMissile_Parms parms;
//
//	if ( !pIncomingMissile )
//		pIncomingMissile = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.IncomingMissile" );
//
//	parms.P = P;
//	this->ProcessEvent ( pIncomingMissile, &parms, NULL );
//
//}
//
//void AVehicle::eventNotifyEnemyLockedOn (  )
//{
//	static UFunction* pNotifyEnemyLockedOn = 0;
//	AVehicle_eventNotifyEnemyLockedOn_Parms parms;
//
//	if ( !pNotifyEnemyLockedOn )
//		pNotifyEnemyLockedOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.NotifyEnemyLockedOn" );
//
//	this->ProcessEvent ( pNotifyEnemyLockedOn, &parms, NULL );
//
//}
//
//int AVehicle::GetTeamNum (  )
//{
//	static UFunction* pGetTeamNum = 0;
//	AVehicle_execGetTeamNum_Parms parms;
//
//	if ( !pGetTeamNum )
//		pGetTeamNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.GetTeamNum" );
//
//	this->ProcessEvent ( pGetTeamNum, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::eventPlayDying ( class UClass* DamageType, struct FVector HitLoc, int CollisionPart )
//{
//	static UFunction* pPlayDying = 0;
//	AVehicle_eventPlayDying_Parms parms;
//
//	if ( !pPlayDying )
//		pPlayDying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.PlayDying" );
//
//	parms.DamageType = DamageType;
//	parms.HitLoc = HitLoc;
//	parms.CollisionPart = CollisionPart;
//	this->ProcessEvent ( pPlayDying, &parms, NULL );
//
//}
//
//void AVehicle::PlayTeleportEffect ( bool bOut, bool bSound )
//{
//	static UFunction* pPlayTeleportEffect = 0;
//	AVehicle_execPlayTeleportEffect_Parms parms;
//
//	if ( !pPlayTeleportEffect )
//		pPlayTeleportEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.PlayTeleportEffect" );
//
//	parms.bOut = bOut;
//	parms.bSound = bSound;
//	this->ProcessEvent ( pPlayTeleportEffect, &parms, NULL );
//
//}
//
//bool AVehicle::PointOfView (  )
//{
//	static UFunction* pPointOfView = 0;
//	AVehicle_execPointOfView_Parms parms;
//
//	if ( !pPointOfView )
//		pPointOfView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.PointOfView" );
//
//	this->ProcessEvent ( pPointOfView, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::eventLockOnWarning (  )
//{
//	static UFunction* pLockOnWarning = 0;
//	AVehicle_eventLockOnWarning_Parms parms;
//
//	if ( !pLockOnWarning )
//		pLockOnWarning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.LockOnWarning" );
//
//	this->ProcessEvent ( pLockOnWarning, &parms, NULL );
//
//}
//
//void AVehicle::eventTakeWaterDamage ( float DeltaTime )
//{
//	static UFunction* pTakeWaterDamage = 0;
//	AVehicle_eventTakeWaterDamage_Parms parms;
//
//	if ( !pTakeWaterDamage )
//		pTakeWaterDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.TakeWaterDamage" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTakeWaterDamage, &parms, NULL );
//
//}
//
//void AVehicle::eventDrivingStatusChanged (  )
//{
//	static UFunction* pDrivingStatusChanged = 0;
//	AVehicle_eventDrivingStatusChanged_Parms parms;
//
//	if ( !pDrivingStatusChanged )
//		pDrivingStatusChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.DrivingStatusChanged" );
//
//	this->ProcessEvent ( pDrivingStatusChanged, &parms, NULL );
//
//}
//
//class AVehicle* AVehicle::GetMoveTargetFor ( class APawn* P )
//{
//	static UFunction* pGetMoveTargetFor = 0;
//	AVehicle_execGetMoveTargetFor_Parms parms;
//
//	if ( !pGetMoveTargetFor )
//		pGetMoveTargetFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.GetMoveTargetFor" );
//
//	parms.P = P;
//	this->ProcessEvent ( pGetMoveTargetFor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* AVehicle::GetBestEntry ( class APawn* P )
//{
//	static UFunction* pGetBestEntry = 0;
//	AVehicle_execGetBestEntry_Parms parms;
//
//	if ( !pGetBestEntry )
//		pGetBestEntry = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.GetBestEntry" );
//
//	parms.P = P;
//	this->ProcessEvent ( pGetBestEntry, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::IndependentVehicle (  )
//{
//	static UFunction* pIndependentVehicle = 0;
//	AVehicle_execIndependentVehicle_Parms parms;
//
//	if ( !pIndependentVehicle )
//		pIndependentVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.IndependentVehicle" );
//
//	this->ProcessEvent ( pIndependentVehicle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AVehicle* AVehicle::OpenPositionFor ( class APawn* P )
//{
//	static UFunction* pOpenPositionFor = 0;
//	AVehicle_execOpenPositionFor_Parms parms;
//
//	if ( !pOpenPositionFor )
//		pOpenPositionFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.OpenPositionFor" );
//
//	parms.P = P;
//	this->ProcessEvent ( pOpenPositionFor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::SetReservation ( class AController* C )
//{
//	static UFunction* pSetReservation = 0;
//	AVehicle_execSetReservation_Parms parms;
//
//	if ( !pSetReservation )
//		pSetReservation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.SetReservation" );
//
//	parms.C = C;
//	this->ProcessEvent ( pSetReservation, &parms, NULL );
//
//}
//
//bool AVehicle::SpokenFor ( class AController* C )
//{
//	static UFunction* pSpokenFor = 0;
//	AVehicle_execSpokenFor_Parms parms;
//
//	if ( !pSpokenFor )
//		pSpokenFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.SpokenFor" );
//
//	parms.C = C;
//	this->ProcessEvent ( pSpokenFor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::ChangedReservation ( class APawn* P )
//{
//	static UFunction* pChangedReservation = 0;
//	AVehicle_execChangedReservation_Parms parms;
//
//	if ( !pChangedReservation )
//		pChangedReservation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ChangedReservation" );
//
//	parms.P = P;
//	this->ProcessEvent ( pChangedReservation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AVehicle::NewReservationCostMultiplier ( class APawn* P )
//{
//	static UFunction* pNewReservationCostMultiplier = 0;
//	AVehicle_execNewReservationCostMultiplier_Parms parms;
//
//	if ( !pNewReservationCostMultiplier )
//		pNewReservationCostMultiplier = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.NewReservationCostMultiplier" );
//
//	parms.P = P;
//	this->ProcessEvent ( pNewReservationCostMultiplier, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AVehicle::ReservationCostMultiplier (  )
//{
//	static UFunction* pReservationCostMultiplier = 0;
//	AVehicle_execReservationCostMultiplier_Parms parms;
//
//	if ( !pReservationCostMultiplier )
//		pReservationCostMultiplier = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ReservationCostMultiplier" );
//
//	this->ProcessEvent ( pReservationCostMultiplier, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::Occupied (  )
//{
//	static UFunction* pOccupied = 0;
//	AVehicle_execOccupied_Parms parms;
//
//	if ( !pOccupied )
//		pOccupied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.Occupied" );
//
//	this->ProcessEvent ( pOccupied, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::CheckTauntValid ( struct FName Sequence )
//{
//	static UFunction* pCheckTauntValid = 0;
//	AVehicle_execCheckTauntValid_Parms parms;
//
//	if ( !pCheckTauntValid )
//		pCheckTauntValid = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.CheckTauntValid" );
//
//	parms.Sequence = Sequence;
//	this->ProcessEvent ( pCheckTauntValid, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::FindValidTaunt ( struct FName* Sequence )
//{
//	static UFunction* pFindValidTaunt = 0;
//	AVehicle_execFindValidTaunt_Parms parms;
//
//	if ( !pFindValidTaunt )
//		pFindValidTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.FindValidTaunt" );
//
//	parms.Sequence = *Sequence;
//	this->ProcessEvent ( pFindValidTaunt, &parms, NULL );
//
//	*Sequence = parms.Sequence;
//	return parms.ReturnValue;
//}
//
//bool AVehicle::EncroachingOn ( class AActor* Other )
//{
//	static UFunction* pEncroachingOn = 0;
//	AVehicle_execEncroachingOn_Parms parms;
//
//	if ( !pEncroachingOn )
//		pEncroachingOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.EncroachingOn" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pEncroachingOn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::eventRanInto ( class AActor* Other )
//{
//	static UFunction* pRanInto = 0;
//	AVehicle_eventRanInto_Parms parms;
//
//	if ( !pRanInto )
//		pRanInto = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.RanInto" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pRanInto, &parms, NULL );
//
//}
//
//void AVehicle::eventEncroachedBy ( class AActor* Other )
//{
//	static UFunction* pEncroachedBy = 0;
//	AVehicle_eventEncroachedBy_Parms parms;
//
//	if ( !pEncroachedBy )
//		pEncroachedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.EncroachedBy" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pEncroachedBy, &parms, NULL );
//
//}
//
//void AVehicle::eventSetAnimAction ( struct FName NewAction )
//{
//	static UFunction* pSetAnimAction = 0;
//	AVehicle_eventSetAnimAction_Parms parms;
//
//	if ( !pSetAnimAction )
//		pSetAnimAction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.SetAnimAction" );
//
//	parms.NewAction = NewAction;
//	this->ProcessEvent ( pSetAnimAction, &parms, NULL );
//
//}
//
//void AVehicle::FaceRotation ( struct FRotator NewRotation, float DeltaTime )
//{
//	static UFunction* pFaceRotation = 0;
//	AVehicle_execFaceRotation_Parms parms;
//
//	if ( !pFaceRotation )
//		pFaceRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.FaceRotation" );
//
//	parms.NewRotation = NewRotation;
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pFaceRotation, &parms, NULL );
//
//}
//
//void AVehicle::eventUpdateEyeHeight ( float DeltaTime )
//{
//	static UFunction* pUpdateEyeHeight = 0;
//	AVehicle_eventUpdateEyeHeight_Parms parms;
//
//	if ( !pUpdateEyeHeight )
//		pUpdateEyeHeight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.UpdateEyeHeight" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pUpdateEyeHeight, &parms, NULL );
//
//}
//
//bool AVehicle::StopWeaponFiring (  )
//{
//	static UFunction* pStopWeaponFiring = 0;
//	AVehicle_execStopWeaponFiring_Parms parms;
//
//	if ( !pStopWeaponFiring )
//		pStopWeaponFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.StopWeaponFiring" );
//
//	this->ProcessEvent ( pStopWeaponFiring, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::VehicleCeaseFire ( bool bWasAltFire )
//{
//	static UFunction* pVehicleCeaseFire = 0;
//	AVehicle_execVehicleCeaseFire_Parms parms;
//
//	if ( !pVehicleCeaseFire )
//		pVehicleCeaseFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.VehicleCeaseFire" );
//
//	parms.bWasAltFire = bWasAltFire;
//	this->ProcessEvent ( pVehicleCeaseFire, &parms, NULL );
//
//}
//
//void AVehicle::VehicleFire ( bool bWasAltFire )
//{
//	static UFunction* pVehicleFire = 0;
//	AVehicle_execVehicleFire_Parms parms;
//
//	if ( !pVehicleFire )
//		pVehicleFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.VehicleFire" );
//
//	parms.bWasAltFire = bWasAltFire;
//	this->ProcessEvent ( pVehicleFire, &parms, NULL );
//
//}
//
//void AVehicle::ClientVehicleCeaseFire ( bool bWasAltFire )
//{
//	static UFunction* pClientVehicleCeaseFire = 0;
//	AVehicle_execClientVehicleCeaseFire_Parms parms;
//
//	if ( !pClientVehicleCeaseFire )
//		pClientVehicleCeaseFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ClientVehicleCeaseFire" );
//
//	parms.bWasAltFire = bWasAltFire;
//	this->ProcessEvent ( pClientVehicleCeaseFire, &parms, NULL );
//
//}
//
//void AVehicle::AltFire ( float f )
//{
//	static UFunction* pAltFire = 0;
//	AVehicle_execAltFire_Parms parms;
//
//	if ( !pAltFire )
//		pAltFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.AltFire" );
//
//	parms.f = f;
//	this->ProcessEvent ( pAltFire, &parms, NULL );
//
//}
//
//void AVehicle::Fire ( float f )
//{
//	static UFunction* pFire = 0;
//	AVehicle_execFire_Parms parms;
//
//	if ( !pFire )
//		pFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.Fire" );
//
//	parms.f = f;
//	this->ProcessEvent ( pFire, &parms, NULL );
//
//}
//
//void AVehicle::UsedBy ( class APawn* User )
//{
//	static UFunction* pUsedBy = 0;
//	AVehicle_execUsedBy_Parms parms;
//
//	if ( !pUsedBy )
//		pUsedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.UsedBy" );
//
//	parms.User = User;
//	this->ProcessEvent ( pUsedBy, &parms, NULL );
//
//}
//
//void AVehicle::EjectDriver (  )
//{
//	static UFunction* pEjectDriver = 0;
//	AVehicle_execEjectDriver_Parms parms;
//
//	if ( !pEjectDriver )
//		pEjectDriver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.EjectDriver" );
//
//	this->ProcessEvent ( pEjectDriver, &parms, NULL );
//
//}
//
//void AVehicle::AdjustDriverDamage ( class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum )
//{
//	static UFunction* pAdjustDriverDamage = 0;
//	AVehicle_execAdjustDriverDamage_Parms parms;
//
//	if ( !pAdjustDriverDamage )
//		pAdjustDriverDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.AdjustDriverDamage" );
//
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.DamageType = DamageType;
//	this->ProcessEvent ( pAdjustDriverDamage, &parms, NULL );
//
//	*Damage = parms.Damage;
//	*Momentum = parms.Momentum;
//}
//
//void AVehicle::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pDied = 0;
//	AVehicle_execDied_Parms parms;
//
//	if ( !pDied )
//		pDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.Died" );
//
//	parms.Killer = Killer;
//	parms.DamageType = DamageType;
//	parms.HitLocation = HitLocation;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pDied, &parms, NULL );
//
//}
//
//void AVehicle::DriverDied (  )
//{
//	static UFunction* pDriverDied = 0;
//	AVehicle_execDriverDied_Parms parms;
//
//	if ( !pDriverDied )
//		pDriverDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.DriverDied" );
//
//	this->ProcessEvent ( pDriverDied, &parms, NULL );
//
//}
//
//void AVehicle::DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation )
//{
//	static UFunction* pDriverRadiusDamage = 0;
//	AVehicle_execDriverRadiusDamage_Parms parms;
//
//	if ( !pDriverRadiusDamage )
//		pDriverRadiusDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.DriverRadiusDamage" );
//
//	parms.DamageAmount = DamageAmount;
//	parms.DamageRadius = DamageRadius;
//	parms.EventInstigator = EventInstigator;
//	parms.DamageType = DamageType;
//	parms.Momentum = Momentum;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pDriverRadiusDamage, &parms, NULL );
//
//}
//
//bool AVehicle::HealDamage ( int Amount, class AController* Healer, class UClass* DamageType )
//{
//	static UFunction* pHealDamage = 0;
//	AVehicle_execHealDamage_Parms parms;
//
//	if ( !pHealDamage )
//		pHealDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.HealDamage" );
//
//	parms.Amount = Amount;
//	parms.Healer = Healer;
//	parms.DamageType = DamageType;
//	this->ProcessEvent ( pHealDamage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pTakeDamage = 0;
//	AVehicle_execTakeDamage_Parms parms;
//
//	if ( !pTakeDamage )
//		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.TakeDamage" );
//
//	parms.Damage = Damage;
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.Momentum = Momentum;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pTakeDamage, &parms, NULL );
//
//}
//
//class APawn* AVehicle::CheckForHeadShot ( struct FVector loc, struct FVector ray, float AdditionalScale )
//{
//	static UFunction* pCheckForHeadShot = 0;
//	AVehicle_execCheckForHeadShot_Parms parms;
//
//	if ( !pCheckForHeadShot )
//		pCheckForHeadShot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.CheckForHeadShot" );
//
//	parms.loc = loc;
//	parms.ray = ray;
//	parms.AdditionalScale = AdditionalScale;
//	this->ProcessEvent ( pCheckForHeadShot, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::PlaceExitingDriver (  )
//{
//	static UFunction* pPlaceExitingDriver = 0;
//	AVehicle_execPlaceExitingDriver_Parms parms;
//
//	if ( !pPlaceExitingDriver )
//		pPlaceExitingDriver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.PlaceExitingDriver" );
//
//	this->ProcessEvent ( pPlaceExitingDriver, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::DetachDriver ( class APawn* P )
//{
//	static UFunction* pDetachDriver = 0;
//	AVehicle_execDetachDriver_Parms parms;
//
//	if ( !pDetachDriver )
//		pDetachDriver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.DetachDriver" );
//
//	parms.P = P;
//	this->ProcessEvent ( pDetachDriver, &parms, NULL );
//
//}
//
//void AVehicle::AttachDriver ( class APawn* P )
//{
//	static UFunction* pAttachDriver = 0;
//	AVehicle_execAttachDriver_Parms parms;
//
//	if ( !pAttachDriver )
//		pAttachDriver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.AttachDriver" );
//
//	parms.P = P;
//	this->ProcessEvent ( pAttachDriver, &parms, NULL );
//
//}
//
//void AVehicle::FixPCRotation ( class APlayerController* PC )
//{
//	static UFunction* pFixPCRotation = 0;
//	AVehicle_execFixPCRotation_Parms parms;
//
//	if ( !pFixPCRotation )
//		pFixPCRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.FixPCRotation" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pFixPCRotation, &parms, NULL );
//
//}
//
//void AVehicle::ActivateOverlay ( bool bActive )
//{
//	static UFunction* pActivateOverlay = 0;
//	AVehicle_execActivateOverlay_Parms parms;
//
//	if ( !pActivateOverlay )
//		pActivateOverlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ActivateOverlay" );
//
//	parms.bActive = bActive;
//	this->ProcessEvent ( pActivateOverlay, &parms, NULL );
//
//}
//
//void AVehicle::ClientKDriverLeave ( class APlayerController* PC )
//{
//	static UFunction* pClientKDriverLeave = 0;
//	AVehicle_execClientKDriverLeave_Parms parms;
//
//	if ( !pClientKDriverLeave )
//		pClientKDriverLeave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ClientKDriverLeave" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pClientKDriverLeave, &parms, NULL );
//
//}
//
//void AVehicle::ClientClearController (  )
//{
//	static UFunction* pClientClearController = 0;
//	AVehicle_execClientClearController_Parms parms;
//
//	if ( !pClientClearController )
//		pClientClearController = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ClientClearController" );
//
//	this->ProcessEvent ( pClientClearController, &parms, NULL );
//
//}
//
//void AVehicle::ClientKDriverEnter ( class APlayerController* PC )
//{
//	static UFunction* pClientKDriverEnter = 0;
//	AVehicle_execClientKDriverEnter_Parms parms;
//
//	if ( !pClientKDriverEnter )
//		pClientKDriverEnter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.ClientKDriverEnter" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pClientKDriverEnter, &parms, NULL );
//
//}
//
//void AVehicle::eventUpdateTiltForceFeedback (  )
//{
//	static UFunction* pUpdateTiltForceFeedback = 0;
//	AVehicle_eventUpdateTiltForceFeedback_Parms parms;
//
//	if ( !pUpdateTiltForceFeedback )
//		pUpdateTiltForceFeedback = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.UpdateTiltForceFeedback" );
//
//	this->ProcessEvent ( pUpdateTiltForceFeedback, &parms, NULL );
//
//}
//
//void AVehicle::DriverLeft (  )
//{
//	static UFunction* pDriverLeft = 0;
//	AVehicle_execDriverLeft_Parms parms;
//
//	if ( !pDriverLeft )
//		pDriverLeft = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.DriverLeft" );
//
//	this->ProcessEvent ( pDriverLeft, &parms, NULL );
//
//}
//
//bool AVehicle::eventKDriverLeave ( bool bForceLeave )
//{
//	static UFunction* pKDriverLeave = 0;
//	AVehicle_eventKDriverLeave_Parms parms;
//
//	if ( !pKDriverLeave )
//		pKDriverLeave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.KDriverLeave" );
//
//	parms.bForceLeave = bForceLeave;
//	this->ProcessEvent ( pKDriverLeave, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::eventSetWheelsScale ( float NewScale )
//{
//	static UFunction* pSetWheelsScale = 0;
//	AVehicle_eventSetWheelsScale_Parms parms;
//
//	if ( !pSetWheelsScale )
//		pSetWheelsScale = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.SetWheelsScale" );
//
//	parms.NewScale = NewScale;
//	this->ProcessEvent ( pSetWheelsScale, &parms, NULL );
//
//}
//
//void AVehicle::AttachFlag ( class AActor* FlagActor )
//{
//	static UFunction* pAttachFlag = 0;
//	AVehicle_execAttachFlag_Parms parms;
//
//	if ( !pAttachFlag )
//		pAttachFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.AttachFlag" );
//
//	parms.FlagActor = FlagActor;
//	this->ProcessEvent ( pAttachFlag, &parms, NULL );
//
//}
//
//void AVehicle::KDriverEnter ( class APawn* P )
//{
//	static UFunction* pKDriverEnter = 0;
//	AVehicle_execKDriverEnter_Parms parms;
//
//	if ( !pKDriverEnter )
//		pKDriverEnter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.KDriverEnter" );
//
//	parms.P = P;
//	this->ProcessEvent ( pKDriverEnter, &parms, NULL );
//
//}
//
//void AVehicle::UnPossessed (  )
//{
//	static UFunction* pUnPossessed = 0;
//	AVehicle_execUnPossessed_Parms parms;
//
//	if ( !pUnPossessed )
//		pUnPossessed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.UnPossessed" );
//
//	this->ProcessEvent ( pUnPossessed, &parms, NULL );
//
//}
//
//void AVehicle::PossessedBy ( class AController* C )
//{
//	static UFunction* pPossessedBy = 0;
//	AVehicle_execPossessedBy_Parms parms;
//
//	if ( !pPossessedBy )
//		pPossessedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.PossessedBy" );
//
//	parms.C = C;
//	this->ProcessEvent ( pPossessedBy, &parms, NULL );
//
//}
//
//void AVehicle::eventVehicleLocked ( class APawn* P )
//{
//	static UFunction* pVehicleLocked = 0;
//	AVehicle_eventVehicleLocked_Parms parms;
//
//	if ( !pVehicleLocked )
//		pVehicleLocked = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.VehicleLocked" );
//
//	parms.P = P;
//	this->ProcessEvent ( pVehicleLocked, &parms, NULL );
//
//}
//
//bool AVehicle::TryToDrive ( class APawn* P )
//{
//	static UFunction* pTryToDrive = 0;
//	AVehicle_execTryToDrive_Parms parms;
//
//	if ( !pTryToDrive )
//		pTryToDrive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.TryToDrive" );
//
//	parms.P = P;
//	this->ProcessEvent ( pTryToDrive, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AVehicle* AVehicle::FindEntryVehicle ( class APawn* P )
//{
//	static UFunction* pFindEntryVehicle = 0;
//	AVehicle_execFindEntryVehicle_Parms parms;
//
//	if ( !pFindEntryVehicle )
//		pFindEntryVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.FindEntryVehicle" );
//
//	parms.P = P;
//	this->ProcessEvent ( pFindEntryVehicle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::SpectatorSpecialCalcView ( class APlayerController* Viewer, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation )
//{
//	static UFunction* pSpectatorSpecialCalcView = 0;
//	AVehicle_execSpectatorSpecialCalcView_Parms parms;
//
//	if ( !pSpectatorSpecialCalcView )
//		pSpectatorSpecialCalcView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.SpectatorSpecialCalcView" );
//
//	parms.Viewer = Viewer;
//	this->ProcessEvent ( pSpectatorSpecialCalcView, &parms, NULL );
//
//	*ViewActor = parms.ViewActor;
//	*CameraLocation = parms.CameraLocation;
//	*CameraRotation = parms.CameraRotation;
//	return parms.ReturnValue;
//}
//
//bool AVehicle::SpecialCalcView ( class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation )
//{
//	static UFunction* pSpecialCalcView = 0;
//	AVehicle_execSpecialCalcView_Parms parms;
//
//	if ( !pSpecialCalcView )
//		pSpecialCalcView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.SpecialCalcView" );
//
//	parms.ViewActor = *ViewActor;
//	parms.CameraLocation = *CameraLocation;
//	parms.CameraRotation = *CameraRotation;
//	this->ProcessEvent ( pSpecialCalcView, &parms, NULL );
//
//	*ViewActor = parms.ViewActor;
//	*CameraLocation = parms.CameraLocation;
//	*CameraRotation = parms.CameraRotation;
//	return parms.ReturnValue;
//}
//
//void AVehicle::SpecialCalcFirstPersonView ( class APlayerController* PC, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation )
//{
//	static UFunction* pSpecialCalcFirstPersonView = 0;
//	AVehicle_execSpecialCalcFirstPersonView_Parms parms;
//
//	if ( !pSpecialCalcFirstPersonView )
//		pSpecialCalcFirstPersonView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.SpecialCalcFirstPersonView" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pSpecialCalcFirstPersonView, &parms, NULL );
//
//	*ViewActor = parms.ViewActor;
//	*CameraLocation = parms.CameraLocation;
//	*CameraRotation = parms.CameraRotation;
//}
//
//void AVehicle::SpecialCalcBehindView ( class APlayerController* PC, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation )
//{
//	static UFunction* pSpecialCalcBehindView = 0;
//	AVehicle_execSpecialCalcBehindView_Parms parms;
//
//	if ( !pSpecialCalcBehindView )
//		pSpecialCalcBehindView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.SpecialCalcBehindView" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pSpecialCalcBehindView, &parms, NULL );
//
//	*ViewActor = parms.ViewActor;
//	*CameraLocation = parms.CameraLocation;
//	*CameraRotation = parms.CameraRotation;
//}
//
//struct FVector AVehicle::GetCameraLocationStart (  )
//{
//	static UFunction* pGetCameraLocationStart = 0;
//	AVehicle_execGetCameraLocationStart_Parms parms;
//
//	if ( !pGetCameraLocationStart )
//		pGetCameraLocationStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.GetCameraLocationStart" );
//
//	this->ProcessEvent ( pGetCameraLocationStart, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::Destroyed_HandleDriver (  )
//{
//	static UFunction* pDestroyed_HandleDriver = 0;
//	AVehicle_execDestroyed_HandleDriver_Parms parms;
//
//	if ( !pDestroyed_HandleDriver )
//		pDestroyed_HandleDriver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.Destroyed_HandleDriver" );
//
//	this->ProcessEvent ( pDestroyed_HandleDriver, &parms, NULL );
//
//}
//
//void AVehicle::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AVehicle_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//float AVehicle::BotDesireability ( class AActor* S, int TeamIndex, class AActor* Objective )
//{
//	static UFunction* pBotDesireability = 0;
//	AVehicle_execBotDesireability_Parms parms;
//
//	if ( !pBotDesireability )
//		pBotDesireability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.BotDesireability" );
//
//	parms.S = S;
//	parms.TeamIndex = TeamIndex;
//	parms.Objective = Objective;
//	this->ProcessEvent ( pBotDesireability, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::StronglyRecommended ( class AActor* S, int TeamIndex, class AActor* Objective )
//{
//	static UFunction* pStronglyRecommended = 0;
//	AVehicle_execStronglyRecommended_Parms parms;
//
//	if ( !pStronglyRecommended )
//		pStronglyRecommended = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.StronglyRecommended" );
//
//	parms.S = S;
//	parms.TeamIndex = TeamIndex;
//	parms.Objective = Objective;
//	this->ProcessEvent ( pStronglyRecommended, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::eventSetInitialState (  )
//{
//	static UFunction* pSetInitialState = 0;
//	AVehicle_eventSetInitialState_Parms parms;
//
//	if ( !pSetInitialState )
//		pSetInitialState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.SetInitialState" );
//
//	this->ProcessEvent ( pSetInitialState, &parms, NULL );
//
//}
//
//void AVehicle::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AVehicle_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AVehicle::eventRegisterTurret (  )
//{
//	static UFunction* pRegisterTurret = 0;
//	AVehicle_eventRegisterTurret_Parms parms;
//
//	if ( !pRegisterTurret )
//		pRegisterTurret = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.RegisterTurret" );
//
//	this->ProcessEvent ( pRegisterTurret, &parms, NULL );
//
//}
//
//bool AVehicle::CheatFly (  )
//{
//	static UFunction* pCheatFly = 0;
//	AVehicle_execCheatFly_Parms parms;
//
//	if ( !pCheatFly )
//		pCheatFly = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.CheatFly" );
//
//	this->ProcessEvent ( pCheatFly, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::CheatGhost (  )
//{
//	static UFunction* pCheatGhost = 0;
//	AVehicle_execCheatGhost_Parms parms;
//
//	if ( !pCheatGhost )
//		pCheatGhost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.CheatGhost" );
//
//	this->ProcessEvent ( pCheatGhost, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVehicle::CheatWalk (  )
//{
//	static UFunction* pCheatWalk = 0;
//	AVehicle_execCheatWalk_Parms parms;
//
//	if ( !pCheatWalk )
//		pCheatWalk = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.CheatWalk" );
//
//	this->ProcessEvent ( pCheatWalk, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::Suicide (  )
//{
//	static UFunction* pSuicide = 0;
//	AVehicle_execSuicide_Parms parms;
//
//	if ( !pSuicide )
//		pSuicide = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.Suicide" );
//
//	this->ProcessEvent ( pSuicide, &parms, NULL );
//
//}
//
//struct FString AVehicle::GetVehiclePositionString (  )
//{
//	static UFunction* pGetVehiclePositionString = 0;
//	AVehicle_execGetVehiclePositionString_Parms parms;
//
//	if ( !pGetVehiclePositionString )
//		pGetVehiclePositionString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.GetVehiclePositionString" );
//
//	this->ProcessEvent ( pGetVehiclePositionString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVehicle::SetBaseEyeheight (  )
//{
//	static UFunction* pSetBaseEyeheight = 0;
//	AVehicle_execSetBaseEyeheight_Parms parms;
//
//	if ( !pSetBaseEyeheight )
//		pSetBaseEyeheight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.SetBaseEyeheight" );
//
//	this->ProcessEvent ( pSetBaseEyeheight, &parms, NULL );
//
//}
//
//void AVehicle::PlayerChangedTeam (  )
//{
//	static UFunction* pPlayerChangedTeam = 0;
//	AVehicle_execPlayerChangedTeam_Parms parms;
//
//	if ( !pPlayerChangedTeam )
//		pPlayerChangedTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.PlayerChangedTeam" );
//
//	this->ProcessEvent ( pPlayerChangedTeam, &parms, NULL );
//
//}
//
//void AVehicle::PreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AVehicle_execPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vehicle.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void ASVehicle::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	ASVehicle_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicle.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void ASVehicle::Tick ( float DeltaTime )
//{
//	static UFunction* pTick = 0;
//	ASVehicle_execTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicle.Tick" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void ASVehicle::KApplyForce ( struct FVector* Force, struct FVector* Torque )
//{
//	static UFunction* pKApplyForce = 0;
//	ASVehicle_execKApplyForce_Parms parms;
//
//	if ( !pKApplyForce )
//		pKApplyForce = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicle.KApplyForce" );
//
//	parms.Force = *Force;
//	parms.Torque = *Torque;
//	this->ProcessEvent ( pKApplyForce, &parms, NULL );
//
//	*Force = parms.Force;
//	*Torque = parms.Torque;
//}
//
//void ASVehicle::Flip ( struct FVector HitNormal, float ForceScale )
//{
//	static UFunction* pFlip = 0;
//	ASVehicle_execFlip_Parms parms;
//
//	if ( !pFlip )
//		pFlip = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicle.Flip" );
//
//	parms.HitNormal = HitNormal;
//	parms.ForceScale = ForceScale;
//	this->ProcessEvent ( pFlip, &parms, NULL );
//
//}
//
//void ASVehicle::eventSVehicleUpdateParams (  )
//{
//	static UFunction* pSVehicleUpdateParams = 0;
//	ASVehicle_eventSVehicleUpdateParams_Parms parms;
//
//	if ( !pSVehicleUpdateParams )
//		pSVehicleUpdateParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicle.SVehicleUpdateParams" );
//
//	this->ProcessEvent ( pSVehicleUpdateParams, &parms, NULL );
//
//}
//
//void ASVehicle::JumpOffPawn (  )
//{
//	static UFunction* pJumpOffPawn = 0;
//	ASVehicle_execJumpOffPawn_Parms parms;
//
//	if ( !pJumpOffPawn )
//		pJumpOffPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicle.JumpOffPawn" );
//
//	this->ProcessEvent ( pJumpOffPawn, &parms, NULL );
//
//}
//
//void ASVehicle::PostNetBeginPlay (  )
//{
//	static UFunction* pPostNetBeginPlay = 0;
//	ASVehicle_execPostNetBeginPlay_Parms parms;
//
//	if ( !pPostNetBeginPlay )
//		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicle.PostNetBeginPlay" );
//
//	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );
//
//}
//
//void ASVehicle::eventUpdateVehicle ( float DeltaTime )
//{
//	static UFunction* pUpdateVehicle = 0;
//	ASVehicle_eventUpdateVehicle_Parms parms;
//
//	if ( !pUpdateVehicle )
//		pUpdateVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicle.UpdateVehicle" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pUpdateVehicle, &parms, NULL );
//
//}
//
//void ASVehicle::eventVehicleStateReceived (  )
//{
//	static UFunction* pVehicleStateReceived = 0;
//	ASVehicle_eventVehicleStateReceived_Parms parms;
//
//	if ( !pVehicleStateReceived )
//		pVehicleStateReceived = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicle.VehicleStateReceived" );
//
//	this->ProcessEvent ( pVehicleStateReceived, &parms, NULL );
//
//}
//
//void ASVehicle::GraphData ( struct FString DataName, float DataValue )
//{
//	static UFunction* pGraphData = 0;
//	ASVehicle_execGraphData_Parms parms;
//
//	if ( !pGraphData )
//		pGraphData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicle.GraphData" );
//
//	parms.DataName = DataName;
//	parms.DataValue = DataValue;
//	this->ProcessEvent ( pGraphData, &parms, NULL );
//
//}
//
//void AStaticMeshActor::eventPreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AStaticMeshActor_eventPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StaticMeshActor.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void UAnimNotify_Scripted::eventNotify ( class AActor* Owner )
//{
//	static UFunction* pNotify = 0;
//	UAnimNotify_Scripted_eventNotify_Parms parms;
//
//	if ( !pNotify )
//		pNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnimNotify_Scripted.Notify" );
//
//	parms.Owner = Owner;
//	this->ProcessEvent ( pNotify, &parms, NULL );
//
//}
//
//void ASecurity::ClientMessage ( struct FString S )
//{
//	static UFunction* pClientMessage = 0;
//	ASecurity_execClientMessage_Parms parms;
//
//	if ( !pClientMessage )
//		pClientMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Security.ClientMessage" );
//
//	parms.S = S;
//	this->ProcessEvent ( pClientMessage, &parms, NULL );
//
//}
//
//void ASecurity::BadClient ( int Code, struct FString Data )
//{
//	static UFunction* pBadClient = 0;
//	ASecurity_execBadClient_Parms parms;
//
//	if ( !pBadClient )
//		pBadClient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Security.BadClient" );
//
//	parms.Code = Code;
//	parms.Data = Data;
//	this->ProcessEvent ( pBadClient, &parms, NULL );
//
//}
//
//void ASecurity::Perform ( int SecType, struct FString Param1, struct FString Param2, float TimeOut )
//{
//	static UFunction* pPerform = 0;
//	ASecurity_execPerform_Parms parms;
//
//	if ( !pPerform )
//		pPerform = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Security.Perform" );
//
//	parms.SecType = SecType;
//	parms.Param1 = Param1;
//	parms.Param2 = Param2;
//	parms.TimeOut = TimeOut;
//	this->ProcessEvent ( pPerform, &parms, NULL );
//
//}
//
//void ASecurity::eventServerCallback ( int SecType, struct FString Data )
//{
//	static UFunction* pServerCallback = 0;
//	ASecurity_eventServerCallback_Parms parms;
//
//	if ( !pServerCallback )
//		pServerCallback = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Security.ServerCallback" );
//
//	parms.SecType = SecType;
//	parms.Data = Data;
//	this->ProcessEvent ( pServerCallback, &parms, NULL );
//
//}
//
//void ASecurity::ClientPerform ( int SecType, struct FString Param1, struct FString Param2 )
//{
//	static UFunction* pClientPerform = 0;
//	ASecurity_execClientPerform_Parms parms;
//
//	if ( !pClientPerform )
//		pClientPerform = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Security.ClientPerform" );
//
//	parms.SecType = SecType;
//	parms.Param1 = Param1;
//	parms.Param2 = Param2;
//	this->ProcessEvent ( pClientPerform, &parms, NULL );
//
//}
//
//void ASecurity::LocalPerform ( int SecType, struct FString Param1, struct FString Param2, class TArray< struct FString >* Results )
//{
//	static UFunction* pLocalPerform = 0;
//	ASecurity_execLocalPerform_Parms parms;
//
//	if ( !pLocalPerform )
//		pLocalPerform = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Security.LocalPerform" );
//
//	parms.SecType = SecType;
//	parms.Param1 = Param1;
//	parms.Param2 = Param2;
//	this->ProcessEvent ( pLocalPerform, &parms, NULL );
//
//	*Results = parms.Results;
//}
//
//void ASecurity::NativePerform ( int SecType, struct FString Param1, struct FString Param2 )
//{
//	static UFunction* pNativePerform = 0;
//	ASecurity_execNativePerform_Parms parms;
//
//	if ( !pNativePerform )
//		pNativePerform = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Security.NativePerform" );
//
//	parms.SecType = SecType;
//	parms.Param1 = Param1;
//	parms.Param2 = Param2;
//	this->ProcessEvent ( pNativePerform, &parms, NULL );
//
//}
//
//void UScriptedTexture::DrawPortal ( int X, int Y, int width, int Height, class AActor* CamActor, struct FVector CamLocation, struct FRotator CamRotation, int FOV, bool ClearZ )
//{
//	static UFunction* pDrawPortal = 0;
//	UScriptedTexture_execDrawPortal_Parms parms;
//
//	if ( !pDrawPortal )
//		pDrawPortal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScriptedTexture.DrawPortal" );
//
//	parms.X = X;
//	parms.Y = Y;
//	parms.width = width;
//	parms.Height = Height;
//	parms.CamActor = CamActor;
//	parms.CamLocation = CamLocation;
//	parms.CamRotation = CamRotation;
//	parms.FOV = FOV;
//	parms.ClearZ = ClearZ;
//	this->ProcessEvent ( pDrawPortal, &parms, NULL );
//
//}
//
//void UScriptedTexture::DrawTile ( float X, float Y, float XL, float YL, float U, float V, float UL, float VL, class UMaterial* Material, class FColor Color )
//{
//	static UFunction* pDrawTile = 0;
//	UScriptedTexture_execDrawTile_Parms parms;
//
//	if ( !pDrawTile )
//		pDrawTile = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScriptedTexture.DrawTile" );
//
//	parms.X = X;
//	parms.Y = Y;
//	parms.XL = XL;
//	parms.YL = YL;
//	parms.U = U;
//	parms.V = V;
//	parms.UL = UL;
//	parms.VL = VL;
//	parms.Material = Material;
//	parms.Color = Color;
//	this->ProcessEvent ( pDrawTile, &parms, NULL );
//
//}
//
//void UScriptedTexture::TextSize ( struct FString Text, class UFont* Font, int* width, int* Height )
//{
//	static UFunction* pTextSize = 0;
//	UScriptedTexture_execTextSize_Parms parms;
//
//	if ( !pTextSize )
//		pTextSize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScriptedTexture.TextSize" );
//
//	parms.Text = Text;
//	parms.Font = Font;
//	this->ProcessEvent ( pTextSize, &parms, NULL );
//
//	*width = parms.width;
//	*Height = parms.Height;
//}
//
//void UScriptedTexture::DrawText ( int StartX, int StartY, struct FString Text, class UFont* Font, class FColor Color )
//{
//	static UFunction* pDrawText = 0;
//	UScriptedTexture_execDrawText_Parms parms;
//
//	if ( !pDrawText )
//		pDrawText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScriptedTexture.DrawText" );
//
//	parms.StartX = StartX;
//	parms.StartY = StartY;
//	parms.Text = Text;
//	parms.Font = Font;
//	parms.Color = Color;
//	this->ProcessEvent ( pDrawText, &parms, NULL );
//
//}
//
//void UScriptedTexture::SetSize ( int width, int Height )
//{
//	static UFunction* pSetSize = 0;
//	UScriptedTexture_execSetSize_Parms parms;
//
//	if ( !pSetSize )
//		pSetSize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScriptedTexture.SetSize" );
//
//	parms.width = width;
//	parms.Height = Height;
//	this->ProcessEvent ( pSetSize, &parms, NULL );
//
//}
//
//void UBtrTraceResult::eventclearResultArray (  )
//{
//	static UFunction* pclearResultArray = 0;
//	UBtrTraceResult_eventclearResultArray_Parms parms;
//
//	if ( !pclearResultArray )
//		pclearResultArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BtrTraceResult.clearResultArray" );
//
//	this->ProcessEvent ( pclearResultArray, &parms, NULL );
//
//}
//
//void UBtrTraceResult::eventgetResult ( int Index, struct FResultData* Data )
//{
//	static UFunction* pgetResult = 0;
//	UBtrTraceResult_eventgetResult_Parms parms;
//
//	if ( !pgetResult )
//		pgetResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BtrTraceResult.getResult" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pgetResult, &parms, NULL );
//
//	*Data = parms.Data;
//}
//
//void UBtrTraceResult::addResult ( struct FResultData Data )
//{
//	static UFunction* paddResult = 0;
//	UBtrTraceResult_execaddResult_Parms parms;
//
//	if ( !paddResult )
//		paddResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BtrTraceResult.addResult" );
//
//	parms.Data = Data;
//	this->ProcessEvent ( paddResult, &parms, NULL );
//
//}
//
//void ASceneManager::eventSceneEnded (  )
//{
//	static UFunction* pSceneEnded = 0;
//	ASceneManager_eventSceneEnded_Parms parms;
//
//	if ( !pSceneEnded )
//		pSceneEnded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SceneManager.SceneEnded" );
//
//	this->ProcessEvent ( pSceneEnded, &parms, NULL );
//
//}
//
//void ASceneManager::eventSceneStarted (  )
//{
//	static UFunction* pSceneStarted = 0;
//	ASceneManager_eventSceneStarted_Parms parms;
//
//	if ( !pSceneStarted )
//		pSceneStarted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SceneManager.SceneStarted" );
//
//	this->ProcessEvent ( pSceneStarted, &parms, NULL );
//
//}
//
//void ASceneManager::Trigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	ASceneManager_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SceneManager.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void ASceneManager::BeginPlay (  )
//{
//	static UFunction* pBeginPlay = 0;
//	ASceneManager_execBeginPlay_Parms parms;
//
//	if ( !pBeginPlay )
//		pBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SceneManager.BeginPlay" );
//
//	this->ProcessEvent ( pBeginPlay, &parms, NULL );
//
//}
//
//void ASceneManager::AbortScene (  )
//{
//	static UFunction* pAbortScene = 0;
//	ASceneManager_execAbortScene_Parms parms;
//
//	if ( !pAbortScene )
//		pAbortScene = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SceneManager.AbortScene" );
//
//	this->ProcessEvent ( pAbortScene, &parms, NULL );
//
//}
//
//float ASceneManager::GetTotalSceneTime (  )
//{
//	static UFunction* pGetTotalSceneTime = 0;
//	ASceneManager_execGetTotalSceneTime_Parms parms;
//
//	if ( !pGetTotalSceneTime )
//		pGetTotalSceneTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SceneManager.GetTotalSceneTime" );
//
//	this->ProcessEvent ( pGetTotalSceneTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AProjector::eventUpdateSunLight ( struct FVector SunDir )
//{
//	static UFunction* pUpdateSunLight = 0;
//	AProjector_eventUpdateSunLight_Parms parms;
//
//	if ( !pUpdateSunLight )
//		pUpdateSunLight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projector.UpdateSunLight" );
//
//	parms.SunDir = SunDir;
//	this->ProcessEvent ( pUpdateSunLight, &parms, NULL );
//
//}
//
//void AProjector::eventLightUpdate ( class TArray< class AActor* > LightSources )
//{
//	static UFunction* pLightUpdate = 0;
//	AProjector_eventLightUpdate_Parms parms;
//
//	if ( !pLightUpdate )
//		pLightUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projector.LightUpdate" );
//
//	parms.LightSources = LightSources;
//	this->ProcessEvent ( pLightUpdate, &parms, NULL );
//
//}
//
//void AProjector::eventUnTouch ( class AActor* Other )
//{
//	static UFunction* pUnTouch = 0;
//	AProjector_eventUnTouch_Parms parms;
//
//	if ( !pUnTouch )
//		pUnTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projector.UnTouch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pUnTouch, &parms, NULL );
//
//}
//
//void AProjector::eventTouch ( class AActor* Other )
//{
//	static UFunction* pTouch = 0;
//	AProjector_eventTouch_Parms parms;
//
//	if ( !pTouch )
//		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projector.Touch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTouch, &parms, NULL );
//
//}
//
//void AProjector::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AProjector_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projector.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AProjector::DetachActor ( class AActor* A )
//{
//	static UFunction* pDetachActor = 0;
//	AProjector_execDetachActor_Parms parms;
//
//	if ( !pDetachActor )
//		pDetachActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projector.DetachActor" );
//
//	parms.A = A;
//	this->ProcessEvent ( pDetachActor, &parms, NULL );
//
//}
//
//void AProjector::AttachActor ( class AActor* A )
//{
//	static UFunction* pAttachActor = 0;
//	AProjector_execAttachActor_Parms parms;
//
//	if ( !pAttachActor )
//		pAttachActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projector.AttachActor" );
//
//	parms.A = A;
//	this->ProcessEvent ( pAttachActor, &parms, NULL );
//
//}
//
//void AProjector::AbandonProjector ( float Lifetime )
//{
//	static UFunction* pAbandonProjector = 0;
//	AProjector_execAbandonProjector_Parms parms;
//
//	if ( !pAbandonProjector )
//		pAbandonProjector = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projector.AbandonProjector" );
//
//	parms.Lifetime = Lifetime;
//	this->ProcessEvent ( pAbandonProjector, &parms, NULL );
//
//}
//
//void AProjector::DetachProjector ( bool Force )
//{
//	static UFunction* pDetachProjector = 0;
//	AProjector_execDetachProjector_Parms parms;
//
//	if ( !pDetachProjector )
//		pDetachProjector = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projector.DetachProjector" );
//
//	parms.Force = Force;
//	this->ProcessEvent ( pDetachProjector, &parms, NULL );
//
//}
//
//void AProjector::AttachProjector ( float FadeInTime )
//{
//	static UFunction* pAttachProjector = 0;
//	AProjector_execAttachProjector_Parms parms;
//
//	if ( !pAttachProjector )
//		pAttachProjector = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projector.AttachProjector" );
//
//	parms.FadeInTime = FadeInTime;
//	this->ProcessEvent ( pAttachProjector, &parms, NULL );
//
//}
//
//void UFinalEffect::FadeToColor ( float inFadeTime )
//{
//	static UFunction* pFadeToColor = 0;
//	UFinalEffect_execFadeToColor_Parms parms;
//
//	if ( !pFadeToColor )
//		pFadeToColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.FinalEffect.FadeToColor" );
//
//	parms.inFadeTime = inFadeTime;
//	this->ProcessEvent ( pFadeToColor, &parms, NULL );
//
//}
//
//void UFinalEffect::FadeToBlackWhite ( float inFadeTime )
//{
//	static UFunction* pFadeToBlackWhite = 0;
//	UFinalEffect_execFadeToBlackWhite_Parms parms;
//
//	if ( !pFadeToBlackWhite )
//		pFadeToBlackWhite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.FinalEffect.FadeToBlackWhite" );
//
//	parms.inFadeTime = inFadeTime;
//	this->ProcessEvent ( pFadeToBlackWhite, &parms, NULL );
//
//}
//
//void UFinalEffect::InitNewPresets (  )
//{
//	static UFunction* pInitNewPresets = 0;
//	UFinalEffect_execInitNewPresets_Parms parms;
//
//	if ( !pInitNewPresets )
//		pInitNewPresets = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.FinalEffect.InitNewPresets" );
//
//	this->ProcessEvent ( pInitNewPresets, &parms, NULL );
//
//}
//
//void UFinalEffect::eventInitPresets (  )
//{
//	static UFunction* pInitPresets = 0;
//	UFinalEffect_eventInitPresets_Parms parms;
//
//	if ( !pInitPresets )
//		pInitPresets = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.FinalEffect.InitPresets" );
//
//	this->ProcessEvent ( pInitPresets, &parms, NULL );
//
//}
//
//void UPlayInfo::SplitStringToArray ( struct FString Source, struct FString Delim, class TArray< struct FString >* Parts )
//{
//	static UFunction* pSplitStringToArray = 0;
//	UPlayInfo_execSplitStringToArray_Parms parms;
//
//	if ( !pSplitStringToArray )
//		pSplitStringToArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.SplitStringToArray" );
//
//	parms.Source = Source;
//	parms.Delim = Delim;
//	this->ProcessEvent ( pSplitStringToArray, &parms, NULL );
//
//	*Parts = parms.Parts;
//}
//
//class UClass* UPlayInfo::GetGameInfo (  )
//{
//	static UFunction* pGetGameInfo = 0;
//	UPlayInfo_execGetGameInfo_Parms parms;
//
//	if ( !pGetGameInfo )
//		pGetGameInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.GetGameInfo" );
//
//	this->ProcessEvent ( pGetGameInfo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UPlayInfo::Init ( class TArray< class UClass* > Classes, bool bStrict )
//{
//	static UFunction* pInit = 0;
//	UPlayInfo_execInit_Parms parms;
//
//	if ( !pInit )
//		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.Init" );
//
//	parms.Classes = Classes;
//	parms.bStrict = bStrict;
//	this->ProcessEvent ( pInit, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UPlayInfo::Dump ( struct FString Group )
//{
//	static UFunction* pDump = 0;
//	UPlayInfo_execDump_Parms parms;
//
//	if ( !pDump )
//		pDump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.Dump" );
//
//	parms.Group = Group;
//	this->ProcessEvent ( pDump, &parms, NULL );
//
//}
//
//void UPlayInfo::Sort ( unsigned char SortingMethod )
//{
//	static UFunction* pSort = 0;
//	UPlayInfo_execSort_Parms parms;
//
//	if ( !pSort )
//		pSort = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.Sort" );
//
//	WORD iNative = pSort->iNative;
//	pSort->FunctionFlags &= ~FUNC_Native;
//	pSort->iNative = 0;
//
//	parms.SortingMethod = SortingMethod;
//	this->ProcessEvent ( pSort, &parms, NULL );
//
//	pSort->iNative = iNative;
//	pSort->FunctionFlags |= FUNC_Native;
//}
//
//int UPlayInfo::FindIndex ( struct FString SettingName )
//{
//	static UFunction* pFindIndex = 0;
//	UPlayInfo_execFindIndex_Parms parms;
//
//	if ( !pFindIndex )
//		pFindIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.FindIndex" );
//
//	WORD iNative = pFindIndex->iNative;
//	pFindIndex->FunctionFlags &= ~FUNC_Native;
//	pFindIndex->iNative = 0;
//
//	parms.SettingName = SettingName;
//	this->ProcessEvent ( pFindIndex, &parms, NULL );
//
//	pFindIndex->iNative = iNative;
//	pFindIndex->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool UPlayInfo::GetSettings ( struct FString GroupName, class TArray< struct FPlayInfoData >* GroupSettings )
//{
//	static UFunction* pGetSettings = 0;
//	UPlayInfo_execGetSettings_Parms parms;
//
//	if ( !pGetSettings )
//		pGetSettings = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.GetSettings" );
//
//	WORD iNative = pGetSettings->iNative;
//	pGetSettings->FunctionFlags &= ~FUNC_Native;
//	pGetSettings->iNative = 0;
//
//	parms.GroupName = GroupName;
//	this->ProcessEvent ( pGetSettings, &parms, NULL );
//
//	pGetSettings->iNative = iNative;
//	pGetSettings->FunctionFlags |= FUNC_Native;
//	*GroupSettings = parms.GroupSettings;
//	return parms.ReturnValue;
//}
//
//bool UPlayInfo::StoreSetting ( int Index, struct FString NewVal, struct FString RangeData )
//{
//	static UFunction* pStoreSetting = 0;
//	UPlayInfo_execStoreSetting_Parms parms;
//
//	if ( !pStoreSetting )
//		pStoreSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.StoreSetting" );
//
//	WORD iNative = pStoreSetting->iNative;
//	pStoreSetting->FunctionFlags &= ~FUNC_Native;
//	pStoreSetting->iNative = 0;
//
//	parms.Index = Index;
//	parms.NewVal = NewVal;
//	parms.RangeData = RangeData;
//	this->ProcessEvent ( pStoreSetting, &parms, NULL );
//
//	pStoreSetting->iNative = iNative;
//	pStoreSetting->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool UPlayInfo::SaveSettings (  )
//{
//	static UFunction* pSaveSettings = 0;
//	UPlayInfo_execSaveSettings_Parms parms;
//
//	if ( !pSaveSettings )
//		pSaveSettings = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.SaveSettings" );
//
//	WORD iNative = pSaveSettings->iNative;
//	pSaveSettings->FunctionFlags &= ~FUNC_Native;
//	pSaveSettings->iNative = 0;
//
//	this->ProcessEvent ( pSaveSettings, &parms, NULL );
//
//	pSaveSettings->iNative = iNative;
//	pSaveSettings->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool UPlayInfo::AddSetting ( struct FString Group, struct FString PropertyName, struct FString Description, unsigned char SecLevel, unsigned char Weight, struct FString RenderType, struct FString Extras, struct FString ExtraPrivs, bool bMultiPlayerOnly, bool bAdvanced )
//{
//	static UFunction* pAddSetting = 0;
//	UPlayInfo_execAddSetting_Parms parms;
//
//	if ( !pAddSetting )
//		pAddSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.AddSetting" );
//
//	WORD iNative = pAddSetting->iNative;
//	pAddSetting->FunctionFlags &= ~FUNC_Native;
//	pAddSetting->iNative = 0;
//
//	parms.Group = Group;
//	parms.PropertyName = PropertyName;
//	parms.Description = Description;
//	parms.SecLevel = SecLevel;
//	parms.Weight = Weight;
//	parms.RenderType = RenderType;
//	parms.Extras = Extras;
//	parms.ExtraPrivs = ExtraPrivs;
//	parms.bMultiPlayerOnly = bMultiPlayerOnly;
//	parms.bAdvanced = bAdvanced;
//	this->ProcessEvent ( pAddSetting, &parms, NULL );
//
//	pAddSetting->iNative = iNative;
//	pAddSetting->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool UPlayInfo::PopClass (  )
//{
//	static UFunction* pPopClass = 0;
//	UPlayInfo_execPopClass_Parms parms;
//
//	if ( !pPopClass )
//		pPopClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.PopClass" );
//
//	WORD iNative = pPopClass->iNative;
//	pPopClass->FunctionFlags &= ~FUNC_Native;
//	pPopClass->iNative = 0;
//
//	this->ProcessEvent ( pPopClass, &parms, NULL );
//
//	pPopClass->iNative = iNative;
//	pPopClass->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool UPlayInfo::RemoveClass ( class UClass* RemovingClass )
//{
//	static UFunction* pRemoveClass = 0;
//	UPlayInfo_execRemoveClass_Parms parms;
//
//	if ( !pRemoveClass )
//		pRemoveClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.RemoveClass" );
//
//	WORD iNative = pRemoveClass->iNative;
//	pRemoveClass->FunctionFlags &= ~FUNC_Native;
//	pRemoveClass->iNative = 0;
//
//	parms.RemovingClass = RemovingClass;
//	this->ProcessEvent ( pRemoveClass, &parms, NULL );
//
//	pRemoveClass->iNative = iNative;
//	pRemoveClass->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool UPlayInfo::AddClass ( class UClass* AddingClass )
//{
//	static UFunction* pAddClass = 0;
//	UPlayInfo_execAddClass_Parms parms;
//
//	if ( !pAddClass )
//		pAddClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.AddClass" );
//
//	WORD iNative = pAddClass->iNative;
//	pAddClass->FunctionFlags &= ~FUNC_Native;
//	pAddClass->iNative = 0;
//
//	parms.AddingClass = AddingClass;
//	this->ProcessEvent ( pAddClass, &parms, NULL );
//
//	pAddClass->iNative = iNative;
//	pAddClass->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool UPlayInfo::Clear (  )
//{
//	static UFunction* pClear = 0;
//	UPlayInfo_execClear_Parms parms;
//
//	if ( !pClear )
//		pClear = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayInfo.Clear" );
//
//	WORD iNative = pClear->iNative;
//	pClear->FunctionFlags &= ~FUNC_Native;
//	pClear->iNative = 0;
//
//	this->ProcessEvent ( pClear, &parms, NULL );
//
//	pClear->iNative = iNative;
//	pClear->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//void AEmitter::Reset (  )
//{
//	static UFunction* pReset = 0;
//	AEmitter_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Emitter.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void AEmitter::eventSpawnParticle ( int Amount )
//{
//	static UFunction* pSpawnParticle = 0;
//	AEmitter_eventSpawnParticle_Parms parms;
//
//	if ( !pSpawnParticle )
//		pSpawnParticle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Emitter.SpawnParticle" );
//
//	parms.Amount = Amount;
//	this->ProcessEvent ( pSpawnParticle, &parms, NULL );
//
//}
//
//void AEmitter::eventTrigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	AEmitter_eventTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Emitter.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void AEmitter::UpdatePrecacheMaterials (  )
//{
//	static UFunction* pUpdatePrecacheMaterials = 0;
//	AEmitter_execUpdatePrecacheMaterials_Parms parms;
//
//	if ( !pUpdatePrecacheMaterials )
//		pUpdatePrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Emitter.UpdatePrecacheMaterials" );
//
//	this->ProcessEvent ( pUpdatePrecacheMaterials, &parms, NULL );
//
//}
//
//void AEmitter::SetFadeOutTime ( float fTotal, float fFadeOutGap )
//{
//	static UFunction* pSetFadeOutTime = 0;
//	AEmitter_execSetFadeOutTime_Parms parms;
//
//	if ( !pSetFadeOutTime )
//		pSetFadeOutTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Emitter.SetFadeOutTime" );
//
//	parms.fTotal = fTotal;
//	parms.fFadeOutGap = fFadeOutGap;
//	this->ProcessEvent ( pSetFadeOutTime, &parms, NULL );
//
//}
//
void AEmitter::Kill (  )
{
	static UFunction* pKill = 0;
	AEmitter_execKill_Parms parms;

	if ( !pKill )
		pKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Emitter.Kill" );

	this->ProcessEvent ( pKill, &parms, NULL );

}
//
//void AMover::UpdatePrecacheStaticMeshes (  )
//{
//	static UFunction* pUpdatePrecacheStaticMeshes = 0;
//	AMover_execUpdatePrecacheStaticMeshes_Parms parms;
//
//	if ( !pUpdatePrecacheStaticMeshes )
//		pUpdatePrecacheStaticMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.UpdatePrecacheStaticMeshes" );
//
//	this->ProcessEvent ( pUpdatePrecacheStaticMeshes, &parms, NULL );
//
//}
//
//void AMover::BaseFinished (  )
//{
//	static UFunction* pBaseFinished = 0;
//	AMover_execBaseFinished_Parms parms;
//
//	if ( !pBaseFinished )
//		pBaseFinished = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.BaseFinished" );
//
//	this->ProcessEvent ( pBaseFinished, &parms, NULL );
//
//}
//
//void AMover::BaseStarted (  )
//{
//	static UFunction* pBaseStarted = 0;
//	AMover_execBaseStarted_Parms parms;
//
//	if ( !pBaseStarted )
//		pBaseStarted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.BaseStarted" );
//
//	this->ProcessEvent ( pBaseStarted, &parms, NULL );
//
//}
//
//void AMover::MoverLooped (  )
//{
//	static UFunction* pMoverLooped = 0;
//	AMover_execMoverLooped_Parms parms;
//
//	if ( !pMoverLooped )
//		pMoverLooped = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.MoverLooped" );
//
//	this->ProcessEvent ( pMoverLooped, &parms, NULL );
//
//}
//
//void AMover::SetStoppedPosition ( unsigned char NewPos )
//{
//	static UFunction* pSetStoppedPosition = 0;
//	AMover_execSetStoppedPosition_Parms parms;
//
//	if ( !pSetStoppedPosition )
//		pSetStoppedPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.SetStoppedPosition" );
//
//	parms.NewPos = NewPos;
//	this->ProcessEvent ( pSetStoppedPosition, &parms, NULL );
//
//}
//
//void AMover::EnableTrigger (  )
//{
//	static UFunction* pEnableTrigger = 0;
//	AMover_execEnableTrigger_Parms parms;
//
//	if ( !pEnableTrigger )
//		pEnableTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.EnableTrigger" );
//
//	this->ProcessEvent ( pEnableTrigger, &parms, NULL );
//
//}
//
//void AMover::DisableTrigger (  )
//{
//	static UFunction* pDisableTrigger = 0;
//	AMover_execDisableTrigger_Parms parms;
//
//	if ( !pDisableTrigger )
//		pDisableTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.DisableTrigger" );
//
//	this->ProcessEvent ( pDisableTrigger, &parms, NULL );
//
//}
//
//void AMover::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pTakeDamage = 0;
//	AMover_execTakeDamage_Parms parms;
//
//	if ( !pTakeDamage )
//		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.TakeDamage" );
//
//	parms.Damage = Damage;
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.Momentum = Momentum;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pTakeDamage, &parms, NULL );
//
//}
//
//void AMover::Bump ( class AActor* Other )
//{
//	static UFunction* pBump = 0;
//	AMover_execBump_Parms parms;
//
//	if ( !pBump )
//		pBump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.Bump" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pBump, &parms, NULL );
//
//}
//
//bool AMover::EncroachingOn ( class AActor* Other )
//{
//	static UFunction* pEncroachingOn = 0;
//	AMover_execEncroachingOn_Parms parms;
//
//	if ( !pEncroachingOn )
//		pEncroachingOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.EncroachingOn" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pEncroachingOn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMover::MakeGroupReturn (  )
//{
//	static UFunction* pMakeGroupReturn = 0;
//	AMover_execMakeGroupReturn_Parms parms;
//
//	if ( !pMakeGroupReturn )
//		pMakeGroupReturn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.MakeGroupReturn" );
//
//	this->ProcessEvent ( pMakeGroupReturn, &parms, NULL );
//
//}
//
//void AMover::MakeGroupStop (  )
//{
//	static UFunction* pMakeGroupStop = 0;
//	AMover_execMakeGroupStop_Parms parms;
//
//	if ( !pMakeGroupStop )
//		pMakeGroupStop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.MakeGroupStop" );
//
//	this->ProcessEvent ( pMakeGroupStop, &parms, NULL );
//
//}
//
//void AMover::Reset (  )
//{
//	static UFunction* pReset = 0;
//	AMover_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void AMover::SetResetStatus ( bool bNewStatus )
//{
//	static UFunction* pSetResetStatus = 0;
//	AMover_execSetResetStatus_Parms parms;
//
//	if ( !pSetResetStatus )
//		pSetResetStatus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.SetResetStatus" );
//
//	parms.bNewStatus = bNewStatus;
//	this->ProcessEvent ( pSetResetStatus, &parms, NULL );
//
//}
//
//void AMover::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AMover_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AMover::BeginPlay (  )
//{
//	static UFunction* pBeginPlay = 0;
//	AMover_execBeginPlay_Parms parms;
//
//	if ( !pBeginPlay )
//		pBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.BeginPlay" );
//
//	this->ProcessEvent ( pBeginPlay, &parms, NULL );
//
//}
//
//void AMover::DoClose (  )
//{
//	static UFunction* pDoClose = 0;
//	AMover_execDoClose_Parms parms;
//
//	if ( !pDoClose )
//		pDoClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.DoClose" );
//
//	this->ProcessEvent ( pDoClose, &parms, NULL );
//
//}
//
//void AMover::DoOpen (  )
//{
//	static UFunction* pDoOpen = 0;
//	AMover_execDoOpen_Parms parms;
//
//	if ( !pDoOpen )
//		pDoOpen = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.DoOpen" );
//
//	this->ProcessEvent ( pDoOpen, &parms, NULL );
//
//}
//
//void AMover::FinishedOpening (  )
//{
//	static UFunction* pFinishedOpening = 0;
//	AMover_execFinishedOpening_Parms parms;
//
//	if ( !pFinishedOpening )
//		pFinishedOpening = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.FinishedOpening" );
//
//	this->ProcessEvent ( pFinishedOpening, &parms, NULL );
//
//}
//
//void AMover::FinishedClosing (  )
//{
//	static UFunction* pFinishedClosing = 0;
//	AMover_execFinishedClosing_Parms parms;
//
//	if ( !pFinishedClosing )
//		pFinishedClosing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.FinishedClosing" );
//
//	this->ProcessEvent ( pFinishedClosing, &parms, NULL );
//
//}
//
//void AMover::FinishNotify (  )
//{
//	static UFunction* pFinishNotify = 0;
//	AMover_execFinishNotify_Parms parms;
//
//	if ( !pFinishNotify )
//		pFinishNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.FinishNotify" );
//
//	this->ProcessEvent ( pFinishNotify, &parms, NULL );
//
//}
//
//void AMover::eventKeyFrameReached (  )
//{
//	static UFunction* pKeyFrameReached = 0;
//	AMover_eventKeyFrameReached_Parms parms;
//
//	if ( !pKeyFrameReached )
//		pKeyFrameReached = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.KeyFrameReached" );
//
//	this->ProcessEvent ( pKeyFrameReached, &parms, NULL );
//
//}
//
//void AMover::SetKeyframe ( unsigned char NewKeyNum, struct FVector NewLocation, struct FRotator NewRotation )
//{
//	static UFunction* pSetKeyframe = 0;
//	AMover_execSetKeyframe_Parms parms;
//
//	if ( !pSetKeyframe )
//		pSetKeyframe = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.SetKeyframe" );
//
//	parms.NewKeyNum = NewKeyNum;
//	parms.NewLocation = NewLocation;
//	parms.NewRotation = NewRotation;
//	this->ProcessEvent ( pSetKeyframe, &parms, NULL );
//
//}
//
//void AMover::InterpolateTo ( unsigned char NewKeyNum, float Seconds )
//{
//	static UFunction* pInterpolateTo = 0;
//	AMover_execInterpolateTo_Parms parms;
//
//	if ( !pInterpolateTo )
//		pInterpolateTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.InterpolateTo" );
//
//	parms.NewKeyNum = NewKeyNum;
//	parms.Seconds = Seconds;
//	this->ProcessEvent ( pInterpolateTo, &parms, NULL );
//
//}
//
//void AMover::Timer (  )
//{
//	static UFunction* pTimer = 0;
//	AMover_execTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//void AMover::StartInterpolation (  )
//{
//	static UFunction* pStartInterpolation = 0;
//	AMover_execStartInterpolation_Parms parms;
//
//	if ( !pStartInterpolation )
//		pStartInterpolation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.StartInterpolation" );
//
//	this->ProcessEvent ( pStartInterpolation, &parms, NULL );
//
//}
//
//class AActor* AMover::SpecialHandling ( class APawn* Other )
//{
//	static UFunction* pSpecialHandling = 0;
//	AMover_execSpecialHandling_Parms parms;
//
//	if ( !pSpecialHandling )
//		pSpecialHandling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.SpecialHandling" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSpecialHandling, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMover::SelfTriggered (  )
//{
//	static UFunction* pSelfTriggered = 0;
//	AMover_execSelfTriggered_Parms parms;
//
//	if ( !pSelfTriggered )
//		pSelfTriggered = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mover.SelfTriggered" );
//
//	this->ProcessEvent ( pSelfTriggered, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UModifier::Trigger ( class AActor* Other, class AActor* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	UModifier_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Modifier.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void UModifier::Reset (  )
//{
//	static UFunction* pReset = 0;
//	UModifier_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Modifier.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void UMaterialSequence::Trigger ( class AActor* Other, class AActor* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	UMaterialSequence_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaterialSequence.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void UMaterialSequence::Reset (  )
//{
//	static UFunction* pReset = 0;
//	UMaterialSequence_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaterialSequence.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void UMaterialSwitch::Trigger ( class AActor* Other, class AActor* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	UMaterialSwitch_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaterialSwitch.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void UMaterialSwitch::Reset (  )
//{
//	static UFunction* pReset = 0;
//	UMaterialSwitch_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaterialSwitch.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void UTexOscillatorTriggered::Reset (  )
//{
//	static UFunction* pReset = 0;
//	UTexOscillatorTriggered_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TexOscillatorTriggered.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void UTexOscillatorTriggered::Trigger ( class AActor* Other, class AActor* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	UTexOscillatorTriggered_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TexOscillatorTriggered.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void UTexPannerTriggered::Reset (  )
//{
//	static UFunction* pReset = 0;
//	UTexPannerTriggered_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TexPannerTriggered.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void UTexPannerTriggered::Trigger ( class AActor* Other, class AActor* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	UTexPannerTriggered_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TexPannerTriggered.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void UDecalShader::Trigger ( class AActor* Other, class AActor* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	UDecalShader_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DecalShader.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void UDecalShader::Reset (  )
//{
//	static UFunction* pReset = 0;
//	UDecalShader_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DecalShader.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void UBlendShader::Trigger ( class AActor* Other, class AActor* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	UBlendShader_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BlendShader.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void UBlendShader::Reset (  )
//{
//	static UFunction* pReset = 0;
//	UBlendShader_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BlendShader.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void UShader::Trigger ( class AActor* Other, class AActor* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	UShader_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Shader.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void UShader::Reset (  )
//{
//	static UFunction* pReset = 0;
//	UShader_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Shader.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void UInteractionMaster::eventEnableInteractions ( class TArray< class UInteraction* > InteractionArray )
//{
//	static UFunction* pEnableInteractions = 0;
//	UInteractionMaster_eventEnableInteractions_Parms parms;
//
//	if ( !pEnableInteractions )
//		pEnableInteractions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InteractionMaster.EnableInteractions" );
//
//	parms.InteractionArray = InteractionArray;
//	this->ProcessEvent ( pEnableInteractions, &parms, NULL );
//
//}
//
//void UInteractionMaster::eventDisableInteractions ( class TArray< class UInteraction* > InteractionArray )
//{
//	static UFunction* pDisableInteractions = 0;
//	UInteractionMaster_eventDisableInteractions_Parms parms;
//
//	if ( !pDisableInteractions )
//		pDisableInteractions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InteractionMaster.DisableInteractions" );
//
//	parms.InteractionArray = InteractionArray;
//	this->ProcessEvent ( pDisableInteractions, &parms, NULL );
//
//}
//
//void UInteractionMaster::eventNotifyLevelChange ( class TArray< class UInteraction* > InteractionArray )
//{
//	static UFunction* pNotifyLevelChange = 0;
//	UInteractionMaster_eventNotifyLevelChange_Parms parms;
//
//	if ( !pNotifyLevelChange )
//		pNotifyLevelChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InteractionMaster.NotifyLevelChange" );
//
//	parms.InteractionArray = InteractionArray;
//	this->ProcessEvent ( pNotifyLevelChange, &parms, NULL );
//
//}
//
//void UInteractionMaster::eventProcess_Message ( struct FString Msg, float MsgLife, class TArray< class UInteraction* > InteractionArray )
//{
//	static UFunction* pProcess_Message = 0;
//	UInteractionMaster_eventProcess_Message_Parms parms;
//
//	if ( !pProcess_Message )
//		pProcess_Message = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InteractionMaster.Process_Message" );
//
//	parms.Msg = Msg;
//	parms.MsgLife = MsgLife;
//	parms.InteractionArray = InteractionArray;
//	this->ProcessEvent ( pProcess_Message, &parms, NULL );
//
//}
//
//void UInteractionMaster::eventProcess_Tick ( class TArray< class UInteraction* > InteractionArray, float DeltaTime )
//{
//	static UFunction* pProcess_Tick = 0;
//	UInteractionMaster_eventProcess_Tick_Parms parms;
//
//	if ( !pProcess_Tick )
//		pProcess_Tick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InteractionMaster.Process_Tick" );
//
//	parms.InteractionArray = InteractionArray;
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pProcess_Tick, &parms, NULL );
//
//}
//
//void UInteractionMaster::eventProcess_PostRender ( class TArray< class UInteraction* > InteractionArray, class UCanvas* Canvas )
//{
//	static UFunction* pProcess_PostRender = 0;
//	UInteractionMaster_eventProcess_PostRender_Parms parms;
//
//	if ( !pProcess_PostRender )
//		pProcess_PostRender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InteractionMaster.Process_PostRender" );
//
//	parms.InteractionArray = InteractionArray;
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pProcess_PostRender, &parms, NULL );
//
//}
//
//void UInteractionMaster::eventProcess_PreRender ( class TArray< class UInteraction* > InteractionArray, class UCanvas* Canvas )
//{
//	static UFunction* pProcess_PreRender = 0;
//	UInteractionMaster_eventProcess_PreRender_Parms parms;
//
//	if ( !pProcess_PreRender )
//		pProcess_PreRender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InteractionMaster.Process_PreRender" );
//
//	parms.InteractionArray = InteractionArray;
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pProcess_PreRender, &parms, NULL );
//
//}
//
//bool UInteractionMaster::eventProcess_KeyEvent ( class TArray< class UInteraction* > InteractionArray, float Delta, unsigned char* key, unsigned char* Action )
//{
//	static UFunction* pProcess_KeyEvent = 0;
//	UInteractionMaster_eventProcess_KeyEvent_Parms parms;
//
//	if ( !pProcess_KeyEvent )
//		pProcess_KeyEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InteractionMaster.Process_KeyEvent" );
//
//	parms.InteractionArray = InteractionArray;
//	parms.Delta = Delta;
//	this->ProcessEvent ( pProcess_KeyEvent, &parms, NULL );
//
//	*key = parms.key;
//	*Action = parms.Action;
//	return parms.ReturnValue;
//}
//
//bool UInteractionMaster::eventProcess_KeyType ( class TArray< class UInteraction* > InteractionArray, struct FString Unicode, unsigned char* key )
//{
//	static UFunction* pProcess_KeyType = 0;
//	UInteractionMaster_eventProcess_KeyType_Parms parms;
//
//	if ( !pProcess_KeyType )
//		pProcess_KeyType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InteractionMaster.Process_KeyType" );
//
//	parms.InteractionArray = InteractionArray;
//	parms.Unicode = Unicode;
//	this->ProcessEvent ( pProcess_KeyType, &parms, NULL );
//
//	*key = parms.key;
//	return parms.ReturnValue;
//}
//
//void UInteractionMaster::eventSetFocusTo ( class UInteraction* Inter, class UPlayer* ViewportOwner )
//{
//	static UFunction* pSetFocusTo = 0;
//	UInteractionMaster_eventSetFocusTo_Parms parms;
//
//	if ( !pSetFocusTo )
//		pSetFocusTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InteractionMaster.SetFocusTo" );
//
//	parms.Inter = Inter;
//	parms.ViewportOwner = ViewportOwner;
//	this->ProcessEvent ( pSetFocusTo, &parms, NULL );
//
//}
//
//void UInteractionMaster::eventRemoveInteraction ( class UInteraction* RemoveMe )
//{
//	static UFunction* pRemoveInteraction = 0;
//	UInteractionMaster_eventRemoveInteraction_Parms parms;
//
//	if ( !pRemoveInteraction )
//		pRemoveInteraction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InteractionMaster.RemoveInteraction" );
//
//	parms.RemoveMe = RemoveMe;
//	this->ProcessEvent ( pRemoveInteraction, &parms, NULL );
//
//}
//
//class UInteraction* UInteractionMaster::eventAddInteraction ( struct FString InteractionName, class UPlayer* AttachTo )
//{
//	static UFunction* pAddInteraction = 0;
//	UInteractionMaster_eventAddInteraction_Parms parms;
//
//	if ( !pAddInteraction )
//		pAddInteraction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InteractionMaster.AddInteraction" );
//
//	parms.InteractionName = InteractionName;
//	parms.AttachTo = AttachTo;
//	this->ProcessEvent ( pAddInteraction, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UInteractionMaster::Travel ( struct FString URL )
//{
//	static UFunction* pTravel = 0;
//	UInteractionMaster_execTravel_Parms parms;
//
//	if ( !pTravel )
//		pTravel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InteractionMaster.Travel" );
//
//	parms.URL = URL;
//	this->ProcessEvent ( pTravel, &parms, NULL );
//
//}
//
//void UBaseGUIController::SetTime ( int newTime )
//{
//	static UFunction* pSetTime = 0;
//	UBaseGUIController_execSetTime_Parms parms;
//
//	if ( !pSetTime )
//		pSetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BaseGUIController.SetTime" );
//
//	parms.newTime = newTime;
//	this->ProcessEvent ( pSetTime, &parms, NULL );
//
//}
//
//bool UBaseGUIController::eventNeedToOffIME (  )
//{
//	static UFunction* pNeedToOffIME = 0;
//	UBaseGUIController_eventNeedToOffIME_Parms parms;
//
//	if ( !pNeedToOffIME )
//		pNeedToOffIME = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BaseGUIController.NeedToOffIME" );
//
//	this->ProcessEvent ( pNeedToOffIME, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UBaseGUIController::eventSetRequiredGameResolution ( struct FString GameRes )
//{
//	static UFunction* pSetRequiredGameResolution = 0;
//	UBaseGUIController_eventSetRequiredGameResolution_Parms parms;
//
//	if ( !pSetRequiredGameResolution )
//		pSetRequiredGameResolution = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BaseGUIController.SetRequiredGameResolution" );
//
//	parms.GameRes = GameRes;
//	this->ProcessEvent ( pSetRequiredGameResolution, &parms, NULL );
//
//}
//
//bool UBaseGUIController::eventNeedsMenuResolution (  )
//{
//	static UFunction* pNeedsMenuResolution = 0;
//	UBaseGUIController_eventNeedsMenuResolution_Parms parms;
//
//	if ( !pNeedsMenuResolution )
//		pNeedsMenuResolution = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BaseGUIController.NeedsMenuResolution" );
//
//	this->ProcessEvent ( pNeedsMenuResolution, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UBaseGUIController::eventInitializeController (  )
//{
//	static UFunction* pInitializeController = 0;
//	UBaseGUIController_eventInitializeController_Parms parms;
//
//	if ( !pInitializeController )
//		pInitializeController = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BaseGUIController.InitializeController" );
//
//	this->ProcessEvent ( pInitializeController, &parms, NULL );
//
//}
//
//void UBaseGUIController::SetControllerStatus ( bool On )
//{
//	static UFunction* pSetControllerStatus = 0;
//	UBaseGUIController_execSetControllerStatus_Parms parms;
//
//	if ( !pSetControllerStatus )
//		pSetControllerStatus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BaseGUIController.SetControllerStatus" );
//
//	parms.On = On;
//	this->ProcessEvent ( pSetControllerStatus, &parms, NULL );
//
//}
//
//bool UBaseGUIController::eventClickCloseWndBtn (  )
//{
//	static UFunction* pClickCloseWndBtn = 0;
//	UBaseGUIController_eventClickCloseWndBtn_Parms parms;
//
//	if ( !pClickCloseWndBtn )
//		pClickCloseWndBtn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BaseGUIController.ClickCloseWndBtn" );
//
//	this->ProcessEvent ( pClickCloseWndBtn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UBaseGUIController::eventCloseAll ( bool bCancel, bool bForced )
//{
//	static UFunction* pCloseAll = 0;
//	UBaseGUIController_eventCloseAll_Parms parms;
//
//	if ( !pCloseAll )
//		pCloseAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BaseGUIController.CloseAll" );
//
//	parms.bCancel = bCancel;
//	parms.bForced = bForced;
//	this->ProcessEvent ( pCloseAll, &parms, NULL );
//
//}
//
//bool UBaseGUIController::eventCloseMenu ( bool bCanceled )
//{
//	static UFunction* pCloseMenu = 0;
//	UBaseGUIController_eventCloseMenu_Parms parms;
//
//	if ( !pCloseMenu )
//		pCloseMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BaseGUIController.CloseMenu" );
//
//	parms.bCanceled = bCanceled;
//	this->ProcessEvent ( pCloseMenu, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UBaseGUIController::eventReplaceMenu ( struct FString NewMenuName, struct FString Param1, struct FString Param2, bool bCancelled )
//{
//	static UFunction* pReplaceMenu = 0;
//	UBaseGUIController_eventReplaceMenu_Parms parms;
//
//	if ( !pReplaceMenu )
//		pReplaceMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BaseGUIController.ReplaceMenu" );
//
//	parms.NewMenuName = NewMenuName;
//	parms.Param1 = Param1;
//	parms.Param2 = Param2;
//	parms.bCancelled = bCancelled;
//	this->ProcessEvent ( pReplaceMenu, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UBaseGUIController::eventAutoLoadMenus (  )
//{
//	static UFunction* pAutoLoadMenus = 0;
//	UBaseGUIController_eventAutoLoadMenus_Parms parms;
//
//	if ( !pAutoLoadMenus )
//		pAutoLoadMenus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BaseGUIController.AutoLoadMenus" );
//
//	this->ProcessEvent ( pAutoLoadMenus, &parms, NULL );
//
//}
//
//bool UBaseGUIController::eventOpenMenu ( struct FString NewMenuName, struct FString Param1, struct FString Param2 )
//{
//	static UFunction* pOpenMenu = 0;
//	UBaseGUIController_eventOpenMenu_Parms parms;
//
//	if ( !pOpenMenu )
//		pOpenMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BaseGUIController.OpenMenu" );
//
//	parms.NewMenuName = NewMenuName;
//	parms.Param1 = Param1;
//	parms.Param2 = Param2;
//	this->ProcessEvent ( pOpenMenu, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UBaseGUIController::OnAdminReply ( struct FString Reply )
//{
//	static UFunction* pOnAdminReply = 0;
//	UBaseGUIController_execOnAdminReply_Parms parms;
//
//	if ( !pOnAdminReply )
//		pOnAdminReply = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BaseGUIController.OnAdminReply" );
//
//	parms.Reply = Reply;
//	this->ProcessEvent ( pOnAdminReply, &parms, NULL );
//
//}
//
//bool UConsole::eventNeedToOffIME (  )
//{
//	static UFunction* pNeedToOffIME = 0;
//	UConsole_eventNeedToOffIME_Parms parms;
//
//	if ( !pNeedToOffIME )
//		pNeedToOffIME = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.NeedToOffIME" );
//
//	this->ProcessEvent ( pNeedToOffIME, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UConsole::IsInputTimeTooIdle (  )
//{
//	static UFunction* pIsInputTimeTooIdle = 0;
//	UConsole_execIsInputTimeTooIdle_Parms parms;
//
//	if ( !pIsInputTimeTooIdle )
//		pIsInputTimeTooIdle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.IsInputTimeTooIdle" );
//
//	this->ProcessEvent ( pIsInputTimeTooIdle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UConsole::IsBGMPlaying (  )
//{
//	static UFunction* pIsBGMPlaying = 0;
//	UConsole_execIsBGMPlaying_Parms parms;
//
//	if ( !pIsBGMPlaying )
//		pIsBGMPlaying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.IsBGMPlaying" );
//
//	this->ProcessEvent ( pIsBGMPlaying, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UConsole::SetTermBetweenBGM ( float val )
//{
//	static UFunction* pSetTermBetweenBGM = 0;
//	UConsole_execSetTermBetweenBGM_Parms parms;
//
//	if ( !pSetTermBetweenBGM )
//		pSetTermBetweenBGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.SetTermBetweenBGM" );
//
//	parms.val = val;
//	this->ProcessEvent ( pSetTermBetweenBGM, &parms, NULL );
//
//}
//
//void UConsole::UpdateBGM ( float dt )
//{
//	static UFunction* pUpdateBGM = 0;
//	UConsole_execUpdateBGM_Parms parms;
//
//	if ( !pUpdateBGM )
//		pUpdateBGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.UpdateBGM" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pUpdateBGM, &parms, NULL );
//
//}
//
//void UConsole::NextBGM (  )
//{
//	static UFunction* pNextBGM = 0;
//	UConsole_execNextBGM_Parms parms;
//
//	if ( !pNextBGM )
//		pNextBGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.NextBGM" );
//
//	this->ProcessEvent ( pNextBGM, &parms, NULL );
//
//}
//
//void UConsole::SetBGMAdvanced ( class TArray< struct FString > List, bool partialPlay, int partialDuration, class TArray< struct FIntArray > initialSeeks )
//{
//	static UFunction* pSetBGMAdvanced = 0;
//	UConsole_execSetBGMAdvanced_Parms parms;
//
//	if ( !pSetBGMAdvanced )
//		pSetBGMAdvanced = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.SetBGMAdvanced" );
//
//	parms.List = List;
//	parms.partialPlay = partialPlay;
//	parms.partialDuration = partialDuration;
//	parms.initialSeeks = initialSeeks;
//	this->ProcessEvent ( pSetBGMAdvanced, &parms, NULL );
//
//}
//
//void UConsole::SetBGM ( class TArray< struct FString > List )
//{
//	static UFunction* pSetBGM = 0;
//	UConsole_execSetBGM_Parms parms;
//
//	if ( !pSetBGM )
//		pSetBGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.SetBGM" );
//
//	parms.List = List;
//	this->ProcessEvent ( pSetBGM, &parms, NULL );
//
//}
//
//void UConsole::SetOneBGM ( struct FString List )
//{
//	static UFunction* pSetOneBGM = 0;
//	UConsole_execSetOneBGM_Parms parms;
//
//	if ( !pSetOneBGM )
//		pSetOneBGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.SetOneBGM" );
//
//	parms.List = List;
//	this->ProcessEvent ( pSetOneBGM, &parms, NULL );
//
//}
//
//void UConsole::SetOneChangeIgnore (  )
//{
//	static UFunction* pSetOneChangeIgnore = 0;
//	UConsole_execSetOneChangeIgnore_Parms parms;
//
//	if ( !pSetOneChangeIgnore )
//		pSetOneChangeIgnore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.SetOneChangeIgnore" );
//
//	this->ProcessEvent ( pSetOneChangeIgnore, &parms, NULL );
//
//}
//
//void UConsole::StopBGM (  )
//{
//	static UFunction* pStopBGM = 0;
//	UConsole_execStopBGM_Parms parms;
//
//	if ( !pStopBGM )
//		pStopBGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.StopBGM" );
//
//	this->ProcessEvent ( pStopBGM, &parms, NULL );
//
//}
//
//struct FString UConsole::GetCurrentBGM (  )
//{
//	static UFunction* pGetCurrentBGM = 0;
//	UConsole_execGetCurrentBGM_Parms parms;
//
//	if ( !pGetCurrentBGM )
//		pGetCurrentBGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.GetCurrentBGM" );
//
//	this->ProcessEvent ( pGetCurrentBGM, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UConsole::ClearMessageItems (  )
//{
//	static UFunction* pClearMessageItems = 0;
//	UConsole_execClearMessageItems_Parms parms;
//
//	if ( !pClearMessageItems )
//		pClearMessageItems = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.ClearMessageItems" );
//
//	this->ProcessEvent ( pClearMessageItems, &parms, NULL );
//
//}
//
//void UConsole::AddMessageItem ( struct FMessageItem Item )
//{
//	static UFunction* pAddMessageItem = 0;
//	UConsole_execAddMessageItem_Parms parms;
//
//	if ( !pAddMessageItem )
//		pAddMessageItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.AddMessageItem" );
//
//	parms.Item = Item;
//	this->ProcessEvent ( pAddMessageItem, &parms, NULL );
//
//}
//
//struct FMessageItem UConsole::ConstructMessageItem ( struct FString Text, unsigned char MessageType )
//{
//	static UFunction* pConstructMessageItem = 0;
//	UConsole_execConstructMessageItem_Parms parms;
//
//	if ( !pConstructMessageItem )
//		pConstructMessageItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.ConstructMessageItem" );
//
//	parms.Text = Text;
//	parms.MessageType = MessageType;
//	this->ProcessEvent ( pConstructMessageItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UConsole::SetInitialMusic ( struct FString NewSong )
//{
//	static UFunction* pSetInitialMusic = 0;
//	UConsole_execSetInitialMusic_Parms parms;
//
//	if ( !pSetInitialMusic )
//		pSetInitialMusic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.SetInitialMusic" );
//
//	parms.NewSong = NewSong;
//	this->ProcessEvent ( pSetInitialMusic, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UConsole::SetMusic ( struct FString NewSong )
//{
//	static UFunction* pSetMusic = 0;
//	UConsole_execSetMusic_Parms parms;
//
//	if ( !pSetMusic )
//		pSetMusic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.SetMusic" );
//
//	parms.NewSong = NewSong;
//	this->ProcessEvent ( pSetMusic, &parms, NULL );
//
//}
//
//void UConsole::eventConnectFailure ( struct FString FailCode, struct FString URL )
//{
//	static UFunction* pConnectFailure = 0;
//	UConsole_eventConnectFailure_Parms parms;
//
//	if ( !pConnectFailure )
//		pConnectFailure = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.ConnectFailure" );
//
//	parms.FailCode = FailCode;
//	parms.URL = URL;
//	this->ProcessEvent ( pConnectFailure, &parms, NULL );
//
//}
//
//void UConsole::eventTick ( float Delta )
//{
//	static UFunction* pTick = 0;
//	UConsole_eventTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.Tick" );
//
//	parms.Delta = Delta;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void UConsole::TypingClose (  )
//{
//	static UFunction* pTypingClose = 0;
//	UConsole_execTypingClose_Parms parms;
//
//	if ( !pTypingClose )
//		pTypingClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.TypingClose" );
//
//	this->ProcessEvent ( pTypingClose, &parms, NULL );
//
//}
//
//void UConsole::TypingOpen (  )
//{
//	static UFunction* pTypingOpen = 0;
//	UConsole_execTypingOpen_Parms parms;
//
//	if ( !pTypingOpen )
//		pTypingOpen = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.TypingOpen" );
//
//	this->ProcessEvent ( pTypingOpen, &parms, NULL );
//
//}
//
//bool UConsole::eventKeyEvent ( unsigned char key, unsigned char Action, float Delta )
//{
//	static UFunction* pKeyEvent = 0;
//	UConsole_eventKeyEvent_Parms parms;
//
//	if ( !pKeyEvent )
//		pKeyEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.KeyEvent" );
//
//	parms.key = key;
//	parms.Action = Action;
//	parms.Delta = Delta;
//	this->ProcessEvent ( pKeyEvent, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UConsole::ProcessCheat ( unsigned char key, unsigned char Action )
//{
//	static UFunction* pProcessCheat = 0;
//	UConsole_execProcessCheat_Parms parms;
//
//	if ( !pProcessCheat )
//		pProcessCheat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.ProcessCheat" );
//
//	parms.key = key;
//	parms.Action = Action;
//	this->ProcessEvent ( pProcessCheat, &parms, NULL );
//
//}
//
//bool UConsole::HasCheat ( struct FString str )
//{
//	static UFunction* pHasCheat = 0;
//	UConsole_execHasCheat_Parms parms;
//
//	if ( !pHasCheat )
//		pHasCheat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.HasCheat" );
//
//	parms.str = str;
//	this->ProcessEvent ( pHasCheat, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UConsole::eventMessage ( struct FString Msg, float MsgLife )
//{
//	static UFunction* pMessage = 0;
//	UConsole_eventMessage_Parms parms;
//
//	if ( !pMessage )
//		pMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.Message" );
//
//	parms.Msg = Msg;
//	parms.MsgLife = MsgLife;
//	this->ProcessEvent ( pMessage, &parms, NULL );
//
//}
//
//void UConsole::Chat ( struct FString Msg, float MsgLife, class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pChat = 0;
//	UConsole_execChat_Parms parms;
//
//	if ( !pChat )
//		pChat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.Chat" );
//
//	parms.Msg = Msg;
//	parms.MsgLife = MsgLife;
//	parms.PRI = PRI;
//	this->ProcessEvent ( pChat, &parms, NULL );
//
//}
//
//void UConsole::DelayedConsoleCommand ( struct FString Command )
//{
//	static UFunction* pDelayedConsoleCommand = 0;
//	UConsole_execDelayedConsoleCommand_Parms parms;
//
//	if ( !pDelayedConsoleCommand )
//		pDelayedConsoleCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.DelayedConsoleCommand" );
//
//	parms.Command = Command;
//	this->ProcessEvent ( pDelayedConsoleCommand, &parms, NULL );
//
//}
//
//void UConsole::eventNotifyLevelChange (  )
//{
//	static UFunction* pNotifyLevelChange = 0;
//	UConsole_eventNotifyLevelChange_Parms parms;
//
//	if ( !pNotifyLevelChange )
//		pNotifyLevelChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.NotifyLevelChange" );
//
//	this->ProcessEvent ( pNotifyLevelChange, &parms, NULL );
//
//}
//
//void UConsole::execStopRollingDemo (  )
//{
//	static UFunction* pStopRollingDemo = 0;
//	UConsole_execStopRollingDemo_Parms parms;
//
//	if ( !pStopRollingDemo )
//		pStopRollingDemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.StopRollingDemo" );
//
//	this->ProcessEvent ( pStopRollingDemo, &parms, NULL );
//
//}
//
//void UConsole::execStartRollingDemo (  )
//{
//	static UFunction* pStartRollingDemo = 0;
//	UConsole_execStartRollingDemo_Parms parms;
//
//	if ( !pStartRollingDemo )
//		pStartRollingDemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.StartRollingDemo" );
//
//	this->ProcessEvent ( pStartRollingDemo, &parms, NULL );
//
//}
//
//void UConsole::execConsoleToggle (  )
//{
//	static UFunction* pConsoleToggle = 0;
//	UConsole_execConsoleToggle_Parms parms;
//
//	if ( !pConsoleToggle )
//		pConsoleToggle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.ConsoleToggle" );
//
//	this->ProcessEvent ( pConsoleToggle, &parms, NULL );
//
//}
//
//void UConsole::execConsoleClose (  )
//{
//	static UFunction* pConsoleClose = 0;
//	UConsole_execConsoleClose_Parms parms;
//
//	if ( !pConsoleClose )
//		pConsoleClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.ConsoleClose" );
//
//	this->ProcessEvent ( pConsoleClose, &parms, NULL );
//
//}
//
//void UConsole::execConsoleOpen (  )
//{
//	static UFunction* pConsoleOpen = 0;
//	UConsole_execConsoleOpen_Parms parms;
//
//	if ( !pConsoleOpen )
//		pConsoleOpen = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.ConsoleOpen" );
//
//	this->ProcessEvent ( pConsoleOpen, &parms, NULL );
//
//}
//
//void UConsole::execTeamTalk (  )
//{
//	static UFunction* pTeamTalk = 0;
//	UConsole_execTeamTalk_Parms parms;
//
//	if ( !pTeamTalk )
//		pTeamTalk = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.TeamTalk" );
//
//	this->ProcessEvent ( pTeamTalk, &parms, NULL );
//
//}
//
//void UConsole::execTalk (  )
//{
//	static UFunction* pTalk = 0;
//	UConsole_execTalk_Parms parms;
//
//	if ( !pTalk )
//		pTalk = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.Talk" );
//
//	this->ProcessEvent ( pTalk, &parms, NULL );
//
//}
//
//void UConsole::execType (  )
//{
//	static UFunction* pType = 0;
//	UConsole_execType_Parms parms;
//
//	if ( !pType )
//		pType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.Type" );
//
//	this->ProcessEvent ( pType, &parms, NULL );
//
//}
//
//void UConsole::UnPressButtons (  )
//{
//	static UFunction* pUnPressButtons = 0;
//	UConsole_execUnPressButtons_Parms parms;
//
//	if ( !pUnPressButtons )
//		pUnPressButtons = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.UnPressButtons" );
//
//	this->ProcessEvent ( pUnPressButtons, &parms, NULL );
//
//}
//
//void UConsole::eventNativeConsoleOpen (  )
//{
//	static UFunction* pNativeConsoleOpen = 0;
//	UConsole_eventNativeConsoleOpen_Parms parms;
//
//	if ( !pNativeConsoleOpen )
//		pNativeConsoleOpen = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.NativeConsoleOpen" );
//
//	this->ProcessEvent ( pNativeConsoleOpen, &parms, NULL );
//
//}
//
//void UConsole::eventViewportInitialized (  )
//{
//	static UFunction* pViewportInitialized = 0;
//	UConsole_eventViewportInitialized_Parms parms;
//
//	if ( !pViewportInitialized )
//		pViewportInitialized = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.ViewportInitialized" );
//
//	this->ProcessEvent ( pViewportInitialized, &parms, NULL );
//
//}
//
//void UConsole::eventInitialized (  )
//{
//	static UFunction* pInitialized = 0;
//	UConsole_eventInitialized_Parms parms;
//
//	if ( !pInitialized )
//		pInitialized = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.Initialized" );
//
//	this->ProcessEvent ( pInitialized, &parms, NULL );
//
//}
//
//void UConsole::RecordOn_Exception ( int retCode )
//{
//	static UFunction* pRecordOn_Exception = 0;
//	UConsole_execRecordOn_Exception_Parms parms;
//
//	if ( !pRecordOn_Exception )
//		pRecordOn_Exception = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Console.RecordOn_Exception" );
//
//	parms.retCode = retCode;
//	this->ProcessEvent ( pRecordOn_Exception, &parms, NULL );
//
//}
//
//class TArray< struct FString > AMaplistManagerBase::GetCacheMapList ( struct FString Acronym )
//{
//	static UFunction* pGetCacheMapList = 0;
//	AMaplistManagerBase_execGetCacheMapList_Parms parms;
//
//	if ( !pGetCacheMapList )
//		pGetCacheMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.GetCacheMapList" );
//
//	parms.Acronym = Acronym;
//	this->ProcessEvent ( pGetCacheMapList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManagerBase::FindCacheGameIndex ( struct FString GameType )
//{
//	static UFunction* pFindCacheGameIndex = 0;
//	AMaplistManagerBase_execFindCacheGameIndex_Parms parms;
//
//	if ( !pFindCacheGameIndex )
//		pFindCacheGameIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.FindCacheGameIndex" );
//
//	parms.GameType = GameType;
//	this->ProcessEvent ( pFindCacheGameIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMaplistManagerBase::ShiftMap ( int GameIndex, int RecordIndex, struct FString MapName, int Count )
//{
//	static UFunction* pShiftMap = 0;
//	AMaplistManagerBase_execShiftMap_Parms parms;
//
//	if ( !pShiftMap )
//		pShiftMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.ShiftMap" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	parms.MapName = MapName;
//	parms.Count = Count;
//	this->ProcessEvent ( pShiftMap, &parms, NULL );
//
//}
//
//bool AMaplistManagerBase::SaveMapList ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pSaveMapList = 0;
//	AMaplistManagerBase_execSaveMapList_Parms parms;
//
//	if ( !pSaveMapList )
//		pSaveMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.SaveMapList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pSaveMapList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManagerBase::SaveGame ( int GameIndex )
//{
//	static UFunction* pSaveGame = 0;
//	AMaplistManagerBase_execSaveGame_Parms parms;
//
//	if ( !pSaveGame )
//		pSaveGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.SaveGame" );
//
//	parms.GameIndex = GameIndex;
//	this->ProcessEvent ( pSaveGame, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMaplistManagerBase::MapChange ( struct FString NewMapName )
//{
//	static UFunction* pMapChange = 0;
//	AMaplistManagerBase_execMapChange_Parms parms;
//
//	if ( !pMapChange )
//		pMapChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.MapChange" );
//
//	parms.NewMapName = NewMapName;
//	this->ProcessEvent ( pMapChange, &parms, NULL );
//
//}
//
//bool AMaplistManagerBase::ApplyMapList ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pApplyMapList = 0;
//	AMaplistManagerBase_execApplyMapList_Parms parms;
//
//	if ( !pApplyMapList )
//		pApplyMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.ApplyMapList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pApplyMapList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManagerBase::GetActiveMap ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pGetActiveMap = 0;
//	AMaplistManagerBase_execGetActiveMap_Parms parms;
//
//	if ( !pGetActiveMap )
//		pGetActiveMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.GetActiveMap" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pGetActiveMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManagerBase::SetActiveList ( int GameIndex, int NewActive )
//{
//	static UFunction* pSetActiveList = 0;
//	AMaplistManagerBase_execSetActiveList_Parms parms;
//
//	if ( !pSetActiveList )
//		pSetActiveList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.SetActiveList" );
//
//	parms.GameIndex = GameIndex;
//	parms.NewActive = NewActive;
//	this->ProcessEvent ( pSetActiveList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManagerBase::GetActiveList ( int GameIndex )
//{
//	static UFunction* pGetActiveList = 0;
//	AMaplistManagerBase_execGetActiveList_Parms parms;
//
//	if ( !pGetActiveList )
//		pGetActiveList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.GetActiveList" );
//
//	parms.GameIndex = GameIndex;
//	this->ProcessEvent ( pGetActiveList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > AMaplistManagerBase::GetMapList ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pGetMapList = 0;
//	AMaplistManagerBase_execGetMapList_Parms parms;
//
//	if ( !pGetMapList )
//		pGetMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.GetMapList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pGetMapList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > AMaplistManagerBase::GetCurrentMapRotation (  )
//{
//	static UFunction* pGetCurrentMapRotation = 0;
//	AMaplistManagerBase_execGetCurrentMapRotation_Parms parms;
//
//	if ( !pGetCurrentMapRotation )
//		pGetCurrentMapRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.GetCurrentMapRotation" );
//
//	this->ProcessEvent ( pGetCurrentMapRotation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > AMaplistManagerBase::GetMapListNames ( int GameIndex )
//{
//	static UFunction* pGetMapListNames = 0;
//	AMaplistManagerBase_execGetMapListNames_Parms parms;
//
//	if ( !pGetMapListNames )
//		pGetMapListNames = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.GetMapListNames" );
//
//	parms.GameIndex = GameIndex;
//	this->ProcessEvent ( pGetMapListNames, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AMaplistManagerBase::GetMapListTitle ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pGetMapListTitle = 0;
//	AMaplistManagerBase_execGetMapListTitle_Parms parms;
//
//	if ( !pGetMapListTitle )
//		pGetMapListTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.GetMapListTitle" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pGetMapListTitle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManagerBase::GetRecordIndex ( int GameIndex, struct FString MapListName )
//{
//	static UFunction* pGetRecordIndex = 0;
//	AMaplistManagerBase_execGetRecordIndex_Parms parms;
//
//	if ( !pGetRecordIndex )
//		pGetRecordIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.GetRecordIndex" );
//
//	parms.GameIndex = GameIndex;
//	parms.MapListName = MapListName;
//	this->ProcessEvent ( pGetRecordIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManagerBase::GetMapIndex ( int GameIndex, int RecordIndex, struct FString MapName )
//{
//	static UFunction* pGetMapIndex = 0;
//	AMaplistManagerBase_execGetMapIndex_Parms parms;
//
//	if ( !pGetMapIndex )
//		pGetMapIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.GetMapIndex" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	parms.MapName = MapName;
//	this->ProcessEvent ( pGetMapIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManagerBase::GetGameIndex ( struct FString GameType )
//{
//	static UFunction* pGetGameIndex = 0;
//	AMaplistManagerBase_execGetGameIndex_Parms parms;
//
//	if ( !pGetGameIndex )
//		pGetGameIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.GetGameIndex" );
//
//	parms.GameType = GameType;
//	this->ProcessEvent ( pGetGameIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManagerBase::RemoveMap ( int GameIndex, int MapIndex, struct FString MapName )
//{
//	static UFunction* pRemoveMap = 0;
//	AMaplistManagerBase_execRemoveMap_Parms parms;
//
//	if ( !pRemoveMap )
//		pRemoveMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.RemoveMap" );
//
//	parms.GameIndex = GameIndex;
//	parms.MapIndex = MapIndex;
//	parms.MapName = MapName;
//	this->ProcessEvent ( pRemoveMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManagerBase::AddMap ( int GameIndex, int RecordIndex, struct FString MapName )
//{
//	static UFunction* pAddMap = 0;
//	AMaplistManagerBase_execAddMap_Parms parms;
//
//	if ( !pAddMap )
//		pAddMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.AddMap" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	parms.MapName = MapName;
//	this->ProcessEvent ( pAddMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManagerBase::ClearList ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pClearList = 0;
//	AMaplistManagerBase_execClearList_Parms parms;
//
//	if ( !pClearList )
//		pClearList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.ClearList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pClearList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManagerBase::RenameList ( int GameIndex, int RecordIndex, struct FString NewName )
//{
//	static UFunction* pRenameList = 0;
//	AMaplistManagerBase_execRenameList_Parms parms;
//
//	if ( !pRenameList )
//		pRenameList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.RenameList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	parms.NewName = NewName;
//	this->ProcessEvent ( pRenameList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMaplistManagerBase::ResetList ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pResetList = 0;
//	AMaplistManagerBase_execResetList_Parms parms;
//
//	if ( !pResetList )
//		pResetList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.ResetList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pResetList, &parms, NULL );
//
//}
//
//void AMaplistManagerBase::ResetGame ( int GameIndex )
//{
//	static UFunction* pResetGame = 0;
//	AMaplistManagerBase_execResetGame_Parms parms;
//
//	if ( !pResetGame )
//		pResetGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.ResetGame" );
//
//	parms.GameIndex = GameIndex;
//	this->ProcessEvent ( pResetGame, &parms, NULL );
//
//}
//
//int AMaplistManagerBase::RemoveList ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pRemoveList = 0;
//	AMaplistManagerBase_execRemoveList_Parms parms;
//
//	if ( !pRemoveList )
//		pRemoveList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.RemoveList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pRemoveList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManagerBase::AddList ( struct FString GameType, struct FString NewName, class TArray< struct FString > Maps )
//{
//	static UFunction* pAddList = 0;
//	AMaplistManagerBase_execAddList_Parms parms;
//
//	if ( !pAddList )
//		pAddList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.AddList" );
//
//	parms.GameType = GameType;
//	parms.NewName = NewName;
//	parms.Maps = Maps;
//	this->ProcessEvent ( pAddList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManagerBase::ValidGameIndex ( int i )
//{
//	static UFunction* pValidGameIndex = 0;
//	AMaplistManagerBase_execValidGameIndex_Parms parms;
//
//	if ( !pValidGameIndex )
//		pValidGameIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.ValidGameIndex" );
//
//	parms.i = i;
//	this->ProcessEvent ( pValidGameIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManagerBase::ValidCacheGameIndex ( int i )
//{
//	static UFunction* pValidCacheGameIndex = 0;
//	AMaplistManagerBase_execValidCacheGameIndex_Parms parms;
//
//	if ( !pValidCacheGameIndex )
//		pValidCacheGameIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.ValidCacheGameIndex" );
//
//	parms.i = i;
//	this->ProcessEvent ( pValidCacheGameIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManagerBase::ValidName ( struct FString S )
//{
//	static UFunction* pValidName = 0;
//	AMaplistManagerBase_execValidName_Parms parms;
//
//	if ( !pValidName )
//		pValidName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.ValidName" );
//
//	parms.S = S;
//	this->ProcessEvent ( pValidName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManagerBase::ValidGameType ( struct FString GameType )
//{
//	static UFunction* pValidGameType = 0;
//	AMaplistManagerBase_execValidGameType_Parms parms;
//
//	if ( !pValidGameType )
//		pValidGameType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManagerBase.ValidGameType" );
//
//	parms.GameType = GameType;
//	this->ProcessEvent ( pValidGameType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AFluidSurfaceInfo::Touch ( class AActor* Other )
//{
//	static UFunction* pTouch = 0;
//	AFluidSurfaceInfo_execTouch_Parms parms;
//
//	if ( !pTouch )
//		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.FluidSurfaceInfo.Touch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTouch, &parms, NULL );
//
//}
//
//void AFluidSurfaceInfo::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pTakeDamage = 0;
//	AFluidSurfaceInfo_execTakeDamage_Parms parms;
//
//	if ( !pTakeDamage )
//		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.FluidSurfaceInfo.TakeDamage" );
//
//	parms.Damage = Damage;
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.Momentum = Momentum;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pTakeDamage, &parms, NULL );
//
//}
//
//void AFluidSurfaceInfo::Pling ( struct FVector Position, float Strength, float Radius )
//{
//	static UFunction* pPling = 0;
//	AFluidSurfaceInfo_execPling_Parms parms;
//
//	if ( !pPling )
//		pPling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.FluidSurfaceInfo.Pling" );
//
//	parms.Position = Position;
//	parms.Strength = Strength;
//	parms.Radius = Radius;
//	this->ProcessEvent ( pPling, &parms, NULL );
//
//}
//
//class TArray< struct FString > UAdminBase::SplitParams ( struct FString params )
//{
//	static UFunction* pSplitParams = 0;
//	UAdminBase_execSplitParams_Parms parms;
//
//	if ( !pSplitParams )
//		pSplitParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.SplitParams" );
//
//	parms.params = params;
//	this->ProcessEvent ( pSplitParams, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UAdminBase::IsNumeric ( struct FString Param, bool bPositiveOnly )
//{
//	static UFunction* pIsNumeric = 0;
//	UAdminBase_execIsNumeric_Parms parms;
//
//	if ( !pIsNumeric )
//		pIsNumeric = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.IsNumeric" );
//
//	parms.Param = Param;
//	parms.bPositiveOnly = bPositiveOnly;
//	this->ProcessEvent ( pIsNumeric, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UAdminBase::MaskedCompare ( struct FString SettingName, struct FString Mask )
//{
//	static UFunction* pMaskedCompare = 0;
//	UAdminBase_execMaskedCompare_Parms parms;
//
//	if ( !pMaskedCompare )
//		pMaskedCompare = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.MaskedCompare" );
//
//	parms.SettingName = SettingName;
//	parms.Mask = Mask;
//	this->ProcessEvent ( pMaskedCompare, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UAdminBase::SendComplexMsg ( class TArray< struct FString > Arr, struct FString Title )
//{
//	static UFunction* pSendComplexMsg = 0;
//	UAdminBase_execSendComplexMsg_Parms parms;
//
//	if ( !pSendComplexMsg )
//		pSendComplexMsg = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.SendComplexMsg" );
//
//	parms.Arr = Arr;
//	parms.Title = Title;
//	this->ProcessEvent ( pSendComplexMsg, &parms, NULL );
//
//}
//
//struct FString UAdminBase::FindGameType ( struct FString GameType )
//{
//	static UFunction* pFindGameType = 0;
//	UAdminBase_execFindGameType_Parms parms;
//
//	if ( !pFindGameType )
//		pFindGameType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.FindGameType" );
//
//	parms.GameType = GameType;
//	this->ProcessEvent ( pFindGameType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UAdminBase::CanPerform ( struct FString priv )
//{
//	static UFunction* pCanPerform = 0;
//	UAdminBase_execCanPerform_Parms parms;
//
//	if ( !pCanPerform )
//		pCanPerform = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.CanPerform" );
//
//	parms.priv = priv;
//	this->ProcessEvent ( pCanPerform, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UAdminBase::execSwitch ( struct FString URL )
//{
//	static UFunction* pSwitch = 0;
//	UAdminBase_execSwitch_Parms parms;
//
//	if ( !pSwitch )
//		pSwitch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.Switch" );
//
//	parms.URL = URL;
//	this->ProcessEvent ( pSwitch, &parms, NULL );
//
//}
//
//void UAdminBase::execMapList ( struct FString Cmd, struct FString Extra )
//{
//	static UFunction* pMapList = 0;
//	UAdminBase_execMapList_Parms parms;
//
//	if ( !pMapList )
//		pMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.MapList" );
//
//	parms.Cmd = Cmd;
//	parms.Extra = Extra;
//	this->ProcessEvent ( pMapList, &parms, NULL );
//
//}
//
//void UAdminBase::execMap ( struct FString Cmd )
//{
//	static UFunction* pMap = 0;
//	UAdminBase_execMap_Parms parms;
//
//	if ( !pMap )
//		pMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.Map" );
//
//	parms.Cmd = Cmd;
//	this->ProcessEvent ( pMap, &parms, NULL );
//
//}
//
//void UAdminBase::execNextMap (  )
//{
//	static UFunction* pNextMap = 0;
//	UAdminBase_execNextMap_Parms parms;
//
//	if ( !pNextMap )
//		pNextMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.NextMap" );
//
//	this->ProcessEvent ( pNextMap, &parms, NULL );
//
//}
//
//void UAdminBase::execRestartMap (  )
//{
//	static UFunction* pRestartMap = 0;
//	UAdminBase_execRestartMap_Parms parms;
//
//	if ( !pRestartMap )
//		pRestartMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.RestartMap" );
//
//	this->ProcessEvent ( pRestartMap, &parms, NULL );
//
//}
//
//void UAdminBase::execKickBan ( struct FString S )
//{
//	static UFunction* pKickBan = 0;
//	UAdminBase_execKickBan_Parms parms;
//
//	if ( !pKickBan )
//		pKickBan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.KickBan" );
//
//	parms.S = S;
//	this->ProcessEvent ( pKickBan, &parms, NULL );
//
//}
//
//void UAdminBase::execKick ( struct FString Cmd, struct FString Extra )
//{
//	static UFunction* pKick = 0;
//	UAdminBase_execKick_Parms parms;
//
//	if ( !pKick )
//		pKick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.Kick" );
//
//	parms.Cmd = Cmd;
//	parms.Extra = Extra;
//	this->ProcessEvent ( pKick, &parms, NULL );
//
//}
//
//void UAdminBase::execPlayerList (  )
//{
//	static UFunction* pPlayerList = 0;
//	UAdminBase_execPlayerList_Parms parms;
//
//	if ( !pPlayerList )
//		pPlayerList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.PlayerList" );
//
//	this->ProcessEvent ( pPlayerList, &parms, NULL );
//
//}
//
//void UAdminBase::RestartCurrentMap (  )
//{
//	static UFunction* pRestartCurrentMap = 0;
//	UAdminBase_execRestartCurrentMap_Parms parms;
//
//	if ( !pRestartCurrentMap )
//		pRestartCurrentMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.RestartCurrentMap" );
//
//	this->ProcessEvent ( pRestartCurrentMap, &parms, NULL );
//
//}
//
//void UAdminBase::MaplistCommand ( struct FString Cmd, struct FString Extra )
//{
//	static UFunction* pMaplistCommand = 0;
//	UAdminBase_execMaplistCommand_Parms parms;
//
//	if ( !pMaplistCommand )
//		pMaplistCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.MaplistCommand" );
//
//	parms.Cmd = Cmd;
//	parms.Extra = Extra;
//	this->ProcessEvent ( pMaplistCommand, &parms, NULL );
//
//}
//
//class TArray< struct FString > UAdminBase::GetMapListNames ( struct FString GameType )
//{
//	static UFunction* pGetMapListNames = 0;
//	UAdminBase_execGetMapListNames_Parms parms;
//
//	if ( !pGetMapListNames )
//		pGetMapListNames = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.GetMapListNames" );
//
//	parms.GameType = GameType;
//	this->ProcessEvent ( pGetMapListNames, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UAdminBase::ShowCurrentMapList (  )
//{
//	static UFunction* pShowCurrentMapList = 0;
//	UAdminBase_execShowCurrentMapList_Parms parms;
//
//	if ( !pShowCurrentMapList )
//		pShowCurrentMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.ShowCurrentMapList" );
//
//	this->ProcessEvent ( pShowCurrentMapList, &parms, NULL );
//
//}
//
//void UAdminBase::GoToNextMap (  )
//{
//	static UFunction* pGoToNextMap = 0;
//	UAdminBase_execGoToNextMap_Parms parms;
//
//	if ( !pGoToNextMap )
//		pGoToNextMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.GoToNextMap" );
//
//	this->ProcessEvent ( pGoToNextMap, &parms, NULL );
//
//}
//
//void UAdminBase::DoSwitch ( struct FString URL )
//{
//	static UFunction* pDoSwitch = 0;
//	UAdminBase_execDoSwitch_Parms parms;
//
//	if ( !pDoSwitch )
//		pDoSwitch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.DoSwitch" );
//
//	parms.URL = URL;
//	this->ProcessEvent ( pDoSwitch, &parms, NULL );
//
//}
//
//void UAdminBase::DoLogout (  )
//{
//	static UFunction* pDoLogout = 0;
//	UAdminBase_execDoLogout_Parms parms;
//
//	if ( !pDoLogout )
//		pDoLogout = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.DoLogout" );
//
//	this->ProcessEvent ( pDoLogout, &parms, NULL );
//
//}
//
//void UAdminBase::DoLogin ( struct FString UserName, struct FString Password )
//{
//	static UFunction* pDoLogin = 0;
//	UAdminBase_execDoLogin_Parms parms;
//
//	if ( !pDoLogin )
//		pDoLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.DoLogin" );
//
//	parms.UserName = UserName;
//	parms.Password = Password;
//	this->ProcessEvent ( pDoLogin, &parms, NULL );
//
//}
//
//void UAdminBase::Created (  )
//{
//	static UFunction* pCreated = 0;
//	UAdminBase_execCreated_Parms parms;
//
//	if ( !pCreated )
//		pCreated = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AdminBase.Created" );
//
//	this->ProcessEvent ( pCreated, &parms, NULL );
//
//}
//
//unsigned char UPlayerInput::CheckForDoubleClickMove ( float DeltaTime )
//{
//	static UFunction* pCheckForDoubleClickMove = 0;
//	UPlayerInput_execCheckForDoubleClickMove_Parms parms;
//
//	if ( !pCheckForDoubleClickMove )
//		pCheckForDoubleClickMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerInput.CheckForDoubleClickMove" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pCheckForDoubleClickMove, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UPlayerInput::ChangeSnapView ( bool B )
//{
//	static UFunction* pChangeSnapView = 0;
//	UPlayerInput_execChangeSnapView_Parms parms;
//
//	if ( !pChangeSnapView )
//		pChangeSnapView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerInput.ChangeSnapView" );
//
//	parms.B = B;
//	this->ProcessEvent ( pChangeSnapView, &parms, NULL );
//
//}
//
//void UPlayerInput::InvertMouse ( struct FString Invert )
//{
//	static UFunction* pInvertMouse = 0;
//	UPlayerInput_execInvertMouse_Parms parms;
//
//	if ( !pInvertMouse )
//		pInvertMouse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerInput.InvertMouse" );
//
//	parms.Invert = Invert;
//	this->ProcessEvent ( pInvertMouse, &parms, NULL );
//
//}
//
//void UPlayerInput::UpdateSmoothing ( int Mode )
//{
//	static UFunction* pUpdateSmoothing = 0;
//	UPlayerInput_execUpdateSmoothing_Parms parms;
//
//	if ( !pUpdateSmoothing )
//		pUpdateSmoothing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerInput.UpdateSmoothing" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pUpdateSmoothing, &parms, NULL );
//
//}
//
//void UPlayerInput::UpdateAccel ( float f )
//{
//	static UFunction* pUpdateAccel = 0;
//	UPlayerInput_execUpdateAccel_Parms parms;
//
//	if ( !pUpdateAccel )
//		pUpdateAccel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerInput.UpdateAccel" );
//
//	parms.f = f;
//	this->ProcessEvent ( pUpdateAccel, &parms, NULL );
//
//}
//
//void UPlayerInput::UpdateSensitivityForAim ( bool bZoom )
//{
//	static UFunction* pUpdateSensitivityForAim = 0;
//	UPlayerInput_execUpdateSensitivityForAim_Parms parms;
//
//	if ( !pUpdateSensitivityForAim )
//		pUpdateSensitivityForAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerInput.UpdateSensitivityForAim" );
//
//	parms.bZoom = bZoom;
//	this->ProcessEvent ( pUpdateSensitivityForAim, &parms, NULL );
//
//}
//
//void UPlayerInput::UpdateSensitivity ( float f, bool bZooming )
//{
//	static UFunction* pUpdateSensitivity = 0;
//	UPlayerInput_execUpdateSensitivity_Parms parms;
//
//	if ( !pUpdateSensitivity )
//		pUpdateSensitivity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerInput.UpdateSensitivity" );
//
//	parms.f = f;
//	parms.bZooming = bZooming;
//	this->ProcessEvent ( pUpdateSensitivity, &parms, NULL );
//
//}
//
//float UPlayerInput::SmoothMouse ( float aMouse, float DeltaTime, int Index, unsigned char* SampleCount )
//{
//	static UFunction* pSmoothMouse = 0;
//	UPlayerInput_execSmoothMouse_Parms parms;
//
//	if ( !pSmoothMouse )
//		pSmoothMouse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerInput.SmoothMouse" );
//
//	parms.aMouse = aMouse;
//	parms.DeltaTime = DeltaTime;
//	parms.Index = Index;
//	this->ProcessEvent ( pSmoothMouse, &parms, NULL );
//
//	*SampleCount = parms.SampleCount;
//	return parms.ReturnValue;
//}
//
//float UPlayerInput::AccelerateMouse ( float aMouse )
//{
//	static UFunction* pAccelerateMouse = 0;
//	UPlayerInput_execAccelerateMouse_Parms parms;
//
//	if ( !pAccelerateMouse )
//		pAccelerateMouse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerInput.AccelerateMouse" );
//
//	parms.aMouse = aMouse;
//	this->ProcessEvent ( pAccelerateMouse, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UPlayerInput::execSetSmoothingStrength ( float f )
//{
//	static UFunction* pSetSmoothingStrength = 0;
//	UPlayerInput_execSetSmoothingStrength_Parms parms;
//
//	if ( !pSetSmoothingStrength )
//		pSetSmoothingStrength = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerInput.SetSmoothingStrength" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetSmoothingStrength, &parms, NULL );
//
//}
//
//void UPlayerInput::execSetSmoothingMode ( unsigned char B )
//{
//	static UFunction* pSetSmoothingMode = 0;
//	UPlayerInput_execSetSmoothingMode_Parms parms;
//
//	if ( !pSetSmoothingMode )
//		pSetSmoothingMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerInput.SetSmoothingMode" );
//
//	parms.B = B;
//	this->ProcessEvent ( pSetSmoothingMode, &parms, NULL );
//
//}
//
//void UPlayerInput::eventPlayerInput ( float DeltaTime )
//{
//	static UFunction* pPlayerInput = 0;
//	UPlayerInput_eventPlayerInput_Parms parms;
//
//	if ( !pPlayerInput )
//		pPlayerInput = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerInput.PlayerInput" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pPlayerInput, &parms, NULL );
//
//}
//
//bool UPlayerInput::InvertLook (  )
//{
//	static UFunction* pInvertLook = 0;
//	UPlayerInput_execInvertLook_Parms parms;
//
//	if ( !pInvertLook )
//		pInvertLook = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerInput.InvertLook" );
//
//	this->ProcessEvent ( pInvertLook, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UCheatManager::execShowAllPlayers (  )
//{
//	static UFunction* pShowAllPlayers = 0;
//	UCheatManager_execShowAllPlayers_Parms parms;
//
//	if ( !pShowAllPlayers )
//		pShowAllPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ShowAllPlayers" );
//
//	this->ProcessEvent ( pShowAllPlayers, &parms, NULL );
//
//}
//
//void UCheatManager::execruler (  )
//{
//	static UFunction* pruler = 0;
//	UCheatManager_execruler_Parms parms;
//
//	if ( !pruler )
//		pruler = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ruler" );
//
//	this->ProcessEvent ( pruler, &parms, NULL );
//
//}
//
//void UCheatManager::execDisableNextObjective (  )
//{
//	static UFunction* pDisableNextObjective = 0;
//	UCheatManager_execDisableNextObjective_Parms parms;
//
//	if ( !pDisableNextObjective )
//		pDisableNextObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.DisableNextObjective" );
//
//	this->ProcessEvent ( pDisableNextObjective, &parms, NULL );
//
//}
//
//void UCheatManager::execWeakObjectives (  )
//{
//	static UFunction* pWeakObjectives = 0;
//	UCheatManager_execWeakObjectives_Parms parms;
//
//	if ( !pWeakObjectives )
//		pWeakObjectives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.WeakObjectives" );
//
//	this->ProcessEvent ( pWeakObjectives, &parms, NULL );
//
//}
//
//void UCheatManager::ReportCheat ( struct FString cheat )
//{
//	static UFunction* pReportCheat = 0;
//	UCheatManager_execReportCheat_Parms parms;
//
//	if ( !pReportCheat )
//		pReportCheat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ReportCheat" );
//
//	parms.cheat = cheat;
//	this->ProcessEvent ( pReportCheat, &parms, NULL );
//
//}
//
//bool UCheatManager::areCheatsEnabled (  )
//{
//	static UFunction* pareCheatsEnabled = 0;
//	UCheatManager_execareCheatsEnabled_Parms parms;
//
//	if ( !pareCheatsEnabled )
//		pareCheatsEnabled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.areCheatsEnabled" );
//
//	this->ProcessEvent ( pareCheatsEnabled, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UCheatManager::execEnableCheats (  )
//{
//	static UFunction* pEnableCheats = 0;
//	UCheatManager_execEnableCheats_Parms parms;
//
//	if ( !pEnableCheats )
//		pEnableCheats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.EnableCheats" );
//
//	this->ProcessEvent ( pEnableCheats, &parms, NULL );
//
//}
//
//void UCheatManager::execWinMatch (  )
//{
//	static UFunction* pWinMatch = 0;
//	UCheatManager_execWinMatch_Parms parms;
//
//	if ( !pWinMatch )
//		pWinMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.WinMatch" );
//
//	this->ProcessEvent ( pWinMatch, &parms, NULL );
//
//}
//
//void UCheatManager::execJumpMatch ( int ladderrung )
//{
//	static UFunction* pJumpMatch = 0;
//	UCheatManager_execJumpMatch_Parms parms;
//
//	if ( !pJumpMatch )
//		pJumpMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.JumpMatch" );
//
//	parms.ladderrung = ladderrung;
//	this->ProcessEvent ( pJumpMatch, &parms, NULL );
//
//}
//
//void UCheatManager::execSkipMatch (  )
//{
//	static UFunction* pSkipMatch = 0;
//	UCheatManager_execSkipMatch_Parms parms;
//
//	if ( !pSkipMatch )
//		pSkipMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.SkipMatch" );
//
//	this->ProcessEvent ( pSkipMatch, &parms, NULL );
//
//}
//
//void UCheatManager::execAllWeapons (  )
//{
//	static UFunction* pAllWeapons = 0;
//	UCheatManager_execAllWeapons_Parms parms;
//
//	if ( !pAllWeapons )
//		pAllWeapons = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.AllWeapons" );
//
//	this->ProcessEvent ( pAllWeapons, &parms, NULL );
//
//}
//
//void UCheatManager::execLoaded (  )
//{
//	static UFunction* pLoaded = 0;
//	UCheatManager_execLoaded_Parms parms;
//
//	if ( !pLoaded )
//		pLoaded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.Loaded" );
//
//	this->ProcessEvent ( pLoaded, &parms, NULL );
//
//}
//
//void UCheatManager::execViewClass ( class UClass* aClass, bool bQuiet, bool bCheat )
//{
//	static UFunction* pViewClass = 0;
//	UCheatManager_execViewClass_Parms parms;
//
//	if ( !pViewClass )
//		pViewClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ViewClass" );
//
//	parms.aClass = aClass;
//	parms.bQuiet = bQuiet;
//	parms.bCheat = bCheat;
//	this->ProcessEvent ( pViewClass, &parms, NULL );
//
//}
//
//void UCheatManager::execViewTurret (  )
//{
//	static UFunction* pViewTurret = 0;
//	UCheatManager_execViewTurret_Parms parms;
//
//	if ( !pViewTurret )
//		pViewTurret = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ViewTurret" );
//
//	this->ProcessEvent ( pViewTurret, &parms, NULL );
//
//}
//
//void UCheatManager::ViewNext ( struct FName nameController )
//{
//	static UFunction* pViewNext = 0;
//	UCheatManager_execViewNext_Parms parms;
//
//	if ( !pViewNext )
//		pViewNext = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ViewNext" );
//
//	parms.nameController = nameController;
//	this->ProcessEvent ( pViewNext, &parms, NULL );
//
//}
//
//void UCheatManager::execViewBot (  )
//{
//	static UFunction* pViewBot = 0;
//	UCheatManager_execViewBot_Parms parms;
//
//	if ( !pViewBot )
//		pViewBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ViewBot" );
//
//	this->ProcessEvent ( pViewBot, &parms, NULL );
//
//}
//
//void UCheatManager::execVAI (  )
//{
//	static UFunction* pVAI = 0;
//	UCheatManager_execVAI_Parms parms;
//
//	if ( !pVAI )
//		pVAI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.VAI" );
//
//	this->ProcessEvent ( pVAI, &parms, NULL );
//
//}
//
//void UCheatManager::execVHD (  )
//{
//	static UFunction* pVHD = 0;
//	UCheatManager_execVHD_Parms parms;
//
//	if ( !pVHD )
//		pVHD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.VHD" );
//
//	this->ProcessEvent ( pVHD, &parms, NULL );
//
//}
//
//void UCheatManager::execVH (  )
//{
//	static UFunction* pVH = 0;
//	UCheatManager_execVH_Parms parms;
//
//	if ( !pVH )
//		pVH = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.VH" );
//
//	this->ProcessEvent ( pVH, &parms, NULL );
//
//}
//
//void UCheatManager::execViewFlag (  )
//{
//	static UFunction* pViewFlag = 0;
//	UCheatManager_execViewFlag_Parms parms;
//
//	if ( !pViewFlag )
//		pViewFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ViewFlag" );
//
//	this->ProcessEvent ( pViewFlag, &parms, NULL );
//
//}
//
//void UCheatManager::execViewActor ( struct FName ActorName )
//{
//	static UFunction* pViewActor = 0;
//	UCheatManager_execViewActor_Parms parms;
//
//	if ( !pViewActor )
//		pViewActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ViewActor" );
//
//	parms.ActorName = ActorName;
//	this->ProcessEvent ( pViewActor, &parms, NULL );
//
//}
//
//void UCheatManager::execViewPlayer ( struct FString S )
//{
//	static UFunction* pViewPlayer = 0;
//	UCheatManager_execViewPlayer_Parms parms;
//
//	if ( !pViewPlayer )
//		pViewPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ViewPlayer" );
//
//	parms.S = S;
//	this->ProcessEvent ( pViewPlayer, &parms, NULL );
//
//}
//
//void UCheatManager::execViewSelf ( bool bQuiet )
//{
//	static UFunction* pViewSelf = 0;
//	UCheatManager_execViewSelf_Parms parms;
//
//	if ( !pViewSelf )
//		pViewSelf = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ViewSelf" );
//
//	parms.bQuiet = bQuiet;
//	this->ProcessEvent ( pViewSelf, &parms, NULL );
//
//}
//
//void UCheatManager::execRememberSpot (  )
//{
//	static UFunction* pRememberSpot = 0;
//	UCheatManager_execRememberSpot_Parms parms;
//
//	if ( !pRememberSpot )
//		pRememberSpot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.RememberSpot" );
//
//	this->ProcessEvent ( pRememberSpot, &parms, NULL );
//
//}
//
//void UCheatManager::execCheatView ( class UClass* aClass, bool bQuiet )
//{
//	static UFunction* pCheatView = 0;
//	UCheatManager_execCheatView_Parms parms;
//
//	if ( !pCheatView )
//		pCheatView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.CheatView" );
//
//	parms.aClass = aClass;
//	parms.bQuiet = bQuiet;
//	this->ProcessEvent ( pCheatView, &parms, NULL );
//
//}
//
//void UCheatManager::execClearAllDebugLines (  )
//{
//	static UFunction* pClearAllDebugLines = 0;
//	UCheatManager_execClearAllDebugLines_Parms parms;
//
//	if ( !pClearAllDebugLines )
//		pClearAllDebugLines = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ClearAllDebugLines" );
//
//	this->ProcessEvent ( pClearAllDebugLines, &parms, NULL );
//
//}
//
//void UCheatManager::execFreezeAll (  )
//{
//	static UFunction* pFreezeAll = 0;
//	UCheatManager_execFreezeAll_Parms parms;
//
//	if ( !pFreezeAll )
//		pFreezeAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.FreezeAll" );
//
//	this->ProcessEvent ( pFreezeAll, &parms, NULL );
//
//}
//
//void UCheatManager::execPlayersOnly (  )
//{
//	static UFunction* pPlayersOnly = 0;
//	UCheatManager_execPlayersOnly_Parms parms;
//
//	if ( !pPlayersOnly )
//		pPlayersOnly = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.PlayersOnly" );
//
//	this->ProcessEvent ( pPlayersOnly, &parms, NULL );
//
//}
//
//void UCheatManager::execSummon ( struct FString ClassName )
//{
//	static UFunction* pSummon = 0;
//	UCheatManager_execSummon_Parms parms;
//
//	if ( !pSummon )
//		pSummon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.Summon" );
//
//	parms.ClassName = ClassName;
//	this->ProcessEvent ( pSummon, &parms, NULL );
//
//}
//
//void UCheatManager::execAvatar ( struct FString ClassName )
//{
//	static UFunction* pAvatar = 0;
//	UCheatManager_execAvatar_Parms parms;
//
//	if ( !pAvatar )
//		pAvatar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.Avatar" );
//
//	parms.ClassName = ClassName;
//	this->ProcessEvent ( pAvatar, &parms, NULL );
//
//}
//
//void UCheatManager::execKillPawns (  )
//{
//	static UFunction* pKillPawns = 0;
//	UCheatManager_execKillPawns_Parms parms;
//
//	if ( !pKillPawns )
//		pKillPawns = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.KillPawns" );
//
//	this->ProcessEvent ( pKillPawns, &parms, NULL );
//
//}
//
//void UCheatManager::execSetSpeed ( float f )
//{
//	static UFunction* pSetSpeed = 0;
//	UCheatManager_execSetSpeed_Parms parms;
//
//	if ( !pSetSpeed )
//		pSetSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.SetSpeed" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetSpeed, &parms, NULL );
//
//}
//
//void UCheatManager::execSetPriction ( float f )
//{
//	static UFunction* pSetPriction = 0;
//	UCheatManager_execSetPriction_Parms parms;
//
//	if ( !pSetPriction )
//		pSetPriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.SetPriction" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetPriction, &parms, NULL );
//
//}
//
//void UCheatManager::execSetGravity ( float f )
//{
//	static UFunction* pSetGravity = 0;
//	UCheatManager_execSetGravity_Parms parms;
//
//	if ( !pSetGravity )
//		pSetGravity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.SetGravity" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetGravity, &parms, NULL );
//
//}
//
//void UCheatManager::execSetJumpLandDrop ( float f )
//{
//	static UFunction* pSetJumpLandDrop = 0;
//	UCheatManager_execSetJumpLandDrop_Parms parms;
//
//	if ( !pSetJumpLandDrop )
//		pSetJumpLandDrop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.SetJumpLandDrop" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetJumpLandDrop, &parms, NULL );
//
//}
//
//void UCheatManager::execSetJumpZ ( float f )
//{
//	static UFunction* pSetJumpZ = 0;
//	UCheatManager_execSetJumpZ_Parms parms;
//
//	if ( !pSetJumpZ )
//		pSetJumpZ = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.SetJumpZ" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetJumpZ, &parms, NULL );
//
//}
//
//void UCheatManager::doSlomo ( float t )
//{
//	static UFunction* pdoSlomo = 0;
//	UCheatManager_execdoSlomo_Parms parms;
//
//	if ( !pdoSlomo )
//		pdoSlomo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.doSlomo" );
//
//	parms.t = t;
//	this->ProcessEvent ( pdoSlomo, &parms, NULL );
//
//}
//
//void UCheatManager::execSloMo ( float t )
//{
//	static UFunction* pSloMo = 0;
//	UCheatManager_execSloMo_Parms parms;
//
//	if ( !pSloMo )
//		pSloMo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.SloMo" );
//
//	parms.t = t;
//	this->ProcessEvent ( pSloMo, &parms, NULL );
//
//}
//
//void UCheatManager::execGod (  )
//{
//	static UFunction* pGod = 0;
//	UCheatManager_execGod_Parms parms;
//
//	if ( !pGod )
//		pGod = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.God" );
//
//	this->ProcessEvent ( pGod, &parms, NULL );
//
//}
//
//void UCheatManager::execPhil (  )
//{
//	static UFunction* pPhil = 0;
//	UCheatManager_execPhil_Parms parms;
//
//	if ( !pPhil )
//		pPhil = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.Phil" );
//
//	this->ProcessEvent ( pPhil, &parms, NULL );
//
//}
//
//void UCheatManager::execInvisible ( bool B )
//{
//	static UFunction* pInvisible = 0;
//	UCheatManager_execInvisible_Parms parms;
//
//	if ( !pInvisible )
//		pInvisible = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.Invisible" );
//
//	parms.B = B;
//	this->ProcessEvent ( pInvisible, &parms, NULL );
//
//}
//
//void UCheatManager::execAllAmmo (  )
//{
//	static UFunction* pAllAmmo = 0;
//	UCheatManager_execAllAmmo_Parms parms;
//
//	if ( !pAllAmmo )
//		pAllAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.AllAmmo" );
//
//	this->ProcessEvent ( pAllAmmo, &parms, NULL );
//
//}
//
//void UCheatManager::execGhost (  )
//{
//	static UFunction* pGhost = 0;
//	UCheatManager_execGhost_Parms parms;
//
//	if ( !pGhost )
//		pGhost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.Ghost" );
//
//	this->ProcessEvent ( pGhost, &parms, NULL );
//
//}
//
//void UCheatManager::execWalk (  )
//{
//	static UFunction* pWalk = 0;
//	UCheatManager_execWalk_Parms parms;
//
//	if ( !pWalk )
//		pWalk = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.Walk" );
//
//	this->ProcessEvent ( pWalk, &parms, NULL );
//
//}
//
//void UCheatManager::execFly (  )
//{
//	static UFunction* pFly = 0;
//	UCheatManager_execFly_Parms parms;
//
//	if ( !pFly )
//		pFly = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.Fly" );
//
//	this->ProcessEvent ( pFly, &parms, NULL );
//
//}
//
//void UCheatManager::execAmphibious (  )
//{
//	static UFunction* pAmphibious = 0;
//	UCheatManager_execAmphibious_Parms parms;
//
//	if ( !pAmphibious )
//		pAmphibious = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.Amphibious" );
//
//	this->ProcessEvent ( pAmphibious, &parms, NULL );
//
//}
//
//void UCheatManager::execCauseEvent ( struct FName EventName )
//{
//	static UFunction* pCauseEvent = 0;
//	UCheatManager_execCauseEvent_Parms parms;
//
//	if ( !pCauseEvent )
//		pCauseEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.CauseEvent" );
//
//	parms.EventName = EventName;
//	this->ProcessEvent ( pCauseEvent, &parms, NULL );
//
//}
//
//void UCheatManager::execFreeCamera ( bool B )
//{
//	static UFunction* pFreeCamera = 0;
//	UCheatManager_execFreeCamera_Parms parms;
//
//	if ( !pFreeCamera )
//		pFreeCamera = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.FreeCamera" );
//
//	parms.B = B;
//	this->ProcessEvent ( pFreeCamera, &parms, NULL );
//
//}
//
//void UCheatManager::execEndPath (  )
//{
//	static UFunction* pEndPath = 0;
//	UCheatManager_execEndPath_Parms parms;
//
//	if ( !pEndPath )
//		pEndPath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.EndPath" );
//
//	this->ProcessEvent ( pEndPath, &parms, NULL );
//
//}
//
//void UCheatManager::execSetCameraDist ( float f )
//{
//	static UFunction* pSetCameraDist = 0;
//	UCheatManager_execSetCameraDist_Parms parms;
//
//	if ( !pSetCameraDist )
//		pSetCameraDist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.SetCameraDist" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetCameraDist, &parms, NULL );
//
//}
//
//void UCheatManager::execLockCamera (  )
//{
//	static UFunction* pLockCamera = 0;
//	UCheatManager_execLockCamera_Parms parms;
//
//	if ( !pLockCamera )
//		pLockCamera = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.LockCamera" );
//
//	this->ProcessEvent ( pLockCamera, &parms, NULL );
//
//}
//
//void UCheatManager::execChangeSize ( float f )
//{
//	static UFunction* pChangeSize = 0;
//	UCheatManager_execChangeSize_Parms parms;
//
//	if ( !pChangeSize )
//		pChangeSize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ChangeSize" );
//
//	parms.f = f;
//	this->ProcessEvent ( pChangeSize, &parms, NULL );
//
//}
//
//void UCheatManager::execTeleport (  )
//{
//	static UFunction* pTeleport = 0;
//	UCheatManager_execTeleport_Parms parms;
//
//	if ( !pTeleport )
//		pTeleport = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.Teleport" );
//
//	this->ProcessEvent ( pTeleport, &parms, NULL );
//
//}
//
//void UCheatManager::execLogScriptedSequences (  )
//{
//	static UFunction* pLogScriptedSequences = 0;
//	UCheatManager_execLogScriptedSequences_Parms parms;
//
//	if ( !pLogScriptedSequences )
//		pLogScriptedSequences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.LogScriptedSequences" );
//
//	this->ProcessEvent ( pLogScriptedSequences, &parms, NULL );
//
//}
//
//void UCheatManager::execKillViewedActor (  )
//{
//	static UFunction* pKillViewedActor = 0;
//	UCheatManager_execKillViewedActor_Parms parms;
//
//	if ( !pKillViewedActor )
//		pKillViewedActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.KillViewedActor" );
//
//	this->ProcessEvent ( pKillViewedActor, &parms, NULL );
//
//}
//
//void UCheatManager::execSetFogB ( float f )
//{
//	static UFunction* pSetFogB = 0;
//	UCheatManager_execSetFogB_Parms parms;
//
//	if ( !pSetFogB )
//		pSetFogB = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.SetFogB" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetFogB, &parms, NULL );
//
//}
//
//void UCheatManager::execSetFogG ( float f )
//{
//	static UFunction* pSetFogG = 0;
//	UCheatManager_execSetFogG_Parms parms;
//
//	if ( !pSetFogG )
//		pSetFogG = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.SetFogG" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetFogG, &parms, NULL );
//
//}
//
//void UCheatManager::execSetFogR ( float f )
//{
//	static UFunction* pSetFogR = 0;
//	UCheatManager_execSetFogR_Parms parms;
//
//	if ( !pSetFogR )
//		pSetFogR = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.SetFogR" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetFogR, &parms, NULL );
//
//}
//
//void UCheatManager::execSetFlash ( float f )
//{
//	static UFunction* pSetFlash = 0;
//	UCheatManager_execSetFlash_Parms parms;
//
//	if ( !pSetFlash )
//		pSetFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.SetFlash" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetFlash, &parms, NULL );
//
//}
//
//void UCheatManager::execWriteToLog ( struct FString Param )
//{
//	static UFunction* pWriteToLog = 0;
//	UCheatManager_execWriteToLog_Parms parms;
//
//	if ( !pWriteToLog )
//		pWriteToLog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.WriteToLog" );
//
//	parms.Param = Param;
//	this->ProcessEvent ( pWriteToLog, &parms, NULL );
//
//}
//
//void UCheatManager::execFreezeFrame ( float Delay )
//{
//	static UFunction* pFreezeFrame = 0;
//	UCheatManager_execFreezeFrame_Parms parms;
//
//	if ( !pFreezeFrame )
//		pFreezeFrame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.FreezeFrame" );
//
//	parms.Delay = Delay;
//	this->ProcessEvent ( pFreezeFrame, &parms, NULL );
//
//}
//
//void UCheatManager::execPause ( bool bPause )
//{
//	static UFunction* pPause = 0;
//	UCheatManager_execPause_Parms parms;
//
//	if ( !pPause )
//		pPause = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.Pause" );
//
//	parms.bPause = bPause;
//	this->ProcessEvent ( pPause, &parms, NULL );
//
//}
//
//void UCheatManager::execListDynamicActors (  )
//{
//	static UFunction* pListDynamicActors = 0;
//	UCheatManager_execListDynamicActors_Parms parms;
//
//	if ( !pListDynamicActors )
//		pListDynamicActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ListDynamicActors" );
//
//	this->ProcessEvent ( pListDynamicActors, &parms, NULL );
//
//}
//
//void UCheatManager::execReviewJumpSpots ( struct FName TestLabel )
//{
//	static UFunction* pReviewJumpSpots = 0;
//	UCheatManager_execReviewJumpSpots_Parms parms;
//
//	if ( !pReviewJumpSpots )
//		pReviewJumpSpots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CheatManager.ReviewJumpSpots" );
//
//	parms.TestLabel = TestLabel;
//	this->ProcessEvent ( pReviewJumpSpots, &parms, NULL );
//
//}
//
void UCanvas::DrawScreenText ( struct FString Text, float X, float Y, unsigned char Pivot )
{
	static UFunction* pDrawScreenText = 0;
	UCanvas_execDrawScreenText_Parms parms;

	if ( !pDrawScreenText )
		pDrawScreenText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawScreenText" );

	parms.Text = Text;
	parms.X = X;
	parms.Y = Y;
	parms.Pivot = Pivot;
	this->ProcessEvent ( pDrawScreenText, &parms, NULL );

}

void UCanvas::DrawBox ( class UCanvas* Canvas, float width, float Height )
{
	static UFunction* pDrawBox = 0;
	UCanvas_execDrawBox_Parms parms;

	if ( !pDrawBox )
		pDrawBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawBox" );

	parms.Canvas = Canvas;
	parms.width = width;
	parms.Height = Height;
	this->ProcessEvent ( pDrawBox, &parms, NULL );

}

void UCanvas::DrawBracket ( float width, float Height, float bracket_size )
{
	static UFunction* pDrawBracket = 0;
	UCanvas_execDrawBracket_Parms parms;

	if ( !pDrawBracket )
		pDrawBracket = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawBracket" );

	parms.width = width;
	parms.Height = Height;
	parms.bracket_size = bracket_size;
	this->ProcessEvent ( pDrawBracket, &parms, NULL );

}

void UCanvas::DrawLine ( int direction, float Size )
{
	static UFunction* pDrawLine = 0;
	UCanvas_execDrawLine_Parms parms;

	if ( !pDrawLine )
		pDrawLine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawLine" );

	parms.direction = direction;
	parms.Size = Size;
	this->ProcessEvent ( pDrawLine, &parms, NULL );

}

void UCanvas::DrawHorizontal ( float Y, float width )
{
	static UFunction* pDrawHorizontal = 0;
	UCanvas_execDrawHorizontal_Parms parms;

	if ( !pDrawHorizontal )
		pDrawHorizontal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawHorizontal" );

	parms.Y = Y;
	parms.width = width;
	this->ProcessEvent ( pDrawHorizontal, &parms, NULL );

}

void UCanvas::DrawVertical ( float X, float Height )
{
	static UFunction* pDrawVertical = 0;
	UCanvas_execDrawVertical_Parms parms;

	if ( !pDrawVertical )
		pDrawVertical = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawVertical" );

	parms.X = X;
	parms.Height = Height;
	this->ProcessEvent ( pDrawVertical, &parms, NULL );

}

class FColor UCanvas::MakeColorNoEmpty ( unsigned char R, unsigned char G, unsigned char B, unsigned char A )
{
	static UFunction* pMakeColorNoEmpty = 0;
	UCanvas_execMakeColorNoEmpty_Parms parms;

	if ( !pMakeColorNoEmpty )
		pMakeColorNoEmpty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.MakeColorNoEmpty" );

	parms.R = R;
	parms.G = G;
	parms.B = B;
	parms.A = A;
	this->ProcessEvent ( pMakeColorNoEmpty, &parms, NULL );

	return parms.ReturnValue;
}

class FColor UCanvas::MakeColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A )
{
	static UFunction* pMakeColor = 0;
	UCanvas_execMakeColor_Parms parms;

	if ( !pMakeColor )
		pMakeColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.MakeColor" );

	parms.R = R;
	parms.G = G;
	parms.B = B;
	parms.A = A;
	this->ProcessEvent ( pMakeColor, &parms, NULL );

	return parms.ReturnValue;
}

void UCanvas::SetDrawColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A )
{
	static UFunction* pSetDrawColor = 0;
	UCanvas_execSetDrawColor_Parms parms;

	if ( !pSetDrawColor )
		pSetDrawColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.SetDrawColor" );

	parms.R = R;
	parms.G = G;
	parms.B = B;
	parms.A = A;
	this->ProcessEvent ( pSetDrawColor, &parms, NULL );

}

void UCanvas::DrawRect ( class UTexture* Tex, float RectX, float RectY )
{
	static UFunction* pDrawRect = 0;
	UCanvas_execDrawRect_Parms parms;

	if ( !pDrawRect )
		pDrawRect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawRect" );

	parms.Tex = Tex;
	parms.RectX = RectX;
	parms.RectY = RectY;
	this->ProcessEvent ( pDrawRect, &parms, NULL );

}

void UCanvas::DrawIcon ( class UTexture* Tex, float Scale )
{
	static UFunction* pDrawIcon = 0;
	UCanvas_execDrawIcon_Parms parms;

	if ( !pDrawIcon )
		pDrawIcon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawIcon" );

	parms.Tex = Tex;
	parms.Scale = Scale;
	this->ProcessEvent ( pDrawIcon, &parms, NULL );

}

void UCanvas::DrawPattern ( class UMaterial* Tex, float XL, float YL, float Scale )
{
	static UFunction* pDrawPattern = 0;
	UCanvas_execDrawPattern_Parms parms;

	if ( !pDrawPattern )
		pDrawPattern = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawPattern" );

	parms.Tex = Tex;
	parms.XL = XL;
	parms.YL = YL;
	parms.Scale = Scale;
	this->ProcessEvent ( pDrawPattern, &parms, NULL );

}

void UCanvas::SetClip ( float X, float Y )
{
	static UFunction* pSetClip = 0;
	UCanvas_execSetClip_Parms parms;

	if ( !pSetClip )
		pSetClip = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.SetClip" );

	parms.X = X;
	parms.Y = Y;
	this->ProcessEvent ( pSetClip, &parms, NULL );

}

void UCanvas::SetOrigin ( float X, float Y )
{
	static UFunction* pSetOrigin = 0;
	UCanvas_execSetOrigin_Parms parms;

	if ( !pSetOrigin )
		pSetOrigin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.SetOrigin" );

	parms.X = X;
	parms.Y = Y;
	this->ProcessEvent ( pSetOrigin, &parms, NULL );

}

void UCanvas::SetPos ( float X, float Y )
{
	static UFunction* pSetPos = 0;
	UCanvas_execSetPos_Parms parms;

	if ( !pSetPos )
		pSetPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.SetPos" );

	parms.X = X;
	parms.Y = Y;
	this->ProcessEvent ( pSetPos, &parms, NULL );

}

void UCanvas::eventReset (  )
{
	static UFunction* pReset = 0;
	UCanvas_eventReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}

void UCanvas::BtrDrawTextJustifiedWithVolumeLineCache ( struct FString Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int fntSize, class FColor shadowC, int dropSX, int dropSY, int Level )
{
	static UFunction* pBtrDrawTextJustifiedWithVolumeLineCache = 0;
	UCanvas_execBtrDrawTextJustifiedWithVolumeLineCache_Parms parms;

	if ( !pBtrDrawTextJustifiedWithVolumeLineCache )
		pBtrDrawTextJustifiedWithVolumeLineCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrDrawTextJustifiedWithVolumeLineCache" );

	parms.Text = Text;
	parms.Justification = Justification;
	parms.X1 = X1;
	parms.Y1 = Y1;
	parms.X2 = X2;
	parms.Y2 = Y2;
	parms.fntSize = fntSize;
	parms.shadowC = shadowC;
	parms.dropSX = dropSX;
	parms.dropSY = dropSY;
	parms.Level = Level;
	this->ProcessEvent ( pBtrDrawTextJustifiedWithVolumeLineCache, &parms, NULL );

}

void UCanvas::BtrDrawTextJustifiedWithVolumeLine ( struct FString Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int fntSize, class FColor shadowC, int dropSX, int dropSY, int Level, bool bUseD3DFont )
{
	static UFunction* pBtrDrawTextJustifiedWithVolumeLine = 0;
	UCanvas_execBtrDrawTextJustifiedWithVolumeLine_Parms parms;

	if ( !pBtrDrawTextJustifiedWithVolumeLine )
		pBtrDrawTextJustifiedWithVolumeLine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrDrawTextJustifiedWithVolumeLine" );

	parms.Text = Text;
	parms.Justification = Justification;
	parms.X1 = X1;
	parms.Y1 = Y1;
	parms.X2 = X2;
	parms.Y2 = Y2;
	parms.fntSize = fntSize;
	parms.shadowC = shadowC;
	parms.dropSX = dropSX;
	parms.dropSY = dropSY;
	parms.Level = Level;
	parms.bUseD3DFont = bUseD3DFont;
	this->ProcessEvent ( pBtrDrawTextJustifiedWithVolumeLine, &parms, NULL );

}

void UCanvas::BtrDrawTextJustifiedWithVolumeLineNoCache ( struct FString Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int fntSize, class FColor shadowC, int dropSX, int dropSY, int Level )
{
	static UFunction* pBtrDrawTextJustifiedWithVolumeLineNoCache = 0;
	UCanvas_execBtrDrawTextJustifiedWithVolumeLineNoCache_Parms parms;

	if ( !pBtrDrawTextJustifiedWithVolumeLineNoCache )
		pBtrDrawTextJustifiedWithVolumeLineNoCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrDrawTextJustifiedWithVolumeLineNoCache" );

	parms.Text = Text;
	parms.Justification = Justification;
	parms.X1 = X1;
	parms.Y1 = Y1;
	parms.X2 = X2;
	parms.Y2 = Y2;
	parms.fntSize = fntSize;
	parms.shadowC = shadowC;
	parms.dropSX = dropSX;
	parms.dropSY = dropSY;
	parms.Level = Level;
	this->ProcessEvent ( pBtrDrawTextJustifiedWithVolumeLineNoCache, &parms, NULL );

}

void UCanvas::Flush (  )
{
	static UFunction* pFlush = 0;
	UCanvas_execFlush_Parms parms;

	if ( !pFlush )
		pFlush = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.Flush" );

	this->ProcessEvent ( pFlush, &parms, NULL );

}

void UCanvas::DrawTileExactWithRotation ( class UMaterial* mat, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, struct FRotator R )
{
	static UFunction* pDrawTileExactWithRotation = 0;
	UCanvas_execDrawTileExactWithRotation_Parms parms;

	if ( !pDrawTileExactWithRotation )
		pDrawTileExactWithRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawTileExactWithRotation" );

	parms.mat = mat;
	parms.X = X;
	parms.Y = Y;
	parms.XL = XL;
	parms.YL = YL;
	parms.U = U;
	parms.V = V;
	parms.UL = UL;
	parms.VL = VL;
	parms.R = R;
	this->ProcessEvent ( pDrawTileExactWithRotation, &parms, NULL );

}

void UCanvas::DrawTileExact ( class UMaterial* mat, float X, float Y, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pDrawTileExact = 0;
	UCanvas_execDrawTileExact_Parms parms;

	if ( !pDrawTileExact )
		pDrawTileExact = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawTileExact" );

	parms.mat = mat;
	parms.X = X;
	parms.Y = Y;
	parms.XL = XL;
	parms.YL = YL;
	parms.U = U;
	parms.V = V;
	parms.UL = UL;
	parms.VL = VL;
	this->ProcessEvent ( pDrawTileExact, &parms, NULL );

}

void UCanvas::BtrDrawTextJustifiedCache ( struct FString Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int FontSize, int Level )
{
	static UFunction* pBtrDrawTextJustifiedCache = 0;
	UCanvas_execBtrDrawTextJustifiedCache_Parms parms;

	if ( !pBtrDrawTextJustifiedCache )
		pBtrDrawTextJustifiedCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrDrawTextJustifiedCache" );

	parms.Text = Text;
	parms.Justification = Justification;
	parms.X1 = X1;
	parms.Y1 = Y1;
	parms.X2 = X2;
	parms.Y2 = Y2;
	parms.FontSize = FontSize;
	parms.Level = Level;
	this->ProcessEvent ( pBtrDrawTextJustifiedCache, &parms, NULL );

}

void UCanvas::DrawTileCache ( class UMaterial* mat, float XL, float YL, float U, float V, float UL, float VL, int Level )
{
	static UFunction* pDrawTileCache = 0;
	UCanvas_execDrawTileCache_Parms parms;

	if ( !pDrawTileCache )
		pDrawTileCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawTileCache" );

	parms.mat = mat;
	parms.XL = XL;
	parms.YL = YL;
	parms.U = U;
	parms.V = V;
	parms.UL = UL;
	parms.VL = VL;
	parms.Level = Level;
	this->ProcessEvent ( pDrawTileCache, &parms, NULL );

}

//void UCanvas::EndCache (  )
//{
//	static UFunction* pEndCache = 0;
//	UCanvas_execEndCache_Parms parms;
//
//	if ( !pEndCache )
//		pEndCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.EndCache" );
//
//	this->ProcessEvent ( pEndCache, &parms, NULL );
//
//}

void UCanvas::BeginCache (  )
{
	static UFunction* pBeginCache = 0;
	UCanvas_execBeginCache_Parms parms;

	if ( !pBeginCache )
		pBeginCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BeginCache" );

	this->ProcessEvent ( pBeginCache, &parms, NULL );

}

void UCanvas::BtrTextSizeOLD ( struct FString Text, int FontSize, float* XL, float* YL )
{
	static UFunction* pBtrTextSizeOLD = 0;
	UCanvas_execBtrTextSizeOLD_Parms parms;

	if ( !pBtrTextSizeOLD )
		pBtrTextSizeOLD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrTextSizeOLD" );

	parms.Text = Text;
	parms.FontSize = FontSize;
	this->ProcessEvent ( pBtrTextSizeOLD, &parms, NULL );

	*XL = parms.XL;
	*YL = parms.YL;
}

void UCanvas::BtrTextSizeLH ( struct FString Text, int FontSize, float* XL, float* YL )
{
	static UFunction* pBtrTextSizeLH = 0;
	UCanvas_execBtrTextSizeLH_Parms parms;

	if ( !pBtrTextSizeLH )
		pBtrTextSizeLH = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrTextSizeLH" );

	parms.Text = Text;
	parms.FontSize = FontSize;
	this->ProcessEvent ( pBtrTextSizeLH, &parms, NULL );

	*XL = parms.XL;
	*YL = parms.YL;
}

void UCanvas::BtrTextSize ( struct FString Text, int FontSize, float* XL, float* YL )
{
	static UFunction* pBtrTextSize = 0;
	UCanvas_execBtrTextSize_Parms parms;

	if ( !pBtrTextSize )
		pBtrTextSize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrTextSize" );

	parms.Text = Text;
	parms.FontSize = FontSize;
	this->ProcessEvent ( pBtrTextSize, &parms, NULL );

	*XL = parms.XL;
	*YL = parms.YL;
}

void UCanvas::BtrDrawTextHK_UseModulateColor ( struct FString Text, float X1, float Y1, float X2, float Y2, int FontSize, bool bUseD3DFont, unsigned char GCLevel, unsigned char PresetIndex, bool bUseModulateColor, struct FPlane mColor )
{
	static UFunction* pBtrDrawTextHK_UseModulateColor = 0;
	UCanvas_execBtrDrawTextHK_UseModulateColor_Parms parms;

	if ( !pBtrDrawTextHK_UseModulateColor )
		pBtrDrawTextHK_UseModulateColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrDrawTextHK_UseModulateColor" );

	parms.Text = Text;
	parms.X1 = X1;
	parms.Y1 = Y1;
	parms.X2 = X2;
	parms.Y2 = Y2;
	parms.FontSize = FontSize;
	parms.bUseD3DFont = bUseD3DFont;
	parms.GCLevel = GCLevel;
	parms.PresetIndex = PresetIndex;
	parms.bUseModulateColor = bUseModulateColor;
	parms.mColor = mColor;
	this->ProcessEvent ( pBtrDrawTextHK_UseModulateColor, &parms, NULL );

}

void UCanvas::BtrDrawTextHK ( struct FString Text, float X1, float Y1, float X2, float Y2, int FontSize, bool bUseD3DFont, unsigned char GCLevel, unsigned char PresetIndex )
{
	static UFunction* pBtrDrawTextHK = 0;
	UCanvas_execBtrDrawTextHK_Parms parms;

	if ( !pBtrDrawTextHK )
		pBtrDrawTextHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrDrawTextHK" );

	parms.Text = Text;
	parms.X1 = X1;
	parms.Y1 = Y1;
	parms.X2 = X2;
	parms.Y2 = Y2;
	parms.FontSize = FontSize;
	parms.bUseD3DFont = bUseD3DFont;
	parms.GCLevel = GCLevel;
	parms.PresetIndex = PresetIndex;
	this->ProcessEvent ( pBtrDrawTextHK, &parms, NULL );

}

void UCanvas::BtrFontTextureGC (  )
{
	static UFunction* pBtrFontTextureGC = 0;
	UCanvas_execBtrFontTextureGC_Parms parms;

	if ( !pBtrFontTextureGC )
		pBtrFontTextureGC = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrFontTextureGC" );

	this->ProcessEvent ( pBtrFontTextureGC, &parms, NULL );

}

void UCanvas::BtrFontReset (  )
{
	static UFunction* pBtrFontReset = 0;
	UCanvas_execBtrFontReset_Parms parms;

	if ( !pBtrFontReset )
		pBtrFontReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrFontReset" );

	this->ProcessEvent ( pBtrFontReset, &parms, NULL );

}

void UCanvas::BtrToggleUseD3DFont (  )
{
	static UFunction* pBtrToggleUseD3DFont = 0;
	UCanvas_execBtrToggleUseD3DFont_Parms parms;

	if ( !pBtrToggleUseD3DFont )
		pBtrToggleUseD3DFont = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrToggleUseD3DFont" );

	this->ProcessEvent ( pBtrToggleUseD3DFont, &parms, NULL );

}

void UCanvas::BtrSaveTexture (  )
{
	static UFunction* pBtrSaveTexture = 0;
	UCanvas_execBtrSaveTexture_Parms parms;

	if ( !pBtrSaveTexture )
		pBtrSaveTexture = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrSaveTexture" );

	this->ProcessEvent ( pBtrSaveTexture, &parms, NULL );

}

void UCanvas::BtrDrawTextJustified ( struct FString Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int FontSize, bool bCache )
{
	static UFunction* pBtrDrawTextJustified = 0;
	UCanvas_execBtrDrawTextJustified_Parms parms;

	if ( !pBtrDrawTextJustified )
		pBtrDrawTextJustified = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.BtrDrawTextJustified" );

	parms.Text = Text;
	parms.Justification = Justification;
	parms.X1 = X1;
	parms.Y1 = Y1;
	parms.X2 = X2;
	parms.Y2 = Y2;
	parms.FontSize = FontSize;
	parms.bCache = bCache;
	this->ProcessEvent ( pBtrDrawTextJustified, &parms, NULL );

}

void UCanvas::DrawActorClipped ( class AActor* A, bool Wireframe, float Left, float Top, float width, float Height, bool ClearZ, float DisplayFOV )
{
	static UFunction* pDrawActorClipped = 0;
	UCanvas_execDrawActorClipped_Parms parms;

	if ( !pDrawActorClipped )
		pDrawActorClipped = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawActorClipped" );

	parms.A = A;
	parms.Wireframe = Wireframe;
	parms.Left = Left;
	parms.Top = Top;
	parms.width = width;
	parms.Height = Height;
	parms.ClearZ = ClearZ;
	parms.DisplayFOV = DisplayFOV;
	this->ProcessEvent ( pDrawActorClipped, &parms, NULL );

}

void UCanvas::DrawTextJustified ( struct FString String, unsigned char Justification, float X1, float Y1, float X2, float Y2 )
{
	static UFunction* pDrawTextJustified = 0;
	UCanvas_execDrawTextJustified_Parms parms;

	if ( !pDrawTextJustified )
		pDrawTextJustified = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawTextJustified" );

	parms.String = String;
	parms.Justification = Justification;
	parms.X1 = X1;
	parms.Y1 = Y1;
	parms.X2 = X2;
	parms.Y2 = Y2;
	this->ProcessEvent ( pDrawTextJustified, &parms, NULL );

}

void UCanvas::DrawTileScaled ( class UMaterial* mat, float XScale, float YScale )
{
	static UFunction* pDrawTileScaled = 0;
	UCanvas_execDrawTileScaled_Parms parms;

	if ( !pDrawTileScaled )
		pDrawTileScaled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawTileScaled" );

	parms.mat = mat;
	parms.XScale = XScale;
	parms.YScale = YScale;
	this->ProcessEvent ( pDrawTileScaled, &parms, NULL );

}

void UCanvas::DrawTileJustified ( class UMaterial* mat, unsigned char Justification, float XL, float YL )
{
	static UFunction* pDrawTileJustified = 0;
	UCanvas_execDrawTileJustified_Parms parms;

	if ( !pDrawTileJustified )
		pDrawTileJustified = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawTileJustified" );

	parms.mat = mat;
	parms.Justification = Justification;
	parms.XL = XL;
	parms.YL = YL;
	this->ProcessEvent ( pDrawTileJustified, &parms, NULL );

}

void UCanvas::DrawTileCroppedStretched ( class UMaterial* mat, float XL, float YL, float UL, float VL )
{
	static UFunction* pDrawTileCroppedStretched = 0;
	UCanvas_execDrawTileCroppedStretched_Parms parms;

	if ( !pDrawTileCroppedStretched )
		pDrawTileCroppedStretched = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawTileCroppedStretched" );

	parms.mat = mat;
	parms.XL = XL;
	parms.YL = YL;
	parms.UL = UL;
	parms.VL = VL;
	this->ProcessEvent ( pDrawTileCroppedStretched, &parms, NULL );

}

void UCanvas::DrawTileStretched ( class UMaterial* mat, float XL, float YL )
{
	static UFunction* pDrawTileStretched = 0;
	UCanvas_execDrawTileStretched_Parms parms;

	if ( !pDrawTileStretched )
		pDrawTileStretched = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawTileStretched" );

	parms.mat = mat;
	parms.XL = XL;
	parms.YL = YL;
	this->ProcessEvent ( pDrawTileStretched, &parms, NULL );

}

void UCanvas::DrawTilePartialStretched ( class UMaterial* mat, float XL, float YL )
{
	static UFunction* pDrawTilePartialStretched = 0;
	UCanvas_execDrawTilePartialStretched_Parms parms;

	if ( !pDrawTilePartialStretched )
		pDrawTilePartialStretched = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawTilePartialStretched" );

	parms.mat = mat;
	parms.XL = XL;
	parms.YL = YL;
	this->ProcessEvent ( pDrawTilePartialStretched, &parms, NULL );

}

void UCanvas::WrapText ( float dx, class UFont* f, float FontScaleX, struct FString* Text, struct FString* Line )
{
	static UFunction* pWrapText = 0;
	UCanvas_execWrapText_Parms parms;

	if ( !pWrapText )
		pWrapText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.WrapText" );

	parms.dx = dx;
	parms.f = f;
	parms.FontScaleX = FontScaleX;
	this->ProcessEvent ( pWrapText, &parms, NULL );

	*Text = parms.Text;
	*Line = parms.Line;
}

void UCanvas::WrapStringToArray ( struct FString Text, float dx, struct FString EOL, class TArray< struct FString >* OutArray )
{
	static UFunction* pWrapStringToArray = 0;
	UCanvas_execWrapStringToArray_Parms parms;

	if ( !pWrapStringToArray )
		pWrapStringToArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.WrapStringToArray" );

	parms.Text = Text;
	parms.dx = dx;
	parms.EOL = EOL;
	this->ProcessEvent ( pWrapStringToArray, &parms, NULL );

	*OutArray = parms.OutArray;
}

void UCanvas::Clear ( bool ClearRGB, bool ClearZ )
{
	static UFunction* pClear = 0;
	UCanvas_execClear_Parms parms;

	if ( !pClear )
		pClear = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.Clear" );

	parms.ClearRGB = ClearRGB;
	parms.ClearZ = ClearZ;
	this->ProcessEvent ( pClear, &parms, NULL );

}

void UCanvas::DrawScreenActorWithViewport ( class AActor* A, int X1, int Y1, int X2, int Y2, float AspectRatio, float FOV, bool Wireframe, bool ClearZ )
{
	static UFunction* pDrawScreenActorWithViewport = 0;
	UCanvas_execDrawScreenActorWithViewport_Parms parms;

	if ( !pDrawScreenActorWithViewport )
		pDrawScreenActorWithViewport = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawScreenActorWithViewport" );

	parms.A = A;
	parms.X1 = X1;
	parms.Y1 = Y1;
	parms.X2 = X2;
	parms.Y2 = Y2;
	parms.AspectRatio = AspectRatio;
	parms.FOV = FOV;
	parms.Wireframe = Wireframe;
	parms.ClearZ = ClearZ;
	this->ProcessEvent ( pDrawScreenActorWithViewport, &parms, NULL );

}

void UCanvas::DrawScreenActor ( class AActor* A, float FOV, bool Wireframe, bool ClearZ )
{
	static UFunction* pDrawScreenActor = 0;
	UCanvas_execDrawScreenActor_Parms parms;

	if ( !pDrawScreenActor )
		pDrawScreenActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawScreenActor" );

	parms.A = A;
	parms.FOV = FOV;
	parms.Wireframe = Wireframe;
	parms.ClearZ = ClearZ;
	this->ProcessEvent ( pDrawScreenActor, &parms, NULL );

}

void UCanvas::SetScreenProjector ( int Index, struct FVector Position, class FColor Color, float Radius, class UTexture* Tex )
{
	static UFunction* pSetScreenProjector = 0;
	UCanvas_execSetScreenProjector_Parms parms;

	if ( !pSetScreenProjector )
		pSetScreenProjector = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.SetScreenProjector" );

	parms.Index = Index;
	parms.Position = Position;
	parms.Color = Color;
	parms.Radius = Radius;
	parms.Tex = Tex;
	this->ProcessEvent ( pSetScreenProjector, &parms, NULL );

}

void UCanvas::SetScreenLight ( int Index, struct FVector Position, class FColor LightColor, float Radius )
{
	static UFunction* pSetScreenLight = 0;
	UCanvas_execSetScreenLight_Parms parms;

	if ( !pSetScreenLight )
		pSetScreenLight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.SetScreenLight" );

	parms.Index = Index;
	parms.Position = Position;
	parms.LightColor = LightColor;
	parms.Radius = Radius;
	this->ProcessEvent ( pSetScreenLight, &parms, NULL );

}

void UCanvas::SetFontScale ( float fX, float fY )
{
	static UFunction* pSetFontScale = 0;
	UCanvas_execSetFontScale_Parms parms;

	if ( !pSetFontScale )
		pSetFontScale = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.SetFontScale" );

	parms.fX = fX;
	parms.fY = fY;
	this->ProcessEvent ( pSetFontScale, &parms, NULL );

}

//void UCanvas::Draw2DPoint ( float X, float Y, class FColor PointColor )
//{
//	static UFunction* pDraw2DPoint = 0;
//	UCanvas_execDraw2DPoint_Parms parms;
//
//	if ( !pDraw2DPoint )
//		pDraw2DPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.Draw2DPoint" );
//
//	parms.X = X;
//	parms.Y = Y;
//	parms.PointColor = PointColor;
//	this->ProcessEvent ( pDraw2DPoint, &parms, NULL );
//
//}

//void UCanvas::Draw2DLine ( float X1, float Y1, float X2, float Y2, class FColor LineColor )
//{
//	static UFunction* pDraw2DLine = 0;
//	UCanvas_execDraw2DLine_Parms parms;
//
//	if ( !pDraw2DLine )
//		pDraw2DLine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.Draw2DLine" );
//
//	parms.X1 = X1;
//	parms.Y1 = Y1;
//	parms.X2 = X2;
//	parms.Y2 = Y2;
//	parms.LineColor = LineColor;
//	this->ProcessEvent ( pDraw2DLine, &parms, NULL );
//
//}

void UCanvas::SetCameraRotation ( struct FRotator CameraRotation )
{
	static UFunction* pSetCameraRotation = 0;
	UCanvas_execSetCameraRotation_Parms parms;

	if ( !pSetCameraRotation )
		pSetCameraRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.SetCameraRotation" );

	parms.CameraRotation = CameraRotation;
	this->ProcessEvent ( pSetCameraRotation, &parms, NULL );

}

void UCanvas::SetCameraLocation ( struct FVector CameraLocation )
{
	static UFunction* pSetCameraLocation = 0;
	UCanvas_execSetCameraLocation_Parms parms;

	if ( !pSetCameraLocation )
		pSetCameraLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.SetCameraLocation" );

	parms.CameraLocation = CameraLocation;
	this->ProcessEvent ( pSetCameraLocation, &parms, NULL );

}

void UCanvas::GetCameraLocation ( struct FVector* CameraLocation, struct FRotator* CameraRotation )
{
	static UFunction* pGetCameraLocation = 0;
	UCanvas_execGetCameraLocation_Parms parms;

	if ( !pGetCameraLocation )
		pGetCameraLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.GetCameraLocation" );

	parms.CameraLocation = *CameraLocation;
	parms.CameraRotation = *CameraRotation;
	this->ProcessEvent ( pGetCameraLocation, &parms, NULL );

	*CameraLocation = parms.CameraLocation;
	*CameraRotation = parms.CameraRotation;
}

struct FVector UCanvas::WorldToScreen ( struct FVector WorldLoc )
{
	static UFunction* pWorldToScreen = 0;
	UCanvas_execWorldToScreen_Parms parms;

	if ( !pWorldToScreen )
		pWorldToScreen = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.WorldToScreen" );

	parms.WorldLoc = WorldLoc;
	this->ProcessEvent ( pWorldToScreen, &parms, NULL );

	return parms.ReturnValue;
}

void UCanvas::DrawPortal ( int X, int Y, int width, int Height, class AActor* CamActor, struct FVector CamLocation, struct FRotator CamRotation, int FOV, bool ClearZ )
{
	static UFunction* pDrawPortal = 0;
	UCanvas_execDrawPortal_Parms parms;

	if ( !pDrawPortal )
		pDrawPortal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawPortal" );

	WORD iNative = pDrawPortal->iNative;
	pDrawPortal->FunctionFlags &= ~FUNC_Native;
	pDrawPortal->iNative = 0;

	parms.X = X;
	parms.Y = Y;
	parms.width = width;
	parms.Height = Height;
	parms.CamActor = CamActor;
	parms.CamLocation = CamLocation;
	parms.CamRotation = CamRotation;
	parms.FOV = FOV;
	parms.ClearZ = ClearZ;
	this->ProcessEvent ( pDrawPortal, &parms, NULL );

	pDrawPortal->iNative = iNative;
	pDrawPortal->FunctionFlags |= FUNC_Native;
}

void UCanvas::TextSize ( struct FString String, float* XL, float* YL )
{
	static UFunction* pTextSize = 0;
	UCanvas_execTextSize_Parms parms;

	if ( !pTextSize )
		pTextSize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.TextSize" );

	WORD iNative = pTextSize->iNative;
	pTextSize->FunctionFlags &= ~FUNC_Native;
	pTextSize->iNative = 0;

	parms.String = String;
	this->ProcessEvent ( pTextSize, &parms, NULL );

	pTextSize->iNative = iNative;
	pTextSize->FunctionFlags |= FUNC_Native;
	*XL = parms.XL;
	*YL = parms.YL;
}

void UCanvas::DrawTextClipped ( struct FString Text, bool bCheckHotKey )
{
	static UFunction* pDrawTextClipped = 0;
	UCanvas_execDrawTextClipped_Parms parms;

	if ( !pDrawTextClipped )
		pDrawTextClipped = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawTextClipped" );

	WORD iNative = pDrawTextClipped->iNative;
	pDrawTextClipped->FunctionFlags &= ~FUNC_Native;
	pDrawTextClipped->iNative = 0;

	parms.Text = Text;
	parms.bCheckHotKey = bCheckHotKey;
	this->ProcessEvent ( pDrawTextClipped, &parms, NULL );

	pDrawTextClipped->iNative = iNative;
	pDrawTextClipped->FunctionFlags |= FUNC_Native;
}

void UCanvas::DrawTileClipped ( class UMaterial* mat, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pDrawTileClipped = 0;
	UCanvas_execDrawTileClipped_Parms parms;

	if ( !pDrawTileClipped )
		pDrawTileClipped = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawTileClipped" );

	WORD iNative = pDrawTileClipped->iNative;
	pDrawTileClipped->FunctionFlags &= ~FUNC_Native;
	pDrawTileClipped->iNative = 0;

	parms.mat = mat;
	parms.XL = XL;
	parms.YL = YL;
	parms.U = U;
	parms.V = V;
	parms.UL = UL;
	parms.VL = VL;
	this->ProcessEvent ( pDrawTileClipped, &parms, NULL );

	pDrawTileClipped->iNative = iNative;
	pDrawTileClipped->FunctionFlags |= FUNC_Native;
}

void UCanvas::DrawActor ( class AActor* A, bool Wireframe, bool ClearZ, float DisplayFOV )
{
	static UFunction* pDrawActor = 0;
	UCanvas_execDrawActor_Parms parms;

	if ( !pDrawActor )
		pDrawActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawActor" );

	WORD iNative = pDrawActor->iNative;
	pDrawActor->FunctionFlags &= ~FUNC_Native;
	pDrawActor->iNative = 0;

	parms.A = A;
	parms.Wireframe = Wireframe;
	parms.ClearZ = ClearZ;
	parms.DisplayFOV = DisplayFOV;
	this->ProcessEvent ( pDrawActor, &parms, NULL );

	pDrawActor->iNative = iNative;
	pDrawActor->FunctionFlags |= FUNC_Native;
}

void UCanvas::DrawTile ( class UMaterial* mat, float XL, float YL, float U, float V, float UL, float VL )
{
	static UFunction* pDrawTile = 0;
	UCanvas_execDrawTile_Parms parms;

	if ( !pDrawTile )
		pDrawTile = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawTile" );

	parms.mat = mat;
	parms.XL = XL;
	parms.YL = YL;
	parms.U = U;
	parms.V = V;
	parms.UL = UL;
	parms.VL = VL;
	this->ProcessEvent ( pDrawTile, &parms, NULL );

}

void UCanvas::DrawText ( struct FString Text, bool cR )
{
	static UFunction* pDrawText = 0;
	UCanvas_execDrawText_Parms parms;

	if ( !pDrawText )
		pDrawText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.DrawText" );

	WORD iNative = pDrawText->iNative;
	pDrawText->FunctionFlags &= ~FUNC_Native;
	pDrawText->iNative = 0;

	parms.Text = Text;
	parms.cR = cR;
	this->ProcessEvent ( pDrawText, &parms, NULL );

	pDrawText->iNative = iNative;
	pDrawText->FunctionFlags |= FUNC_Native;
}

void UCanvas::StrLen ( struct FString String, float* XL, float* YL )
{
	static UFunction* pStrLen = 0;
	UCanvas_execStrLen_Parms parms;

	if ( !pStrLen )
		pStrLen = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Canvas.StrLen" );

	WORD iNative = pStrLen->iNative;
	pStrLen->FunctionFlags &= ~FUNC_Native;
	pStrLen->iNative = 0;

	parms.String = String;
	this->ProcessEvent ( pStrLen, &parms, NULL );

	pStrLen->iNative = iNative;
	pStrLen->FunctionFlags |= FUNC_Native;
	*XL = parms.XL;
	*YL = parms.YL;
}
//
//struct FAnnouncerRecord UCacheManager::GetAnnouncerRecord ( struct FString ClassName )
//{
//	static UFunction* pGetAnnouncerRecord = 0;
//	UCacheManager_execGetAnnouncerRecord_Parms parms;
//
//	if ( !pGetAnnouncerRecord )
//		pGetAnnouncerRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetAnnouncerRecord" );
//
//	WORD iNative = pGetAnnouncerRecord->iNative;
//	pGetAnnouncerRecord->FunctionFlags &= ~FUNC_Native;
//	pGetAnnouncerRecord->iNative = 0;
//
//	parms.ClassName = ClassName;
//	this->ProcessEvent ( pGetAnnouncerRecord, &parms, NULL );
//
//	pGetAnnouncerRecord->iNative = iNative;
//	pGetAnnouncerRecord->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//struct FVehicleRecord UCacheManager::GetVehicleRecord ( struct FString ClassName )
//{
//	static UFunction* pGetVehicleRecord = 0;
//	UCacheManager_execGetVehicleRecord_Parms parms;
//
//	if ( !pGetVehicleRecord )
//		pGetVehicleRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetVehicleRecord" );
//
//	WORD iNative = pGetVehicleRecord->iNative;
//	pGetVehicleRecord->FunctionFlags &= ~FUNC_Native;
//	pGetVehicleRecord->iNative = 0;
//
//	parms.ClassName = ClassName;
//	this->ProcessEvent ( pGetVehicleRecord, &parms, NULL );
//
//	pGetVehicleRecord->iNative = iNative;
//	pGetVehicleRecord->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//struct FWeaponRecord UCacheManager::GetWeaponRecord ( struct FString ClassName )
//{
//	static UFunction* pGetWeaponRecord = 0;
//	UCacheManager_execGetWeaponRecord_Parms parms;
//
//	if ( !pGetWeaponRecord )
//		pGetWeaponRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetWeaponRecord" );
//
//	WORD iNative = pGetWeaponRecord->iNative;
//	pGetWeaponRecord->FunctionFlags &= ~FUNC_Native;
//	pGetWeaponRecord->iNative = 0;
//
//	parms.ClassName = ClassName;
//	this->ProcessEvent ( pGetWeaponRecord, &parms, NULL );
//
//	pGetWeaponRecord->iNative = iNative;
//	pGetWeaponRecord->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//struct FMutatorRecord UCacheManager::GetMutatorRecord ( struct FString ClassName )
//{
//	static UFunction* pGetMutatorRecord = 0;
//	UCacheManager_execGetMutatorRecord_Parms parms;
//
//	if ( !pGetMutatorRecord )
//		pGetMutatorRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetMutatorRecord" );
//
//	WORD iNative = pGetMutatorRecord->iNative;
//	pGetMutatorRecord->FunctionFlags &= ~FUNC_Native;
//	pGetMutatorRecord->iNative = 0;
//
//	parms.ClassName = ClassName;
//	this->ProcessEvent ( pGetMutatorRecord, &parms, NULL );
//
//	pGetMutatorRecord->iNative = iNative;
//	pGetMutatorRecord->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//struct FMapRecord UCacheManager::GetMapRecord ( struct FString MapName )
//{
//	static UFunction* pGetMapRecord = 0;
//	UCacheManager_execGetMapRecord_Parms parms;
//
//	if ( !pGetMapRecord )
//		pGetMapRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetMapRecord" );
//
//	WORD iNative = pGetMapRecord->iNative;
//	pGetMapRecord->FunctionFlags &= ~FUNC_Native;
//	pGetMapRecord->iNative = 0;
//
//	parms.MapName = MapName;
//	this->ProcessEvent ( pGetMapRecord, &parms, NULL );
//
//	pGetMapRecord->iNative = iNative;
//	pGetMapRecord->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//struct FGameRecord UCacheManager::GetGameRecord ( struct FString ClassName )
//{
//	static UFunction* pGetGameRecord = 0;
//	UCacheManager_execGetGameRecord_Parms parms;
//
//	if ( !pGetGameRecord )
//		pGetGameRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetGameRecord" );
//
//	WORD iNative = pGetGameRecord->iNative;
//	pGetGameRecord->FunctionFlags &= ~FUNC_Native;
//	pGetGameRecord->iNative = 0;
//
//	parms.ClassName = ClassName;
//	this->ProcessEvent ( pGetGameRecord, &parms, NULL );
//
//	pGetGameRecord->iNative = iNative;
//	pGetGameRecord->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//void UCacheManager::GetTeamSymbolList ( bool bNoSinglePlayer, class TArray< struct FString >* SymbolNames )
//{
//	static UFunction* pGetTeamSymbolList = 0;
//	UCacheManager_execGetTeamSymbolList_Parms parms;
//
//	if ( !pGetTeamSymbolList )
//		pGetTeamSymbolList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetTeamSymbolList" );
//
//	WORD iNative = pGetTeamSymbolList->iNative;
//	pGetTeamSymbolList->FunctionFlags &= ~FUNC_Native;
//	pGetTeamSymbolList->iNative = 0;
//
//	parms.bNoSinglePlayer = bNoSinglePlayer;
//	this->ProcessEvent ( pGetTeamSymbolList, &parms, NULL );
//
//	pGetTeamSymbolList->iNative = iNative;
//	pGetTeamSymbolList->FunctionFlags |= FUNC_Native;
//	*SymbolNames = parms.SymbolNames;
//}
//
//void UCacheManager::GetAnnouncerList ( class TArray< struct FAnnouncerRecord >* AnnouncerRecords )
//{
//	static UFunction* pGetAnnouncerList = 0;
//	UCacheManager_execGetAnnouncerList_Parms parms;
//
//	if ( !pGetAnnouncerList )
//		pGetAnnouncerList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetAnnouncerList" );
//
//	WORD iNative = pGetAnnouncerList->iNative;
//	pGetAnnouncerList->FunctionFlags &= ~FUNC_Native;
//	pGetAnnouncerList->iNative = 0;
//
//	parms.AnnouncerRecords = *AnnouncerRecords;
//	this->ProcessEvent ( pGetAnnouncerList, &parms, NULL );
//
//	pGetAnnouncerList->iNative = iNative;
//	pGetAnnouncerList->FunctionFlags |= FUNC_Native;
//	*AnnouncerRecords = parms.AnnouncerRecords;
//}
//
//void UCacheManager::GetMutatorList ( class TArray< struct FMutatorRecord >* MutatorRecords )
//{
//	static UFunction* pGetMutatorList = 0;
//	UCacheManager_execGetMutatorList_Parms parms;
//
//	if ( !pGetMutatorList )
//		pGetMutatorList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetMutatorList" );
//
//	WORD iNative = pGetMutatorList->iNative;
//	pGetMutatorList->FunctionFlags &= ~FUNC_Native;
//	pGetMutatorList->iNative = 0;
//
//	parms.MutatorRecords = *MutatorRecords;
//	this->ProcessEvent ( pGetMutatorList, &parms, NULL );
//
//	pGetMutatorList->iNative = iNative;
//	pGetMutatorList->FunctionFlags |= FUNC_Native;
//	*MutatorRecords = parms.MutatorRecords;
//}
//
//void UCacheManager::GetCrosshairList ( class TArray< struct FCrosshairRecord >* CrosshairRecords )
//{
//	static UFunction* pGetCrosshairList = 0;
//	UCacheManager_execGetCrosshairList_Parms parms;
//
//	if ( !pGetCrosshairList )
//		pGetCrosshairList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetCrosshairList" );
//
//	WORD iNative = pGetCrosshairList->iNative;
//	pGetCrosshairList->FunctionFlags &= ~FUNC_Native;
//	pGetCrosshairList->iNative = 0;
//
//	parms.CrosshairRecords = *CrosshairRecords;
//	this->ProcessEvent ( pGetCrosshairList, &parms, NULL );
//
//	pGetCrosshairList->iNative = iNative;
//	pGetCrosshairList->FunctionFlags |= FUNC_Native;
//	*CrosshairRecords = parms.CrosshairRecords;
//}
//
//void UCacheManager::GetVehicleList ( class TArray< struct FVehicleRecord >* VehicleRecords )
//{
//	static UFunction* pGetVehicleList = 0;
//	UCacheManager_execGetVehicleList_Parms parms;
//
//	if ( !pGetVehicleList )
//		pGetVehicleList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetVehicleList" );
//
//	WORD iNative = pGetVehicleList->iNative;
//	pGetVehicleList->FunctionFlags &= ~FUNC_Native;
//	pGetVehicleList->iNative = 0;
//
//	parms.VehicleRecords = *VehicleRecords;
//	this->ProcessEvent ( pGetVehicleList, &parms, NULL );
//
//	pGetVehicleList->iNative = iNative;
//	pGetVehicleList->FunctionFlags |= FUNC_Native;
//	*VehicleRecords = parms.VehicleRecords;
//}
//
//void UCacheManager::GetWeaponList ( class TArray< struct FWeaponRecord >* WeaponRecords )
//{
//	static UFunction* pGetWeaponList = 0;
//	UCacheManager_execGetWeaponList_Parms parms;
//
//	if ( !pGetWeaponList )
//		pGetWeaponList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetWeaponList" );
//
//	WORD iNative = pGetWeaponList->iNative;
//	pGetWeaponList->FunctionFlags &= ~FUNC_Native;
//	pGetWeaponList->iNative = 0;
//
//	parms.WeaponRecords = *WeaponRecords;
//	this->ProcessEvent ( pGetWeaponList, &parms, NULL );
//
//	pGetWeaponList->iNative = iNative;
//	pGetWeaponList->FunctionFlags |= FUNC_Native;
//	*WeaponRecords = parms.WeaponRecords;
//}
//
//void UCacheManager::GetMapList ( struct FString Acronym, class TArray< struct FMapRecord >* MapRecords )
//{
//	static UFunction* pGetMapList = 0;
//	UCacheManager_execGetMapList_Parms parms;
//
//	if ( !pGetMapList )
//		pGetMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetMapList" );
//
//	WORD iNative = pGetMapList->iNative;
//	pGetMapList->FunctionFlags &= ~FUNC_Native;
//	pGetMapList->iNative = 0;
//
//	parms.Acronym = Acronym;
//	this->ProcessEvent ( pGetMapList, &parms, NULL );
//
//	pGetMapList->iNative = iNative;
//	pGetMapList->FunctionFlags |= FUNC_Native;
//	*MapRecords = parms.MapRecords;
//}
//
//void UCacheManager::GetGameTypeList ( struct FString FilterType, class TArray< struct FGameRecord >* GameRecords )
//{
//	static UFunction* pGetGameTypeList = 0;
//	UCacheManager_execGetGameTypeList_Parms parms;
//
//	if ( !pGetGameTypeList )
//		pGetGameTypeList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.GetGameTypeList" );
//
//	WORD iNative = pGetGameTypeList->iNative;
//	pGetGameTypeList->FunctionFlags &= ~FUNC_Native;
//	pGetGameTypeList->iNative = 0;
//
//	parms.FilterType = FilterType;
//	this->ProcessEvent ( pGetGameTypeList, &parms, NULL );
//
//	pGetGameTypeList->iNative = iNative;
//	pGetGameTypeList->FunctionFlags |= FUNC_Native;
//	*GameRecords = parms.GameRecords;
//}
//
//bool UCacheManager::IsDefaultContent ( struct FString Item )
//{
//	static UFunction* pIsDefaultContent = 0;
//	UCacheManager_execIsDefaultContent_Parms parms;
//
//	if ( !pIsDefaultContent )
//		pIsDefaultContent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.IsDefaultContent" );
//
//	WORD iNative = pIsDefaultContent->iNative;
//	pIsDefaultContent->FunctionFlags &= ~FUNC_Native;
//	pIsDefaultContent->iNative = 0;
//
//	parms.Item = Item;
//	this->ProcessEvent ( pIsDefaultContent, &parms, NULL );
//
//	pIsDefaultContent->iNative = iNative;
//	pIsDefaultContent->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool UCacheManager::IsBPContent ( struct FString Item )
//{
//	static UFunction* pIsBPContent = 0;
//	UCacheManager_execIsBPContent_Parms parms;
//
//	if ( !pIsBPContent )
//		pIsBPContent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.IsBPContent" );
//
//	WORD iNative = pIsBPContent->iNative;
//	pIsBPContent->FunctionFlags &= ~FUNC_Native;
//	pIsBPContent->iNative = 0;
//
//	parms.Item = Item;
//	this->ProcessEvent ( pIsBPContent, &parms, NULL );
//
//	pIsBPContent->iNative = iNative;
//	pIsBPContent->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool UCacheManager::Is2004Content ( struct FString Item )
//{
//	static UFunction* pIs2004Content = 0;
//	UCacheManager_execIs2004Content_Parms parms;
//
//	if ( !pIs2004Content )
//		pIs2004Content = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.Is2004Content" );
//
//	WORD iNative = pIs2004Content->iNative;
//	pIs2004Content->FunctionFlags &= ~FUNC_Native;
//	pIs2004Content->iNative = 0;
//
//	parms.Item = Item;
//	this->ProcessEvent ( pIs2004Content, &parms, NULL );
//
//	pIs2004Content->iNative = iNative;
//	pIs2004Content->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool UCacheManager::Is2003Content ( struct FString Item )
//{
//	static UFunction* pIs2003Content = 0;
//	UCacheManager_execIs2003Content_Parms parms;
//
//	if ( !pIs2003Content )
//		pIs2003Content = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.Is2003Content" );
//
//	WORD iNative = pIs2003Content->iNative;
//	pIs2003Content->FunctionFlags &= ~FUNC_Native;
//	pIs2003Content->iNative = 0;
//
//	parms.Item = Item;
//	this->ProcessEvent ( pIs2003Content, &parms, NULL );
//
//	pIs2003Content->iNative = iNative;
//	pIs2003Content->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//void UCacheManager::InitCache (  )
//{
//	static UFunction* pInitCache = 0;
//	UCacheManager_execInitCache_Parms parms;
//
//	if ( !pInitCache )
//		pInitCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.CacheManager.InitCache" );
//
//	WORD iNative = pInitCache->iNative;
//	pInitCache->FunctionFlags &= ~FUNC_Native;
//	pInitCache->iNative = 0;
//
//	this->ProcessEvent ( pInitCache, &parms, NULL );
//
//	pInitCache->iNative = iNative;
//	pInitCache->FunctionFlags |= FUNC_Native;
//}
//
//void UBTPingCheckerLinker::eventReceivedPingAck ( class TArray< struct FString > fromAddr, class TArray< int > ElapsedMiliSec )
//{
//	static UFunction* pReceivedPingAck = 0;
//	UBTPingCheckerLinker_eventReceivedPingAck_Parms parms;
//
//	if ( !pReceivedPingAck )
//		pReceivedPingAck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTPingCheckerLinker.ReceivedPingAck" );
//
//	parms.fromAddr = fromAddr;
//	parms.ElapsedMiliSec = ElapsedMiliSec;
//	this->ProcessEvent ( pReceivedPingAck, &parms, NULL );
//
//}
//
//bool UBTPingCheckerLinker::SendText ( struct FString strDest_IP, int nDest_Port, struct FString strTextData )
//{
//	static UFunction* pSendText = 0;
//	UBTPingCheckerLinker_execSendText_Parms parms;
//
//	if ( !pSendText )
//		pSendText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTPingCheckerLinker.SendText" );
//
//	parms.strDest_IP = strDest_IP;
//	parms.nDest_Port = nDest_Port;
//	parms.strTextData = strTextData;
//	this->ProcessEvent ( pSendText, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UBTPingCheckerLinker::SendPing ( struct FString toAddr )
//{
//	static UFunction* pSendPing = 0;
//	UBTPingCheckerLinker_execSendPing_Parms parms;
//
//	if ( !pSendPing )
//		pSendPing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTPingCheckerLinker.SendPing" );
//
//	parms.toAddr = toAddr;
//	this->ProcessEvent ( pSendPing, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVolume::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	AVolume_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Volume.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//void AVolume::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AVolume_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Volume.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//bool AVolume::Encompasses ( class AActor* Other )
//{
//	static UFunction* pEncompasses = 0;
//	AVolume_execEncompasses_Parms parms;
//
//	if ( !pEncompasses )
//		pEncompasses = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Volume.Encompasses" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pEncompasses, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ANavigationPoint::PlayerToucherDied ( class APawn* P )
//{
//	static UFunction* pPlayerToucherDied = 0;
//	ANavigationPoint_execPlayerToucherDied_Parms parms;
//
//	if ( !pPlayerToucherDied )
//		pPlayerToucherDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.NavigationPoint.PlayerToucherDied" );
//
//	parms.P = P;
//	this->ProcessEvent ( pPlayerToucherDied, &parms, NULL );
//
//}
//
//void ANavigationPoint::MoverClosed (  )
//{
//	static UFunction* pMoverClosed = 0;
//	ANavigationPoint_execMoverClosed_Parms parms;
//
//	if ( !pMoverClosed )
//		pMoverClosed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.NavigationPoint.MoverClosed" );
//
//	this->ProcessEvent ( pMoverClosed, &parms, NULL );
//
//}
//
//void ANavigationPoint::MoverOpened (  )
//{
//	static UFunction* pMoverOpened = 0;
//	ANavigationPoint_execMoverOpened_Parms parms;
//
//	if ( !pMoverOpened )
//		pMoverOpened = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.NavigationPoint.MoverOpened" );
//
//	this->ProcessEvent ( pMoverOpened, &parms, NULL );
//
//}
//
//bool ANavigationPoint::ProceedWithMove ( class APawn* Other )
//{
//	static UFunction* pProceedWithMove = 0;
//	ANavigationPoint_execProceedWithMove_Parms parms;
//
//	if ( !pProceedWithMove )
//		pProceedWithMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.NavigationPoint.ProceedWithMove" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pProceedWithMove, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ANavigationPoint::eventSuggestMovePreparation ( class APawn* Other )
//{
//	static UFunction* pSuggestMovePreparation = 0;
//	ANavigationPoint_eventSuggestMovePreparation_Parms parms;
//
//	if ( !pSuggestMovePreparation )
//		pSuggestMovePreparation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.NavigationPoint.SuggestMovePreparation" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSuggestMovePreparation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float ANavigationPoint::eventDetourWeight ( class APawn* Other, float PathWeight )
//{
//	static UFunction* pDetourWeight = 0;
//	ANavigationPoint_eventDetourWeight_Parms parms;
//
//	if ( !pDetourWeight )
//		pDetourWeight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.NavigationPoint.DetourWeight" );
//
//	parms.Other = Other;
//	parms.PathWeight = PathWeight;
//	this->ProcessEvent ( pDetourWeight, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ANavigationPoint::eventAccept ( class AActor* Incoming, class AActor* Source )
//{
//	static UFunction* pAccept = 0;
//	ANavigationPoint_eventAccept_Parms parms;
//
//	if ( !pAccept )
//		pAccept = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.NavigationPoint.Accept" );
//
//	parms.Incoming = Incoming;
//	parms.Source = Source;
//	this->ProcessEvent ( pAccept, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int ANavigationPoint::eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path )
//{
//	static UFunction* pSpecialCost = 0;
//	ANavigationPoint_eventSpecialCost_Parms parms;
//
//	if ( !pSpecialCost )
//		pSpecialCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.NavigationPoint.SpecialCost" );
//
//	parms.Seeker = Seeker;
//	parms.Path = Path;
//	this->ProcessEvent ( pSpecialCost, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ANavigationPoint::SetBaseVisibility ( int BaseNum )
//{
//	static UFunction* pSetBaseVisibility = 0;
//	ANavigationPoint_execSetBaseVisibility_Parms parms;
//
//	if ( !pSetBaseVisibility )
//		pSetBaseVisibility = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.NavigationPoint.SetBaseVisibility" );
//
//	parms.BaseNum = BaseNum;
//	this->ProcessEvent ( pSetBaseVisibility, &parms, NULL );
//
//}
//
//void ANavigationPoint::SetBaseDistance ( int BaseNum )
//{
//	static UFunction* pSetBaseDistance = 0;
//	ANavigationPoint_execSetBaseDistance_Parms parms;
//
//	if ( !pSetBaseDistance )
//		pSetBaseDistance = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.NavigationPoint.SetBaseDistance" );
//
//	parms.BaseNum = BaseNum;
//	this->ProcessEvent ( pSetBaseDistance, &parms, NULL );
//
//}
//
//void ANavigationPoint::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	ANavigationPoint_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.NavigationPoint.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AwArrangeTurret::ForceSpawnVehicle (  )
//{
//	static UFunction* pForceSpawnVehicle = 0;
//	AwArrangeTurret_execForceSpawnVehicle_Parms parms;
//
//	if ( !pForceSpawnVehicle )
//		pForceSpawnVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wArrangeTurret.ForceSpawnVehicle" );
//
//	this->ProcessEvent ( pForceSpawnVehicle, &parms, NULL );
//
//}
//
//void AwArrangeTurret::ForceDestroyVehicle (  )
//{
//	static UFunction* pForceDestroyVehicle = 0;
//	AwArrangeTurret_execForceDestroyVehicle_Parms parms;
//
//	if ( !pForceDestroyVehicle )
//		pForceDestroyVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wArrangeTurret.ForceDestroyVehicle" );
//
//	this->ProcessEvent ( pForceDestroyVehicle, &parms, NULL );
//
//}
//
//void AwArrangeTurret::eventTrigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	AwArrangeTurret_eventTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wArrangeTurret.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void AwArrangeTurret::eventVehicleUnPossessed ( class AVehicle* V )
//{
//	static UFunction* pVehicleUnPossessed = 0;
//	AwArrangeTurret_eventVehicleUnPossessed_Parms parms;
//
//	if ( !pVehicleUnPossessed )
//		pVehicleUnPossessed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wArrangeTurret.VehicleUnPossessed" );
//
//	parms.V = V;
//	this->ProcessEvent ( pVehicleUnPossessed, &parms, NULL );
//
//}
//
//void AwArrangeTurret::eventVehiclePossessed ( class AVehicle* V )
//{
//	static UFunction* pVehiclePossessed = 0;
//	AwArrangeTurret_eventVehiclePossessed_Parms parms;
//
//	if ( !pVehiclePossessed )
//		pVehiclePossessed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wArrangeTurret.VehiclePossessed" );
//
//	parms.V = V;
//	this->ProcessEvent ( pVehiclePossessed, &parms, NULL );
//
//}
//
//void AwArrangeTurret::eventVehicleDestroyed ( class AVehicle* V )
//{
//	static UFunction* pVehicleDestroyed = 0;
//	AwArrangeTurret_eventVehicleDestroyed_Parms parms;
//
//	if ( !pVehicleDestroyed )
//		pVehicleDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wArrangeTurret.VehicleDestroyed" );
//
//	parms.V = V;
//	this->ProcessEvent ( pVehicleDestroyed, &parms, NULL );
//
//}
//
//void AwArrangeTurret::PreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AwArrangeTurret_execPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wArrangeTurret.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void AAnnouncerVoice::PrecacheList (  )
//{
//	static UFunction* pPrecacheList = 0;
//	AAnnouncerVoice_execPrecacheList_Parms parms;
//
//	if ( !pPrecacheList )
//		pPrecacheList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerVoice.PrecacheList" );
//
//	this->ProcessEvent ( pPrecacheList, &parms, NULL );
//
//}
//
//void AAnnouncerVoice::PrecacheAnnouncements ( bool bRewardSounds )
//{
//	static UFunction* pPrecacheAnnouncements = 0;
//	AAnnouncerVoice_execPrecacheAnnouncements_Parms parms;
//
//	if ( !pPrecacheAnnouncements )
//		pPrecacheAnnouncements = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerVoice.PrecacheAnnouncements" );
//
//	parms.bRewardSounds = bRewardSounds;
//	this->ProcessEvent ( pPrecacheAnnouncements, &parms, NULL );
//
//}
//
//class USound* AAnnouncerVoice::PrecacheFallbackPackage ( struct FString Package, struct FString AName, struct FString strFullName )
//{
//	static UFunction* pPrecacheFallbackPackage = 0;
//	AAnnouncerVoice_execPrecacheFallbackPackage_Parms parms;
//
//	if ( !pPrecacheFallbackPackage )
//		pPrecacheFallbackPackage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerVoice.PrecacheFallbackPackage" );
//
//	parms.Package = Package;
//	parms.AName = AName;
//	parms.strFullName = strFullName;
//	this->ProcessEvent ( pPrecacheFallbackPackage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAnnouncerVoice::ResetPrecacheSound (  )
//{
//	static UFunction* pResetPrecacheSound = 0;
//	AAnnouncerVoice_execResetPrecacheSound_Parms parms;
//
//	if ( !pResetPrecacheSound )
//		pResetPrecacheSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerVoice.ResetPrecacheSound" );
//
//	this->ProcessEvent ( pResetPrecacheSound, &parms, NULL );
//
//}
//
//class USound* AAnnouncerVoice::PrecacheSound ( struct FString AName, struct FString strFullName )
//{
//	static UFunction* pPrecacheSound = 0;
//	AAnnouncerVoice_execPrecacheSound_Parms parms;
//
//	if ( !pPrecacheSound )
//		pPrecacheSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerVoice.PrecacheSound" );
//
//	parms.AName = AName;
//	parms.strFullName = strFullName;
//	this->ProcessEvent ( pPrecacheSound, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class USound* AAnnouncerVoice::eventGetSound ( struct FString AName )
//{
//	static UFunction* pGetSound = 0;
//	AAnnouncerVoice_eventGetSound_Parms parms;
//
//	if ( !pGetSound )
//		pGetSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerVoice.GetSound" );
//
//	parms.AName = AName;
//	this->ProcessEvent ( pGetSound, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AHoverPathNode::eventSpecialCost ( class APawn* Other, class UReachSpec* Path )
//{
//	static UFunction* pSpecialCost = 0;
//	AHoverPathNode_eventSpecialCost_Parms parms;
//
//	if ( !pSpecialCost )
//		pSpecialCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HoverPathNode.SpecialCost" );
//
//	parms.Other = Other;
//	parms.Path = Path;
//	this->ProcessEvent ( pSpecialCost, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UGameProfile::CanChangeTeam ( class AController* Other, int NewTeam )
//{
//	static UFunction* pCanChangeTeam = 0;
//	UGameProfile_execCanChangeTeam_Parms parms;
//
//	if ( !pCanChangeTeam )
//		pCanChangeTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.CanChangeTeam" );
//
//	parms.Other = Other;
//	parms.NewTeam = NewTeam;
//	this->ProcessEvent ( pCanChangeTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UGameProfile::ReportCheat ( class APlayerController* Cheater, struct FString cheat )
//{
//	static UFunction* pReportCheat = 0;
//	UGameProfile_execReportCheat_Parms parms;
//
//	if ( !pReportCheat )
//		pReportCheat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.ReportCheat" );
//
//	parms.Cheater = Cheater;
//	parms.cheat = cheat;
//	this->ProcessEvent ( pReportCheat, &parms, NULL );
//
//}
//
//void UGameProfile::ClearTeammates (  )
//{
//	static UFunction* pClearTeammates = 0;
//	UGameProfile_execClearTeammates_Parms parms;
//
//	if ( !pClearTeammates )
//		pClearTeammates = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.ClearTeammates" );
//
//	this->ProcessEvent ( pClearTeammates, &parms, NULL );
//
//}
//
//bool UGameProfile::ReleaseTeammate ( struct FString botname )
//{
//	static UFunction* pReleaseTeammate = 0;
//	UGameProfile_execReleaseTeammate_Parms parms;
//
//	if ( !pReleaseTeammate )
//		pReleaseTeammate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.ReleaseTeammate" );
//
//	parms.botname = botname;
//	this->ProcessEvent ( pReleaseTeammate, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UGameProfile::AddTeammate ( struct FString botname )
//{
//	static UFunction* pAddTeammate = 0;
//	UGameProfile_execAddTeammate_Parms parms;
//
//	if ( !pAddTeammate )
//		pAddTeammate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.AddTeammate" );
//
//	parms.botname = botname;
//	this->ProcessEvent ( pAddTeammate, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UGameProfile::SetLineup ( int lineuppos, int teampos )
//{
//	static UFunction* pSetLineup = 0;
//	UGameProfile_execSetLineup_Parms parms;
//
//	if ( !pSetLineup )
//		pSetLineup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.SetLineup" );
//
//	parms.lineuppos = lineuppos;
//	parms.teampos = teampos;
//	this->ProcessEvent ( pSetLineup, &parms, NULL );
//
//}
//
//void UGameProfile::SetPosition ( int lineupnum, struct FString posn )
//{
//	static UFunction* pSetPosition = 0;
//	UGameProfile_execSetPosition_Parms parms;
//
//	if ( !pSetPosition )
//		pSetPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.SetPosition" );
//
//	parms.lineupnum = lineupnum;
//	parms.posn = posn;
//	this->ProcessEvent ( pSetPosition, &parms, NULL );
//
//}
//
//struct FString UGameProfile::GetPositionDescription ( int PlayerNum )
//{
//	static UFunction* pGetPositionDescription = 0;
//	UGameProfile_execGetPositionDescription_Parms parms;
//
//	if ( !pGetPositionDescription )
//		pGetPositionDescription = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.GetPositionDescription" );
//
//	parms.PlayerNum = PlayerNum;
//	this->ProcessEvent ( pGetPositionDescription, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char UGameProfile::EnumPositionDescription ( struct FString posnval )
//{
//	static UFunction* pEnumPositionDescription = 0;
//	UGameProfile_execEnumPositionDescription_Parms parms;
//
//	if ( !pEnumPositionDescription )
//		pEnumPositionDescription = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.EnumPositionDescription" );
//
//	parms.posnval = posnval;
//	this->ProcessEvent ( pEnumPositionDescription, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UGameProfile::TextPositionDescription ( int posnval )
//{
//	static UFunction* pTextPositionDescription = 0;
//	UGameProfile_execTextPositionDescription_Parms parms;
//
//	if ( !pTextPositionDescription )
//		pTextPositionDescription = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.TextPositionDescription" );
//
//	parms.posnval = posnval;
//	this->ProcessEvent ( pTextPositionDescription, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UGameProfile::GetNumTeammatesForMatch (  )
//{
//	static UFunction* pGetNumTeammatesForMatch = 0;
//	UGameProfile_execGetNumTeammatesForMatch_Parms parms;
//
//	if ( !pGetNumTeammatesForMatch )
//		pGetNumTeammatesForMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.GetNumTeammatesForMatch" );
//
//	this->ProcessEvent ( pGetNumTeammatesForMatch, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UGameProfile::GetNumPositions (  )
//{
//	static UFunction* pGetNumPositions = 0;
//	UGameProfile_execGetNumPositions_Parms parms;
//
//	if ( !pGetNumPositions )
//		pGetNumPositions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.GetNumPositions" );
//
//	this->ProcessEvent ( pGetNumPositions, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UGameProfile::GetMatchDescription (  )
//{
//	static UFunction* pGetMatchDescription = 0;
//	UGameProfile_execGetMatchDescription_Parms parms;
//
//	if ( !pGetMatchDescription )
//		pGetMatchDescription = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.GetMatchDescription" );
//
//	this->ProcessEvent ( pGetMatchDescription, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UGameProfile::ContinueSinglePlayerGame ( class ALevelInfo* Level, bool bReplace )
//{
//	static UFunction* pContinueSinglePlayerGame = 0;
//	UGameProfile_execContinueSinglePlayerGame_Parms parms;
//
//	if ( !pContinueSinglePlayerGame )
//		pContinueSinglePlayerGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.ContinueSinglePlayerGame" );
//
//	parms.Level = Level;
//	parms.bReplace = bReplace;
//	this->ProcessEvent ( pContinueSinglePlayerGame, &parms, NULL );
//
//}
//
//int UGameProfile::FindFirstUnfinishedLadder (  )
//{
//	static UFunction* pFindFirstUnfinishedLadder = 0;
//	UGameProfile_execFindFirstUnfinishedLadder_Parms parms;
//
//	if ( !pFindFirstUnfinishedLadder )
//		pFindFirstUnfinishedLadder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.FindFirstUnfinishedLadder" );
//
//	this->ProcessEvent ( pFindFirstUnfinishedLadder, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UGameProfile::StartNewMatch ( int PickedLadder, class ALevelInfo* CurrentLevel )
//{
//	static UFunction* pStartNewMatch = 0;
//	UGameProfile_execStartNewMatch_Parms parms;
//
//	if ( !pStartNewMatch )
//		pStartNewMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.StartNewMatch" );
//
//	parms.PickedLadder = PickedLadder;
//	parms.CurrentLevel = CurrentLevel;
//	this->ProcessEvent ( pStartNewMatch, &parms, NULL );
//
//}
//
//void UGameProfile::RegisterGame ( class AGameInfo* currentGame, class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pRegisterGame = 0;
//	UGameProfile_execRegisterGame_Parms parms;
//
//	if ( !pRegisterGame )
//		pRegisterGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.RegisterGame" );
//
//	parms.currentGame = currentGame;
//	parms.PRI = PRI;
//	this->ProcessEvent ( pRegisterGame, &parms, NULL );
//
//}
//
//class UMatchInfo* UGameProfile::GetMatchInfo ( int Ladder, int rung )
//{
//	static UFunction* pGetMatchInfo = 0;
//	UGameProfile_execGetMatchInfo_Parms parms;
//
//	if ( !pGetMatchInfo )
//		pGetMatchInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.GetMatchInfo" );
//
//	parms.Ladder = Ladder;
//	parms.rung = rung;
//	this->ProcessEvent ( pGetMatchInfo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UGameProfile::CheatJumpMatch ( class AGameInfo* currentGame, int Param )
//{
//	static UFunction* pCheatJumpMatch = 0;
//	UGameProfile_execCheatJumpMatch_Parms parms;
//
//	if ( !pCheatJumpMatch )
//		pCheatJumpMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.CheatJumpMatch" );
//
//	parms.currentGame = currentGame;
//	parms.Param = Param;
//	this->ProcessEvent ( pCheatJumpMatch, &parms, NULL );
//
//}
//
//void UGameProfile::CheatSkipMatch ( class AGameInfo* currentGame )
//{
//	static UFunction* pCheatSkipMatch = 0;
//	UGameProfile_execCheatSkipMatch_Parms parms;
//
//	if ( !pCheatSkipMatch )
//		pCheatSkipMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.CheatSkipMatch" );
//
//	parms.currentGame = currentGame;
//	this->ProcessEvent ( pCheatSkipMatch, &parms, NULL );
//
//}
//
//void UGameProfile::Initialize ( class AGameInfo* currentGame, struct FString pn )
//{
//	static UFunction* pInitialize = 0;
//	UGameProfile_execInitialize_Parms parms;
//
//	if ( !pInitialize )
//		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameProfile.Initialize" );
//
//	parms.currentGame = currentGame;
//	parms.pn = pn;
//	this->ProcessEvent ( pInitialize, &parms, NULL );
//
//}
//
//void AMutator::DriverLeftVehicle ( class AVehicle* V, class APawn* P )
//{
//	static UFunction* pDriverLeftVehicle = 0;
//	AMutator_execDriverLeftVehicle_Parms parms;
//
//	if ( !pDriverLeftVehicle )
//		pDriverLeftVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.DriverLeftVehicle" );
//
//	parms.V = V;
//	parms.P = P;
//	this->ProcessEvent ( pDriverLeftVehicle, &parms, NULL );
//
//}
//
//bool AMutator::CanLeaveVehicle ( class AVehicle* V, class APawn* P )
//{
//	static UFunction* pCanLeaveVehicle = 0;
//	AMutator_execCanLeaveVehicle_Parms parms;
//
//	if ( !pCanLeaveVehicle )
//		pCanLeaveVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.CanLeaveVehicle" );
//
//	parms.V = V;
//	parms.P = P;
//	this->ProcessEvent ( pCanLeaveVehicle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMutator::DriverEnteredVehicle ( class AVehicle* V, class APawn* P )
//{
//	static UFunction* pDriverEnteredVehicle = 0;
//	AMutator_execDriverEnteredVehicle_Parms parms;
//
//	if ( !pDriverEnteredVehicle )
//		pDriverEnteredVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.DriverEnteredVehicle" );
//
//	parms.V = V;
//	parms.P = P;
//	this->ProcessEvent ( pDriverEnteredVehicle, &parms, NULL );
//
//}
//
//bool AMutator::CanEnterVehicle ( class AVehicle* V, class APawn* P )
//{
//	static UFunction* pCanEnterVehicle = 0;
//	AMutator_execCanEnterVehicle_Parms parms;
//
//	if ( !pCanEnterVehicle )
//		pCanEnterVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.CanEnterVehicle" );
//
//	parms.V = V;
//	parms.P = P;
//	this->ProcessEvent ( pCanEnterVehicle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMutator::ServerTraveling ( struct FString URL, bool bItems )
//{
//	static UFunction* pServerTraveling = 0;
//	AMutator_execServerTraveling_Parms parms;
//
//	if ( !pServerTraveling )
//		pServerTraveling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.ServerTraveling" );
//
//	parms.URL = URL;
//	parms.bItems = bItems;
//	this->ProcessEvent ( pServerTraveling, &parms, NULL );
//
//}
//
//bool AMutator::eventOverrideDownload ( struct FString PlayerIP, struct FString PlayerID, struct FString PlayerURL, struct FString* RedirectURL )
//{
//	static UFunction* pOverrideDownload = 0;
//	AMutator_eventOverrideDownload_Parms parms;
//
//	if ( !pOverrideDownload )
//		pOverrideDownload = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.OverrideDownload" );
//
//	parms.PlayerIP = PlayerIP;
//	parms.PlayerID = PlayerID;
//	parms.PlayerURL = PlayerURL;
//	this->ProcessEvent ( pOverrideDownload, &parms, NULL );
//
//	*RedirectURL = parms.RedirectURL;
//	return parms.ReturnValue;
//}
//
//void AMutator::MutatorFillPlayInfo ( class UPlayInfo* PlayInfo )
//{
//	static UFunction* pMutatorFillPlayInfo = 0;
//	AMutator_execMutatorFillPlayInfo_Parms parms;
//
//	if ( !pMutatorFillPlayInfo )
//		pMutatorFillPlayInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.MutatorFillPlayInfo" );
//
//	parms.PlayInfo = PlayInfo;
//	this->ProcessEvent ( pMutatorFillPlayInfo, &parms, NULL );
//
//}
//
//struct FString AMutator::ParseChatPercVar ( class AController* Who, struct FString Cmd )
//{
//	static UFunction* pParseChatPercVar = 0;
//	AMutator_execParseChatPercVar_Parms parms;
//
//	if ( !pParseChatPercVar )
//		pParseChatPercVar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.ParseChatPercVar" );
//
//	parms.Who = Who;
//	parms.Cmd = Cmd;
//	this->ProcessEvent ( pParseChatPercVar, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMutator::GetServerPlayers ( struct FServerResponseLine* ServerState )
//{
//	static UFunction* pGetServerPlayers = 0;
//	AMutator_execGetServerPlayers_Parms parms;
//
//	if ( !pGetServerPlayers )
//		pGetServerPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.GetServerPlayers" );
//
//	parms.ServerState = *ServerState;
//	this->ProcessEvent ( pGetServerPlayers, &parms, NULL );
//
//	*ServerState = parms.ServerState;
//}
//
//void AMutator::GetServerDetails ( struct FServerResponseLine* ServerState )
//{
//	static UFunction* pGetServerDetails = 0;
//	AMutator_execGetServerDetails_Parms parms;
//
//	if ( !pGetServerDetails )
//		pGetServerDetails = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.GetServerDetails" );
//
//	parms.ServerState = *ServerState;
//	this->ProcessEvent ( pGetServerDetails, &parms, NULL );
//
//	*ServerState = parms.ServerState;
//}
//
//void AMutator::PlayerChangedClass ( class AController* aPlayer )
//{
//	static UFunction* pPlayerChangedClass = 0;
//	AMutator_execPlayerChangedClass_Parms parms;
//
//	if ( !pPlayerChangedClass )
//		pPlayerChangedClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.PlayerChangedClass" );
//
//	parms.aPlayer = aPlayer;
//	this->ProcessEvent ( pPlayerChangedClass, &parms, NULL );
//
//}
//
//bool AMutator::CheckReplacement ( class AActor* Other, unsigned char* bSuperRelevant )
//{
//	static UFunction* pCheckReplacement = 0;
//	AMutator_execCheckReplacement_Parms parms;
//
//	if ( !pCheckReplacement )
//		pCheckReplacement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.CheckReplacement" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pCheckReplacement, &parms, NULL );
//
//	*bSuperRelevant = parms.bSuperRelevant;
//	return parms.ReturnValue;
//}
//
//bool AMutator::CheckRelevance ( class AActor* Other )
//{
//	static UFunction* pCheckRelevance = 0;
//	AMutator_execCheckRelevance_Parms parms;
//
//	if ( !pCheckRelevance )
//		pCheckRelevance = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.CheckRelevance" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pCheckRelevance, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMutator::IsRelevant ( class AActor* Other, unsigned char* bSuperRelevant )
//{
//	static UFunction* pIsRelevant = 0;
//	AMutator_execIsRelevant_Parms parms;
//
//	if ( !pIsRelevant )
//		pIsRelevant = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.IsRelevant" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pIsRelevant, &parms, NULL );
//
//	*bSuperRelevant = parms.bSuperRelevant;
//	return parms.ReturnValue;
//}
//
//bool AMutator::AlwaysKeep ( class AActor* Other )
//{
//	static UFunction* pAlwaysKeep = 0;
//	AMutator_execAlwaysKeep_Parms parms;
//
//	if ( !pAlwaysKeep )
//		pAlwaysKeep = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.AlwaysKeep" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pAlwaysKeep, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMutator::ReplaceWith ( class AActor* Other, struct FString aClassName )
//{
//	static UFunction* pReplaceWith = 0;
//	AMutator_execReplaceWith_Parms parms;
//
//	if ( !pReplaceWith )
//		pReplaceWith = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.ReplaceWith" );
//
//	parms.Other = Other;
//	parms.aClassName = aClassName;
//	this->ProcessEvent ( pReplaceWith, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AMutator::NewRecommendCombo ( struct FString ComboName, class AAIController* C )
//{
//	static UFunction* pNewRecommendCombo = 0;
//	AMutator_execNewRecommendCombo_Parms parms;
//
//	if ( !pNewRecommendCombo )
//		pNewRecommendCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.NewRecommendCombo" );
//
//	parms.ComboName = ComboName;
//	parms.C = C;
//	this->ProcessEvent ( pNewRecommendCombo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AMutator::RecommendCombo ( struct FString ComboName )
//{
//	static UFunction* pRecommendCombo = 0;
//	AMutator_execRecommendCombo_Parms parms;
//
//	if ( !pRecommendCombo )
//		pRecommendCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.RecommendCombo" );
//
//	parms.ComboName = ComboName;
//	this->ProcessEvent ( pRecommendCombo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMutator::AddMutator ( class AMutator* M )
//{
//	static UFunction* pAddMutator = 0;
//	AMutator_execAddMutator_Parms parms;
//
//	if ( !pAddMutator )
//		pAddMutator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.AddMutator" );
//
//	parms.M = M;
//	this->ProcessEvent ( pAddMutator, &parms, NULL );
//
//}
//
//class UClass* AMutator::MyDefaultWeapon (  )
//{
//	static UFunction* pMyDefaultWeapon = 0;
//	AMutator_execMyDefaultWeapon_Parms parms;
//
//	if ( !pMyDefaultWeapon )
//		pMyDefaultWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.MyDefaultWeapon" );
//
//	this->ProcessEvent ( pMyDefaultWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AMutator::GetInventoryClassOverride ( struct FString InventoryClassName )
//{
//	static UFunction* pGetInventoryClassOverride = 0;
//	AMutator_execGetInventoryClassOverride_Parms parms;
//
//	if ( !pGetInventoryClassOverride )
//		pGetInventoryClassOverride = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.GetInventoryClassOverride" );
//
//	parms.InventoryClassName = InventoryClassName;
//	this->ProcessEvent ( pGetInventoryClassOverride, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UClass* AMutator::GetInventoryClass ( struct FString InventoryClassName )
//{
//	static UFunction* pGetInventoryClass = 0;
//	AMutator_execGetInventoryClass_Parms parms;
//
//	if ( !pGetInventoryClass )
//		pGetInventoryClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.GetInventoryClass" );
//
//	parms.InventoryClassName = InventoryClassName;
//	this->ProcessEvent ( pGetInventoryClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UClass* AMutator::GetDefaultWeapon (  )
//{
//	static UFunction* pGetDefaultWeapon = 0;
//	AMutator_execGetDefaultWeapon_Parms parms;
//
//	if ( !pGetDefaultWeapon )
//		pGetDefaultWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.GetDefaultWeapon" );
//
//	this->ProcessEvent ( pGetDefaultWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMutator::ModifyPlayer ( class APawn* Other )
//{
//	static UFunction* pModifyPlayer = 0;
//	AMutator_execModifyPlayer_Parms parms;
//
//	if ( !pModifyPlayer )
//		pModifyPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.ModifyPlayer" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pModifyPlayer, &parms, NULL );
//
//}
//
//void AMutator::NotifyLogout ( class AController* Exiting )
//{
//	static UFunction* pNotifyLogout = 0;
//	AMutator_execNotifyLogout_Parms parms;
//
//	if ( !pNotifyLogout )
//		pNotifyLogout = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.NotifyLogout" );
//
//	parms.Exiting = Exiting;
//	this->ProcessEvent ( pNotifyLogout, &parms, NULL );
//
//}
//
//void AMutator::ModifyLogin ( struct FString* Portal, struct FString* Options )
//{
//	static UFunction* pModifyLogin = 0;
//	AMutator_execModifyLogin_Parms parms;
//
//	if ( !pModifyLogin )
//		pModifyLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.ModifyLogin" );
//
//	parms.Portal = *Portal;
//	parms.Options = *Options;
//	this->ProcessEvent ( pModifyLogin, &parms, NULL );
//
//	*Portal = parms.Portal;
//	*Options = parms.Options;
//}
//
//void AMutator::Mutate ( struct FString MutateString, class APlayerController* Sender )
//{
//	static UFunction* pMutate = 0;
//	AMutator_execMutate_Parms parms;
//
//	if ( !pMutate )
//		pMutate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.Mutate" );
//
//	parms.MutateString = MutateString;
//	parms.Sender = Sender;
//	this->ProcessEvent ( pMutate, &parms, NULL );
//
//}
//
//void AMutator::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AMutator_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//bool AMutator::MutatorIsAllowed (  )
//{
//	static UFunction* pMutatorIsAllowed = 0;
//	AMutator_execMutatorIsAllowed_Parms parms;
//
//	if ( !pMutatorIsAllowed )
//		pMutatorIsAllowed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.MutatorIsAllowed" );
//
//	this->ProcessEvent ( pMutatorIsAllowed, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMutator::eventPreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AMutator_eventPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Mutator.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void AAvoidMarker::StartleBots (  )
//{
//	static UFunction* pStartleBots = 0;
//	AAvoidMarker_execStartleBots_Parms parms;
//
//	if ( !pStartleBots )
//		pStartleBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AvoidMarker.StartleBots" );
//
//	this->ProcessEvent ( pStartleBots, &parms, NULL );
//
//}
//
//bool AAvoidMarker::RelevantTo ( class APawn* P )
//{
//	static UFunction* pRelevantTo = 0;
//	AAvoidMarker_execRelevantTo_Parms parms;
//
//	if ( !pRelevantTo )
//		pRelevantTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AvoidMarker.RelevantTo" );
//
//	parms.P = P;
//	this->ProcessEvent ( pRelevantTo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAvoidMarker::Touch ( class AActor* Other )
//{
//	static UFunction* pTouch = 0;
//	AAvoidMarker_execTouch_Parms parms;
//
//	if ( !pTouch )
//		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AvoidMarker.Touch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTouch, &parms, NULL );
//
//}
//
//bool AJumpDest::eventSuggestMovePreparation ( class APawn* Other )
//{
//	static UFunction* pSuggestMovePreparation = 0;
//	AJumpDest_eventSuggestMovePreparation_Parms parms;
//
//	if ( !pSuggestMovePreparation )
//		pSuggestMovePreparation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.JumpDest.SuggestMovePreparation" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSuggestMovePreparation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AJumpDest::DoJump ( class APawn* Other )
//{
//	static UFunction* pDoJump = 0;
//	AJumpDest_execDoJump_Parms parms;
//
//	if ( !pDoJump )
//		pDoJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.JumpDest.DoJump" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pDoJump, &parms, NULL );
//
//}
//
//int AJumpDest::eventSpecialCost ( class APawn* Other, class UReachSpec* Path )
//{
//	static UFunction* pSpecialCost = 0;
//	AJumpDest_eventSpecialCost_Parms parms;
//
//	if ( !pSpecialCost )
//		pSpecialCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.JumpDest.SpecialCost" );
//
//	parms.Other = Other;
//	parms.Path = Path;
//	this->ProcessEvent ( pSpecialCost, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AJumpDest::GetPathIndex ( class UReachSpec* Path )
//{
//	static UFunction* pGetPathIndex = 0;
//	AJumpDest_execGetPathIndex_Parms parms;
//
//	if ( !pGetPathIndex )
//		pGetPathIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.JumpDest.GetPathIndex" );
//
//	parms.Path = Path;
//	this->ProcessEvent ( pGetPathIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AJumpPad::eventPostTouch ( class AActor* Other )
//{
//	static UFunction* pPostTouch = 0;
//	AJumpPad_eventPostTouch_Parms parms;
//
//	if ( !pPostTouch )
//		pPostTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.JumpPad.PostTouch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pPostTouch, &parms, NULL );
//
//}
//
//void AJumpPad::eventTouch ( class AActor* Other )
//{
//	static UFunction* pTouch = 0;
//	AJumpPad_eventTouch_Parms parms;
//
//	if ( !pTouch )
//		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.JumpPad.Touch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTouch, &parms, NULL );
//
//}
//
//void AJumpPad::Reset (  )
//{
//	static UFunction* pReset = 0;
//	AJumpPad_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.JumpPad.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void AJumpPad::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AJumpPad_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.JumpPad.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AInventoryAttachment::InitFor ( class AInventory* i )
//{
//	static UFunction* pInitFor = 0;
//	AInventoryAttachment_execInitFor_Parms parms;
//
//	if ( !pInitFor )
//		pInitFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InventoryAttachment.InitFor" );
//
//	parms.i = i;
//	this->ProcessEvent ( pInitFor, &parms, NULL );
//
//}
//
//struct FCoords AWeaponAttachment::GetBoneTipLocation1st (  )
//{
//	static UFunction* pGetBoneTipLocation1st = 0;
//	AWeaponAttachment_execGetBoneTipLocation1st_Parms parms;
//
//	if ( !pGetBoneTipLocation1st )
//		pGetBoneTipLocation1st = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponAttachment.GetBoneTipLocation1st" );
//
//	this->ProcessEvent ( pGetBoneTipLocation1st, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FCoords AWeaponAttachment::GetBoneTipLocation3rd (  )
//{
//	static UFunction* pGetBoneTipLocation3rd = 0;
//	AWeaponAttachment_execGetBoneTipLocation3rd_Parms parms;
//
//	if ( !pGetBoneTipLocation3rd )
//		pGetBoneTipLocation3rd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponAttachment.GetBoneTipLocation3rd" );
//
//	this->ProcessEvent ( pGetBoneTipLocation3rd, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FName AWeaponAttachment::GetBoneNameRotation (  )
//{
//	static UFunction* pGetBoneNameRotation = 0;
//	AWeaponAttachment_execGetBoneNameRotation_Parms parms;
//
//	if ( !pGetBoneNameRotation )
//		pGetBoneNameRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponAttachment.GetBoneNameRotation" );
//
//	this->ProcessEvent ( pGetBoneNameRotation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FName AWeaponAttachment::GetBoneNameTip (  )
//{
//	static UFunction* pGetBoneNameTip = 0;
//	AWeaponAttachment_execGetBoneNameTip_Parms parms;
//
//	if ( !pGetBoneNameTip )
//		pGetBoneNameTip = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponAttachment.GetBoneNameTip" );
//
//	this->ProcessEvent ( pGetBoneNameTip, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AWeaponAttachment::eventwLoadOut ( int iID, int iAddPartsID )
//{
//	static UFunction* pwLoadOut = 0;
//	AWeaponAttachment_eventwLoadOut_Parms parms;
//
//	if ( !pwLoadOut )
//		pwLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponAttachment.wLoadOut" );
//
//	parms.iID = iID;
//	parms.iAddPartsID = iAddPartsID;
//	this->ProcessEvent ( pwLoadOut, &parms, NULL );
//
//}
//
////void AWeaponAttachment::eventUpdatePenetrateHit ( class AActor** mHitActor, struct FVector* mHitLocation, struct FVector* mHitNormal, class UMaterial** mHitMaterial, int mLastHitIdx )
////{
////	static UFunction* pUpdatePenetrateHit = 0;
////	AWeaponAttachment_eventUpdatePenetrateHit_Parms parms;
////
////	if ( !pUpdatePenetrateHit )
////		pUpdatePenetrateHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponAttachment.UpdatePenetrateHit" );
////
////	parms.mHitActor = mHitActor;
////	parms.mHitLocation = mHitLocation;
////	parms.mHitNormal = mHitNormal;
////	parms.mHitMaterial = mHitMaterial;
////	parms.mLastHitIdx = mLastHitIdx;
////	this->ProcessEvent ( pUpdatePenetrateHit, &parms, NULL );
////
////}
//
//void AWeaponAttachment::eventUpdateHit ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, class UMaterial* HitMaterial )
//{
//	static UFunction* pUpdateHit = 0;
//	AWeaponAttachment_eventUpdateHit_Parms parms;
//
//	if ( !pUpdateHit )
//		pUpdateHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponAttachment.UpdateHit" );
//
//	parms.HitActor = HitActor;
//	parms.HitLocation = HitLocation;
//	parms.HitNormal = HitNormal;
//	parms.HitMaterial = HitMaterial;
//	this->ProcessEvent ( pUpdateHit, &parms, NULL );
//
//}
//
//void AWeaponAttachment::CheckForSplash ( int nIndex, int i )
//{
//	static UFunction* pCheckForSplash = 0;
//	AWeaponAttachment_execCheckForSplash_Parms parms;
//
//	if ( !pCheckForSplash )
//		pCheckForSplash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponAttachment.CheckForSplash" );
//
//	parms.nIndex = nIndex;
//	parms.i = i;
//	this->ProcessEvent ( pCheckForSplash, &parms, NULL );
//
//}
//
//void AWeaponAttachment::eventThirdPersonEffects (  )
//{
//	static UFunction* pThirdPersonEffects = 0;
//	AWeaponAttachment_eventThirdPersonEffects_Parms parms;
//
//	if ( !pThirdPersonEffects )
//		pThirdPersonEffects = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponAttachment.ThirdPersonEffects" );
//
//	this->ProcessEvent ( pThirdPersonEffects, &parms, NULL );
//
//}
//
//void AWeaponAttachment::FakeThirdPersonEffects ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, class UMaterial* HitMaterial )
//{
//	static UFunction* pFakeThirdPersonEffects = 0;
//	AWeaponAttachment_execFakeThirdPersonEffects_Parms parms;
//
//	if ( !pFakeThirdPersonEffects )
//		pFakeThirdPersonEffects = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponAttachment.FakeThirdPersonEffects" );
//
//	parms.HitActor = HitActor;
//	parms.HitLocation = HitLocation;
//	parms.HitNormal = HitNormal;
//	parms.HitMaterial = HitMaterial;
//	this->ProcessEvent ( pFakeThirdPersonEffects, &parms, NULL );
//
//}
//
//void AWeaponAttachment::FakeUpdateTracer ( struct FVector LastHitLocation )
//{
//	static UFunction* pFakeUpdateTracer = 0;
//	AWeaponAttachment_execFakeUpdateTracer_Parms parms;
//
//	if ( !pFakeUpdateTracer )
//		pFakeUpdateTracer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponAttachment.FakeUpdateTracer" );
//
//	parms.LastHitLocation = LastHitLocation;
//	this->ProcessEvent ( pFakeUpdateTracer, &parms, NULL );
//
//}
//
//void AWeaponAttachment::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AWeaponAttachment_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponAttachment.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AWeaponAttachment::ClearArray (  )
//{
//	static UFunction* pClearArray = 0;
//	AWeaponAttachment_execClearArray_Parms parms;
//
//	if ( !pClearArray )
//		pClearArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponAttachment.ClearArray" );
//
//	this->ProcessEvent ( pClearArray, &parms, NULL );
//
//}
//
//void ATeamInfo::GetAllCharacters ( class TArray< struct FString >* Chars )
//{
//	static UFunction* pGetAllCharacters = 0;
//	ATeamInfo_execGetAllCharacters_Parms parms;
//
//	if ( !pGetAllCharacters )
//		pGetAllCharacters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TeamInfo.GetAllCharacters" );
//
//	parms.Chars = *Chars;
//	this->ProcessEvent ( pGetAllCharacters, &parms, NULL );
//
//	*Chars = parms.Chars;
//}
//
//void ATeamInfo::SetCharacters ( class TArray< struct FString > Chars )
//{
//	static UFunction* pSetCharacters = 0;
//	ATeamInfo_execSetCharacters_Parms parms;
//
//	if ( !pSetCharacters )
//		pSetCharacters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TeamInfo.SetCharacters" );
//
//	parms.Chars = Chars;
//	this->ProcessEvent ( pSetCharacters, &parms, NULL );
//
//}
//
//void ATeamInfo::RemoveFromTeam ( class AController* Other )
//{
//	static UFunction* pRemoveFromTeam = 0;
//	ATeamInfo_execRemoveFromTeam_Parms parms;
//
//	if ( !pRemoveFromTeam )
//		pRemoveFromTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TeamInfo.RemoveFromTeam" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pRemoveFromTeam, &parms, NULL );
//
//}
//
//bool ATeamInfo::AddToTeam ( class AController* Other )
//{
//	static UFunction* pAddToTeam = 0;
//	ATeamInfo_execAddToTeam_Parms parms;
//
//	if ( !pAddToTeam )
//		pAddToTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TeamInfo.AddToTeam" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pAddToTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString ATeamInfo::GetHumanReadableName (  )
//{
//	static UFunction* pGetHumanReadableName = 0;
//	ATeamInfo_execGetHumanReadableName_Parms parms;
//
//	if ( !pGetHumanReadableName )
//		pGetHumanReadableName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TeamInfo.GetHumanReadableName" );
//
//	this->ProcessEvent ( pGetHumanReadableName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ATeamInfo::BelongsOnTeam ( class UClass* PawnClass )
//{
//	static UFunction* pBelongsOnTeam = 0;
//	ATeamInfo_execBelongsOnTeam_Parms parms;
//
//	if ( !pBelongsOnTeam )
//		pBelongsOnTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TeamInfo.BelongsOnTeam" );
//
//	parms.PawnClass = PawnClass;
//	this->ProcessEvent ( pBelongsOnTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int ATeamInfo::GetUAVTime (  )
//{
//	static UFunction* pGetUAVTime = 0;
//	ATeamInfo_execGetUAVTime_Parms parms;
//
//	if ( !pGetUAVTime )
//		pGetUAVTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TeamInfo.GetUAVTime" );
//
//	this->ProcessEvent ( pGetUAVTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ATeamInfo::IsUAVOn (  )
//{
//	static UFunction* pIsUAVOn = 0;
//	ATeamInfo_execIsUAVOn_Parms parms;
//
//	if ( !pIsUAVOn )
//		pIsUAVOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TeamInfo.IsUAVOn" );
//
//	this->ProcessEvent ( pIsUAVOn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ATeamInfo::SetUAV (  )
//{
//	static UFunction* pSetUAV = 0;
//	ATeamInfo_execSetUAV_Parms parms;
//
//	if ( !pSetUAV )
//		pSetUAV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.TeamInfo.SetUAV" );
//
//	this->ProcessEvent ( pSetUAV, &parms, NULL );
//
//}
//
//bool ADoor::eventSuggestMovePreparation ( class APawn* Other )
//{
//	static UFunction* pSuggestMovePreparation = 0;
//	ADoor_eventSuggestMovePreparation_Parms parms;
//
//	if ( !pSuggestMovePreparation )
//		pSuggestMovePreparation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Door.SuggestMovePreparation" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSuggestMovePreparation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ADoor::ProceedWithMove ( class APawn* Other )
//{
//	static UFunction* pProceedWithMove = 0;
//	ADoor_execProceedWithMove_Parms parms;
//
//	if ( !pProceedWithMove )
//		pProceedWithMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Door.ProceedWithMove" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pProceedWithMove, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* ADoor::SpecialHandling ( class APawn* Other )
//{
//	static UFunction* pSpecialHandling = 0;
//	ADoor_execSpecialHandling_Parms parms;
//
//	if ( !pSpecialHandling )
//		pSpecialHandling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Door.SpecialHandling" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSpecialHandling, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ADoor::MoverClosed (  )
//{
//	static UFunction* pMoverClosed = 0;
//	ADoor_execMoverClosed_Parms parms;
//
//	if ( !pMoverClosed )
//		pMoverClosed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Door.MoverClosed" );
//
//	this->ProcessEvent ( pMoverClosed, &parms, NULL );
//
//}
//
//void ADoor::MoverOpened (  )
//{
//	static UFunction* pMoverOpened = 0;
//	ADoor_execMoverOpened_Parms parms;
//
//	if ( !pMoverOpened )
//		pMoverOpened = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Door.MoverOpened" );
//
//	this->ProcessEvent ( pMoverOpened, &parms, NULL );
//
//}
//
//void ADoor::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	ADoor_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Door.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//bool ALadder::eventSuggestMovePreparation ( class APawn* Other )
//{
//	static UFunction* pSuggestMovePreparation = 0;
//	ALadder_eventSuggestMovePreparation_Parms parms;
//
//	if ( !pSuggestMovePreparation )
//		pSuggestMovePreparation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Ladder.SuggestMovePreparation" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSuggestMovePreparation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UUserzoneInfo::eventGetMaxCalcTime (  )
//{
//	static UFunction* pGetMaxCalcTime = 0;
//	UUserzoneInfo_eventGetMaxCalcTime_Parms parms;
//
//	if ( !pGetMaxCalcTime )
//		pGetMaxCalcTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UserzoneInfo.GetMaxCalcTime" );
//
//	this->ProcessEvent ( pGetMaxCalcTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UUserzoneInfo::SetScoreboardHud ( class AHUD* _hud )
//{
//	static UFunction* pSetScoreboardHud = 0;
//	UUserzoneInfo_execSetScoreboardHud_Parms parms;
//
//	if ( !pSetScoreboardHud )
//		pSetScoreboardHud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UserzoneInfo.SetScoreboardHud" );
//
//	parms._hud = _hud;
//	this->ProcessEvent ( pSetScoreboardHud, &parms, NULL );
//
//}
//
//void UUserzoneInfo::eventGetScreenPos ( int nGroupIndex, int* nPosX, int* nPosY )
//{
//	static UFunction* pGetScreenPos = 0;
//	UUserzoneInfo_eventGetScreenPos_Parms parms;
//
//	if ( !pGetScreenPos )
//		pGetScreenPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UserzoneInfo.GetScreenPos" );
//
//	parms.nGroupIndex = nGroupIndex;
//	this->ProcessEvent ( pGetScreenPos, &parms, NULL );
//
//	*nPosX = parms.nPosX;
//	*nPosY = parms.nPosY;
//}
//
//int UUserzoneInfo::GetCellIndex ( struct FVector kPos )
//{
//	static UFunction* pGetCellIndex = 0;
//	UUserzoneInfo_execGetCellIndex_Parms parms;
//
//	if ( !pGetCellIndex )
//		pGetCellIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UserzoneInfo.GetCellIndex" );
//
//	parms.kPos = kPos;
//	this->ProcessEvent ( pGetCellIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FVector UUserzoneInfo::GetInterpolationPos ( struct FVector kStartPos, struct FVector kEndPos, float A )
//{
//	static UFunction* pGetInterpolationPos = 0;
//	UUserzoneInfo_execGetInterpolationPos_Parms parms;
//
//	if ( !pGetInterpolationPos )
//		pGetInterpolationPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UserzoneInfo.GetInterpolationPos" );
//
//	parms.kStartPos = kStartPos;
//	parms.kEndPos = kEndPos;
//	parms.A = A;
//	this->ProcessEvent ( pGetInterpolationPos, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UUserzoneInfo::eventAddCalcTime ( struct FVector kStartPos, struct FVector kEndPos, float fTime )
//{
//	static UFunction* pAddCalcTime = 0;
//	UUserzoneInfo_eventAddCalcTime_Parms parms;
//
//	if ( !pAddCalcTime )
//		pAddCalcTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UserzoneInfo.AddCalcTime" );
//
//	parms.kStartPos = kStartPos;
//	parms.kEndPos = kEndPos;
//	parms.fTime = fTime;
//	this->ProcessEvent ( pAddCalcTime, &parms, NULL );
//
//}
//
//void UUserzoneInfo::ResetCalcTime (  )
//{
//	static UFunction* pResetCalcTime = 0;
//	UUserzoneInfo_execResetCalcTime_Parms parms;
//
//	if ( !pResetCalcTime )
//		pResetCalcTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UserzoneInfo.ResetCalcTime" );
//
//	this->ProcessEvent ( pResetCalcTime, &parms, NULL );
//
//}
//
//void UUserzoneInfo::Destroy (  )
//{
//	static UFunction* pDestroy = 0;
//	UUserzoneInfo_execDestroy_Parms parms;
//
//	if ( !pDestroy )
//		pDestroy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UserzoneInfo.Destroy" );
//
//	this->ProcessEvent ( pDestroy, &parms, NULL );
//
//}
//
//void UUserzoneInfo::CalcMapSize ( float _fCellSize )
//{
//	static UFunction* pCalcMapSize = 0;
//	UUserzoneInfo_execCalcMapSize_Parms parms;
//
//	if ( !pCalcMapSize )
//		pCalcMapSize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UserzoneInfo.CalcMapSize" );
//
//	parms._fCellSize = _fCellSize;
//	this->ProcessEvent ( pCalcMapSize, &parms, NULL );
//
//}
//
//void APotentialClimbWatcher::Tick ( float DeltaTime )
//{
//	static UFunction* pTick = 0;
//	APotentialClimbWatcher_execTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PotentialClimbWatcher.Tick" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void APhysicsVolume::CausePainTo ( class AActor* Other )
//{
//	static UFunction* pCausePainTo = 0;
//	APhysicsVolume_execCausePainTo_Parms parms;
//
//	if ( !pCausePainTo )
//		pCausePainTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.CausePainTo" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pCausePainTo, &parms, NULL );
//
//}
//
//void APhysicsVolume::PlayExitSplash ( class AActor* Other )
//{
//	static UFunction* pPlayExitSplash = 0;
//	APhysicsVolume_execPlayExitSplash_Parms parms;
//
//	if ( !pPlayExitSplash )
//		pPlayExitSplash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.PlayExitSplash" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pPlayExitSplash, &parms, NULL );
//
//}
//
//void APhysicsVolume::eventUnTouch ( class AActor* Other )
//{
//	static UFunction* pUnTouch = 0;
//	APhysicsVolume_eventUnTouch_Parms parms;
//
//	if ( !pUnTouch )
//		pUnTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.UnTouch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pUnTouch, &parms, NULL );
//
//}
//
//void APhysicsVolume::PlayEntrySplash ( class AActor* Other )
//{
//	static UFunction* pPlayEntrySplash = 0;
//	APhysicsVolume_execPlayEntrySplash_Parms parms;
//
//	if ( !pPlayEntrySplash )
//		pPlayEntrySplash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.PlayEntrySplash" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pPlayEntrySplash, &parms, NULL );
//
//}
//
//void APhysicsVolume::eventTouch ( class AActor* Other )
//{
//	static UFunction* pTouch = 0;
//	APhysicsVolume_eventTouch_Parms parms;
//
//	if ( !pTouch )
//		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.Touch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTouch, &parms, NULL );
//
//}
//
//void APhysicsVolume::Trigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	APhysicsVolume_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void APhysicsVolume::TimerPop ( class AVolumeTimer* t )
//{
//	static UFunction* pTimerPop = 0;
//	APhysicsVolume_execTimerPop_Parms parms;
//
//	if ( !pTimerPop )
//		pTimerPop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.TimerPop" );
//
//	parms.t = t;
//	this->ProcessEvent ( pTimerPop, &parms, NULL );
//
//}
//
//void APhysicsVolume::eventBaseChange (  )
//{
//	static UFunction* pBaseChange = 0;
//	APhysicsVolume_eventBaseChange_Parms parms;
//
//	if ( !pBaseChange )
//		pBaseChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.BaseChange" );
//
//	this->ProcessEvent ( pBaseChange, &parms, NULL );
//
//}
//
//void APhysicsVolume::PlayerPawnDiedInVolume ( class APawn* Other )
//{
//	static UFunction* pPlayerPawnDiedInVolume = 0;
//	APhysicsVolume_execPlayerPawnDiedInVolume_Parms parms;
//
//	if ( !pPlayerPawnDiedInVolume )
//		pPlayerPawnDiedInVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.PlayerPawnDiedInVolume" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pPlayerPawnDiedInVolume, &parms, NULL );
//
//}
//
//void APhysicsVolume::eventPawnLeavingVolume ( class APawn* Other )
//{
//	static UFunction* pPawnLeavingVolume = 0;
//	APhysicsVolume_eventPawnLeavingVolume_Parms parms;
//
//	if ( !pPawnLeavingVolume )
//		pPawnLeavingVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.PawnLeavingVolume" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pPawnLeavingVolume, &parms, NULL );
//
//}
//
//void APhysicsVolume::eventPawnEnteredVolume ( class APawn* Other )
//{
//	static UFunction* pPawnEnteredVolume = 0;
//	APhysicsVolume_eventPawnEnteredVolume_Parms parms;
//
//	if ( !pPawnEnteredVolume )
//		pPawnEnteredVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.PawnEnteredVolume" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pPawnEnteredVolume, &parms, NULL );
//
//}
//
//void APhysicsVolume::eventActorLeavingVolume ( class AActor* Other )
//{
//	static UFunction* pActorLeavingVolume = 0;
//	APhysicsVolume_eventActorLeavingVolume_Parms parms;
//
//	if ( !pActorLeavingVolume )
//		pActorLeavingVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.ActorLeavingVolume" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pActorLeavingVolume, &parms, NULL );
//
//}
//
//void APhysicsVolume::eventActorEnteredVolume ( class AActor* Other )
//{
//	static UFunction* pActorEnteredVolume = 0;
//	APhysicsVolume_eventActorEnteredVolume_Parms parms;
//
//	if ( !pActorEnteredVolume )
//		pActorEnteredVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.ActorEnteredVolume" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pActorEnteredVolume, &parms, NULL );
//
//}
//
//void APhysicsVolume::eventPhysicsChangedFor ( class AActor* Other )
//{
//	static UFunction* pPhysicsChangedFor = 0;
//	APhysicsVolume_eventPhysicsChangedFor_Parms parms;
//
//	if ( !pPhysicsChangedFor )
//		pPhysicsChangedFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.PhysicsChangedFor" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pPhysicsChangedFor, &parms, NULL );
//
//}
//
//void APhysicsVolume::Reset (  )
//{
//	static UFunction* pReset = 0;
//	APhysicsVolume_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void APhysicsVolume::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	APhysicsVolume_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void APhysicsVolume::PreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	APhysicsVolume_execPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PhysicsVolume.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void ALadderVolume::eventPhysicsChangedFor ( class AActor* Other )
//{
//	static UFunction* pPhysicsChangedFor = 0;
//	ALadderVolume_eventPhysicsChangedFor_Parms parms;
//
//	if ( !pPhysicsChangedFor )
//		pPhysicsChangedFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LadderVolume.PhysicsChangedFor" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pPhysicsChangedFor, &parms, NULL );
//
//}
//
//void ALadderVolume::eventPawnLeavingVolume ( class APawn* P )
//{
//	static UFunction* pPawnLeavingVolume = 0;
//	ALadderVolume_eventPawnLeavingVolume_Parms parms;
//
//	if ( !pPawnLeavingVolume )
//		pPawnLeavingVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LadderVolume.PawnLeavingVolume" );
//
//	parms.P = P;
//	this->ProcessEvent ( pPawnLeavingVolume, &parms, NULL );
//
//}
//
//void ALadderVolume::eventPawnEnteredVolume ( class APawn* P )
//{
//	static UFunction* pPawnEnteredVolume = 0;
//	ALadderVolume_eventPawnEnteredVolume_Parms parms;
//
//	if ( !pPawnEnteredVolume )
//		pPawnEnteredVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LadderVolume.PawnEnteredVolume" );
//
//	parms.P = P;
//	this->ProcessEvent ( pPawnEnteredVolume, &parms, NULL );
//
//}
//
//bool ALadderVolume::InUse ( class APawn* Ignored )
//{
//	static UFunction* pInUse = 0;
//	ALadderVolume_execInUse_Parms parms;
//
//	if ( !pInUse )
//		pInUse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LadderVolume.InUse" );
//
//	parms.Ignored = Ignored;
//	this->ProcessEvent ( pInUse, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALadderVolume::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	ALadderVolume_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LadderVolume.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void ADefaultPhysicsVolume::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	ADefaultPhysicsVolume_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DefaultPhysicsVolume.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void ALineOfSightTrigger::Timer (  )
//{
//	static UFunction* pTimer = 0;
//	ALineOfSightTrigger_execTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LineOfSightTrigger.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//void ALineOfSightTrigger::Trigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	ALineOfSightTrigger_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LineOfSightTrigger.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void ALineOfSightTrigger::eventPlayerSeesMe ( class APlayerController* P )
//{
//	static UFunction* pPlayerSeesMe = 0;
//	ALineOfSightTrigger_eventPlayerSeesMe_Parms parms;
//
//	if ( !pPlayerSeesMe )
//		pPlayerSeesMe = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LineOfSightTrigger.PlayerSeesMe" );
//
//	parms.P = P;
//	this->ProcessEvent ( pPlayerSeesMe, &parms, NULL );
//
//}
//
//void ALineOfSightTrigger::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	ALineOfSightTrigger_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LineOfSightTrigger.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AAIScript::TakeOver ( class APawn* P )
//{
//	static UFunction* pTakeOver = 0;
//	AAIScript_execTakeOver_Parms parms;
//
//	if ( !pTakeOver )
//		pTakeOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIScript.TakeOver" );
//
//	parms.P = P;
//	this->ProcessEvent ( pTakeOver, &parms, NULL );
//
//}
//
//class AActor* AAIScript::GetMoveTarget (  )
//{
//	static UFunction* pGetMoveTarget = 0;
//	AAIScript_execGetMoveTarget_Parms parms;
//
//	if ( !pGetMoveTarget )
//		pGetMoveTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIScript.GetMoveTarget" );
//
//	this->ProcessEvent ( pGetMoveTarget, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAIScript::SpawnControllerFor ( class APawn* P )
//{
//	static UFunction* pSpawnControllerFor = 0;
//	AAIScript_execSpawnControllerFor_Parms parms;
//
//	if ( !pSpawnControllerFor )
//		pSpawnControllerFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIScript.SpawnControllerFor" );
//
//	parms.P = P;
//	this->ProcessEvent ( pSpawnControllerFor, &parms, NULL );
//
//}
//
//struct FString ADamageType::GetWeaponClass (  )
//{
//	static UFunction* pGetWeaponClass = 0;
//	ADamageType_execGetWeaponClass_Parms parms;
//
//	if ( !pGetWeaponClass )
//		pGetWeaponClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DamageType.GetWeaponClass" );
//
//	this->ProcessEvent ( pGetWeaponClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
////void ADamageType::GetHitEffects ( int VictemHealth, class UClass** HitEffects )
////{
////	static UFunction* pGetHitEffects = 0;
////	ADamageType_execGetHitEffects_Parms parms;
////
////	if ( !pGetHitEffects )
////		pGetHitEffects = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DamageType.GetHitEffects" );
////
////	parms.VictemHealth = VictemHealth;
////	this->ProcessEvent ( pGetHitEffects, &parms, NULL );
////
////	*HitEffects = parms.HitEffects;
////}
//
//bool ADamageType::IsOfType ( int Description )
//{
//	static UFunction* pIsOfType = 0;
//	ADamageType_execIsOfType_Parms parms;
//
//	if ( !pIsOfType )
//		pIsOfType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DamageType.IsOfType" );
//
//	parms.Description = Description;
//	this->ProcessEvent ( pIsOfType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class USound* ADamageType::GetPawnDamageSound (  )
//{
//	static UFunction* pGetPawnDamageSound = 0;
//	ADamageType_execGetPawnDamageSound_Parms parms;
//
//	if ( !pGetPawnDamageSound )
//		pGetPawnDamageSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DamageType.GetPawnDamageSound" );
//
//	this->ProcessEvent ( pGetPawnDamageSound, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UClass* ADamageType::GetPawnDamageEmitter ( struct FVector HitLocation, float Damage, struct FVector Momentum, class APawn* Victim, bool bLowDetail )
//{
//	static UFunction* pGetPawnDamageEmitter = 0;
//	ADamageType_execGetPawnDamageEmitter_Parms parms;
//
//	if ( !pGetPawnDamageEmitter )
//		pGetPawnDamageEmitter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DamageType.GetPawnDamageEmitter" );
//
//	parms.HitLocation = HitLocation;
//	parms.Damage = Damage;
//	parms.Momentum = Momentum;
//	parms.Victim = Victim;
//	parms.bLowDetail = bLowDetail;
//	this->ProcessEvent ( pGetPawnDamageEmitter, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UClass* ADamageType::GetPawnDamageEffect ( struct FVector HitLocation, float Damage, struct FVector Momentum, class APawn* Victim, bool bLowDetail )
//{
//	static UFunction* pGetPawnDamageEffect = 0;
//	ADamageType_execGetPawnDamageEffect_Parms parms;
//
//	if ( !pGetPawnDamageEffect )
//		pGetPawnDamageEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DamageType.GetPawnDamageEffect" );
//
//	parms.HitLocation = HitLocation;
//	parms.Damage = Damage;
//	parms.Momentum = Momentum;
//	parms.Victim = Victim;
//	parms.bLowDetail = bLowDetail;
//	this->ProcessEvent ( pGetPawnDamageEffect, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString ADamageType::SuicideMessage ( class APlayerReplicationInfo* Victim )
//{
//	static UFunction* pSuicideMessage = 0;
//	ADamageType_execSuicideMessage_Parms parms;
//
//	if ( !pSuicideMessage )
//		pSuicideMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DamageType.SuicideMessage" );
//
//	parms.Victim = Victim;
//	this->ProcessEvent ( pSuicideMessage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString ADamageType::DeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim )
//{
//	static UFunction* pDeathMessage = 0;
//	ADamageType_execDeathMessage_Parms parms;
//
//	if ( !pDeathMessage )
//		pDeathMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DamageType.DeathMessage" );
//
//	parms.Killer = Killer;
//	parms.Victim = Victim;
//	this->ProcessEvent ( pDeathMessage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ADamageType::ScoreKill ( class AController* Killer, class AController* Killed )
//{
//	static UFunction* pScoreKill = 0;
//	ADamageType_execScoreKill_Parms parms;
//
//	if ( !pScoreKill )
//		pScoreKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DamageType.ScoreKill" );
//
//	parms.Killer = Killer;
//	parms.Killed = Killed;
//	this->ProcessEvent ( pScoreKill, &parms, NULL );
//
//}
//
//void ADamageType::IncrementKills ( class AController* Killer )
//{
//	static UFunction* pIncrementKills = 0;
//	ADamageType_execIncrementKills_Parms parms;
//
//	if ( !pIncrementKills )
//		pIncrementKills = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DamageType.IncrementKills" );
//
//	parms.Killer = Killer;
//	this->ProcessEvent ( pIncrementKills, &parms, NULL );
//
//}
//
//void ASVehicleTrigger::Reset (  )
//{
//	static UFunction* pReset = 0;
//	ASVehicleTrigger_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicleTrigger.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void ASVehicleTrigger::UsedBy ( class APawn* User )
//{
//	static UFunction* pUsedBy = 0;
//	ASVehicleTrigger_execUsedBy_Parms parms;
//
//	if ( !pUsedBy )
//		pUsedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicleTrigger.UsedBy" );
//
//	parms.User = User;
//	this->ProcessEvent ( pUsedBy, &parms, NULL );
//
//}
//
//void ASVehicleTrigger::eventTrigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	ASVehicleTrigger_eventTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicleTrigger.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void ASVehicleTrigger::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	ASVehicleTrigger_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicleTrigger.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void ASVehicleFactory::eventTrigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	ASVehicleFactory_eventTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicleFactory.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void ASVehicleFactory::eventVehicleUnPossessed ( class AVehicle* V )
//{
//	static UFunction* pVehicleUnPossessed = 0;
//	ASVehicleFactory_eventVehicleUnPossessed_Parms parms;
//
//	if ( !pVehicleUnPossessed )
//		pVehicleUnPossessed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicleFactory.VehicleUnPossessed" );
//
//	parms.V = V;
//	this->ProcessEvent ( pVehicleUnPossessed, &parms, NULL );
//
//}
//
//void ASVehicleFactory::eventVehiclePossessed ( class AVehicle* V )
//{
//	static UFunction* pVehiclePossessed = 0;
//	ASVehicleFactory_eventVehiclePossessed_Parms parms;
//
//	if ( !pVehiclePossessed )
//		pVehiclePossessed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicleFactory.VehiclePossessed" );
//
//	parms.V = V;
//	this->ProcessEvent ( pVehiclePossessed, &parms, NULL );
//
//}
//
//void ASVehicleFactory::eventVehicleDestroyed ( class AVehicle* V )
//{
//	static UFunction* pVehicleDestroyed = 0;
//	ASVehicleFactory_eventVehicleDestroyed_Parms parms;
//
//	if ( !pVehicleDestroyed )
//		pVehicleDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicleFactory.VehicleDestroyed" );
//
//	parms.V = V;
//	this->ProcessEvent ( pVehicleDestroyed, &parms, NULL );
//
//}
//
//void ASVehicleFactory::PreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	ASVehicleFactory_execPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SVehicleFactory.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void AVehiclePart::Activate ( bool bActive )
//{
//	static UFunction* pActivate = 0;
//	AVehiclePart_execActivate_Parms parms;
//
//	if ( !pActivate )
//		pActivate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VehiclePart.Activate" );
//
//	parms.bActive = bActive;
//	this->ProcessEvent ( pActivate, &parms, NULL );
//
//}
//
//void AVehiclePart::Update ( float DeltaTime )
//{
//	static UFunction* pUpdate = 0;
//	AVehiclePart_execUpdate_Parms parms;
//
//	if ( !pUpdate )
//		pUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VehiclePart.Update" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pUpdate, &parms, NULL );
//
//}
//
//bool AController::IsSpecialMode_Pistol ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_Pistol = 0;
//	AController_execIsSpecialMode_Pistol_Parms parms;
//
//	if ( !pIsSpecialMode_Pistol )
//		pIsSpecialMode_Pistol = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsSpecialMode_Pistol" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_Pistol, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::IsSpecialMode_Grenade ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_Grenade = 0;
//	AController_execIsSpecialMode_Grenade_Parms parms;
//
//	if ( !pIsSpecialMode_Grenade )
//		pIsSpecialMode_Grenade = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsSpecialMode_Grenade" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_Grenade, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::IsSpecialMode_MG ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_MG = 0;
//	AController_execIsSpecialMode_MG_Parms parms;
//
//	if ( !pIsSpecialMode_MG )
//		pIsSpecialMode_MG = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsSpecialMode_MG" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_MG, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::IsSpecialMode_FlameThrower ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_FlameThrower = 0;
//	AController_execIsSpecialMode_FlameThrower_Parms parms;
//
//	if ( !pIsSpecialMode_FlameThrower )
//		pIsSpecialMode_FlameThrower = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsSpecialMode_FlameThrower" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_FlameThrower, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::IsSpecialMode_SG ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_SG = 0;
//	AController_execIsSpecialMode_SG_Parms parms;
//
//	if ( !pIsSpecialMode_SG )
//		pIsSpecialMode_SG = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsSpecialMode_SG" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_SG, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::IsSpecialMode_Hold_Weapon ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_Hold_Weapon = 0;
//	AController_execIsSpecialMode_Hold_Weapon_Parms parms;
//
//	if ( !pIsSpecialMode_Hold_Weapon )
//		pIsSpecialMode_Hold_Weapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsSpecialMode_Hold_Weapon" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_Hold_Weapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::IsSpecialMode_SR ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_SR = 0;
//	AController_execIsSpecialMode_SR_Parms parms;
//
//	if ( !pIsSpecialMode_SR )
//		pIsSpecialMode_SR = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsSpecialMode_SR" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_SR, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::IsSpecialMode_RPG ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_RPG = 0;
//	AController_execIsSpecialMode_RPG_Parms parms;
//
//	if ( !pIsSpecialMode_RPG )
//		pIsSpecialMode_RPG = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsSpecialMode_RPG" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_RPG, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::IsSpecialMode_Knife ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_Knife = 0;
//	AController_execIsSpecialMode_Knife_Parms parms;
//
//	if ( !pIsSpecialMode_Knife )
//		pIsSpecialMode_Knife = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsSpecialMode_Knife" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_Knife, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::IsPermitSpecialMode ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType, int KeyF )
//{
//	static UFunction* pIsPermitSpecialMode = 0;
//	AController_execIsPermitSpecialMode_Parms parms;
//
//	if ( !pIsPermitSpecialMode )
//		pIsPermitSpecialMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsPermitSpecialMode" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	parms.KeyF = KeyF;
//	this->ProcessEvent ( pIsPermitSpecialMode, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::NotifyVehicle ( class AVehicle* V )
//{
//	static UFunction* pNotifyVehicle = 0;
//	AController_execNotifyVehicle_Parms parms;
//
//	if ( !pNotifyVehicle )
//		pNotifyVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyVehicle" );
//
//	parms.V = V;
//	this->ProcessEvent ( pNotifyVehicle, &parms, NULL );
//
//}
//
//void AController::ClientUAV ( int UAVDuration )
//{
//	static UFunction* pClientUAV = 0;
//	AController_execClientUAV_Parms parms;
//
//	if ( !pClientUAV )
//		pClientUAV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientUAV" );
//
//	parms.UAVDuration = UAVDuration;
//	this->ProcessEvent ( pClientUAV, &parms, NULL );
//
//}
//
//bool AController::AllowFire (  )
//{
//	static UFunction* pAllowFire = 0;
//	AController_execAllowFire_Parms parms;
//
//	if ( !pAllowFire )
//		pAllowFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.AllowFire" );
//
//	this->ProcessEvent ( pAllowFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::eventReceiveMessage_QuestType4 ( class UClass* Message, int Switch, int iRDifficult, int iRRound )
//{
//	static UFunction* pReceiveMessage_QuestType4 = 0;
//	AController_eventReceiveMessage_QuestType4_Parms parms;
//
//	if ( !pReceiveMessage_QuestType4 )
//		pReceiveMessage_QuestType4 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ReceiveMessage_QuestType4" );
//
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.iRDifficult = iRDifficult;
//	parms.iRRound = iRRound;
//	this->ProcessEvent ( pReceiveMessage_QuestType4, &parms, NULL );
//
//}
//
//void AController::eventReceiveMessage_QuestType3 ( class UClass* Message, int Switch, int iRDifficult, int iRMap )
//{
//	static UFunction* pReceiveMessage_QuestType3 = 0;
//	AController_eventReceiveMessage_QuestType3_Parms parms;
//
//	if ( !pReceiveMessage_QuestType3 )
//		pReceiveMessage_QuestType3 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ReceiveMessage_QuestType3" );
//
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.iRDifficult = iRDifficult;
//	parms.iRMap = iRMap;
//	this->ProcessEvent ( pReceiveMessage_QuestType3, &parms, NULL );
//
//}
//
//void AController::eventReceiveMessage_QuestType2 ( class UClass* Message, int Switch, int iRMode, int iRMap, int iRMin, int iRSec )
//{
//	static UFunction* pReceiveMessage_QuestType2 = 0;
//	AController_eventReceiveMessage_QuestType2_Parms parms;
//
//	if ( !pReceiveMessage_QuestType2 )
//		pReceiveMessage_QuestType2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ReceiveMessage_QuestType2" );
//
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.iRMode = iRMode;
//	parms.iRMap = iRMap;
//	parms.iRMin = iRMin;
//	parms.iRSec = iRSec;
//	this->ProcessEvent ( pReceiveMessage_QuestType2, &parms, NULL );
//
//}
//
//void AController::eventReceiveMessage_QuestType1 ( class UClass* Message, int Switch, int iRWeaponType, int iRweaponId )
//{
//	static UFunction* pReceiveMessage_QuestType1 = 0;
//	AController_eventReceiveMessage_QuestType1_Parms parms;
//
//	if ( !pReceiveMessage_QuestType1 )
//		pReceiveMessage_QuestType1 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ReceiveMessage_QuestType1" );
//
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.iRWeaponType = iRWeaponType;
//	parms.iRweaponId = iRweaponId;
//	this->ProcessEvent ( pReceiveMessage_QuestType1, &parms, NULL );
//
//}
//
void AController::ServerUAV (  )
{
	static UFunction* pServerUAV = 0;
	AController_execServerUAV_Parms parms;

	if ( !pServerUAV )
		pServerUAV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ServerUAV" );

	this->ProcessEvent ( pServerUAV, &parms, NULL );

}
//
//bool AController::IsActiveUAV (  )
//{
//	static UFunction* pIsActiveUAV = 0;
//	AController_execIsActiveUAV_Parms parms;
//
//	if ( !pIsActiveUAV )
//		pIsActiveUAV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsActiveUAV" );
//
//	this->ProcessEvent ( pIsActiveUAV, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::IsActiveHelicopter (  )
//{
//	static UFunction* pIsActiveHelicopter = 0;
//	AController_execIsActiveHelicopter_Parms parms;
//
//	if ( !pIsActiveHelicopter )
//		pIsActiveHelicopter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsActiveHelicopter" );
//
//	this->ProcessEvent ( pIsActiveHelicopter, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::IsActiveAirFire (  )
//{
//	static UFunction* pIsActiveAirFire = 0;
//	AController_execIsActiveAirFire_Parms parms;
//
//	if ( !pIsActiveAirFire )
//		pIsActiveAirFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsActiveAirFire" );
//
//	this->ProcessEvent ( pIsActiveAirFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::CallUAV (  )
//{
//	static UFunction* pCallUAV = 0;
//	AController_execCallUAV_Parms parms;
//
//	if ( !pCallUAV )
//		pCallUAV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.CallUAV" );
//
//	this->ProcessEvent ( pCallUAV, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::CallHelicopter ( bool ignoreSupply )
//{
//	static UFunction* pCallHelicopter = 0;
//	AController_execCallHelicopter_Parms parms;
//
//	if ( !pCallHelicopter )
//		pCallHelicopter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.CallHelicopter" );
//
//	parms.ignoreSupply = ignoreSupply;
//	this->ProcessEvent ( pCallHelicopter, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::CallAirFire (  )
//{
//	static UFunction* pCallAirFire = 0;
//	AController_execCallAirFire_Parms parms;
//
//	if ( !pCallAirFire )
//		pCallAirFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.CallAirFire" );
//
//	this->ProcessEvent ( pCallAirFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::ZoomFOV ( float fFOV, bool bInstant )
//{
//	static UFunction* pZoomFOV = 0;
//	AController_execZoomFOV_Parms parms;
//
//	if ( !pZoomFOV )
//		pZoomFOV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ZoomFOV" );
//
//	parms.fFOV = fFOV;
//	parms.bInstant = bInstant;
//	this->ProcessEvent ( pZoomFOV, &parms, NULL );
//
//}
//
//void AController::ClientOnEndIntervented (  )
//{
//	static UFunction* pClientOnEndIntervented = 0;
//	AController_execClientOnEndIntervented_Parms parms;
//
//	if ( !pClientOnEndIntervented )
//		pClientOnEndIntervented = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientOnEndIntervented" );
//
//	this->ProcessEvent ( pClientOnEndIntervented, &parms, NULL );
//
//}
//
//void AController::ClientOnBeginIntervented (  )
//{
//	static UFunction* pClientOnBeginIntervented = 0;
//	AController_execClientOnBeginIntervented_Parms parms;
//
//	if ( !pClientOnBeginIntervented )
//		pClientOnBeginIntervented = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientOnBeginIntervented" );
//
//	this->ProcessEvent ( pClientOnBeginIntervented, &parms, NULL );
//
//}
//
//void AController::ClientOnBeginRound (  )
//{
//	static UFunction* pClientOnBeginRound = 0;
//	AController_execClientOnBeginRound_Parms parms;
//
//	if ( !pClientOnBeginRound )
//		pClientOnBeginRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientOnBeginRound" );
//
//	this->ProcessEvent ( pClientOnBeginRound, &parms, NULL );
//
//}
//
//void AController::ClientOnEndWaitingForStart (  )
//{
//	static UFunction* pClientOnEndWaitingForStart = 0;
//	AController_execClientOnEndWaitingForStart_Parms parms;
//
//	if ( !pClientOnEndWaitingForStart )
//		pClientOnEndWaitingForStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientOnEndWaitingForStart" );
//
//	this->ProcessEvent ( pClientOnEndWaitingForStart, &parms, NULL );
//
//}
//
//void AController::ClientOnBeginWaitingForStart (  )
//{
//	static UFunction* pClientOnBeginWaitingForStart = 0;
//	AController_execClientOnBeginWaitingForStart_Parms parms;
//
//	if ( !pClientOnBeginWaitingForStart )
//		pClientOnBeginWaitingForStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientOnBeginWaitingForStart" );
//
//	this->ProcessEvent ( pClientOnBeginWaitingForStart, &parms, NULL );
//
//}
//
//void AController::ClientStopAllSound ( class AActor* aactor )
//{
//	static UFunction* pClientStopAllSound = 0;
//	AController_execClientStopAllSound_Parms parms;
//
//	if ( !pClientStopAllSound )
//		pClientStopAllSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientStopAllSound" );
//
//	parms.aactor = aactor;
//	this->ProcessEvent ( pClientStopAllSound, &parms, NULL );
//
//}
//
//void AController::StopAllSoundHK ( class AActor* aactor )
//{
//	static UFunction* pStopAllSoundHK = 0;
//	AController_execStopAllSoundHK_Parms parms;
//
//	if ( !pStopAllSoundHK )
//		pStopAllSoundHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.StopAllSoundHK" );
//
//	parms.aactor = aactor;
//	this->ProcessEvent ( pStopAllSoundHK, &parms, NULL );
//
//}
//
//void AController::execSetMoveAtt ( struct FString gmv, struct FString gmt, struct FString gmd, bool isSet )
//{
//	static UFunction* pSetMoveAtt = 0;
//	AController_execSetMoveAtt_Parms parms;
//
//	if ( !pSetMoveAtt )
//		pSetMoveAtt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SetMoveAtt" );
//
//	parms.gmv = gmv;
//	parms.gmt = gmt;
//	parms.gmd = gmd;
//	parms.isSet = isSet;
//	this->ProcessEvent ( pSetMoveAtt, &parms, NULL );
//
//}
//
//void AController::execWeaponReload (  )
//{
//	static UFunction* pWeaponReload = 0;
//	AController_execWeaponReload_Parms parms;
//
//	if ( !pWeaponReload )
//		pWeaponReload = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.WeaponReload" );
//
//	this->ProcessEvent ( pWeaponReload, &parms, NULL );
//
//}
//
//struct FString AController::ParseChatPercVar ( struct FString Cmd )
//{
//	static UFunction* pParseChatPercVar = 0;
//	AController_execParseChatPercVar_Parms parms;
//
//	if ( !pParseChatPercVar )
//		pParseChatPercVar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ParseChatPercVar" );
//
//	parms.Cmd = Cmd;
//	this->ProcessEvent ( pParseChatPercVar, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::DontReuseTaunt ( int t )
//{
//	static UFunction* pDontReuseTaunt = 0;
//	AController_execDontReuseTaunt_Parms parms;
//
//	if ( !pDontReuseTaunt )
//		pDontReuseTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.DontReuseTaunt" );
//
//	parms.t = t;
//	this->ProcessEvent ( pDontReuseTaunt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::AutoTaunt (  )
//{
//	static UFunction* pAutoTaunt = 0;
//	AController_execAutoTaunt_Parms parms;
//
//	if ( !pAutoTaunt )
//		pAutoTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.AutoTaunt" );
//
//	this->ProcessEvent ( pAutoTaunt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::StartMonitoring ( class APawn* P, float MaxDist )
//{
//	static UFunction* pStartMonitoring = 0;
//	AController_execStartMonitoring_Parms parms;
//
//	if ( !pStartMonitoring )
//		pStartMonitoring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.StartMonitoring" );
//
//	parms.P = P;
//	parms.MaxDist = MaxDist;
//	this->ProcessEvent ( pStartMonitoring, &parms, NULL );
//
//}
//
//void AController::eventMonitoredPawnAlert (  )
//{
//	static UFunction* pMonitoredPawnAlert = 0;
//	AController_eventMonitoredPawnAlert_Parms parms;
//
//	if ( !pMonitoredPawnAlert )
//		pMonitoredPawnAlert = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.MonitoredPawnAlert" );
//
//	this->ProcessEvent ( pMonitoredPawnAlert, &parms, NULL );
//
//}
//
//void AController::ServerGivePawn (  )
//{
//	static UFunction* pServerGivePawn = 0;
//	AController_execServerGivePawn_Parms parms;
//
//	if ( !pServerGivePawn )
//		pServerGivePawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ServerGivePawn" );
//
//	this->ProcessEvent ( pServerGivePawn, &parms, NULL );
//
//}
//
//void AController::ServerReStartPlayer (  )
//{
//	static UFunction* pServerReStartPlayer = 0;
//	AController_execServerReStartPlayer_Parms parms;
//
//	if ( !pServerReStartPlayer )
//		pServerReStartPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ServerReStartPlayer" );
//
//	this->ProcessEvent ( pServerReStartPlayer, &parms, NULL );
//
//}
//
//void AController::ChangedWeapon (  )
//{
//	static UFunction* pChangedWeapon = 0;
//	AController_execChangedWeapon_Parms parms;
//
//	if ( !pChangedWeapon )
//		pChangedWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ChangedWeapon" );
//
//	this->ProcessEvent ( pChangedWeapon, &parms, NULL );
//
//}
//
//class APlayerReplicationInfo* AController::GetPRI (  )
//{
//	static UFunction* pGetPRI = 0;
//	AController_execGetPRI_Parms parms;
//
//	if ( !pGetPRI )
//		pGetPRI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.GetPRI" );
//
//	this->ProcessEvent ( pGetPRI, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::CheckFutureSight ( float DeltaTime )
//{
//	static UFunction* pCheckFutureSight = 0;
//	AController_execCheckFutureSight_Parms parms;
//
//	if ( !pCheckFutureSight )
//		pCheckFutureSight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.CheckFutureSight" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pCheckFutureSight, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::SetPawnFemale (  )
//{
//	static UFunction* pSetPawnFemale = 0;
//	AController_execSetPawnFemale_Parms parms;
//
//	if ( !pSetPawnFemale )
//		pSetPawnFemale = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SetPawnFemale" );
//
//	this->ProcessEvent ( pSetPawnFemale, &parms, NULL );
//
//}
//
//void AController::SetPawnClass ( struct FString inClass, struct FString InCharacter )
//{
//	static UFunction* pSetPawnClass = 0;
//	AController_execSetPawnClass_Parms parms;
//
//	if ( !pSetPawnClass )
//		pSetPawnClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SetPawnClass" );
//
//	parms.inClass = inClass;
//	parms.InCharacter = InCharacter;
//	this->ProcessEvent ( pSetPawnClass, &parms, NULL );
//
//}
//
//void AController::ClientSetWeapon ( class UClass* WeaponClass )
//{
//	static UFunction* pClientSetWeapon = 0;
//	AController_execClientSetWeapon_Parms parms;
//
//	if ( !pClientSetWeapon )
//		pClientSetWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientSetWeapon" );
//
//	parms.WeaponClass = WeaponClass;
//	this->ProcessEvent ( pClientSetWeapon, &parms, NULL );
//
//}
//
//void AController::ClientSwitchToBestWeapon (  )
//{
//	static UFunction* pClientSwitchToBestWeapon = 0;
//	AController_execClientSwitchToBestWeapon_Parms parms;
//
//	if ( !pClientSwitchToBestWeapon )
//		pClientSwitchToBestWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientSwitchToBestWeapon" );
//
//	this->ProcessEvent ( pClientSwitchToBestWeapon, &parms, NULL );
//
//}
//
//void AController::execSwitchToBestWeapon (  )
//{
//	static UFunction* pSwitchToBestWeapon = 0;
//	AController_execSwitchToBestWeapon_Parms parms;
//
//	if ( !pSwitchToBestWeapon )
//		pSwitchToBestWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SwitchToBestWeapon" );
//
//	this->ProcessEvent ( pSwitchToBestWeapon, &parms, NULL );
//
//}
//
//void AController::eventDelayedWarning (  )
//{
//	static UFunction* pDelayedWarning = 0;
//	AController_eventDelayedWarning_Parms parms;
//
//	if ( !pDelayedWarning )
//		pDelayedWarning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.DelayedWarning" );
//
//	this->ProcessEvent ( pDelayedWarning, &parms, NULL );
//
//}
//
//void AController::ReceiveProjectileWarning ( class AProjectile* proj )
//{
//	static UFunction* pReceiveProjectileWarning = 0;
//	AController_execReceiveProjectileWarning_Parms parms;
//
//	if ( !pReceiveProjectileWarning )
//		pReceiveProjectileWarning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ReceiveProjectileWarning" );
//
//	parms.proj = proj;
//	this->ProcessEvent ( pReceiveProjectileWarning, &parms, NULL );
//
//}
//
//void AController::eventReceiveWarning ( class APawn* shooter, float projSpeed, struct FVector FireDir )
//{
//	static UFunction* pReceiveWarning = 0;
//	AController_eventReceiveWarning_Parms parms;
//
//	if ( !pReceiveWarning )
//		pReceiveWarning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ReceiveWarning" );
//
//	parms.shooter = shooter;
//	parms.projSpeed = projSpeed;
//	parms.FireDir = FireDir;
//	this->ProcessEvent ( pReceiveWarning, &parms, NULL );
//
//}
//
//void AController::InstantWarnTarget ( class AActor* Target, struct FFireProperties FiredAmmunition, struct FVector FireDir )
//{
//	static UFunction* pInstantWarnTarget = 0;
//	AController_execInstantWarnTarget_Parms parms;
//
//	if ( !pInstantWarnTarget )
//		pInstantWarnTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.InstantWarnTarget" );
//
//	parms.Target = Target;
//	parms.FiredAmmunition = FiredAmmunition;
//	parms.FireDir = FireDir;
//	this->ProcessEvent ( pInstantWarnTarget, &parms, NULL );
//
//}
//
//struct FRotator AController::AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError )
//{
//	static UFunction* pAdjustAim = 0;
//	AController_execAdjustAim_Parms parms;
//
//	if ( !pAdjustAim )
//		pAdjustAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.AdjustAim" );
//
//	parms.FiredAmmunition = FiredAmmunition;
//	parms.projStart = projStart;
//	parms.AimError = AimError;
//	this->ProcessEvent ( pAdjustAim, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AController::WeaponPreference ( class AwWeapon* W )
//{
//	static UFunction* pWeaponPreference = 0;
//	AController_execWeaponPreference_Parms parms;
//
//	if ( !pWeaponPreference )
//		pWeaponPreference = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.WeaponPreference" );
//
//	parms.W = W;
//	this->ProcessEvent ( pWeaponPreference, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AController::RateWeapon ( class AwWeapon* W )
//{
//	static UFunction* pRateWeapon = 0;
//	AController_execRateWeapon_Parms parms;
//
//	if ( !pRateWeapon )
//		pRateWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.RateWeapon" );
//
//	parms.W = W;
//	this->ProcessEvent ( pRateWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::StopFiring (  )
//{
//	static UFunction* pStopFiring = 0;
//	AController_execStopFiring_Parms parms;
//
//	if ( !pStopFiring )
//		pStopFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.StopFiring" );
//
//	this->ProcessEvent ( pStopFiring, &parms, NULL );
//
//}
//
//bool AController::FireWeaponAt ( class AActor* A )
//{
//	static UFunction* pFireWeaponAt = 0;
//	AController_execFireWeaponAt_Parms parms;
//
//	if ( !pFireWeaponAt )
//		pFireWeaponAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.FireWeaponAt" );
//
//	parms.A = A;
//	this->ProcessEvent ( pFireWeaponAt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AController::AdjustDesireFor ( class APickup* P )
//{
//	static UFunction* pAdjustDesireFor = 0;
//	AController_execAdjustDesireFor_Parms parms;
//
//	if ( !pAdjustDesireFor )
//		pAdjustDesireFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.AdjustDesireFor" );
//
//	parms.P = P;
//	this->ProcessEvent ( pAdjustDesireFor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::damageAttitudeTo ( class APawn* Other, float Damage )
//{
//	static UFunction* pdamageAttitudeTo = 0;
//	AController_execdamageAttitudeTo_Parms parms;
//
//	if ( !pdamageAttitudeTo )
//		pdamageAttitudeTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.damageAttitudeTo" );
//
//	parms.Other = Other;
//	parms.Damage = Damage;
//	this->ProcessEvent ( pdamageAttitudeTo, &parms, NULL );
//
//}
//
//void AController::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* Other )
//{
//	static UFunction* pNotifyKilled = 0;
//	AController_execNotifyKilled_Parms parms;
//
//	if ( !pNotifyKilled )
//		pNotifyKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyKilled" );
//
//	parms.Killer = Killer;
//	parms.Killed = Killed;
//	parms.Other = Other;
//	this->ProcessEvent ( pNotifyKilled, &parms, NULL );
//
//}
//
//void AController::ShakeView ( struct FVector shRotMag, struct FVector shRotRate, float shRotTime, struct FVector shOffsetMag, struct FVector shOffsetRate, float shOffsetTime )
//{
//	static UFunction* pShakeView = 0;
//	AController_execShakeView_Parms parms;
//
//	if ( !pShakeView )
//		pShakeView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ShakeView" );
//
//	parms.shRotMag = shRotMag;
//	parms.shRotRate = shRotRate;
//	parms.shRotTime = shRotTime;
//	parms.shOffsetMag = shOffsetMag;
//	parms.shOffsetRate = shOffsetRate;
//	parms.shOffsetTime = shOffsetTime;
//	this->ProcessEvent ( pShakeView, &parms, NULL );
//
//}
//
//void AController::DamageShake ( int Damage )
//{
//	static UFunction* pDamageShake = 0;
//	AController_execDamageShake_Parms parms;
//
//	if ( !pDamageShake )
//		pDamageShake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.DamageShake" );
//
//	parms.Damage = Damage;
//	this->ProcessEvent ( pDamageShake, &parms, NULL );
//
//}
//
//void AController::eventEnemyNotVisible (  )
//{
//	static UFunction* pEnemyNotVisible = 0;
//	AController_eventEnemyNotVisible_Parms parms;
//
//	if ( !pEnemyNotVisible )
//		pEnemyNotVisible = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.EnemyNotVisible" );
//
//	this->ProcessEvent ( pEnemyNotVisible, &parms, NULL );
//
//}
//
//void AController::eventSeeMonster ( class APawn* Seen )
//{
//	static UFunction* pSeeMonster = 0;
//	AController_eventSeeMonster_Parms parms;
//
//	if ( !pSeeMonster )
//		pSeeMonster = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SeeMonster" );
//
//	parms.Seen = Seen;
//	this->ProcessEvent ( pSeeMonster, &parms, NULL );
//
//}
//
//void AController::eventSeePlayer ( class APawn* Seen )
//{
//	static UFunction* pSeePlayer = 0;
//	AController_eventSeePlayer_Parms parms;
//
//	if ( !pSeePlayer )
//		pSeePlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SeePlayer" );
//
//	parms.Seen = Seen;
//	this->ProcessEvent ( pSeePlayer, &parms, NULL );
//
//}
//
//void AController::eventHearNoise ( float Loudness, class AActor* NoiseMaker )
//{
//	static UFunction* pHearNoise = 0;
//	AController_eventHearNoise_Parms parms;
//
//	if ( !pHearNoise )
//		pHearNoise = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.HearNoise" );
//
//	parms.Loudness = Loudness;
//	parms.NoiseMaker = NoiseMaker;
//	this->ProcessEvent ( pHearNoise, &parms, NULL );
//
//}
//
//void AController::eventSetupSpecialPathAbilities (  )
//{
//	static UFunction* pSetupSpecialPathAbilities = 0;
//	AController_eventSetupSpecialPathAbilities_Parms parms;
//
//	if ( !pSetupSpecialPathAbilities )
//		pSetupSpecialPathAbilities = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SetupSpecialPathAbilities" );
//
//	this->ProcessEvent ( pSetupSpecialPathAbilities, &parms, NULL );
//
//}
//
//float AController::eventSuperDesireability ( class APickup* P )
//{
//	static UFunction* pSuperDesireability = 0;
//	AController_eventSuperDesireability_Parms parms;
//
//	if ( !pSuperDesireability )
//		pSuperDesireability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SuperDesireability" );
//
//	parms.P = P;
//	this->ProcessEvent ( pSuperDesireability, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AController::eventDesireability ( class APickup* P )
//{
//	static UFunction* pDesireability = 0;
//	AController_eventDesireability_Parms parms;
//
//	if ( !pDesireability )
//		pDesireability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.Desireability" );
//
//	parms.P = P;
//	this->ProcessEvent ( pDesireability, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::FearThisSpot ( class AAvoidMarker* aSpot )
//{
//	static UFunction* pFearThisSpot = 0;
//	AController_execFearThisSpot_Parms parms;
//
//	if ( !pFearThisSpot )
//		pFearThisSpot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.FearThisSpot" );
//
//	parms.aSpot = aSpot;
//	this->ProcessEvent ( pFearThisSpot, &parms, NULL );
//
//}
//
//void AController::UnderLift ( class AMover* M )
//{
//	static UFunction* pUnderLift = 0;
//	AController_execUnderLift_Parms parms;
//
//	if ( !pUnderLift )
//		pUnderLift = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.UnderLift" );
//
//	parms.M = M;
//	this->ProcessEvent ( pUnderLift, &parms, NULL );
//
//}
//
//void AController::MoverFinished (  )
//{
//	static UFunction* pMoverFinished = 0;
//	AController_execMoverFinished_Parms parms;
//
//	if ( !pMoverFinished )
//		pMoverFinished = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.MoverFinished" );
//
//	this->ProcessEvent ( pMoverFinished, &parms, NULL );
//
//}
//
//void AController::WaitForMover ( class AMover* M )
//{
//	static UFunction* pWaitForMover = 0;
//	AController_execWaitForMover_Parms parms;
//
//	if ( !pWaitForMover )
//		pWaitForMover = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.WaitForMover" );
//
//	parms.M = M;
//	this->ProcessEvent ( pWaitForMover, &parms, NULL );
//
//}
//
//void AController::eventPrepareForMove ( class ANavigationPoint* Goal, class UReachSpec* Path )
//{
//	static UFunction* pPrepareForMove = 0;
//	AController_eventPrepareForMove_Parms parms;
//
//	if ( !pPrepareForMove )
//		pPrepareForMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.PrepareForMove" );
//
//	parms.Goal = Goal;
//	parms.Path = Path;
//	this->ProcessEvent ( pPrepareForMove, &parms, NULL );
//
//}
//
//struct FVector AController::AdjustToss ( float TSpeed, struct FVector Start, struct FVector End, bool bNormalize )
//{
//	static UFunction* pAdjustToss = 0;
//	AController_execAdjustToss_Parms parms;
//
//	if ( !pAdjustToss )
//		pAdjustToss = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.AdjustToss" );
//
//	parms.TSpeed = TSpeed;
//	parms.Start = Start;
//	parms.End = End;
//	parms.bNormalize = bNormalize;
//	this->ProcessEvent ( pAdjustToss, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::WouldReactToSeeing ( class APawn* Seen )
//{
//	static UFunction* pWouldReactToSeeing = 0;
//	AController_execWouldReactToSeeing_Parms parms;
//
//	if ( !pWouldReactToSeeing )
//		pWouldReactToSeeing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.WouldReactToSeeing" );
//
//	parms.Seen = Seen;
//	this->ProcessEvent ( pWouldReactToSeeing, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::WouldReactToNoise ( float Loudness, class AActor* NoiseMaker )
//{
//	static UFunction* pWouldReactToNoise = 0;
//	AController_execWouldReactToNoise_Parms parms;
//
//	if ( !pWouldReactToNoise )
//		pWouldReactToNoise = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.WouldReactToNoise" );
//
//	parms.Loudness = Loudness;
//	parms.NoiseMaker = NoiseMaker;
//	this->ProcessEvent ( pWouldReactToNoise, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::BotVoiceMessage ( struct FName MessageType, unsigned char MessageID, class AController* Sender )
//{
//	static UFunction* pBotVoiceMessage = 0;
//	AController_execBotVoiceMessage_Parms parms;
//
//	if ( !pBotVoiceMessage )
//		pBotVoiceMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.BotVoiceMessage" );
//
//	parms.MessageType = MessageType;
//	parms.MessageID = MessageID;
//	parms.Sender = Sender;
//	this->ProcessEvent ( pBotVoiceMessage, &parms, NULL );
//
//}
//
//void AController::ClientVoiceMessage ( class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char MessageID )
//{
//	static UFunction* pClientVoiceMessage = 0;
//	AController_execClientVoiceMessage_Parms parms;
//
//	if ( !pClientVoiceMessage )
//		pClientVoiceMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientVoiceMessage" );
//
//	parms.Sender = Sender;
//	parms.Recipient = Recipient;
//	parms.MessageType = MessageType;
//	parms.MessageID = MessageID;
//	this->ProcessEvent ( pClientVoiceMessage, &parms, NULL );
//
//}
//
//void AController::SendVoiceMessage ( class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char MessageID, struct FName BroadcastType )
//{
//	static UFunction* pSendVoiceMessage = 0;
//	AController_execSendVoiceMessage_Parms parms;
//
//	if ( !pSendVoiceMessage )
//		pSendVoiceMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SendVoiceMessage" );
//
//	parms.Sender = Sender;
//	parms.Recipient = Recipient;
//	parms.MessageType = MessageType;
//	parms.MessageID = MessageID;
//	parms.BroadcastType = BroadcastType;
//	this->ProcessEvent ( pSendVoiceMessage, &parms, NULL );
//
//}
//
//bool AController::AllowVoiceMessage ( struct FName MessageType )
//{
//	static UFunction* pAllowVoiceMessage = 0;
//	AController_execAllowVoiceMessage_Parms parms;
//
//	if ( !pAllowVoiceMessage )
//		pAllowVoiceMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.AllowVoiceMessage" );
//
//	parms.MessageType = MessageType;
//	this->ProcessEvent ( pAllowVoiceMessage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char MessageID, float wait, struct FName BroadcastType )
//{
//	static UFunction* pSendMessage = 0;
//	AController_execSendMessage_Parms parms;
//
//	if ( !pSendMessage )
//		pSendMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SendMessage" );
//
//	parms.Recipient = Recipient;
//	parms.MessageType = MessageType;
//	parms.MessageID = MessageID;
//	parms.wait = wait;
//	parms.BroadcastType = BroadcastType;
//	this->ProcessEvent ( pSendMessage, &parms, NULL );
//
//}
//
//unsigned char AController::GetMessageIndex ( struct FName PhraseName )
//{
//	static UFunction* pGetMessageIndex = 0;
//	AController_execGetMessageIndex_Parms parms;
//
//	if ( !pGetMessageIndex )
//		pGetMessageIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.GetMessageIndex" );
//
//	parms.PhraseName = PhraseName;
//	this->ProcessEvent ( pGetMessageIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AController::GetFacingDirection (  )
//{
//	static UFunction* pGetFacingDirection = 0;
//	AController_execGetFacingDirection_Parms parms;
//
//	if ( !pGetFacingDirection )
//		pGetFacingDirection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.GetFacingDirection" );
//
//	this->ProcessEvent ( pGetFacingDirection, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::RenderSpectatorFPWeapon ( class UCanvas* Canvas, bool bClearedZBuffer )
//{
//	static UFunction* pRenderSpectatorFPWeapon = 0;
//	AController_execRenderSpectatorFPWeapon_Parms parms;
//
//	if ( !pRenderSpectatorFPWeapon )
//		pRenderSpectatorFPWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.RenderSpectatorFPWeapon" );
//
//	parms.Canvas = Canvas;
//	parms.bClearedZBuffer = bClearedZBuffer;
//	this->ProcessEvent ( pRenderSpectatorFPWeapon, &parms, NULL );
//
//}
//
//void AController::eventRenderOverlays ( class UCanvas* Canvas )
//{
//	static UFunction* pRenderOverlays = 0;
//	AController_eventRenderOverlays_Parms parms;
//
//	if ( !pRenderOverlays )
//		pRenderOverlays = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.RenderOverlays" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pRenderOverlays, &parms, NULL );
//
//}
//
//void AController::StopPawnsAndControllers (  )
//{
//	static UFunction* pStopPawnsAndControllers = 0;
//	AController_execStopPawnsAndControllers_Parms parms;
//
//	if ( !pStopPawnsAndControllers )
//		pStopPawnsAndControllers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.StopPawnsAndControllers" );
//
//	this->ProcessEvent ( pStopPawnsAndControllers, &parms, NULL );
//
//}
//
//void AController::ClientRoundEnded (  )
//{
//	static UFunction* pClientRoundEnded = 0;
//	AController_execClientRoundEnded_Parms parms;
//
//	if ( !pClientRoundEnded )
//		pClientRoundEnded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientRoundEnded" );
//
//	this->ProcessEvent ( pClientRoundEnded, &parms, NULL );
//
//}
//
//void AController::RoundHasEnded (  )
//{
//	static UFunction* pRoundHasEnded = 0;
//	AController_execRoundHasEnded_Parms parms;
//
//	if ( !pRoundHasEnded )
//		pRoundHasEnded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.RoundHasEnded" );
//
//	this->ProcessEvent ( pRoundHasEnded, &parms, NULL );
//
//}
//
//void AController::ClientGameEnded (  )
//{
//	static UFunction* pClientGameEnded = 0;
//	AController_execClientGameEnded_Parms parms;
//
//	if ( !pClientGameEnded )
//		pClientGameEnded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientGameEnded" );
//
//	this->ProcessEvent ( pClientGameEnded, &parms, NULL );
//
//}
//
//void AController::GameHasEnded (  )
//{
//	static UFunction* pGameHasEnded = 0;
//	AController_execGameHasEnded_Parms parms;
//
//	if ( !pGameHasEnded )
//		pGameHasEnded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.GameHasEnded" );
//
//	this->ProcessEvent ( pGameHasEnded, &parms, NULL );
//
//}
//
//bool AController::WantsSmoothedViewNative (  )
//{
//	static UFunction* pWantsSmoothedViewNative = 0;
//	AController_execWantsSmoothedViewNative_Parms parms;
//
//	if ( !pWantsSmoothedViewNative )
//		pWantsSmoothedViewNative = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.WantsSmoothedViewNative" );
//
//	this->ProcessEvent ( pWantsSmoothedViewNative, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::WantsSmoothedView (  )
//{
//	static UFunction* pWantsSmoothedView = 0;
//	AController_execWantsSmoothedView_Parms parms;
//
//	if ( !pWantsSmoothedView )
//		pWantsSmoothedView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.WantsSmoothedView" );
//
//	this->ProcessEvent ( pWantsSmoothedView, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::eventAdjustView ( float DeltaTime )
//{
//	static UFunction* pAdjustView = 0;
//	AController_eventAdjustView_Parms parms;
//
//	if ( !pAdjustView )
//		pAdjustView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.AdjustView" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pAdjustView, &parms, NULL );
//
//}
//
//bool AController::eventAllowDetourTo ( class ANavigationPoint* N )
//{
//	static UFunction* pAllowDetourTo = 0;
//	AController_eventAllowDetourTo_Parms parms;
//
//	if ( !pAllowDetourTo )
//		pAllowDetourTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.AllowDetourTo" );
//
//	parms.N = N;
//	this->ProcessEvent ( pAllowDetourTo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::eventDestroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AController_eventDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AController::eventDestroyPlayerReplicationInfo (  )
//{
//	static UFunction* pDestroyPlayerReplicationInfo = 0;
//	AController_eventDestroyPlayerReplicationInfo_Parms parms;
//
//	if ( !pDestroyPlayerReplicationInfo )
//		pDestroyPlayerReplicationInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.DestroyPlayerReplicationInfo" );
//
//	this->ProcessEvent ( pDestroyPlayerReplicationInfo, &parms, NULL );
//
//}
//
//void AController::HandlePickup ( class APickup* pick )
//{
//	static UFunction* pHandlePickup = 0;
//	AController_execHandlePickup_Parms parms;
//
//	if ( !pHandlePickup )
//		pHandlePickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.HandlePickup" );
//
//	parms.pick = pick;
//	this->ProcessEvent ( pHandlePickup, &parms, NULL );
//
//}
//
//bool AController::SameTeamAs ( class AController* C )
//{
//	static UFunction* pSameTeamAs = 0;
//	AController_execSameTeamAs_Parms parms;
//
//	if ( !pSameTeamAs )
//		pSameTeamAs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SameTeamAs" );
//
//	parms.C = C;
//	this->ProcessEvent ( pSameTeamAs, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AController::GetTeamNum (  )
//{
//	static UFunction* pGetTeamNum = 0;
//	AController_execGetTeamNum_Parms parms;
//
//	if ( !pGetTeamNum )
//		pGetTeamNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.GetTeamNum" );
//
//	this->ProcessEvent ( pGetTeamNum, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::InitPlayerReplicationInfo (  )
//{
//	static UFunction* pInitPlayerReplicationInfo = 0;
//	AController_execInitPlayerReplicationInfo_Parms parms;
//
//	if ( !pInitPlayerReplicationInfo )
//		pInitPlayerReplicationInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.InitPlayerReplicationInfo" );
//
//	this->ProcessEvent ( pInitPlayerReplicationInfo, &parms, NULL );
//
//}
//
//void AController::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AController_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AController::eventPreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AController_eventPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void AController::HandleWalking (  )
//{
//	static UFunction* pHandleWalking = 0;
//	AController_execHandleWalking_Parms parms;
//
//	if ( !pHandleWalking )
//		pHandleWalking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.HandleWalking" );
//
//	this->ProcessEvent ( pHandleWalking, &parms, NULL );
//
//}
//
//void AController::execJump ( float f )
//{
//	static UFunction* pJump = 0;
//	AController_execJump_Parms parms;
//
//	if ( !pJump )
//		pJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.Jump" );
//
//	parms.f = f;
//	this->ProcessEvent ( pJump, &parms, NULL );
//
//}
//
//void AController::TickStance ( float DeltaTime )
//{
//	static UFunction* pTickStance = 0;
//	AController_execTickStance_Parms parms;
//
//	if ( !pTickStance )
//		pTickStance = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.TickStance" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTickStance, &parms, NULL );
//
//}
//
//void AController::SendMessageSprintTime (  )
//{
//	static UFunction* pSendMessageSprintTime = 0;
//	AController_execSendMessageSprintTime_Parms parms;
//
//	if ( !pSendMessageSprintTime )
//		pSendMessageSprintTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SendMessageSprintTime" );
//
//	this->ProcessEvent ( pSendMessageSprintTime, &parms, NULL );
//
//}
//
//void AController::TickSprint ( float DeltaTime )
//{
//	static UFunction* pTickSprint = 0;
//	AController_execTickSprint_Parms parms;
//
//	if ( !pTickSprint )
//		pTickSprint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.TickSprint" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTickSprint, &parms, NULL );
//
//}
//
//void AController::ServerSetVel ( struct FVector Vel )
//{
//	static UFunction* pServerSetVel = 0;
//	AController_execServerSetVel_Parms parms;
//
//	if ( !pServerSetVel )
//		pServerSetVel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ServerSetVel" );
//
//	parms.Vel = Vel;
//	this->ProcessEvent ( pServerSetVel, &parms, NULL );
//
//}
//
//void AController::ServerSetOldRun ( unsigned char bSetVal, unsigned char bHitVal )
//{
//	static UFunction* pServerSetOldRun = 0;
//	AController_execServerSetOldRun_Parms parms;
//
//	if ( !pServerSetOldRun )
//		pServerSetOldRun = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ServerSetOldRun" );
//
//	parms.bSetVal = bSetVal;
//	parms.bHitVal = bHitVal;
//	this->ProcessEvent ( pServerSetOldRun, &parms, NULL );
//
//}
//
//bool AController::IsBehindView (  )
//{
//	static UFunction* pIsBehindView = 0;
//	AController_execIsBehindView_Parms parms;
//
//	if ( !pIsBehindView )
//		pIsBehindView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.IsBehindView" );
//
//	this->ProcessEvent ( pIsBehindView, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::PawnIsInPain ( class APhysicsVolume* PainVolume )
//{
//	static UFunction* pPawnIsInPain = 0;
//	AController_execPawnIsInPain_Parms parms;
//
//	if ( !pPawnIsInPain )
//		pPawnIsInPain = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.PawnIsInPain" );
//
//	parms.PainVolume = PainVolume;
//	this->ProcessEvent ( pPawnIsInPain, &parms, NULL );
//
//}
//
//void AController::SetFall (  )
//{
//	static UFunction* pSetFall = 0;
//	AController_execSetFall_Parms parms;
//
//	if ( !pSetFall )
//		pSetFall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SetFall" );
//
//	this->ProcessEvent ( pSetFall, &parms, NULL );
//
//}
//
//void AController::NotifyTakeHit ( class APawn* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, int CollisionPart )
//{
//	static UFunction* pNotifyTakeHit = 0;
//	AController_execNotifyTakeHit_Parms parms;
//
//	if ( !pNotifyTakeHit )
//		pNotifyTakeHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyTakeHit" );
//
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.Damage = Damage;
//	parms.DamageType = DamageType;
//	parms.Momentum = Momentum;
//	parms.CollisionPart = CollisionPart;
//	this->ProcessEvent ( pNotifyTakeHit, &parms, NULL );
//
//}
//
//void AController::NotifyAddInventory ( class AInventory* NewItem )
//{
//	static UFunction* pNotifyAddInventory = 0;
//	AController_execNotifyAddInventory_Parms parms;
//
//	if ( !pNotifyAddInventory )
//		pNotifyAddInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyAddInventory" );
//
//	parms.NewItem = NewItem;
//	this->ProcessEvent ( pNotifyAddInventory, &parms, NULL );
//
//}
//
//void AController::SetDoubleJump (  )
//{
//	static UFunction* pSetDoubleJump = 0;
//	AController_execSetDoubleJump_Parms parms;
//
//	if ( !pSetDoubleJump )
//		pSetDoubleJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SetDoubleJump" );
//
//	this->ProcessEvent ( pSetDoubleJump, &parms, NULL );
//
//}
//
//void AController::eventNotifyMissedJump (  )
//{
//	static UFunction* pNotifyMissedJump = 0;
//	AController_eventNotifyMissedJump_Parms parms;
//
//	if ( !pNotifyMissedJump )
//		pNotifyMissedJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyMissedJump" );
//
//	this->ProcessEvent ( pNotifyMissedJump, &parms, NULL );
//
//}
//
//void AController::eventNotifyJumpApex (  )
//{
//	static UFunction* pNotifyJumpApex = 0;
//	AController_eventNotifyJumpApex_Parms parms;
//
//	if ( !pNotifyJumpApex )
//		pNotifyJumpApex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyJumpApex" );
//
//	this->ProcessEvent ( pNotifyJumpApex, &parms, NULL );
//
//}
//
//void AController::eventNotifyHitMover ( struct FVector HitNormal, class AMover* Wall )
//{
//	static UFunction* pNotifyHitMover = 0;
//	AController_eventNotifyHitMover_Parms parms;
//
//	if ( !pNotifyHitMover )
//		pNotifyHitMover = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyHitMover" );
//
//	parms.HitNormal = HitNormal;
//	parms.Wall = Wall;
//	this->ProcessEvent ( pNotifyHitMover, &parms, NULL );
//
//}
//
//bool AController::eventNotifyBump ( class AActor* Other )
//{
//	static UFunction* pNotifyBump = 0;
//	AController_eventNotifyBump_Parms parms;
//
//	if ( !pNotifyBump )
//		pNotifyBump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyBump" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pNotifyBump, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* Wall )
//{
//	static UFunction* pNotifyFallingHitWall = 0;
//	AController_eventNotifyFallingHitWall_Parms parms;
//
//	if ( !pNotifyFallingHitWall )
//		pNotifyFallingHitWall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyFallingHitWall" );
//
//	parms.HitNormal = HitNormal;
//	parms.Wall = Wall;
//	this->ProcessEvent ( pNotifyFallingHitWall, &parms, NULL );
//
//}
//
//bool AController::eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall )
//{
//	static UFunction* pNotifyHitWall = 0;
//	AController_eventNotifyHitWall_Parms parms;
//
//	if ( !pNotifyHitWall )
//		pNotifyHitWall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyHitWall" );
//
//	parms.HitNormal = HitNormal;
//	parms.Wall = Wall;
//	this->ProcessEvent ( pNotifyHitWall, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::eventNotifyPostLanded (  )
//{
//	static UFunction* pNotifyPostLanded = 0;
//	AController_eventNotifyPostLanded_Parms parms;
//
//	if ( !pNotifyPostLanded )
//		pNotifyPostLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyPostLanded" );
//
//	this->ProcessEvent ( pNotifyPostLanded, &parms, NULL );
//
//}
//
//bool AController::eventNotifyLanded ( struct FVector HitNormal )
//{
//	static UFunction* pNotifyLanded = 0;
//	AController_eventNotifyLanded_Parms parms;
//
//	if ( !pNotifyLanded )
//		pNotifyLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyLanded" );
//
//	parms.HitNormal = HitNormal;
//	this->ProcessEvent ( pNotifyLanded, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::eventNotifyHeadVolumeChange ( class APhysicsVolume* NewVolume )
//{
//	static UFunction* pNotifyHeadVolumeChange = 0;
//	AController_eventNotifyHeadVolumeChange_Parms parms;
//
//	if ( !pNotifyHeadVolumeChange )
//		pNotifyHeadVolumeChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyHeadVolumeChange" );
//
//	parms.NewVolume = NewVolume;
//	this->ProcessEvent ( pNotifyHeadVolumeChange, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AController::eventNotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume )
//{
//	static UFunction* pNotifyPhysicsVolumeChange = 0;
//	AController_eventNotifyPhysicsVolumeChange_Parms parms;
//
//	if ( !pNotifyPhysicsVolumeChange )
//		pNotifyPhysicsVolumeChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NotifyPhysicsVolumeChange" );
//
//	parms.NewVolume = NewVolume;
//	this->ProcessEvent ( pNotifyPhysicsVolumeChange, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::eventLongFall (  )
//{
//	static UFunction* pLongFall = 0;
//	AController_eventLongFall_Parms parms;
//
//	if ( !pLongFall )
//		pLongFall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.LongFall" );
//
//	this->ProcessEvent ( pLongFall, &parms, NULL );
//
//}
//
//void AController::Restart (  )
//{
//	static UFunction* pRestart = 0;
//	AController_execRestart_Parms parms;
//
//	if ( !pRestart )
//		pRestart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.Restart" );
//
//	this->ProcessEvent ( pRestart, &parms, NULL );
//
//}
//
//void AController::PawnDied ( class APawn* P )
//{
//	static UFunction* pPawnDied = 0;
//	AController_execPawnDied_Parms parms;
//
//	if ( !pPawnDied )
//		pPawnDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.PawnDied" );
//
//	parms.P = P;
//	this->ProcessEvent ( pPawnDied, &parms, NULL );
//
//}
//
//class UClass* AController::GetLastWeapon (  )
//{
//	static UFunction* pGetLastWeapon = 0;
//	AController_execGetLastWeapon_Parms parms;
//
//	if ( !pGetLastWeapon )
//		pGetLastWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.GetLastWeapon" );
//
//	this->ProcessEvent ( pGetLastWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::WasKilledBy ( class AController* Other )
//{
//	static UFunction* pWasKilledBy = 0;
//	AController_execWasKilledBy_Parms parms;
//
//	if ( !pWasKilledBy )
//		pWasKilledBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.WasKilledBy" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pWasKilledBy, &parms, NULL );
//
//}
//
//void AController::UnPossess (  )
//{
//	static UFunction* pUnPossess = 0;
//	AController_execUnPossess_Parms parms;
//
//	if ( !pUnPossess )
//		pUnPossess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.UnPossess" );
//
//	this->ProcessEvent ( pUnPossess, &parms, NULL );
//
//}
//
//void AController::Possess ( class APawn* aPawn )
//{
//	static UFunction* pPossess = 0;
//	AController_execPossess_Parms parms;
//
//	if ( !pPossess )
//		pPossess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.Possess" );
//
//	parms.aPawn = aPawn;
//	this->ProcessEvent ( pPossess, &parms, NULL );
//
//}
//
//void AController::eventSoakStop ( struct FString problem )
//{
//	static UFunction* pSoakStop = 0;
//	AController_eventSoakStop_Parms parms;
//
//	if ( !pSoakStop )
//		pSoakStop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.SoakStop" );
//
//	parms.problem = problem;
//	this->ProcessEvent ( pSoakStop, &parms, NULL );
//
//}
//
//void AController::eventAIHearSound ( class AActor* Actor, int id, class USound* S, struct FVector SoundLocation, struct FVector Parameters, bool Attenuate )
//{
//	static UFunction* pAIHearSound = 0;
//	AController_eventAIHearSound_Parms parms;
//
//	if ( !pAIHearSound )
//		pAIHearSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.AIHearSound" );
//
//	parms.Actor = Actor;
//	parms.id = id;
//	parms.S = S;
//	parms.SoundLocation = SoundLocation;
//	parms.Parameters = Parameters;
//	parms.Attenuate = Attenuate;
//	this->ProcessEvent ( pAIHearSound, &parms, NULL );
//
//}
//
//void AController::ClientDying ( class UClass* DamageType, struct FVector HitLocation )
//{
//	static UFunction* pClientDying = 0;
//	AController_execClientDying_Parms parms;
//
//	if ( !pClientDying )
//		pClientDying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientDying" );
//
//	parms.DamageType = DamageType;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pClientDying, &parms, NULL );
//
//}
//
//void AController::ClientSetRotation ( struct FRotator NewRotation )
//{
//	static UFunction* pClientSetRotation = 0;
//	AController_execClientSetRotation_Parms parms;
//
//	if ( !pClientSetRotation )
//		pClientSetRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientSetRotation" );
//
//	parms.NewRotation = NewRotation;
//	this->ProcessEvent ( pClientSetRotation, &parms, NULL );
//
//}
//
//void AController::ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation )
//{
//	static UFunction* pClientSetLocation = 0;
//	AController_execClientSetLocation_Parms parms;
//
//	if ( !pClientSetLocation )
//		pClientSetLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientSetLocation" );
//
//	parms.NewLocation = NewLocation;
//	parms.NewRotation = NewRotation;
//	this->ProcessEvent ( pClientSetLocation, &parms, NULL );
//
//}
//
//bool AController::AvoidCertainDeath (  )
//{
//	static UFunction* pAvoidCertainDeath = 0;
//	AController_execAvoidCertainDeath_Parms parms;
//
//	if ( !pAvoidCertainDeath )
//		pAvoidCertainDeath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.AvoidCertainDeath" );
//
//	this->ProcessEvent ( pAvoidCertainDeath, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::Reset (  )
//{
//	static UFunction* pReset = 0;
//	AController_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//struct FRotator AController::GetViewRotation (  )
//{
//	static UFunction* pGetViewRotation = 0;
//	AController_execGetViewRotation_Parms parms;
//
//	if ( !pGetViewRotation )
//		pGetViewRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.GetViewRotation" );
//
//	this->ProcessEvent ( pGetViewRotation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AController::GetHumanReadableName (  )
//{
//	static UFunction* pGetHumanReadableName = 0;
//	AController_execGetHumanReadableName_Parms parms;
//
//	if ( !pGetHumanReadableName )
//		pGetHumanReadableName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.GetHumanReadableName" );
//
//	this->ProcessEvent ( pGetHumanReadableName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	AController_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//void AController::ClientTestAllWeapons (  )
//{
//	static UFunction* pClientTestAllWeapons = 0;
//	AController_execClientTestAllWeapons_Parms parms;
//
//	if ( !pClientTestAllWeapons )
//		pClientTestAllWeapons = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientTestAllWeapons" );
//
//	this->ProcessEvent ( pClientTestAllWeapons, &parms, NULL );
//
//}
//
//void AController::ClientTestWeapon ( class AwWeapon* W, int iaWeaponID )
//{
//	static UFunction* pClientTestWeapon = 0;
//	AController_execClientTestWeapon_Parms parms;
//
//	if ( !pClientTestWeapon )
//		pClientTestWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.ClientTestWeapon" );
//
//	parms.W = W;
//	parms.iaWeaponID = iaWeaponID;
//	this->ProcessEvent ( pClientTestWeapon, &parms, NULL );
//
//}
//
//bool AController::NeedsAdrenaline (  )
//{
//	static UFunction* pNeedsAdrenaline = 0;
//	AController_execNeedsAdrenaline_Parms parms;
//
//	if ( !pNeedsAdrenaline )
//		pNeedsAdrenaline = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.NeedsAdrenaline" );
//
//	this->ProcessEvent ( pNeedsAdrenaline, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::AwardAdrenaline ( float Amount )
//{
//	static UFunction* pAwardAdrenaline = 0;
//	AController_execAwardAdrenaline_Parms parms;
//
//	if ( !pAwardAdrenaline )
//		pAwardAdrenaline = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.AwardAdrenaline" );
//
//	parms.Amount = Amount;
//	this->ProcessEvent ( pAwardAdrenaline, &parms, NULL );
//
//}
//
//void AController::wClientFreeze ( float fTime )
//{
//	static UFunction* pwClientFreeze = 0;
//	AController_execwClientFreeze_Parms parms;
//
//	if ( !pwClientFreeze )
//		pwClientFreeze = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.wClientFreeze" );
//
//	parms.fTime = fTime;
//	this->ProcessEvent ( pwClientFreeze, &parms, NULL );
//
//}
//
//void AController::wViewFlash ( float fDeltaTime )
//{
//	static UFunction* pwViewFlash = 0;
//	AController_execwViewFlash_Parms parms;
//
//	if ( !pwViewFlash )
//		pwViewFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.wViewFlash" );
//
//	parms.fDeltaTime = fDeltaTime;
//	this->ProcessEvent ( pwViewFlash, &parms, NULL );
//
//}
//
//void AController::wClientFlash ( float fTime )
//{
//	static UFunction* pwClientFlash = 0;
//	AController_execwClientFlash_Parms parms;
//
//	if ( !pwClientFlash )
//		pwClientFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.wClientFlash" );
//
//	parms.fTime = fTime;
//	this->ProcessEvent ( pwClientFlash, &parms, NULL );
//
//}
//
//void AController::PendingStasis (  )
//{
//	static UFunction* pPendingStasis = 0;
//	AController_execPendingStasis_Parms parms;
//
//	if ( !pPendingStasis )
//		pPendingStasis = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.PendingStasis" );
//
//	this->ProcessEvent ( pPendingStasis, &parms, NULL );
//
//}
//
//void AController::execCmd ( struct FString P1, struct FString P2, struct FString p3, struct FString p4, struct FString p5 )
//{
//	static UFunction* pCmd = 0;
//	AController_execCmd_Parms parms;
//
//	if ( !pCmd )
//		pCmd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.Cmd" );
//
//	parms.P1 = P1;
//	parms.P2 = P2;
//	parms.p3 = p3;
//	parms.p4 = p4;
//	parms.p5 = p5;
//	this->ProcessEvent ( pCmd, &parms, NULL );
//
//}
//
//void AController::eventMissedDodge (  )
//{
//	static UFunction* pMissedDodge = 0;
//	AController_eventMissedDodge_Parms parms;
//
//	if ( !pMissedDodge )
//		pMissedDodge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.MissedDodge" );
//
//	this->ProcessEvent ( pMissedDodge, &parms, NULL );
//
//}
//
//void AController::eventMayDodgeToMoveTarget (  )
//{
//	static UFunction* pMayDodgeToMoveTarget = 0;
//	AController_eventMayDodgeToMoveTarget_Parms parms;
//
//	if ( !pMayDodgeToMoveTarget )
//		pMayDodgeToMoveTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.MayDodgeToMoveTarget" );
//
//	this->ProcessEvent ( pMayDodgeToMoveTarget, &parms, NULL );
//
//}
//
//void AController::eventMayFall (  )
//{
//	static UFunction* pMayFall = 0;
//	AController_eventMayFall_Parms parms;
//
//	if ( !pMayFall )
//		pMayFall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.MayFall" );
//
//	this->ProcessEvent ( pMayFall, &parms, NULL );
//
//}
//
//bool AController::CanMakePathTo ( class AActor* A )
//{
//	static UFunction* pCanMakePathTo = 0;
//	AController_execCanMakePathTo_Parms parms;
//
//	if ( !pCanMakePathTo )
//		pCanMakePathTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.CanMakePathTo" );
//
//	parms.A = A;
//	this->ProcessEvent ( pCanMakePathTo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AController::EndClimbLadder (  )
//{
//	static UFunction* pEndClimbLadder = 0;
//	AController_execEndClimbLadder_Parms parms;
//
//	if ( !pEndClimbLadder )
//		pEndClimbLadder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.EndClimbLadder" );
//
//	this->ProcessEvent ( pEndClimbLadder, &parms, NULL );
//
//}
//
//void AController::StopWaiting (  )
//{
//	static UFunction* pStopWaiting = 0;
//	AController_execStopWaiting_Parms parms;
//
//	if ( !pStopWaiting )
//		pStopWaiting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.StopWaiting" );
//
//	this->ProcessEvent ( pStopWaiting, &parms, NULL );
//
//}
//
//bool AController::InLatentExecution ( int LatentActionNumber )
//{
//	static UFunction* pInLatentExecution = 0;
//	AController_execInLatentExecution_Parms parms;
//
//	if ( !pInLatentExecution )
//		pInLatentExecution = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.InLatentExecution" );
//
//	parms.LatentActionNumber = LatentActionNumber;
//	this->ProcessEvent ( pInLatentExecution, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* AController::PickAnyTarget ( struct FVector FireDir, struct FVector projStart, float* bestAim, float* BestDist )
//{
//	static UFunction* pPickAnyTarget = 0;
//	AController_execPickAnyTarget_Parms parms;
//
//	if ( !pPickAnyTarget )
//		pPickAnyTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.PickAnyTarget" );
//
//	WORD iNative = pPickAnyTarget->iNative;
//	pPickAnyTarget->FunctionFlags &= ~FUNC_Native;
//	pPickAnyTarget->iNative = 0;
//
//	parms.FireDir = FireDir;
//	parms.projStart = projStart;
//	this->ProcessEvent ( pPickAnyTarget, &parms, NULL );
//
//	pPickAnyTarget->iNative = iNative;
//	pPickAnyTarget->FunctionFlags |= FUNC_Native;
//	*bestAim = parms.bestAim;
//	*BestDist = parms.BestDist;
//	return parms.ReturnValue;
//}
//
//class APawn* AController::PickTarget ( struct FVector FireDir, struct FVector projStart, float MaxRange, float* bestAim, float* BestDist )
//{
//	static UFunction* pPickTarget = 0;
//	AController_execPickTarget_Parms parms;
//
//	if ( !pPickTarget )
//		pPickTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.PickTarget" );
//
//	WORD iNative = pPickTarget->iNative;
//	pPickTarget->FunctionFlags &= ~FUNC_Native;
//	pPickTarget->iNative = 0;
//
//	parms.FireDir = FireDir;
//	parms.projStart = projStart;
//	parms.MaxRange = MaxRange;
//	this->ProcessEvent ( pPickTarget, &parms, NULL );
//
//	pPickTarget->iNative = iNative;
//	pPickTarget->FunctionFlags |= FUNC_Native;
//	*bestAim = parms.bestAim;
//	*BestDist = parms.BestDist;
//	return parms.ReturnValue;
//}
//
//void AController::RemoveController (  )
//{
//	static UFunction* pRemoveController = 0;
//	AController_execRemoveController_Parms parms;
//
//	if ( !pRemoveController )
//		pRemoveController = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.RemoveController" );
//
//	WORD iNative = pRemoveController->iNative;
//	pRemoveController->FunctionFlags &= ~FUNC_Native;
//	pRemoveController->iNative = 0;
//
//	this->ProcessEvent ( pRemoveController, &parms, NULL );
//
//	pRemoveController->iNative = iNative;
//	pRemoveController->FunctionFlags |= FUNC_Native;
//}
//
//void AController::AddController (  )
//{
//	static UFunction* pAddController = 0;
//	AController_execAddController_Parms parms;
//
//	if ( !pAddController )
//		pAddController = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.AddController" );
//
//	WORD iNative = pAddController->iNative;
//	pAddController->FunctionFlags &= ~FUNC_Native;
//	pAddController->iNative = 0;
//
//	this->ProcessEvent ( pAddController, &parms, NULL );
//
//	pAddController->iNative = iNative;
//	pAddController->FunctionFlags |= FUNC_Native;
//}
//
//class AActor* AController::FindBestSuperPickup ( float MaxDist )
//{
//	static UFunction* pFindBestSuperPickup = 0;
//	AController_execFindBestSuperPickup_Parms parms;
//
//	if ( !pFindBestSuperPickup )
//		pFindBestSuperPickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.FindBestSuperPickup" );
//
//	parms.MaxDist = MaxDist;
//	this->ProcessEvent ( pFindBestSuperPickup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* AController::FindBestInventoryPath ( float* MinWeight )
//{
//	static UFunction* pFindBestInventoryPath = 0;
//	AController_execFindBestInventoryPath_Parms parms;
//
//	if ( !pFindBestInventoryPath )
//		pFindBestInventoryPath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.FindBestInventoryPath" );
//
//	WORD iNative = pFindBestInventoryPath->iNative;
//	pFindBestInventoryPath->FunctionFlags &= ~FUNC_Native;
//	pFindBestInventoryPath->iNative = 0;
//
//	parms.MinWeight = *MinWeight;
//	this->ProcessEvent ( pFindBestInventoryPath, &parms, NULL );
//
//	pFindBestInventoryPath->iNative = iNative;
//	pFindBestInventoryPath->FunctionFlags |= FUNC_Native;
//	*MinWeight = parms.MinWeight;
//	return parms.ReturnValue;
//}
//
//void AController::WaitForLanding (  )
//{
//	static UFunction* pWaitForLanding = 0;
//	AController_execWaitForLanding_Parms parms;
//
//	if ( !pWaitForLanding )
//		pWaitForLanding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.WaitForLanding" );
//
//	WORD iNative = pWaitForLanding->iNative;
//	pWaitForLanding->FunctionFlags &= ~FUNC_Native;
//	pWaitForLanding->iNative = 0;
//
//	this->ProcessEvent ( pWaitForLanding, &parms, NULL );
//
//	pWaitForLanding->iNative = iNative;
//	pWaitForLanding->FunctionFlags |= FUNC_Native;
//}
//
//bool AController::PickWallAdjust ( struct FVector HitNormal )
//{
//	static UFunction* pPickWallAdjust = 0;
//	AController_execPickWallAdjust_Parms parms;
//
//	if ( !pPickWallAdjust )
//		pPickWallAdjust = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.PickWallAdjust" );
//
//	WORD iNative = pPickWallAdjust->iNative;
//	pPickWallAdjust->FunctionFlags &= ~FUNC_Native;
//	pPickWallAdjust->iNative = 0;
//
//	parms.HitNormal = HitNormal;
//	this->ProcessEvent ( pPickWallAdjust, &parms, NULL );
//
//	pPickWallAdjust->iNative = iNative;
//	pPickWallAdjust->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool AController::actorReachable ( class AActor* anActor )
//{
//	static UFunction* pactorReachable = 0;
//	AController_execactorReachable_Parms parms;
//
//	if ( !pactorReachable )
//		pactorReachable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.actorReachable" );
//
//	WORD iNative = pactorReachable->iNative;
//	pactorReachable->FunctionFlags &= ~FUNC_Native;
//	pactorReachable->iNative = 0;
//
//	parms.anActor = anActor;
//	this->ProcessEvent ( pactorReachable, &parms, NULL );
//
//	pactorReachable->iNative = iNative;
//	pactorReachable->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool AController::pointReachable ( struct FVector aPoint )
//{
//	static UFunction* ppointReachable = 0;
//	AController_execpointReachable_Parms parms;
//
//	if ( !ppointReachable )
//		ppointReachable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.pointReachable" );
//
//	WORD iNative = ppointReachable->iNative;
//	ppointReachable->FunctionFlags &= ~FUNC_Native;
//	ppointReachable->iNative = 0;
//
//	parms.aPoint = aPoint;
//	this->ProcessEvent ( ppointReachable, &parms, NULL );
//
//	ppointReachable->iNative = iNative;
//	ppointReachable->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//struct FVector AController::EAdjustJump ( float BaseZ, float XYSpeed )
//{
//	static UFunction* pEAdjustJump = 0;
//	AController_execEAdjustJump_Parms parms;
//
//	if ( !pEAdjustJump )
//		pEAdjustJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.EAdjustJump" );
//
//	WORD iNative = pEAdjustJump->iNative;
//	pEAdjustJump->FunctionFlags &= ~FUNC_Native;
//	pEAdjustJump->iNative = 0;
//
//	parms.BaseZ = BaseZ;
//	parms.XYSpeed = XYSpeed;
//	this->ProcessEvent ( pEAdjustJump, &parms, NULL );
//
//	pEAdjustJump->iNative = iNative;
//	pEAdjustJump->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//class ANavigationPoint* AController::FindRandomDest (  )
//{
//	static UFunction* pFindRandomDest = 0;
//	AController_execFindRandomDest_Parms parms;
//
//	if ( !pFindRandomDest )
//		pFindRandomDest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.FindRandomDest" );
//
//	WORD iNative = pFindRandomDest->iNative;
//	pFindRandomDest->FunctionFlags &= ~FUNC_Native;
//	pFindRandomDest->iNative = 0;
//
//	this->ProcessEvent ( pFindRandomDest, &parms, NULL );
//
//	pFindRandomDest->iNative = iNative;
//	pFindRandomDest->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//class AActor* AController::FindPathTowardNearest ( class UClass* GoalClass, bool bWeightDetours )
//{
//	static UFunction* pFindPathTowardNearest = 0;
//	AController_execFindPathTowardNearest_Parms parms;
//
//	if ( !pFindPathTowardNearest )
//		pFindPathTowardNearest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.FindPathTowardNearest" );
//
//	parms.GoalClass = GoalClass;
//	parms.bWeightDetours = bWeightDetours;
//	this->ProcessEvent ( pFindPathTowardNearest, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* AController::FindPathToIntercept ( class APawn* P, class AActor* RouteGoal, bool bWeightDetours )
//{
//	static UFunction* pFindPathToIntercept = 0;
//	AController_execFindPathToIntercept_Parms parms;
//
//	if ( !pFindPathToIntercept )
//		pFindPathToIntercept = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.FindPathToIntercept" );
//
//	parms.P = P;
//	parms.RouteGoal = RouteGoal;
//	parms.bWeightDetours = bWeightDetours;
//	this->ProcessEvent ( pFindPathToIntercept, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* AController::FindPathToward ( class AActor* anActor, bool bWeightDetours )
//{
//	static UFunction* pFindPathToward = 0;
//	AController_execFindPathToward_Parms parms;
//
//	if ( !pFindPathToward )
//		pFindPathToward = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.FindPathToward" );
//
//	WORD iNative = pFindPathToward->iNative;
//	pFindPathToward->FunctionFlags &= ~FUNC_Native;
//	pFindPathToward->iNative = 0;
//
//	parms.anActor = anActor;
//	parms.bWeightDetours = bWeightDetours;
//	this->ProcessEvent ( pFindPathToward, &parms, NULL );
//
//	pFindPathToward->iNative = iNative;
//	pFindPathToward->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//class AActor* AController::FindPathTo ( struct FVector aPoint )
//{
//	static UFunction* pFindPathTo = 0;
//	AController_execFindPathTo_Parms parms;
//
//	if ( !pFindPathTo )
//		pFindPathTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.FindPathTo" );
//
//	WORD iNative = pFindPathTo->iNative;
//	pFindPathTo->FunctionFlags &= ~FUNC_Native;
//	pFindPathTo->iNative = 0;
//
//	parms.aPoint = aPoint;
//	this->ProcessEvent ( pFindPathTo, &parms, NULL );
//
//	pFindPathTo->iNative = iNative;
//	pFindPathTo->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool AController::CanSee ( class APawn* Other )
//{
//	static UFunction* pCanSee = 0;
//	AController_execCanSee_Parms parms;
//
//	if ( !pCanSee )
//		pCanSee = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.CanSee" );
//
//	WORD iNative = pCanSee->iNative;
//	pCanSee->FunctionFlags &= ~FUNC_Native;
//	pCanSee->iNative = 0;
//
//	parms.Other = Other;
//	this->ProcessEvent ( pCanSee, &parms, NULL );
//
//	pCanSee->iNative = iNative;
//	pCanSee->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//bool AController::LineOfSightTo ( class AActor* Other )
//{
//	static UFunction* pLineOfSightTo = 0;
//	AController_execLineOfSightTo_Parms parms;
//
//	if ( !pLineOfSightTo )
//		pLineOfSightTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.LineOfSightTo" );
//
//	WORD iNative = pLineOfSightTo->iNative;
//	pLineOfSightTo->FunctionFlags &= ~FUNC_Native;
//	pLineOfSightTo->iNative = 0;
//
//	parms.Other = Other;
//	this->ProcessEvent ( pLineOfSightTo, &parms, NULL );
//
//	pLineOfSightTo->iNative = iNative;
//	pLineOfSightTo->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//void AController::FinishRotation (  )
//{
//	static UFunction* pFinishRotation = 0;
//	AController_execFinishRotation_Parms parms;
//
//	if ( !pFinishRotation )
//		pFinishRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.FinishRotation" );
//
//	WORD iNative = pFinishRotation->iNative;
//	pFinishRotation->FunctionFlags &= ~FUNC_Native;
//	pFinishRotation->iNative = 0;
//
//	this->ProcessEvent ( pFinishRotation, &parms, NULL );
//
//	pFinishRotation->iNative = iNative;
//	pFinishRotation->FunctionFlags |= FUNC_Native;
//}
//
//void AController::MoveToward ( class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, bool bUseStrafing, bool bShouldSprint )
//{
//	static UFunction* pMoveToward = 0;
//	AController_execMoveToward_Parms parms;
//
//	if ( !pMoveToward )
//		pMoveToward = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.MoveToward" );
//
//	WORD iNative = pMoveToward->iNative;
//	pMoveToward->FunctionFlags &= ~FUNC_Native;
//	pMoveToward->iNative = 0;
//
//	parms.NewTarget = NewTarget;
//	parms.ViewFocus = ViewFocus;
//	parms.DestinationOffset = DestinationOffset;
//	parms.bUseStrafing = bUseStrafing;
//	parms.bShouldSprint = bShouldSprint;
//	this->ProcessEvent ( pMoveToward, &parms, NULL );
//
//	pMoveToward->iNative = iNative;
//	pMoveToward->FunctionFlags |= FUNC_Native;
//}
//
//void AController::MoveTo ( struct FVector NewDestination, class AActor* ViewFocus, bool bShouldSprint, struct FVector FocalPoint )
//{
//	static UFunction* pMoveTo = 0;
//	AController_execMoveTo_Parms parms;
//
//	if ( !pMoveTo )
//		pMoveTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Controller.MoveTo" );
//
//	WORD iNative = pMoveTo->iNative;
//	pMoveTo->FunctionFlags &= ~FUNC_Native;
//	pMoveTo->iNative = 0;
//
//	parms.NewDestination = NewDestination;
//	parms.ViewFocus = ViewFocus;
//	parms.bShouldSprint = bShouldSprint;
//	parms.FocalPoint = FocalPoint;
//	this->ProcessEvent ( pMoveTo, &parms, NULL );
//
//	pMoveTo->iNative = iNative;
//	pMoveTo->FunctionFlags |= FUNC_Native;
//}
//
//void APlayerController::ServerSendCheatMsg ( struct FString Msg )
//{
//	static UFunction* pServerSendCheatMsg = 0;
//	APlayerController_execServerSendCheatMsg_Parms parms;
//
//	if ( !pServerSendCheatMsg )
//		pServerSendCheatMsg = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSendCheatMsg" );
//
//	parms.Msg = Msg;
//	this->ProcessEvent ( pServerSendCheatMsg, &parms, NULL );
//
//}
//
//void APlayerController::execSendCheatMsg ( struct FString Msg )
//{
//	static UFunction* pSendCheatMsg = 0;
//	APlayerController_execSendCheatMsg_Parms parms;
//
//	if ( !pSendCheatMsg )
//		pSendCheatMsg = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SendCheatMsg" );
//
//	parms.Msg = Msg;
//	this->ProcessEvent ( pSendCheatMsg, &parms, NULL );
//
//}
//
//void APlayerController::DisplayDebugPHJ ( class UCanvas* Canvas )
//{
//	static UFunction* pDisplayDebugPHJ = 0;
//	APlayerController_execDisplayDebugPHJ_Parms parms;
//
//	if ( !pDisplayDebugPHJ )
//		pDisplayDebugPHJ = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DisplayDebugPHJ" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebugPHJ, &parms, NULL );
//
//}
//
//void APlayerController::DisplayDebugChan1 ( class UCanvas* Canvas )
//{
//	static UFunction* pDisplayDebugChan1 = 0;
//	APlayerController_execDisplayDebugChan1_Parms parms;
//
//	if ( !pDisplayDebugChan1 )
//		pDisplayDebugChan1 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DisplayDebugChan1" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebugChan1, &parms, NULL );
//
//}
//
//void APlayerController::execinput_weapon ( struct FString S )
//{
//	static UFunction* pinput_weapon = 0;
//	APlayerController_execinput_weapon_Parms parms;
//
//	if ( !pinput_weapon )
//		pinput_weapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.input_weapon" );
//
//	parms.S = S;
//	this->ProcessEvent ( pinput_weapon, &parms, NULL );
//
//}
//
//void APlayerController::execinput_weaponex ( struct FString S )
//{
//	static UFunction* pinput_weaponex = 0;
//	APlayerController_execinput_weaponex_Parms parms;
//
//	if ( !pinput_weaponex )
//		pinput_weaponex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.input_weaponex" );
//
//	parms.S = S;
//	this->ProcessEvent ( pinput_weaponex, &parms, NULL );
//
//}
//
//void APlayerController::execSetWeaponTraceAim ( struct FString S )
//{
//	static UFunction* pSetWeaponTraceAim = 0;
//	APlayerController_execSetWeaponTraceAim_Parms parms;
//
//	if ( !pSetWeaponTraceAim )
//		pSetWeaponTraceAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetWeaponTraceAim" );
//
//	parms.S = S;
//	this->ProcessEvent ( pSetWeaponTraceAim, &parms, NULL );
//
//}
//
//void APlayerController::execSetWeaponTrace ( struct FString S )
//{
//	static UFunction* pSetWeaponTrace = 0;
//	APlayerController_execSetWeaponTrace_Parms parms;
//
//	if ( !pSetWeaponTrace )
//		pSetWeaponTrace = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetWeaponTrace" );
//
//	parms.S = S;
//	this->ProcessEvent ( pSetWeaponTrace, &parms, NULL );
//
//}
//
//void APlayerController::execResetWeaponTrace (  )
//{
//	static UFunction* pResetWeaponTrace = 0;
//	APlayerController_execResetWeaponTrace_Parms parms;
//
//	if ( !pResetWeaponTrace )
//		pResetWeaponTrace = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ResetWeaponTrace" );
//
//	this->ProcessEvent ( pResetWeaponTrace, &parms, NULL );
//
//}
//
//void APlayerController::execResetWeaponTraceIndex (  )
//{
//	static UFunction* pResetWeaponTraceIndex = 0;
//	APlayerController_execResetWeaponTraceIndex_Parms parms;
//
//	if ( !pResetWeaponTraceIndex )
//		pResetWeaponTraceIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ResetWeaponTraceIndex" );
//
//	this->ProcessEvent ( pResetWeaponTraceIndex, &parms, NULL );
//
//}
//
//void APlayerController::execUnsetTestAim (  )
//{
//	static UFunction* pUnsetTestAim = 0;
//	APlayerController_execUnsetTestAim_Parms parms;
//
//	if ( !pUnsetTestAim )
//		pUnsetTestAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.UnsetTestAim" );
//
//	this->ProcessEvent ( pUnsetTestAim, &parms, NULL );
//
//}
//
//void APlayerController::execSetTestAim (  )
//{
//	static UFunction* pSetTestAim = 0;
//	APlayerController_execSetTestAim_Parms parms;
//
//	if ( !pSetTestAim )
//		pSetTestAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetTestAim" );
//
//	this->ProcessEvent ( pSetTestAim, &parms, NULL );
//
//}
//
//void APlayerController::execPlusCollisionHeight ( float A )
//{
//	static UFunction* pPlusCollisionHeight = 0;
//	APlayerController_execPlusCollisionHeight_Parms parms;
//
//	if ( !pPlusCollisionHeight )
//		pPlusCollisionHeight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PlusCollisionHeight" );
//
//	parms.A = A;
//	this->ProcessEvent ( pPlusCollisionHeight, &parms, NULL );
//
//}
//
//void APlayerController::execShowWebzenShop (  )
//{
//	static UFunction* pShowWebzenShop = 0;
//	APlayerController_execShowWebzenShop_Parms parms;
//
//	if ( !pShowWebzenShop )
//		pShowWebzenShop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ShowWebzenShop" );
//
//	this->ProcessEvent ( pShowWebzenShop, &parms, NULL );
//
//}
//
//void APlayerController::ClientChangeTcpTimeLimit (  )
//{
//	static UFunction* pClientChangeTcpTimeLimit = 0;
//	APlayerController_execClientChangeTcpTimeLimit_Parms parms;
//
//	if ( !pClientChangeTcpTimeLimit )
//		pClientChangeTcpTimeLimit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientChangeTcpTimeLimit" );
//
//	this->ProcessEvent ( pClientChangeTcpTimeLimit, &parms, NULL );
//
//}
//
//void APlayerController::execsetsdrespawn (  )
//{
//	static UFunction* psetsdrespawn = 0;
//	APlayerController_execsetsdrespawn_Parms parms;
//
//	if ( !psetsdrespawn )
//		psetsdrespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.setsdrespawn" );
//
//	this->ProcessEvent ( psetsdrespawn, &parms, NULL );
//
//}
//
//void APlayerController::execsetautostart (  )
//{
//	static UFunction* psetautostart = 0;
//	APlayerController_execsetautostart_Parms parms;
//
//	if ( !psetautostart )
//		psetautostart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.setautostart" );
//
//	this->ProcessEvent ( psetautostart, &parms, NULL );
//
//}
//
//void APlayerController::ClientUseSupplyItem ( unsigned char byType )
//{
//	static UFunction* pClientUseSupplyItem = 0;
//	APlayerController_execClientUseSupplyItem_Parms parms;
//
//	if ( !pClientUseSupplyItem )
//		pClientUseSupplyItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientUseSupplyItem" );
//
//	parms.byType = byType;
//	this->ProcessEvent ( pClientUseSupplyItem, &parms, NULL );
//
//}
//
//void APlayerController::ServerUseSupplyItem ( unsigned char byType )
//{
//	static UFunction* pServerUseSupplyItem = 0;
//	APlayerController_execServerUseSupplyItem_Parms parms;
//
//	if ( !pServerUseSupplyItem )
//		pServerUseSupplyItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerUseSupplyItem" );
//
//	parms.byType = byType;
//	this->ProcessEvent ( pServerUseSupplyItem, &parms, NULL );
//
//}
//
//void APlayerController::execSMWL ( struct FString swmode, struct FString Value )
//{
//	static UFunction* pSMWL = 0;
//	APlayerController_execSMWL_Parms parms;
//
//	if ( !pSMWL )
//		pSMWL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SMWL" );
//
//	parms.swmode = swmode;
//	parms.Value = Value;
//	this->ProcessEvent ( pSMWL, &parms, NULL );
//
//}
//
//void APlayerController::execTest3 ( float fActive )
//{
//	static UFunction* pTest3 = 0;
//	APlayerController_execTest3_Parms parms;
//
//	if ( !pTest3 )
//		pTest3 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Test3" );
//
//	parms.fActive = fActive;
//	this->ProcessEvent ( pTest3, &parms, NULL );
//
//}
//
//void APlayerController::execTest2 ( float fAniFrame )
//{
//	static UFunction* pTest2 = 0;
//	APlayerController_execTest2_Parms parms;
//
//	if ( !pTest2 )
//		pTest2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Test2" );
//
//	parms.fAniFrame = fAniFrame;
//	this->ProcessEvent ( pTest2, &parms, NULL );
//
//}
//
//void APlayerController::execTest1 ( float fAniFrame )
//{
//	static UFunction* pTest1 = 0;
//	APlayerController_execTest1_Parms parms;
//
//	if ( !pTest1 )
//		pTest1 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Test1" );
//
//	parms.fAniFrame = fAniFrame;
//	this->ProcessEvent ( pTest1, &parms, NULL );
//
//}
//
//bool APlayerController::CheckChangeHostShowQS (  )
//{
//	static UFunction* pCheckChangeHostShowQS = 0;
//	APlayerController_execCheckChangeHostShowQS_Parms parms;
//
//	if ( !pCheckChangeHostShowQS )
//		pCheckChangeHostShowQS = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CheckChangeHostShowQS" );
//
//	this->ProcessEvent ( pCheckChangeHostShowQS, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::execBob ( int idvalue, float Value )
//{
//	static UFunction* pBob = 0;
//	APlayerController_execBob_Parms parms;
//
//	if ( !pBob )
//		pBob = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Bob" );
//
//	parms.idvalue = idvalue;
//	parms.Value = Value;
//	this->ProcessEvent ( pBob, &parms, NULL );
//
//}
//
//void APlayerController::execMark (  )
//{
//	static UFunction* pMark = 0;
//	APlayerController_execMark_Parms parms;
//
//	if ( !pMark )
//		pMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Mark" );
//
//	this->ProcessEvent ( pMark, &parms, NULL );
//
//}
//
//void APlayerController::execLODBias ( float fBias )
//{
//	static UFunction* pLODBias = 0;
//	APlayerController_execLODBias_Parms parms;
//
//	if ( !pLODBias )
//		pLODBias = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.LODBias" );
//
//	parms.fBias = fBias;
//	this->ProcessEvent ( pLODBias, &parms, NULL );
//
//}
//
//void APlayerController::execEverySetPktLoss ( int ms )
//{
//	static UFunction* pEverySetPktLoss = 0;
//	APlayerController_execEverySetPktLoss_Parms parms;
//
//	if ( !pEverySetPktLoss )
//		pEverySetPktLoss = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.EverySetPktLoss" );
//
//	parms.ms = ms;
//	this->ProcessEvent ( pEverySetPktLoss, &parms, NULL );
//
//}
//
//void APlayerController::execClientSetPktLoss ( int ms )
//{
//	static UFunction* pClientSetPktLoss = 0;
//	APlayerController_execClientSetPktLoss_Parms parms;
//
//	if ( !pClientSetPktLoss )
//		pClientSetPktLoss = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetPktLoss" );
//
//	parms.ms = ms;
//	this->ProcessEvent ( pClientSetPktLoss, &parms, NULL );
//
//}
//
//void APlayerController::execEverySetPktLag ( int ms )
//{
//	static UFunction* pEverySetPktLag = 0;
//	APlayerController_execEverySetPktLag_Parms parms;
//
//	if ( !pEverySetPktLag )
//		pEverySetPktLag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.EverySetPktLag" );
//
//	parms.ms = ms;
//	this->ProcessEvent ( pEverySetPktLag, &parms, NULL );
//
//}
//
//void APlayerController::execClientSetPktLag ( int ms )
//{
//	static UFunction* pClientSetPktLag = 0;
//	APlayerController_execClientSetPktLag_Parms parms;
//
//	if ( !pClientSetPktLag )
//		pClientSetPktLag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetPktLag" );
//
//	parms.ms = ms;
//	this->ProcessEvent ( pClientSetPktLag, &parms, NULL );
//
//}
//
//void APlayerController::execEverySos (  )
//{
//	static UFunction* pEverySos = 0;
//	APlayerController_execEverySos_Parms parms;
//
//	if ( !pEverySos )
//		pEverySos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.EverySos" );
//
//	this->ProcessEvent ( pEverySos, &parms, NULL );
//
//}
//
//void APlayerController::execClientSos (  )
//{
//	static UFunction* pClientSos = 0;
//	APlayerController_execClientSos_Parms parms;
//
//	if ( !pClientSos )
//		pClientSos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSos" );
//
//	this->ProcessEvent ( pClientSos, &parms, NULL );
//
//}
//
//void APlayerController::execSos (  )
//{
//	static UFunction* pSos = 0;
//	APlayerController_execSos_Parms parms;
//
//	if ( !pSos )
//		pSos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Sos" );
//
//	this->ProcessEvent ( pSos, &parms, NULL );
//
//}
//
//void APlayerController::execeverysmall (  )
//{
//	static UFunction* peverysmall = 0;
//	APlayerController_execeverysmall_Parms parms;
//
//	if ( !peverysmall )
//		peverysmall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.everysmall" );
//
//	this->ProcessEvent ( peverysmall, &parms, NULL );
//
//}
//
//void APlayerController::execClientSmall (  )
//{
//	static UFunction* pClientSmall = 0;
//	APlayerController_execClientSmall_Parms parms;
//
//	if ( !pClientSmall )
//		pClientSmall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSmall" );
//
//	this->ProcessEvent ( pClientSmall, &parms, NULL );
//
//}
//
//void APlayerController::execsmall (  )
//{
//	static UFunction* psmall = 0;
//	APlayerController_execsmall_Parms parms;
//
//	if ( !psmall )
//		psmall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.small" );
//
//	this->ProcessEvent ( psmall, &parms, NULL );
//
//}
//
//void APlayerController::execShowE (  )
//{
//	static UFunction* pShowE = 0;
//	APlayerController_execShowE_Parms parms;
//
//	if ( !pShowE )
//		pShowE = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ShowE" );
//
//	this->ProcessEvent ( pShowE, &parms, NULL );
//
//}
//
//void APlayerController::ClientHoldFlag (  )
//{
//	static UFunction* pClientHoldFlag = 0;
//	APlayerController_execClientHoldFlag_Parms parms;
//
//	if ( !pClientHoldFlag )
//		pClientHoldFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientHoldFlag" );
//
//	this->ProcessEvent ( pClientHoldFlag, &parms, NULL );
//
//}
//
//class AwWeapon* APlayerController::GetDemoPackToMyInven (  )
//{
//	static UFunction* pGetDemoPackToMyInven = 0;
//	APlayerController_execGetDemoPackToMyInven_Parms parms;
//
//	if ( !pGetDemoPackToMyInven )
//		pGetDemoPackToMyInven = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetDemoPackToMyInven" );
//
//	this->ProcessEvent ( pGetDemoPackToMyInven, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::DestroyEmitter (  )
//{
//	static UFunction* pDestroyEmitter = 0;
//	APlayerController_execDestroyEmitter_Parms parms;
//
//	if ( !pDestroyEmitter )
//		pDestroyEmitter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DestroyEmitter" );
//
//	this->ProcessEvent ( pDestroyEmitter, &parms, NULL );
//
//}
//
//void APlayerController::PushAASNotice ( struct FString sNotice, float beginTime, unsigned char byLevel )
//{
//	static UFunction* pPushAASNotice = 0;
//	APlayerController_execPushAASNotice_Parms parms;
//
//	if ( !pPushAASNotice )
//		pPushAASNotice = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PushAASNotice" );
//
//	parms.sNotice = sNotice;
//	parms.beginTime = beginTime;
//	parms.byLevel = byLevel;
//	this->ProcessEvent ( pPushAASNotice, &parms, NULL );
//
//}
//
//void APlayerController::PushGameNotice ( struct FString sNotice )
//{
//	static UFunction* pPushGameNotice = 0;
//	APlayerController_execPushGameNotice_Parms parms;
//
//	if ( !pPushGameNotice )
//		pPushGameNotice = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PushGameNotice" );
//
//	parms.sNotice = sNotice;
//	this->ProcessEvent ( pPushGameNotice, &parms, NULL );
//
//}
//
//void APlayerController::AllClientDeleteSuppliesPositions (  )
//{
//	static UFunction* pAllClientDeleteSuppliesPositions = 0;
//	APlayerController_execAllClientDeleteSuppliesPositions_Parms parms;
//
//	if ( !pAllClientDeleteSuppliesPositions )
//		pAllClientDeleteSuppliesPositions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AllClientDeleteSuppliesPositions" );
//
//	this->ProcessEvent ( pAllClientDeleteSuppliesPositions, &parms, NULL );
//
//}
//
//void APlayerController::ClientDeleteSuppliesPositions ( class AActor* act )
//{
//	static UFunction* pClientDeleteSuppliesPositions = 0;
//	APlayerController_execClientDeleteSuppliesPositions_Parms parms;
//
//	if ( !pClientDeleteSuppliesPositions )
//		pClientDeleteSuppliesPositions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientDeleteSuppliesPositions" );
//
//	parms.act = act;
//	this->ProcessEvent ( pClientDeleteSuppliesPositions, &parms, NULL );
//
//}
//
//void APlayerController::ChangeVoiceObjectLanguage ( struct FString* voiceObjectName )
//{
//	static UFunction* pChangeVoiceObjectLanguage = 0;
//	APlayerController_execChangeVoiceObjectLanguage_Parms parms;
//
//	if ( !pChangeVoiceObjectLanguage )
//		pChangeVoiceObjectLanguage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ChangeVoiceObjectLanguage" );
//
//	parms.voiceObjectName = *voiceObjectName;
//	this->ProcessEvent ( pChangeVoiceObjectLanguage, &parms, NULL );
//
//	*voiceObjectName = parms.voiceObjectName;
//}
//
//void APlayerController::VoiceObjectNameSetting (  )
//{
//	static UFunction* pVoiceObjectNameSetting = 0;
//	APlayerController_execVoiceObjectNameSetting_Parms parms;
//
//	if ( !pVoiceObjectNameSetting )
//		pVoiceObjectNameSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.VoiceObjectNameSetting" );
//
//	this->ProcessEvent ( pVoiceObjectNameSetting, &parms, NULL );
//
//}
//
//void APlayerController::SetVoiceLanguage ( int iTeamIndex )
//{
//	static UFunction* pSetVoiceLanguage = 0;
//	APlayerController_execSetVoiceLanguage_Parms parms;
//
//	if ( !pSetVoiceLanguage )
//		pSetVoiceLanguage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetVoiceLanguage" );
//
//	parms.iTeamIndex = iTeamIndex;
//	this->ProcessEvent ( pSetVoiceLanguage, &parms, NULL );
//
//}
//
//void APlayerController::ClientSpawnInLogin ( int iTeamIndex )
//{
//	static UFunction* pClientSpawnInLogin = 0;
//	APlayerController_execClientSpawnInLogin_Parms parms;
//
//	if ( !pClientSpawnInLogin )
//		pClientSpawnInLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSpawnInLogin" );
//
//	parms.iTeamIndex = iTeamIndex;
//	this->ProcessEvent ( pClientSpawnInLogin, &parms, NULL );
//
//}
//
//void APlayerController::SpawnInLogin ( int iTeamIndex )
//{
//	static UFunction* pSpawnInLogin = 0;
//	APlayerController_execSpawnInLogin_Parms parms;
//
//	if ( !pSpawnInLogin )
//		pSpawnInLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SpawnInLogin" );
//
//	parms.iTeamIndex = iTeamIndex;
//	this->ProcessEvent ( pSpawnInLogin, &parms, NULL );
//
//}
//
//void APlayerController::ClientIncHealthPack ( bool bAdd )
//{
//	static UFunction* pClientIncHealthPack = 0;
//	APlayerController_execClientIncHealthPack_Parms parms;
//
//	if ( !pClientIncHealthPack )
//		pClientIncHealthPack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientIncHealthPack" );
//
//	parms.bAdd = bAdd;
//	this->ProcessEvent ( pClientIncHealthPack, &parms, NULL );
//
//}
//
//void APlayerController::ServerIncHealthPack ( bool bAdd )
//{
//	static UFunction* pServerIncHealthPack = 0;
//	APlayerController_execServerIncHealthPack_Parms parms;
//
//	if ( !pServerIncHealthPack )
//		pServerIncHealthPack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerIncHealthPack" );
//
//	parms.bAdd = bAdd;
//	this->ProcessEvent ( pServerIncHealthPack, &parms, NULL );
//
//}
//
//void APlayerController::ClientBombDetection ( bool bAdd )
//{
//	static UFunction* pClientBombDetection = 0;
//	APlayerController_execClientBombDetection_Parms parms;
//
//	if ( !pClientBombDetection )
//		pClientBombDetection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientBombDetection" );
//
//	parms.bAdd = bAdd;
//	this->ProcessEvent ( pClientBombDetection, &parms, NULL );
//
//}
//
//void APlayerController::ServerBombDetection ( bool bAdd )
//{
//	static UFunction* pServerBombDetection = 0;
//	APlayerController_execServerBombDetection_Parms parms;
//
//	if ( !pServerBombDetection )
//		pServerBombDetection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerBombDetection" );
//
//	parms.bAdd = bAdd;
//	this->ProcessEvent ( pServerBombDetection, &parms, NULL );
//
//}
//
//void APlayerController::ClientQuickDemolition ( bool bAdd )
//{
//	static UFunction* pClientQuickDemolition = 0;
//	APlayerController_execClientQuickDemolition_Parms parms;
//
//	if ( !pClientQuickDemolition )
//		pClientQuickDemolition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientQuickDemolition" );
//
//	parms.bAdd = bAdd;
//	this->ProcessEvent ( pClientQuickDemolition, &parms, NULL );
//
//}
//
//void APlayerController::ServerQuickDemolition ( bool bAdd )
//{
//	static UFunction* pServerQuickDemolition = 0;
//	APlayerController_execServerQuickDemolition_Parms parms;
//
//	if ( !pServerQuickDemolition )
//		pServerQuickDemolition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerQuickDemolition" );
//
//	parms.bAdd = bAdd;
//	this->ProcessEvent ( pServerQuickDemolition, &parms, NULL );
//
//}
//
//void APlayerController::ClientQuickRespawn ( bool bAdd )
//{
//	static UFunction* pClientQuickRespawn = 0;
//	APlayerController_execClientQuickRespawn_Parms parms;
//
//	if ( !pClientQuickRespawn )
//		pClientQuickRespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientQuickRespawn" );
//
//	parms.bAdd = bAdd;
//	this->ProcessEvent ( pClientQuickRespawn, &parms, NULL );
//
//}
//
//void APlayerController::ServerQuickRespawn ( bool bAdd )
//{
//	static UFunction* pServerQuickRespawn = 0;
//	APlayerController_execServerQuickRespawn_Parms parms;
//
//	if ( !pServerQuickRespawn )
//		pServerQuickRespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerQuickRespawn" );
//
//	parms.bAdd = bAdd;
//	this->ProcessEvent ( pServerQuickRespawn, &parms, NULL );
//
//}
//
//void APlayerController::ClientIncExplosion ( bool bAdd )
//{
//	static UFunction* pClientIncExplosion = 0;
//	APlayerController_execClientIncExplosion_Parms parms;
//
//	if ( !pClientIncExplosion )
//		pClientIncExplosion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientIncExplosion" );
//
//	parms.bAdd = bAdd;
//	this->ProcessEvent ( pClientIncExplosion, &parms, NULL );
//
//}
//
//void APlayerController::ServerIncExplosion ( bool bAdd )
//{
//	static UFunction* pServerIncExplosion = 0;
//	APlayerController_execServerIncExplosion_Parms parms;
//
//	if ( !pServerIncExplosion )
//		pServerIncExplosion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerIncExplosion" );
//
//	parms.bAdd = bAdd;
//	this->ProcessEvent ( pServerIncExplosion, &parms, NULL );
//
//}
//
//void APlayerController::ClientAddStamina ( bool bAdd )
//{
//	static UFunction* pClientAddStamina = 0;
//	APlayerController_execClientAddStamina_Parms parms;
//
//	if ( !pClientAddStamina )
//		pClientAddStamina = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientAddStamina" );
//
//	parms.bAdd = bAdd;
//	this->ProcessEvent ( pClientAddStamina, &parms, NULL );
//
//}
//
//void APlayerController::ServerAddStamina ( bool bAdd )
//{
//	static UFunction* pServerAddStamina = 0;
//	APlayerController_execServerAddStamina_Parms parms;
//
//	if ( !pServerAddStamina )
//		pServerAddStamina = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerAddStamina" );
//
//	parms.bAdd = bAdd;
//	this->ProcessEvent ( pServerAddStamina, &parms, NULL );
//
//}
//
//void APlayerController::ClientCheckSkill (  )
//{
//	static UFunction* pClientCheckSkill = 0;
//	APlayerController_execClientCheckSkill_Parms parms;
//
//	if ( !pClientCheckSkill )
//		pClientCheckSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientCheckSkill" );
//
//	this->ProcessEvent ( pClientCheckSkill, &parms, NULL );
//
//}
//
//bool APlayerController::IsBombDetection (  )
//{
//	static UFunction* pIsBombDetection = 0;
//	APlayerController_execIsBombDetection_Parms parms;
//
//	if ( !pIsBombDetection )
//		pIsBombDetection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsBombDetection" );
//
//	this->ProcessEvent ( pIsBombDetection, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::ClientTestAllWeapons (  )
//{
//	static UFunction* pClientTestAllWeapons = 0;
//	APlayerController_execClientTestAllWeapons_Parms parms;
//
//	if ( !pClientTestAllWeapons )
//		pClientTestAllWeapons = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientTestAllWeapons" );
//
//	this->ProcessEvent ( pClientTestAllWeapons, &parms, NULL );
//
//}
//
//void APlayerController::ServerRequestWeapon ( int iaWeaponID )
//{
//	static UFunction* pServerRequestWeapon = 0;
//	APlayerController_execServerRequestWeapon_Parms parms;
//
//	if ( !pServerRequestWeapon )
//		pServerRequestWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerRequestWeapon" );
//
//	parms.iaWeaponID = iaWeaponID;
//	this->ProcessEvent ( pServerRequestWeapon, &parms, NULL );
//
//}
//
//void APlayerController::ClientTestWeapon ( class AwWeapon* W, int iaWeaponID )
//{
//	static UFunction* pClientTestWeapon = 0;
//	APlayerController_execClientTestWeapon_Parms parms;
//
//	if ( !pClientTestWeapon )
//		pClientTestWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientTestWeapon" );
//
//	parms.W = W;
//	parms.iaWeaponID = iaWeaponID;
//	this->ProcessEvent ( pClientTestWeapon, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetHidden (  )
//{
//	static UFunction* pClientSetHidden = 0;
//	APlayerController_execClientSetHidden_Parms parms;
//
//	if ( !pClientSetHidden )
//		pClientSetHidden = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetHidden" );
//
//	this->ProcessEvent ( pClientSetHidden, &parms, NULL );
//
//}
//
//void APlayerController::execSelectPrevWeapon (  )
//{
//	static UFunction* pSelectPrevWeapon = 0;
//	APlayerController_execSelectPrevWeapon_Parms parms;
//
//	if ( !pSelectPrevWeapon )
//		pSelectPrevWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SelectPrevWeapon" );
//
//	this->ProcessEvent ( pSelectPrevWeapon, &parms, NULL );
//
//}
//
//void APlayerController::UpdateOption (  )
//{
//	static UFunction* pUpdateOption = 0;
//	APlayerController_execUpdateOption_Parms parms;
//
//	if ( !pUpdateOption )
//		pUpdateOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.UpdateOption" );
//
//	this->ProcessEvent ( pUpdateOption, &parms, NULL );
//
//}
//
//void APlayerController::PlaySoundRadioMessage ( int iKey, int iType )
//{
//	static UFunction* pPlaySoundRadioMessage = 0;
//	APlayerController_execPlaySoundRadioMessage_Parms parms;
//
//	if ( !pPlaySoundRadioMessage )
//		pPlaySoundRadioMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PlaySoundRadioMessage" );
//
//	parms.iKey = iKey;
//	parms.iType = iType;
//	this->ProcessEvent ( pPlaySoundRadioMessage, &parms, NULL );
//
//}
//
//void APlayerController::SelectRadioMessage ( int iKey )
//{
//	static UFunction* pSelectRadioMessage = 0;
//	APlayerController_execSelectRadioMessage_Parms parms;
//
//	if ( !pSelectRadioMessage )
//		pSelectRadioMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SelectRadioMessage" );
//
//	parms.iKey = iKey;
//	this->ProcessEvent ( pSelectRadioMessage, &parms, NULL );
//
//}
//
//void APlayerController::PlaySoundKilled ( struct FString strSound, bool bExceptOwner )
//{
//	static UFunction* pPlaySoundKilled = 0;
//	APlayerController_execPlaySoundKilled_Parms parms;
//
//	if ( !pPlaySoundKilled )
//		pPlaySoundKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PlaySoundKilled" );
//
//	parms.strSound = strSound;
//	parms.bExceptOwner = bExceptOwner;
//	this->ProcessEvent ( pPlaySoundKilled, &parms, NULL );
//
//}
//
//void APlayerController::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* Other )
//{
//	static UFunction* pNotifyKilled = 0;
//	APlayerController_execNotifyKilled_Parms parms;
//
//	if ( !pNotifyKilled )
//		pNotifyKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.NotifyKilled" );
//
//	parms.Killer = Killer;
//	parms.Killed = Killed;
//	parms.Other = Other;
//	this->ProcessEvent ( pNotifyKilled, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTargetDied ( class AActor* Killer, class UObject* OptionalObject )
//{
//	static UFunction* pClientSetViewTargetDied = 0;
//	APlayerController_execClientSetViewTargetDied_Parms parms;
//
//	if ( !pClientSetViewTargetDied )
//		pClientSetViewTargetDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTargetDied" );
//
//	parms.Killer = Killer;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pClientSetViewTargetDied, &parms, NULL );
//
//}
//
//void APlayerController::execHCheck (  )
//{
//	static UFunction* pHCheck = 0;
//	APlayerController_execHCheck_Parms parms;
//
//	if ( !pHCheck )
//		pHCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.HCheck" );
//
//	this->ProcessEvent ( pHCheck, &parms, NULL );
//
//}
//
//void APlayerController::execAir (  )
//{
//	static UFunction* pAir = 0;
//	APlayerController_execAir_Parms parms;
//
//	if ( !pAir )
//		pAir = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Air" );
//
//	this->ProcessEvent ( pAir, &parms, NULL );
//
//}
//
//void APlayerController::execDLog ( bool bEnable )
//{
//	static UFunction* pDLog = 0;
//	APlayerController_execDLog_Parms parms;
//
//	if ( !pDLog )
//		pDLog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DLog" );
//
//	parms.bEnable = bEnable;
//	this->ProcessEvent ( pDLog, &parms, NULL );
//
//}
//
//void APlayerController::SelectQSlot ( int iIndex )
//{
//	static UFunction* pSelectQSlot = 0;
//	APlayerController_execSelectQSlot_Parms parms;
//
//	if ( !pSelectQSlot )
//		pSelectQSlot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SelectQSlot" );
//
//	parms.iIndex = iIndex;
//	this->ProcessEvent ( pSelectQSlot, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetGRITimes ( int RemainingTime, int ElapsedTime, int RemainingMinute )
//{
//	static UFunction* pClientSetGRITimes = 0;
//	APlayerController_execClientSetGRITimes_Parms parms;
//
//	if ( !pClientSetGRITimes )
//		pClientSetGRITimes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetGRITimes" );
//
//	parms.RemainingTime = RemainingTime;
//	parms.ElapsedTime = ElapsedTime;
//	parms.RemainingMinute = RemainingMinute;
//	this->ProcessEvent ( pClientSetGRITimes, &parms, NULL );
//
//}
//
//void APlayerController::ClientSelectQSlot ( int iIndex )
//{
//	static UFunction* pClientSelectQSlot = 0;
//	APlayerController_execClientSelectQSlot_Parms parms;
//
//	if ( !pClientSelectQSlot )
//		pClientSelectQSlot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSelectQSlot" );
//
//	parms.iIndex = iIndex;
//	this->ProcessEvent ( pClientSelectQSlot, &parms, NULL );
//
//}
//
//void APlayerController::ForceChangeQSlotIndex ( int iIndex )
//{
//	static UFunction* pForceChangeQSlotIndex = 0;
//	APlayerController_execForceChangeQSlotIndex_Parms parms;
//
//	if ( !pForceChangeQSlotIndex )
//		pForceChangeQSlotIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ForceChangeQSlotIndex" );
//
//	parms.iIndex = iIndex;
//	this->ProcessEvent ( pForceChangeQSlotIndex, &parms, NULL );
//
//}
//
//void APlayerController::ServerSelectQSlot ( int iIndex )
//{
//	static UFunction* pServerSelectQSlot = 0;
//	APlayerController_execServerSelectQSlot_Parms parms;
//
//	if ( !pServerSelectQSlot )
//		pServerSelectQSlot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSelectQSlot" );
//
//	parms.iIndex = iIndex;
//	this->ProcessEvent ( pServerSelectQSlot, &parms, NULL );
//
//}
//
//void APlayerController::ServerWarp (  )
//{
//	static UFunction* pServerWarp = 0;
//	APlayerController_execServerWarp_Parms parms;
//
//	if ( !pServerWarp )
//		pServerWarp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerWarp" );
//
//	this->ProcessEvent ( pServerWarp, &parms, NULL );
//
//}
//
//void APlayerController::execgggb (  )
//{
//	static UFunction* pgggb = 0;
//	APlayerController_execgggb_Parms parms;
//
//	if ( !pgggb )
//		pgggb = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.gggb" );
//
//	this->ProcessEvent ( pgggb, &parms, NULL );
//
//}
//
//void APlayerController::execggga (  )
//{
//	static UFunction* pggga = 0;
//	APlayerController_execggga_Parms parms;
//
//	if ( !pggga )
//		pggga = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ggga" );
//
//	this->ProcessEvent ( pggga, &parms, NULL );
//
//}
//
//void APlayerController::ServerCallAirStrike ( class AController* Caller )
//{
//	static UFunction* pServerCallAirStrike = 0;
//	APlayerController_execServerCallAirStrike_Parms parms;
//
//	if ( !pServerCallAirStrike )
//		pServerCallAirStrike = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerCallAirStrike" );
//
//	parms.Caller = Caller;
//	this->ProcessEvent ( pServerCallAirStrike, &parms, NULL );
//
//}
//
void APlayerController::ServerCallHelicopter ( class APawn* lastHeliPawn, class AController* Caller )
{
	static UFunction* pServerCallHelicopter = 0;
	APlayerController_execServerCallHelicopter_Parms parms;

	if ( !pServerCallHelicopter )
		pServerCallHelicopter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerCallHelicopter" );

	parms.lastHeliPawn = lastHeliPawn;
	parms.Caller = Caller;
	this->ProcessEvent ( pServerCallHelicopter, &parms, NULL );

}
//
//void APlayerController::ShowResultMenu (  )
//{
//	static UFunction* pShowResultMenu = 0;
//	APlayerController_execShowResultMenu_Parms parms;
//
//	if ( !pShowResultMenu )
//		pShowResultMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ShowResultMenu" );
//
//	this->ProcessEvent ( pShowResultMenu, &parms, NULL );
//
//}
//
//void APlayerController::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	APlayerController_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//void APlayerController::execShowVoteMenu (  )
//{
//	static UFunction* pShowVoteMenu = 0;
//	APlayerController_execShowVoteMenu_Parms parms;
//
//	if ( !pShowVoteMenu )
//		pShowVoteMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ShowVoteMenu" );
//
//	this->ProcessEvent ( pShowVoteMenu, &parms, NULL );
//
//}
//
//void APlayerController::eventLostChild ( class AActor* Other )
//{
//	static UFunction* pLostChild = 0;
//	APlayerController_eventLostChild_Parms parms;
//
//	if ( !pLostChild )
//		pLostChild = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.LostChild" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pLostChild, &parms, NULL );
//
//}
//
//void APlayerController::eventGainedChild ( class AActor* Other )
//{
//	static UFunction* pGainedChild = 0;
//	APlayerController_eventGainedChild_Parms parms;
//
//	if ( !pGainedChild )
//		pGainedChild = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GainedChild" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pGainedChild, &parms, NULL );
//
//}
//
//void APlayerController::ServerChatRestriction ( int PlayerID, unsigned char Type )
//{
//	static UFunction* pServerChatRestriction = 0;
//	APlayerController_execServerChatRestriction_Parms parms;
//
//	if ( !pServerChatRestriction )
//		pServerChatRestriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerChatRestriction" );
//
//	parms.PlayerID = PlayerID;
//	parms.Type = Type;
//	this->ProcessEvent ( pServerChatRestriction, &parms, NULL );
//
//}
//
//void APlayerController::ServerRequestBanInfo ( int PlayerID )
//{
//	static UFunction* pServerRequestBanInfo = 0;
//	APlayerController_execServerRequestBanInfo_Parms parms;
//
//	if ( !pServerRequestBanInfo )
//		pServerRequestBanInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerRequestBanInfo" );
//
//	parms.PlayerID = PlayerID;
//	this->ProcessEvent ( pServerRequestBanInfo, &parms, NULL );
//
//}
//
//void APlayerController::ServerChatDebug (  )
//{
//	static UFunction* pServerChatDebug = 0;
//	APlayerController_execServerChatDebug_Parms parms;
//
//	if ( !pServerChatDebug )
//		pServerChatDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerChatDebug" );
//
//	this->ProcessEvent ( pServerChatDebug, &parms, NULL );
//
//}
//
//void APlayerController::execChatDebug (  )
//{
//	static UFunction* pChatDebug = 0;
//	APlayerController_execChatDebug_Parms parms;
//
//	if ( !pChatDebug )
//		pChatDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ChatDebug" );
//
//	this->ProcessEvent ( pChatDebug, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetActiveRoom ( int ChannelIndex )
//{
//	static UFunction* pClientSetActiveRoom = 0;
//	APlayerController_execClientSetActiveRoom_Parms parms;
//
//	if ( !pClientSetActiveRoom )
//		pClientSetActiveRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetActiveRoom" );
//
//	parms.ChannelIndex = ChannelIndex;
//	this->ProcessEvent ( pClientSetActiveRoom, &parms, NULL );
//
//}
//
//void APlayerController::ServerChangeVoiceChatMode ( bool bEnable )
//{
//	static UFunction* pServerChangeVoiceChatMode = 0;
//	APlayerController_execServerChangeVoiceChatMode_Parms parms;
//
//	if ( !pServerChangeVoiceChatMode )
//		pServerChangeVoiceChatMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerChangeVoiceChatMode" );
//
//	parms.bEnable = bEnable;
//	this->ProcessEvent ( pServerChangeVoiceChatMode, &parms, NULL );
//
//}
//
//void APlayerController::ServerSetChatPassword ( struct FString NewPassword )
//{
//	static UFunction* pServerSetChatPassword = 0;
//	APlayerController_execServerSetChatPassword_Parms parms;
//
//	if ( !pServerSetChatPassword )
//		pServerSetChatPassword = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSetChatPassword" );
//
//	parms.NewPassword = NewPassword;
//	this->ProcessEvent ( pServerSetChatPassword, &parms, NULL );
//
//}
//
//void APlayerController::ServerSpeak ( int ChannelIndex, struct FString ChannelPassword )
//{
//	static UFunction* pServerSpeak = 0;
//	APlayerController_execServerSpeak_Parms parms;
//
//	if ( !pServerSpeak )
//		pServerSpeak = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSpeak" );
//
//	parms.ChannelIndex = ChannelIndex;
//	parms.ChannelPassword = ChannelPassword;
//	this->ProcessEvent ( pServerSpeak, &parms, NULL );
//
//}
//
//void APlayerController::ServerLeaveVoiceChannel ( int ChannelIndex )
//{
//	static UFunction* pServerLeaveVoiceChannel = 0;
//	APlayerController_execServerLeaveVoiceChannel_Parms parms;
//
//	if ( !pServerLeaveVoiceChannel )
//		pServerLeaveVoiceChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerLeaveVoiceChannel" );
//
//	parms.ChannelIndex = ChannelIndex;
//	this->ProcessEvent ( pServerLeaveVoiceChannel, &parms, NULL );
//
//}
//
//unsigned char APlayerController::ServerJoinVoiceChannel ( int ChannelIndex, struct FString ChannelPassword )
//{
//	static UFunction* pServerJoinVoiceChannel = 0;
//	APlayerController_execServerJoinVoiceChannel_Parms parms;
//
//	if ( !pServerJoinVoiceChannel )
//		pServerJoinVoiceChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerJoinVoiceChannel" );
//
//	parms.ChannelIndex = ChannelIndex;
//	parms.ChannelPassword = ChannelPassword;
//	this->ProcessEvent ( pServerJoinVoiceChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APlayerController::FindChannelPassword ( struct FString ChannelName )
//{
//	static UFunction* pFindChannelPassword = 0;
//	APlayerController_execFindChannelPassword_Parms parms;
//
//	if ( !pFindChannelPassword )
//		pFindChannelPassword = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.FindChannelPassword" );
//
//	parms.ChannelName = ChannelName;
//	this->ProcessEvent ( pFindChannelPassword, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::SetChannelPassword ( struct FString ChannelName, struct FString ChannelPassword )
//{
//	static UFunction* pSetChannelPassword = 0;
//	APlayerController_execSetChannelPassword_Parms parms;
//
//	if ( !pSetChannelPassword )
//		pSetChannelPassword = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetChannelPassword" );
//
//	parms.ChannelName = ChannelName;
//	parms.ChannelPassword = ChannelPassword;
//	this->ProcessEvent ( pSetChannelPassword, &parms, NULL );
//
//}
//
//bool APlayerController::ChatBan ( int PlayerID, unsigned char Type )
//{
//	static UFunction* pChatBan = 0;
//	APlayerController_execChatBan_Parms parms;
//
//	if ( !pChatBan )
//		pChatBan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ChatBan" );
//
//	parms.PlayerID = PlayerID;
//	parms.Type = Type;
//	this->ProcessEvent ( pChatBan, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::ChangeVoiceChatMode ( bool bEnable )
//{
//	static UFunction* pChangeVoiceChatMode = 0;
//	APlayerController_execChangeVoiceChatMode_Parms parms;
//
//	if ( !pChangeVoiceChatMode )
//		pChangeVoiceChatMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ChangeVoiceChatMode" );
//
//	parms.bEnable = bEnable;
//	this->ProcessEvent ( pChangeVoiceChatMode, &parms, NULL );
//
//}
//
//void APlayerController::AutoJoinVoiceChat (  )
//{
//	static UFunction* pAutoJoinVoiceChat = 0;
//	APlayerController_execAutoJoinVoiceChat_Parms parms;
//
//	if ( !pAutoJoinVoiceChat )
//		pAutoJoinVoiceChat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AutoJoinVoiceChat" );
//
//	this->ProcessEvent ( pAutoJoinVoiceChat, &parms, NULL );
//
//}
//
//struct FString APlayerController::GetDefaultActiveChannel (  )
//{
//	static UFunction* pGetDefaultActiveChannel = 0;
//	APlayerController_execGetDefaultActiveChannel_Parms parms;
//
//	if ( !pGetDefaultActiveChannel )
//		pGetDefaultActiveChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetDefaultActiveChannel" );
//
//	this->ProcessEvent ( pGetDefaultActiveChannel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::InitPrivateChatRoom (  )
//{
//	static UFunction* pInitPrivateChatRoom = 0;
//	APlayerController_execInitPrivateChatRoom_Parms parms;
//
//	if ( !pInitPrivateChatRoom )
//		pInitPrivateChatRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.InitPrivateChatRoom" );
//
//	this->ProcessEvent ( pInitPrivateChatRoom, &parms, NULL );
//
//}
//
//void APlayerController::InitializeVoiceChat (  )
//{
//	static UFunction* pInitializeVoiceChat = 0;
//	APlayerController_execInitializeVoiceChat_Parms parms;
//
//	if ( !pInitializeVoiceChat )
//		pInitializeVoiceChat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.InitializeVoiceChat" );
//
//	this->ProcessEvent ( pInitializeVoiceChat, &parms, NULL );
//
//}
//
//void APlayerController::execDisableVoiceChat (  )
//{
//	static UFunction* pDisableVoiceChat = 0;
//	APlayerController_execDisableVoiceChat_Parms parms;
//
//	if ( !pDisableVoiceChat )
//		pDisableVoiceChat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DisableVoiceChat" );
//
//	this->ProcessEvent ( pDisableVoiceChat, &parms, NULL );
//
//}
//
//void APlayerController::execEnableVoiceChat (  )
//{
//	static UFunction* pEnableVoiceChat = 0;
//	APlayerController_execEnableVoiceChat_Parms parms;
//
//	if ( !pEnableVoiceChat )
//		pEnableVoiceChat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.EnableVoiceChat" );
//
//	this->ProcessEvent ( pEnableVoiceChat, &parms, NULL );
//
//}
//
//void APlayerController::execSetChatPassword ( struct FString NewPassword )
//{
//	static UFunction* pSetChatPassword = 0;
//	APlayerController_execSetChatPassword_Parms parms;
//
//	if ( !pSetChatPassword )
//		pSetChatPassword = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetChatPassword" );
//
//	parms.NewPassword = NewPassword;
//	this->ProcessEvent ( pSetChatPassword, &parms, NULL );
//
//}
//
//void APlayerController::execSpeakLast (  )
//{
//	static UFunction* pSpeakLast = 0;
//	APlayerController_execSpeakLast_Parms parms;
//
//	if ( !pSpeakLast )
//		pSpeakLast = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SpeakLast" );
//
//	this->ProcessEvent ( pSpeakLast, &parms, NULL );
//
//}
//
//void APlayerController::execSpeakDefault (  )
//{
//	static UFunction* pSpeakDefault = 0;
//	APlayerController_execSpeakDefault_Parms parms;
//
//	if ( !pSpeakDefault )
//		pSpeakDefault = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SpeakDefault" );
//
//	this->ProcessEvent ( pSpeakDefault, &parms, NULL );
//
//}
//
//void APlayerController::execSpeak ( struct FString ChannelTitle )
//{
//	static UFunction* pSpeak = 0;
//	APlayerController_execSpeak_Parms parms;
//
//	if ( !pSpeak )
//		pSpeak = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Speak" );
//
//	parms.ChannelTitle = ChannelTitle;
//	this->ProcessEvent ( pSpeak, &parms, NULL );
//
//}
//
//void APlayerController::execLeave ( struct FString ChannelTitle )
//{
//	static UFunction* pLeave = 0;
//	APlayerController_execLeave_Parms parms;
//
//	if ( !pLeave )
//		pLeave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Leave" );
//
//	parms.ChannelTitle = ChannelTitle;
//	this->ProcessEvent ( pLeave, &parms, NULL );
//
//}
//
//void APlayerController::execJoin ( struct FString ChanName, struct FString ChanPwd )
//{
//	static UFunction* pJoin = 0;
//	APlayerController_execJoin_Parms parms;
//
//	if ( !pJoin )
//		pJoin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Join" );
//
//	parms.ChanName = ChanName;
//	parms.ChanPwd = ChanPwd;
//	this->ProcessEvent ( pJoin, &parms, NULL );
//
//}
//
//void APlayerController::ServerVoiceCommand ( struct FString RecognizedString )
//{
//	static UFunction* pServerVoiceCommand = 0;
//	APlayerController_execServerVoiceCommand_Parms parms;
//
//	if ( !pServerVoiceCommand )
//		pServerVoiceCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerVoiceCommand" );
//
//	parms.RecognizedString = RecognizedString;
//	this->ProcessEvent ( pServerVoiceCommand, &parms, NULL );
//
//}
//
//void APlayerController::execCommand ( struct FString RecognizedString )
//{
//	static UFunction* pCommand = 0;
//	APlayerController_execCommand_Parms parms;
//
//	if ( !pCommand )
//		pCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Command" );
//
//	parms.RecognizedString = RecognizedString;
//	this->ProcessEvent ( pCommand, &parms, NULL );
//
//}
//
//void APlayerController::eventVoiceCommand ( struct FString RecognizedString, struct FString RawString )
//{
//	static UFunction* pVoiceCommand = 0;
//	APlayerController_eventVoiceCommand_Parms parms;
//
//	if ( !pVoiceCommand )
//		pVoiceCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.VoiceCommand" );
//
//	parms.RecognizedString = RecognizedString;
//	parms.RawString = RawString;
//	this->ProcessEvent ( pVoiceCommand, &parms, NULL );
//
//}
//
//bool APlayerController::NeedNetNotify (  )
//{
//	static UFunction* pNeedNetNotify = 0;
//	APlayerController_execNeedNetNotify_Parms parms;
//
//	if ( !pNeedNetNotify )
//		pNeedNetNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.NeedNetNotify" );
//
//	this->ProcessEvent ( pNeedNetNotify, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::SetCustomRewardAnnouncerClass ( struct FString NewAnnouncerClass )
//{
//	static UFunction* pSetCustomRewardAnnouncerClass = 0;
//	APlayerController_execSetCustomRewardAnnouncerClass_Parms parms;
//
//	if ( !pSetCustomRewardAnnouncerClass )
//		pSetCustomRewardAnnouncerClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetCustomRewardAnnouncerClass" );
//
//	parms.NewAnnouncerClass = NewAnnouncerClass;
//	this->ProcessEvent ( pSetCustomRewardAnnouncerClass, &parms, NULL );
//
//}
//
//void APlayerController::SetCustomStatusAnnouncerClass ( struct FString NewAnnouncerClass )
//{
//	static UFunction* pSetCustomStatusAnnouncerClass = 0;
//	APlayerController_execSetCustomStatusAnnouncerClass_Parms parms;
//
//	if ( !pSetCustomStatusAnnouncerClass )
//		pSetCustomStatusAnnouncerClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetCustomStatusAnnouncerClass" );
//
//	parms.NewAnnouncerClass = NewAnnouncerClass;
//	this->ProcessEvent ( pSetCustomStatusAnnouncerClass, &parms, NULL );
//
//}
//
//struct FString APlayerController::GetCustomRewardAnnouncerClass (  )
//{
//	static UFunction* pGetCustomRewardAnnouncerClass = 0;
//	APlayerController_execGetCustomRewardAnnouncerClass_Parms parms;
//
//	if ( !pGetCustomRewardAnnouncerClass )
//		pGetCustomRewardAnnouncerClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetCustomRewardAnnouncerClass" );
//
//	this->ProcessEvent ( pGetCustomRewardAnnouncerClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APlayerController::GetCustomStatusAnnouncerClass (  )
//{
//	static UFunction* pGetCustomStatusAnnouncerClass = 0;
//	APlayerController_execGetCustomStatusAnnouncerClass_Parms parms;
//
//	if ( !pGetCustomStatusAnnouncerClass )
//		pGetCustomStatusAnnouncerClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetCustomStatusAnnouncerClass" );
//
//	this->ProcessEvent ( pGetCustomStatusAnnouncerClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::DemoClientSetHUD ( class UClass* newHUDClass, class UClass* newScoringClass )
//{
//	static UFunction* pDemoClientSetHUD = 0;
//	APlayerController_execDemoClientSetHUD_Parms parms;
//
//	if ( !pDemoClientSetHUD )
//		pDemoClientSetHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DemoClientSetHUD" );
//
//	parms.newHUDClass = newHUDClass;
//	parms.newScoringClass = newScoringClass;
//	this->ProcessEvent ( pDemoClientSetHUD, &parms, NULL );
//
//}
//
//void APlayerController::ServerSetClientDemo (  )
//{
//	static UFunction* pServerSetClientDemo = 0;
//	APlayerController_execServerSetClientDemo_Parms parms;
//
//	if ( !pServerSetClientDemo )
//		pServerSetClientDemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSetClientDemo" );
//
//	this->ProcessEvent ( pServerSetClientDemo, &parms, NULL );
//
//}
//
//void APlayerController::eventStartClientDemoRec (  )
//{
//	static UFunction* pStartClientDemoRec = 0;
//	APlayerController_eventStartClientDemoRec_Parms parms;
//
//	if ( !pStartClientDemoRec )
//		pStartClientDemoRec = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.StartClientDemoRec" );
//
//	this->ProcessEvent ( pStartClientDemoRec, &parms, NULL );
//
//}
//
//void APlayerController::execAdminGUI (  )
//{
//	static UFunction* pAdminGUI = 0;
//	APlayerController_execAdminGUI_Parms parms;
//
//	if ( !pAdminGUI )
//		pAdminGUI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AdminGUI" );
//
//	this->ProcessEvent ( pAdminGUI, &parms, NULL );
//
//}
//
//void APlayerController::execAdminLogout (  )
//{
//	static UFunction* pAdminLogout = 0;
//	APlayerController_execAdminLogout_Parms parms;
//
//	if ( !pAdminLogout )
//		pAdminLogout = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AdminLogout" );
//
//	this->ProcessEvent ( pAdminLogout, &parms, NULL );
//
//}
//
//void APlayerController::AdminReply ( struct FString Reply )
//{
//	static UFunction* pAdminReply = 0;
//	APlayerController_execAdminReply_Parms parms;
//
//	if ( !pAdminReply )
//		pAdminReply = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AdminReply" );
//
//	parms.Reply = Reply;
//	this->ProcessEvent ( pAdminReply, &parms, NULL );
//
//}
//
//void APlayerController::ReportAdmin ( struct FString ReportText )
//{
//	static UFunction* pReportAdmin = 0;
//	APlayerController_execReportAdmin_Parms parms;
//
//	if ( !pReportAdmin )
//		pReportAdmin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ReportAdmin" );
//
//	parms.ReportText = ReportText;
//	this->ProcessEvent ( pReportAdmin, &parms, NULL );
//
//}
//
//void APlayerController::AdminCommand ( struct FString CommandLine )
//{
//	static UFunction* pAdminCommand = 0;
//	APlayerController_execAdminCommand_Parms parms;
//
//	if ( !pAdminCommand )
//		pAdminCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AdminCommand" );
//
//	parms.CommandLine = CommandLine;
//	this->ProcessEvent ( pAdminCommand, &parms, NULL );
//
//}
//
//void APlayerController::ServerAdminLogin ( struct FString CmdLine )
//{
//	static UFunction* pServerAdminLogin = 0;
//	APlayerController_execServerAdminLogin_Parms parms;
//
//	if ( !pServerAdminLogin )
//		pServerAdminLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerAdminLogin" );
//
//	parms.CmdLine = CmdLine;
//	this->ProcessEvent ( pServerAdminLogin, &parms, NULL );
//
//}
//
//void APlayerController::execAdminLogin ( struct FString CmdLine )
//{
//	static UFunction* pAdminLogin = 0;
//	APlayerController_execAdminLogin_Parms parms;
//
//	if ( !pAdminLogin )
//		pAdminLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AdminLogin" );
//
//	parms.CmdLine = CmdLine;
//	this->ProcessEvent ( pAdminLogin, &parms, NULL );
//
//}
//
//void APlayerController::execAdminDebug ( struct FString CommandLine )
//{
//	static UFunction* pAdminDebug = 0;
//	APlayerController_execAdminDebug_Parms parms;
//
//	if ( !pAdminDebug )
//		pAdminDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AdminDebug" );
//
//	parms.CommandLine = CommandLine;
//	this->ProcessEvent ( pAdminDebug, &parms, NULL );
//
//}
//
//void APlayerController::execAdmin ( struct FString CommandLine )
//{
//	static UFunction* pAdmin = 0;
//	APlayerController_execAdmin_Parms parms;
//
//	if ( !pAdmin )
//		pAdmin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Admin" );
//
//	parms.CommandLine = CommandLine;
//	this->ProcessEvent ( pAdmin, &parms, NULL );
//
//}
//
//bool APlayerController::CanRestartPlayer (  )
//{
//	static UFunction* pCanRestartPlayer = 0;
//	APlayerController_execCanRestartPlayer_Parms parms;
//
//	if ( !pCanRestartPlayer )
//		pCanRestartPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CanRestartPlayer" );
//
//	this->ProcessEvent ( pCanRestartPlayer, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::execInvertLook (  )
//{
//	static UFunction* pInvertLook = 0;
//	APlayerController_execInvertLook_Parms parms;
//
//	if ( !pInvertLook )
//		pInvertLook = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.InvertLook" );
//
//	this->ProcessEvent ( pInvertLook, &parms, NULL );
//
//}
//
//void APlayerController::UseAdvCamShake ( bool bUse )
//{
//	static UFunction* pUseAdvCamShake = 0;
//	APlayerController_execUseAdvCamShake_Parms parms;
//
//	if ( !pUseAdvCamShake )
//		pUseAdvCamShake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.UseAdvCamShake" );
//
//	parms.bUse = bUse;
//	this->ProcessEvent ( pUseAdvCamShake, &parms, NULL );
//
//}
//
//void APlayerController::UseStanceToggle ( bool bUse )
//{
//	static UFunction* pUseStanceToggle = 0;
//	APlayerController_execUseStanceToggle_Parms parms;
//
//	if ( !pUseStanceToggle )
//		pUseStanceToggle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.UseStanceToggle" );
//
//	parms.bUse = bUse;
//	this->ProcessEvent ( pUseStanceToggle, &parms, NULL );
//
//}
//
//void APlayerController::UseMouseRevision ( bool bUse )
//{
//	static UFunction* pUseMouseRevision = 0;
//	APlayerController_execUseMouseRevision_Parms parms;
//
//	if ( !pUseMouseRevision )
//		pUseMouseRevision = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.UseMouseRevision" );
//
//	parms.bUse = bUse;
//	this->ProcessEvent ( pUseMouseRevision, &parms, NULL );
//
//}
//
//void APlayerController::execInvertMouse ( struct FString Invert )
//{
//	static UFunction* pInvertMouse = 0;
//	APlayerController_execInvertMouse_Parms parms;
//
//	if ( !pInvertMouse )
//		pInvertMouse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.InvertMouse" );
//
//	parms.Invert = Invert;
//	this->ProcessEvent ( pInvertMouse, &parms, NULL );
//
//}
//
//bool APlayerController::IsMouseInverted (  )
//{
//	static UFunction* pIsMouseInverted = 0;
//	APlayerController_execIsMouseInverted_Parms parms;
//
//	if ( !pIsMouseInverted )
//		pIsMouseInverted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsMouseInverted" );
//
//	this->ProcessEvent ( pIsMouseInverted, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::eventClientNetworkMessage ( struct FString ParamA, struct FString ParamB )
//{
//	static UFunction* pClientNetworkMessage = 0;
//	APlayerController_eventClientNetworkMessage_Parms parms;
//
//	if ( !pClientNetworkMessage )
//		pClientNetworkMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientNetworkMessage" );
//
//	parms.ParamA = ParamA;
//	parms.ParamB = ParamB;
//	this->ProcessEvent ( pClientNetworkMessage, &parms, NULL );
//
//}
//
//void APlayerController::eventClientCloseMenu ( bool bCloseAll, bool bCancel )
//{
//	static UFunction* pClientCloseMenu = 0;
//	APlayerController_eventClientCloseMenu_Parms parms;
//
//	if ( !pClientCloseMenu )
//		pClientCloseMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientCloseMenu" );
//
//	parms.bCloseAll = bCloseAll;
//	parms.bCancel = bCancel;
//	this->ProcessEvent ( pClientCloseMenu, &parms, NULL );
//
//}
//
//void APlayerController::eventClientReplaceMenu ( struct FString Menu, bool bDisconnect, struct FString Msg1, struct FString Msg2 )
//{
//	static UFunction* pClientReplaceMenu = 0;
//	APlayerController_eventClientReplaceMenu_Parms parms;
//
//	if ( !pClientReplaceMenu )
//		pClientReplaceMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientReplaceMenu" );
//
//	parms.Menu = Menu;
//	parms.bDisconnect = bDisconnect;
//	parms.Msg1 = Msg1;
//	parms.Msg2 = Msg2;
//	this->ProcessEvent ( pClientReplaceMenu, &parms, NULL );
//
//}
//
//void APlayerController::eventClientOpenMenu ( struct FString Menu, bool bDisconnect, struct FString Msg1, struct FString Msg2 )
//{
//	static UFunction* pClientOpenMenu = 0;
//	APlayerController_eventClientOpenMenu_Parms parms;
//
//	if ( !pClientOpenMenu )
//		pClientOpenMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientOpenMenu" );
//
//	parms.Menu = Menu;
//	parms.bDisconnect = bDisconnect;
//	parms.Msg1 = Msg1;
//	parms.Msg2 = Msg2;
//	this->ProcessEvent ( pClientOpenMenu, &parms, NULL );
//
//}
//
//void APlayerController::eventUnPressButtons (  )
//{
//	static UFunction* pUnPressButtons = 0;
//	APlayerController_eventUnPressButtons_Parms parms;
//
//	if ( !pUnPressButtons )
//		pUnPressButtons = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.UnPressButtons" );
//
//	this->ProcessEvent ( pUnPressButtons, &parms, NULL );
//
//}
//
//void APlayerController::ChangeAlwaysMouseLook ( bool B )
//{
//	static UFunction* pChangeAlwaysMouseLook = 0;
//	APlayerController_execChangeAlwaysMouseLook_Parms parms;
//
//	if ( !pChangeAlwaysMouseLook )
//		pChangeAlwaysMouseLook = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ChangeAlwaysMouseLook" );
//
//	parms.B = B;
//	this->ProcessEvent ( pChangeAlwaysMouseLook, &parms, NULL );
//
//}
//
//void APlayerController::ChangeStairLook ( bool B )
//{
//	static UFunction* pChangeStairLook = 0;
//	APlayerController_execChangeStairLook_Parms parms;
//
//	if ( !pChangeStairLook )
//		pChangeStairLook = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ChangeStairLook" );
//
//	parms.B = B;
//	this->ProcessEvent ( pChangeStairLook, &parms, NULL );
//
//}
//
void APlayerController::StopPawnsAndControllers (  )
{
	static UFunction* pStopPawnsAndControllers = 0;
	APlayerController_execStopPawnsAndControllers_Parms parms;

	if ( !pStopPawnsAndControllers )
		pStopPawnsAndControllers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.StopPawnsAndControllers" );

	this->ProcessEvent ( pStopPawnsAndControllers, &parms, NULL );

}
//
//void APlayerController::ClientFadeToColor (  )
//{
//	static UFunction* pClientFadeToColor = 0;
//	APlayerController_execClientFadeToColor_Parms parms;
//
//	if ( !pClientFadeToColor )
//		pClientFadeToColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientFadeToColor" );
//
//	this->ProcessEvent ( pClientFadeToColor, &parms, NULL );
//
//}
//
//void APlayerController::ClientFadeToBlackWhite2 (  )
//{
//	static UFunction* pClientFadeToBlackWhite2 = 0;
//	APlayerController_execClientFadeToBlackWhite2_Parms parms;
//
//	if ( !pClientFadeToBlackWhite2 )
//		pClientFadeToBlackWhite2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientFadeToBlackWhite2" );
//
//	this->ProcessEvent ( pClientFadeToBlackWhite2, &parms, NULL );
//
//}
//
//void APlayerController::ClientFadeToBlackWhite (  )
//{
//	static UFunction* pClientFadeToBlackWhite = 0;
//	APlayerController_execClientFadeToBlackWhite_Parms parms;
//
//	if ( !pClientFadeToBlackWhite )
//		pClientFadeToBlackWhite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientFadeToBlackWhite" );
//
//	this->ProcessEvent ( pClientFadeToBlackWhite, &parms, NULL );
//
//}
//
//void APlayerController::ClientOnEndIntervented (  )
//{
//	static UFunction* pClientOnEndIntervented = 0;
//	APlayerController_execClientOnEndIntervented_Parms parms;
//
//	if ( !pClientOnEndIntervented )
//		pClientOnEndIntervented = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientOnEndIntervented" );
//
//	this->ProcessEvent ( pClientOnEndIntervented, &parms, NULL );
//
//}
//
//void APlayerController::ClientOnBeginIntervented (  )
//{
//	static UFunction* pClientOnBeginIntervented = 0;
//	APlayerController_execClientOnBeginIntervented_Parms parms;
//
//	if ( !pClientOnBeginIntervented )
//		pClientOnBeginIntervented = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientOnBeginIntervented" );
//
//	this->ProcessEvent ( pClientOnBeginIntervented, &parms, NULL );
//
//}
//
//void APlayerController::ClientOnBeginRound (  )
//{
//	static UFunction* pClientOnBeginRound = 0;
//	APlayerController_execClientOnBeginRound_Parms parms;
//
//	if ( !pClientOnBeginRound )
//		pClientOnBeginRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientOnBeginRound" );
//
//	this->ProcessEvent ( pClientOnBeginRound, &parms, NULL );
//
//}
//
//void APlayerController::ClientOnEndWaitingForStart (  )
//{
//	static UFunction* pClientOnEndWaitingForStart = 0;
//	APlayerController_execClientOnEndWaitingForStart_Parms parms;
//
//	if ( !pClientOnEndWaitingForStart )
//		pClientOnEndWaitingForStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientOnEndWaitingForStart" );
//
//	this->ProcessEvent ( pClientOnEndWaitingForStart, &parms, NULL );
//
//}
//
//void APlayerController::ClientOnBeginWaitingForStart (  )
//{
//	static UFunction* pClientOnBeginWaitingForStart = 0;
//	APlayerController_execClientOnBeginWaitingForStart_Parms parms;
//
//	if ( !pClientOnBeginWaitingForStart )
//		pClientOnBeginWaitingForStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientOnBeginWaitingForStart" );
//
//	this->ProcessEvent ( pClientOnBeginWaitingForStart, &parms, NULL );
//
//}
//
//void APlayerController::eventGotoDefaultState (  )
//{
//	static UFunction* pGotoDefaultState = 0;
//	APlayerController_eventGotoDefaultState_Parms parms;
//
//	if ( !pGotoDefaultState )
//		pGotoDefaultState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GotoDefaultState" );
//
//	this->ProcessEvent ( pGotoDefaultState, &parms, NULL );
//
//}
//
//void APlayerController::TryServerViewNextPlayer ( bool cannotPickSelf, bool IsBack, int ViewStyle )
//{
//	static UFunction* pTryServerViewNextPlayer = 0;
//	APlayerController_execTryServerViewNextPlayer_Parms parms;
//
//	if ( !pTryServerViewNextPlayer )
//		pTryServerViewNextPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.TryServerViewNextPlayer" );
//
//	parms.cannotPickSelf = cannotPickSelf;
//	parms.IsBack = IsBack;
//	parms.ViewStyle = ViewStyle;
//	this->ProcessEvent ( pTryServerViewNextPlayer, &parms, NULL );
//
//}
//
//bool APlayerController::IsSpecialMode_Grenade ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_Grenade = 0;
//	APlayerController_execIsSpecialMode_Grenade_Parms parms;
//
//	if ( !pIsSpecialMode_Grenade )
//		pIsSpecialMode_Grenade = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsSpecialMode_Grenade" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_Grenade, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerController::IsSpecialMode_Pistol ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_Pistol = 0;
//	APlayerController_execIsSpecialMode_Pistol_Parms parms;
//
//	if ( !pIsSpecialMode_Pistol )
//		pIsSpecialMode_Pistol = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsSpecialMode_Pistol" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_Pistol, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerController::IsSpecialMode_MG ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_MG = 0;
//	APlayerController_execIsSpecialMode_MG_Parms parms;
//
//	if ( !pIsSpecialMode_MG )
//		pIsSpecialMode_MG = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsSpecialMode_MG" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_MG, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerController::IsSpecialMode_SG ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_SG = 0;
//	APlayerController_execIsSpecialMode_SG_Parms parms;
//
//	if ( !pIsSpecialMode_SG )
//		pIsSpecialMode_SG = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsSpecialMode_SG" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_SG, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerController::IsSpecialMode_FlameThrower ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_FlameThrower = 0;
//	APlayerController_execIsSpecialMode_FlameThrower_Parms parms;
//
//	if ( !pIsSpecialMode_FlameThrower )
//		pIsSpecialMode_FlameThrower = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsSpecialMode_FlameThrower" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_FlameThrower, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerController::IsSpecialMode_TEST ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_TEST = 0;
//	APlayerController_execIsSpecialMode_TEST_Parms parms;
//
//	if ( !pIsSpecialMode_TEST )
//		pIsSpecialMode_TEST = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsSpecialMode_TEST" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_TEST, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerController::IsSpecialMode_Hold_Weapon ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_Hold_Weapon = 0;
//	APlayerController_execIsSpecialMode_Hold_Weapon_Parms parms;
//
//	if ( !pIsSpecialMode_Hold_Weapon )
//		pIsSpecialMode_Hold_Weapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsSpecialMode_Hold_Weapon" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_Hold_Weapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerController::IsSpecialMode_Knife ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_Knife = 0;
//	APlayerController_execIsSpecialMode_Knife_Parms parms;
//
//	if ( !pIsSpecialMode_Knife )
//		pIsSpecialMode_Knife = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsSpecialMode_Knife" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_Knife, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerController::IsSpecialMode_SR ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_SR = 0;
//	APlayerController_execIsSpecialMode_SR_Parms parms;
//
//	if ( !pIsSpecialMode_SR )
//		pIsSpecialMode_SR = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsSpecialMode_SR" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_SR, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerController::IsSpecialMode_RPG ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType )
//{
//	static UFunction* pIsSpecialMode_RPG = 0;
//	APlayerController_execIsSpecialMode_RPG_Parms parms;
//
//	if ( !pIsSpecialMode_RPG )
//		pIsSpecialMode_RPG = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsSpecialMode_RPG" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	this->ProcessEvent ( pIsSpecialMode_RPG, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerController::IsPermitSpecialMode ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType, int KeyF )
//{
//	static UFunction* pIsPermitSpecialMode = 0;
//	APlayerController_execIsPermitSpecialMode_Parms parms;
//
//	if ( !pIsPermitSpecialMode )
//		pIsPermitSpecialMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsPermitSpecialMode" );
//
//	parms.bLimitInvenGroup = bLimitInvenGroup;
//	parms.InvenGroup = InvenGroup;
//	parms.QWeaponType = QWeaponType;
//	parms.KeyF = KeyF;
//	this->ProcessEvent ( pIsPermitSpecialMode, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::ProcessSelectQuickSlot ( int iIndex )
//{
//	static UFunction* pProcessSelectQuickSlot = 0;
//	APlayerController_execProcessSelectQuickSlot_Parms parms;
//
//	if ( !pProcessSelectQuickSlot )
//		pProcessSelectQuickSlot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ProcessSelectQuickSlot" );
//
//	parms.iIndex = iIndex;
//	this->ProcessEvent ( pProcessSelectQuickSlot, &parms, NULL );
//
//}
//
//void APlayerController::SelectQuickSlot ( int iIndex )
//{
//	static UFunction* pSelectQuickSlot = 0;
//	APlayerController_execSelectQuickSlot_Parms parms;
//
//	if ( !pSelectQuickSlot )
//		pSelectQuickSlot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SelectQuickSlot" );
//
//	parms.iIndex = iIndex;
//	this->ProcessEvent ( pSelectQuickSlot, &parms, NULL );
//
//}
//
//void APlayerController::ClientBecameActivePlayer (  )
//{
//	static UFunction* pClientBecameActivePlayer = 0;
//	APlayerController_execClientBecameActivePlayer_Parms parms;
//
//	if ( !pClientBecameActivePlayer )
//		pClientBecameActivePlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientBecameActivePlayer" );
//
//	this->ProcessEvent ( pClientBecameActivePlayer, &parms, NULL );
//
//}
//
//void APlayerController::BecomeActivePlayer (  )
//{
//	static UFunction* pBecomeActivePlayer = 0;
//	APlayerController_execBecomeActivePlayer_Parms parms;
//
//	if ( !pBecomeActivePlayer )
//		pBecomeActivePlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.BecomeActivePlayer" );
//
//	this->ProcessEvent ( pBecomeActivePlayer, &parms, NULL );
//
//}
//
//void APlayerController::ClientBecameSpectator (  )
//{
//	static UFunction* pClientBecameSpectator = 0;
//	APlayerController_execClientBecameSpectator_Parms parms;
//
//	if ( !pClientBecameSpectator )
//		pClientBecameSpectator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientBecameSpectator" );
//
//	this->ProcessEvent ( pClientBecameSpectator, &parms, NULL );
//
//}
//
//void APlayerController::BecomeSpectator (  )
//{
//	static UFunction* pBecomeSpectator = 0;
//	APlayerController_execBecomeSpectator_Parms parms;
//
//	if ( !pBecomeSpectator )
//		pBecomeSpectator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.BecomeSpectator" );
//
//	this->ProcessEvent ( pBecomeSpectator, &parms, NULL );
//
//}
//
//void APlayerController::ServerSpectate ( bool cannotPickSelf )
//{
//	static UFunction* pServerSpectate = 0;
//	APlayerController_execServerSpectate_Parms parms;
//
//	if ( !pServerSpectate )
//		pServerSpectate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSpectate" );
//
//	parms.cannotPickSelf = cannotPickSelf;
//	this->ProcessEvent ( pServerSpectate, &parms, NULL );
//
//}
//
//void APlayerController::LoadPlayers (  )
//{
//	static UFunction* pLoadPlayers = 0;
//	APlayerController_execLoadPlayers_Parms parms;
//
//	if ( !pLoadPlayers )
//		pLoadPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.LoadPlayers" );
//
//	this->ProcessEvent ( pLoadPlayers, &parms, NULL );
//
//}
//
//void APlayerController::ServerViewSelf (  )
//{
//	static UFunction* pServerViewSelf = 0;
//	APlayerController_execServerViewSelf_Parms parms;
//
//	if ( !pServerViewSelf )
//		pServerViewSelf = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerViewSelf" );
//
//	this->ProcessEvent ( pServerViewSelf, &parms, NULL );
//
//}
//
//void APlayerController::FindLostSpectators (  )
//{
//	static UFunction* pFindLostSpectators = 0;
//	APlayerController_execFindLostSpectators_Parms parms;
//
//	if ( !pFindLostSpectators )
//		pFindLostSpectators = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.FindLostSpectators" );
//
//	this->ProcessEvent ( pFindLostSpectators, &parms, NULL );
//
//}
//
//void APlayerController::ServerViewNextPlayer ( bool cannotPickSelf, bool IsPrevious, int ViewStyle )
//{
//	static UFunction* pServerViewNextPlayer = 0;
//	APlayerController_execServerViewNextPlayer_Parms parms;
//
//	if ( !pServerViewNextPlayer )
//		pServerViewNextPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerViewNextPlayer" );
//
//	parms.cannotPickSelf = cannotPickSelf;
//	parms.IsPrevious = IsPrevious;
//	parms.ViewStyle = ViewStyle;
//	this->ProcessEvent ( pServerViewNextPlayer, &parms, NULL );
//
//}
//
//bool APlayerController::IsSpectating (  )
//{
//	static UFunction* pIsSpectating = 0;
//	APlayerController_execIsSpectating_Parms parms;
//
//	if ( !pIsSpectating )
//		pIsSpectating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsSpectating" );
//
//	this->ProcessEvent ( pIsSpectating, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::FixedVelocity ( float DeltaTime )
//{
//	static UFunction* pFixedVelocity = 0;
//	APlayerController_execFixedVelocity_Parms parms;
//
//	if ( !pFixedVelocity )
//		pFixedVelocity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.FixedVelocity" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pFixedVelocity, &parms, NULL );
//
//}
//
//void APlayerController::FixedSprintState (  )
//{
//	static UFunction* pFixedSprintState = 0;
//	APlayerController_execFixedSprintState_Parms parms;
//
//	if ( !pFixedSprintState )
//		pFixedSprintState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.FixedSprintState" );
//
//	this->ProcessEvent ( pFixedSprintState, &parms, NULL );
//
//}
//
//void APlayerController::SetDodging ( bool Enabled )
//{
//	static UFunction* pSetDodging = 0;
//	APlayerController_execSetDodging_Parms parms;
//
//	if ( !pSetDodging )
//		pSetDodging = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetDodging" );
//
//	parms.Enabled = Enabled;
//	this->ProcessEvent ( pSetDodging, &parms, NULL );
//
//}
//
//bool APlayerController::DodgingIsEnabled (  )
//{
//	static UFunction* pDodgingIsEnabled = 0;
//	APlayerController_execDodgingIsEnabled_Parms parms;
//
//	if ( !pDodgingIsEnabled )
//		pDodgingIsEnabled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DodgingIsEnabled" );
//
//	this->ProcessEvent ( pDodgingIsEnabled, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::ClearDoubleClick (  )
//{
//	static UFunction* pClearDoubleClick = 0;
//	APlayerController_execClearDoubleClick_Parms parms;
//
//	if ( !pClearDoubleClick )
//		pClearDoubleClick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClearDoubleClick" );
//
//	this->ProcessEvent ( pClearDoubleClick, &parms, NULL );
//
//}
//
//void APlayerController::UpdateRotation ( float DeltaTime, float maxPitch )
//{
//	static UFunction* pUpdateRotation = 0;
//	APlayerController_execUpdateRotation_Parms parms;
//
//	if ( !pUpdateRotation )
//		pUpdateRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.UpdateRotation" );
//
//	parms.DeltaTime = DeltaTime;
//	parms.maxPitch = maxPitch;
//	this->ProcessEvent ( pUpdateRotation, &parms, NULL );
//
//}
//
//void APlayerController::TurnAround (  )
//{
//	static UFunction* pTurnAround = 0;
//	APlayerController_execTurnAround_Parms parms;
//
//	if ( !pTurnAround )
//		pTurnAround = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.TurnAround" );
//
//	this->ProcessEvent ( pTurnAround, &parms, NULL );
//
//}
//
//bool APlayerController::TurnTowardNearestEnemy (  )
//{
//	static UFunction* pTurnTowardNearestEnemy = 0;
//	APlayerController_execTurnTowardNearestEnemy_Parms parms;
//
//	if ( !pTurnTowardNearestEnemy )
//		pTurnTowardNearestEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.TurnTowardNearestEnemy" );
//
//	this->ProcessEvent ( pTurnTowardNearestEnemy, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::SetViewValue (  )
//{
//	static UFunction* pSetViewValue = 0;
//	APlayerController_execSetViewValue_Parms parms;
//
//	if ( !pSetViewValue )
//		pSetViewValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetViewValue" );
//
//	this->ProcessEvent ( pSetViewValue, &parms, NULL );
//
//}
//
//void APlayerController::ServerSetViewValue ( int iShake, int iShock, int iBreath )
//{
//	static UFunction* pServerSetViewValue = 0;
//	APlayerController_execServerSetViewValue_Parms parms;
//
//	if ( !pServerSetViewValue )
//		pServerSetViewValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSetViewValue" );
//
//	parms.iShake = iShake;
//	parms.iShock = iShock;
//	parms.iBreath = iBreath;
//	this->ProcessEvent ( pServerSetViewValue, &parms, NULL );
//
//}
//
//void APlayerController::wViewBreath (  )
//{
//	static UFunction* pwViewBreath = 0;
//	APlayerController_execwViewBreath_Parms parms;
//
//	if ( !pwViewBreath )
//		pwViewBreath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.wViewBreath" );
//
//	this->ProcessEvent ( pwViewBreath, &parms, NULL );
//
//}
//
//void APlayerController::ServerSetwBreathRotation ( int iBreath )
//{
//	static UFunction* pServerSetwBreathRotation = 0;
//	APlayerController_execServerSetwBreathRotation_Parms parms;
//
//	if ( !pServerSetwBreathRotation )
//		pServerSetwBreathRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSetwBreathRotation" );
//
//	parms.iBreath = iBreath;
//	this->ProcessEvent ( pServerSetwBreathRotation, &parms, NULL );
//
//}
//
//void APlayerController::wViewShock ( float fDeltaTime )
//{
//	static UFunction* pwViewShock = 0;
//	APlayerController_execwViewShock_Parms parms;
//
//	if ( !pwViewShock )
//		pwViewShock = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.wViewShock" );
//
//	parms.fDeltaTime = fDeltaTime;
//	this->ProcessEvent ( pwViewShock, &parms, NULL );
//
//}
//
//void APlayerController::ServerSetwShockRotation ( int iShock )
//{
//	static UFunction* pServerSetwShockRotation = 0;
//	APlayerController_execServerSetwShockRotation_Parms parms;
//
//	if ( !pServerSetwShockRotation )
//		pServerSetwShockRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSetwShockRotation" );
//
//	parms.iShock = iShock;
//	this->ProcessEvent ( pServerSetwShockRotation, &parms, NULL );
//
//}
//
//void APlayerController::SetShakeState ( unsigned char EShakeState )
//{
//	static UFunction* pSetShakeState = 0;
//	APlayerController_execSetShakeState_Parms parms;
//
//	if ( !pSetShakeState )
//		pSetShakeState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetShakeState" );
//
//	parms.EShakeState = EShakeState;
//	this->ProcessEvent ( pSetShakeState, &parms, NULL );
//
//}
//
//void APlayerController::wViewShake ( float DeltaTime )
//{
//	static UFunction* pwViewShake = 0;
//	APlayerController_execwViewShake_Parms parms;
//
//	if ( !pwViewShake )
//		pwViewShake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.wViewShake" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pwViewShake, &parms, NULL );
//
//}
//
//struct FVector APlayerController::ReCalDecayVelocity (  )
//{
//	static UFunction* pReCalDecayVelocity = 0;
//	APlayerController_execReCalDecayVelocity_Parms parms;
//
//	if ( !pReCalDecayVelocity )
//		pReCalDecayVelocity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ReCalDecayVelocity" );
//
//	this->ProcessEvent ( pReCalDecayVelocity, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::wViewAttacked ( float DeltaTime )
//{
//	static UFunction* pwViewAttacked = 0;
//	APlayerController_execwViewAttacked_Parms parms;
//
//	if ( !pwViewAttacked )
//		pwViewAttacked = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.wViewAttacked" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pwViewAttacked, &parms, NULL );
//
//}
//
//float APlayerController::GetFovSpeed (  )
//{
//	static UFunction* pGetFovSpeed = 0;
//	APlayerController_execGetFovSpeed_Parms parms;
//
//	if ( !pGetFovSpeed )
//		pGetFovSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetFovSpeed" );
//
//	this->ProcessEvent ( pGetFovSpeed, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::ServerSetwShakeRotation ( int iShake )
//{
//	static UFunction* pServerSetwShakeRotation = 0;
//	APlayerController_execServerSetwShakeRotation_Parms parms;
//
//	if ( !pServerSetwShakeRotation )
//		pServerSetwShakeRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSetwShakeRotation" );
//
//	parms.iShake = iShake;
//	this->ProcessEvent ( pServerSetwShakeRotation, &parms, NULL );
//
//}
//
//void APlayerController::ViewShake ( float DeltaTime )
//{
//	static UFunction* pViewShake = 0;
//	APlayerController_execViewShake_Parms parms;
//
//	if ( !pViewShake )
//		pViewShake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ViewShake" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pViewShake, &parms, NULL );
//
//}
//
//void APlayerController::ServerSetShakeRotation ( struct FRotator OrgShakeRot )
//{
//	static UFunction* pServerSetShakeRotation = 0;
//	APlayerController_execServerSetShakeRotation_Parms parms;
//
//	if ( !pServerSetShakeRotation )
//		pServerSetShakeRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSetShakeRotation" );
//
//	parms.OrgShakeRot = OrgShakeRot;
//	this->ProcessEvent ( pServerSetShakeRotation, &parms, NULL );
//
//}
//
//void APlayerController::UpdateShakeRotComponent ( float dt, bool bHigher, float* Max, int* Current, float* Rate, float* Time )
//{
//	static UFunction* pUpdateShakeRotComponent = 0;
//	APlayerController_execUpdateShakeRotComponent_Parms parms;
//
//	if ( !pUpdateShakeRotComponent )
//		pUpdateShakeRotComponent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.UpdateShakeRotComponent" );
//
//	parms.dt = dt;
//	parms.bHigher = bHigher;
//	this->ProcessEvent ( pUpdateShakeRotComponent, &parms, NULL );
//
//	*Max = parms.Max;
//	*Current = parms.Current;
//	*Rate = parms.Rate;
//	*Time = parms.Time;
//}
//
//void APlayerController::CheckShake ( float dt, bool bHigher, float* MaxOffset, float* offset, float* Rate, float* Time )
//{
//	static UFunction* pCheckShake = 0;
//	APlayerController_execCheckShake_Parms parms;
//
//	if ( !pCheckShake )
//		pCheckShake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CheckShake" );
//
//	parms.dt = dt;
//	parms.bHigher = bHigher;
//	this->ProcessEvent ( pCheckShake, &parms, NULL );
//
//	*MaxOffset = parms.MaxOffset;
//	*offset = parms.offset;
//	*Rate = parms.Rate;
//	*Time = parms.Time;
//}
//
//int APlayerController::BlendRot ( float DeltaTime, int BlendC, int NewC )
//{
//	static UFunction* pBlendRot = 0;
//	APlayerController_execBlendRot_Parms parms;
//
//	if ( !pBlendRot )
//		pBlendRot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.BlendRot" );
//
//	parms.DeltaTime = DeltaTime;
//	parms.BlendC = BlendC;
//	parms.NewC = NewC;
//	this->ProcessEvent ( pBlendRot, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::eventPlayerCalcView ( class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation )
//{
//	static UFunction* pPlayerCalcView = 0;
//	APlayerController_eventPlayerCalcView_Parms parms;
//
//	if ( !pPlayerCalcView )
//		pPlayerCalcView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PlayerCalcView" );
//
//	parms.ViewActor = *ViewActor;
//	parms.CameraLocation = *CameraLocation;
//	parms.CameraRotation = *CameraRotation;
//	this->ProcessEvent ( pPlayerCalcView, &parms, NULL );
//
//	*ViewActor = parms.ViewActor;
//	*CameraLocation = parms.CameraLocation;
//	*CameraRotation = parms.CameraRotation;
//}
//
//void APlayerController::DummyRotation ( struct FRotator NewRotation )
//{
//	static UFunction* pDummyRotation = 0;
//	APlayerController_execDummyRotation_Parms parms;
//
//	if ( !pDummyRotation )
//		pDummyRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DummyRotation" );
//
//	parms.NewRotation = NewRotation;
//	this->ProcessEvent ( pDummyRotation, &parms, NULL );
//
//}
//
//void APlayerController::CacheCalcView ( class AActor* ViewActor, struct FVector CameraLocation, struct FRotator CameraRotation )
//{
//	static UFunction* pCacheCalcView = 0;
//	APlayerController_execCacheCalcView_Parms parms;
//
//	if ( !pCacheCalcView )
//		pCacheCalcView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CacheCalcView" );
//
//	parms.ViewActor = ViewActor;
//	parms.CameraLocation = CameraLocation;
//	parms.CameraRotation = CameraRotation;
//	this->ProcessEvent ( pCacheCalcView, &parms, NULL );
//
//}
//
//struct FRotator APlayerController::GetViewRotation (  )
//{
//	static UFunction* pGetViewRotation = 0;
//	APlayerController_execGetViewRotation_Parms parms;
//
//	if ( !pGetViewRotation )
//		pGetViewRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetViewRotation" );
//
//	this->ProcessEvent ( pGetViewRotation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::execRemoveAllPostProcessEffects (  )
//{
//	static UFunction* pRemoveAllPostProcessEffects = 0;
//	APlayerController_execRemoveAllPostProcessEffects_Parms parms;
//
//	if ( !pRemoveAllPostProcessEffects )
//		pRemoveAllPostProcessEffects = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.RemoveAllPostProcessEffects" );
//
//	this->ProcessEvent ( pRemoveAllPostProcessEffects, &parms, NULL );
//
//}
//
//void APlayerController::AdditionalPPEffectsOff (  )
//{
//	static UFunction* pAdditionalPPEffectsOff = 0;
//	APlayerController_execAdditionalPPEffectsOff_Parms parms;
//
//	if ( !pAdditionalPPEffectsOff )
//		pAdditionalPPEffectsOff = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AdditionalPPEffectsOff" );
//
//	this->ProcessEvent ( pAdditionalPPEffectsOff, &parms, NULL );
//
//}
//
//void APlayerController::execSSAO ( bool B )
//{
//	static UFunction* pSSAO = 0;
//	APlayerController_execSSAO_Parms parms;
//
//	if ( !pSSAO )
//		pSSAO = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SSAO" );
//
//	parms.B = B;
//	this->ProcessEvent ( pSSAO, &parms, NULL );
//
//}
//
//bool APlayerController::execFadeToBlackWhite ( float f_Fade_Time )
//{
//	static UFunction* pFadeToBlackWhite = 0;
//	APlayerController_execFadeToBlackWhite_Parms parms;
//
//	if ( !pFadeToBlackWhite )
//		pFadeToBlackWhite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.FadeToBlackWhite" );
//
//	parms.f_Fade_Time = f_Fade_Time;
//	this->ProcessEvent ( pFadeToBlackWhite, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerController::execFadeToColor ( float f_Fade_Time )
//{
//	static UFunction* pFadeToColor = 0;
//	APlayerController_execFadeToColor_Parms parms;
//
//	if ( !pFadeToColor )
//		pFadeToColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.FadeToColor" );
//
//	parms.f_Fade_Time = f_Fade_Time;
//	this->ProcessEvent ( pFadeToColor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::execPPEffectOff ( struct FName PP_EffectClass )
//{
//	static UFunction* pPPEffectOff = 0;
//	APlayerController_execPPEffectOff_Parms parms;
//
//	if ( !pPPEffectOff )
//		pPPEffectOff = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PPEffectOff" );
//
//	parms.PP_EffectClass = PP_EffectClass;
//	this->ProcessEvent ( pPPEffectOff, &parms, NULL );
//
//}
//
//void APlayerController::execPPEffectOn ( struct FName PP_EffectClass )
//{
//	static UFunction* pPPEffectOn = 0;
//	APlayerController_execPPEffectOn_Parms parms;
//
//	if ( !pPPEffectOn )
//		pPPEffectOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PPEffectOn" );
//
//	parms.PP_EffectClass = PP_EffectClass;
//	this->ProcessEvent ( pPPEffectOn, &parms, NULL );
//
//}
//
//void APlayerController::execCP ( class UClass* PP_EffectClass )
//{
//	static UFunction* pCP = 0;
//	APlayerController_execCP_Parms parms;
//
//	if ( !pCP )
//		pCP = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CP" );
//
//	parms.PP_EffectClass = PP_EffectClass;
//	this->ProcessEvent ( pCP, &parms, NULL );
//
//}
//
//void APlayerController::execCreatePostProcessEffect ( class UClass* PP_EffectClass )
//{
//	static UFunction* pCreatePostProcessEffect = 0;
//	APlayerController_execCreatePostProcessEffect_Parms parms;
//
//	if ( !pCreatePostProcessEffect )
//		pCreatePostProcessEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CreatePostProcessEffect" );
//
//	parms.PP_EffectClass = PP_EffectClass;
//	this->ProcessEvent ( pCreatePostProcessEffect, &parms, NULL );
//
//}
//
//void APlayerController::eventRemovePostProcessEffect ( class UPostProcessEffect* PP_ExEffect )
//{
//	static UFunction* pRemovePostProcessEffect = 0;
//	APlayerController_eventRemovePostProcessEffect_Parms parms;
//
//	if ( !pRemovePostProcessEffect )
//		pRemovePostProcessEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.RemovePostProcessEffect" );
//
//	parms.PP_ExEffect = PP_ExEffect;
//	this->ProcessEvent ( pRemovePostProcessEffect, &parms, NULL );
//
//}
//
//void APlayerController::eventAddPostProcessEffect ( class UPostProcessEffect* PP_NewEffect, bool PP_RemoveExisting )
//{
//	static UFunction* pAddPostProcessEffect = 0;
//	APlayerController_eventAddPostProcessEffect_Parms parms;
//
//	if ( !pAddPostProcessEffect )
//		pAddPostProcessEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AddPostProcessEffect" );
//
//	parms.PP_NewEffect = PP_NewEffect;
//	parms.PP_RemoveExisting = PP_RemoveExisting;
//	this->ProcessEvent ( pAddPostProcessEffect, &parms, NULL );
//
//}
//
//void APlayerController::execRemoveAllCameraEffects (  )
//{
//	static UFunction* pRemoveAllCameraEffects = 0;
//	APlayerController_execRemoveAllCameraEffects_Parms parms;
//
//	if ( !pRemoveAllCameraEffects )
//		pRemoveAllCameraEffects = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.RemoveAllCameraEffects" );
//
//	this->ProcessEvent ( pRemoveAllCameraEffects, &parms, NULL );
//
//}
//
//void APlayerController::execCreateCameraEffect ( class UClass* EffectClass )
//{
//	static UFunction* pCreateCameraEffect = 0;
//	APlayerController_execCreateCameraEffect_Parms parms;
//
//	if ( !pCreateCameraEffect )
//		pCreateCameraEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CreateCameraEffect" );
//
//	parms.EffectClass = EffectClass;
//	this->ProcessEvent ( pCreateCameraEffect, &parms, NULL );
//
//}
//
//void APlayerController::eventRemoveCameraEffect ( class UCameraEffect* ExEffect )
//{
//	static UFunction* pRemoveCameraEffect = 0;
//	APlayerController_eventRemoveCameraEffect_Parms parms;
//
//	if ( !pRemoveCameraEffect )
//		pRemoveCameraEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.RemoveCameraEffect" );
//
//	parms.ExEffect = ExEffect;
//	this->ProcessEvent ( pRemoveCameraEffect, &parms, NULL );
//
//}
//
//void APlayerController::eventAddCameraEffect ( class UCameraEffect* NewEffect, bool RemoveExisting )
//{
//	static UFunction* pAddCameraEffect = 0;
//	APlayerController_eventAddCameraEffect_Parms parms;
//
//	if ( !pAddCameraEffect )
//		pAddCameraEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AddCameraEffect" );
//
//	parms.NewEffect = NewEffect;
//	parms.RemoveExisting = RemoveExisting;
//	this->ProcessEvent ( pAddCameraEffect, &parms, NULL );
//
//}
//
//void APlayerController::RotateByAttacked ( struct FVector* CameraLocation, struct FRotator* CameraRotation )
//{
//	static UFunction* pRotateByAttacked = 0;
//	APlayerController_execRotateByAttacked_Parms parms;
//
//	if ( !pRotateByAttacked )
//		pRotateByAttacked = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.RotateByAttacked" );
//
//	parms.CameraLocation = *CameraLocation;
//	parms.CameraRotation = *CameraRotation;
//	this->ProcessEvent ( pRotateByAttacked, &parms, NULL );
//
//	*CameraLocation = parms.CameraLocation;
//	*CameraRotation = parms.CameraRotation;
//}
//
//void APlayerController::CalcFirstPersonView ( struct FVector* CameraLocation, struct FRotator* CameraRotation )
//{
//	static UFunction* pCalcFirstPersonView = 0;
//	APlayerController_execCalcFirstPersonView_Parms parms;
//
//	if ( !pCalcFirstPersonView )
//		pCalcFirstPersonView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CalcFirstPersonView" );
//
//	parms.CameraLocation = *CameraLocation;
//	parms.CameraRotation = *CameraRotation;
//	this->ProcessEvent ( pCalcFirstPersonView, &parms, NULL );
//
//	*CameraLocation = parms.CameraLocation;
//	*CameraRotation = parms.CameraRotation;
//}
//
//void APlayerController::CalcBehindView ( float dist, bool bDiedSelf, struct FRotator killerRot, struct FVector* CameraLocation, struct FRotator* CameraRotation )
//{
//	static UFunction* pCalcBehindView = 0;
//	APlayerController_execCalcBehindView_Parms parms;
//
//	if ( !pCalcBehindView )
//		pCalcBehindView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CalcBehindView" );
//
//	parms.dist = dist;
//	parms.bDiedSelf = bDiedSelf;
//	parms.killerRot = killerRot;
//	this->ProcessEvent ( pCalcBehindView, &parms, NULL );
//
//	*CameraLocation = parms.CameraLocation;
//	*CameraRotation = parms.CameraRotation;
//}
//
//void APlayerController::eventAdjustView ( float DeltaTime )
//{
//	static UFunction* pAdjustView = 0;
//	APlayerController_eventAdjustView_Parms parms;
//
//	if ( !pAdjustView )
//		pAdjustView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AdjustView" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pAdjustView, &parms, NULL );
//
//}
//
//bool APlayerController::NotifyLanded ( struct FVector HitNormal )
//{
//	static UFunction* pNotifyLanded = 0;
//	APlayerController_execNotifyLanded_Parms parms;
//
//	if ( !pNotifyLanded )
//		pNotifyLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.NotifyLanded" );
//
//	parms.HitNormal = HitNormal;
//	this->ProcessEvent ( pNotifyLanded, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FRotator APlayerController::AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError )
//{
//	static UFunction* pAdjustAim = 0;
//	APlayerController_execAdjustAim_Parms parms;
//
//	if ( !pAdjustAim )
//		pAdjustAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AdjustAim" );
//
//	parms.FiredAmmunition = FiredAmmunition;
//	parms.projStart = projStart;
//	parms.AimError = AimError;
//	this->ProcessEvent ( pAdjustAim, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::TestMeleeAttackMode ( bool bMelee )
//{
//	static UFunction* pTestMeleeAttackMode = 0;
//	APlayerController_execTestMeleeAttackMode_Parms parms;
//
//	if ( !pTestMeleeAttackMode )
//		pTestMeleeAttackMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.TestMeleeAttackMode" );
//
//	parms.bMelee = bMelee;
//	this->ProcessEvent ( pTestMeleeAttackMode, &parms, NULL );
//
//}
//
//void APlayerController::SetAimMode ( bool bAim )
//{
//	static UFunction* pSetAimMode = 0;
//	APlayerController_execSetAimMode_Parms parms;
//
//	if ( !pSetAimMode )
//		pSetAimMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetAimMode" );
//
//	parms.bAim = bAim;
//	this->ProcessEvent ( pSetAimMode, &parms, NULL );
//
//}
//
//void APlayerController::ServerToggleAimMode ( bool bToggle )
//{
//	static UFunction* pServerToggleAimMode = 0;
//	APlayerController_execServerToggleAimMode_Parms parms;
//
//	if ( !pServerToggleAimMode )
//		pServerToggleAimMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerToggleAimMode" );
//
//	parms.bToggle = bToggle;
//	this->ProcessEvent ( pServerToggleAimMode, &parms, NULL );
//
//}
//
//void APlayerController::ClientToggleAimMode ( bool bToggle )
//{
//	static UFunction* pClientToggleAimMode = 0;
//	APlayerController_execClientToggleAimMode_Parms parms;
//
//	if ( !pClientToggleAimMode )
//		pClientToggleAimMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientToggleAimMode" );
//
//	parms.bToggle = bToggle;
//	this->ProcessEvent ( pClientToggleAimMode, &parms, NULL );
//
//}
//
//void APlayerController::PlayerMove ( float DeltaTime )
//{
//	static UFunction* pPlayerMove = 0;
//	APlayerController_execPlayerMove_Parms parms;
//
//	if ( !pPlayerMove )
//		pPlayerMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PlayerMove" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pPlayerMove, &parms, NULL );
//
//}
//
//bool APlayerController::IsBehindView (  )
//{
//	static UFunction* pIsBehindView = 0;
//	APlayerController_execIsBehindView_Parms parms;
//
//	if ( !pIsBehindView )
//		pIsBehindView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsBehindView" );
//
//	this->ProcessEvent ( pIsBehindView, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::SendPingInGame ( float DeltaTime )
//{
//	static UFunction* pSendPingInGame = 0;
//	APlayerController_execSendPingInGame_Parms parms;
//
//	if ( !pSendPingInGame )
//		pSendPingInGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SendPingInGame" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pSendPingInGame, &parms, NULL );
//
//}
//
//void APlayerController::ServerSetDClickMove (  )
//{
//	static UFunction* pServerSetDClickMove = 0;
//	APlayerController_execServerSetDClickMove_Parms parms;
//
//	if ( !pServerSetDClickMove )
//		pServerSetDClickMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSetDClickMove" );
//
//	this->ProcessEvent ( pServerSetDClickMove, &parms, NULL );
//
//}
//
//void APlayerController::DoPosture_CHINA (  )
//{
//	static UFunction* pDoPosture_CHINA = 0;
//	APlayerController_execDoPosture_CHINA_Parms parms;
//
//	if ( !pDoPosture_CHINA )
//		pDoPosture_CHINA = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DoPosture_CHINA" );
//
//	this->ProcessEvent ( pDoPosture_CHINA, &parms, NULL );
//
//}
//
//void APlayerController::DoPosture_KR (  )
//{
//	static UFunction* pDoPosture_KR = 0;
//	APlayerController_execDoPosture_KR_Parms parms;
//
//	if ( !pDoPosture_KR )
//		pDoPosture_KR = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DoPosture_KR" );
//
//	this->ProcessEvent ( pDoPosture_KR, &parms, NULL );
//
//}
//
//void APlayerController::DoPosture (  )
//{
//	static UFunction* pDoPosture = 0;
//	APlayerController_execDoPosture_Parms parms;
//
//	if ( !pDoPosture )
//		pDoPosture = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DoPosture" );
//
//	this->ProcessEvent ( pDoPosture, &parms, NULL );
//
//}
//
//void APlayerController::TickInput ( float DeltaTime )
//{
//	static UFunction* pTickInput = 0;
//	APlayerController_execTickInput_Parms parms;
//
//	if ( !pTickInput )
//		pTickInput = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.TickInput" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTickInput, &parms, NULL );
//
//}
//
//void APlayerController::CheckPerformence ( float DeltaTime )
//{
//	static UFunction* pCheckPerformence = 0;
//	APlayerController_execCheckPerformence_Parms parms;
//
//	if ( !pCheckPerformence )
//		pCheckPerformence = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CheckPerformence" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pCheckPerformence, &parms, NULL );
//
//}
//
//void APlayerController::eventPlayerTick ( float DeltaTime )
//{
//	static UFunction* pPlayerTick = 0;
//	APlayerController_eventPlayerTick_Parms parms;
//
//	if ( !pPlayerTick )
//		pPlayerTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PlayerTick" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pPlayerTick, &parms, NULL );
//
//}
//
//void APlayerController::eventTravelPostAccept (  )
//{
//	static UFunction* pTravelPostAccept = 0;
//	APlayerController_eventTravelPostAccept_Parms parms;
//
//	if ( !pTravelPostAccept )
//		pTravelPostAccept = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.TravelPostAccept" );
//
//	this->ProcessEvent ( pTravelPostAccept, &parms, NULL );
//
//}
//
//void APlayerController::ChangedWeapon (  )
//{
//	static UFunction* pChangedWeapon = 0;
//	APlayerController_execChangedWeapon_Parms parms;
//
//	if ( !pChangedWeapon )
//		pChangedWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ChangedWeapon" );
//
//	this->ProcessEvent ( pChangedWeapon, &parms, NULL );
//
//}
//
//void APlayerController::ServerToggleBehindView (  )
//{
//	static UFunction* pServerToggleBehindView = 0;
//	APlayerController_execServerToggleBehindView_Parms parms;
//
//	if ( !pServerToggleBehindView )
//		pServerToggleBehindView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerToggleBehindView" );
//
//	this->ProcessEvent ( pServerToggleBehindView, &parms, NULL );
//
//}
//
//void APlayerController::execToggleBehindView (  )
//{
//	static UFunction* pToggleBehindView = 0;
//	APlayerController_execToggleBehindView_Parms parms;
//
//	if ( !pToggleBehindView )
//		pToggleBehindView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ToggleBehindView" );
//
//	this->ProcessEvent ( pToggleBehindView, &parms, NULL );
//
//}
//
//void APlayerController::execBehindView ( bool B )
//{
//	static UFunction* pBehindView = 0;
//	APlayerController_execBehindView_Parms parms;
//
//	if ( !pBehindView )
//		pBehindView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.BehindView" );
//
//	parms.B = B;
//	this->ProcessEvent ( pBehindView, &parms, NULL );
//
//}
//
//void APlayerController::ClientReStart ( class APawn* NewPawn )
//{
//	static UFunction* pClientReStart = 0;
//	APlayerController_execClientReStart_Parms parms;
//
//	if ( !pClientReStart )
//		pClientReStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientReStart" );
//
//	parms.NewPawn = NewPawn;
//	this->ProcessEvent ( pClientReStart, &parms, NULL );
//
//}
//
//void APlayerController::EnterStartState (  )
//{
//	static UFunction* pEnterStartState = 0;
//	APlayerController_execEnterStartState_Parms parms;
//
//	if ( !pEnterStartState )
//		pEnterStartState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.EnterStartState" );
//
//	this->ProcessEvent ( pEnterStartState, &parms, NULL );
//
//}
//
//void APlayerController::Restart (  )
//{
//	static UFunction* pRestart = 0;
//	APlayerController_execRestart_Parms parms;
//
//	if ( !pRestart )
//		pRestart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Restart" );
//
//	this->ProcessEvent ( pRestart, &parms, NULL );
//
//}
//
//void APlayerController::eventSetProgressTime ( float t )
//{
//	static UFunction* pSetProgressTime = 0;
//	APlayerController_eventSetProgressTime_Parms parms;
//
//	if ( !pSetProgressTime )
//		pSetProgressTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetProgressTime" );
//
//	parms.t = t;
//	this->ProcessEvent ( pSetProgressTime, &parms, NULL );
//
//}
//
//void APlayerController::eventSetProgressMessage ( int Index, struct FString S, class FColor C )
//{
//	static UFunction* pSetProgressMessage = 0;
//	APlayerController_eventSetProgressMessage_Parms parms;
//
//	if ( !pSetProgressMessage )
//		pSetProgressMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetProgressMessage" );
//
//	parms.Index = Index;
//	parms.S = S;
//	parms.C = C;
//	this->ProcessEvent ( pSetProgressMessage, &parms, NULL );
//
//}
//
//void APlayerController::execClearProgressMessages (  )
//{
//	static UFunction* pClearProgressMessages = 0;
//	APlayerController_execClearProgressMessages_Parms parms;
//
//	if ( !pClearProgressMessages )
//		pClearProgressMessages = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClearProgressMessages" );
//
//	this->ProcessEvent ( pClearProgressMessages, &parms, NULL );
//
//}
//
//void APlayerController::eventProgressCommand ( struct FString Cmd, struct FString Msg1, struct FString Msg2 )
//{
//	static UFunction* pProgressCommand = 0;
//	APlayerController_eventProgressCommand_Parms parms;
//
//	if ( !pProgressCommand )
//		pProgressCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ProgressCommand" );
//
//	parms.Cmd = Cmd;
//	parms.Msg1 = Msg1;
//	parms.Msg2 = Msg2;
//	this->ProcessEvent ( pProgressCommand, &parms, NULL );
//
//}
//
//void APlayerController::execSwitchLevel ( struct FString URL )
//{
//	static UFunction* pSwitchLevel = 0;
//	APlayerController_execSwitchLevel_Parms parms;
//
//	if ( !pSwitchLevel )
//		pSwitchLevel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SwitchLevel" );
//
//	parms.URL = URL;
//	this->ProcessEvent ( pSwitchLevel, &parms, NULL );
//
//}
//
//void APlayerController::ServerChangeTeam3 ( int N )
//{
//	static UFunction* pServerChangeTeam3 = 0;
//	APlayerController_execServerChangeTeam3_Parms parms;
//
//	if ( !pServerChangeTeam3 )
//		pServerChangeTeam3 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerChangeTeam3" );
//
//	parms.N = N;
//	this->ProcessEvent ( pServerChangeTeam3, &parms, NULL );
//
//}
//
//void APlayerController::ServerChangeTeam ( int N )
//{
//	static UFunction* pServerChangeTeam = 0;
//	APlayerController_execServerChangeTeam_Parms parms;
//
//	if ( !pServerChangeTeam )
//		pServerChangeTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerChangeTeam" );
//
//	parms.N = N;
//	this->ProcessEvent ( pServerChangeTeam, &parms, NULL );
//
//}
//
//void APlayerController::execChangeTeam ( int N )
//{
//	static UFunction* pChangeTeam = 0;
//	APlayerController_execChangeTeam_Parms parms;
//
//	if ( !pChangeTeam )
//		pChangeTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ChangeTeam" );
//
//	parms.N = N;
//	this->ProcessEvent ( pChangeTeam, &parms, NULL );
//
//}
//
//void APlayerController::execSwitchTeam3 (  )
//{
//	static UFunction* pSwitchTeam3 = 0;
//	APlayerController_execSwitchTeam3_Parms parms;
//
//	if ( !pSwitchTeam3 )
//		pSwitchTeam3 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SwitchTeam3" );
//
//	this->ProcessEvent ( pSwitchTeam3, &parms, NULL );
//
//}
//
//void APlayerController::execSwitchTeam (  )
//{
//	static UFunction* pSwitchTeam = 0;
//	APlayerController_execSwitchTeam_Parms parms;
//
//	if ( !pSwitchTeam )
//		pSwitchTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SwitchTeam" );
//
//	this->ProcessEvent ( pSwitchTeam, &parms, NULL );
//
//}
//
//void APlayerController::ChangeName ( struct FString S )
//{
//	static UFunction* pChangeName = 0;
//	APlayerController_execChangeName_Parms parms;
//
//	if ( !pChangeName )
//		pChangeName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ChangeName" );
//
//	parms.S = S;
//	this->ProcessEvent ( pChangeName, &parms, NULL );
//
//}
//
//void APlayerController::ChangeVoiceType ( struct FString NewVoiceType )
//{
//	static UFunction* pChangeVoiceType = 0;
//	APlayerController_execChangeVoiceType_Parms parms;
//
//	if ( !pChangeVoiceType )
//		pChangeVoiceType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ChangeVoiceType" );
//
//	parms.NewVoiceType = NewVoiceType;
//	this->ProcessEvent ( pChangeVoiceType, &parms, NULL );
//
//}
//
//void APlayerController::execSetVoice ( struct FString S )
//{
//	static UFunction* pSetVoice = 0;
//	APlayerController_execSetVoice_Parms parms;
//
//	if ( !pSetVoice )
//		pSetVoice = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetVoice" );
//
//	parms.S = S;
//	this->ProcessEvent ( pSetVoice, &parms, NULL );
//
//}
//
//void APlayerController::execSetName ( struct FString S )
//{
//	static UFunction* pSetName = 0;
//	APlayerController_execSetName_Parms parms;
//
//	if ( !pSetName )
//		pSetName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetName" );
//
//	parms.S = S;
//	this->ProcessEvent ( pSetName, &parms, NULL );
//
//}
//
//void APlayerController::execSuicide (  )
//{
//	static UFunction* pSuicide = 0;
//	APlayerController_execSuicide_Parms parms;
//
//	if ( !pSuicide )
//		pSuicide = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Suicide" );
//
//	this->ProcessEvent ( pSuicide, &parms, NULL );
//
//}
//
//bool APlayerController::ServerUse (  )
//{
//	static UFunction* pServerUse = 0;
//	APlayerController_execServerUse_Parms parms;
//
//	if ( !pServerUse )
//		pServerUse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerUse" );
//
//	this->ProcessEvent ( pServerUse, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::execUse (  )
//{
//	static UFunction* pUse = 0;
//	APlayerController_execUse_Parms parms;
//
//	if ( !pUse )
//		pUse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Use" );
//
//	this->ProcessEvent ( pUse, &parms, NULL );
//
//}
//
//void APlayerController::execAltFire ( float f )
//{
//	static UFunction* pAltFire = 0;
//	APlayerController_execAltFire_Parms parms;
//
//	if ( !pAltFire )
//		pAltFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AltFire" );
//
//	parms.f = f;
//	this->ProcessEvent ( pAltFire, &parms, NULL );
//
//}
//
//void APlayerController::execFire ( float f )
//{
//	static UFunction* pFire = 0;
//	APlayerController_execFire_Parms parms;
//
//	if ( !pFire )
//		pFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Fire" );
//
//	parms.f = f;
//	this->ProcessEvent ( pFire, &parms, NULL );
//
//}
//
//void APlayerController::execActivateItem (  )
//{
//	static UFunction* pActivateItem = 0;
//	APlayerController_execActivateItem_Parms parms;
//
//	if ( !pActivateItem )
//		pActivateItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ActivateItem" );
//
//	this->ProcessEvent ( pActivateItem, &parms, NULL );
//
//}
//
//void APlayerController::execPrevItem (  )
//{
//	static UFunction* pPrevItem = 0;
//	APlayerController_execPrevItem_Parms parms;
//
//	if ( !pPrevItem )
//		pPrevItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PrevItem" );
//
//	this->ProcessEvent ( pPrevItem, &parms, NULL );
//
//}
//
//bool APlayerController::IsSpecialGrenade ( class AwWeapon* kWeapon )
//{
//	static UFunction* pIsSpecialGrenade = 0;
//	APlayerController_execIsSpecialGrenade_Parms parms;
//
//	if ( !pIsSpecialGrenade )
//		pIsSpecialGrenade = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsSpecialGrenade" );
//
//	parms.kWeapon = kWeapon;
//	this->ProcessEvent ( pIsSpecialGrenade, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerController::IsFragGrenade ( class AwWeapon* kWeapon )
//{
//	static UFunction* pIsFragGrenade = 0;
//	APlayerController_execIsFragGrenade_Parms parms;
//
//	if ( !pIsFragGrenade )
//		pIsFragGrenade = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsFragGrenade" );
//
//	parms.kWeapon = kWeapon;
//	this->ProcessEvent ( pIsFragGrenade, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* APlayerController::GetWeaponByWeaponType ( unsigned char nWeaponType, class AInventory* SkipWeapon )
//{
//	static UFunction* pGetWeaponByWeaponType = 0;
//	APlayerController_execGetWeaponByWeaponType_Parms parms;
//
//	if ( !pGetWeaponByWeaponType )
//		pGetWeaponByWeaponType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetWeaponByWeaponType" );
//
//	parms.nWeaponType = nWeaponType;
//	parms.SkipWeapon = SkipWeapon;
//	this->ProcessEvent ( pGetWeaponByWeaponType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* APlayerController::GetWeaponByInventoryGroup ( unsigned char f, class AInventory* SkipWeapon )
//{
//	static UFunction* pGetWeaponByInventoryGroup = 0;
//	APlayerController_execGetWeaponByInventoryGroup_Parms parms;
//
//	if ( !pGetWeaponByInventoryGroup )
//		pGetWeaponByInventoryGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetWeaponByInventoryGroup" );
//
//	parms.f = f;
//	parms.SkipWeapon = SkipWeapon;
//	this->ProcessEvent ( pGetWeaponByInventoryGroup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* APlayerController::GetWeaponByID ( int iWeaponID, class AInventory* SkipWeapon )
//{
//	static UFunction* pGetWeaponByID = 0;
//	APlayerController_execGetWeaponByID_Parms parms;
//
//	if ( !pGetWeaponByID )
//		pGetWeaponByID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetWeaponByID" );
//
//	parms.iWeaponID = iWeaponID;
//	parms.SkipWeapon = SkipWeapon;
//	this->ProcessEvent ( pGetWeaponByID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::execGetWeapon ( class UClass* NewWeaponClass )
//{
//	static UFunction* pGetWeapon = 0;
//	APlayerController_execGetWeapon_Parms parms;
//
//	if ( !pGetWeapon )
//		pGetWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetWeapon" );
//
//	parms.NewWeaponClass = NewWeaponClass;
//	this->ProcessEvent ( pGetWeapon, &parms, NULL );
//
//}
//
//void APlayerController::execThrowsTheWeapon (  )
//{
//	static UFunction* pThrowsTheWeapon = 0;
//	APlayerController_execThrowsTheWeapon_Parms parms;
//
//	if ( !pThrowsTheWeapon )
//		pThrowsTheWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ThrowsTheWeapon" );
//
//	this->ProcessEvent ( pThrowsTheWeapon, &parms, NULL );
//
//}
//
//void APlayerController::execSwitchWeapon ( unsigned char f, bool bQuickGr )
//{
//	static UFunction* pSwitchWeapon = 0;
//	APlayerController_execSwitchWeapon_Parms parms;
//
//	if ( !pSwitchWeapon )
//		pSwitchWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SwitchWeapon" );
//
//	parms.f = f;
//	parms.bQuickGr = bQuickGr;
//	this->ProcessEvent ( pSwitchWeapon, &parms, NULL );
//
//}
//
//void APlayerController::execPipedSwitchWeapon ( unsigned char f )
//{
//	static UFunction* pPipedSwitchWeapon = 0;
//	APlayerController_execPipedSwitchWeapon_Parms parms;
//
//	if ( !pPipedSwitchWeapon )
//		pPipedSwitchWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PipedSwitchWeapon" );
//
//	parms.f = f;
//	this->ProcessEvent ( pPipedSwitchWeapon, &parms, NULL );
//
//}
//
//void APlayerController::execNextWeapon (  )
//{
//	static UFunction* pNextWeapon = 0;
//	APlayerController_execNextWeapon_Parms parms;
//
//	if ( !pNextWeapon )
//		pNextWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.NextWeapon" );
//
//	this->ProcessEvent ( pNextWeapon, &parms, NULL );
//
//}
//
//void APlayerController::execPrevWeapon (  )
//{
//	static UFunction* pPrevWeapon = 0;
//	APlayerController_execPrevWeapon_Parms parms;
//
//	if ( !pPrevWeapon )
//		pPrevWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PrevWeapon" );
//
//	this->ProcessEvent ( pPrevWeapon, &parms, NULL );
//
//}
//
//void APlayerController::ServerThrowWeapon (  )
//{
//	static UFunction* pServerThrowWeapon = 0;
//	APlayerController_execServerThrowWeapon_Parms parms;
//
//	if ( !pServerThrowWeapon )
//		pServerThrowWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerThrowWeapon" );
//
//	this->ProcessEvent ( pServerThrowWeapon, &parms, NULL );
//
//}
//
//void APlayerController::execThrowWeapon (  )
//{
//	static UFunction* pThrowWeapon = 0;
//	APlayerController_execThrowWeapon_Parms parms;
//
//	if ( !pThrowWeapon )
//		pThrowWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ThrowWeapon" );
//
//	this->ProcessEvent ( pThrowWeapon, &parms, NULL );
//
//}
//
//void APlayerController::execActivateInventoryItem ( class UClass* InvItem )
//{
//	static UFunction* pActivateInventoryItem = 0;
//	APlayerController_execActivateInventoryItem_Parms parms;
//
//	if ( !pActivateInventoryItem )
//		pActivateInventoryItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ActivateInventoryItem" );
//
//	parms.InvItem = InvItem;
//	this->ProcessEvent ( pActivateInventoryItem, &parms, NULL );
//
//}
//
//void APlayerController::ShowMidGameMenu ( bool bPause )
//{
//	static UFunction* pShowMidGameMenu = 0;
//	APlayerController_execShowMidGameMenu_Parms parms;
//
//	if ( !pShowMidGameMenu )
//		pShowMidGameMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ShowMidGameMenu" );
//
//	parms.bPause = bPause;
//	this->ProcessEvent ( pShowMidGameMenu, &parms, NULL );
//
//}
//
//void APlayerController::execShowMenu (  )
//{
//	static UFunction* pShowMenu = 0;
//	APlayerController_execShowMenu_Parms parms;
//
//	if ( !pShowMenu )
//		pShowMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ShowMenu" );
//
//	this->ProcessEvent ( pShowMenu, &parms, NULL );
//
//}
//
//void APlayerController::ServerPause (  )
//{
//	static UFunction* pServerPause = 0;
//	APlayerController_execServerPause_Parms parms;
//
//	if ( !pServerPause )
//		pServerPause = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerPause" );
//
//	this->ProcessEvent ( pServerPause, &parms, NULL );
//
//}
//
//void APlayerController::execPause (  )
//{
//	static UFunction* pPause = 0;
//	APlayerController_execPause_Parms parms;
//
//	if ( !pPause )
//		pPause = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Pause" );
//
//	this->ProcessEvent ( pPause, &parms, NULL );
//
//}
//
bool APlayerController::SetPause ( bool bPause )
{
	static UFunction* pSetPause = 0;
	APlayerController_execSetPause_Parms parms;

	if ( !pSetPause )
		pSetPause = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetPause" );

	parms.bPause = bPause;
	this->ProcessEvent ( pSetPause, &parms, NULL );

	return parms.ReturnValue;
}
//
//void APlayerController::execQuickLoad (  )
//{
//	static UFunction* pQuickLoad = 0;
//	APlayerController_execQuickLoad_Parms parms;
//
//	if ( !pQuickLoad )
//		pQuickLoad = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.QuickLoad" );
//
//	this->ProcessEvent ( pQuickLoad, &parms, NULL );
//
//}
//
//void APlayerController::execQuickSave (  )
//{
//	static UFunction* pQuickSave = 0;
//	APlayerController_execQuickSave_Parms parms;
//
//	if ( !pQuickSave )
//		pQuickSave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.QuickSave" );
//
//	this->ProcessEvent ( pQuickSave, &parms, NULL );
//
//}
//
//void APlayerController::execLocalTravel ( struct FString URL )
//{
//	static UFunction* pLocalTravel = 0;
//	APlayerController_execLocalTravel_Parms parms;
//
//	if ( !pLocalTravel )
//		pLocalTravel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.LocalTravel" );
//
//	parms.URL = URL;
//	this->ProcessEvent ( pLocalTravel, &parms, NULL );
//
//}
//
//void APlayerController::execRestartLevel (  )
//{
//	static UFunction* pRestartLevel = 0;
//	APlayerController_execRestartLevel_Parms parms;
//
//	if ( !pRestartLevel )
//		pRestartLevel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.RestartLevel" );
//
//	this->ProcessEvent ( pRestartLevel, &parms, NULL );
//
//}
//
//void APlayerController::ServerSpeech ( struct FName Type, int Index, struct FString Callsign )
//{
//	static UFunction* pServerSpeech = 0;
//	APlayerController_execServerSpeech_Parms parms;
//
//	if ( !pServerSpeech )
//		pServerSpeech = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSpeech" );
//
//	parms.Type = Type;
//	parms.Index = Index;
//	parms.Callsign = Callsign;
//	this->ProcessEvent ( pServerSpeech, &parms, NULL );
//
//}
//
//void APlayerController::execSpeech ( struct FName Type, int Index, struct FString Callsign )
//{
//	static UFunction* pSpeech = 0;
//	APlayerController_execSpeech_Parms parms;
//
//	if ( !pSpeech )
//		pSpeech = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Speech" );
//
//	parms.Type = Type;
//	parms.Index = Index;
//	parms.Callsign = Callsign;
//	this->ProcessEvent ( pSpeech, &parms, NULL );
//
//}
//
//void APlayerController::DoProneBtn ( unsigned char byDown )
//{
//	static UFunction* pDoProneBtn = 0;
//	APlayerController_execDoProneBtn_Parms parms;
//
//	if ( !pDoProneBtn )
//		pDoProneBtn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DoProneBtn" );
//
//	parms.byDown = byDown;
//	this->ProcessEvent ( pDoProneBtn, &parms, NULL );
//
//}
//
//void APlayerController::DoDuckBtn ( unsigned char byDown )
//{
//	static UFunction* pDoDuckBtn = 0;
//	APlayerController_execDoDuckBtn_Parms parms;
//
//	if ( !pDoDuckBtn )
//		pDoDuckBtn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DoDuckBtn" );
//
//	parms.byDown = byDown;
//	this->ProcessEvent ( pDoDuckBtn, &parms, NULL );
//
//}
//
//void APlayerController::DoDuckBtn_New ( unsigned char byDown )
//{
//	static UFunction* pDoDuckBtn_New = 0;
//	APlayerController_execDoDuckBtn_New_Parms parms;
//
//	if ( !pDoDuckBtn_New )
//		pDoDuckBtn_New = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DoDuckBtn_New" );
//
//	parms.byDown = byDown;
//	this->ProcessEvent ( pDoDuckBtn_New, &parms, NULL );
//
//}
//
//void APlayerController::DoProne (  )
//{
//	static UFunction* pDoProne = 0;
//	APlayerController_execDoProne_Parms parms;
//
//	if ( !pDoProne )
//		pDoProne = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DoProne" );
//
//	this->ProcessEvent ( pDoProne, &parms, NULL );
//
//}
//
//void APlayerController::DoDuck (  )
//{
//	static UFunction* pDoDuck = 0;
//	APlayerController_execDoDuck_Parms parms;
//
//	if ( !pDoDuck )
//		pDoDuck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DoDuck" );
//
//	this->ProcessEvent ( pDoDuck, &parms, NULL );
//
//}
//
//void APlayerController::execJump ( float f )
//{
//	static UFunction* pJump = 0;
//	APlayerController_execJump_Parms parms;
//
//	if ( !pJump )
//		pJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Jump" );
//
//	parms.f = f;
//	this->ProcessEvent ( pJump, &parms, NULL );
//
//}
//
//void APlayerController::Typing ( bool bTyping )
//{
//	static UFunction* pTyping = 0;
//	APlayerController_execTyping_Parms parms;
//
//	if ( !pTyping )
//		pTyping = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Typing" );
//
//	parms.bTyping = bTyping;
//	this->ProcessEvent ( pTyping, &parms, NULL );
//
//}
//
//void APlayerController::damageAttitudeTo ( class APawn* Other, float Damage )
//{
//	static UFunction* pdamageAttitudeTo = 0;
//	APlayerController_execdamageAttitudeTo_Parms parms;
//
//	if ( !pdamageAttitudeTo )
//		pdamageAttitudeTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.damageAttitudeTo" );
//
//	parms.Other = Other;
//	parms.Damage = Damage;
//	this->ProcessEvent ( pdamageAttitudeTo, &parms, NULL );
//
//}
//
//void APlayerController::eventShakeViewEvent ( struct FVector shRotMag, struct FVector shRotRate, float shRotTime, struct FVector shOffsetMag, struct FVector shOffsetRate, float shOffsetTime )
//{
//	static UFunction* pShakeViewEvent = 0;
//	APlayerController_eventShakeViewEvent_Parms parms;
//
//	if ( !pShakeViewEvent )
//		pShakeViewEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ShakeViewEvent" );
//
//	parms.shRotMag = shRotMag;
//	parms.shRotRate = shRotRate;
//	parms.shRotTime = shRotTime;
//	parms.shOffsetMag = shOffsetMag;
//	parms.shOffsetRate = shOffsetRate;
//	parms.shOffsetTime = shOffsetTime;
//	this->ProcessEvent ( pShakeViewEvent, &parms, NULL );
//
//}
//
//void APlayerController::eventSetAmbientShake ( float FalloffStartTime, float FalloffTime, struct FVector OffsetMag, float OffsetFreq, struct FRotator RotMag, float RotFreq )
//{
//	static UFunction* pSetAmbientShake = 0;
//	APlayerController_eventSetAmbientShake_Parms parms;
//
//	if ( !pSetAmbientShake )
//		pSetAmbientShake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetAmbientShake" );
//
//	parms.FalloffStartTime = FalloffStartTime;
//	parms.FalloffTime = FalloffTime;
//	parms.OffsetMag = OffsetMag;
//	parms.OffsetFreq = OffsetFreq;
//	parms.RotMag = RotMag;
//	parms.RotFreq = RotFreq;
//	this->ProcessEvent ( pSetAmbientShake, &parms, NULL );
//
//}
//
//void APlayerController::StopViewShaking (  )
//{
//	static UFunction* pStopViewShaking = 0;
//	APlayerController_execStopViewShaking_Parms parms;
//
//	if ( !pStopViewShaking )
//		pStopViewShaking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.StopViewShaking" );
//
//	this->ProcessEvent ( pStopViewShaking, &parms, NULL );
//
//}
//
//void APlayerController::wShakeView ( int iPitch, int iYaw, float fSpeed, float fDecel, float fStayTime, float fDecay, float fDecayFastTime )
//{
//	static UFunction* pwShakeView = 0;
//	APlayerController_execwShakeView_Parms parms;
//
//	if ( !pwShakeView )
//		pwShakeView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.wShakeView" );
//
//	parms.iPitch = iPitch;
//	parms.iYaw = iYaw;
//	parms.fSpeed = fSpeed;
//	parms.fDecel = fDecel;
//	parms.fStayTime = fStayTime;
//	parms.fDecay = fDecay;
//	parms.fDecayFastTime = fDecayFastTime;
//	this->ProcessEvent ( pwShakeView, &parms, NULL );
//
//}
//
//void APlayerController::wShockView ( float fForce )
//{
//	static UFunction* pwShockView = 0;
//	APlayerController_execwShockView_Parms parms;
//
//	if ( !pwShockView )
//		pwShockView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.wShockView" );
//
//	parms.fForce = fForce;
//	this->ProcessEvent ( pwShockView, &parms, NULL );
//
//}
//
//void APlayerController::wBreathView ( struct FRotator rBreath )
//{
//	static UFunction* pwBreathView = 0;
//	APlayerController_execwBreathView_Parms parms;
//
//	if ( !pwBreathView )
//		pwBreathView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.wBreathView" );
//
//	parms.rBreath = rBreath;
//	this->ProcessEvent ( pwBreathView, &parms, NULL );
//
//}
//
//void APlayerController::ShakeView ( struct FVector shRotMag, struct FVector shRotRate, float shRotTime, struct FVector shOffsetMag, struct FVector shOffsetRate, float shOffsetTime )
//{
//	static UFunction* pShakeView = 0;
//	APlayerController_execShakeView_Parms parms;
//
//	if ( !pShakeView )
//		pShakeView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ShakeView" );
//
//	parms.shRotMag = shRotMag;
//	parms.shRotRate = shRotRate;
//	parms.shRotTime = shRotTime;
//	parms.shOffsetMag = shOffsetMag;
//	parms.shOffsetRate = shOffsetRate;
//	parms.shOffsetTime = shOffsetTime;
//	this->ProcessEvent ( pShakeView, &parms, NULL );
//
//}
//
//void APlayerController::ClientDamageShake ( int Damage )
//{
//	static UFunction* pClientDamageShake = 0;
//	APlayerController_execClientDamageShake_Parms parms;
//
//	if ( !pClientDamageShake )
//		pClientDamageShake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientDamageShake" );
//
//	parms.Damage = Damage;
//	this->ProcessEvent ( pClientDamageShake, &parms, NULL );
//
//}
//
//void APlayerController::CientSetHitSprintDelay (  )
//{
//	static UFunction* pCientSetHitSprintDelay = 0;
//	APlayerController_execCientSetHitSprintDelay_Parms parms;
//
//	if ( !pCientSetHitSprintDelay )
//		pCientSetHitSprintDelay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CientSetHitSprintDelay" );
//
//	this->ProcessEvent ( pCientSetHitSprintDelay, &parms, NULL );
//
//}
//
//void APlayerController::DamageShake ( int Damage )
//{
//	static UFunction* pDamageShake = 0;
//	APlayerController_execDamageShake_Parms parms;
//
//	if ( !pDamageShake )
//		pDamageShake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DamageShake" );
//
//	parms.Damage = Damage;
//	this->ProcessEvent ( pDamageShake, &parms, NULL );
//
//}
//
//void APlayerController::ClientAdjustGlow ( float Scale, struct FVector fog )
//{
//	static UFunction* pClientAdjustGlow = 0;
//	APlayerController_execClientAdjustGlow_Parms parms;
//
//	if ( !pClientAdjustGlow )
//		pClientAdjustGlow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientAdjustGlow" );
//
//	parms.Scale = Scale;
//	parms.fog = fog;
//	this->ProcessEvent ( pClientAdjustGlow, &parms, NULL );
//
//}
//
//void APlayerController::ClientFlash ( float Scale, struct FVector fog )
//{
//	static UFunction* pClientFlash = 0;
//	APlayerController_execClientFlash_Parms parms;
//
//	if ( !pClientFlash )
//		pClientFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientFlash" );
//
//	parms.Scale = Scale;
//	parms.fog = fog;
//	this->ProcessEvent ( pClientFlash, &parms, NULL );
//
//}
//
//void APlayerController::execSetFlashScaling ( float f )
//{
//	static UFunction* pSetFlashScaling = 0;
//	APlayerController_execSetFlashScaling_Parms parms;
//
//	if ( !pSetFlashScaling )
//		pSetFlashScaling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetFlashScaling" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetFlashScaling, &parms, NULL );
//
//}
//
//void APlayerController::SetFOVAngle ( float NewFOV )
//{
//	static UFunction* pSetFOVAngle = 0;
//	APlayerController_execSetFOVAngle_Parms parms;
//
//	if ( !pSetFOVAngle )
//		pSetFOVAngle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetFOVAngle" );
//
//	parms.NewFOV = NewFOV;
//	this->ProcessEvent ( pSetFOVAngle, &parms, NULL );
//
//}
//
//void APlayerController::ServerRestartGame (  )
//{
//	static UFunction* pServerRestartGame = 0;
//	APlayerController_execServerRestartGame_Parms parms;
//
//	if ( !pServerRestartGame )
//		pServerRestartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerRestartGame" );
//
//	this->ProcessEvent ( pServerRestartGame, &parms, NULL );
//
//}
//
//void APlayerController::CallServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbPendingJumpStatus, bool NewbJumpStatus, bool NewbDoubleJump, unsigned char DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel )
//{
//	static UFunction* pCallServerMove = 0;
//	APlayerController_execCallServerMove_Parms parms;
//
//	if ( !pCallServerMove )
//		pCallServerMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CallServerMove" );
//
//	parms.TimeStamp = TimeStamp;
//	parms.InAccel = InAccel;
//	parms.ClientLoc = ClientLoc;
//	parms.NewbRun = NewbRun;
//	parms.NewbDuck = NewbDuck;
//	parms.NewbProne = NewbProne;
//	parms.NewbPendingJumpStatus = NewbPendingJumpStatus;
//	parms.NewbJumpStatus = NewbJumpStatus;
//	parms.NewbDoubleJump = NewbDoubleJump;
//	parms.DoubleClickMove = DoubleClickMove;
//	parms.ClientRoll = ClientRoll;
//	parms.View = View;
//	parms.OldTimeDelta = OldTimeDelta;
//	parms.OldAccel = OldAccel;
//	this->ProcessEvent ( pCallServerMove, &parms, NULL );
//
//}
//
//void APlayerController::ReplicateMove ( float DeltaTime, struct FVector NewAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot )
//{
//	static UFunction* pReplicateMove = 0;
//	APlayerController_execReplicateMove_Parms parms;
//
//	if ( !pReplicateMove )
//		pReplicateMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ReplicateMove" );
//
//	parms.DeltaTime = DeltaTime;
//	parms.NewAccel = NewAccel;
//	parms.DoubleClickMove = DoubleClickMove;
//	parms.DeltaRot = DeltaRot;
//	this->ProcessEvent ( pReplicateMove, &parms, NULL );
//
//}
//
//int APlayerController::CompressAccel ( int C )
//{
//	static UFunction* pCompressAccel = 0;
//	APlayerController_execCompressAccel_Parms parms;
//
//	if ( !pCompressAccel )
//		pCompressAccel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CompressAccel" );
//
//	parms.C = C;
//	this->ProcessEvent ( pCompressAccel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class ASavedMove* APlayerController::GetFreeMove (  )
//{
//	static UFunction* pGetFreeMove = 0;
//	APlayerController_execGetFreeMove_Parms parms;
//
//	if ( !pGetFreeMove )
//		pGetFreeMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetFreeMove" );
//
//	this->ProcessEvent ( pGetFreeMove, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::ClientUpdatePosition (  )
//{
//	static UFunction* pClientUpdatePosition = 0;
//	APlayerController_execClientUpdatePosition_Parms parms;
//
//	if ( !pClientUpdatePosition )
//		pClientUpdatePosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientUpdatePosition" );
//
//	this->ProcessEvent ( pClientUpdatePosition, &parms, NULL );
//
//}
//
//void APlayerController::ServerUpdatePing ( int NewPing )
//{
//	static UFunction* pServerUpdatePing = 0;
//	APlayerController_execServerUpdatePing_Parms parms;
//
//	if ( !pServerUpdatePing )
//		pServerUpdatePing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerUpdatePing" );
//
//	parms.NewPing = NewPing;
//	this->ProcessEvent ( pServerUpdatePing, &parms, NULL );
//
//}
//
//void APlayerController::LongClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ )
//{
//	static UFunction* pLongClientAdjustPosition = 0;
//	APlayerController_execLongClientAdjustPosition_Parms parms;
//
//	if ( !pLongClientAdjustPosition )
//		pLongClientAdjustPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.LongClientAdjustPosition" );
//
//	parms.TimeStamp = TimeStamp;
//	parms.NewState = NewState;
//	parms.newPhysics = newPhysics;
//	parms.NewLocX = NewLocX;
//	parms.NewLocY = NewLocY;
//	parms.NewLocZ = NewLocZ;
//	parms.NewVelX = NewVelX;
//	parms.NewVelY = NewVelY;
//	parms.NewVelZ = NewVelZ;
//	parms.NewBase = NewBase;
//	parms.NewFloorX = NewFloorX;
//	parms.NewFloorY = NewFloorY;
//	parms.NewFloorZ = NewFloorZ;
//	this->ProcessEvent ( pLongClientAdjustPosition, &parms, NULL );
//
//}
//
//void APlayerController::ClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase )
//{
//	static UFunction* pClientAdjustPosition = 0;
//	APlayerController_execClientAdjustPosition_Parms parms;
//
//	if ( !pClientAdjustPosition )
//		pClientAdjustPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientAdjustPosition" );
//
//	parms.TimeStamp = TimeStamp;
//	parms.NewState = NewState;
//	parms.newPhysics = newPhysics;
//	parms.NewLocX = NewLocX;
//	parms.NewLocY = NewLocY;
//	parms.NewLocZ = NewLocZ;
//	parms.NewVelX = NewVelX;
//	parms.NewVelY = NewVelY;
//	parms.NewVelZ = NewVelZ;
//	parms.NewBase = NewBase;
//	this->ProcessEvent ( pClientAdjustPosition, &parms, NULL );
//
//}
//
//void APlayerController::ShortClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase )
//{
//	static UFunction* pShortClientAdjustPosition = 0;
//	APlayerController_execShortClientAdjustPosition_Parms parms;
//
//	if ( !pShortClientAdjustPosition )
//		pShortClientAdjustPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ShortClientAdjustPosition" );
//
//	parms.TimeStamp = TimeStamp;
//	parms.NewState = NewState;
//	parms.newPhysics = newPhysics;
//	parms.NewLocX = NewLocX;
//	parms.NewLocY = NewLocY;
//	parms.NewLocZ = NewLocZ;
//	parms.NewBase = NewBase;
//	this->ProcessEvent ( pShortClientAdjustPosition, &parms, NULL );
//
//}
//
//void APlayerController::VeryShortClientAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase )
//{
//	static UFunction* pVeryShortClientAdjustPosition = 0;
//	APlayerController_execVeryShortClientAdjustPosition_Parms parms;
//
//	if ( !pVeryShortClientAdjustPosition )
//		pVeryShortClientAdjustPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.VeryShortClientAdjustPosition" );
//
//	parms.TimeStamp = TimeStamp;
//	parms.NewLocX = NewLocX;
//	parms.NewLocY = NewLocY;
//	parms.NewLocZ = NewLocZ;
//	parms.NewBase = NewBase;
//	this->ProcessEvent ( pVeryShortClientAdjustPosition, &parms, NULL );
//
//}
//
//void APlayerController::eventMoveAutonomous ( float DeltaTime, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbPressedJump, bool NewbDoubleJump, unsigned char DoubleClickMove, struct FVector NewAccel, struct FRotator DeltaRot )
//{
//	static UFunction* pMoveAutonomous = 0;
//	APlayerController_eventMoveAutonomous_Parms parms;
//
//	if ( !pMoveAutonomous )
//		pMoveAutonomous = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.MoveAutonomous" );
//
//	parms.DeltaTime = DeltaTime;
//	parms.NewbRun = NewbRun;
//	parms.NewbDuck = NewbDuck;
//	parms.NewbProne = NewbProne;
//	parms.NewbPressedJump = NewbPressedJump;
//	parms.NewbDoubleJump = NewbDoubleJump;
//	parms.DoubleClickMove = DoubleClickMove;
//	parms.NewAccel = NewAccel;
//	parms.DeltaRot = DeltaRot;
//	this->ProcessEvent ( pMoveAutonomous, &parms, NULL );
//
//}
//
//void APlayerController::ProcessMove ( float DeltaTime, struct FVector NewAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot )
//{
//	static UFunction* pProcessMove = 0;
//	APlayerController_execProcessMove_Parms parms;
//
//	if ( !pProcessMove )
//		pProcessMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ProcessMove" );
//
//	parms.DeltaTime = DeltaTime;
//	parms.NewAccel = NewAccel;
//	parms.DoubleClickMove = DoubleClickMove;
//	parms.DeltaRot = DeltaRot;
//	this->ProcessEvent ( pProcessMove, &parms, NULL );
//
//}
//
//void APlayerController::ProcessDrive ( float InForward, float InStrafe, float InUp, bool InJump )
//{
//	static UFunction* pProcessDrive = 0;
//	APlayerController_execProcessDrive_Parms parms;
//
//	if ( !pProcessDrive )
//		pProcessDrive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ProcessDrive" );
//
//	parms.InForward = InForward;
//	parms.InStrafe = InStrafe;
//	parms.InUp = InUp;
//	parms.InJump = InJump;
//	this->ProcessEvent ( pProcessDrive, &parms, NULL );
//
//}
//
//void APlayerController::ServerDrive ( float InForward, float InStrafe, float aUp, bool InJump, int View )
//{
//	static UFunction* pServerDrive = 0;
//	APlayerController_execServerDrive_Parms parms;
//
//	if ( !pServerDrive )
//		pServerDrive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerDrive" );
//
//	parms.InForward = InForward;
//	parms.InStrafe = InStrafe;
//	parms.aUp = aUp;
//	parms.InJump = InJump;
//	parms.View = View;
//	this->ProcessEvent ( pServerDrive, &parms, NULL );
//
//}
//
//void APlayerController::eventSendClientAdjustment (  )
//{
//	static UFunction* pSendClientAdjustment = 0;
//	APlayerController_eventSendClientAdjustment_Parms parms;
//
//	if ( !pSendClientAdjustment )
//		pSendClientAdjustment = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SendClientAdjustment" );
//
//	this->ProcessEvent ( pSendClientAdjustment, &parms, NULL );
//
//}
//
//void APlayerController::ServerMoveScript ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, bool NewbDoubleJump, unsigned char DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel )
//{
//	static UFunction* pServerMoveScript = 0;
//	APlayerController_execServerMoveScript_Parms parms;
//
//	if ( !pServerMoveScript )
//		pServerMoveScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerMoveScript" );
//
//	parms.TimeStamp = TimeStamp;
//	parms.InAccel = InAccel;
//	parms.ClientLoc = ClientLoc;
//	parms.NewbRun = NewbRun;
//	parms.NewbDuck = NewbDuck;
//	parms.NewbProne = NewbProne;
//	parms.NewbJumpStatus = NewbJumpStatus;
//	parms.NewbDoubleJump = NewbDoubleJump;
//	parms.DoubleClickMove = DoubleClickMove;
//	parms.ClientRoll = ClientRoll;
//	parms.View = View;
//	parms.OldTimeDelta = OldTimeDelta;
//	parms.OldAccel = OldAccel;
//	this->ProcessEvent ( pServerMoveScript, &parms, NULL );
//
//}
//
//void APlayerController::ServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, bool NewbDoubleJump, unsigned char DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel )
//{
//	static UFunction* pServerMove = 0;
//	APlayerController_execServerMove_Parms parms;
//
//	if ( !pServerMove )
//		pServerMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerMove" );
//
//	parms.TimeStamp = TimeStamp;
//	parms.InAccel = InAccel;
//	parms.ClientLoc = ClientLoc;
//	parms.NewbRun = NewbRun;
//	parms.NewbDuck = NewbDuck;
//	parms.NewbProne = NewbProne;
//	parms.NewbJumpStatus = NewbJumpStatus;
//	parms.NewbDoubleJump = NewbDoubleJump;
//	parms.DoubleClickMove = DoubleClickMove;
//	parms.ClientRoll = ClientRoll;
//	parms.View = View;
//	parms.OldTimeDelta = OldTimeDelta;
//	parms.OldAccel = OldAccel;
//	this->ProcessEvent ( pServerMove, &parms, NULL );
//
//}
//
//void APlayerController::ServerMoveNative ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, bool NewbDoubleJump, unsigned char DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel )
//{
//	static UFunction* pServerMoveNative = 0;
//	APlayerController_execServerMoveNative_Parms parms;
//
//	if ( !pServerMoveNative )
//		pServerMoveNative = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerMoveNative" );
//
//	parms.TimeStamp = TimeStamp;
//	parms.InAccel = InAccel;
//	parms.ClientLoc = ClientLoc;
//	parms.NewbRun = NewbRun;
//	parms.NewbDuck = NewbDuck;
//	parms.NewbProne = NewbProne;
//	parms.NewbJumpStatus = NewbJumpStatus;
//	parms.NewbDoubleJump = NewbDoubleJump;
//	parms.DoubleClickMove = DoubleClickMove;
//	parms.ClientRoll = ClientRoll;
//	parms.View = View;
//	parms.OldTimeDelta = OldTimeDelta;
//	parms.OldAccel = OldAccel;
//	this->ProcessEvent ( pServerMoveNative, &parms, NULL );
//
//}
//
//void APlayerController::DualServerMove ( float TimeStamp0, struct FVector InAccel0, unsigned char PendingCompress, unsigned char DoubleClickMove0, int View0, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel )
//{
//	static UFunction* pDualServerMove = 0;
//	APlayerController_execDualServerMove_Parms parms;
//
//	if ( !pDualServerMove )
//		pDualServerMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DualServerMove" );
//
//	parms.TimeStamp0 = TimeStamp0;
//	parms.InAccel0 = InAccel0;
//	parms.PendingCompress = PendingCompress;
//	parms.DoubleClickMove0 = DoubleClickMove0;
//	parms.View0 = View0;
//	parms.TimeStamp = TimeStamp;
//	parms.InAccel = InAccel;
//	parms.ClientLoc = ClientLoc;
//	parms.DoubleClickMove = DoubleClickMove;
//	parms.ClientRoll = ClientRoll;
//	parms.View = View;
//	parms.OldTimeDelta = OldTimeDelta;
//	parms.OldAccel = OldAccel;
//	this->ProcessEvent ( pDualServerMove, &parms, NULL );
//
//}
//
//void APlayerController::ShortServerMove ( float TimeStamp, struct FVector ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, unsigned char ClientRoll, int View )
//{
//	static UFunction* pShortServerMove = 0;
//	APlayerController_execShortServerMove_Parms parms;
//
//	if ( !pShortServerMove )
//		pShortServerMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ShortServerMove" );
//
//	parms.TimeStamp = TimeStamp;
//	parms.ClientLoc = ClientLoc;
//	parms.NewbRun = NewbRun;
//	parms.NewbDuck = NewbDuck;
//	parms.NewbProne = NewbProne;
//	parms.NewbJumpStatus = NewbJumpStatus;
//	parms.ClientRoll = ClientRoll;
//	parms.View = View;
//	this->ProcessEvent ( pShortServerMove, &parms, NULL );
//
//}
//
//void APlayerController::DualTurretServerMove ( float TimeStamp0, bool NewbDuck0, bool NewbProne0, unsigned char ClientRoll0, int View0, float TimeStamp, struct FVector ClientLoc, bool NewbDuck, bool NewbProne, unsigned char ClientRoll, int View )
//{
//	static UFunction* pDualTurretServerMove = 0;
//	APlayerController_execDualTurretServerMove_Parms parms;
//
//	if ( !pDualTurretServerMove )
//		pDualTurretServerMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DualTurretServerMove" );
//
//	parms.TimeStamp0 = TimeStamp0;
//	parms.NewbDuck0 = NewbDuck0;
//	parms.NewbProne0 = NewbProne0;
//	parms.ClientRoll0 = ClientRoll0;
//	parms.View0 = View0;
//	parms.TimeStamp = TimeStamp;
//	parms.ClientLoc = ClientLoc;
//	parms.NewbDuck = NewbDuck;
//	parms.NewbProne = NewbProne;
//	parms.ClientRoll = ClientRoll;
//	parms.View = View;
//	this->ProcessEvent ( pDualTurretServerMove, &parms, NULL );
//
//}
//
//void APlayerController::TurretServerMove ( float TimeStamp, struct FVector ClientLoc, bool NewbDuck, bool NewbProne, unsigned char ClientRoll, int View )
//{
//	static UFunction* pTurretServerMove = 0;
//	APlayerController_execTurretServerMove_Parms parms;
//
//	if ( !pTurretServerMove )
//		pTurretServerMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.TurretServerMove" );
//
//	parms.TimeStamp = TimeStamp;
//	parms.ClientLoc = ClientLoc;
//	parms.NewbDuck = NewbDuck;
//	parms.NewbProne = NewbProne;
//	parms.ClientRoll = ClientRoll;
//	parms.View = View;
//	this->ProcessEvent ( pTurretServerMove, &parms, NULL );
//
//}
//
//void APlayerController::DualSpaceFighterServerMove ( float TimeStamp0, struct FVector InAccel0, bool NewbDuck0, bool NewbProne0, int ViewPitch0, int ViewYaw0, int ViewRoll0, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbDuck, bool NewbProne, int ViewPitch, int ViewYaw, int ViewRoll )
//{
//	static UFunction* pDualSpaceFighterServerMove = 0;
//	APlayerController_execDualSpaceFighterServerMove_Parms parms;
//
//	if ( !pDualSpaceFighterServerMove )
//		pDualSpaceFighterServerMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DualSpaceFighterServerMove" );
//
//	parms.TimeStamp0 = TimeStamp0;
//	parms.InAccel0 = InAccel0;
//	parms.NewbDuck0 = NewbDuck0;
//	parms.NewbProne0 = NewbProne0;
//	parms.ViewPitch0 = ViewPitch0;
//	parms.ViewYaw0 = ViewYaw0;
//	parms.ViewRoll0 = ViewRoll0;
//	parms.TimeStamp = TimeStamp;
//	parms.InAccel = InAccel;
//	parms.ClientLoc = ClientLoc;
//	parms.NewbDuck = NewbDuck;
//	parms.NewbProne = NewbProne;
//	parms.ViewPitch = ViewPitch;
//	parms.ViewYaw = ViewYaw;
//	parms.ViewRoll = ViewRoll;
//	this->ProcessEvent ( pDualSpaceFighterServerMove, &parms, NULL );
//
//}
//
//void APlayerController::SpaceFighterServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbDuck, bool NewbProne, int ViewPitch, int ViewYaw, int ViewRoll )
//{
//	static UFunction* pSpaceFighterServerMove = 0;
//	APlayerController_execSpaceFighterServerMove_Parms parms;
//
//	if ( !pSpaceFighterServerMove )
//		pSpaceFighterServerMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SpaceFighterServerMove" );
//
//	parms.TimeStamp = TimeStamp;
//	parms.InAccel = InAccel;
//	parms.ClientLoc = ClientLoc;
//	parms.NewbDuck = NewbDuck;
//	parms.NewbProne = NewbProne;
//	parms.ViewPitch = ViewPitch;
//	parms.ViewYaw = ViewYaw;
//	parms.ViewRoll = ViewRoll;
//	this->ProcessEvent ( pSpaceFighterServerMove, &parms, NULL );
//
//}
//
//void APlayerController::DualRocketServerMove ( float TimeStamp0, struct FVector InAccel0, bool NewbDuck0, bool NewbProne0, unsigned char ClientRoll0, int View0, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbDuck, bool NewbProne, unsigned char ClientRoll, int View )
//{
//	static UFunction* pDualRocketServerMove = 0;
//	APlayerController_execDualRocketServerMove_Parms parms;
//
//	if ( !pDualRocketServerMove )
//		pDualRocketServerMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DualRocketServerMove" );
//
//	parms.TimeStamp0 = TimeStamp0;
//	parms.InAccel0 = InAccel0;
//	parms.NewbDuck0 = NewbDuck0;
//	parms.NewbProne0 = NewbProne0;
//	parms.ClientRoll0 = ClientRoll0;
//	parms.View0 = View0;
//	parms.TimeStamp = TimeStamp;
//	parms.InAccel = InAccel;
//	parms.ClientLoc = ClientLoc;
//	parms.NewbDuck = NewbDuck;
//	parms.NewbProne = NewbProne;
//	parms.ClientRoll = ClientRoll;
//	parms.View = View;
//	this->ProcessEvent ( pDualRocketServerMove, &parms, NULL );
//
//}
//
//void APlayerController::RocketServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbDuck, bool NewbProne, unsigned char ClientRoll, int View )
//{
//	static UFunction* pRocketServerMove = 0;
//	APlayerController_execRocketServerMove_Parms parms;
//
//	if ( !pRocketServerMove )
//		pRocketServerMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.RocketServerMove" );
//
//	parms.TimeStamp = TimeStamp;
//	parms.InAccel = InAccel;
//	parms.ClientLoc = ClientLoc;
//	parms.NewbDuck = NewbDuck;
//	parms.NewbProne = NewbProne;
//	parms.ClientRoll = ClientRoll;
//	parms.View = View;
//	this->ProcessEvent ( pRocketServerMove, &parms, NULL );
//
//}
//
//void APlayerController::ForceDeathUpdate (  )
//{
//	static UFunction* pForceDeathUpdate = 0;
//	APlayerController_execForceDeathUpdate_Parms parms;
//
//	if ( !pForceDeathUpdate )
//		pForceDeathUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ForceDeathUpdate" );
//
//	this->ProcessEvent ( pForceDeathUpdate, &parms, NULL );
//
//}
//
//void APlayerController::ClientVoiceMessage ( class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char MessageID )
//{
//	static UFunction* pClientVoiceMessage = 0;
//	APlayerController_execClientVoiceMessage_Parms parms;
//
//	if ( !pClientVoiceMessage )
//		pClientVoiceMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientVoiceMessage" );
//
//	parms.Sender = Sender;
//	parms.Recipient = Recipient;
//	parms.MessageType = MessageType;
//	parms.MessageID = MessageID;
//	this->ProcessEvent ( pClientVoiceMessage, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetBehindView ( bool B )
//{
//	static UFunction* pClientSetBehindView = 0;
//	APlayerController_execClientSetBehindView_Parms parms;
//
//	if ( !pClientSetBehindView )
//		pClientSetBehindView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetBehindView" );
//
//	parms.B = B;
//	this->ProcessEvent ( pClientSetBehindView, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetFixedCamera ( bool B )
//{
//	static UFunction* pClientSetFixedCamera = 0;
//	APlayerController_execClientSetFixedCamera_Parms parms;
//
//	if ( !pClientSetFixedCamera )
//		pClientSetFixedCamera = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetFixedCamera" );
//
//	parms.B = B;
//	this->ProcessEvent ( pClientSetFixedCamera, &parms, NULL );
//
//}
//
//void APlayerController::eventPreClientTravel (  )
//{
//	static UFunction* pPreClientTravel = 0;
//	APlayerController_eventPreClientTravel_Parms parms;
//
//	if ( !pPreClientTravel )
//		pPreClientTravel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PreClientTravel" );
//
//	this->ProcessEvent ( pPreClientTravel, &parms, NULL );
//
//}
//
//void APlayerController::execShowGun (  )
//{
//	static UFunction* pShowGun = 0;
//	APlayerController_execShowGun_Parms parms;
//
//	if ( !pShowGun )
//		pShowGun = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ShowGun" );
//
//	this->ProcessEvent ( pShowGun, &parms, NULL );
//
//}
//
//bool APlayerController::IsDead (  )
//{
//	static UFunction* pIsDead = 0;
//	APlayerController_execIsDead_Parms parms;
//
//	if ( !pIsDead )
//		pIsDead = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.IsDead" );
//
//	this->ProcessEvent ( pIsDead, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::execSetWeaponHand ( struct FString S )
//{
//	static UFunction* pSetWeaponHand = 0;
//	APlayerController_execSetWeaponHand_Parms parms;
//
//	if ( !pSetWeaponHand )
//		pSetWeaponHand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetWeaponHand" );
//
//	parms.S = S;
//	this->ProcessEvent ( pSetWeaponHand, &parms, NULL );
//
//}
//
//void APlayerController::SetHand ( int IntValue )
//{
//	static UFunction* pSetHand = 0;
//	APlayerController_execSetHand_Parms parms;
//
//	if ( !pSetHand )
//		pSetHand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetHand" );
//
//	parms.IntValue = IntValue;
//	this->ProcessEvent ( pSetHand, &parms, NULL );
//
//}
//
//void APlayerController::ServerSetHandedness ( float Hand )
//{
//	static UFunction* pServerSetHandedness = 0;
//	APlayerController_execServerSetHandedness_Parms parms;
//
//	if ( !pServerSetHandedness )
//		pServerSetHandedness = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSetHandedness" );
//
//	parms.Hand = Hand;
//	this->ProcessEvent ( pServerSetHandedness, &parms, NULL );
//
//}
//
//void APlayerController::execSetAutoTaunt ( bool Value )
//{
//	static UFunction* pSetAutoTaunt = 0;
//	APlayerController_execSetAutoTaunt_Parms parms;
//
//	if ( !pSetAutoTaunt )
//		pSetAutoTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetAutoTaunt" );
//
//	parms.Value = Value;
//	this->ProcessEvent ( pSetAutoTaunt, &parms, NULL );
//
//}
//
//void APlayerController::ServerSetAutoTaunt ( bool Value )
//{
//	static UFunction* pServerSetAutoTaunt = 0;
//	APlayerController_execServerSetAutoTaunt_Parms parms;
//
//	if ( !pServerSetAutoTaunt )
//		pServerSetAutoTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSetAutoTaunt" );
//
//	parms.Value = Value;
//	this->ProcessEvent ( pServerSetAutoTaunt, &parms, NULL );
//
//}
//
//void APlayerController::ServerTeamSay ( struct FString Msg, struct FName Type )
//{
//	static UFunction* pServerTeamSay = 0;
//	APlayerController_execServerTeamSay_Parms parms;
//
//	if ( !pServerTeamSay )
//		pServerTeamSay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerTeamSay" );
//
//	parms.Msg = Msg;
//	parms.Type = Type;
//	this->ProcessEvent ( pServerTeamSay, &parms, NULL );
//
//}
//
//void APlayerController::execTeamSay ( struct FString Msg, struct FName Type )
//{
//	static UFunction* pTeamSay = 0;
//	APlayerController_execTeamSay_Parms parms;
//
//	if ( !pTeamSay )
//		pTeamSay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.TeamSay" );
//
//	parms.Msg = Msg;
//	parms.Type = Type;
//	this->ProcessEvent ( pTeamSay, &parms, NULL );
//
//}
//
//void APlayerController::PopMessage ( struct FString Msg, bool sameTeamOnly )
//{
//	static UFunction* pPopMessage = 0;
//	APlayerController_execPopMessage_Parms parms;
//
//	if ( !pPopMessage )
//		pPopMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PopMessage" );
//
//	parms.Msg = Msg;
//	parms.sameTeamOnly = sameTeamOnly;
//	this->ProcessEvent ( pPopMessage, &parms, NULL );
//
//}
//
//void APlayerController::ClientPopMessage ( struct FString UserName, struct FString Msg )
//{
//	static UFunction* pClientPopMessage = 0;
//	APlayerController_execClientPopMessage_Parms parms;
//
//	if ( !pClientPopMessage )
//		pClientPopMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientPopMessage" );
//
//	parms.UserName = UserName;
//	parms.Msg = Msg;
//	this->ProcessEvent ( pClientPopMessage, &parms, NULL );
//
//}
//
//void APlayerController::ServerPopMessage ( struct FString Msg, bool sameTeamOnly )
//{
//	static UFunction* pServerPopMessage = 0;
//	APlayerController_execServerPopMessage_Parms parms;
//
//	if ( !pServerPopMessage )
//		pServerPopMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerPopMessage" );
//
//	parms.Msg = Msg;
//	parms.sameTeamOnly = sameTeamOnly;
//	this->ProcessEvent ( pServerPopMessage, &parms, NULL );
//
//}
//
//void APlayerController::ServerSay ( struct FString Msg, struct FName Type )
//{
//	static UFunction* pServerSay = 0;
//	APlayerController_execServerSay_Parms parms;
//
//	if ( !pServerSay )
//		pServerSay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSay" );
//
//	parms.Msg = Msg;
//	parms.Type = Type;
//	this->ProcessEvent ( pServerSay, &parms, NULL );
//
//}
//
//void APlayerController::execSay ( struct FString Msg, struct FName Type )
//{
//	static UFunction* pSay = 0;
//	APlayerController_execSay_Parms parms;
//
//	if ( !pSay )
//		pSay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Say" );
//
//	parms.Msg = Msg;
//	parms.Type = Type;
//	this->ProcessEvent ( pSay, &parms, NULL );
//
//}
//
//bool APlayerController::AllowTextMessage ( struct FString Msg )
//{
//	static UFunction* pAllowTextMessage = 0;
//	APlayerController_execAllowTextMessage_Parms parms;
//
//	if ( !pAllowTextMessage )
//		pAllowTextMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AllowTextMessage" );
//
//	parms.Msg = Msg;
//	this->ProcessEvent ( pAllowTextMessage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::execForceReload (  )
//{
//	static UFunction* pForceReload = 0;
//	APlayerController_execForceReload_Parms parms;
//
//	if ( !pForceReload )
//		pForceReload = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ForceReload" );
//
//	this->ProcessEvent ( pForceReload, &parms, NULL );
//
//}
//
//void APlayerController::execSetMouseAccel ( float f )
//{
//	static UFunction* pSetMouseAccel = 0;
//	APlayerController_execSetMouseAccel_Parms parms;
//
//	if ( !pSetMouseAccel )
//		pSetMouseAccel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetMouseAccel" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetMouseAccel, &parms, NULL );
//
//}
//
//void APlayerController::execSetMouseSmoothing ( int Mode )
//{
//	static UFunction* pSetMouseSmoothing = 0;
//	APlayerController_execSetMouseSmoothing_Parms parms;
//
//	if ( !pSetMouseSmoothing )
//		pSetMouseSmoothing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetMouseSmoothing" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pSetMouseSmoothing, &parms, NULL );
//
//}
//
//float APlayerController::GetSensitivityAim (  )
//{
//	static UFunction* pGetSensitivityAim = 0;
//	APlayerController_execGetSensitivityAim_Parms parms;
//
//	if ( !pGetSensitivityAim )
//		pGetSensitivityAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetSensitivityAim" );
//
//	this->ProcessEvent ( pGetSensitivityAim, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float APlayerController::GetSensitivity (  )
//{
//	static UFunction* pGetSensitivity = 0;
//	APlayerController_execGetSensitivity_Parms parms;
//
//	if ( !pGetSensitivity )
//		pGetSensitivity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetSensitivity" );
//
//	this->ProcessEvent ( pGetSensitivity, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float APlayerController::GetSensitivityActive (  )
//{
//	static UFunction* pGetSensitivityActive = 0;
//	APlayerController_execGetSensitivityActive_Parms parms;
//
//	if ( !pGetSensitivityActive )
//		pGetSensitivityActive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetSensitivityActive" );
//
//	this->ProcessEvent ( pGetSensitivityActive, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::execSetSensitivity ( float f, bool bZooming )
//{
//	static UFunction* pSetSensitivity = 0;
//	APlayerController_execSetSensitivity_Parms parms;
//
//	if ( !pSetSensitivity )
//		pSetSensitivity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetSensitivity" );
//
//	parms.f = f;
//	parms.bZooming = bZooming;
//	this->ProcessEvent ( pSetSensitivity, &parms, NULL );
//
//}
//
//void APlayerController::ServerMutate ( struct FString MutateString )
//{
//	static UFunction* pServerMutate = 0;
//	APlayerController_execServerMutate_Parms parms;
//
//	if ( !pServerMutate )
//		pServerMutate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerMutate" );
//
//	parms.MutateString = MutateString;
//	this->ProcessEvent ( pServerMutate, &parms, NULL );
//
//}
//
//void APlayerController::execMutate ( struct FString MutateString )
//{
//	static UFunction* pMutate = 0;
//	APlayerController_execMutate_Parms parms;
//
//	if ( !pMutate )
//		pMutate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Mutate" );
//
//	parms.MutateString = MutateString;
//	this->ProcessEvent ( pMutate, &parms, NULL );
//
//}
//
//void APlayerController::execFOV ( float f )
//{
//	static UFunction* pFOV = 0;
//	APlayerController_execFOV_Parms parms;
//
//	if ( !pFOV )
//		pFOV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.FOV" );
//
//	parms.f = f;
//	this->ProcessEvent ( pFOV, &parms, NULL );
//
//}
//
//void APlayerController::execSetAimDiff ( struct FString S )
//{
//	static UFunction* pSetAimDiff = 0;
//	APlayerController_execSetAimDiff_Parms parms;
//
//	if ( !pSetAimDiff )
//		pSetAimDiff = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetAimDiff" );
//
//	parms.S = S;
//	this->ProcessEvent ( pSetAimDiff, &parms, NULL );
//
//}
//
//void APlayerController::ClientResetAim (  )
//{
//	static UFunction* pClientResetAim = 0;
//	APlayerController_execClientResetAim_Parms parms;
//
//	if ( !pClientResetAim )
//		pClientResetAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientResetAim" );
//
//	this->ProcessEvent ( pClientResetAim, &parms, NULL );
//
//}
//
//void APlayerController::ResetFOV (  )
//{
//	static UFunction* pResetFOV = 0;
//	APlayerController_execResetFOV_Parms parms;
//
//	if ( !pResetFOV )
//		pResetFOV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ResetFOV" );
//
//	this->ProcessEvent ( pResetFOV, &parms, NULL );
//
//}
//
//void APlayerController::SetFOV ( float NewFOV )
//{
//	static UFunction* pSetFOV = 0;
//	APlayerController_execSetFOV_Parms parms;
//
//	if ( !pSetFOV )
//		pSetFOV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetFOV" );
//
//	parms.NewFOV = NewFOV;
//	this->ProcessEvent ( pSetFOV, &parms, NULL );
//
//}
//
//void APlayerController::FixFOV (  )
//{
//	static UFunction* pFixFOV = 0;
//	APlayerController_execFixFOV_Parms parms;
//
//	if ( !pFixFOV )
//		pFixFOV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.FixFOV" );
//
//	this->ProcessEvent ( pFixFOV, &parms, NULL );
//
//}
//
//void APlayerController::EndZoom (  )
//{
//	static UFunction* pEndZoom = 0;
//	APlayerController_execEndZoom_Parms parms;
//
//	if ( !pEndZoom )
//		pEndZoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.EndZoom" );
//
//	this->ProcessEvent ( pEndZoom, &parms, NULL );
//
//}
//
//void APlayerController::ZoomFOV ( float fFOV, bool bInstant )
//{
//	static UFunction* pZoomFOV = 0;
//	APlayerController_execZoomFOV_Parms parms;
//
//	if ( !pZoomFOV )
//		pZoomFOV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ZoomFOV" );
//
//	parms.fFOV = fFOV;
//	parms.bInstant = bInstant;
//	this->ProcessEvent ( pZoomFOV, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetInitialMusic ( struct FString NewSong, unsigned char NewTransition )
//{
//	static UFunction* pClientSetInitialMusic = 0;
//	APlayerController_execClientSetInitialMusic_Parms parms;
//
//	if ( !pClientSetInitialMusic )
//		pClientSetInitialMusic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetInitialMusic" );
//
//	parms.NewSong = NewSong;
//	parms.NewTransition = NewTransition;
//	this->ProcessEvent ( pClientSetInitialMusic, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetMusic ( struct FString NewSong, unsigned char NewTransition )
//{
//	static UFunction* pClientSetMusic = 0;
//	APlayerController_execClientSetMusic_Parms parms;
//
//	if ( !pClientSetMusic )
//		pClientSetMusic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetMusic" );
//
//	parms.NewSong = NewSong;
//	parms.NewTransition = NewTransition;
//	this->ProcessEvent ( pClientSetMusic, &parms, NULL );
//
//}
//
//void APlayerController::eventDestroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	APlayerController_eventDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void APlayerController::ClientReliablePlaySound ( class USound* ASound, bool bVolumeControl )
//{
//	static UFunction* pClientReliablePlaySound = 0;
//	APlayerController_execClientReliablePlaySound_Parms parms;
//
//	if ( !pClientReliablePlaySound )
//		pClientReliablePlaySound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientReliablePlaySound" );
//
//	parms.ASound = ASound;
//	parms.bVolumeControl = bVolumeControl;
//	this->ProcessEvent ( pClientReliablePlaySound, &parms, NULL );
//
//}
//
//void APlayerController::ClientQueueAnnouncement ( struct FName ASoundName, unsigned char AnnouncementLevel, unsigned char Priority, unsigned char Switch )
//{
//	static UFunction* pClientQueueAnnouncement = 0;
//	APlayerController_execClientQueueAnnouncement_Parms parms;
//
//	if ( !pClientQueueAnnouncement )
//		pClientQueueAnnouncement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientQueueAnnouncement" );
//
//	parms.ASoundName = ASoundName;
//	parms.AnnouncementLevel = AnnouncementLevel;
//	parms.Priority = Priority;
//	parms.Switch = Switch;
//	this->ProcessEvent ( pClientQueueAnnouncement, &parms, NULL );
//
//}
//
//void APlayerController::ClientPlaySoundHK ( class USound* ASound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner, struct FVector SoundLocation )
//{
//	static UFunction* pClientPlaySoundHK = 0;
//	APlayerController_execClientPlaySoundHK_Parms parms;
//
//	if ( !pClientPlaySoundHK )
//		pClientPlaySoundHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientPlaySoundHK" );
//
//	parms.ASound = ASound;
//	parms.Slot = Slot;
//	parms.Volume = Volume;
//	parms.bNoOverride = bNoOverride;
//	parms.Radius = Radius;
//	parms.Pitch = Pitch;
//	parms.Attenuate = Attenuate;
//	parms.Loop = Loop;
//	parms.SellectTeam = SellectTeam;
//	parms.bExceptOwner = bExceptOwner;
//	parms.SoundLocation = SoundLocation;
//	this->ProcessEvent ( pClientPlaySoundHK, &parms, NULL );
//
//}
//
//bool APlayerController::ClientStopLoopSoundByActor ( class AActor* Target )
//{
//	static UFunction* pClientStopLoopSoundByActor = 0;
//	APlayerController_execClientStopLoopSoundByActor_Parms parms;
//
//	if ( !pClientStopLoopSoundByActor )
//		pClientStopLoopSoundByActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientStopLoopSoundByActor" );
//
//	parms.Target = Target;
//	this->ProcessEvent ( pClientStopLoopSoundByActor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerController::ClientStopAllSoundByActor ( class AActor* Target )
//{
//	static UFunction* pClientStopAllSoundByActor = 0;
//	APlayerController_execClientStopAllSoundByActor_Parms parms;
//
//	if ( !pClientStopAllSoundByActor )
//		pClientStopAllSoundByActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientStopAllSoundByActor" );
//
//	parms.Target = Target;
//	this->ProcessEvent ( pClientStopAllSoundByActor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::ClientPlayVoiceSound ( struct FString strSoundName, bool bVolumeControl, float inAtten, unsigned char Slot )
//{
//	static UFunction* pClientPlayVoiceSound = 0;
//	APlayerController_execClientPlayVoiceSound_Parms parms;
//
//	if ( !pClientPlayVoiceSound )
//		pClientPlayVoiceSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientPlayVoiceSound" );
//
//	parms.strSoundName = strSoundName;
//	parms.bVolumeControl = bVolumeControl;
//	parms.inAtten = inAtten;
//	parms.Slot = Slot;
//	this->ProcessEvent ( pClientPlayVoiceSound, &parms, NULL );
//
//}
//
//void APlayerController::ClientPlaySound ( class USound* ASound, bool bVolumeControl, float inAtten, unsigned char Slot )
//{
//	static UFunction* pClientPlaySound = 0;
//	APlayerController_execClientPlaySound_Parms parms;
//
//	if ( !pClientPlaySound )
//		pClientPlaySound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientPlaySound" );
//
//	parms.ASound = ASound;
//	parms.bVolumeControl = bVolumeControl;
//	parms.inAtten = inAtten;
//	parms.Slot = Slot;
//	this->ProcessEvent ( pClientPlaySound, &parms, NULL );
//
//}
//
//void APlayerController::ClientChangeSlot6 ( class AwWeapon* W )
//{
//	static UFunction* pClientChangeSlot6 = 0;
//	APlayerController_execClientChangeSlot6_Parms parms;
//
//	if ( !pClientChangeSlot6 )
//		pClientChangeSlot6 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientChangeSlot6" );
//
//	parms.W = W;
//	this->ProcessEvent ( pClientChangeSlot6, &parms, NULL );
//
//}
//
//void APlayerController::ClientChangeSlot5 ( class AwWeapon* W, bool bAddSkill )
//{
//	static UFunction* pClientChangeSlot5 = 0;
//	APlayerController_execClientChangeSlot5_Parms parms;
//
//	if ( !pClientChangeSlot5 )
//		pClientChangeSlot5 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientChangeSlot5" );
//
//	parms.W = W;
//	parms.bAddSkill = bAddSkill;
//	this->ProcessEvent ( pClientChangeSlot5, &parms, NULL );
//
//}
//
//bool APlayerController::AllowVoiceMessage ( struct FName MessageType )
//{
//	static UFunction* pAllowVoiceMessage = 0;
//	APlayerController_execAllowVoiceMessage_Parms parms;
//
//	if ( !pAllowVoiceMessage )
//		pAllowVoiceMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AllowVoiceMessage" );
//
//	parms.MessageType = MessageType;
//	this->ProcessEvent ( pAllowVoiceMessage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::QueueAnnouncement ( struct FString ASoundName, unsigned char AnnouncementLevel, unsigned char Priority, unsigned char Switch )
//{
//	static UFunction* pQueueAnnouncement = 0;
//	APlayerController_execQueueAnnouncement_Parms parms;
//
//	if ( !pQueueAnnouncement )
//		pQueueAnnouncement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.QueueAnnouncement" );
//
//	parms.ASoundName = ASoundName;
//	parms.AnnouncementLevel = AnnouncementLevel;
//	parms.Priority = Priority;
//	parms.Switch = Switch;
//	this->ProcessEvent ( pQueueAnnouncement, &parms, NULL );
//
//}
//
//class USound* APlayerController::CustomizeAnnouncer ( class USound* AnnouncementSound )
//{
//	static UFunction* pCustomizeAnnouncer = 0;
//	APlayerController_execCustomizeAnnouncer_Parms parms;
//
//	if ( !pCustomizeAnnouncer )
//		pCustomizeAnnouncer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CustomizeAnnouncer" );
//
//	parms.AnnouncementSound = AnnouncementSound;
//	this->ProcessEvent ( pCustomizeAnnouncer, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::PlayAnnouncement ( class USound* ASound, unsigned char AnnouncementLevel, bool bForce )
//{
//	static UFunction* pPlayAnnouncement = 0;
//	APlayerController_execPlayAnnouncement_Parms parms;
//
//	if ( !pPlayAnnouncement )
//		pPlayAnnouncement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PlayAnnouncement" );
//
//	parms.ASound = ASound;
//	parms.AnnouncementLevel = AnnouncementLevel;
//	parms.bForce = bForce;
//	this->ProcessEvent ( pPlayAnnouncement, &parms, NULL );
//
//}
//
//void APlayerController::PlayRewardAnnouncement ( struct FName AName, unsigned char AnnouncementLevel, bool bForce, unsigned char Slot )
//{
//	static UFunction* pPlayRewardAnnouncement = 0;
//	APlayerController_execPlayRewardAnnouncement_Parms parms;
//
//	if ( !pPlayRewardAnnouncement )
//		pPlayRewardAnnouncement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PlayRewardAnnouncement" );
//
//	parms.AName = AName;
//	parms.AnnouncementLevel = AnnouncementLevel;
//	parms.bForce = bForce;
//	parms.Slot = Slot;
//	this->ProcessEvent ( pPlayRewardAnnouncement, &parms, NULL );
//
//}
//
//void APlayerController::PlayStatusAnnouncement ( struct FString AName, unsigned char AnnouncementLevel, bool bForce )
//{
//	static UFunction* pPlayStatusAnnouncement = 0;
//	APlayerController_execPlayStatusAnnouncement_Parms parms;
//
//	if ( !pPlayStatusAnnouncement )
//		pPlayStatusAnnouncement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PlayStatusAnnouncement" );
//
//	parms.AName = AName;
//	parms.AnnouncementLevel = AnnouncementLevel;
//	parms.bForce = bForce;
//	this->ProcessEvent ( pPlayStatusAnnouncement, &parms, NULL );
//
//}
//
//void APlayerController::PrecacheAnnouncements (  )
//{
//	static UFunction* pPrecacheAnnouncements = 0;
//	APlayerController_execPrecacheAnnouncements_Parms parms;
//
//	if ( !pPrecacheAnnouncements )
//		pPrecacheAnnouncements = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PrecacheAnnouncements" );
//
//	this->ProcessEvent ( pPrecacheAnnouncements, &parms, NULL );
//
//}
//
//void APlayerController::PlayBeepSound (  )
//{
//	static UFunction* pPlayBeepSound = 0;
//	APlayerController_execPlayBeepSound_Parms parms;
//
//	if ( !pPlayBeepSound )
//		pPlayBeepSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PlayBeepSound" );
//
//	this->ProcessEvent ( pPlayBeepSound, &parms, NULL );
//
//}
//
//void APlayerController::eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type )
//{
//	static UFunction* pTeamMessage = 0;
//	APlayerController_eventTeamMessage_Parms parms;
//
//	if ( !pTeamMessage )
//		pTeamMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.TeamMessage" );
//
//	parms.PRI = PRI;
//	parms.S = S;
//	parms.Type = Type;
//	this->ProcessEvent ( pTeamMessage, &parms, NULL );
//
//}
//
//bool APlayerController::AllowTextToSpeech ( class APlayerReplicationInfo* PRI, struct FName Type )
//{
//	static UFunction* pAllowTextToSpeech = 0;
//	APlayerController_execAllowTextToSpeech_Parms parms;
//
//	if ( !pAllowTextToSpeech )
//		pAllowTextToSpeech = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AllowTextToSpeech" );
//
//	parms.PRI = PRI;
//	parms.Type = Type;
//	this->ProcessEvent ( pAllowTextToSpeech, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::eventClientMessage ( struct FString S, struct FName Type )
//{
//	static UFunction* pClientMessage = 0;
//	APlayerController_eventClientMessage_Parms parms;
//
//	if ( !pClientMessage )
//		pClientMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientMessage" );
//
//	parms.S = S;
//	parms.Type = Type;
//	this->ProcessEvent ( pClientMessage, &parms, NULL );
//
//}
//
//void APlayerController::eventChatRoomMessage ( int Result, int ChannelIndex, class APlayerReplicationInfo* RelatedPRI )
//{
//	static UFunction* pChatRoomMessage = 0;
//	APlayerController_eventChatRoomMessage_Parms parms;
//
//	if ( !pChatRoomMessage )
//		pChatRoomMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ChatRoomMessage" );
//
//	parms.Result = Result;
//	parms.ChannelIndex = ChannelIndex;
//	parms.RelatedPRI = RelatedPRI;
//	this->ProcessEvent ( pChatRoomMessage, &parms, NULL );
//
//}
//
//void APlayerController::eventReceiveMessage_QuestType3 ( class UClass* Message, int Switch, int iRDifficult, int iRMap )
//{
//	static UFunction* pReceiveMessage_QuestType3 = 0;
//	APlayerController_eventReceiveMessage_QuestType3_Parms parms;
//
//	if ( !pReceiveMessage_QuestType3 )
//		pReceiveMessage_QuestType3 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ReceiveMessage_QuestType3" );
//
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.iRDifficult = iRDifficult;
//	parms.iRMap = iRMap;
//	this->ProcessEvent ( pReceiveMessage_QuestType3, &parms, NULL );
//
//}
//
//void APlayerController::eventReceiveMessage_QuestType2 ( class UClass* Message, int Switch, int iRMode, int iRMap, int iRMin, int iRSec )
//{
//	static UFunction* pReceiveMessage_QuestType2 = 0;
//	APlayerController_eventReceiveMessage_QuestType2_Parms parms;
//
//	if ( !pReceiveMessage_QuestType2 )
//		pReceiveMessage_QuestType2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ReceiveMessage_QuestType2" );
//
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.iRMode = iRMode;
//	parms.iRMap = iRMap;
//	parms.iRMin = iRMin;
//	parms.iRSec = iRSec;
//	this->ProcessEvent ( pReceiveMessage_QuestType2, &parms, NULL );
//
//}
//
//void APlayerController::eventReceiveMessage_QuestType1 ( class UClass* Message, int Switch, int iRWeaponType, int iRweaponId )
//{
//	static UFunction* pReceiveMessage_QuestType1 = 0;
//	APlayerController_eventReceiveMessage_QuestType1_Parms parms;
//
//	if ( !pReceiveMessage_QuestType1 )
//		pReceiveMessage_QuestType1 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ReceiveMessage_QuestType1" );
//
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.iRWeaponType = iRWeaponType;
//	parms.iRweaponId = iRweaponId;
//	this->ProcessEvent ( pReceiveMessage_QuestType1, &parms, NULL );
//
//}
//
//void APlayerController::eventReceiveLocalizedMessageWithKillerInfo ( class UClass* Message, class AController* Killer, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pReceiveLocalizedMessageWithKillerInfo = 0;
//	APlayerController_eventReceiveLocalizedMessageWithKillerInfo_Parms parms;
//
//	if ( !pReceiveLocalizedMessageWithKillerInfo )
//		pReceiveLocalizedMessageWithKillerInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ReceiveLocalizedMessageWithKillerInfo" );
//
//	parms.Message = Message;
//	parms.Killer = Killer;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pReceiveLocalizedMessageWithKillerInfo, &parms, NULL );
//
//}
//
//void APlayerController::eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pReceiveLocalizedMessage = 0;
//	APlayerController_eventReceiveLocalizedMessage_Parms parms;
//
//	if ( !pReceiveLocalizedMessage )
//		pReceiveLocalizedMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ReceiveLocalizedMessage" );
//
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pReceiveLocalizedMessage, &parms, NULL );
//
//}
//
//void APlayerController::ReceiveLocalizedMessage2 ( class UClass* Message, int Switch, int Reserved1, int Reserved2 )
//{
//	static UFunction* pReceiveLocalizedMessage2 = 0;
//	APlayerController_execReceiveLocalizedMessage2_Parms parms;
//
//	if ( !pReceiveLocalizedMessage2 )
//		pReceiveLocalizedMessage2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ReceiveLocalizedMessage2" );
//
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.Reserved1 = Reserved1;
//	parms.Reserved2 = Reserved2;
//	this->ProcessEvent ( pReceiveLocalizedMessage2, &parms, NULL );
//
//}
//
void APlayerController::EndFlash (  )
{
	static UFunction* pEndFlash = 0;
	APlayerController_execEndFlash_Parms parms;

	if ( !pEndFlash )
		pEndFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.EndFlash" );

	this->ProcessEvent ( pEndFlash, &parms, NULL );

}
//
//void APlayerController::ViewFlash ( float DeltaTime )
//{
//	static UFunction* pViewFlash = 0;
//	APlayerController_execViewFlash_Parms parms;
//
//	if ( !pViewFlash )
//		pViewFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ViewFlash" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pViewFlash, &parms, NULL );
//
//}
//
//float APlayerController::UpdateFlashComponent ( float Current, float Step, float Goal )
//{
//	static UFunction* pUpdateFlashComponent = 0;
//	APlayerController_execUpdateFlashComponent_Parms parms;
//
//	if ( !pUpdateFlashComponent )
//		pUpdateFlashComponent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.UpdateFlashComponent" );
//
//	parms.Current = Current;
//	parms.Step = Step;
//	parms.Goal = Goal;
//	this->ProcessEvent ( pUpdateFlashComponent, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::ClientStopForceFeedback ( struct FString EffectName )
//{
//	static UFunction* pClientStopForceFeedback = 0;
//	APlayerController_execClientStopForceFeedback_Parms parms;
//
//	if ( !pClientStopForceFeedback )
//		pClientStopForceFeedback = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientStopForceFeedback" );
//
//	parms.EffectName = EffectName;
//	this->ProcessEvent ( pClientStopForceFeedback, &parms, NULL );
//
//}
//
//void APlayerController::StopForceFeedback ( struct FString EffectName )
//{
//	static UFunction* pStopForceFeedback = 0;
//	APlayerController_execStopForceFeedback_Parms parms;
//
//	if ( !pStopForceFeedback )
//		pStopForceFeedback = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.StopForceFeedback" );
//
//	parms.EffectName = EffectName;
//	this->ProcessEvent ( pStopForceFeedback, &parms, NULL );
//
//}
//
//void APlayerController::ClientPlayForceFeedback ( struct FString EffectName )
//{
//	static UFunction* pClientPlayForceFeedback = 0;
//	APlayerController_execClientPlayForceFeedback_Parms parms;
//
//	if ( !pClientPlayForceFeedback )
//		pClientPlayForceFeedback = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientPlayForceFeedback" );
//
//	parms.EffectName = EffectName;
//	this->ProcessEvent ( pClientPlayForceFeedback, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetHUD ( class UClass* newHUDClass, class UClass* newScoringClass, class UClass* newResultClass, class UClass* newResultBootyClass )
//{
//	static UFunction* pClientSetHUD = 0;
//	APlayerController_execClientSetHUD_Parms parms;
//
//	if ( !pClientSetHUD )
//		pClientSetHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetHUD" );
//
//	parms.newHUDClass = newHUDClass;
//	parms.newScoringClass = newScoringClass;
//	parms.newResultClass = newResultClass;
//	parms.newResultBootyClass = newResultBootyClass;
//	this->ProcessEvent ( pClientSetHUD, &parms, NULL );
//
//}
//
//void APlayerController::ClientUpdateFlagHolder ( class APlayerReplicationInfo* PRI, int i )
//{
//	static UFunction* pClientUpdateFlagHolder = 0;
//	APlayerController_execClientUpdateFlagHolder_Parms parms;
//
//	if ( !pClientUpdateFlagHolder )
//		pClientUpdateFlagHolder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientUpdateFlagHolder" );
//
//	parms.PRI = PRI;
//	parms.i = i;
//	this->ProcessEvent ( pClientUpdateFlagHolder, &parms, NULL );
//
//}
//
//void APlayerController::PawnDied ( class APawn* P )
//{
//	static UFunction* pPawnDied = 0;
//	APlayerController_execPawnDied_Parms parms;
//
//	if ( !pPawnDied )
//		pPawnDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PawnDied" );
//
//	parms.P = P;
//	this->ProcessEvent ( pPawnDied, &parms, NULL );
//
//}
//
//void APlayerController::ViewNextBot (  )
//{
//	static UFunction* pViewNextBot = 0;
//	APlayerController_execViewNextBot_Parms parms;
//
//	if ( !pViewNextBot )
//		pViewNextBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ViewNextBot" );
//
//	this->ProcessEvent ( pViewNextBot, &parms, NULL );
//
//}
//
//void APlayerController::UnPossess (  )
//{
//	static UFunction* pUnPossess = 0;
//	APlayerController_execUnPossess_Parms parms;
//
//	if ( !pUnPossess )
//		pUnPossess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.UnPossess" );
//
//	this->ProcessEvent ( pUnPossess, &parms, NULL );
//
//}
//
//void APlayerController::ServerAcknowledgePossession ( class APawn* P, float NewHand, bool bNewAutoTaunt )
//{
//	static UFunction* pServerAcknowledgePossession = 0;
//	APlayerController_execServerAcknowledgePossession_Parms parms;
//
//	if ( !pServerAcknowledgePossession )
//		pServerAcknowledgePossession = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerAcknowledgePossession" );
//
//	parms.P = P;
//	parms.NewHand = NewHand;
//	parms.bNewAutoTaunt = bNewAutoTaunt;
//	this->ProcessEvent ( pServerAcknowledgePossession, &parms, NULL );
//
//}
//
//void APlayerController::AcknowledgePossession ( class APawn* P )
//{
//	static UFunction* pAcknowledgePossession = 0;
//	APlayerController_execAcknowledgePossession_Parms parms;
//
//	if ( !pAcknowledgePossession )
//		pAcknowledgePossession = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AcknowledgePossession" );
//
//	parms.P = P;
//	this->ProcessEvent ( pAcknowledgePossession, &parms, NULL );
//
//}
//
//void APlayerController::Possess ( class APawn* aPawn )
//{
//	static UFunction* pPossess = 0;
//	APlayerController_execPossess_Parms parms;
//
//	if ( !pPossess )
//		pPossess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Possess" );
//
//	parms.aPawn = aPawn;
//	this->ProcessEvent ( pPossess, &parms, NULL );
//
//}
//
//int APlayerController::GetFacingDirection (  )
//{
//	static UFunction* pGetFacingDirection = 0;
//	APlayerController_execGetFacingDirection_Parms parms;
//
//	if ( !pGetFacingDirection )
//		pGetFacingDirection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetFacingDirection" );
//
//	this->ProcessEvent ( pGetFacingDirection, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::ClientLogPawns (  )
//{
//	static UFunction* pClientLogPawns = 0;
//	APlayerController_execClientLogPawns_Parms parms;
//
//	if ( !pClientLogPawns )
//		pClientLogPawns = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientLogPawns" );
//
//	this->ProcessEvent ( pClientLogPawns, &parms, NULL );
//
//}
//
//void APlayerController::DoLogPawns (  )
//{
//	static UFunction* pDoLogPawns = 0;
//	APlayerController_execDoLogPawns_Parms parms;
//
//	if ( !pDoLogPawns )
//		pDoLogPawns = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DoLogPawns" );
//
//	this->ProcessEvent ( pDoLogPawns, &parms, NULL );
//
//}
//
//void APlayerController::execEveryLogPawns (  )
//{
//	static UFunction* pEveryLogPawns = 0;
//	APlayerController_execEveryLogPawns_Parms parms;
//
//	if ( !pEveryLogPawns )
//		pEveryLogPawns = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.EveryLogPawns" );
//
//	this->ProcessEvent ( pEveryLogPawns, &parms, NULL );
//
//}
//
//void APlayerController::execLogPawns (  )
//{
//	static UFunction* pLogPawns = 0;
//	APlayerController_execLogPawns_Parms parms;
//
//	if ( !pLogPawns )
//		pLogPawns = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.LogPawns" );
//
//	this->ProcessEvent ( pLogPawns, &parms, NULL );
//
//}
//
//void APlayerController::eventGivePawn ( class APawn* NewPawn )
//{
//	static UFunction* pGivePawn = 0;
//	APlayerController_eventGivePawn_Parms parms;
//
//	if ( !pGivePawn )
//		pGivePawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GivePawn" );
//
//	parms.NewPawn = NewPawn;
//	this->ProcessEvent ( pGivePawn, &parms, NULL );
//
//}
//
//void APlayerController::AskForPawn (  )
//{
//	static UFunction* pAskForPawn = 0;
//	APlayerController_execAskForPawn_Parms parms;
//
//	if ( !pAskForPawn )
//		pAskForPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AskForPawn" );
//
//	this->ProcessEvent ( pAskForPawn, &parms, NULL );
//
//}
//
//void APlayerController::ClientGotoState ( struct FName NewState, struct FName NewLabel )
//{
//	static UFunction* pClientGotoState = 0;
//	APlayerController_execClientGotoState_Parms parms;
//
//	if ( !pClientGotoState )
//		pClientGotoState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientGotoState" );
//
//	parms.NewState = NewState;
//	parms.NewLabel = NewLabel;
//	this->ProcessEvent ( pClientGotoState, &parms, NULL );
//
//}
//
//void APlayerController::eventInitInputSystem (  )
//{
//	static UFunction* pInitInputSystem = 0;
//	APlayerController_eventInitInputSystem_Parms parms;
//
//	if ( !pInitInputSystem )
//		pInitInputSystem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.InitInputSystem" );
//
//	this->ProcessEvent ( pInitInputSystem, &parms, NULL );
//
//}
//
//void APlayerController::execpreB (  )
//{
//	static UFunction* ppreB = 0;
//	APlayerController_execpreB_Parms parms;
//
//	if ( !ppreB )
//		ppreB = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.preB" );
//
//	this->ProcessEvent ( ppreB, &parms, NULL );
//
//}
//
//void APlayerController::execpreA (  )
//{
//	static UFunction* ppreA = 0;
//	APlayerController_execpreA_Parms parms;
//
//	if ( !ppreA )
//		ppreA = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.preA" );
//
//	this->ProcessEvent ( ppreA, &parms, NULL );
//
//}
//
//void APlayerController::exectests (  )
//{
//	static UFunction* ptests = 0;
//	APlayerController_exectests_Parms parms;
//
//	if ( !ptests )
//		ptests = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.tests" );
//
//	this->ProcessEvent ( ptests, &parms, NULL );
//
//}
//
//void APlayerController::CleanOutSavedMoves (  )
//{
//	static UFunction* pCleanOutSavedMoves = 0;
//	APlayerController_execCleanOutSavedMoves_Parms parms;
//
//	if ( !pCleanOutSavedMoves )
//		pCleanOutSavedMoves = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CleanOutSavedMoves" );
//
//	this->ProcessEvent ( pCleanOutSavedMoves, &parms, NULL );
//
//}
//
//void APlayerController::ChatResetInput (  )
//{
//	static UFunction* pChatResetInput = 0;
//	APlayerController_execChatResetInput_Parms parms;
//
//	if ( !pChatResetInput )
//		pChatResetInput = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ChatResetInput" );
//
//	this->ProcessEvent ( pChatResetInput, &parms, NULL );
//
//}
//
//void APlayerController::ScriptResetInput (  )
//{
//	static UFunction* pScriptResetInput = 0;
//	APlayerController_execScriptResetInput_Parms parms;
//
//	if ( !pScriptResetInput )
//		pScriptResetInput = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ScriptResetInput" );
//
//	this->ProcessEvent ( pScriptResetInput, &parms, NULL );
//
//}
//
//void APlayerController::eventClientReset (  )
//{
//	static UFunction* pClientReset = 0;
//	APlayerController_eventClientReset_Parms parms;
//
//	if ( !pClientReset )
//		pClientReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientReset" );
//
//	this->ProcessEvent ( pClientReset, &parms, NULL );
//
//}
//
//void APlayerController::Reset (  )
//{
//	static UFunction* pReset = 0;
//	APlayerController_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void APlayerController::SpawnDefaultHUD (  )
//{
//	static UFunction* pSpawnDefaultHUD = 0;
//	APlayerController_execSpawnDefaultHUD_Parms parms;
//
//	if ( !pSpawnDefaultHUD )
//		pSpawnDefaultHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SpawnDefaultHUD" );
//
//	this->ProcessEvent ( pSpawnDefaultHUD, &parms, NULL );
//
//}
//
//void APlayerController::ServerVerifyViewTarget (  )
//{
//	static UFunction* pServerVerifyViewTarget = 0;
//	APlayerController_execServerVerifyViewTarget_Parms parms;
//
//	if ( !pServerVerifyViewTarget )
//		pServerVerifyViewTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerVerifyViewTarget" );
//
//	this->ProcessEvent ( pServerVerifyViewTarget, &parms, NULL );
//
//}
//
//void APlayerController::eventClientSetViewTargetZZ ( class AActor* A )
//{
//	static UFunction* pClientSetViewTargetZZ = 0;
//	APlayerController_eventClientSetViewTargetZZ_Parms parms;
//
//	if ( !pClientSetViewTargetZZ )
//		pClientSetViewTargetZZ = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTargetZZ" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTargetZZ, &parms, NULL );
//
//}
//
//void APlayerController::eventClientSetViewTarget_NATIVE ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_NATIVE = 0;
//	APlayerController_eventClientSetViewTarget_NATIVE_Parms parms;
//
//	if ( !pClientSetViewTarget_NATIVE )
//		pClientSetViewTarget_NATIVE = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_NATIVE" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_NATIVE, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_S ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_S = 0;
//	APlayerController_execClientSetViewTarget_S_Parms parms;
//
//	if ( !pClientSetViewTarget_S )
//		pClientSetViewTarget_S = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_S" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_S, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_R ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_R = 0;
//	APlayerController_execClientSetViewTarget_R_Parms parms;
//
//	if ( !pClientSetViewTarget_R )
//		pClientSetViewTarget_R = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_R" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_R, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_Q ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_Q = 0;
//	APlayerController_execClientSetViewTarget_Q_Parms parms;
//
//	if ( !pClientSetViewTarget_Q )
//		pClientSetViewTarget_Q = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_Q" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_Q, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_P ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_P = 0;
//	APlayerController_execClientSetViewTarget_P_Parms parms;
//
//	if ( !pClientSetViewTarget_P )
//		pClientSetViewTarget_P = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_P" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_P, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_O ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_O = 0;
//	APlayerController_execClientSetViewTarget_O_Parms parms;
//
//	if ( !pClientSetViewTarget_O )
//		pClientSetViewTarget_O = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_O" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_O, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_N ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_N = 0;
//	APlayerController_execClientSetViewTarget_N_Parms parms;
//
//	if ( !pClientSetViewTarget_N )
//		pClientSetViewTarget_N = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_N" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_N, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_M ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_M = 0;
//	APlayerController_execClientSetViewTarget_M_Parms parms;
//
//	if ( !pClientSetViewTarget_M )
//		pClientSetViewTarget_M = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_M" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_M, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_L ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_L = 0;
//	APlayerController_execClientSetViewTarget_L_Parms parms;
//
//	if ( !pClientSetViewTarget_L )
//		pClientSetViewTarget_L = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_L" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_L, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_K ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_K = 0;
//	APlayerController_execClientSetViewTarget_K_Parms parms;
//
//	if ( !pClientSetViewTarget_K )
//		pClientSetViewTarget_K = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_K" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_K, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_J ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_J = 0;
//	APlayerController_execClientSetViewTarget_J_Parms parms;
//
//	if ( !pClientSetViewTarget_J )
//		pClientSetViewTarget_J = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_J" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_J, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_I ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_I = 0;
//	APlayerController_execClientSetViewTarget_I_Parms parms;
//
//	if ( !pClientSetViewTarget_I )
//		pClientSetViewTarget_I = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_I" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_I, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_H ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_H = 0;
//	APlayerController_execClientSetViewTarget_H_Parms parms;
//
//	if ( !pClientSetViewTarget_H )
//		pClientSetViewTarget_H = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_H" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_H, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_G ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_G = 0;
//	APlayerController_execClientSetViewTarget_G_Parms parms;
//
//	if ( !pClientSetViewTarget_G )
//		pClientSetViewTarget_G = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_G" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_G, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_F ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_F = 0;
//	APlayerController_execClientSetViewTarget_F_Parms parms;
//
//	if ( !pClientSetViewTarget_F )
//		pClientSetViewTarget_F = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_F" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_F, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_E ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_E = 0;
//	APlayerController_execClientSetViewTarget_E_Parms parms;
//
//	if ( !pClientSetViewTarget_E )
//		pClientSetViewTarget_E = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_E" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_E, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_D ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_D = 0;
//	APlayerController_execClientSetViewTarget_D_Parms parms;
//
//	if ( !pClientSetViewTarget_D )
//		pClientSetViewTarget_D = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_D" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_D, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_C ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_C = 0;
//	APlayerController_execClientSetViewTarget_C_Parms parms;
//
//	if ( !pClientSetViewTarget_C )
//		pClientSetViewTarget_C = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_C" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_C, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_B ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_B = 0;
//	APlayerController_execClientSetViewTarget_B_Parms parms;
//
//	if ( !pClientSetViewTarget_B )
//		pClientSetViewTarget_B = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_B" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_B, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetViewTarget_A ( class AActor* A )
//{
//	static UFunction* pClientSetViewTarget_A = 0;
//	APlayerController_execClientSetViewTarget_A_Parms parms;
//
//	if ( !pClientSetViewTarget_A )
//		pClientSetViewTarget_A = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetViewTarget_A" );
//
//	parms.A = A;
//	this->ProcessEvent ( pClientSetViewTarget_A, &parms, NULL );
//
//}
//
//void APlayerController::HandlePickup ( class APickup* pick )
//{
//	static UFunction* pHandlePickup = 0;
//	APlayerController_execHandlePickup_Parms parms;
//
//	if ( !pHandlePickup )
//		pHandlePickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.HandlePickup" );
//
//	parms.pick = pick;
//	this->ProcessEvent ( pHandlePickup, &parms, NULL );
//
//}
//
//void APlayerController::MakeAdmin (  )
//{
//	static UFunction* pMakeAdmin = 0;
//	APlayerController_execMakeAdmin_Parms parms;
//
//	if ( !pMakeAdmin )
//		pMakeAdmin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.MakeAdmin" );
//
//	this->ProcessEvent ( pMakeAdmin, &parms, NULL );
//
//}
//
//void APlayerController::AddCheats (  )
//{
//	static UFunction* pAddCheats = 0;
//	APlayerController_execAddCheats_Parms parms;
//
//	if ( !pAddCheats )
//		pAddCheats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.AddCheats" );
//
//	this->ProcessEvent ( pAddCheats, &parms, NULL );
//
//}
//
//void APlayerController::PendingStasis (  )
//{
//	static UFunction* pPendingStasis = 0;
//	APlayerController_execPendingStasis_Parms parms;
//
//	if ( !pPendingStasis )
//		pPendingStasis = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PendingStasis" );
//
//	this->ProcessEvent ( pPendingStasis, &parms, NULL );
//
//}
//
//void APlayerController::ClientCapBandwidth ( int Cap )
//{
//	static UFunction* pClientCapBandwidth = 0;
//	APlayerController_execClientCapBandwidth_Parms parms;
//
//	if ( !pClientCapBandwidth )
//		pClientCapBandwidth = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientCapBandwidth" );
//
//	parms.Cap = Cap;
//	this->ProcessEvent ( pClientCapBandwidth, &parms, NULL );
//
//}
//
//void APlayerController::ServerGivePawn (  )
//{
//	static UFunction* pServerGivePawn = 0;
//	APlayerController_execServerGivePawn_Parms parms;
//
//	if ( !pServerGivePawn )
//		pServerGivePawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerGivePawn" );
//
//	this->ProcessEvent ( pServerGivePawn, &parms, NULL );
//
//}
//
//void APlayerController::ServerSpectateSpeed ( float f )
//{
//	static UFunction* pServerSpectateSpeed = 0;
//	APlayerController_execServerSpectateSpeed_Parms parms;
//
//	if ( !pServerSpectateSpeed )
//		pServerSpectateSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSpectateSpeed" );
//
//	parms.f = f;
//	this->ProcessEvent ( pServerSpectateSpeed, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetClassicView (  )
//{
//	static UFunction* pClientSetClassicView = 0;
//	APlayerController_execClientSetClassicView_Parms parms;
//
//	if ( !pClientSetClassicView )
//		pClientSetClassicView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetClassicView" );
//
//	this->ProcessEvent ( pClientSetClassicView, &parms, NULL );
//
//}
//
//void APlayerController::ClientSetWeaponViewShake ( bool B )
//{
//	static UFunction* pClientSetWeaponViewShake = 0;
//	APlayerController_execClientSetWeaponViewShake_Parms parms;
//
//	if ( !pClientSetWeaponViewShake )
//		pClientSetWeaponViewShake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientSetWeaponViewShake" );
//
//	parms.B = B;
//	this->ProcessEvent ( pClientSetWeaponViewShake, &parms, NULL );
//
//}
//
//void APlayerController::execSetSpectateSpeed ( float f )
//{
//	static UFunction* pSetSpectateSpeed = 0;
//	APlayerController_execSetSpectateSpeed_Parms parms;
//
//	if ( !pSetSpectateSpeed )
//		pSetSpectateSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetSpectateSpeed" );
//
//	parms.f = f;
//	this->ProcessEvent ( pSetSpectateSpeed, &parms, NULL );
//
//}
//
//void APlayerController::execss ( struct FString t )
//{
//	static UFunction* pss = 0;
//	APlayerController_execss_Parms parms;
//
//	if ( !pss )
//		pss = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ss" );
//
//	parms.t = t;
//	this->ProcessEvent ( pss, &parms, NULL );
//
//}
//
//void APlayerController::execToggleScreenShotMode (  )
//{
//	static UFunction* pToggleScreenShotMode = 0;
//	APlayerController_execToggleScreenShotMode_Parms parms;
//
//	if ( !pToggleScreenShotMode )
//		pToggleScreenShotMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ToggleScreenShotMode" );
//
//	this->ProcessEvent ( pToggleScreenShotMode, &parms, NULL );
//
//}
//
//void APlayerController::KillAllPawns ( class UClass* aClass )
//{
//	static UFunction* pKillAllPawns = 0;
//	APlayerController_execKillAllPawns_Parms parms;
//
//	if ( !pKillAllPawns )
//		pKillAllPawns = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.KillAllPawns" );
//
//	parms.aClass = aClass;
//	this->ProcessEvent ( pKillAllPawns, &parms, NULL );
//
//}
//
//void APlayerController::execKillAll ( class UClass* aClass )
//{
//	static UFunction* pKillAll = 0;
//	APlayerController_execKillAll_Parms parms;
//
//	if ( !pKillAll )
//		pKillAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.KillAll" );
//
//	parms.aClass = aClass;
//	this->ProcessEvent ( pKillAll, &parms, NULL );
//
//}
//
//void APlayerController::eventStreamFinished ( int StreamHandle, unsigned char Reason )
//{
//	static UFunction* pStreamFinished = 0;
//	APlayerController_eventStreamFinished_Parms parms;
//
//	if ( !pStreamFinished )
//		pStreamFinished = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.StreamFinished" );
//
//	parms.StreamHandle = StreamHandle;
//	parms.Reason = Reason;
//	this->ProcessEvent ( pStreamFinished, &parms, NULL );
//
//}
//
//class AActor* APlayerController::GetPathTo ( class AActor* Dest )
//{
//	static UFunction* pGetPathTo = 0;
//	APlayerController_execGetPathTo_Parms parms;
//
//	if ( !pGetPathTo )
//		pGetPathTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetPathTo" );
//
//	parms.Dest = Dest;
//	this->ProcessEvent ( pGetPathTo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::ServerShortTimeout (  )
//{
//	static UFunction* pServerShortTimeout = 0;
//	APlayerController_execServerShortTimeout_Parms parms;
//
//	if ( !pServerShortTimeout )
//		pServerShortTimeout = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerShortTimeout" );
//
//	this->ProcessEvent ( pServerShortTimeout, &parms, NULL );
//
//}
//
//void APlayerController::ResetTimeMarginNative (  )
//{
//	static UFunction* pResetTimeMarginNative = 0;
//	APlayerController_execResetTimeMarginNative_Parms parms;
//
//	if ( !pResetTimeMarginNative )
//		pResetTimeMarginNative = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ResetTimeMarginNative" );
//
//	this->ProcessEvent ( pResetTimeMarginNative, &parms, NULL );
//
//}
//
//void APlayerController::ResetTimeMargin (  )
//{
//	static UFunction* pResetTimeMargin = 0;
//	APlayerController_execResetTimeMargin_Parms parms;
//
//	if ( !pResetTimeMargin )
//		pResetTimeMargin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ResetTimeMargin" );
//
//	this->ProcessEvent ( pResetTimeMargin, &parms, NULL );
//
//}
//
//void APlayerController::eventKickWarning (  )
//{
//	static UFunction* pKickWarning = 0;
//	APlayerController_eventKickWarning_Parms parms;
//
//	if ( !pKickWarning )
//		pKickWarning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.KickWarning" );
//
//	this->ProcessEvent ( pKickWarning, &parms, NULL );
//
//}
//
//bool APlayerController::BeyondViewDistance ( struct FVector OtherLocation, float CullDistance )
//{
//	static UFunction* pBeyondViewDistance = 0;
//	APlayerController_execBeyondViewDistance_Parms parms;
//
//	if ( !pBeyondViewDistance )
//		pBeyondViewDistance = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.BeyondViewDistance" );
//
//	parms.OtherLocation = OtherLocation;
//	parms.CullDistance = CullDistance;
//	this->ProcessEvent ( pBeyondViewDistance, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::ClientEndChangeHost (  )
//{
//	static UFunction* pClientEndChangeHost = 0;
//	APlayerController_execClientEndChangeHost_Parms parms;
//
//	if ( !pClientEndChangeHost )
//		pClientEndChangeHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientEndChangeHost" );
//
//	this->ProcessEvent ( pClientEndChangeHost, &parms, NULL );
//
//}
//
//void APlayerController::EndChangeHost (  )
//{
//	static UFunction* pEndChangeHost = 0;
//	APlayerController_execEndChangeHost_Parms parms;
//
//	if ( !pEndChangeHost )
//		pEndChangeHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.EndChangeHost" );
//
//	this->ProcessEvent ( pEndChangeHost, &parms, NULL );
//
//}
//
//void APlayerController::eventSendAllUserGameStateDataToInterventionUser (  )
//{
//	static UFunction* pSendAllUserGameStateDataToInterventionUser = 0;
//	APlayerController_eventSendAllUserGameStateDataToInterventionUser_Parms parms;
//
//	if ( !pSendAllUserGameStateDataToInterventionUser )
//		pSendAllUserGameStateDataToInterventionUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SendAllUserGameStateDataToInterventionUser" );
//
//	this->ProcessEvent ( pSendAllUserGameStateDataToInterventionUser, &parms, NULL );
//
//}
//
//void APlayerController::eventDestroyGameStateStorageSender (  )
//{
//	static UFunction* pDestroyGameStateStorageSender = 0;
//	APlayerController_eventDestroyGameStateStorageSender_Parms parms;
//
//	if ( !pDestroyGameStateStorageSender )
//		pDestroyGameStateStorageSender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.DestroyGameStateStorageSender" );
//
//	this->ProcessEvent ( pDestroyGameStateStorageSender, &parms, NULL );
//
//}
//
//void APlayerController::eventCreateGameStateStorageSender (  )
//{
//	static UFunction* pCreateGameStateStorageSender = 0;
//	APlayerController_eventCreateGameStateStorageSender_Parms parms;
//
//	if ( !pCreateGameStateStorageSender )
//		pCreateGameStateStorageSender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CreateGameStateStorageSender" );
//
//	this->ProcessEvent ( pCreateGameStateStorageSender, &parms, NULL );
//
//}
//
//void APlayerController::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	APlayerController_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void APlayerController::ServerGetWeaponStats ( class AwWeapon* W )
//{
//	static UFunction* pServerGetWeaponStats = 0;
//	APlayerController_execServerGetWeaponStats_Parms parms;
//
//	if ( !pServerGetWeaponStats )
//		pServerGetWeaponStats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerGetWeaponStats" );
//
//	parms.W = W;
//	this->ProcessEvent ( pServerGetWeaponStats, &parms, NULL );
//
//}
//
//void APlayerController::exectestRS (  )
//{
//	static UFunction* ptestRS = 0;
//	APlayerController_exectestRS_Parms parms;
//
//	if ( !ptestRS )
//		ptestRS = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.testRS" );
//
//	this->ProcessEvent ( ptestRS, &parms, NULL );
//
//}
//
//void APlayerController::execGetWeaponStats (  )
//{
//	static UFunction* pGetWeaponStats = 0;
//	APlayerController_execGetWeaponStats_Parms parms;
//
//	if ( !pGetWeaponStats )
//		pGetWeaponStats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetWeaponStats" );
//
//	this->ProcessEvent ( pGetWeaponStats, &parms, NULL );
//
//}
//
//void APlayerController::eventNotifyEndLoading (  )
//{
//	static UFunction* pNotifyEndLoading = 0;
//	APlayerController_eventNotifyEndLoading_Parms parms;
//
//	if ( !pNotifyEndLoading )
//		pNotifyEndLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.NotifyEndLoading" );
//
//	this->ProcessEvent ( pNotifyEndLoading, &parms, NULL );
//
//}
//
//void APlayerController::eventNotifyRecordException ( int retCode )
//{
//	static UFunction* pNotifyRecordException = 0;
//	APlayerController_eventNotifyRecordException_Parms parms;
//
//	if ( !pNotifyRecordException )
//		pNotifyRecordException = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.NotifyRecordException" );
//
//	parms.retCode = retCode;
//	this->ProcessEvent ( pNotifyRecordException, &parms, NULL );
//
//}
//
//class UPlayerInput* APlayerController::GetPlayerInput (  )
//{
//	static UFunction* pGetPlayerInput = 0;
//	APlayerController_execGetPlayerInput_Parms parms;
//
//	if ( !pGetPlayerInput )
//		pGetPlayerInput = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetPlayerInput" );
//
//	this->ProcessEvent ( pGetPlayerInput, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::ServerNotifyEndLoading (  )
//{
//	static UFunction* pServerNotifyEndLoading = 0;
//	APlayerController_execServerNotifyEndLoading_Parms parms;
//
//	if ( !pServerNotifyEndLoading )
//		pServerNotifyEndLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerNotifyEndLoading" );
//
//	this->ProcessEvent ( pServerNotifyEndLoading, &parms, NULL );
//
//}
//
//void APlayerController::LocalNotifyEndLoading (  )
//{
//	static UFunction* pLocalNotifyEndLoading = 0;
//	APlayerController_execLocalNotifyEndLoading_Parms parms;
//
//	if ( !pLocalNotifyEndLoading )
//		pLocalNotifyEndLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.LocalNotifyEndLoading" );
//
//	this->ProcessEvent ( pLocalNotifyEndLoading, &parms, NULL );
//
//}
//
//void APlayerController::ServerSetPrecached (  )
//{
//	static UFunction* pServerSetPrecached = 0;
//	APlayerController_execServerSetPrecached_Parms parms;
//
//	if ( !pServerSetPrecached )
//		pServerSetPrecached = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerSetPrecached" );
//
//	this->ProcessEvent ( pServerSetPrecached, &parms, NULL );
//
//}
//
//void APlayerController::eventSetPrecached (  )
//{
//	static UFunction* pSetPrecached = 0;
//	APlayerController_eventSetPrecached_Parms parms;
//
//	if ( !pSetPrecached )
//		pSetPrecached = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetPrecached" );
//
//	this->ProcessEvent ( pSetPrecached, &parms, NULL );
//
//}
//
//void APlayerController::LocalSetPrecached (  )
//{
//	static UFunction* pLocalSetPrecached = 0;
//	APlayerController_execLocalSetPrecached_Parms parms;
//
//	if ( !pLocalSetPrecached )
//		pLocalSetPrecached = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.LocalSetPrecached" );
//
//	this->ProcessEvent ( pLocalSetPrecached, &parms, NULL );
//
//}
//
//void APlayerController::ShowPathToActor ( class AActor* A )
//{
//	static UFunction* pShowPathToActor = 0;
//	APlayerController_execShowPathToActor_Parms parms;
//
//	if ( !pShowPathToActor )
//		pShowPathToActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ShowPathToActor" );
//
//	parms.A = A;
//	this->ProcessEvent ( pShowPathToActor, &parms, NULL );
//
//}
//
//struct FName APlayerController::GetStateStrName ( struct FString strName )
//{
//	static UFunction* pGetStateStrName = 0;
//	APlayerController_execGetStateStrName_Parms parms;
//
//	if ( !pGetStateStrName )
//		pGetStateStrName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetStateStrName" );
//
//	parms.strName = strName;
//	this->ProcessEvent ( pGetStateStrName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::SetTimeOutInPlaying (  )
//{
//	static UFunction* pSetTimeOutInPlaying = 0;
//	APlayerController_execSetTimeOutInPlaying_Parms parms;
//
//	if ( !pSetTimeOutInPlaying )
//		pSetTimeOutInPlaying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetTimeOutInPlaying" );
//
//	this->ProcessEvent ( pSetTimeOutInPlaying, &parms, NULL );
//
//}
//
//void APlayerController::execCmd ( struct FString P1, struct FString P2, struct FString p3, struct FString p4, struct FString p5 )
//{
//	static UFunction* pCmd = 0;
//	APlayerController_execCmd_Parms parms;
//
//	if ( !pCmd )
//		pCmd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.Cmd" );
//
//	parms.P1 = P1;
//	parms.P2 = P2;
//	parms.p3 = p3;
//	parms.p4 = p4;
//	parms.p5 = p5;
//	this->ProcessEvent ( pCmd, &parms, NULL );
//
//}
//
//void APlayerController::execSaveParams (  )
//{
//	static UFunction* pSaveParams = 0;
//	APlayerController_execSaveParams_Parms parms;
//
//	if ( !pSaveParams )
//		pSaveParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SaveParams" );
//
//	this->ProcessEvent ( pSaveParams, &parms, NULL );
//
//}
//
//void APlayerController::SplitForInputWeapon ( struct FString Src, class TArray< struct FString >* Parts )
//{
//	static UFunction* pSplitForInputWeapon = 0;
//	APlayerController_execSplitForInputWeapon_Parms parms;
//
//	if ( !pSplitForInputWeapon )
//		pSplitForInputWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SplitForInputWeapon" );
//
//	parms.Src = Src;
//	this->ProcessEvent ( pSplitForInputWeapon, &parms, NULL );
//
//	*Parts = parms.Parts;
//}
//
//void APlayerController::eventClientHearSound ( class AActor* Actor, int id, class USound* S, struct FVector SoundLocation, struct FVector Parameters, bool Attenuate, bool Loop )
//{
//	static UFunction* pClientHearSound = 0;
//	APlayerController_eventClientHearSound_Parms parms;
//
//	if ( !pClientHearSound )
//		pClientHearSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientHearSound" );
//
//	parms.Actor = Actor;
//	parms.id = id;
//	parms.S = S;
//	parms.SoundLocation = SoundLocation;
//	parms.Parameters = Parameters;
//	parms.Attenuate = Attenuate;
//	parms.Loop = Loop;
//	this->ProcessEvent ( pClientHearSound, &parms, NULL );
//
//}
//
//void APlayerController::eventfClientHearSound ( class AActor* Actor, int id, struct FString soundName, struct FVector SoundLocation, bool Attenuate, bool Loop )
//{
//	static UFunction* pfClientHearSound = 0;
//	APlayerController_eventfClientHearSound_Parms parms;
//
//	if ( !pfClientHearSound )
//		pfClientHearSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.fClientHearSound" );
//
//	parms.Actor = Actor;
//	parms.id = id;
//	parms.soundName = soundName;
//	parms.SoundLocation = SoundLocation;
//	parms.Attenuate = Attenuate;
//	parms.Loop = Loop;
//	this->ProcessEvent ( pfClientHearSound, &parms, NULL );
//
//}
//
//int APlayerController::FindStairRotation ( float DeltaTime )
//{
//	static UFunction* pFindStairRotation = 0;
//	APlayerController_execFindStairRotation_Parms parms;
//
//	if ( !pFindStairRotation )
//		pFindStairRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.FindStairRotation" );
//
//	WORD iNative = pFindStairRotation->iNative;
//	pFindStairRotation->FunctionFlags &= ~FUNC_Native;
//	pFindStairRotation->iNative = 0;
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pFindStairRotation, &parms, NULL );
//
//	pFindStairRotation->iNative = iNative;
//	pFindStairRotation->FunctionFlags |= FUNC_Native;
//	return parms.ReturnValue;
//}
//
//void APlayerController::SendWebLog ( int sectionID, int FailCode )
//{
//	static UFunction* pSendWebLog = 0;
//	APlayerController_execSendWebLog_Parms parms;
//
//	if ( !pSendWebLog )
//		pSendWebLog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SendWebLog" );
//
//	parms.sectionID = sectionID;
//	parms.FailCode = FailCode;
//	this->ProcessEvent ( pSendWebLog, &parms, NULL );
//
//}
//
//void APlayerController::ResetKeySleepTime (  )
//{
//	static UFunction* pResetKeySleepTime = 0;
//	APlayerController_execResetKeySleepTime_Parms parms;
//
//	if ( !pResetKeySleepTime )
//		pResetKeySleepTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ResetKeySleepTime" );
//
//	this->ProcessEvent ( pResetKeySleepTime, &parms, NULL );
//
//}
//
//float APlayerController::GetKeySleepTime (  )
//{
//	static UFunction* pGetKeySleepTime = 0;
//	APlayerController_execGetKeySleepTime_Parms parms;
//
//	if ( !pGetKeySleepTime )
//		pGetKeySleepTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetKeySleepTime" );
//
//	this->ProcessEvent ( pGetKeySleepTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::CloseWeb ( struct FString C )
//{
//	static UFunction* pCloseWeb = 0;
//	APlayerController_execCloseWeb_Parms parms;
//
//	if ( !pCloseWeb )
//		pCloseWeb = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CloseWeb" );
//
//	parms.C = C;
//	this->ProcessEvent ( pCloseWeb, &parms, NULL );
//
//}
//
//void APlayerController::OpenWeb ( struct FString C, int X, int Y, int width, int Height )
//{
//	static UFunction* pOpenWeb = 0;
//	APlayerController_execOpenWeb_Parms parms;
//
//	if ( !pOpenWeb )
//		pOpenWeb = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.OpenWeb" );
//
//	parms.C = C;
//	parms.X = X;
//	parms.Y = Y;
//	parms.width = width;
//	parms.Height = Height;
//	this->ProcessEvent ( pOpenWeb, &parms, NULL );
//
//}
//
//bool APlayerController::CheckSpeedHack ( float DeltaTime )
//{
//	static UFunction* pCheckSpeedHack = 0;
//	APlayerController_execCheckSpeedHack_Parms parms;
//
//	if ( !pCheckSpeedHack )
//		pCheckSpeedHack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CheckSpeedHack" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pCheckSpeedHack, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::eventServerValidationResponse ( struct FString R )
//{
//	static UFunction* pServerValidationResponse = 0;
//	APlayerController_eventServerValidationResponse_Parms parms;
//
//	if ( !pServerValidationResponse )
//		pServerValidationResponse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ServerValidationResponse" );
//
//	parms.R = R;
//	this->ProcessEvent ( pServerValidationResponse, &parms, NULL );
//
//}
//
//void APlayerController::eventClientValidate ( struct FString C )
//{
//	static UFunction* pClientValidate = 0;
//	APlayerController_eventClientValidate_Parms parms;
//
//	if ( !pClientValidate )
//		pClientValidate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientValidate" );
//
//	parms.C = C;
//	this->ProcessEvent ( pClientValidate, &parms, NULL );
//
//}
//
//struct FString APlayerController::PasteFromClipboard (  )
//{
//	static UFunction* pPasteFromClipboard = 0;
//	APlayerController_execPasteFromClipboard_Parms parms;
//
//	if ( !pPasteFromClipboard )
//		pPasteFromClipboard = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.PasteFromClipboard" );
//
//	this->ProcessEvent ( pPasteFromClipboard, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::CopyToClipboard ( struct FString Text )
//{
//	static UFunction* pCopyToClipboard = 0;
//	APlayerController_execCopyToClipboard_Parms parms;
//
//	if ( !pCopyToClipboard )
//		pCopyToClipboard = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.CopyToClipboard" );
//
//	parms.Text = Text;
//	this->ProcessEvent ( pCopyToClipboard, &parms, NULL );
//
//}
//
//struct FString APlayerController::GetDefaultURL ( struct FString Option )
//{
//	static UFunction* pGetDefaultURL = 0;
//	APlayerController_execGetDefaultURL_Parms parms;
//
//	if ( !pGetDefaultURL )
//		pGetDefaultURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetDefaultURL" );
//
//	parms.Option = Option;
//	this->ProcessEvent ( pGetDefaultURL, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APlayerController::GetURLProtocol (  )
//{
//	static UFunction* pGetURLProtocol = 0;
//	APlayerController_execGetURLProtocol_Parms parms;
//
//	if ( !pGetURLProtocol )
//		pGetURLProtocol = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetURLProtocol" );
//
//	this->ProcessEvent ( pGetURLProtocol, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::eventClientTravel ( struct FString URL, unsigned char TravelType, bool bItems )
//{
//	static UFunction* pClientTravel = 0;
//	APlayerController_eventClientTravel_Parms parms;
//
//	if ( !pClientTravel )
//		pClientTravel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ClientTravel" );
//
//	parms.URL = URL;
//	parms.TravelType = TravelType;
//	parms.bItems = bItems;
//	this->ProcessEvent ( pClientTravel, &parms, NULL );
//
//}
//
//void APlayerController::SetViewTarget ( class AActor* NewViewTarget )
//{
//	static UFunction* pSetViewTarget = 0;
//	APlayerController_execSetViewTarget_Parms parms;
//
//	if ( !pSetViewTarget )
//		pSetViewTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetViewTarget" );
//
//	parms.NewViewTarget = NewViewTarget;
//	this->ProcessEvent ( pSetViewTarget, &parms, NULL );
//
//}
//
//void APlayerController::ResetInput (  )
//{
//	static UFunction* pResetInput = 0;
//	APlayerController_execResetInput_Parms parms;
//
//	if ( !pResetInput )
//		pResetInput = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ResetInput" );
//
//	this->ProcessEvent ( pResetInput, &parms, NULL );
//
//}
//
//void APlayerController::ResetKeyboard (  )
//{
//	static UFunction* pResetKeyboard = 0;
//	APlayerController_execResetKeyboard_Parms parms;
//
//	if ( !pResetKeyboard )
//		pResetKeyboard = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ResetKeyboard" );
//
//	WORD iNative = pResetKeyboard->iNative;
//	pResetKeyboard->FunctionFlags &= ~FUNC_Native;
//	pResetKeyboard->iNative = 0;
//
//	this->ProcessEvent ( pResetKeyboard, &parms, NULL );
//
//	pResetKeyboard->iNative = iNative;
//	pResetKeyboard->FunctionFlags |= FUNC_Native;
//}
//
//class ALevelInfo* APlayerController::GetEntryLevel (  )
//{
//	static UFunction* pGetEntryLevel = 0;
//	APlayerController_execGetEntryLevel_Parms parms;
//
//	if ( !pGetEntryLevel )
//		pGetEntryLevel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetEntryLevel" );
//
//	this->ProcessEvent ( pGetEntryLevel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APlayerController::ConsoleCommand ( struct FString Command, bool bWriteToLog )
//{
//	static UFunction* pConsoleCommand = 0;
//	APlayerController_execConsoleCommand_Parms parms;
//
//	if ( !pConsoleCommand )
//		pConsoleCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.ConsoleCommand" );
//
//	parms.Command = Command;
//	parms.bWriteToLog = bWriteToLog;
//	this->ProcessEvent ( pConsoleCommand, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APlayerController::GetServerNetworkAddress (  )
//{
//	static UFunction* pGetServerNetworkAddress = 0;
//	APlayerController_execGetServerNetworkAddress_Parms parms;
//
//	if ( !pGetServerNetworkAddress )
//		pGetServerNetworkAddress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetServerNetworkAddress" );
//
//	this->ProcessEvent ( pGetServerNetworkAddress, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APlayerController::GetPlayerNetworkAddress (  )
//{
//	static UFunction* pGetPlayerNetworkAddress = 0;
//	APlayerController_execGetPlayerNetworkAddress_Parms parms;
//
//	if ( !pGetPlayerNetworkAddress )
//		pGetPlayerNetworkAddress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetPlayerNetworkAddress" );
//
//	this->ProcessEvent ( pGetPlayerNetworkAddress, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APlayerController::GetPlayerIDHash (  )
//{
//	static UFunction* pGetPlayerIDHash = 0;
//	APlayerController_execGetPlayerIDHash_Parms parms;
//
//	if ( !pGetPlayerIDHash )
//		pGetPlayerIDHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.GetPlayerIDHash" );
//
//	this->ProcessEvent ( pGetPlayerIDHash, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerController::SetNetSpeed ( int NewSpeed )
//{
//	static UFunction* pSetNetSpeed = 0;
//	APlayerController_execSetNetSpeed_Parms parms;
//
//	if ( !pSetNetSpeed )
//		pSetNetSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerController.SetNetSpeed" );
//
//	parms.NewSpeed = NewSpeed;
//	this->ProcessEvent ( pSetNetSpeed, &parms, NULL );
//
//}
//
//void AAIController::Startle ( class AActor* A )
//{
//	static UFunction* pStartle = 0;
//	AAIController_execStartle_Parms parms;
//
//	if ( !pStartle )
//		pStartle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.Startle" );
//
//	parms.A = A;
//	this->ProcessEvent ( pStartle, &parms, NULL );
//
//}
//
//bool AAIController::PriorityObjective (  )
//{
//	static UFunction* pPriorityObjective = 0;
//	AAIController_execPriorityObjective_Parms parms;
//
//	if ( !pPriorityObjective )
//		pPriorityObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.PriorityObjective" );
//
//	this->ProcessEvent ( pPriorityObjective, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAIController::UnderLift ( class AMover* M )
//{
//	static UFunction* pUnderLift = 0;
//	AAIController_execUnderLift_Parms parms;
//
//	if ( !pUnderLift )
//		pUnderLift = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.UnderLift" );
//
//	parms.M = M;
//	this->ProcessEvent ( pUnderLift, &parms, NULL );
//
//}
//
//void AAIController::MoverFinished (  )
//{
//	static UFunction* pMoverFinished = 0;
//	AAIController_execMoverFinished_Parms parms;
//
//	if ( !pMoverFinished )
//		pMoverFinished = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.MoverFinished" );
//
//	this->ProcessEvent ( pMoverFinished, &parms, NULL );
//
//}
//
//void AAIController::WaitForMover ( class AMover* M )
//{
//	static UFunction* pWaitForMover = 0;
//	AAIController_execWaitForMover_Parms parms;
//
//	if ( !pWaitForMover )
//		pWaitForMover = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.WaitForMover" );
//
//	parms.M = M;
//	this->ProcessEvent ( pWaitForMover, &parms, NULL );
//
//}
//
//void AAIController::eventPrepareForMove ( class ANavigationPoint* Goal, class UReachSpec* Path )
//{
//	static UFunction* pPrepareForMove = 0;
//	AAIController_eventPrepareForMove_Parms parms;
//
//	if ( !pPrepareForMove )
//		pPrepareForMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.PrepareForMove" );
//
//	parms.Goal = Goal;
//	parms.Path = Path;
//	this->ProcessEvent ( pPrepareForMove, &parms, NULL );
//
//}
//
//struct FName AAIController::GetOrders (  )
//{
//	static UFunction* pGetOrders = 0;
//	AAIController_execGetOrders_Parms parms;
//
//	if ( !pGetOrders )
//		pGetOrders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.GetOrders" );
//
//	this->ProcessEvent ( pGetOrders, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* AAIController::GetOrderObject (  )
//{
//	static UFunction* pGetOrderObject = 0;
//	AAIController_execGetOrderObject_Parms parms;
//
//	if ( !pGetOrderObject )
//		pGetOrderObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.GetOrderObject" );
//
//	this->ProcessEvent ( pGetOrderObject, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAIController::SetOrders ( struct FName NewOrders, class AController* OrderGiver )
//{
//	static UFunction* pSetOrders = 0;
//	AAIController_execSetOrders_Parms parms;
//
//	if ( !pSetOrders )
//		pSetOrders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.SetOrders" );
//
//	parms.NewOrders = NewOrders;
//	parms.OrderGiver = OrderGiver;
//	this->ProcessEvent ( pSetOrders, &parms, NULL );
//
//}
//
//void AAIController::eventAdjustView ( float DeltaTime )
//{
//	static UFunction* pAdjustView = 0;
//	AAIController_eventAdjustView_Parms parms;
//
//	if ( !pAdjustView )
//		pAdjustView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.AdjustView" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pAdjustView, &parms, NULL );
//
//}
//
//int AAIController::GetFacingDirection (  )
//{
//	static UFunction* pGetFacingDirection = 0;
//	AAIController_execGetFacingDirection_Parms parms;
//
//	if ( !pGetFacingDirection )
//		pGetFacingDirection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.GetFacingDirection" );
//
//	this->ProcessEvent ( pGetFacingDirection, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AAIController::AdjustDesireFor ( class APickup* P )
//{
//	static UFunction* pAdjustDesireFor = 0;
//	AAIController_execAdjustDesireFor_Parms parms;
//
//	if ( !pAdjustDesireFor )
//		pAdjustDesireFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.AdjustDesireFor" );
//
//	parms.P = P;
//	this->ProcessEvent ( pAdjustDesireFor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAIController::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	AAIController_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//bool AAIController::TriggerScript ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTriggerScript = 0;
//	AAIController_execTriggerScript_Parms parms;
//
//	if ( !pTriggerScript )
//		pTriggerScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.TriggerScript" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTriggerScript, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAIController::WeaponFireAgain ( float RefireRate, bool bFinishedFire )
//{
//	static UFunction* pWeaponFireAgain = 0;
//	AAIController_execWeaponFireAgain_Parms parms;
//
//	if ( !pWeaponFireAgain )
//		pWeaponFireAgain = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.WeaponFireAgain" );
//
//	parms.RefireRate = RefireRate;
//	parms.bFinishedFire = bFinishedFire;
//	this->ProcessEvent ( pWeaponFireAgain, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAIController::Trigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	AAIController_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//float AAIController::RateWeapon ( class AwWeapon* W )
//{
//	static UFunction* pRateWeapon = 0;
//	AAIController_execRateWeapon_Parms parms;
//
//	if ( !pRateWeapon )
//		pRateWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.RateWeapon" );
//
//	parms.W = W;
//	this->ProcessEvent ( pRateWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAIController::Reset (  )
//{
//	static UFunction* pReset = 0;
//	AAIController_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void AAIController::eventPreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AAIController_eventPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void AAIController::WaitToSeeEnemy (  )
//{
//	static UFunction* pWaitToSeeEnemy = 0;
//	AAIController_execWaitToSeeEnemy_Parms parms;
//
//	if ( !pWaitToSeeEnemy )
//		pWaitToSeeEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AIController.WaitToSeeEnemy" );
//
//	WORD iNative = pWaitToSeeEnemy->iNative;
//	pWaitToSeeEnemy->FunctionFlags &= ~FUNC_Native;
//	pWaitToSeeEnemy->iNative = 0;
//
//	this->ProcessEvent ( pWaitToSeeEnemy, &parms, NULL );
//
//	pWaitToSeeEnemy->iNative = iNative;
//	pWaitToSeeEnemy->FunctionFlags |= FUNC_Native;
//}
//
//struct FString AInventory::StaticItemName (  )
//{
//	static UFunction* pStaticItemName = 0;
//	AInventory_execStaticItemName_Parms parms;
//
//	if ( !pStaticItemName )
//		pStaticItemName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.StaticItemName" );
//
//	this->ProcessEvent ( pStaticItemName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AInventory::SetOwnerDisplay (  )
//{
//	static UFunction* pSetOwnerDisplay = 0;
//	AInventory_execSetOwnerDisplay_Parms parms;
//
//	if ( !pSetOwnerDisplay )
//		pSetOwnerDisplay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.SetOwnerDisplay" );
//
//	this->ProcessEvent ( pSetOwnerDisplay, &parms, NULL );
//
//}
//
//void AInventory::OwnerEvent ( struct FName EventName )
//{
//	static UFunction* pOwnerEvent = 0;
//	AInventory_execOwnerEvent_Parms parms;
//
//	if ( !pOwnerEvent )
//		pOwnerEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.OwnerEvent" );
//
//	parms.EventName = EventName;
//	this->ProcessEvent ( pOwnerEvent, &parms, NULL );
//
//}
//
//class AArmor* AInventory::PrioritizeArmor ( int Damage, class UClass* DamageType, struct FVector HitLocation )
//{
//	static UFunction* pPrioritizeArmor = 0;
//	AInventory_execPrioritizeArmor_Parms parms;
//
//	if ( !pPrioritizeArmor )
//		pPrioritizeArmor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.PrioritizeArmor" );
//
//	parms.Damage = Damage;
//	parms.DamageType = DamageType;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pPrioritizeArmor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* AInventory::NextWeapon ( class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon )
//{
//	static UFunction* pNextWeapon = 0;
//	AInventory_execNextWeapon_Parms parms;
//
//	if ( !pNextWeapon )
//		pNextWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.NextWeapon" );
//
//	parms.CurrentChoice = CurrentChoice;
//	parms.CurrentWeapon = CurrentWeapon;
//	this->ProcessEvent ( pNextWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* AInventory::PrevWeapon ( class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon )
//{
//	static UFunction* pPrevWeapon = 0;
//	AInventory_execPrevWeapon_Parms parms;
//
//	if ( !pPrevWeapon )
//		pPrevWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.PrevWeapon" );
//
//	parms.CurrentChoice = CurrentChoice;
//	parms.CurrentWeapon = CurrentWeapon;
//	this->ProcessEvent ( pPrevWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* AInventory::WeaponChangeWID ( int iWeaponID )
//{
//	static UFunction* pWeaponChangeWID = 0;
//	AInventory_execWeaponChangeWID_Parms parms;
//
//	if ( !pWeaponChangeWID )
//		pWeaponChangeWID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.WeaponChangeWID" );
//
//	parms.iWeaponID = iWeaponID;
//	this->ProcessEvent ( pWeaponChangeWID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* AInventory::WeaponChangeWClass ( struct FName wClass )
//{
//	static UFunction* pWeaponChangeWClass = 0;
//	AInventory_execWeaponChangeWClass_Parms parms;
//
//	if ( !pWeaponChangeWClass )
//		pWeaponChangeWClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.WeaponChangeWClass" );
//
//	parms.wClass = wClass;
//	this->ProcessEvent ( pWeaponChangeWClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* AInventory::WeaponChange ( unsigned char f, bool bSilent )
//{
//	static UFunction* pWeaponChange = 0;
//	AInventory_execWeaponChange_Parms parms;
//
//	if ( !pWeaponChange )
//		pWeaponChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.WeaponChange" );
//
//	parms.f = f;
//	parms.bSilent = bSilent;
//	this->ProcessEvent ( pWeaponChange, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AInventory::Use ( float Value )
//{
//	static UFunction* pUse = 0;
//	AInventory_execUse_Parms parms;
//
//	if ( !pUse )
//		pUse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.Use" );
//
//	parms.Value = Value;
//	this->ProcessEvent ( pUse, &parms, NULL );
//
//}
//
//void AInventory::DropFrom ( struct FVector StartLocation, struct FRotator StartRotation )
//{
//	static UFunction* pDropFrom = 0;
//	AInventory_execDropFrom_Parms parms;
//
//	if ( !pDropFrom )
//		pDropFrom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.DropFrom" );
//
//	parms.StartLocation = StartLocation;
//	parms.StartRotation = StartRotation;
//	this->ProcessEvent ( pDropFrom, &parms, NULL );
//
//}
//
//class APowerups* AInventory::SelectNext (  )
//{
//	static UFunction* pSelectNext = 0;
//	AInventory_execSelectNext_Parms parms;
//
//	if ( !pSelectNext )
//		pSelectNext = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.SelectNext" );
//
//	this->ProcessEvent ( pSelectNext, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AInventory::HandlePickupQuery ( class APickup* Item )
//{
//	static UFunction* pHandlePickupQuery = 0;
//	AInventory_execHandlePickupQuery_Parms parms;
//
//	if ( !pHandlePickupQuery )
//		pHandlePickupQuery = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.HandlePickupQuery" );
//
//	parms.Item = Item;
//	this->ProcessEvent ( pHandlePickupQuery, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AInventory::GiveTo ( class APawn* Other, class APickup* Pickup )
//{
//	static UFunction* pGiveTo = 0;
//	AInventory_execGiveTo_Parms parms;
//
//	if ( !pGiveTo )
//		pGiveTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.GiveTo" );
//
//	parms.Other = Other;
//	parms.Pickup = Pickup;
//	this->ProcessEvent ( pGiveTo, &parms, NULL );
//
//}
//
//void AInventory::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AInventory_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AInventory::TravelPostAccept (  )
//{
//	static UFunction* pTravelPostAccept = 0;
//	AInventory_execTravelPostAccept_Parms parms;
//
//	if ( !pTravelPostAccept )
//		pTravelPostAccept = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.TravelPostAccept" );
//
//	this->ProcessEvent ( pTravelPostAccept, &parms, NULL );
//
//}
//
//void AInventory::eventTravelPreAccept (  )
//{
//	static UFunction* pTravelPreAccept = 0;
//	AInventory_eventTravelPreAccept_Parms parms;
//
//	if ( !pTravelPreAccept )
//		pTravelPreAccept = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.TravelPreAccept" );
//
//	this->ProcessEvent ( pTravelPreAccept, &parms, NULL );
//
//}
//
//class AwWeapon* AInventory::RecommendWeapon ( float* rating )
//{
//	static UFunction* pRecommendWeapon = 0;
//	AInventory_execRecommendWeapon_Parms parms;
//
//	if ( !pRecommendWeapon )
//		pRecommendWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.RecommendWeapon" );
//
//	parms.rating = *rating;
//	this->ProcessEvent ( pRecommendWeapon, &parms, NULL );
//
//	*rating = parms.rating;
//	return parms.ReturnValue;
//}
//
//void AInventory::PickupFunction ( class APawn* Other )
//{
//	static UFunction* pPickupFunction = 0;
//	AInventory_execPickupFunction_Parms parms;
//
//	if ( !pPickupFunction )
//		pPickupFunction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.PickupFunction" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pPickupFunction, &parms, NULL );
//
//}
//
//struct FString AInventory::GetHumanReadableName (  )
//{
//	static UFunction* pGetHumanReadableName = 0;
//	AInventory_execGetHumanReadableName_Parms parms;
//
//	if ( !pGetHumanReadableName )
//		pGetHumanReadableName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.GetHumanReadableName" );
//
//	this->ProcessEvent ( pGetHumanReadableName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AInventory::eventRenderOverlays ( class UCanvas* Canvas )
//{
//	static UFunction* pRenderOverlays = 0;
//	AInventory_eventRenderOverlays_Parms parms;
//
//	if ( !pRenderOverlays )
//		pRenderOverlays = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.RenderOverlays" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pRenderOverlays, &parms, NULL );
//
//}
//
//void AInventory::DetachFromPawn ( class APawn* P )
//{
//	static UFunction* pDetachFromPawn = 0;
//	AInventory_execDetachFromPawn_Parms parms;
//
//	if ( !pDetachFromPawn )
//		pDetachFromPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.DetachFromPawn" );
//
//	parms.P = P;
//	this->ProcessEvent ( pDetachFromPawn, &parms, NULL );
//
//}
//
//void AInventory::execupdaterelative ( int Pitch, int Yaw, int Roll )
//{
//	static UFunction* pupdaterelative = 0;
//	AInventory_execupdaterelative_Parms parms;
//
//	if ( !pupdaterelative )
//		pupdaterelative = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.updaterelative" );
//
//	parms.Pitch = Pitch;
//	parms.Yaw = Yaw;
//	parms.Roll = Roll;
//	this->ProcessEvent ( pupdaterelative, &parms, NULL );
//
//}
//
//void AInventory::AttachToPawn ( class APawn* P )
//{
//	static UFunction* pAttachToPawn = 0;
//	AInventory_execAttachToPawn_Parms parms;
//
//	if ( !pAttachToPawn )
//		pAttachToPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Inventory.AttachToPawn" );
//
//	parms.P = P;
//	this->ProcessEvent ( pAttachToPawn, &parms, NULL );
//
//}
//
//bool AwAmmunition::AddAmmo ( int AmmoToAdd )
//{
//	static UFunction* pAddAmmo = 0;
//	AwAmmunition_execAddAmmo_Parms parms;
//
//	if ( !pAddAmmo )
//		pAddAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAmmunition.AddAmmo" );
//
//	parms.AmmoToAdd = AmmoToAdd;
//	this->ProcessEvent ( pAddAmmo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwAmmunition::HandlePickupQuery ( class APickup* Item )
//{
//	static UFunction* pHandlePickupQuery = 0;
//	AwAmmunition_execHandlePickupQuery_Parms parms;
//
//	if ( !pHandlePickupQuery )
//		pHandlePickupQuery = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAmmunition.HandlePickupQuery" );
//
//	parms.Item = Item;
//	this->ProcessEvent ( pHandlePickupQuery, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwAmmunition::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	AwAmmunition_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAmmunition.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//bool AwAmmunition::HasAmmo (  )
//{
//	static UFunction* pHasAmmo = 0;
//	AwAmmunition_execHasAmmo_Parms parms;
//
//	if ( !pHasAmmo )
//		pHasAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAmmunition.HasAmmo" );
//
//	this->ProcessEvent ( pHasAmmo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwAmmunition::UseAmmo ( int AmountNeeded, bool bAmountNeededIsMax )
//{
//	static UFunction* pUseAmmo = 0;
//	AwAmmunition_execUseAmmo_Parms parms;
//
//	if ( !pUseAmmo )
//		pUseAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAmmunition.UseAmmo" );
//
//	parms.AmountNeeded = AmountNeeded;
//	parms.bAmountNeededIsMax = bAmountNeededIsMax;
//	this->ProcessEvent ( pUseAmmo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwAmmunition::CheckOutOfAmmo (  )
//{
//	static UFunction* pCheckOutOfAmmo = 0;
//	AwAmmunition_execCheckOutOfAmmo_Parms parms;
//
//	if ( !pCheckOutOfAmmo )
//		pCheckOutOfAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAmmunition.CheckOutOfAmmo" );
//
//	this->ProcessEvent ( pCheckOutOfAmmo, &parms, NULL );
//
//}
//
//struct FString APowerups::GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2 )
//{
//	static UFunction* pGetLocalString = 0;
//	APowerups_execGetLocalString_Parms parms;
//
//	if ( !pGetLocalString )
//		pGetLocalString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Powerups.GetLocalString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	this->ProcessEvent ( pGetLocalString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APowerups::UsedUp (  )
//{
//	static UFunction* pUsedUp = 0;
//	APowerups_execUsedUp_Parms parms;
//
//	if ( !pUsedUp )
//		pUsedUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Powerups.UsedUp" );
//
//	this->ProcessEvent ( pUsedUp, &parms, NULL );
//
//}
//
//void APowerups::FireEffect (  )
//{
//	static UFunction* pFireEffect = 0;
//	APowerups_execFireEffect_Parms parms;
//
//	if ( !pFireEffect )
//		pFireEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Powerups.FireEffect" );
//
//	this->ProcessEvent ( pFireEffect, &parms, NULL );
//
//}
//
//float APowerups::UseCharge ( float Amount )
//{
//	static UFunction* pUseCharge = 0;
//	APowerups_execUseCharge_Parms parms;
//
//	if ( !pUseCharge )
//		pUseCharge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Powerups.UseCharge" );
//
//	parms.Amount = Amount;
//	this->ProcessEvent ( pUseCharge, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APowerups::HandlePickupQuery ( class APickup* Item )
//{
//	static UFunction* pHandlePickupQuery = 0;
//	APowerups_execHandlePickupQuery_Parms parms;
//
//	if ( !pHandlePickupQuery )
//		pHandlePickupQuery = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Powerups.HandlePickupQuery" );
//
//	parms.Item = Item;
//	this->ProcessEvent ( pHandlePickupQuery, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APowerups::Activate (  )
//{
//	static UFunction* pActivate = 0;
//	APowerups_execActivate_Parms parms;
//
//	if ( !pActivate )
//		pActivate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Powerups.Activate" );
//
//	this->ProcessEvent ( pActivate, &parms, NULL );
//
//}
//
//class APowerups* APowerups::SelectNext (  )
//{
//	static UFunction* pSelectNext = 0;
//	APowerups_execSelectNext_Parms parms;
//
//	if ( !pSelectNext )
//		pSelectNext = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Powerups.SelectNext" );
//
//	this->ProcessEvent ( pSelectNext, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APowerups::PickupFunction ( class APawn* Other )
//{
//	static UFunction* pPickupFunction = 0;
//	APowerups_execPickupFunction_Parms parms;
//
//	if ( !pPickupFunction )
//		pPickupFunction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Powerups.PickupFunction" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pPickupFunction, &parms, NULL );
//
//}
//
//void APowerups::eventTravelPreAccept (  )
//{
//	static UFunction* pTravelPreAccept = 0;
//	APowerups_eventTravelPreAccept_Parms parms;
//
//	if ( !pTravelPreAccept )
//		pTravelPreAccept = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Powerups.TravelPreAccept" );
//
//	this->ProcessEvent ( pTravelPreAccept, &parms, NULL );
//
//}
//
//float APickup::GetRespawnTime (  )
//{
//	static UFunction* pGetRespawnTime = 0;
//	APickup_execGetRespawnTime_Parms parms;
//
//	if ( !pGetRespawnTime )
//		pGetRespawnTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.GetRespawnTime" );
//
//	this->ProcessEvent ( pGetRespawnTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APickup::eventLanded ( struct FVector HitNormal )
//{
//	static UFunction* pLanded = 0;
//	APickup_eventLanded_Parms parms;
//
//	if ( !pLanded )
//		pLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.Landed" );
//
//	parms.HitNormal = HitNormal;
//	this->ProcessEvent ( pLanded, &parms, NULL );
//
//}
//
//bool APickup::ReadyToPickup ( float MaxWait )
//{
//	static UFunction* pReadyToPickup = 0;
//	APickup_execReadyToPickup_Parms parms;
//
//	if ( !pReadyToPickup )
//		pReadyToPickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.ReadyToPickup" );
//
//	parms.MaxWait = MaxWait;
//	this->ProcessEvent ( pReadyToPickup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APickup::InitDroppedPack (  )
//{
//	static UFunction* pInitDroppedPack = 0;
//	APickup_execInitDroppedPack_Parms parms;
//
//	if ( !pInitDroppedPack )
//		pInitDroppedPack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.InitDroppedPack" );
//
//	this->ProcessEvent ( pInitDroppedPack, &parms, NULL );
//
//}
//
//void APickup::InitDroppedPickupFor ( class AInventory* Inv )
//{
//	static UFunction* pInitDroppedPickupFor = 0;
//	APickup_execInitDroppedPickupFor_Parms parms;
//
//	if ( !pInitDroppedPickupFor )
//		pInitDroppedPickupFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.InitDroppedPickupFor" );
//
//	parms.Inv = Inv;
//	this->ProcessEvent ( pInitDroppedPickupFor, &parms, NULL );
//
//}
//
//struct FString APickup::GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2 )
//{
//	static UFunction* pGetLocalString = 0;
//	APickup_execGetLocalString_Parms parms;
//
//	if ( !pGetLocalString )
//		pGetLocalString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.GetLocalString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	this->ProcessEvent ( pGetLocalString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APickup::SetRespawn (  )
//{
//	static UFunction* pSetRespawn = 0;
//	APickup_execSetRespawn_Parms parms;
//
//	if ( !pSetRespawn )
//		pSetRespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.SetRespawn" );
//
//	this->ProcessEvent ( pSetRespawn, &parms, NULL );
//
//}
//
//void APickup::AnnouncePickup ( class APawn* Receiver )
//{
//	static UFunction* pAnnouncePickup = 0;
//	APickup_execAnnouncePickup_Parms parms;
//
//	if ( !pAnnouncePickup )
//		pAnnouncePickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.AnnouncePickup" );
//
//	parms.Receiver = Receiver;
//	this->ProcessEvent ( pAnnouncePickup, &parms, NULL );
//
//}
//
//void APickup::StartSleeping (  )
//{
//	static UFunction* pStartSleeping = 0;
//	APickup_execStartSleeping_Parms parms;
//
//	if ( !pStartSleeping )
//		pStartSleeping = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.StartSleeping" );
//
//	this->ProcessEvent ( pStartSleeping, &parms, NULL );
//
//}
//
//class AInventory* APickup::SpawnCopy ( class APawn* Other )
//{
//	static UFunction* pSpawnCopy = 0;
//	APickup_execSpawnCopy_Parms parms;
//
//	if ( !pSpawnCopy )
//		pSpawnCopy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.SpawnCopy" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSpawnCopy, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float APickup::BotDesireability ( class APawn* Bot )
//{
//	static UFunction* pBotDesireability = 0;
//	APickup_execBotDesireability_Parms parms;
//
//	if ( !pBotDesireability )
//		pBotDesireability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.BotDesireability" );
//
//	parms.Bot = Bot;
//	this->ProcessEvent ( pBotDesireability, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float APickup::DetourWeight ( class APawn* Other, float PathWeight )
//{
//	static UFunction* pDetourWeight = 0;
//	APickup_execDetourWeight_Parms parms;
//
//	if ( !pDetourWeight )
//		pDetourWeight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.DetourWeight" );
//
//	parms.Other = Other;
//	parms.PathWeight = PathWeight;
//	this->ProcessEvent ( pDetourWeight, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class APickup* APickup::Transmogrify ( class UClass* NewClass )
//{
//	static UFunction* pTransmogrify = 0;
//	APickup_execTransmogrify_Parms parms;
//
//	if ( !pTransmogrify )
//		pTransmogrify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.Transmogrify" );
//
//	parms.NewClass = NewClass;
//	this->ProcessEvent ( pTransmogrify, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APickup::RespawnEffect (  )
//{
//	static UFunction* pRespawnEffect = 0;
//	APickup_execRespawnEffect_Parms parms;
//
//	if ( !pRespawnEffect )
//		pRespawnEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.RespawnEffect" );
//
//	this->ProcessEvent ( pRespawnEffect, &parms, NULL );
//
//}
//
//void APickup::Reset (  )
//{
//	static UFunction* pReset = 0;
//	APickup_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void APickup::UpdateHUD ( class AHUD* H )
//{
//	static UFunction* pUpdateHUD = 0;
//	APickup_execUpdateHUD_Parms parms;
//
//	if ( !pUpdateHUD )
//		pUpdateHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.UpdateHUD" );
//
//	parms.H = H;
//	this->ProcessEvent ( pUpdateHUD, &parms, NULL );
//
//}
//
//bool APickup::IsSuperItem (  )
//{
//	static UFunction* pIsSuperItem = 0;
//	APickup_execIsSuperItem_Parms parms;
//
//	if ( !pIsSuperItem )
//		pIsSuperItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.IsSuperItem" );
//
//	this->ProcessEvent ( pIsSuperItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APickup::GetHumanReadableName (  )
//{
//	static UFunction* pGetHumanReadableName = 0;
//	APickup_execGetHumanReadableName_Parms parms;
//
//	if ( !pGetHumanReadableName )
//		pGetHumanReadableName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.GetHumanReadableName" );
//
//	this->ProcessEvent ( pGetHumanReadableName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APickup::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	APickup_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void APickup::StaticPrecache ( class ALevelInfo* L )
//{
//	static UFunction* pStaticPrecache = 0;
//	APickup_execStaticPrecache_Parms parms;
//
//	if ( !pStaticPrecache )
//		pStaticPrecache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.StaticPrecache" );
//
//	parms.L = L;
//	this->ProcessEvent ( pStaticPrecache, &parms, NULL );
//
//}
//
//void APickup::RemoveFromNavigation (  )
//{
//	static UFunction* pRemoveFromNavigation = 0;
//	APickup_execRemoveFromNavigation_Parms parms;
//
//	if ( !pRemoveFromNavigation )
//		pRemoveFromNavigation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.RemoveFromNavigation" );
//
//	this->ProcessEvent ( pRemoveFromNavigation, &parms, NULL );
//
//}
//
//void APickup::AddToNavigation (  )
//{
//	static UFunction* pAddToNavigation = 0;
//	APickup_execAddToNavigation_Parms parms;
//
//	if ( !pAddToNavigation )
//		pAddToNavigation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Pickup.AddToNavigation" );
//
//	this->ProcessEvent ( pAddToNavigation, &parms, NULL );
//
//}
//
//void AwWeaponPickup::Tick ( float dt )
//{
//	static UFunction* pTick = 0;
//	AwWeaponPickup_execTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.Tick" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void AwWeaponPickup::InitDroppedPickupFor ( class AInventory* Inv )
//{
//	static UFunction* pInitDroppedPickupFor = 0;
//	AwWeaponPickup_execInitDroppedPickupFor_Parms parms;
//
//	if ( !pInitDroppedPickupFor )
//		pInitDroppedPickupFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.InitDroppedPickupFor" );
//
//	parms.Inv = Inv;
//	this->ProcessEvent ( pInitDroppedPickupFor, &parms, NULL );
//
//}
//
//void AwWeaponPickup::UnTouch ( class AActor* Other )
//{
//	static UFunction* pUnTouch = 0;
//	AwWeaponPickup_execUnTouch_Parms parms;
//
//	if ( !pUnTouch )
//		pUnTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.UnTouch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pUnTouch, &parms, NULL );
//
//}
//
//bool AwWeaponPickup::CheckIsTouchingPawn ( class APawn* P )
//{
//	static UFunction* pCheckIsTouchingPawn = 0;
//	AwWeaponPickup_execCheckIsTouchingPawn_Parms parms;
//
//	if ( !pCheckIsTouchingPawn )
//		pCheckIsTouchingPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.CheckIsTouchingPawn" );
//
//	parms.P = P;
//	this->ProcessEvent ( pCheckIsTouchingPawn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class APawn* AwWeaponPickup::AddTouchingPawn ( class APawn* P )
//{
//	static UFunction* pAddTouchingPawn = 0;
//	AwWeaponPickup_execAddTouchingPawn_Parms parms;
//
//	if ( !pAddTouchingPawn )
//		pAddTouchingPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.AddTouchingPawn" );
//
//	parms.P = P;
//	this->ProcessEvent ( pAddTouchingPawn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeaponPickup::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AwWeaponPickup_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AwWeaponPickup::PickWeapon ( class AActor* Other )
//{
//	static UFunction* pPickWeapon = 0;
//	AwWeaponPickup_execPickWeapon_Parms parms;
//
//	if ( !pPickWeapon )
//		pPickWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.PickWeapon" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pPickWeapon, &parms, NULL );
//
//}
//
//bool AwWeaponPickup::ValidTouch ( class AActor* Other )
//{
//	static UFunction* pValidTouch = 0;
//	AwWeaponPickup_execValidTouch_Parms parms;
//
//	if ( !pValidTouch )
//		pValidTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.ValidTouch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pValidTouch, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeaponPickup::SetSkin ( int iWeaponID, int iAddPartsID )
//{
//	static UFunction* pSetSkin = 0;
//	AwWeaponPickup_execSetSkin_Parms parms;
//
//	if ( !pSetSkin )
//		pSetSkin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.SetSkin" );
//
//	parms.iWeaponID = iWeaponID;
//	parms.iAddPartsID = iAddPartsID;
//	this->ProcessEvent ( pSetSkin, &parms, NULL );
//
//}
//
//void AwWeaponPickup::eventwLoadOut ( int iID, int iAddPartsID )
//{
//	static UFunction* pwLoadOut = 0;
//	AwWeaponPickup_eventwLoadOut_Parms parms;
//
//	if ( !pwLoadOut )
//		pwLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.wLoadOut" );
//
//	parms.iID = iID;
//	parms.iAddPartsID = iAddPartsID;
//	this->ProcessEvent ( pwLoadOut, &parms, NULL );
//
//}
//
//void AwWeaponPickup::Reset (  )
//{
//	static UFunction* pReset = 0;
//	AwWeaponPickup_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//float AwWeaponPickup::GetRespawnTime (  )
//{
//	static UFunction* pGetRespawnTime = 0;
//	AwWeaponPickup_execGetRespawnTime_Parms parms;
//
//	if ( !pGetRespawnTime )
//		pGetRespawnTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.GetRespawnTime" );
//
//	this->ProcessEvent ( pGetRespawnTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AwWeaponPickup::BotDesireability ( class APawn* Bot )
//{
//	static UFunction* pBotDesireability = 0;
//	AwWeaponPickup_execBotDesireability_Parms parms;
//
//	if ( !pBotDesireability )
//		pBotDesireability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.BotDesireability" );
//
//	parms.Bot = Bot;
//	this->ProcessEvent ( pBotDesireability, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AwWeaponPickup::DetourWeight ( class APawn* Other, float PathWeight )
//{
//	static UFunction* pDetourWeight = 0;
//	AwWeaponPickup_execDetourWeight_Parms parms;
//
//	if ( !pDetourWeight )
//		pDetourWeight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.DetourWeight" );
//
//	parms.Other = Other;
//	parms.PathWeight = PathWeight;
//	this->ProcessEvent ( pDetourWeight, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeaponPickup::ForceBegin (  )
//{
//	static UFunction* pForceBegin = 0;
//	AwWeaponPickup_execForceBegin_Parms parms;
//
//	if ( !pForceBegin )
//		pForceBegin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.ForceBegin" );
//
//	this->ProcessEvent ( pForceBegin, &parms, NULL );
//
//}
//
//bool AwWeaponPickup::AllowRepeatPickup (  )
//{
//	static UFunction* pAllowRepeatPickup = 0;
//	AwWeaponPickup_execAllowRepeatPickup_Parms parms;
//
//	if ( !pAllowRepeatPickup )
//		pAllowRepeatPickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.AllowRepeatPickup" );
//
//	this->ProcessEvent ( pAllowRepeatPickup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeaponPickup::StartSleeping (  )
//{
//	static UFunction* pStartSleeping = 0;
//	AwWeaponPickup_execStartSleeping_Parms parms;
//
//	if ( !pStartSleeping )
//		pStartSleeping = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.StartSleeping" );
//
//	this->ProcessEvent ( pStartSleeping, &parms, NULL );
//
//}
//
//void AwWeaponPickup::UpdateHUD ( class AHUD* H )
//{
//	static UFunction* pUpdateHUD = 0;
//	AwWeaponPickup_execUpdateHUD_Parms parms;
//
//	if ( !pUpdateHUD )
//		pUpdateHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.UpdateHUD" );
//
//	parms.H = H;
//	this->ProcessEvent ( pUpdateHUD, &parms, NULL );
//
//}
//
//void AwWeaponPickup::SetWeaponStay (  )
//{
//	static UFunction* pSetWeaponStay = 0;
//	AwWeaponPickup_execSetWeaponStay_Parms parms;
//
//	if ( !pSetWeaponStay )
//		pSetWeaponStay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.SetWeaponStay" );
//
//	this->ProcessEvent ( pSetWeaponStay, &parms, NULL );
//
//}
//
//void AwWeaponPickup::eventPostNetBeginPlay (  )
//{
//	static UFunction* pPostNetBeginPlay = 0;
//	AwWeaponPickup_eventPostNetBeginPlay_Parms parms;
//
//	if ( !pPostNetBeginPlay )
//		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.PostNetBeginPlay" );
//
//	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );
//
//}
//
//void AwWeaponPickup::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AwWeaponPickup_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponPickup.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//class AInventory* AAmmo::SpawnCopy ( class APawn* Other )
//{
//	static UFunction* pSpawnCopy = 0;
//	AAmmo_execSpawnCopy_Parms parms;
//
//	if ( !pSpawnCopy )
//		pSpawnCopy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Ammo.SpawnCopy" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSpawnCopy, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AAmmo::BotDesireability ( class APawn* Bot )
//{
//	static UFunction* pBotDesireability = 0;
//	AAmmo_execBotDesireability_Parms parms;
//
//	if ( !pBotDesireability )
//		pBotDesireability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Ammo.BotDesireability" );
//
//	parms.Bot = Bot;
//	this->ProcessEvent ( pBotDesireability, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AAmmo::DetourWeight ( class APawn* Other, float PathWeight )
//{
//	static UFunction* pDetourWeight = 0;
//	AAmmo_execDetourWeight_Parms parms;
//
//	if ( !pDetourWeight )
//		pDetourWeight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Ammo.DetourWeight" );
//
//	parms.Other = Other;
//	parms.PathWeight = PathWeight;
//	this->ProcessEvent ( pDetourWeight, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAmmo::UpdateHUD ( class AHUD* H )
//{
//	static UFunction* pUpdateHUD = 0;
//	AAmmo_execUpdateHUD_Parms parms;
//
//	if ( !pUpdateHUD )
//		pUpdateHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Ammo.UpdateHUD" );
//
//	parms.H = H;
//	this->ProcessEvent ( pUpdateHUD, &parms, NULL );
//
//}
//
//int ULogEntry::Count (  )
//{
//	static UFunction* pCount = 0;
//	ULogEntry_execCount_Parms parms;
//
//	if ( !pCount )
//		pCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LogEntry.Count" );
//
//	this->ProcessEvent ( pCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class ULogEntry* ULogEntry::Delete ( class ULogEntry* delLE )
//{
//	static UFunction* pDelete = 0;
//	ULogEntry_execDelete_Parms parms;
//
//	if ( !pDelete )
//		pDelete = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LogEntry.Delete" );
//
//	parms.delLE = delLE;
//	this->ProcessEvent ( pDelete, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ULogEntry::Insert ( class ULogEntry* newLE )
//{
//	static UFunction* pInsert = 0;
//	ULogEntry_execInsert_Parms parms;
//
//	if ( !pInsert )
//		pInsert = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LogEntry.Insert" );
//
//	parms.newLE = newLE;
//	this->ProcessEvent ( pInsert, &parms, NULL );
//
//}
//
//void AGameReplicationInfo::SetMaxLives ( int iMaxLives )
//{
//	static UFunction* pSetMaxLives = 0;
//	AGameReplicationInfo_execSetMaxLives_Parms parms;
//
//	if ( !pSetMaxLives )
//		pSetMaxLives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.SetMaxLives" );
//
//	parms.iMaxLives = iMaxLives;
//	this->ProcessEvent ( pSetMaxLives, &parms, NULL );
//
//}
//
//int AGameReplicationInfo::GetMaxLives (  )
//{
//	static UFunction* pGetMaxLives = 0;
//	AGameReplicationInfo_execGetMaxLives_Parms parms;
//
//	if ( !pGetMaxLives )
//		pGetMaxLives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.GetMaxLives" );
//
//	this->ProcessEvent ( pGetMaxLives, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameReplicationInfo::IsGhostChatting ( class AActor* Sender )
//{
//	static UFunction* pIsGhostChatting = 0;
//	AGameReplicationInfo_execIsGhostChatting_Parms parms;
//
//	if ( !pIsGhostChatting )
//		pIsGhostChatting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.IsGhostChatting" );
//
//	parms.Sender = Sender;
//	this->ProcessEvent ( pIsGhostChatting, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameReplicationInfo::IsDefender ( unsigned char Team )
//{
//	static UFunction* pIsDefender = 0;
//	AGameReplicationInfo_execIsDefender_Parms parms;
//
//	if ( !pIsDefender )
//		pIsDefender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.IsDefender" );
//
//	parms.Team = Team;
//	this->ProcessEvent ( pIsDefender, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameReplicationInfo::SyncRemainingTime (  )
//{
//	static UFunction* pSyncRemainingTime = 0;
//	AGameReplicationInfo_execSyncRemainingTime_Parms parms;
//
//	if ( !pSyncRemainingTime )
//		pSyncRemainingTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.SyncRemainingTime" );
//
//	this->ProcessEvent ( pSyncRemainingTime, &parms, NULL );
//
//}
//
//struct FString AGameReplicationInfo::eventGetDescriptionText ( struct FString PropName )
//{
//	static UFunction* pGetDescriptionText = 0;
//	AGameReplicationInfo_eventGetDescriptionText_Parms parms;
//
//	if ( !pGetDescriptionText )
//		pGetDescriptionText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.GetDescriptionText" );
//
//	parms.PropName = PropName;
//	this->ProcessEvent ( pGetDescriptionText, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameReplicationInfo::FillPlayInfo ( class UPlayInfo* PlayInfo )
//{
//	static UFunction* pFillPlayInfo = 0;
//	AGameReplicationInfo_execFillPlayInfo_Parms parms;
//
//	if ( !pFillPlayInfo )
//		pFillPlayInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.FillPlayInfo" );
//
//	parms.PlayInfo = PlayInfo;
//	this->ProcessEvent ( pFillPlayInfo, &parms, NULL );
//
//}
//
//void AGameReplicationInfo::GetPRIArray ( class TArray< class APlayerReplicationInfo* >* pris )
//{
//	static UFunction* pGetPRIArray = 0;
//	AGameReplicationInfo_execGetPRIArray_Parms parms;
//
//	if ( !pGetPRIArray )
//		pGetPRIArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.GetPRIArray" );
//
//	parms.pris = *pris;
//	this->ProcessEvent ( pGetPRIArray, &parms, NULL );
//
//	*pris = parms.pris;
//}
//
//void AGameReplicationInfo::RemovePRI ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pRemovePRI = 0;
//	AGameReplicationInfo_execRemovePRI_Parms parms;
//
//	if ( !pRemovePRI )
//		pRemovePRI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.RemovePRI" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pRemovePRI, &parms, NULL );
//
//}
//
//void AGameReplicationInfo::AddPRI ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pAddPRI = 0;
//	AGameReplicationInfo_execAddPRI_Parms parms;
//
//	if ( !pAddPRI )
//		pAddPRI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.AddPRI" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pAddPRI, &parms, NULL );
//
//}
//
//void AGameReplicationInfo::eventForcedRemovePRI ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pForcedRemovePRI = 0;
//	AGameReplicationInfo_eventForcedRemovePRI_Parms parms;
//
//	if ( !pForcedRemovePRI )
//		pForcedRemovePRI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.ForcedRemovePRI" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pForcedRemovePRI, &parms, NULL );
//
//}
//
//void AGameReplicationInfo::eventForcedAddPRI ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pForcedAddPRI = 0;
//	AGameReplicationInfo_eventForcedAddPRI_Parms parms;
//
//	if ( !pForcedAddPRI )
//		pForcedAddPRI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.ForcedAddPRI" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pForcedAddPRI, &parms, NULL );
//
//}
//
//class APlayerReplicationInfo* AGameReplicationInfo::FindPlayerByID ( int PlayerID )
//{
//	static UFunction* pFindPlayerByID = 0;
//	AGameReplicationInfo_execFindPlayerByID_Parms parms;
//
//	if ( !pFindPlayerByID )
//		pFindPlayerByID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.FindPlayerByID" );
//
//	parms.PlayerID = PlayerID;
//	this->ProcessEvent ( pFindPlayerByID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AGameReplicationInfo::GetWinTeamIndex (  )
//{
//	static UFunction* pGetWinTeamIndex = 0;
//	AGameReplicationInfo_execGetWinTeamIndex_Parms parms;
//
//	if ( !pGetWinTeamIndex )
//		pGetWinTeamIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.GetWinTeamIndex" );
//
//	this->ProcessEvent ( pGetWinTeamIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< int > AGameReplicationInfo::GetTeamScores (  )
//{
//	static UFunction* pGetTeamScores = 0;
//	AGameReplicationInfo_execGetTeamScores_Parms parms;
//
//	if ( !pGetTeamScores )
//		pGetTeamScores = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.GetTeamScores" );
//
//	this->ProcessEvent ( pGetTeamScores, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AGameReplicationInfo::GetRemainingTime (  )
//{
//	static UFunction* pGetRemainingTime = 0;
//	AGameReplicationInfo_execGetRemainingTime_Parms parms;
//
//	if ( !pGetRemainingTime )
//		pGetRemainingTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.GetRemainingTime" );
//
//	this->ProcessEvent ( pGetRemainingTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameReplicationInfo::PlayTimerSound (  )
//{
//	static UFunction* pPlayTimerSound = 0;
//	AGameReplicationInfo_execPlayTimerSound_Parms parms;
//
//	if ( !pPlayTimerSound )
//		pPlayTimerSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.PlayTimerSound" );
//
//	this->ProcessEvent ( pPlayTimerSound, &parms, NULL );
//
//}
//
//void AGameReplicationInfo::Timer (  )
//{
//	static UFunction* pTimer = 0;
//	AGameReplicationInfo_execTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//void AGameReplicationInfo::Reset (  )
//{
//	static UFunction* pReset = 0;
//	AGameReplicationInfo_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void AGameReplicationInfo::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AGameReplicationInfo_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AGameReplicationInfo::eventEventForceBegin (  )
//{
//	static UFunction* pEventForceBegin = 0;
//	AGameReplicationInfo_eventEventForceBegin_Parms parms;
//
//	if ( !pEventForceBegin )
//		pEventForceBegin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.EventForceBegin" );
//
//	this->ProcessEvent ( pEventForceBegin, &parms, NULL );
//
//}
//
//void AGameReplicationInfo::UpdatePrecacheMaterials (  )
//{
//	static UFunction* pUpdatePrecacheMaterials = 0;
//	AGameReplicationInfo_execUpdatePrecacheMaterials_Parms parms;
//
//	if ( !pUpdatePrecacheMaterials )
//		pUpdatePrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.UpdatePrecacheMaterials" );
//
//	this->ProcessEvent ( pUpdatePrecacheMaterials, &parms, NULL );
//
//}
//
//void AGameReplicationInfo::TeamSymbolNotify (  )
//{
//	static UFunction* pTeamSymbolNotify = 0;
//	AGameReplicationInfo_execTeamSymbolNotify_Parms parms;
//
//	if ( !pTeamSymbolNotify )
//		pTeamSymbolNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.TeamSymbolNotify" );
//
//	this->ProcessEvent ( pTeamSymbolNotify, &parms, NULL );
//
//}
//
//void AGameReplicationInfo::PostNetBeginPlay (  )
//{
//	static UFunction* pPostNetBeginPlay = 0;
//	AGameReplicationInfo_execPostNetBeginPlay_Parms parms;
//
//	if ( !pPostNetBeginPlay )
//		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameReplicationInfo.PostNetBeginPlay" );
//
//	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );
//
//}
//
//struct FString AInternetInfo::GetBeaconText ( int i )
//{
//	static UFunction* pGetBeaconText = 0;
//	AInternetInfo_execGetBeaconText_Parms parms;
//
//	if ( !pGetBeaconText )
//		pGetBeaconText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InternetInfo.GetBeaconText" );
//
//	parms.i = i;
//	this->ProcessEvent ( pGetBeaconText, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AInternetInfo::GetBeaconAddress ( int i )
//{
//	static UFunction* pGetBeaconAddress = 0;
//	AInternetInfo_execGetBeaconAddress_Parms parms;
//
//	if ( !pGetBeaconAddress )
//		pGetBeaconAddress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InternetInfo.GetBeaconAddress" );
//
//	parms.i = i;
//	this->ProcessEvent ( pGetBeaconAddress, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AInternetInfo::GetBeaconCount (  )
//{
//	static UFunction* pGetBeaconCount = 0;
//	AInternetInfo_execGetBeaconCount_Parms parms;
//
//	if ( !pGetBeaconCount )
//		pGetBeaconCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InternetInfo.GetBeaconCount" );
//
//	this->ProcessEvent ( pGetBeaconCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int APlayerReplicationInfo::GetCheckFriendOrClanMember (  )
//{
//	static UFunction* pGetCheckFriendOrClanMember = 0;
//	APlayerReplicationInfo_execGetCheckFriendOrClanMember_Parms parms;
//
//	if ( !pGetCheckFriendOrClanMember )
//		pGetCheckFriendOrClanMember = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.GetCheckFriendOrClanMember" );
//
//	this->ProcessEvent ( pGetCheckFriendOrClanMember, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerReplicationInfo::SetQuickSlotIdx ( int nIdx )
//{
//	static UFunction* pSetQuickSlotIdx = 0;
//	APlayerReplicationInfo_execSetQuickSlotIdx_Parms parms;
//
//	if ( !pSetQuickSlotIdx )
//		pSetQuickSlotIdx = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.SetQuickSlotIdx" );
//
//	parms.nIdx = nIdx;
//	this->ProcessEvent ( pSetQuickSlotIdx, &parms, NULL );
//
//}
//
//int APlayerReplicationInfo::GetUID (  )
//{
//	static UFunction* pGetUID = 0;
//	APlayerReplicationInfo_execGetUID_Parms parms;
//
//	if ( !pGetUID )
//		pGetUID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.GetUID" );
//
//	this->ProcessEvent ( pGetUID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool APlayerReplicationInfo::GetIsSendGameStartTime (  )
//{
//	static UFunction* pGetIsSendGameStartTime = 0;
//	APlayerReplicationInfo_execGetIsSendGameStartTime_Parms parms;
//
//	if ( !pGetIsSendGameStartTime )
//		pGetIsSendGameStartTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.GetIsSendGameStartTime" );
//
//	this->ProcessEvent ( pGetIsSendGameStartTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerReplicationInfo::SetIsSendGameStartTime ( bool bSend )
//{
//	static UFunction* pSetIsSendGameStartTime = 0;
//	APlayerReplicationInfo_execSetIsSendGameStartTime_Parms parms;
//
//	if ( !pSetIsSendGameStartTime )
//		pSetIsSendGameStartTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.SetIsSendGameStartTime" );
//
//	parms.bSend = bSend;
//	this->ProcessEvent ( pSetIsSendGameStartTime, &parms, NULL );
//
//}
//
//struct FString APlayerReplicationInfo::eventGetNameCallSign (  )
//{
//	static UFunction* pGetNameCallSign = 0;
//	APlayerReplicationInfo_eventGetNameCallSign_Parms parms;
//
//	if ( !pGetNameCallSign )
//		pGetNameCallSign = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.GetNameCallSign" );
//
//	this->ProcessEvent ( pGetNameCallSign, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APlayerReplicationInfo::GetCallSign (  )
//{
//	static UFunction* pGetCallSign = 0;
//	APlayerReplicationInfo_execGetCallSign_Parms parms;
//
//	if ( !pGetCallSign )
//		pGetCallSign = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.GetCallSign" );
//
//	this->ProcessEvent ( pGetCallSign, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerReplicationInfo::SetVoiceMemberMask ( int NewMask )
//{
//	static UFunction* pSetVoiceMemberMask = 0;
//	APlayerReplicationInfo_execSetVoiceMemberMask_Parms parms;
//
//	if ( !pSetVoiceMemberMask )
//		pSetVoiceMemberMask = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.SetVoiceMemberMask" );
//
//	parms.NewMask = NewMask;
//	this->ProcessEvent ( pSetVoiceMemberMask, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::SetChatPassword ( struct FString InPassword )
//{
//	static UFunction* pSetChatPassword = 0;
//	APlayerReplicationInfo_execSetChatPassword_Parms parms;
//
//	if ( !pSetChatPassword )
//		pSetChatPassword = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.SetChatPassword" );
//
//	parms.InPassword = InPassword;
//	this->ProcessEvent ( pSetChatPassword, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::SetWaitingPlayer ( bool B )
//{
//	static UFunction* pSetWaitingPlayer = 0;
//	APlayerReplicationInfo_execSetWaitingPlayer_Parms parms;
//
//	if ( !pSetWaitingPlayer )
//		pSetWaitingPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.SetWaitingPlayer" );
//
//	parms.B = B;
//	this->ProcessEvent ( pSetWaitingPlayer, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::SetPlayerName ( struct FString S )
//{
//	static UFunction* pSetPlayerName = 0;
//	APlayerReplicationInfo_execSetPlayerName_Parms parms;
//
//	if ( !pSetPlayerName )
//		pSetPlayerName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.SetPlayerName" );
//
//	parms.S = S;
//	this->ProcessEvent ( pSetPlayerName, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::Timer (  )
//{
//	static UFunction* pTimer = 0;
//	APlayerReplicationInfo_execTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::eventClientNameChange (  )
//{
//	static UFunction* pClientNameChange = 0;
//	APlayerReplicationInfo_eventClientNameChange_Parms parms;
//
//	if ( !pClientNameChange )
//		pClientNameChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.ClientNameChange" );
//
//	this->ProcessEvent ( pClientNameChange, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	APlayerReplicationInfo_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//void APlayerReplicationInfo::UpdatePlayerLocation (  )
//{
//	static UFunction* pUpdatePlayerLocation = 0;
//	APlayerReplicationInfo_execUpdatePlayerLocation_Parms parms;
//
//	if ( !pUpdatePlayerLocation )
//		pUpdatePlayerLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.UpdatePlayerLocation" );
//
//	this->ProcessEvent ( pUpdatePlayerLocation, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::UpdatePlayerState (  )
//{
//	static UFunction* pUpdatePlayerState = 0;
//	APlayerReplicationInfo_execUpdatePlayerState_Parms parms;
//
//	if ( !pUpdatePlayerState )
//		pUpdatePlayerState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.UpdatePlayerState" );
//
//	this->ProcessEvent ( pUpdatePlayerState, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::eventUpdateCharacter (  )
//{
//	static UFunction* pUpdateCharacter = 0;
//	APlayerReplicationInfo_eventUpdateCharacter_Parms parms;
//
//	if ( !pUpdateCharacter )
//		pUpdateCharacter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.UpdateCharacter" );
//
//	this->ProcessEvent ( pUpdateCharacter, &parms, NULL );
//
//}
//
//class UMaterial* APlayerReplicationInfo::GetPortrait (  )
//{
//	static UFunction* pGetPortrait = 0;
//	APlayerReplicationInfo_execGetPortrait_Parms parms;
//
//	if ( !pGetPortrait )
//		pGetPortrait = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.GetPortrait" );
//
//	this->ProcessEvent ( pGetPortrait, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APlayerReplicationInfo::GetLocationName (  )
//{
//	static UFunction* pGetLocationName = 0;
//	APlayerReplicationInfo_execGetLocationName_Parms parms;
//
//	if ( !pGetLocationName )
//		pGetLocationName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.GetLocationName" );
//
//	this->ProcessEvent ( pGetLocationName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString APlayerReplicationInfo::GetHumanReadableName (  )
//{
//	static UFunction* pGetHumanReadableName = 0;
//	APlayerReplicationInfo_execGetHumanReadableName_Parms parms;
//
//	if ( !pGetHumanReadableName )
//		pGetHumanReadableName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.GetHumanReadableName" );
//
//	this->ProcessEvent ( pGetHumanReadableName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerReplicationInfo::Reset (  )
//{
//	static UFunction* pReset = 0;
//	APlayerReplicationInfo_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::SetCharacterEquipItem ( int iBodyID_AF, int iBodyID_RSA, int iHeadID, int iHelmetID, int iAccessoryID )
//{
//	static UFunction* pSetCharacterEquipItem = 0;
//	APlayerReplicationInfo_execSetCharacterEquipItem_Parms parms;
//
//	if ( !pSetCharacterEquipItem )
//		pSetCharacterEquipItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.SetCharacterEquipItem" );
//
//	parms.iBodyID_AF = iBodyID_AF;
//	parms.iBodyID_RSA = iBodyID_RSA;
//	parms.iHeadID = iHeadID;
//	parms.iHelmetID = iHelmetID;
//	parms.iAccessoryID = iAccessoryID;
//	this->ProcessEvent ( pSetCharacterEquipItem, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::SetCharacterName ( struct FString S )
//{
//	static UFunction* pSetCharacterName = 0;
//	APlayerReplicationInfo_execSetCharacterName_Parms parms;
//
//	if ( !pSetCharacterName )
//		pSetCharacterName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.SetCharacterName" );
//
//	parms.S = S;
//	this->ProcessEvent ( pSetCharacterName, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::SetCharacterVoice ( struct FString S )
//{
//	static UFunction* pSetCharacterVoice = 0;
//	APlayerReplicationInfo_execSetCharacterVoice_Parms parms;
//
//	if ( !pSetCharacterVoice )
//		pSetCharacterVoice = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.SetCharacterVoice" );
//
//	parms.S = S;
//	this->ProcessEvent ( pSetCharacterVoice, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::eventLoadLevelMark (  )
//{
//	static UFunction* pLoadLevelMark = 0;
//	APlayerReplicationInfo_eventLoadLevelMark_Parms parms;
//
//	if ( !pLoadLevelMark )
//		pLoadLevelMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.LoadLevelMark" );
//
//	this->ProcessEvent ( pLoadLevelMark, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::ServerSetUAV ( float Begin, float End )
//{
//	static UFunction* pServerSetUAV = 0;
//	APlayerReplicationInfo_execServerSetUAV_Parms parms;
//
//	if ( !pServerSetUAV )
//		pServerSetUAV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.ServerSetUAV" );
//
//	parms.Begin = Begin;
//	parms.End = End;
//	this->ProcessEvent ( pServerSetUAV, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	APlayerReplicationInfo_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::eventPostNetReceive (  )
//{
//	static UFunction* pPostNetReceive = 0;
//	APlayerReplicationInfo_eventPostNetReceive_Parms parms;
//
//	if ( !pPostNetReceive )
//		pPostNetReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.PostNetReceive" );
//
//	this->ProcessEvent ( pPostNetReceive, &parms, NULL );
//
//}
//
//bool APlayerReplicationInfo::NeedNetNotify (  )
//{
//	static UFunction* pNeedNetNotify = 0;
//	APlayerReplicationInfo_execNeedNetNotify_Parms parms;
//
//	if ( !pNeedNetNotify )
//		pNeedNetNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.NeedNetNotify" );
//
//	this->ProcessEvent ( pNeedNetNotify, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void APlayerReplicationInfo::eventPostNetBeginPlay (  )
//{
//	static UFunction* pPostNetBeginPlay = 0;
//	APlayerReplicationInfo_eventPostNetBeginPlay_Parms parms;
//
//	if ( !pPostNetBeginPlay )
//		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.PostNetBeginPlay" );
//
//	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );
//
//}
//
//void APlayerReplicationInfo::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	APlayerReplicationInfo_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlayerReplicationInfo.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//bool ALiftExit::eventSuggestMovePreparation ( class APawn* Other )
//{
//	static UFunction* pSuggestMovePreparation = 0;
//	ALiftExit_eventSuggestMovePreparation_Parms parms;
//
//	if ( !pSuggestMovePreparation )
//		pSuggestMovePreparation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LiftExit.SuggestMovePreparation" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSuggestMovePreparation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALiftExit::CanBeReachedFromLiftBy ( class APawn* Other )
//{
//	static UFunction* pCanBeReachedFromLiftBy = 0;
//	ALiftExit_execCanBeReachedFromLiftBy_Parms parms;
//
//	if ( !pCanBeReachedFromLiftBy )
//		pCanBeReachedFromLiftBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LiftExit.CanBeReachedFromLiftBy" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pCanBeReachedFromLiftBy, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALiftExit::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	ALiftExit_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LiftExit.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//bool ALiftCenter::ProceedWithMove ( class APawn* Other )
//{
//	static UFunction* pProceedWithMove = 0;
//	ALiftCenter_execProceedWithMove_Parms parms;
//
//	if ( !pProceedWithMove )
//		pProceedWithMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LiftCenter.ProceedWithMove" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pProceedWithMove, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALiftCenter::SuggestMovePreparation ( class APawn* Other )
//{
//	static UFunction* pSuggestMovePreparation = 0;
//	ALiftCenter_execSuggestMovePreparation_Parms parms;
//
//	if ( !pSuggestMovePreparation )
//		pSuggestMovePreparation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LiftCenter.SuggestMovePreparation" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSuggestMovePreparation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* ALiftCenter::SpecialHandling ( class APawn* Other )
//{
//	static UFunction* pSpecialHandling = 0;
//	ALiftCenter_execSpecialHandling_Parms parms;
//
//	if ( !pSpecialHandling )
//		pSpecialHandling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LiftCenter.SpecialHandling" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSpecialHandling, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALiftCenter::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	ALiftCenter_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LiftCenter.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void ASavedMove::SetMoveFor ( class APlayerController* P, float DeltaTime, struct FVector NewAccel, unsigned char InDoubleClick )
//{
//	static UFunction* pSetMoveFor = 0;
//	ASavedMove_execSetMoveFor_Parms parms;
//
//	if ( !pSetMoveFor )
//		pSetMoveFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SavedMove.SetMoveFor" );
//
//	parms.P = P;
//	parms.DeltaTime = DeltaTime;
//	parms.NewAccel = NewAccel;
//	parms.InDoubleClick = InDoubleClick;
//	this->ProcessEvent ( pSetMoveFor, &parms, NULL );
//
//}
//
//void ASavedMove::SetInitialPosition ( class APawn* P )
//{
//	static UFunction* pSetInitialPosition = 0;
//	ASavedMove_execSetInitialPosition_Parms parms;
//
//	if ( !pSetInitialPosition )
//		pSetInitialPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SavedMove.SetInitialPosition" );
//
//	parms.P = P;
//	this->ProcessEvent ( pSetInitialPosition, &parms, NULL );
//
//}
//
//struct FVector ASavedMove::GetStartLocation (  )
//{
//	static UFunction* pGetStartLocation = 0;
//	ASavedMove_execGetStartLocation_Parms parms;
//
//	if ( !pGetStartLocation )
//		pGetStartLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SavedMove.GetStartLocation" );
//
//	this->ProcessEvent ( pGetStartLocation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ASavedMove::IsJumpMove (  )
//{
//	static UFunction* pIsJumpMove = 0;
//	ASavedMove_execIsJumpMove_Parms parms;
//
//	if ( !pIsJumpMove )
//		pIsJumpMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SavedMove.IsJumpMove" );
//
//	this->ProcessEvent ( pIsJumpMove, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ASavedMove::PostUpdate ( class APlayerController* P )
//{
//	static UFunction* pPostUpdate = 0;
//	ASavedMove_execPostUpdate_Parms parms;
//
//	if ( !pPostUpdate )
//		pPostUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SavedMove.PostUpdate" );
//
//	parms.P = P;
//	this->ProcessEvent ( pPostUpdate, &parms, NULL );
//
//}
//
//void ASavedMove::Clear (  )
//{
//	static UFunction* pClear = 0;
//	ASavedMove_execClear_Parms parms;
//
//	if ( !pClear )
//		pClear = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SavedMove.Clear" );
//
//	this->ProcessEvent ( pClear, &parms, NULL );
//
//}
//
//void AHUD::InsertUsingSkillList ( int SkillID, int SubSkillID )
//{
//	static UFunction* pInsertUsingSkillList = 0;
//	AHUD_execInsertUsingSkillList_Parms parms;
//
//	if ( !pInsertUsingSkillList )
//		pInsertUsingSkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.InsertUsingSkillList" );
//
//	parms.SkillID = SkillID;
//	parms.SubSkillID = SubSkillID;
//	this->ProcessEvent ( pInsertUsingSkillList, &parms, NULL );
//
//}
//
//int AHUD::GetCurGameTime (  )
//{
//	static UFunction* pGetCurGameTime = 0;
//	AHUD_execGetCurGameTime_Parms parms;
//
//	if ( !pGetCurGameTime )
//		pGetCurGameTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.GetCurGameTime" );
//
//	this->ProcessEvent ( pGetCurGameTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AHUD::CacheSpecialPositions (  )
//{
//	static UFunction* pCacheSpecialPositions = 0;
//	AHUD_execCacheSpecialPositions_Parms parms;
//
//	if ( !pCacheSpecialPositions )
//		pCacheSpecialPositions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.CacheSpecialPositions" );
//
//	this->ProcessEvent ( pCacheSpecialPositions, &parms, NULL );
//
//}
//
//float AHUD::GetUAVScanLineTexturePos (  )
//{
//	static UFunction* pGetUAVScanLineTexturePos = 0;
//	AHUD_execGetUAVScanLineTexturePos_Parms parms;
//
//	if ( !pGetUAVScanLineTexturePos )
//		pGetUAVScanLineTexturePos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.GetUAVScanLineTexturePos" );
//
//	this->ProcessEvent ( pGetUAVScanLineTexturePos, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AHUD::UpdateUAV (  )
//{
//	static UFunction* pUpdateUAV = 0;
//	AHUD_execUpdateUAV_Parms parms;
//
//	if ( !pUpdateUAV )
//		pUpdateUAV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.UpdateUAV" );
//
//	this->ProcessEvent ( pUpdateUAV, &parms, NULL );
//
//}
//
//bool AHUD::IsUAVOn (  )
//{
//	static UFunction* pIsUAVOn = 0;
//	AHUD_execIsUAVOn_Parms parms;
//
//	if ( !pIsUAVOn )
//		pIsUAVOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.IsUAVOn" );
//
//	this->ProcessEvent ( pIsUAVOn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AHUD::IsUAVScanning (  )
//{
//	static UFunction* pIsUAVScanning = 0;
//	AHUD_execIsUAVScanning_Parms parms;
//
//	if ( !pIsUAVScanning )
//		pIsUAVScanning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.IsUAVScanning" );
//
//	this->ProcessEvent ( pIsUAVScanning, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AHUD::GetUAVScanProgress (  )
//{
//	static UFunction* pGetUAVScanProgress = 0;
//	AHUD_execGetUAVScanProgress_Parms parms;
//
//	if ( !pGetUAVScanProgress )
//		pGetUAVScanProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.GetUAVScanProgress" );
//
//	this->ProcessEvent ( pGetUAVScanProgress, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AHUD::OnClientReceiveDeathMessage ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pOnClientReceiveDeathMessage = 0;
//	AHUD_execOnClientReceiveDeathMessage_Parms parms;
//
//	if ( !pOnClientReceiveDeathMessage )
//		pOnClientReceiveDeathMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.OnClientReceiveDeathMessage" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pOnClientReceiveDeathMessage, &parms, NULL );
//
//}
//
//void AHUD::OnClientReceiveFlyingDefenceBotDeathMessage ( class APlayerController* P, class APlayerReplicationInfo* attackerPRI, class APlayerReplicationInfo* victimPRI, class UObject* OptionalObject )
//{
//	static UFunction* pOnClientReceiveFlyingDefenceBotDeathMessage = 0;
//	AHUD_execOnClientReceiveFlyingDefenceBotDeathMessage_Parms parms;
//
//	if ( !pOnClientReceiveFlyingDefenceBotDeathMessage )
//		pOnClientReceiveFlyingDefenceBotDeathMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.OnClientReceiveFlyingDefenceBotDeathMessage" );
//
//	parms.P = P;
//	parms.attackerPRI = attackerPRI;
//	parms.victimPRI = victimPRI;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pOnClientReceiveFlyingDefenceBotDeathMessage, &parms, NULL );
//
//}
//
//void AHUD::OnClientReceiveHeliDeathMessage ( class APlayerController* P, class APlayerReplicationInfo* attackerPRI, class APlayerReplicationInfo* victimPRI, class UObject* OptionalObject )
//{
//	static UFunction* pOnClientReceiveHeliDeathMessage = 0;
//	AHUD_execOnClientReceiveHeliDeathMessage_Parms parms;
//
//	if ( !pOnClientReceiveHeliDeathMessage )
//		pOnClientReceiveHeliDeathMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.OnClientReceiveHeliDeathMessage" );
//
//	parms.P = P;
//	parms.attackerPRI = attackerPRI;
//	parms.victimPRI = victimPRI;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pOnClientReceiveHeliDeathMessage, &parms, NULL );
//
//}
//
//void AHUD::NotifyTakeHit ( struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, int CollisionPart )
//{
//	static UFunction* pNotifyTakeHit = 0;
//	AHUD_execNotifyTakeHit_Parms parms;
//
//	if ( !pNotifyTakeHit )
//		pNotifyTakeHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.NotifyTakeHit" );
//
//	parms.HitLocation = HitLocation;
//	parms.Damage = Damage;
//	parms.DamageType = DamageType;
//	parms.Momentum = Momentum;
//	parms.CollisionPart = CollisionPart;
//	this->ProcessEvent ( pNotifyTakeHit, &parms, NULL );
//
//}
//
//void AHUD::NotifyDeath ( class APawn* P )
//{
//	static UFunction* pNotifyDeath = 0;
//	AHUD_execNotifyDeath_Parms parms;
//
//	if ( !pNotifyDeath )
//		pNotifyDeath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.NotifyDeath" );
//
//	parms.P = P;
//	this->ProcessEvent ( pNotifyDeath, &parms, NULL );
//
//}
//
//void AHUD::OnEndChangedHost (  )
//{
//	static UFunction* pOnEndChangedHost = 0;
//	AHUD_execOnEndChangedHost_Parms parms;
//
//	if ( !pOnEndChangedHost )
//		pOnEndChangedHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.OnEndChangedHost" );
//
//	this->ProcessEvent ( pOnEndChangedHost, &parms, NULL );
//
//}
//
//void AHUD::RemoveHudOverlay ( class AHudOverlay* Overlay )
//{
//	static UFunction* pRemoveHudOverlay = 0;
//	AHUD_execRemoveHudOverlay_Parms parms;
//
//	if ( !pRemoveHudOverlay )
//		pRemoveHudOverlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.RemoveHudOverlay" );
//
//	parms.Overlay = Overlay;
//	this->ProcessEvent ( pRemoveHudOverlay, &parms, NULL );
//
//}
//
//void AHUD::AddHudOverlay ( class AHudOverlay* Overlay )
//{
//	static UFunction* pAddHudOverlay = 0;
//	AHUD_execAddHudOverlay_Parms parms;
//
//	if ( !pAddHudOverlay )
//		pAddHudOverlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.AddHudOverlay" );
//
//	parms.Overlay = Overlay;
//	this->ProcessEvent ( pAddHudOverlay, &parms, NULL );
//
//}
//
//void AHUD::DisplayHit ( struct FVector HitDir, int Damage, class UClass* DamageType )
//{
//	static UFunction* pDisplayHit = 0;
//	AHUD_execDisplayHit_Parms parms;
//
//	if ( !pDisplayHit )
//		pDisplayHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DisplayHit" );
//
//	parms.HitDir = HitDir;
//	parms.Damage = Damage;
//	parms.DamageType = DamageType;
//	this->ProcessEvent ( pDisplayHit, &parms, NULL );
//
//}
//
//void AHUD::DrawTargeting ( class UCanvas* C )
//{
//	static UFunction* pDrawTargeting = 0;
//	AHUD_execDrawTargeting_Parms parms;
//
//	if ( !pDrawTargeting )
//		pDrawTargeting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawTargeting" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawTargeting, &parms, NULL );
//
//}
//
//void AHUD::eventAnnouncementPlayed ( struct FString AnnouncerSound, unsigned char Switch )
//{
//	static UFunction* pAnnouncementPlayed = 0;
//	AHUD_eventAnnouncementPlayed_Parms parms;
//
//	if ( !pAnnouncementPlayed )
//		pAnnouncementPlayed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.AnnouncementPlayed" );
//
//	parms.AnnouncerSound = AnnouncerSound;
//	parms.Switch = Switch;
//	this->ProcessEvent ( pAnnouncementPlayed, &parms, NULL );
//
//}
//
//class UFont* AHUD::LoadProgressFont (  )
//{
//	static UFunction* pLoadProgressFont = 0;
//	AHUD_execLoadProgressFont_Parms parms;
//
//	if ( !pLoadProgressFont )
//		pLoadProgressFont = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.LoadProgressFont" );
//
//	this->ProcessEvent ( pLoadProgressFont, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UFont* AHUD::LargerFontThan ( class UFont* aFont )
//{
//	static UFunction* pLargerFontThan = 0;
//	AHUD_execLargerFontThan_Parms parms;
//
//	if ( !pLargerFontThan )
//		pLargerFontThan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.LargerFontThan" );
//
//	parms.aFont = aFont;
//	this->ProcessEvent ( pLargerFontThan, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UFont* AHUD::GetMediumFont ( float Size )
//{
//	static UFunction* pGetMediumFont = 0;
//	AHUD_execGetMediumFont_Parms parms;
//
//	if ( !pGetMediumFont )
//		pGetMediumFont = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.GetMediumFont" );
//
//	parms.Size = Size;
//	this->ProcessEvent ( pGetMediumFont, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UFont* AHUD::GetMediumFontFor ( class UCanvas* Canvas )
//{
//	static UFunction* pGetMediumFontFor = 0;
//	AHUD_execGetMediumFontFor_Parms parms;
//
//	if ( !pGetMediumFontFor )
//		pGetMediumFontFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.GetMediumFontFor" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pGetMediumFontFor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UFont* AHUD::GetFontSizeIndex ( class UCanvas* C, int FontSize )
//{
//	static UFunction* pGetFontSizeIndex = 0;
//	AHUD_execGetFontSizeIndex_Parms parms;
//
//	if ( !pGetFontSizeIndex )
//		pGetFontSizeIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.GetFontSizeIndex" );
//
//	parms.C = C;
//	parms.FontSize = FontSize;
//	this->ProcessEvent ( pGetFontSizeIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UFont* AHUD::GetConsoleFont ( class UCanvas* C )
//{
//	static UFunction* pGetConsoleFont = 0;
//	AHUD_execGetConsoleFont_Parms parms;
//
//	if ( !pGetConsoleFont )
//		pGetConsoleFont = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.GetConsoleFont" );
//
//	parms.C = C;
//	this->ProcessEvent ( pGetConsoleFont, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UFont* AHUD::LoadFont ( int i )
//{
//	static UFunction* pLoadFont = 0;
//	AHUD_execLoadFont_Parms parms;
//
//	if ( !pLoadFont )
//		pLoadFont = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.LoadFont" );
//
//	parms.i = i;
//	this->ProcessEvent ( pLoadFont, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UFont* AHUD::LoadFontStatic ( int i )
//{
//	static UFunction* pLoadFontStatic = 0;
//	AHUD_execLoadFontStatic_Parms parms;
//
//	if ( !pLoadFontStatic )
//		pLoadFontStatic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.LoadFontStatic" );
//
//	parms.i = i;
//	this->ProcessEvent ( pLoadFontStatic, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AHUD::SetCropping ( bool Active )
//{
//	static UFunction* pSetCropping = 0;
//	AHUD_execSetCropping_Parms parms;
//
//	if ( !pSetCropping )
//		pSetCropping = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.SetCropping" );
//
//	parms.Active = Active;
//	this->ProcessEvent ( pSetCropping, &parms, NULL );
//
//}
//
//void AHUD::DrawCrosshair ( class UCanvas* C )
//{
//	static UFunction* pDrawCrosshair = 0;
//	AHUD_execDrawCrosshair_Parms parms;
//
//	if ( !pDrawCrosshair )
//		pDrawCrosshair = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawCrosshair" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawCrosshair, &parms, NULL );
//
//}
//
//void AHUD::SetTargeting ( bool bShow, struct FVector TargetLocation, float Size )
//{
//	static UFunction* pSetTargeting = 0;
//	AHUD_execSetTargeting_Parms parms;
//
//	if ( !pSetTargeting )
//		pSetTargeting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.SetTargeting" );
//
//	parms.bShow = bShow;
//	parms.TargetLocation = TargetLocation;
//	parms.Size = Size;
//	this->ProcessEvent ( pSetTargeting, &parms, NULL );
//
//}
//
//void AHUD::FadeZoom (  )
//{
//	static UFunction* pFadeZoom = 0;
//	AHUD_execFadeZoom_Parms parms;
//
//	if ( !pFadeZoom )
//		pFadeZoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.FadeZoom" );
//
//	this->ProcessEvent ( pFadeZoom, &parms, NULL );
//
//}
//
//void AHUD::execShrinkHUD (  )
//{
//	static UFunction* pShrinkHUD = 0;
//	AHUD_execShrinkHUD_Parms parms;
//
//	if ( !pShrinkHUD )
//		pShrinkHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ShrinkHUD" );
//
//	this->ProcessEvent ( pShrinkHUD, &parms, NULL );
//
//}
//
//void AHUD::execGrowHUD (  )
//{
//	static UFunction* pGrowHUD = 0;
//	AHUD_execGrowHUD_Parms parms;
//
//	if ( !pGrowHUD )
//		pGrowHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.GrowHUD" );
//
//	this->ProcessEvent ( pGrowHUD, &parms, NULL );
//
//}
//
//void AHUD::AddTextMessage ( struct FString M, class UClass* MessageClass, class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pAddTextMessage = 0;
//	AHUD_execAddTextMessage_Parms parms;
//
//	if ( !pAddTextMessage )
//		pAddTextMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.AddTextMessage" );
//
//	parms.M = M;
//	parms.MessageClass = MessageClass;
//	parms.PRI = PRI;
//	this->ProcessEvent ( pAddTextMessage, &parms, NULL );
//
//}
//
//void AHUD::DisplayMessages ( class UCanvas* C )
//{
//	static UFunction* pDisplayMessages = 0;
//	AHUD_execDisplayMessages_Parms parms;
//
//	if ( !pDisplayMessages )
//		pDisplayMessages = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DisplayMessages" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDisplayMessages, &parms, NULL );
//
//}
//
//void AHUD::DisplayPortrait ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pDisplayPortrait = 0;
//	AHUD_execDisplayPortrait_Parms parms;
//
//	if ( !pDisplayPortrait )
//		pDisplayPortrait = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DisplayPortrait" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pDisplayPortrait, &parms, NULL );
//
//}
//
//void AHUD::Message ( class APlayerReplicationInfo* PRI, struct FString Msg, struct FName MsgType )
//{
//	static UFunction* pMessage = 0;
//	AHUD_execMessage_Parms parms;
//
//	if ( !pMessage )
//		pMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.Message" );
//
//	parms.PRI = PRI;
//	parms.Msg = Msg;
//	parms.MsgType = MsgType;
//	this->ProcessEvent ( pMessage, &parms, NULL );
//
//}
//
//void AHUD::LinkActors (  )
//{
//	static UFunction* pLinkActors = 0;
//	AHUD_execLinkActors_Parms parms;
//
//	if ( !pLinkActors )
//		pLinkActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.LinkActors" );
//
//	this->ProcessEvent ( pLinkActors, &parms, NULL );
//
//}
//
//void AHUD::execShowFont (  )
//{
//	static UFunction* pShowFont = 0;
//	AHUD_execShowFont_Parms parms;
//
//	if ( !pShowFont )
//		pShowFont = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ShowFont" );
//
//	this->ProcessEvent ( pShowFont, &parms, NULL );
//
//}
//
//void AHUD::execShowHud (  )
//{
//	static UFunction* pShowHud = 0;
//	AHUD_execShowHud_Parms parms;
//
//	if ( !pShowHud )
//		pShowHud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ShowHud" );
//
//	this->ProcessEvent ( pShowHud, &parms, NULL );
//
//}
//
//void AHUD::SetScoreBoardClass ( class UClass* ScoreboardClass, class UClass* ResultBoardClass, class UClass* ResultBoardBootyClass )
//{
//	static UFunction* pSetScoreBoardClass = 0;
//	AHUD_execSetScoreBoardClass_Parms parms;
//
//	if ( !pSetScoreBoardClass )
//		pSetScoreBoardClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.SetScoreBoardClass" );
//
//	parms.ScoreboardClass = ScoreboardClass;
//	parms.ResultBoardClass = ResultBoardClass;
//	parms.ResultBoardBootyClass = ResultBoardBootyClass;
//	this->ProcessEvent ( pSetScoreBoardClass, &parms, NULL );
//
//}
//
//void AHUD::DrawTypingPrompt ( class UCanvas* C, struct FString Text, int pos )
//{
//	static UFunction* pDrawTypingPrompt = 0;
//	AHUD_execDrawTypingPrompt_Parms parms;
//
//	if ( !pDrawTypingPrompt )
//		pDrawTypingPrompt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawTypingPrompt" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.pos = pos;
//	this->ProcessEvent ( pDrawTypingPrompt, &parms, NULL );
//
//}
//
//void AHUD::LocalizedMessage2 ( class UClass* Message, int Switch, struct FString CriticalString )
//{
//	static UFunction* pLocalizedMessage2 = 0;
//	AHUD_execLocalizedMessage2_Parms parms;
//
//	if ( !pLocalizedMessage2 )
//		pLocalizedMessage2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.LocalizedMessage2" );
//
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.CriticalString = CriticalString;
//	this->ProcessEvent ( pLocalizedMessage2, &parms, NULL );
//
//}
//
//void AHUD::LocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, struct FString CriticalString )
//{
//	static UFunction* pLocalizedMessage = 0;
//	AHUD_execLocalizedMessage_Parms parms;
//
//	if ( !pLocalizedMessage )
//		pLocalizedMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.LocalizedMessage" );
//
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	parms.CriticalString = CriticalString;
//	this->ProcessEvent ( pLocalizedMessage, &parms, NULL );
//
//}
//
//bool AHUD::IsInCinematic (  )
//{
//	static UFunction* pIsInCinematic = 0;
//	AHUD_execIsInCinematic_Parms parms;
//
//	if ( !pIsInCinematic )
//		pIsInCinematic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.IsInCinematic" );
//
//	this->ProcessEvent ( pIsInCinematic, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AHUD::DisplayBadConnectionAlert ( class UCanvas* C )
//{
//	static UFunction* pDisplayBadConnectionAlert = 0;
//	AHUD_execDisplayBadConnectionAlert_Parms parms;
//
//	if ( !pDisplayBadConnectionAlert )
//		pDisplayBadConnectionAlert = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DisplayBadConnectionAlert" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDisplayBadConnectionAlert, &parms, NULL );
//
//}
//
//void AHUD::TutorialEvent ( struct FString S, struct FName Type, struct FName reserv )
//{
//	static UFunction* pTutorialEvent = 0;
//	AHUD_execTutorialEvent_Parms parms;
//
//	if ( !pTutorialEvent )
//		pTutorialEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.TutorialEvent" );
//
//	parms.S = S;
//	parms.Type = Type;
//	parms.reserv = reserv;
//	this->ProcessEvent ( pTutorialEvent, &parms, NULL );
//
//}
//
//void AHUD::CallRadioMessage ( int iKey, int iReservation1, int iReservation2 )
//{
//	static UFunction* pCallRadioMessage = 0;
//	AHUD_execCallRadioMessage_Parms parms;
//
//	if ( !pCallRadioMessage )
//		pCallRadioMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.CallRadioMessage" );
//
//	parms.iKey = iKey;
//	parms.iReservation1 = iReservation1;
//	parms.iReservation2 = iReservation2;
//	this->ProcessEvent ( pCallRadioMessage, &parms, NULL );
//
//}
//
//void AHUD::CallEvent ( bool ItemCheck, int iReservation1, int iReservation2 )
//{
//	static UFunction* pCallEvent = 0;
//	AHUD_execCallEvent_Parms parms;
//
//	if ( !pCallEvent )
//		pCallEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.CallEvent" );
//
//	parms.ItemCheck = ItemCheck;
//	parms.iReservation1 = iReservation1;
//	parms.iReservation2 = iReservation2;
//	this->ProcessEvent ( pCallEvent, &parms, NULL );
//
//}
//
//void AHUD::CallSkill ( int iKey, bool bRequire, bool iSucess )
//{
//	static UFunction* pCallSkill = 0;
//	AHUD_execCallSkill_Parms parms;
//
//	if ( !pCallSkill )
//		pCallSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.CallSkill" );
//
//	parms.iKey = iKey;
//	parms.bRequire = bRequire;
//	parms.iSucess = iSucess;
//	this->ProcessEvent ( pCallSkill, &parms, NULL );
//
//}
//
//bool AHUD::DrawLevelAction ( class UCanvas* C )
//{
//	static UFunction* pDrawLevelAction = 0;
//	AHUD_execDrawLevelAction_Parms parms;
//
//	if ( !pDrawLevelAction )
//		pDrawLevelAction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawLevelAction" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawLevelAction, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AHUD::DrawGMSpectatingHud ( class UCanvas* C )
//{
//	static UFunction* pDrawGMSpectatingHud = 0;
//	AHUD_execDrawGMSpectatingHud_Parms parms;
//
//	if ( !pDrawGMSpectatingHud )
//		pDrawGMSpectatingHud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawGMSpectatingHud" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawGMSpectatingHud, &parms, NULL );
//
//}
//
//void AHUD::DrawSpectatingHud ( class UCanvas* C )
//{
//	static UFunction* pDrawSpectatingHud = 0;
//	AHUD_execDrawSpectatingHud_Parms parms;
//
//	if ( !pDrawSpectatingHud )
//		pDrawSpectatingHud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawSpectatingHud" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawSpectatingHud, &parms, NULL );
//
//}
//
//void AHUD::DrawHUD ( class UCanvas* C )
//{
//	static UFunction* pDrawHUD = 0;
//	AHUD_execDrawHUD_Parms parms;
//
//	if ( !pDrawHUD )
//		pDrawHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawHUD" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawHUD, &parms, NULL );
//
//}
//
//void AHUD::ResetHud (  )
//{
//	static UFunction* pResetHud = 0;
//	AHUD_execResetHud_Parms parms;
//
//	if ( !pResetHud )
//		pResetHud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ResetHud" );
//
//	this->ProcessEvent ( pResetHud, &parms, NULL );
//
//}
//
//void AHUD::DisplayProgressMessages ( class UCanvas* C )
//{
//	static UFunction* pDisplayProgressMessages = 0;
//	AHUD_execDisplayProgressMessages_Parms parms;
//
//	if ( !pDisplayProgressMessages )
//		pDisplayProgressMessages = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DisplayProgressMessages" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDisplayProgressMessages, &parms, NULL );
//
//}
//
//void AHUD::DrawRoute (  )
//{
//	static UFunction* pDrawRoute = 0;
//	AHUD_execDrawRoute_Parms parms;
//
//	if ( !pDrawRoute )
//		pDrawRoute = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawRoute" );
//
//	this->ProcessEvent ( pDrawRoute, &parms, NULL );
//
//}
//
//void AHUD::CanvasDrawActors ( class UCanvas* C, bool bClearedZBuffer )
//{
//	static UFunction* pCanvasDrawActors = 0;
//	AHUD_execCanvasDrawActors_Parms parms;
//
//	if ( !pCanvasDrawActors )
//		pCanvasDrawActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.CanvasDrawActors" );
//
//	parms.C = C;
//	parms.bClearedZBuffer = bClearedZBuffer;
//	this->ProcessEvent ( pCanvasDrawActors, &parms, NULL );
//
//}
//
//void AHUD::SetInstructionKeyText ( struct FString Text )
//{
//	static UFunction* pSetInstructionKeyText = 0;
//	AHUD_execSetInstructionKeyText_Parms parms;
//
//	if ( !pSetInstructionKeyText )
//		pSetInstructionKeyText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.SetInstructionKeyText" );
//
//	parms.Text = Text;
//	this->ProcessEvent ( pSetInstructionKeyText, &parms, NULL );
//
//}
//
//void AHUD::SetInstructionText ( struct FString Text )
//{
//	static UFunction* pSetInstructionText = 0;
//	AHUD_execSetInstructionText_Parms parms;
//
//	if ( !pSetInstructionText )
//		pSetInstructionText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.SetInstructionText" );
//
//	parms.Text = Text;
//	this->ProcessEvent ( pSetInstructionText, &parms, NULL );
//
//}
//
//void AHUD::DrawInstructionGfx ( class UCanvas* C )
//{
//	static UFunction* pDrawInstructionGfx = 0;
//	AHUD_execDrawInstructionGfx_Parms parms;
//
//	if ( !pDrawInstructionGfx )
//		pDrawInstructionGfx = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawInstructionGfx" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawInstructionGfx, &parms, NULL );
//
//}
//
//void AHUD::DrawCinematicHUD ( class UCanvas* C )
//{
//	static UFunction* pDrawCinematicHUD = 0;
//	AHUD_execDrawCinematicHUD_Parms parms;
//
//	if ( !pDrawCinematicHUD )
//		pDrawCinematicHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawCinematicHUD" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawCinematicHUD, &parms, NULL );
//
//}
//
//void AHUD::DrawDebugStates ( class UCanvas* C )
//{
//	static UFunction* pDrawDebugStates = 0;
//	AHUD_execDrawDebugStates_Parms parms;
//
//	if ( !pDrawDebugStates )
//		pDrawDebugStates = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDebugStates" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawDebugStates, &parms, NULL );
//
//}
//
//void AHUD::DrawChangeHostGuest ( class UCanvas* C )
//{
//	static UFunction* pDrawChangeHostGuest = 0;
//	AHUD_execDrawChangeHostGuest_Parms parms;
//
//	if ( !pDrawChangeHostGuest )
//		pDrawChangeHostGuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawChangeHostGuest" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawChangeHostGuest, &parms, NULL );
//
//}
//
//void AHUD::eventPostRender ( class UCanvas* Canvas )
//{
//	static UFunction* pPostRender = 0;
//	AHUD_eventPostRender_Parms parms;
//
//	if ( !pPostRender )
//		pPostRender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.PostRender" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pPostRender, &parms, NULL );
//
//}
//
//void AHUD::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	AHUD_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//bool AHUD::NeedToDrawSpectatingHud (  )
//{
//	static UFunction* pNeedToDrawSpectatingHud = 0;
//	AHUD_execNeedToDrawSpectatingHud_Parms parms;
//
//	if ( !pNeedToDrawSpectatingHud )
//		pNeedToDrawSpectatingHud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.NeedToDrawSpectatingHud" );
//
//	this->ProcessEvent ( pNeedToDrawSpectatingHud, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AHUD::ResetKillMessageTexture (  )
//{
//	static UFunction* pResetKillMessageTexture = 0;
//	AHUD_execResetKillMessageTexture_Parms parms;
//
//	if ( !pResetKillMessageTexture )
//		pResetKillMessageTexture = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ResetKillMessageTexture" );
//
//	this->ProcessEvent ( pResetKillMessageTexture, &parms, NULL );
//
//}
//
//void AHUD::DrawDebug3 ( class UCanvas* C, int X, int dy, int* Y )
//{
//	static UFunction* pDrawDebug3 = 0;
//	AHUD_execDrawDebug3_Parms parms;
//
//	if ( !pDrawDebug3 )
//		pDrawDebug3 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDebug3" );
//
//	parms.C = C;
//	parms.X = X;
//	parms.dy = dy;
//	this->ProcessEvent ( pDrawDebug3, &parms, NULL );
//
//	*Y = parms.Y;
//}
//
//void AHUD::DrawDebug_HostPoint ( class UCanvas* C, int X, int dy, int* Y )
//{
//	static UFunction* pDrawDebug_HostPoint = 0;
//	AHUD_execDrawDebug_HostPoint_Parms parms;
//
//	if ( !pDrawDebug_HostPoint )
//		pDrawDebug_HostPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDebug_HostPoint" );
//
//	parms.C = C;
//	parms.X = X;
//	parms.dy = dy;
//	this->ProcessEvent ( pDrawDebug_HostPoint, &parms, NULL );
//
//	*Y = parms.Y;
//}
//
//void AHUD::DrawDebug2 ( class UCanvas* C, int X, int dy, int* Y )
//{
//	static UFunction* pDrawDebug2 = 0;
//	AHUD_execDrawDebug2_Parms parms;
//
//	if ( !pDrawDebug2 )
//		pDrawDebug2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDebug2" );
//
//	parms.C = C;
//	parms.X = X;
//	parms.dy = dy;
//	this->ProcessEvent ( pDrawDebug2, &parms, NULL );
//
//	*Y = parms.Y;
//}
//
//void AHUD::DrawDebug_AllPlayerStates2 ( class UCanvas* C, int X, int dy, int* Y )
//{
//	static UFunction* pDrawDebug_AllPlayerStates2 = 0;
//	AHUD_execDrawDebug_AllPlayerStates2_Parms parms;
//
//	if ( !pDrawDebug_AllPlayerStates2 )
//		pDrawDebug_AllPlayerStates2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDebug_AllPlayerStates2" );
//
//	parms.C = C;
//	parms.X = X;
//	parms.dy = dy;
//	this->ProcessEvent ( pDrawDebug_AllPlayerStates2, &parms, NULL );
//
//	*Y = parms.Y;
//}
//
//void AHUD::DrawDebug ( class UCanvas* C, int X, int dy, int* Y )
//{
//	static UFunction* pDrawDebug = 0;
//	AHUD_execDrawDebug_Parms parms;
//
//	if ( !pDrawDebug )
//		pDrawDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDebug" );
//
//	parms.C = C;
//	parms.X = X;
//	parms.dy = dy;
//	this->ProcessEvent ( pDrawDebug, &parms, NULL );
//
//	*Y = parms.Y;
//}
//
//void AHUD::DrawDebug_AllPawnNetStates ( class UCanvas* C, int X, int dy, int* Y )
//{
//	static UFunction* pDrawDebug_AllPawnNetStates = 0;
//	AHUD_execDrawDebug_AllPawnNetStates_Parms parms;
//
//	if ( !pDrawDebug_AllPawnNetStates )
//		pDrawDebug_AllPawnNetStates = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDebug_AllPawnNetStates" );
//
//	parms.C = C;
//	parms.X = X;
//	parms.dy = dy;
//	this->ProcessEvent ( pDrawDebug_AllPawnNetStates, &parms, NULL );
//
//	*Y = parms.Y;
//}
//
//void AHUD::DrawDebug_AllPlayerStates ( class UCanvas* C, int X, int dy, int* Y )
//{
//	static UFunction* pDrawDebug_AllPlayerStates = 0;
//	AHUD_execDrawDebug_AllPlayerStates_Parms parms;
//
//	if ( !pDrawDebug_AllPlayerStates )
//		pDrawDebug_AllPlayerStates = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDebug_AllPlayerStates" );
//
//	parms.C = C;
//	parms.X = X;
//	parms.dy = dy;
//	this->ProcessEvent ( pDrawDebug_AllPlayerStates, &parms, NULL );
//
//	*Y = parms.Y;
//}
//
//void AHUD::DrawDebug_Helicopter ( class UCanvas* C, int X, int dy, int* Y )
//{
//	static UFunction* pDrawDebug_Helicopter = 0;
//	AHUD_execDrawDebug_Helicopter_Parms parms;
//
//	if ( !pDrawDebug_Helicopter )
//		pDrawDebug_Helicopter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDebug_Helicopter" );
//
//	parms.C = C;
//	parms.X = X;
//	parms.dy = dy;
//	this->ProcessEvent ( pDrawDebug_Helicopter, &parms, NULL );
//
//	*Y = parms.Y;
//}
//
//void AHUD::DrawDebug_Time ( class UCanvas* C, int X, int dy, int* Y )
//{
//	static UFunction* pDrawDebug_Time = 0;
//	AHUD_execDrawDebug_Time_Parms parms;
//
//	if ( !pDrawDebug_Time )
//		pDrawDebug_Time = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDebug_Time" );
//
//	parms.C = C;
//	parms.X = X;
//	parms.dy = dy;
//	this->ProcessEvent ( pDrawDebug_Time, &parms, NULL );
//
//	*Y = parms.Y;
//}
//
//void AHUD::DrawDebug_Spectating ( class UCanvas* C, int X, int dy, int* Y )
//{
//	static UFunction* pDrawDebug_Spectating = 0;
//	AHUD_execDrawDebug_Spectating_Parms parms;
//
//	if ( !pDrawDebug_Spectating )
//		pDrawDebug_Spectating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDebug_Spectating" );
//
//	parms.C = C;
//	parms.X = X;
//	parms.dy = dy;
//	this->ProcessEvent ( pDrawDebug_Spectating, &parms, NULL );
//
//	*Y = parms.Y;
//}
//
//void AHUD::DrawDebug_SpectatingAllPlayers ( class UCanvas* C, int X, int dy, int* Y )
//{
//	static UFunction* pDrawDebug_SpectatingAllPlayers = 0;
//	AHUD_execDrawDebug_SpectatingAllPlayers_Parms parms;
//
//	if ( !pDrawDebug_SpectatingAllPlayers )
//		pDrawDebug_SpectatingAllPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDebug_SpectatingAllPlayers" );
//
//	parms.C = C;
//	parms.X = X;
//	parms.dy = dy;
//	this->ProcessEvent ( pDrawDebug_SpectatingAllPlayers, &parms, NULL );
//
//	*Y = parms.Y;
//}
//
//void AHUD::DrawDebug_GSSS ( class UCanvas* C, int X, int dy, int* Y )
//{
//	static UFunction* pDrawDebug_GSSS = 0;
//	AHUD_execDrawDebug_GSSS_Parms parms;
//
//	if ( !pDrawDebug_GSSS )
//		pDrawDebug_GSSS = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDebug_GSSS" );
//
//	parms.C = C;
//	parms.X = X;
//	parms.dy = dy;
//	this->ProcessEvent ( pDrawDebug_GSSS, &parms, NULL );
//
//	*Y = parms.Y;
//}
//
//void AHUD::eventPostRenderActors ( class UCanvas* Canvas )
//{
//	static UFunction* pPostRenderActors = 0;
//	AHUD_eventPostRenderActors_Parms parms;
//
//	if ( !pPostRenderActors )
//		pPostRenderActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.PostRenderActors" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pPostRenderActors, &parms, NULL );
//
//}
//
//void AHUD::GetLocalStatsScreen (  )
//{
//	static UFunction* pGetLocalStatsScreen = 0;
//	AHUD_execGetLocalStatsScreen_Parms parms;
//
//	if ( !pGetLocalStatsScreen )
//		pGetLocalStatsScreen = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.GetLocalStatsScreen" );
//
//	this->ProcessEvent ( pGetLocalStatsScreen, &parms, NULL );
//
//}
//
//void AHUD::eventConnectFailure ( struct FString FailCode, struct FString URL )
//{
//	static UFunction* pConnectFailure = 0;
//	AHUD_eventConnectFailure_Parms parms;
//
//	if ( !pConnectFailure )
//		pConnectFailure = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ConnectFailure" );
//
//	parms.FailCode = FailCode;
//	parms.URL = URL;
//	this->ProcessEvent ( pConnectFailure, &parms, NULL );
//
//}
//
//void AHUD::CheckCountdown ( class AGameReplicationInfo* GRI )
//{
//	static UFunction* pCheckCountdown = 0;
//	AHUD_execCheckCountdown_Parms parms;
//
//	if ( !pCheckCountdown )
//		pCheckCountdown = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.CheckCountdown" );
//
//	parms.GRI = GRI;
//	this->ProcessEvent ( pCheckCountdown, &parms, NULL );
//
//}
//
//void AHUD::eventWorldSpaceOverlays (  )
//{
//	static UFunction* pWorldSpaceOverlays = 0;
//	AHUD_eventWorldSpaceOverlays_Parms parms;
//
//	if ( !pWorldSpaceOverlays )
//		pWorldSpaceOverlays = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.WorldSpaceOverlays" );
//
//	this->ProcessEvent ( pWorldSpaceOverlays, &parms, NULL );
//
//}
//
//void AHUD::execShowDebug3 (  )
//{
//	static UFunction* pShowDebug3 = 0;
//	AHUD_execShowDebug3_Parms parms;
//
//	if ( !pShowDebug3 )
//		pShowDebug3 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ShowDebug3" );
//
//	this->ProcessEvent ( pShowDebug3, &parms, NULL );
//
//}
//
//void AHUD::execShowDebug2 (  )
//{
//	static UFunction* pShowDebug2 = 0;
//	AHUD_execShowDebug2_Parms parms;
//
//	if ( !pShowDebug2 )
//		pShowDebug2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ShowDebug2" );
//
//	this->ProcessEvent ( pShowDebug2, &parms, NULL );
//
//}
//
//void AHUD::execShowDebug1 (  )
//{
//	static UFunction* pShowDebug1 = 0;
//	AHUD_execShowDebug1_Parms parms;
//
//	if ( !pShowDebug1 )
//		pShowDebug1 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ShowDebug1" );
//
//	this->ProcessEvent ( pShowDebug1, &parms, NULL );
//
//}
//
//void AHUD::execShowDebugChan (  )
//{
//	static UFunction* pShowDebugChan = 0;
//	AHUD_execShowDebugChan_Parms parms;
//
//	if ( !pShowDebugChan )
//		pShowDebugChan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ShowDebugChan" );
//
//	this->ProcessEvent ( pShowDebugChan, &parms, NULL );
//
//}
//
//void AHUD::execShowDebug (  )
//{
//	static UFunction* pShowDebug = 0;
//	AHUD_execShowDebug_Parms parms;
//
//	if ( !pShowDebug )
//		pShowDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ShowDebug" );
//
//	this->ProcessEvent ( pShowDebug, &parms, NULL );
//
//}
//
//void AHUD::execNextStats (  )
//{
//	static UFunction* pNextStats = 0;
//	AHUD_execNextStats_Parms parms;
//
//	if ( !pNextStats )
//		pNextStats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.NextStats" );
//
//	this->ProcessEvent ( pNextStats, &parms, NULL );
//
//}
//
//void AHUD::execShowStats (  )
//{
//	static UFunction* pShowStats = 0;
//	AHUD_execShowStats_Parms parms;
//
//	if ( !pShowStats )
//		pShowStats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ShowStats" );
//
//	this->ProcessEvent ( pShowStats, &parms, NULL );
//
//}
//
//void AHUD::execHideMapInfo (  )
//{
//	static UFunction* pHideMapInfo = 0;
//	AHUD_execHideMapInfo_Parms parms;
//
//	if ( !pHideMapInfo )
//		pHideMapInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.HideMapInfo" );
//
//	this->ProcessEvent ( pHideMapInfo, &parms, NULL );
//
//}
//
//void AHUD::execShowMapInfo (  )
//{
//	static UFunction* pShowMapInfo = 0;
//	AHUD_execShowMapInfo_Parms parms;
//
//	if ( !pShowMapInfo )
//		pShowMapInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ShowMapInfo" );
//
//	this->ProcessEvent ( pShowMapInfo, &parms, NULL );
//
//}
//
//void AHUD::execHideScores (  )
//{
//	static UFunction* pHideScores = 0;
//	AHUD_execHideScores_Parms parms;
//
//	if ( !pHideScores )
//		pHideScores = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.HideScores" );
//
//	this->ProcessEvent ( pHideScores, &parms, NULL );
//
//}
//
//void AHUD::execShowScores (  )
//{
//	static UFunction* pShowScores = 0;
//	AHUD_execShowScores_Parms parms;
//
//	if ( !pShowScores )
//		pShowScores = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ShowScores" );
//
//	this->ProcessEvent ( pShowScores, &parms, NULL );
//
//}
//
//void AHUD::eventDestroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AHUD_eventDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AHUD::CreateKeyMenus (  )
//{
//	static UFunction* pCreateKeyMenus = 0;
//	AHUD_execCreateKeyMenus_Parms parms;
//
//	if ( !pCreateKeyMenus )
//		pCreateKeyMenus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.CreateKeyMenus" );
//
//	this->ProcessEvent ( pCreateKeyMenus, &parms, NULL );
//
//}
//
//void AHUD::Reset (  )
//{
//	static UFunction* pReset = 0;
//	AHUD_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void AHUD::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AHUD_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AHUD::BuildMOTD (  )
//{
//	static UFunction* pBuildMOTD = 0;
//	AHUD_execBuildMOTD_Parms parms;
//
//	if ( !pBuildMOTD )
//		pBuildMOTD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.BuildMOTD" );
//
//	this->ProcessEvent ( pBuildMOTD, &parms, NULL );
//
//}
//
//void AHUD::DrawCustomBeacon ( class UCanvas* C, class APawn* P, float ScreenLocX, float ScreenLocY )
//{
//	static UFunction* pDrawCustomBeacon = 0;
//	AHUD_execDrawCustomBeacon_Parms parms;
//
//	if ( !pDrawCustomBeacon )
//		pDrawCustomBeacon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawCustomBeacon" );
//
//	parms.C = C;
//	parms.P = P;
//	parms.ScreenLocX = ScreenLocX;
//	parms.ScreenLocY = ScreenLocY;
//	this->ProcessEvent ( pDrawCustomBeacon, &parms, NULL );
//
//}
//
//void AHUD::AllDeleteAASNotice (  )
//{
//	static UFunction* pAllDeleteAASNotice = 0;
//	AHUD_execAllDeleteAASNotice_Parms parms;
//
//	if ( !pAllDeleteAASNotice )
//		pAllDeleteAASNotice = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.AllDeleteAASNotice" );
//
//	this->ProcessEvent ( pAllDeleteAASNotice, &parms, NULL );
//
//}
//
//void AHUD::PushAASNotice ( struct FString sNotice, float beginTime, unsigned char byLevel )
//{
//	static UFunction* pPushAASNotice = 0;
//	AHUD_execPushAASNotice_Parms parms;
//
//	if ( !pPushAASNotice )
//		pPushAASNotice = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.PushAASNotice" );
//
//	parms.sNotice = sNotice;
//	parms.beginTime = beginTime;
//	parms.byLevel = byLevel;
//	this->ProcessEvent ( pPushAASNotice, &parms, NULL );
//
//}
//
//void AHUD::AllDeleteGameNotice (  )
//{
//	static UFunction* pAllDeleteGameNotice = 0;
//	AHUD_execAllDeleteGameNotice_Parms parms;
//
//	if ( !pAllDeleteGameNotice )
//		pAllDeleteGameNotice = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.AllDeleteGameNotice" );
//
//	this->ProcessEvent ( pAllDeleteGameNotice, &parms, NULL );
//
//}
//
//void AHUD::PushGameNotice ( struct FString sGameNotice )
//{
//	static UFunction* pPushGameNotice = 0;
//	AHUD_execPushGameNotice_Parms parms;
//
//	if ( !pPushGameNotice )
//		pPushGameNotice = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.PushGameNotice" );
//
//	parms.sGameNotice = sGameNotice;
//	this->ProcessEvent ( pPushGameNotice, &parms, NULL );
//
//}
//
//void AHUD::AllDeleteSuppliesPositions (  )
//{
//	static UFunction* pAllDeleteSuppliesPositions = 0;
//	AHUD_execAllDeleteSuppliesPositions_Parms parms;
//
//	if ( !pAllDeleteSuppliesPositions )
//		pAllDeleteSuppliesPositions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.AllDeleteSuppliesPositions" );
//
//	this->ProcessEvent ( pAllDeleteSuppliesPositions, &parms, NULL );
//
//}
//
//void AHUD::DeleteSuppliesPositions ( class AActor* act )
//{
//	static UFunction* pDeleteSuppliesPositions = 0;
//	AHUD_execDeleteSuppliesPositions_Parms parms;
//
//	if ( !pDeleteSuppliesPositions )
//		pDeleteSuppliesPositions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DeleteSuppliesPositions" );
//
//	parms.act = act;
//	this->ProcessEvent ( pDeleteSuppliesPositions, &parms, NULL );
//
//}
//
//void AHUD::CacheSuppliesPositions ( class AActor* act )
//{
//	static UFunction* pCacheSuppliesPositions = 0;
//	AHUD_execCacheSuppliesPositions_Parms parms;
//
//	if ( !pCacheSuppliesPositions )
//		pCacheSuppliesPositions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.CacheSuppliesPositions" );
//
//	parms.act = act;
//	this->ProcessEvent ( pCacheSuppliesPositions, &parms, NULL );
//
//}
//
//void AHUD::ChangeWeaponSlot5Hud ( class AwWeapon* newWeapon, bool bAddSkill )
//{
//	static UFunction* pChangeWeaponSlot5Hud = 0;
//	AHUD_execChangeWeaponSlot5Hud_Parms parms;
//
//	if ( !pChangeWeaponSlot5Hud )
//		pChangeWeaponSlot5Hud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ChangeWeaponSlot5Hud" );
//
//	parms.newWeapon = newWeapon;
//	parms.bAddSkill = bAddSkill;
//	this->ProcessEvent ( pChangeWeaponSlot5Hud, &parms, NULL );
//
//}
//
//void AHUD::ChangeWeaponSlot6Hud ( class AwWeapon* newWeapon )
//{
//	static UFunction* pChangeWeaponSlot6Hud = 0;
//	AHUD_execChangeWeaponSlot6Hud_Parms parms;
//
//	if ( !pChangeWeaponSlot6Hud )
//		pChangeWeaponSlot6Hud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.ChangeWeaponSlot6Hud" );
//
//	parms.newWeapon = newWeapon;
//	this->ProcessEvent ( pChangeWeaponSlot6Hud, &parms, NULL );
//
//}
//
//void AHUD::OnBuildMOTD ( class AHUD* Sender )
//{
//	static UFunction* pOnBuildMOTD = 0;
//	AHUD_execOnBuildMOTD_Parms parms;
//
//	if ( !pOnBuildMOTD )
//		pOnBuildMOTD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.OnBuildMOTD" );
//
//	parms.Sender = Sender;
//	this->ProcessEvent ( pOnBuildMOTD, &parms, NULL );
//
//}
//
//void AHUD::OnPostRender ( class AHUD* Sender, class UCanvas* C )
//{
//	static UFunction* pOnPostRender = 0;
//	AHUD_execOnPostRender_Parms parms;
//
//	if ( !pOnPostRender )
//		pOnPostRender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.OnPostRender" );
//
//	parms.Sender = Sender;
//	parms.C = C;
//	this->ProcessEvent ( pOnPostRender, &parms, NULL );
//
//}
//
//void AHUD::CalculateMinimapSize ( float* fWidth, float* fHeight )
//{
//	static UFunction* pCalculateMinimapSize = 0;
//	AHUD_execCalculateMinimapSize_Parms parms;
//
//	if ( !pCalculateMinimapSize )
//		pCalculateMinimapSize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.CalculateMinimapSize" );
//
//	parms.fWidth = *fWidth;
//	parms.fHeight = *fHeight;
//	this->ProcessEvent ( pCalculateMinimapSize, &parms, NULL );
//
//	*fWidth = parms.fWidth;
//	*fHeight = parms.fHeight;
//}
//
//void AHUD::CalculateWorldPostionToMinimapPosition ( struct FVector Location, float* mx, float* my )
//{
//	static UFunction* pCalculateWorldPostionToMinimapPosition = 0;
//	AHUD_execCalculateWorldPostionToMinimapPosition_Parms parms;
//
//	if ( !pCalculateWorldPostionToMinimapPosition )
//		pCalculateWorldPostionToMinimapPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.CalculateWorldPostionToMinimapPosition" );
//
//	parms.Location = Location;
//	this->ProcessEvent ( pCalculateWorldPostionToMinimapPosition, &parms, NULL );
//
//	*mx = parms.mx;
//	*my = parms.my;
//}
//
//void AHUD::StaticDrawCanvasLine ( class UCanvas* C, float X1, float Y1, float X2, float Y2, class FColor LineColor )
//{
//	static UFunction* pStaticDrawCanvasLine = 0;
//	AHUD_execStaticDrawCanvasLine_Parms parms;
//
//	if ( !pStaticDrawCanvasLine )
//		pStaticDrawCanvasLine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.StaticDrawCanvasLine" );
//
//	parms.C = C;
//	parms.X1 = X1;
//	parms.Y1 = Y1;
//	parms.X2 = X2;
//	parms.Y2 = Y2;
//	parms.LineColor = LineColor;
//	this->ProcessEvent ( pStaticDrawCanvasLine, &parms, NULL );
//
//}
//
//void AHUD::DrawCanvasLine ( float X1, float Y1, float X2, float Y2, class FColor LineColor )
//{
//	static UFunction* pDrawCanvasLine = 0;
//	AHUD_execDrawCanvasLine_Parms parms;
//
//	if ( !pDrawCanvasLine )
//		pDrawCanvasLine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawCanvasLine" );
//
//	parms.X1 = X1;
//	parms.Y1 = Y1;
//	parms.X2 = X2;
//	parms.Y2 = Y2;
//	parms.LineColor = LineColor;
//	this->ProcessEvent ( pDrawCanvasLine, &parms, NULL );
//
//}
//
//void AHUD::DrawDirectionalArrow ( struct FVector InLocation, struct FRotator InRotation, class FColor InColor, float InDrawScale )
//{
//	static UFunction* pDrawDirectionalArrow = 0;
//	AHUD_execDrawDirectionalArrow_Parms parms;
//
//	if ( !pDrawDirectionalArrow )
//		pDrawDirectionalArrow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawDirectionalArrow" );
//
//	parms.InLocation = InLocation;
//	parms.InRotation = InRotation;
//	parms.InColor = InColor;
//	parms.InDrawScale = InDrawScale;
//	this->ProcessEvent ( pDrawDirectionalArrow, &parms, NULL );
//
//}
//
//void AHUD::DrawSphere ( struct FVector Base, class FColor Color, float Radius, int NumDivisions )
//{
//	static UFunction* pDrawSphere = 0;
//	AHUD_execDrawSphere_Parms parms;
//
//	if ( !pDrawSphere )
//		pDrawSphere = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawSphere" );
//
//	parms.Base = Base;
//	parms.Color = Color;
//	parms.Radius = Radius;
//	parms.NumDivisions = NumDivisions;
//	this->ProcessEvent ( pDrawSphere, &parms, NULL );
//
//}
//
//void AHUD::DrawCircle ( struct FVector Base, struct FVector X, struct FVector Y, class FColor Color, float Radius, int NumSides )
//{
//	static UFunction* pDrawCircle = 0;
//	AHUD_execDrawCircle_Parms parms;
//
//	if ( !pDrawCircle )
//		pDrawCircle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawCircle" );
//
//	parms.Base = Base;
//	parms.X = X;
//	parms.Y = Y;
//	parms.Color = Color;
//	parms.Radius = Radius;
//	parms.NumSides = NumSides;
//	this->ProcessEvent ( pDrawCircle, &parms, NULL );
//
//}
//
//void AHUD::DrawBox ( struct FVector Min, struct FVector Max, class FColor Color )
//{
//	static UFunction* pDrawBox = 0;
//	AHUD_execDrawBox_Parms parms;
//
//	if ( !pDrawBox )
//		pDrawBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.DrawBox" );
//
//	parms.Min = Min;
//	parms.Max = Max;
//	parms.Color = Color;
//	this->ProcessEvent ( pDrawBox, &parms, NULL );
//
//}
//
//void AHUD::Draw3DLine ( struct FVector Start, struct FVector End, class FColor LineColor )
//{
//	static UFunction* pDraw3DLine = 0;
//	AHUD_execDraw3DLine_Parms parms;
//
//	if ( !pDraw3DLine )
//		pDraw3DLine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HUD.Draw3DLine" );
//
//	parms.Start = Start;
//	parms.End = End;
//	parms.LineColor = LineColor;
//	this->ProcessEvent ( pDraw3DLine, &parms, NULL );
//
//}
//
//class AActor* AWarpZoneMarker::SpecialHandling ( class APawn* Other )
//{
//	static UFunction* pSpecialHandling = 0;
//	AWarpZoneMarker_execSpecialHandling_Parms parms;
//
//	if ( !pSpecialHandling )
//		pSpecialHandling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WarpZoneMarker.SpecialHandling" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSpecialHandling, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AWarpZoneMarker::FindTriggerActor (  )
//{
//	static UFunction* pFindTriggerActor = 0;
//	AWarpZoneMarker_execFindTriggerActor_Parms parms;
//
//	if ( !pFindTriggerActor )
//		pFindTriggerActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WarpZoneMarker.FindTriggerActor" );
//
//	this->ProcessEvent ( pFindTriggerActor, &parms, NULL );
//
//}
//
//void AWarpZoneMarker::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AWarpZoneMarker_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WarpZoneMarker.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void ATrigger::UnTouch ( class AActor* Other )
//{
//	static UFunction* pUnTouch = 0;
//	ATrigger_execUnTouch_Parms parms;
//
//	if ( !pUnTouch )
//		pUnTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.UnTouch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pUnTouch, &parms, NULL );
//
//}
//
//void ATrigger::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pTakeDamage = 0;
//	ATrigger_execTakeDamage_Parms parms;
//
//	if ( !pTakeDamage )
//		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.TakeDamage" );
//
//	parms.Damage = Damage;
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.Momentum = Momentum;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pTakeDamage, &parms, NULL );
//
//}
//
//void ATrigger::Timer (  )
//{
//	static UFunction* pTimer = 0;
//	ATrigger_execTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//void ATrigger::Touch ( class AActor* Other )
//{
//	static UFunction* pTouch = 0;
//	ATrigger_execTouch_Parms parms;
//
//	if ( !pTouch )
//		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.Touch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTouch, &parms, NULL );
//
//}
//
//class AActor* ATrigger::FindInstigator ( class AActor* Other )
//{
//	static UFunction* pFindInstigator = 0;
//	ATrigger_execFindInstigator_Parms parms;
//
//	if ( !pFindInstigator )
//		pFindInstigator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.FindInstigator" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pFindInstigator, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ATrigger::IsRelevant ( class AActor* Other )
//{
//	static UFunction* pIsRelevant = 0;
//	ATrigger_execIsRelevant_Parms parms;
//
//	if ( !pIsRelevant )
//		pIsRelevant = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.IsRelevant" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pIsRelevant, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ATrigger::CheckTouchList (  )
//{
//	static UFunction* pCheckTouchList = 0;
//	ATrigger_execCheckTouchList_Parms parms;
//
//	if ( !pCheckTouchList )
//		pCheckTouchList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.CheckTouchList" );
//
//	this->ProcessEvent ( pCheckTouchList, &parms, NULL );
//
//}
//
//class AActor* ATrigger::SpecialHandling ( class APawn* Other )
//{
//	static UFunction* pSpecialHandling = 0;
//	ATrigger_execSpecialHandling_Parms parms;
//
//	if ( !pSpecialHandling )
//		pSpecialHandling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.SpecialHandling" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSpecialHandling, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ATrigger::FindTriggerActor (  )
//{
//	static UFunction* pFindTriggerActor = 0;
//	ATrigger_execFindTriggerActor_Parms parms;
//
//	if ( !pFindTriggerActor )
//		pFindTriggerActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.FindTriggerActor" );
//
//	this->ProcessEvent ( pFindTriggerActor, &parms, NULL );
//
//}
//
//void ATrigger::Reset (  )
//{
//	static UFunction* pReset = 0;
//	ATrigger_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void ATrigger::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	ATrigger_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void ATrigger::PreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	ATrigger_execPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//bool ATrigger::SelfTriggered (  )
//{
//	static UFunction* pSelfTriggered = 0;
//	ATrigger_execSelfTriggered_Parms parms;
//
//	if ( !pSelfTriggered )
//		pSelfTriggered = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.SelfTriggered" );
//
//	this->ProcessEvent ( pSelfTriggered, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ATrigger::PlayerToucherDied ( class APawn* P )
//{
//	static UFunction* pPlayerToucherDied = 0;
//	ATrigger_execPlayerToucherDied_Parms parms;
//
//	if ( !pPlayerToucherDied )
//		pPlayerToucherDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Trigger.PlayerToucherDied" );
//
//	parms.P = P;
//	this->ProcessEvent ( pPlayerToucherDied, &parms, NULL );
//
//}
//
//float AInventorySpot::eventDetourWeight ( class APawn* Other, float PathWeight )
//{
//	static UFunction* pDetourWeight = 0;
//	AInventorySpot_eventDetourWeight_Parms parms;
//
//	if ( !pDetourWeight )
//		pDetourWeight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InventorySpot.DetourWeight" );
//
//	parms.Other = Other;
//	parms.PathWeight = PathWeight;
//	this->ProcessEvent ( pDetourWeight, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* AInventorySpot::GetMoveTargetFor ( class AAIController* B, float MaxWait )
//{
//	static UFunction* pGetMoveTargetFor = 0;
//	AInventorySpot_execGetMoveTargetFor_Parms parms;
//
//	if ( !pGetMoveTargetFor )
//		pGetMoveTargetFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.InventorySpot.GetMoveTargetFor" );
//
//	parms.B = B;
//	parms.MaxWait = MaxWait;
//	this->ProcessEvent ( pGetMoveTargetFor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int ATeleporter::eventSpecialCost ( class APawn* Other, class UReachSpec* Path )
//{
//	static UFunction* pSpecialCost = 0;
//	ATeleporter_eventSpecialCost_Parms parms;
//
//	if ( !pSpecialCost )
//		pSpecialCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Teleporter.SpecialCost" );
//
//	parms.Other = Other;
//	parms.Path = Path;
//	this->ProcessEvent ( pSpecialCost, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* ATeleporter::SpecialHandling ( class APawn* Other )
//{
//	static UFunction* pSpecialHandling = 0;
//	ATeleporter_execSpecialHandling_Parms parms;
//
//	if ( !pSpecialHandling )
//		pSpecialHandling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Teleporter.SpecialHandling" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pSpecialHandling, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ATeleporter::PostTouch ( class AActor* Other )
//{
//	static UFunction* pPostTouch = 0;
//	ATeleporter_execPostTouch_Parms parms;
//
//	if ( !pPostTouch )
//		pPostTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Teleporter.PostTouch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pPostTouch, &parms, NULL );
//
//}
//
//void ATeleporter::eventTouch ( class AActor* Other )
//{
//	static UFunction* pTouch = 0;
//	ATeleporter_eventTouch_Parms parms;
//
//	if ( !pTouch )
//		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Teleporter.Touch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTouch, &parms, NULL );
//
//}
//
//void ATeleporter::Trigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	ATeleporter_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Teleporter.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//bool ATeleporter::Accept ( class AActor* Incoming, class AActor* Source )
//{
//	static UFunction* pAccept = 0;
//	ATeleporter_execAccept_Parms parms;
//
//	if ( !pAccept )
//		pAccept = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Teleporter.Accept" );
//
//	parms.Incoming = Incoming;
//	parms.Source = Source;
//	this->ProcessEvent ( pAccept, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ATeleporter::FindTriggerActor (  )
//{
//	static UFunction* pFindTriggerActor = 0;
//	ATeleporter_execFindTriggerActor_Parms parms;
//
//	if ( !pFindTriggerActor )
//		pFindTriggerActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Teleporter.FindTriggerActor" );
//
//	this->ProcessEvent ( pFindTriggerActor, &parms, NULL );
//
//}
//
//void ATeleporter::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	ATeleporter_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Teleporter.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AZoneInfo::eventActorLeaving ( class AActor* Other )
//{
//	static UFunction* pActorLeaving = 0;
//	AZoneInfo_eventActorLeaving_Parms parms;
//
//	if ( !pActorLeaving )
//		pActorLeaving = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ZoneInfo.ActorLeaving" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pActorLeaving, &parms, NULL );
//
//}
//
//void AZoneInfo::eventActorEntered ( class AActor* Other )
//{
//	static UFunction* pActorEntered = 0;
//	AZoneInfo_eventActorEntered_Parms parms;
//
//	if ( !pActorEntered )
//		pActorEntered = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ZoneInfo.ActorEntered" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pActorEntered, &parms, NULL );
//
//}
//
//void AZoneInfo::PreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AZoneInfo_execPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ZoneInfo.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void AZoneInfo::LinkToSkybox (  )
//{
//	static UFunction* pLinkToSkybox = 0;
//	AZoneInfo_execLinkToSkybox_Parms parms;
//
//	if ( !pLinkToSkybox )
//		pLinkToSkybox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ZoneInfo.LinkToSkybox" );
//
//	this->ProcessEvent ( pLinkToSkybox, &parms, NULL );
//
//}
//
//void AZoneInfo::ZoneActors ( class UClass* baseClass, class AActor** Actor )
//{
//	static UFunction* pZoneActors = 0;
//	AZoneInfo_execZoneActors_Parms parms;
//
//	if ( !pZoneActors )
//		pZoneActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ZoneInfo.ZoneActors" );
//
//	WORD iNative = pZoneActors->iNative;
//	pZoneActors->FunctionFlags &= ~FUNC_Native;
//	pZoneActors->iNative = 0;
//
//	parms.baseClass = baseClass;
//	this->ProcessEvent ( pZoneActors, &parms, NULL );
//
//	pZoneActors->iNative = iNative;
//	pZoneActors->FunctionFlags |= FUNC_Native;
//	*Actor = parms.Actor;
//}
//
//void AWarpZoneInfo::eventActorLeaving ( class AActor* Other )
//{
//	static UFunction* pActorLeaving = 0;
//	AWarpZoneInfo_eventActorLeaving_Parms parms;
//
//	if ( !pActorLeaving )
//		pActorLeaving = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WarpZoneInfo.ActorLeaving" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pActorLeaving, &parms, NULL );
//
//}
//
//void AWarpZoneInfo::ActorEntered ( class AActor* Other )
//{
//	static UFunction* pActorEntered = 0;
//	AWarpZoneInfo_execActorEntered_Parms parms;
//
//	if ( !pActorEntered )
//		pActorEntered = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WarpZoneInfo.ActorEntered" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pActorEntered, &parms, NULL );
//
//}
//
//void AWarpZoneInfo::eventForceGenerate (  )
//{
//	static UFunction* pForceGenerate = 0;
//	AWarpZoneInfo_eventForceGenerate_Parms parms;
//
//	if ( !pForceGenerate )
//		pForceGenerate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WarpZoneInfo.ForceGenerate" );
//
//	this->ProcessEvent ( pForceGenerate, &parms, NULL );
//
//}
//
//void AWarpZoneInfo::eventGenerate (  )
//{
//	static UFunction* pGenerate = 0;
//	AWarpZoneInfo_eventGenerate_Parms parms;
//
//	if ( !pGenerate )
//		pGenerate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WarpZoneInfo.Generate" );
//
//	this->ProcessEvent ( pGenerate, &parms, NULL );
//
//}
//
//void AWarpZoneInfo::Trigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	AWarpZoneInfo_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WarpZoneInfo.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void AWarpZoneInfo::PreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AWarpZoneInfo_execPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WarpZoneInfo.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void AWarpZoneInfo::UnWarp ( struct FVector* loc, struct FVector* Vel, struct FRotator* R )
//{
//	static UFunction* pUnWarp = 0;
//	AWarpZoneInfo_execUnWarp_Parms parms;
//
//	if ( !pUnWarp )
//		pUnWarp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WarpZoneInfo.UnWarp" );
//
//	WORD iNative = pUnWarp->iNative;
//	pUnWarp->FunctionFlags &= ~FUNC_Native;
//	pUnWarp->iNative = 0;
//
//	parms.loc = *loc;
//	parms.Vel = *Vel;
//	parms.R = *R;
//	this->ProcessEvent ( pUnWarp, &parms, NULL );
//
//	pUnWarp->iNative = iNative;
//	pUnWarp->FunctionFlags |= FUNC_Native;
//	*loc = parms.loc;
//	*Vel = parms.Vel;
//	*R = parms.R;
//}
//
//void AWarpZoneInfo::Warp ( struct FVector* loc, struct FVector* Vel, struct FRotator* R )
//{
//	static UFunction* pWarp = 0;
//	AWarpZoneInfo_execWarp_Parms parms;
//
//	if ( !pWarp )
//		pWarp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WarpZoneInfo.Warp" );
//
//	WORD iNative = pWarp->iNative;
//	pWarp->FunctionFlags &= ~FUNC_Native;
//	pWarp->iNative = 0;
//
//	parms.loc = *loc;
//	parms.Vel = *Vel;
//	parms.R = *R;
//	this->ProcessEvent ( pWarp, &parms, NULL );
//
//	pWarp->iNative = iNative;
//	pWarp->FunctionFlags |= FUNC_Native;
//	*loc = parms.loc;
//	*Vel = parms.Vel;
//	*R = parms.R;
//}
//
//void AProjectile::SufferEffect ( class APawn* Victim, float fDist, float fReduceRate )
//{
//	static UFunction* pSufferEffect = 0;
//	AProjectile_execSufferEffect_Parms parms;
//
//	if ( !pSufferEffect )
//		pSufferEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.SufferEffect" );
//
//	parms.Victim = Victim;
//	parms.fDist = fDist;
//	parms.fReduceRate = fReduceRate;
//	this->ProcessEvent ( pSufferEffect, &parms, NULL );
//
//}
//
//void AProjectile::eventPostRender2D ( class UCanvas* C, float ScreenLocX, float ScreenLocY )
//{
//	static UFunction* pPostRender2D = 0;
//	AProjectile_eventPostRender2D_Parms parms;
//
//	if ( !pPostRender2D )
//		pPostRender2D = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.PostRender2D" );
//
//	parms.C = C;
//	parms.ScreenLocX = ScreenLocX;
//	parms.ScreenLocY = ScreenLocY;
//	this->ProcessEvent ( pPostRender2D, &parms, NULL );
//
//}
//
//bool AProjectile::IsStationary (  )
//{
//	static UFunction* pIsStationary = 0;
//	AProjectile_execIsStationary_Parms parms;
//
//	if ( !pIsStationary )
//		pIsStationary = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.IsStationary" );
//
//	this->ProcessEvent ( pIsStationary, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AProjectile::GetRange (  )
//{
//	static UFunction* pGetRange = 0;
//	AProjectile_execGetRange_Parms parms;
//
//	if ( !pGetRange )
//		pGetRange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.GetRange" );
//
//	this->ProcessEvent ( pGetRange, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AProjectile::RandSpin ( float spinRate )
//{
//	static UFunction* pRandSpin = 0;
//	AProjectile_execRandSpin_Parms parms;
//
//	if ( !pRandSpin )
//		pRandSpin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.RandSpin" );
//
//	parms.spinRate = spinRate;
//	this->ProcessEvent ( pRandSpin, &parms, NULL );
//
//}
//
//void AProjectile::Explode ( struct FVector HitLocation, struct FVector HitNormal )
//{
//	static UFunction* pExplode = 0;
//	AProjectile_execExplode_Parms parms;
//
//	if ( !pExplode )
//		pExplode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.Explode" );
//
//	parms.HitLocation = HitLocation;
//	parms.HitNormal = HitNormal;
//	this->ProcessEvent ( pExplode, &parms, NULL );
//
//}
//
//void AProjectile::BlowUp ( struct FVector HitLocation )
//{
//	static UFunction* pBlowUp = 0;
//	AProjectile_execBlowUp_Parms parms;
//
//	if ( !pBlowUp )
//		pBlowUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.BlowUp" );
//
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pBlowUp, &parms, NULL );
//
//}
//
//void AProjectile::HitWall ( struct FVector HitNormal, class AActor* Wall, class UMaterial* HitMaterial )
//{
//	static UFunction* pHitWall = 0;
//	AProjectile_execHitWall_Parms parms;
//
//	if ( !pHitWall )
//		pHitWall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.HitWall" );
//
//	parms.HitNormal = HitNormal;
//	parms.Wall = Wall;
//	parms.HitMaterial = HitMaterial;
//	this->ProcessEvent ( pHitWall, &parms, NULL );
//
//}
//
//void AProjectile::ProcessTouch ( class AActor* Other, struct FVector HitLocation )
//{
//	static UFunction* pProcessTouch = 0;
//	AProjectile_execProcessTouch_Parms parms;
//
//	if ( !pProcessTouch )
//		pProcessTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.ProcessTouch" );
//
//	parms.Other = Other;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pProcessTouch, &parms, NULL );
//
//}
//
//void AProjectile::ClientSideTouch ( class AActor* Other, struct FVector HitLocation )
//{
//	static UFunction* pClientSideTouch = 0;
//	AProjectile_execClientSideTouch_Parms parms;
//
//	if ( !pClientSideTouch )
//		pClientSideTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.ClientSideTouch" );
//
//	parms.Other = Other;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pClientSideTouch, &parms, NULL );
//
//}
//
//void AProjectile::Touch ( class AActor* Other )
//{
//	static UFunction* pTouch = 0;
//	AProjectile_execTouch_Parms parms;
//
//	if ( !pTouch )
//		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.Touch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTouch, &parms, NULL );
//
//}
//
//bool AProjectile::EncroachingOn ( class AActor* Other )
//{
//	static UFunction* pEncroachingOn = 0;
//	AProjectile_execEncroachingOn_Parms parms;
//
//	if ( !pEncroachingOn )
//		pEncroachingOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.EncroachingOn" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pEncroachingOn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AProjectile::HurtRadius ( float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HitLocation )
//{
//	static UFunction* pHurtRadius = 0;
//	AProjectile_execHurtRadius_Parms parms;
//
//	if ( !pHurtRadius )
//		pHurtRadius = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.HurtRadius" );
//
//	parms.DamageAmount = DamageAmount;
//	parms.DamageRadius = DamageRadius;
//	parms.DamageType = DamageType;
//	parms.Momentum = Momentum;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pHurtRadius, &parms, NULL );
//
//}
//
//bool AProjectile::CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation )
//{
//	static UFunction* pCheckMaxEffectDistance = 0;
//	AProjectile_execCheckMaxEffectDistance_Parms parms;
//
//	if ( !pCheckMaxEffectDistance )
//		pCheckMaxEffectDistance = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.CheckMaxEffectDistance" );
//
//	parms.P = P;
//	parms.SpawnLocation = SpawnLocation;
//	this->ProcessEvent ( pCheckMaxEffectDistance, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AProjectile::Reset (  )
//{
//	static UFunction* pReset = 0;
//	AProjectile_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void AProjectile::OnEndRound (  )
//{
//	static UFunction* pOnEndRound = 0;
//	AProjectile_execOnEndRound_Parms parms;
//
//	if ( !pOnEndRound )
//		pOnEndRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.OnEndRound" );
//
//	this->ProcessEvent ( pOnEndRound, &parms, NULL );
//
//}
//
//bool AProjectile::CanSplash (  )
//{
//	static UFunction* pCanSplash = 0;
//	AProjectile_execCanSplash_Parms parms;
//
//	if ( !pCanSplash )
//		pCanSplash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.CanSplash" );
//
//	this->ProcessEvent ( pCanSplash, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AProjectile::SpecialCalcView ( bool bBehindView, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation )
//{
//	static UFunction* pSpecialCalcView = 0;
//	AProjectile_execSpecialCalcView_Parms parms;
//
//	if ( !pSpecialCalcView )
//		pSpecialCalcView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.SpecialCalcView" );
//
//	parms.bBehindView = bBehindView;
//	this->ProcessEvent ( pSpecialCalcView, &parms, NULL );
//
//	*ViewActor = parms.ViewActor;
//	*CameraLocation = parms.CameraLocation;
//	*CameraRotation = parms.CameraRotation;
//	return parms.ReturnValue;
//}
//
//void AProjectile::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AProjectile_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//float AProjectile::GetInstigatorsDirectionbyDot ( struct FRotator pawnRotation, struct FVector pawnVelocity )
//{
//	static UFunction* pGetInstigatorsDirectionbyDot = 0;
//	AProjectile_execGetInstigatorsDirectionbyDot_Parms parms;
//
//	if ( !pGetInstigatorsDirectionbyDot )
//		pGetInstigatorsDirectionbyDot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Projectile.GetInstigatorsDirectionbyDot" );
//
//	parms.pawnRotation = pawnRotation;
//	parms.pawnVelocity = pawnVelocity;
//	this->ProcessEvent ( pGetInstigatorsDirectionbyDot, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ADecoration::Bump ( class AActor* Other )
//{
//	static UFunction* pBump = 0;
//	ADecoration_execBump_Parms parms;
//
//	if ( !pBump )
//		pBump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Decoration.Bump" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pBump, &parms, NULL );
//
//}
//
//void ADecoration::Timer (  )
//{
//	static UFunction* pTimer = 0;
//	ADecoration_execTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Decoration.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//void ADecoration::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	ADecoration_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Decoration.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void ADecoration::BaseChange (  )
//{
//	static UFunction* pBaseChange = 0;
//	ADecoration_execBaseChange_Parms parms;
//
//	if ( !pBaseChange )
//		pBaseChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Decoration.BaseChange" );
//
//	this->ProcessEvent ( pBaseChange, &parms, NULL );
//
//}
//
//void ADecoration::Trigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	ADecoration_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Decoration.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void ADecoration::PhysicsVolumeChange ( class APhysicsVolume* NewVolume )
//{
//	static UFunction* pPhysicsVolumeChange = 0;
//	ADecoration_execPhysicsVolumeChange_Parms parms;
//
//	if ( !pPhysicsVolumeChange )
//		pPhysicsVolumeChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Decoration.PhysicsVolumeChange" );
//
//	parms.NewVolume = NewVolume;
//	this->ProcessEvent ( pPhysicsVolumeChange, &parms, NULL );
//
//}
//
//void ADecoration::TakeDamage ( int NDamage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pTakeDamage = 0;
//	ADecoration_execTakeDamage_Parms parms;
//
//	if ( !pTakeDamage )
//		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Decoration.TakeDamage" );
//
//	parms.NDamage = NDamage;
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.Momentum = Momentum;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pTakeDamage, &parms, NULL );
//
//}
//
//void ADecoration::HitWall ( struct FVector HitNormal, class AActor* Wall, class UMaterial* HitMaterial )
//{
//	static UFunction* pHitWall = 0;
//	ADecoration_execHitWall_Parms parms;
//
//	if ( !pHitWall )
//		pHitWall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Decoration.HitWall" );
//
//	parms.HitNormal = HitNormal;
//	parms.Wall = Wall;
//	parms.HitMaterial = HitMaterial;
//	this->ProcessEvent ( pHitWall, &parms, NULL );
//
//}
//
//void ADecoration::Landed ( struct FVector HitNormal )
//{
//	static UFunction* pLanded = 0;
//	ADecoration_execLanded_Parms parms;
//
//	if ( !pLanded )
//		pLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Decoration.Landed" );
//
//	parms.HitNormal = HitNormal;
//	this->ProcessEvent ( pLanded, &parms, NULL );
//
//}
//
//void ADecoration::Drop ( struct FVector NewVel, struct FString sReason )
//{
//	static UFunction* pDrop = 0;
//	ADecoration_execDrop_Parms parms;
//
//	if ( !pDrop )
//		pDrop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Decoration.Drop" );
//
//	parms.NewVel = NewVel;
//	parms.sReason = sReason;
//	this->ProcessEvent ( pDrop, &parms, NULL );
//
//}
//
//bool ADecoration::CanSplash (  )
//{
//	static UFunction* pCanSplash = 0;
//	ADecoration_execCanSplash_Parms parms;
//
//	if ( !pCanSplash )
//		pCanSplash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Decoration.CanSplash" );
//
//	this->ProcessEvent ( pCanSplash, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ADecoration::eventNotReachableBy ( class APawn* P )
//{
//	static UFunction* pNotReachableBy = 0;
//	ADecoration_eventNotReachableBy_Parms parms;
//
//	if ( !pNotReachableBy )
//		pNotReachableBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Decoration.NotReachableBy" );
//
//	parms.P = P;
//	this->ProcessEvent ( pNotReachableBy, &parms, NULL );
//
//}
//
//void AScout::PreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AScout_execPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Scout.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void AGameInfo::PermitWeaponChangeInSpecialMode (  )
//{
//	static UFunction* pPermitWeaponChangeInSpecialMode = 0;
//	AGameInfo_execPermitWeaponChangeInSpecialMode_Parms parms;
//
//	if ( !pPermitWeaponChangeInSpecialMode )
//		pPermitWeaponChangeInSpecialMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PermitWeaponChangeInSpecialMode" );
//
//	this->ProcessEvent ( pPermitWeaponChangeInSpecialMode, &parms, NULL );
//
//}
//
//bool AGameInfo::rfAckGetBotID ( int Result, unsigned char RequestedAFCount, unsigned char RequestedRSACount, class TArray< int > AFBotID, class TArray< int > RSABotID )
//{
//	static UFunction* prfAckGetBotID = 0;
//	AGameInfo_execrfAckGetBotID_Parms parms;
//
//	if ( !prfAckGetBotID )
//		prfAckGetBotID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.rfAckGetBotID" );
//
//	parms.Result = Result;
//	parms.RequestedAFCount = RequestedAFCount;
//	parms.RequestedRSACount = RequestedRSACount;
//	parms.AFBotID = AFBotID;
//	parms.RSABotID = RSABotID;
//	this->ProcessEvent ( prfAckGetBotID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* AGameInfo::eventGetNearFlag ( class AActor* A )
//{
//	static UFunction* pGetNearFlag = 0;
//	AGameInfo_eventGetNearFlag_Parms parms;
//
//	if ( !pGetNearFlag )
//		pGetNearFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetNearFlag" );
//
//	parms.A = A;
//	this->ProcessEvent ( pGetNearFlag, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::GetGameSpecificPurposes ( class AController* Owner, class TArray< class UObject* >* purposes )
//{
//	static UFunction* pGetGameSpecificPurposes = 0;
//	AGameInfo_execGetGameSpecificPurposes_Parms parms;
//
//	if ( !pGetGameSpecificPurposes )
//		pGetGameSpecificPurposes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetGameSpecificPurposes" );
//
//	parms.Owner = Owner;
//	this->ProcessEvent ( pGetGameSpecificPurposes, &parms, NULL );
//
//	*purposes = parms.purposes;
//}
//
//void AGameInfo::GetGameSpecificActions ( class AController* C, class UwNPCActions* npcActions, class TArray< class UObject* >* Actions )
//{
//	static UFunction* pGetGameSpecificActions = 0;
//	AGameInfo_execGetGameSpecificActions_Parms parms;
//
//	if ( !pGetGameSpecificActions )
//		pGetGameSpecificActions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetGameSpecificActions" );
//
//	parms.C = C;
//	parms.npcActions = npcActions;
//	this->ProcessEvent ( pGetGameSpecificActions, &parms, NULL );
//
//	*Actions = parms.Actions;
//}
//
//class TArray< struct FVector > AGameInfo::GetDeathPosArray (  )
//{
//	static UFunction* pGetDeathPosArray = 0;
//	AGameInfo_execGetDeathPosArray_Parms parms;
//
//	if ( !pGetDeathPosArray )
//		pGetDeathPosArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetDeathPosArray" );
//
//	this->ProcessEvent ( pGetDeathPosArray, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::PushDeathPos ( struct FVector vPos )
//{
//	static UFunction* pPushDeathPos = 0;
//	AGameInfo_execPushDeathPos_Parms parms;
//
//	if ( !pPushDeathPos )
//		pPushDeathPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PushDeathPos" );
//
//	parms.vPos = vPos;
//	this->ProcessEvent ( pPushDeathPos, &parms, NULL );
//
//}
//
//void AGameInfo::Kill ( class AController* C )
//{
//	static UFunction* pKill = 0;
//	AGameInfo_execKill_Parms parms;
//
//	if ( !pKill )
//		pKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.Kill" );
//
//	parms.C = C;
//	this->ProcessEvent ( pKill, &parms, NULL );
//
//}
//
//void AGameInfo::GetFlagsInfo ( int* outNumFlags, int* outNumCapturedFlagsByTeam1, int* outNumCapturedFlagsByTeam2 )
//{
//	static UFunction* pGetFlagsInfo = 0;
//	AGameInfo_execGetFlagsInfo_Parms parms;
//
//	if ( !pGetFlagsInfo )
//		pGetFlagsInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetFlagsInfo" );
//
//	parms.outNumFlags = *outNumFlags;
//	parms.outNumCapturedFlagsByTeam1 = *outNumCapturedFlagsByTeam1;
//	parms.outNumCapturedFlagsByTeam2 = *outNumCapturedFlagsByTeam2;
//	this->ProcessEvent ( pGetFlagsInfo, &parms, NULL );
//
//	*outNumFlags = parms.outNumFlags;
//	*outNumCapturedFlagsByTeam1 = parms.outNumCapturedFlagsByTeam1;
//	*outNumCapturedFlagsByTeam2 = parms.outNumCapturedFlagsByTeam2;
//}
//
//float AGameInfo::GetSupplyRandom (  )
//{
//	static UFunction* pGetSupplyRandom = 0;
//	AGameInfo_execGetSupplyRandom_Parms parms;
//
//	if ( !pGetSupplyRandom )
//		pGetSupplyRandom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetSupplyRandom" );
//
//	this->ProcessEvent ( pGetSupplyRandom, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::CanPawnTakeDamage (  )
//{
//	static UFunction* pCanPawnTakeDamage = 0;
//	AGameInfo_execCanPawnTakeDamage_Parms parms;
//
//	if ( !pCanPawnTakeDamage )
//		pCanPawnTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.CanPawnTakeDamage" );
//
//	this->ProcessEvent ( pCanPawnTakeDamage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::SendRoundStartTime ( class TArray< int > aPlayerIDs )
//{
//	static UFunction* pSendRoundStartTime = 0;
//	AGameInfo_execSendRoundStartTime_Parms parms;
//
//	if ( !pSendRoundStartTime )
//		pSendRoundStartTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SendRoundStartTime" );
//
//	parms.aPlayerIDs = aPlayerIDs;
//	this->ProcessEvent ( pSendRoundStartTime, &parms, NULL );
//
//}
//
//void AGameInfo::SendGameStartTime ( class TArray< int > aPlayerIDs )
//{
//	static UFunction* pSendGameStartTime = 0;
//	AGameInfo_execSendGameStartTime_Parms parms;
//
//	if ( !pSendGameStartTime )
//		pSendGameStartTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SendGameStartTime" );
//
//	parms.aPlayerIDs = aPlayerIDs;
//	this->ProcessEvent ( pSendGameStartTime, &parms, NULL );
//
//}
//
//void AGameInfo::SendReqChangeWeaponSet ( int PlayerID, int SlotIndex )
//{
//	static UFunction* pSendReqChangeWeaponSet = 0;
//	AGameInfo_execSendReqChangeWeaponSet_Parms parms;
//
//	if ( !pSendReqChangeWeaponSet )
//		pSendReqChangeWeaponSet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SendReqChangeWeaponSet" );
//
//	parms.PlayerID = PlayerID;
//	parms.SlotIndex = SlotIndex;
//	this->ProcessEvent ( pSendReqChangeWeaponSet, &parms, NULL );
//
//}
//
//void AGameInfo::SendReqUpdateMyHostPriorityPoint ( int Point )
//{
//	static UFunction* pSendReqUpdateMyHostPriorityPoint = 0;
//	AGameInfo_execSendReqUpdateMyHostPriorityPoint_Parms parms;
//
//	if ( !pSendReqUpdateMyHostPriorityPoint )
//		pSendReqUpdateMyHostPriorityPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SendReqUpdateMyHostPriorityPoint" );
//
//	parms.Point = Point;
//	this->ProcessEvent ( pSendReqUpdateMyHostPriorityPoint, &parms, NULL );
//
//}
//
//bool AGameInfo::IsWarpPossible (  )
//{
//	static UFunction* pIsWarpPossible = 0;
//	AGameInfo_execIsWarpPossible_Parms parms;
//
//	if ( !pIsWarpPossible )
//		pIsWarpPossible = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsWarpPossible" );
//
//	this->ProcessEvent ( pIsWarpPossible, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::IsRightTimeForRespawn ( class AController* C )
//{
//	static UFunction* pIsRightTimeForRespawn = 0;
//	AGameInfo_execIsRightTimeForRespawn_Parms parms;
//
//	if ( !pIsRightTimeForRespawn )
//		pIsRightTimeForRespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsRightTimeForRespawn" );
//
//	parms.C = C;
//	this->ProcessEvent ( pIsRightTimeForRespawn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::SendMatchOverEnd (  )
//{
//	static UFunction* pSendMatchOverEnd = 0;
//	AGameInfo_execSendMatchOverEnd_Parms parms;
//
//	if ( !pSendMatchOverEnd )
//		pSendMatchOverEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SendMatchOverEnd" );
//
//	this->ProcessEvent ( pSendMatchOverEnd, &parms, NULL );
//
//}
//
//void AGameInfo::SendMatchOver (  )
//{
//	static UFunction* pSendMatchOver = 0;
//	AGameInfo_execSendMatchOver_Parms parms;
//
//	if ( !pSendMatchOver )
//		pSendMatchOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SendMatchOver" );
//
//	this->ProcessEvent ( pSendMatchOver, &parms, NULL );
//
//}
//
//int AGameInfo::GetTotalPlayedTime (  )
//{
//	static UFunction* pGetTotalPlayedTime = 0;
//	AGameInfo_execGetTotalPlayedTime_Parms parms;
//
//	if ( !pGetTotalPlayedTime )
//		pGetTotalPlayedTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetTotalPlayedTime" );
//
//	this->ProcessEvent ( pGetTotalPlayedTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AGameInfo::CountPlayers (  )
//{
//	static UFunction* pCountPlayers = 0;
//	AGameInfo_execCountPlayers_Parms parms;
//
//	if ( !pCountPlayers )
//		pCountPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.CountPlayers" );
//
//	this->ProcessEvent ( pCountPlayers, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::SendMatchResult (  )
//{
//	static UFunction* pSendMatchResult = 0;
//	AGameInfo_execSendMatchResult_Parms parms;
//
//	if ( !pSendMatchResult )
//		pSendMatchResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SendMatchResult" );
//
//	this->ProcessEvent ( pSendMatchResult, &parms, NULL );
//
//}
//
//void AGameInfo::SendRawMatchResult (  )
//{
//	static UFunction* pSendRawMatchResult = 0;
//	AGameInfo_execSendRawMatchResult_Parms parms;
//
//	if ( !pSendRawMatchResult )
//		pSendRawMatchResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SendRawMatchResult" );
//
//	this->ProcessEvent ( pSendRawMatchResult, &parms, NULL );
//
//}
//
//class TArray< int > AGameInfo::GetTeamScores (  )
//{
//	static UFunction* pGetTeamScores = 0;
//	AGameInfo_execGetTeamScores_Parms parms;
//
//	if ( !pGetTeamScores )
//		pGetTeamScores = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetTeamScores" );
//
//	this->ProcessEvent ( pGetTeamScores, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AGameInfo::GetResultPointRatio_Intervention ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pGetResultPointRatio_Intervention = 0;
//	AGameInfo_execGetResultPointRatio_Intervention_Parms parms;
//
//	if ( !pGetResultPointRatio_Intervention )
//		pGetResultPointRatio_Intervention = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetResultPointRatio_Intervention" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pGetResultPointRatio_Intervention, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::CalcResultPoints (  )
//{
//	static UFunction* pCalcResultPoints = 0;
//	AGameInfo_execCalcResultPoints_Parms parms;
//
//	if ( !pCalcResultPoints )
//		pCalcResultPoints = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.CalcResultPoints" );
//
//	this->ProcessEvent ( pCalcResultPoints, &parms, NULL );
//
//}
//
//void AGameInfo::DeadUse ( class APlayerController* PC )
//{
//	static UFunction* pDeadUse = 0;
//	AGameInfo_execDeadUse_Parms parms;
//
//	if ( !pDeadUse )
//		pDeadUse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.DeadUse" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pDeadUse, &parms, NULL );
//
//}
//
//bool AGameInfo::IsPawnAlive ( class AController* C )
//{
//	static UFunction* pIsPawnAlive = 0;
//	AGameInfo_execIsPawnAlive_Parms parms;
//
//	if ( !pIsPawnAlive )
//		pIsPawnAlive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsPawnAlive" );
//
//	parms.C = C;
//	this->ProcessEvent ( pIsPawnAlive, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::IsRespawnRestrictionTime (  )
//{
//	static UFunction* pIsRespawnRestrictionTime = 0;
//	AGameInfo_execIsRespawnRestrictionTime_Parms parms;
//
//	if ( !pIsRespawnRestrictionTime )
//		pIsRespawnRestrictionTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsRespawnRestrictionTime" );
//
//	this->ProcessEvent ( pIsRespawnRestrictionTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::DisableNextObjective (  )
//{
//	static UFunction* pDisableNextObjective = 0;
//	AGameInfo_execDisableNextObjective_Parms parms;
//
//	if ( !pDisableNextObjective )
//		pDisableNextObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.DisableNextObjective" );
//
//	this->ProcessEvent ( pDisableNextObjective, &parms, NULL );
//
//}
//
//void AGameInfo::WeakObjectives (  )
//{
//	static UFunction* pWeakObjectives = 0;
//	AGameInfo_execWeakObjectives_Parms parms;
//
//	if ( !pWeakObjectives )
//		pWeakObjectives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.WeakObjectives" );
//
//	this->ProcessEvent ( pWeakObjectives, &parms, NULL );
//
//}
//
//int AGameInfo::MultiMinPlayers (  )
//{
//	static UFunction* pMultiMinPlayers = 0;
//	AGameInfo_execMultiMinPlayers_Parms parms;
//
//	if ( !pMultiMinPlayers )
//		pMultiMinPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.MultiMinPlayers" );
//
//	this->ProcessEvent ( pMultiMinPlayers, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::JustStarted ( float t )
//{
//	static UFunction* pJustStarted = 0;
//	AGameInfo_execJustStarted_Parms parms;
//
//	if ( !pJustStarted )
//		pJustStarted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.JustStarted" );
//
//	parms.t = t;
//	this->ProcessEvent ( pJustStarted, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameInfo::StripColor ( struct FString S )
//{
//	static UFunction* pStripColor = 0;
//	AGameInfo_execStripColor_Parms parms;
//
//	if ( !pStripColor )
//		pStripColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.StripColor" );
//
//	parms.S = S;
//	this->ProcessEvent ( pStripColor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::AddServerDetail ( struct FString RuleName, struct FString RuleValue, struct FServerResponseLine* ServerState )
//{
//	static UFunction* pAddServerDetail = 0;
//	AGameInfo_execAddServerDetail_Parms parms;
//
//	if ( !pAddServerDetail )
//		pAddServerDetail = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AddServerDetail" );
//
//	parms.RuleName = RuleName;
//	parms.RuleValue = RuleValue;
//	this->ProcessEvent ( pAddServerDetail, &parms, NULL );
//
//	*ServerState = parms.ServerState;
//}
//
//bool AGameInfo::AllowMutator ( struct FString MutatorClassName )
//{
//	static UFunction* pAllowMutator = 0;
//	AGameInfo_execAllowMutator_Parms parms;
//
//	if ( !pAllowMutator )
//		pAllowMutator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AllowMutator" );
//
//	parms.MutatorClassName = MutatorClassName;
//	this->ProcessEvent ( pAllowMutator, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::IsVehicleMutator ( struct FString MutatorClassName )
//{
//	static UFunction* pIsVehicleMutator = 0;
//	AGameInfo_execIsVehicleMutator_Parms parms;
//
//	if ( !pIsVehicleMutator )
//		pIsVehicleMutator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsVehicleMutator" );
//
//	parms.MutatorClassName = MutatorClassName;
//	this->ProcessEvent ( pIsVehicleMutator, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AGameInfo::GetBindWeight ( unsigned char KeyNumber )
//{
//	static UFunction* pGetBindWeight = 0;
//	AGameInfo_execGetBindWeight_Parms parms;
//
//	if ( !pGetBindWeight )
//		pGetBindWeight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetBindWeight" );
//
//	parms.KeyNumber = KeyNumber;
//	this->ProcessEvent ( pGetBindWeight, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameInfo::MakeColorCode ( class FColor NewColor )
//{
//	static UFunction* pMakeColorCode = 0;
//	AGameInfo_execMakeColorCode_Parms parms;
//
//	if ( !pMakeColorCode )
//		pMakeColorCode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.MakeColorCode" );
//
//	parms.NewColor = NewColor;
//	this->ProcessEvent ( pMakeColorCode, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameInfo::GetNextLoadHint ( struct FString MapName )
//{
//	static UFunction* pGetNextLoadHint = 0;
//	AGameInfo_execGetNextLoadHint_Parms parms;
//
//	if ( !pGetNextLoadHint )
//		pGetNextLoadHint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetNextLoadHint" );
//
//	parms.MapName = MapName;
//	this->ProcessEvent ( pGetNextLoadHint, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameInfo::GetKeyBindName ( struct FString Cmd, class APlayerController* Ref )
//{
//	static UFunction* pGetKeyBindName = 0;
//	AGameInfo_execGetKeyBindName_Parms parms;
//
//	if ( !pGetKeyBindName )
//		pGetKeyBindName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetKeyBindName" );
//
//	parms.Cmd = Cmd;
//	parms.Ref = Ref;
//	this->ProcessEvent ( pGetKeyBindName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameInfo::ParseLoadingHint ( struct FString Hint, class APlayerController* Ref, class FColor HintColor )
//{
//	static UFunction* pParseLoadingHint = 0;
//	AGameInfo_execParseLoadingHint_Parms parms;
//
//	if ( !pParseLoadingHint )
//		pParseLoadingHint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ParseLoadingHint" );
//
//	parms.Hint = Hint;
//	parms.Ref = Ref;
//	parms.HintColor = HintColor;
//	this->ProcessEvent ( pParseLoadingHint, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameInfo::GetLoadingHint ( class APlayerController* Ref, struct FString MapName, class FColor HintColor )
//{
//	static UFunction* pGetLoadingHint = 0;
//	AGameInfo_execGetLoadingHint_Parms parms;
//
//	if ( !pGetLoadingHint )
//		pGetLoadingHint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetLoadingHint" );
//
//	parms.Ref = Ref;
//	parms.MapName = MapName;
//	parms.HintColor = HintColor;
//	this->ProcessEvent ( pGetLoadingHint, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > AGameInfo::GetAllLoadHints ( bool bThisClassOnly )
//{
//	static UFunction* pGetAllLoadHints = 0;
//	AGameInfo_execGetAllLoadHints_Parms parms;
//
//	if ( !pGetAllLoadHints )
//		pGetAllLoadHints = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetAllLoadHints" );
//
//	parms.bThisClassOnly = bThisClassOnly;
//	this->ProcessEvent ( pGetAllLoadHints, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::eventNoTranslocatorKeyPressed ( class APlayerController* PC )
//{
//	static UFunction* pNoTranslocatorKeyPressed = 0;
//	AGameInfo_eventNoTranslocatorKeyPressed_Parms parms;
//
//	if ( !pNoTranslocatorKeyPressed )
//		pNoTranslocatorKeyPressed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.NoTranslocatorKeyPressed" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pNoTranslocatorKeyPressed, &parms, NULL );
//
//}
//
//void AGameInfo::eventSceneAbort (  )
//{
//	static UFunction* pSceneAbort = 0;
//	AGameInfo_eventSceneAbort_Parms parms;
//
//	if ( !pSceneAbort )
//		pSceneAbort = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SceneAbort" );
//
//	this->ProcessEvent ( pSceneAbort, &parms, NULL );
//
//}
//
//void AGameInfo::eventSceneEnded ( class ASceneManager* SM, class AActor* Other )
//{
//	static UFunction* pSceneEnded = 0;
//	AGameInfo_eventSceneEnded_Parms parms;
//
//	if ( !pSceneEnded )
//		pSceneEnded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SceneEnded" );
//
//	parms.SM = SM;
//	parms.Other = Other;
//	this->ProcessEvent ( pSceneEnded, &parms, NULL );
//
//}
//
//void AGameInfo::eventSceneStarted ( class ASceneManager* SM, class AActor* Other )
//{
//	static UFunction* pSceneStarted = 0;
//	AGameInfo_eventSceneStarted_Parms parms;
//
//	if ( !pSceneStarted )
//		pSceneStarted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SceneStarted" );
//
//	parms.SM = SM;
//	parms.Other = Other;
//	this->ProcessEvent ( pSceneStarted, &parms, NULL );
//
//}
//
//void AGameInfo::AdjustBotInterface ( bool bSinglePlayer )
//{
//	static UFunction* pAdjustBotInterface = 0;
//	AGameInfo_execAdjustBotInterface_Parms parms;
//
//	if ( !pAdjustBotInterface )
//		pAdjustBotInterface = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AdjustBotInterface" );
//
//	parms.bSinglePlayer = bSinglePlayer;
//	this->ProcessEvent ( pAdjustBotInterface, &parms, NULL );
//
//}
//
//void AGameInfo::ParseVoiceCommand ( class APlayerController* Sender, struct FString RecognizedString )
//{
//	static UFunction* pParseVoiceCommand = 0;
//	AGameInfo_execParseVoiceCommand_Parms parms;
//
//	if ( !pParseVoiceCommand )
//		pParseVoiceCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ParseVoiceCommand" );
//
//	parms.Sender = Sender;
//	parms.RecognizedString = RecognizedString;
//	this->ProcessEvent ( pParseVoiceCommand, &parms, NULL );
//
//}
//
//void AGameInfo::GetPlayerControllerList ( class TArray< class APlayerController* >* ControllerArray )
//{
//	static UFunction* pGetPlayerControllerList = 0;
//	AGameInfo_execGetPlayerControllerList_Parms parms;
//
//	if ( !pGetPlayerControllerList )
//		pGetPlayerControllerList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetPlayerControllerList" );
//
//	parms.ControllerArray = *ControllerArray;
//	this->ProcessEvent ( pGetPlayerControllerList, &parms, NULL );
//
//	*ControllerArray = parms.ControllerArray;
//}
//
//void AGameInfo::LoadSRGrammar ( struct FString Grammar )
//{
//	static UFunction* pLoadSRGrammar = 0;
//	AGameInfo_execLoadSRGrammar_Parms parms;
//
//	if ( !pLoadSRGrammar )
//		pLoadSRGrammar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.LoadSRGrammar" );
//
//	parms.Grammar = Grammar;
//	this->ProcessEvent ( pLoadSRGrammar, &parms, NULL );
//
//}
//
//void AGameInfo::eventSetGrammar (  )
//{
//	static UFunction* pSetGrammar = 0;
//	AGameInfo_eventSetGrammar_Parms parms;
//
//	if ( !pSetGrammar )
//		pSetGrammar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SetGrammar" );
//
//	this->ProcessEvent ( pSetGrammar, &parms, NULL );
//
//}
//
//int AGameInfo::GetDefenderNum (  )
//{
//	static UFunction* pGetDefenderNum = 0;
//	AGameInfo_execGetDefenderNum_Parms parms;
//
//	if ( !pGetDefenderNum )
//		pGetDefenderNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetDefenderNum" );
//
//	this->ProcessEvent ( pGetDefenderNum, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AActor* AGameInfo::FindSpecGoalFor ( class APlayerReplicationInfo* PRI, int TeamIndex )
//{
//	static UFunction* pFindSpecGoalFor = 0;
//	AGameInfo_execFindSpecGoalFor_Parms parms;
//
//	if ( !pFindSpecGoalFor )
//		pFindSpecGoalFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.FindSpecGoalFor" );
//
//	parms.PRI = PRI;
//	parms.TeamIndex = TeamIndex;
//	this->ProcessEvent ( pFindSpecGoalFor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::RegisterVehicle ( class AVehicle* V )
//{
//	static UFunction* pRegisterVehicle = 0;
//	AGameInfo_execRegisterVehicle_Parms parms;
//
//	if ( !pRegisterVehicle )
//		pRegisterVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.RegisterVehicle" );
//
//	parms.V = V;
//	this->ProcessEvent ( pRegisterVehicle, &parms, NULL );
//
//}
//
//void AGameInfo::execAdminSay ( struct FString Msg )
//{
//	static UFunction* pAdminSay = 0;
//	AGameInfo_execAdminSay_Parms parms;
//
//	if ( !pAdminSay )
//		pAdminSay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AdminSay" );
//
//	parms.Msg = Msg;
//	this->ProcessEvent ( pAdminSay, &parms, NULL );
//
//}
//
//void AGameInfo::execKillBots ( int Num )
//{
//	static UFunction* pKillBots = 0;
//	AGameInfo_execKillBots_Parms parms;
//
//	if ( !pKillBots )
//		pKillBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.KillBots" );
//
//	parms.Num = Num;
//	this->ProcessEvent ( pKillBots, &parms, NULL );
//
//}
//
//class ATeamInfo* AGameInfo::OtherTeam ( class ATeamInfo* Requester )
//{
//	static UFunction* pOtherTeam = 0;
//	AGameInfo_execOtherTeam_Parms parms;
//
//	if ( !pOtherTeam )
//		pOtherTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.OtherTeam" );
//
//	parms.Requester = Requester;
//	this->ProcessEvent ( pOtherTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::DriverLeftVehicle ( class AVehicle* V, class APawn* P )
//{
//	static UFunction* pDriverLeftVehicle = 0;
//	AGameInfo_execDriverLeftVehicle_Parms parms;
//
//	if ( !pDriverLeftVehicle )
//		pDriverLeftVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.DriverLeftVehicle" );
//
//	parms.V = V;
//	parms.P = P;
//	this->ProcessEvent ( pDriverLeftVehicle, &parms, NULL );
//
//}
//
//bool AGameInfo::CanLeaveVehicle ( class AVehicle* V, class APawn* P )
//{
//	static UFunction* pCanLeaveVehicle = 0;
//	AGameInfo_execCanLeaveVehicle_Parms parms;
//
//	if ( !pCanLeaveVehicle )
//		pCanLeaveVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.CanLeaveVehicle" );
//
//	parms.V = V;
//	parms.P = P;
//	this->ProcessEvent ( pCanLeaveVehicle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::DriverEnteredVehicle ( class AVehicle* V, class APawn* P )
//{
//	static UFunction* pDriverEnteredVehicle = 0;
//	AGameInfo_execDriverEnteredVehicle_Parms parms;
//
//	if ( !pDriverEnteredVehicle )
//		pDriverEnteredVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.DriverEnteredVehicle" );
//
//	parms.V = V;
//	parms.P = P;
//	this->ProcessEvent ( pDriverEnteredVehicle, &parms, NULL );
//
//}
//
//bool AGameInfo::CanEnterVehicle ( class AVehicle* V, class APawn* P )
//{
//	static UFunction* pCanEnterVehicle = 0;
//	AGameInfo_execCanEnterVehicle_Parms parms;
//
//	if ( !pCanEnterVehicle )
//		pCanEnterVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.CanEnterVehicle" );
//
//	parms.V = V;
//	parms.P = P;
//	this->ProcessEvent ( pCanEnterVehicle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameInfo::NewRecommendCombo ( struct FString ComboName, class AAIController* C )
//{
//	static UFunction* pNewRecommendCombo = 0;
//	AGameInfo_execNewRecommendCombo_Parms parms;
//
//	if ( !pNewRecommendCombo )
//		pNewRecommendCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.NewRecommendCombo" );
//
//	parms.ComboName = ComboName;
//	parms.C = C;
//	this->ProcessEvent ( pNewRecommendCombo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameInfo::RecommendCombo ( struct FString ComboName )
//{
//	static UFunction* pRecommendCombo = 0;
//	AGameInfo_execRecommendCombo_Parms parms;
//
//	if ( !pRecommendCombo )
//		pRecommendCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.RecommendCombo" );
//
//	parms.ComboName = ComboName;
//	this->ProcessEvent ( pRecommendCombo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::ReviewJumpSpots ( struct FName TestLabel )
//{
//	static UFunction* pReviewJumpSpots = 0;
//	AGameInfo_execReviewJumpSpots_Parms parms;
//
//	if ( !pReviewJumpSpots )
//		pReviewJumpSpots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ReviewJumpSpots" );
//
//	parms.TestLabel = TestLabel;
//	this->ProcessEvent ( pReviewJumpSpots, &parms, NULL );
//
//}
//
//int AGameInfo::OrderToIndex ( int Order )
//{
//	static UFunction* pOrderToIndex = 0;
//	AGameInfo_execOrderToIndex_Parms parms;
//
//	if ( !pOrderToIndex )
//		pOrderToIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.OrderToIndex" );
//
//	parms.Order = Order;
//	this->ProcessEvent ( pOrderToIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::eventAcceptPlayInfoProperty ( struct FString PropName )
//{
//	static UFunction* pAcceptPlayInfoProperty = 0;
//	AGameInfo_eventAcceptPlayInfoProperty_Parms parms;
//
//	if ( !pAcceptPlayInfoProperty )
//		pAcceptPlayInfoProperty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AcceptPlayInfoProperty" );
//
//	parms.PropName = PropName;
//	this->ProcessEvent ( pAcceptPlayInfoProperty, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameInfo::GetDescriptionText ( struct FString PropName )
//{
//	static UFunction* pGetDescriptionText = 0;
//	AGameInfo_execGetDescriptionText_Parms parms;
//
//	if ( !pGetDescriptionText )
//		pGetDescriptionText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetDescriptionText" );
//
//	parms.PropName = PropName;
//	this->ProcessEvent ( pGetDescriptionText, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameInfo::GetDisplayText ( struct FString PropName )
//{
//	static UFunction* pGetDisplayText = 0;
//	AGameInfo_execGetDisplayText_Parms parms;
//
//	if ( !pGetDisplayText )
//		pGetDisplayText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetDisplayText" );
//
//	parms.PropName = PropName;
//	this->ProcessEvent ( pGetDisplayText, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::FillPlayInfo ( class UPlayInfo* PlayInfo )
//{
//	static UFunction* pFillPlayInfo = 0;
//	AGameInfo_execFillPlayInfo_Parms parms;
//
//	if ( !pFillPlayInfo )
//		pFillPlayInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.FillPlayInfo" );
//
//	parms.PlayInfo = PlayInfo;
//	this->ProcessEvent ( pFillPlayInfo, &parms, NULL );
//
//}
//
//struct FString AGameInfo::ParseMessageString ( class AMutator* BaseMutator, class AController* Who, struct FString Message )
//{
//	static UFunction* pParseMessageString = 0;
//	AGameInfo_execParseMessageString_Parms parms;
//
//	if ( !pParseMessageString )
//		pParseMessageString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ParseMessageString" );
//
//	parms.BaseMutator = BaseMutator;
//	parms.Who = Who;
//	parms.Message = Message;
//	this->ProcessEvent ( pParseMessageString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameInfo::ParseChatPercVar ( class AMutator* BaseMutator, class AController* Who, struct FString Cmd )
//{
//	static UFunction* pParseChatPercVar = 0;
//	AGameInfo_execParseChatPercVar_Parms parms;
//
//	if ( !pParseChatPercVar )
//		pParseChatPercVar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ParseChatPercVar" );
//
//	parms.BaseMutator = BaseMutator;
//	parms.Who = Who;
//	parms.Cmd = Cmd;
//	this->ProcessEvent ( pParseChatPercVar, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameInfo::FindTeamDesignation ( class AGameReplicationInfo* GRI, class AActor* A )
//{
//	static UFunction* pFindTeamDesignation = 0;
//	AGameInfo_execFindTeamDesignation_Parms parms;
//
//	if ( !pFindTeamDesignation )
//		pFindTeamDesignation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.FindTeamDesignation" );
//
//	parms.GRI = GRI;
//	parms.A = A;
//	this->ProcessEvent ( pFindTeamDesignation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UTexture* AGameInfo::GetRandomTeamSymbol ( int Base )
//{
//	static UFunction* pGetRandomTeamSymbol = 0;
//	AGameInfo_execGetRandomTeamSymbol_Parms parms;
//
//	if ( !pGetRandomTeamSymbol )
//		pGetRandomTeamSymbol = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetRandomTeamSymbol" );
//
//	parms.Base = Base;
//	this->ProcessEvent ( pGetRandomTeamSymbol, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::TooManyBots ( class AController* botToRemove )
//{
//	static UFunction* pTooManyBots = 0;
//	AGameInfo_execTooManyBots_Parms parms;
//
//	if ( !pTooManyBots )
//		pTooManyBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.TooManyBots" );
//
//	parms.botToRemove = botToRemove;
//	this->ProcessEvent ( pTooManyBots, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AGameInfo::GetMultykillBonusPoint ( class AController* C, int* AddExp, int* AddPoint )
//{
//	static UFunction* pGetMultykillBonusPoint = 0;
//	AGameInfo_execGetMultykillBonusPoint_Parms parms;
//
//	if ( !pGetMultykillBonusPoint )
//		pGetMultykillBonusPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetMultykillBonusPoint" );
//
//	parms.C = C;
//	this->ProcessEvent ( pGetMultykillBonusPoint, &parms, NULL );
//
//	*AddExp = parms.AddExp;
//	*AddPoint = parms.AddPoint;
//	return parms.ReturnValue;
//}
//
//void AGameInfo::SendMessageAddScore ( class AController* ReceiveController, class AController* Killer, class AController* Other, int KillWeapon, int iConKillorHeadShot )
//{
//	static UFunction* pSendMessageAddScore = 0;
//	AGameInfo_execSendMessageAddScore_Parms parms;
//
//	if ( !pSendMessageAddScore )
//		pSendMessageAddScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SendMessageAddScore" );
//
//	parms.ReceiveController = ReceiveController;
//	parms.Killer = Killer;
//	parms.Other = Other;
//	parms.KillWeapon = KillWeapon;
//	parms.iConKillorHeadShot = iConKillorHeadShot;
//	this->ProcessEvent ( pSendMessageAddScore, &parms, NULL );
//
//}
//
//void AGameInfo::SetAssistPoint ( class AController* Killer, class AController* Other )
//{
//	static UFunction* pSetAssistPoint = 0;
//	AGameInfo_execSetAssistPoint_Parms parms;
//
//	if ( !pSetAssistPoint )
//		pSetAssistPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SetAssistPoint" );
//
//	parms.Killer = Killer;
//	parms.Other = Other;
//	this->ProcessEvent ( pSetAssistPoint, &parms, NULL );
//
//}
//
//int AGameInfo::GetAssistScore ( int iMessageCode, unsigned char* byAssistType )
//{
//	static UFunction* pGetAssistScore = 0;
//	AGameInfo_execGetAssistScore_Parms parms;
//
//	if ( !pGetAssistScore )
//		pGetAssistScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetAssistScore" );
//
//	parms.iMessageCode = iMessageCode;
//	this->ProcessEvent ( pGetAssistScore, &parms, NULL );
//
//	*byAssistType = parms.byAssistType;
//	return parms.ReturnValue;
//}
//
//void AGameInfo::SendSeverScoreAndAssist ( class AController* Killer, class AController* Other )
//{
//	static UFunction* pSendSeverScoreAndAssist = 0;
//	AGameInfo_execSendSeverScoreAndAssist_Parms parms;
//
//	if ( !pSendSeverScoreAndAssist )
//		pSendSeverScoreAndAssist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SendSeverScoreAndAssist" );
//
//	parms.Killer = Killer;
//	parms.Other = Other;
//	this->ProcessEvent ( pSendSeverScoreAndAssist, &parms, NULL );
//
//}
//
//void AGameInfo::ScoreKill ( class AController* Killer, class AController* Other )
//{
//	static UFunction* pScoreKill = 0;
//	AGameInfo_execScoreKill_Parms parms;
//
//	if ( !pScoreKill )
//		pScoreKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ScoreKill" );
//
//	parms.Killer = Killer;
//	parms.Other = Other;
//	this->ProcessEvent ( pScoreKill, &parms, NULL );
//
//}
//
//float AGameInfo::GetAddScore ( class AController* Killer, class AController* Other )
//{
//	static UFunction* pGetAddScore = 0;
//	AGameInfo_execGetAddScore_Parms parms;
//
//	if ( !pGetAddScore )
//		pGetAddScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetAddScore" );
//
//	parms.Killer = Killer;
//	parms.Other = Other;
//	this->ProcessEvent ( pGetAddScore, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::ScoreObjective ( class APlayerReplicationInfo* Scorer, float Score )
//{
//	static UFunction* pScoreObjective = 0;
//	AGameInfo_execScoreObjective_Parms parms;
//
//	if ( !pScoreObjective )
//		pScoreObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ScoreObjective" );
//
//	parms.Scorer = Scorer;
//	parms.Score = Score;
//	this->ProcessEvent ( pScoreObjective, &parms, NULL );
//
//}
//
//void AGameInfo::TeamScoreEvent ( int Team, float Points, struct FString Desc )
//{
//	static UFunction* pTeamScoreEvent = 0;
//	AGameInfo_execTeamScoreEvent_Parms parms;
//
//	if ( !pTeamScoreEvent )
//		pTeamScoreEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.TeamScoreEvent" );
//
//	parms.Team = Team;
//	parms.Points = Points;
//	parms.Desc = Desc;
//	this->ProcessEvent ( pTeamScoreEvent, &parms, NULL );
//
//}
//
//void AGameInfo::ScoreEvent ( class APlayerReplicationInfo* Who, float Points, struct FString Desc )
//{
//	static UFunction* pScoreEvent = 0;
//	AGameInfo_execScoreEvent_Parms parms;
//
//	if ( !pScoreEvent )
//		pScoreEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ScoreEvent" );
//
//	parms.Who = Who;
//	parms.Points = Points;
//	parms.Desc = Desc;
//	this->ProcessEvent ( pScoreEvent, &parms, NULL );
//
//}
//
//void AGameInfo::CheckScore ( class APlayerReplicationInfo* Scorer )
//{
//	static UFunction* pCheckScore = 0;
//	AGameInfo_execCheckScore_Parms parms;
//
//	if ( !pCheckScore )
//		pCheckScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.CheckScore" );
//
//	parms.Scorer = Scorer;
//	this->ProcessEvent ( pCheckScore, &parms, NULL );
//
//}
//
//float AGameInfo::RatePlayerStart ( class ANavigationPoint* N, unsigned char Team, class AController* Player )
//{
//	static UFunction* pRatePlayerStart = 0;
//	AGameInfo_execRatePlayerStart_Parms parms;
//
//	if ( !pRatePlayerStart )
//		pRatePlayerStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.RatePlayerStart" );
//
//	parms.N = N;
//	parms.Team = Team;
//	parms.Player = Player;
//	this->ProcessEvent ( pRatePlayerStart, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class ANavigationPoint* AGameInfo::FindPlayerStart_TU ( class AController* Player, unsigned char inTeam, struct FString incomingName )
//{
//	static UFunction* pFindPlayerStart_TU = 0;
//	AGameInfo_execFindPlayerStart_TU_Parms parms;
//
//	if ( !pFindPlayerStart_TU )
//		pFindPlayerStart_TU = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.FindPlayerStart_TU" );
//
//	parms.Player = Player;
//	parms.inTeam = inTeam;
//	parms.incomingName = incomingName;
//	this->ProcessEvent ( pFindPlayerStart_TU, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class ANavigationPoint* AGameInfo::FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName )
//{
//	static UFunction* pFindPlayerStart = 0;
//	AGameInfo_execFindPlayerStart_Parms parms;
//
//	if ( !pFindPlayerStart )
//		pFindPlayerStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.FindPlayerStart" );
//
//	parms.Player = Player;
//	parms.inTeam = inTeam;
//	parms.incomingName = incomingName;
//	this->ProcessEvent ( pFindPlayerStart, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::eventIsSDRespawnTime (  )
//{
//	static UFunction* pIsSDRespawnTime = 0;
//	AGameInfo_eventIsSDRespawnTime_Parms parms;
//
//	if ( !pIsSDRespawnTime )
//		pIsSDRespawnTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsSDRespawnTime" );
//
//	this->ProcessEvent ( pIsSDRespawnTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::LogNavigationPoints ( class TArray< class ANavigationPoint* > ns )
//{
//	static UFunction* pLogNavigationPoints = 0;
//	AGameInfo_execLogNavigationPoints_Parms parms;
//
//	if ( !pLogNavigationPoints )
//		pLogNavigationPoints = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.LogNavigationPoints" );
//
//	parms.ns = ns;
//	this->ProcessEvent ( pLogNavigationPoints, &parms, NULL );
//
//}
//
//class ANavigationPoint* AGameInfo::FindPlayerStart_SD ( unsigned char Team )
//{
//	static UFunction* pFindPlayerStart_SD = 0;
//	AGameInfo_execFindPlayerStart_SD_Parms parms;
//
//	if ( !pFindPlayerStart_SD )
//		pFindPlayerStart_SD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.FindPlayerStart_SD" );
//
//	parms.Team = Team;
//	this->ProcessEvent ( pFindPlayerStart_SD, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::LogFinalRespawnPoint ( class ANavigationPoint* respawnPoint, unsigned char Team )
//{
//	static UFunction* pLogFinalRespawnPoint = 0;
//	AGameInfo_execLogFinalRespawnPoint_Parms parms;
//
//	if ( !pLogFinalRespawnPoint )
//		pLogFinalRespawnPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.LogFinalRespawnPoint" );
//
//	parms.respawnPoint = respawnPoint;
//	parms.Team = Team;
//	this->ProcessEvent ( pLogFinalRespawnPoint, &parms, NULL );
//
//}
//
//class ANavigationPoint* AGameInfo::GetRespawnPointRatingEnemy ( bool giveNearnessScore, class TArray< class ANavigationPoint* > respawnCandidates, unsigned char Team )
//{
//	static UFunction* pGetRespawnPointRatingEnemy = 0;
//	AGameInfo_execGetRespawnPointRatingEnemy_Parms parms;
//
//	if ( !pGetRespawnPointRatingEnemy )
//		pGetRespawnPointRatingEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetRespawnPointRatingEnemy" );
//
//	parms.giveNearnessScore = giveNearnessScore;
//	parms.respawnCandidates = respawnCandidates;
//	parms.Team = Team;
//	this->ProcessEvent ( pGetRespawnPointRatingEnemy, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< class ANavigationPoint* > AGameInfo::GetRespawnPointsSortedByClosenessTo ( class AActor* A, unsigned char Team, int Count )
//{
//	static UFunction* pGetRespawnPointsSortedByClosenessTo = 0;
//	AGameInfo_execGetRespawnPointsSortedByClosenessTo_Parms parms;
//
//	if ( !pGetRespawnPointsSortedByClosenessTo )
//		pGetRespawnPointsSortedByClosenessTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetRespawnPointsSortedByClosenessTo" );
//
//	parms.A = A;
//	parms.Team = Team;
//	parms.Count = Count;
//	this->ProcessEvent ( pGetRespawnPointsSortedByClosenessTo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::SortNavigationPoints2 ( struct FVector centerLoc, class TArray< class ANavigationPoint* >* candidates, class TArray< float >* candidateDists )
//{
//	static UFunction* pSortNavigationPoints2 = 0;
//	AGameInfo_execSortNavigationPoints2_Parms parms;
//
//	if ( !pSortNavigationPoints2 )
//		pSortNavigationPoints2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SortNavigationPoints2" );
//
//	parms.centerLoc = centerLoc;
//	this->ProcessEvent ( pSortNavigationPoints2, &parms, NULL );
//
//	*candidates = parms.candidates;
//	*candidateDists = parms.candidateDists;
//}
//
//void AGameInfo::SortNavigationPoints ( class AActor* center, class TArray< class ANavigationPoint* >* candidates, class TArray< float >* candidateDists )
//{
//	static UFunction* pSortNavigationPoints = 0;
//	AGameInfo_execSortNavigationPoints_Parms parms;
//
//	if ( !pSortNavigationPoints )
//		pSortNavigationPoints = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SortNavigationPoints" );
//
//	parms.center = center;
//	this->ProcessEvent ( pSortNavigationPoints, &parms, NULL );
//
//	*candidates = parms.candidates;
//	*candidateDists = parms.candidateDists;
//}
//
//bool AGameInfo::IsSafeFromEnemySight ( class ANavigationPoint* N, unsigned char Team )
//{
//	static UFunction* pIsSafeFromEnemySight = 0;
//	AGameInfo_execIsSafeFromEnemySight_Parms parms;
//
//	if ( !pIsSafeFromEnemySight )
//		pIsSafeFromEnemySight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsSafeFromEnemySight" );
//
//	parms.N = N;
//	parms.Team = Team;
//	this->ProcessEvent ( pIsSafeFromEnemySight, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class APawn* AGameInfo::PickAlly ( unsigned char Team )
//{
//	static UFunction* pPickAlly = 0;
//	AGameInfo_execPickAlly_Parms parms;
//
//	if ( !pPickAlly )
//		pPickAlly = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PickAlly" );
//
//	parms.Team = Team;
//	this->ProcessEvent ( pPickAlly, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< class AActor* > AGameInfo::GetPersonalEnemyList ( class APawn* myPawn )
//{
//	static UFunction* pGetPersonalEnemyList = 0;
//	AGameInfo_execGetPersonalEnemyList_Parms parms;
//
//	if ( !pGetPersonalEnemyList )
//		pGetPersonalEnemyList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetPersonalEnemyList" );
//
//	parms.myPawn = myPawn;
//	this->ProcessEvent ( pGetPersonalEnemyList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< class AActor* > AGameInfo::GetEveryEnemyList2 ( unsigned char myTeam )
//{
//	static UFunction* pGetEveryEnemyList2 = 0;
//	AGameInfo_execGetEveryEnemyList2_Parms parms;
//
//	if ( !pGetEveryEnemyList2 )
//		pGetEveryEnemyList2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetEveryEnemyList2" );
//
//	parms.myTeam = myTeam;
//	this->ProcessEvent ( pGetEveryEnemyList2, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< class AActor* > AGameInfo::GetEveryEnemyList ( unsigned char myTeam )
//{
//	static UFunction* pGetEveryEnemyList = 0;
//	AGameInfo_execGetEveryEnemyList_Parms parms;
//
//	if ( !pGetEveryEnemyList )
//		pGetEveryEnemyList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetEveryEnemyList" );
//
//	parms.myTeam = myTeam;
//	this->ProcessEvent ( pGetEveryEnemyList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::UpdatePositionLog (  )
//{
//	static UFunction* pUpdatePositionLog = 0;
//	AGameInfo_execUpdatePositionLog_Parms parms;
//
//	if ( !pUpdatePositionLog )
//		pUpdatePositionLog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.UpdatePositionLog" );
//
//	this->ProcessEvent ( pUpdatePositionLog, &parms, NULL );
//
//}
//
//class TArray< class APawn* > AGameInfo::GetEveryAllyList ( unsigned char Team )
//{
//	static UFunction* pGetEveryAllyList = 0;
//	AGameInfo_execGetEveryAllyList_Parms parms;
//
//	if ( !pGetEveryAllyList )
//		pGetEveryAllyList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetEveryAllyList" );
//
//	parms.Team = Team;
//	this->ProcessEvent ( pGetEveryAllyList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::IsAnyAllyAlive ( unsigned char Team )
//{
//	static UFunction* pIsAnyAllyAlive = 0;
//	AGameInfo_execIsAnyAllyAlive_Parms parms;
//
//	if ( !pIsAnyAllyAlive )
//		pIsAnyAllyAlive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsAnyAllyAlive" );
//
//	parms.Team = Team;
//	this->ProcessEvent ( pIsAnyAllyAlive, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< class APawn* > AGameInfo::GetSafeAllyList ( unsigned char Team )
//{
//	static UFunction* pGetSafeAllyList = 0;
//	AGameInfo_execGetSafeAllyList_Parms parms;
//
//	if ( !pGetSafeAllyList )
//		pGetSafeAllyList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetSafeAllyList" );
//
//	parms.Team = Team;
//	this->ProcessEvent ( pGetSafeAllyList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< class APawn* > AGameInfo::GetRecentlySpawnedAllyList (  )
//{
//	static UFunction* pGetRecentlySpawnedAllyList = 0;
//	AGameInfo_execGetRecentlySpawnedAllyList_Parms parms;
//
//	if ( !pGetRecentlySpawnedAllyList )
//		pGetRecentlySpawnedAllyList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetRecentlySpawnedAllyList" );
//
//	this->ProcessEvent ( pGetRecentlySpawnedAllyList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class ANavigationPoint* AGameInfo::GetSafetestRespawnPoint ( unsigned char Team, class TArray< class ANavigationPoint* > starts, bool skipAppropriateCheck )
//{
//	static UFunction* pGetSafetestRespawnPoint = 0;
//	AGameInfo_execGetSafetestRespawnPoint_Parms parms;
//
//	if ( !pGetSafetestRespawnPoint )
//		pGetSafetestRespawnPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetSafetestRespawnPoint" );
//
//	parms.Team = Team;
//	parms.starts = starts;
//	parms.skipAppropriateCheck = skipAppropriateCheck;
//	this->ProcessEvent ( pGetSafetestRespawnPoint, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::IsAppropriateRespawnPoint ( class ANavigationPoint* N, unsigned char Team )
//{
//	static UFunction* pIsAppropriateRespawnPoint = 0;
//	AGameInfo_execIsAppropriateRespawnPoint_Parms parms;
//
//	if ( !pIsAppropriateRespawnPoint )
//		pIsAppropriateRespawnPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsAppropriateRespawnPoint" );
//
//	parms.N = N;
//	parms.Team = Team;
//	this->ProcessEvent ( pIsAppropriateRespawnPoint, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::IsRespawnPointFailedRecently ( class ANavigationPoint* S )
//{
//	static UFunction* pIsRespawnPointFailedRecently = 0;
//	AGameInfo_execIsRespawnPointFailedRecently_Parms parms;
//
//	if ( !pIsRespawnPointFailedRecently )
//		pIsRespawnPointFailedRecently = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsRespawnPointFailedRecently" );
//
//	parms.S = S;
//	this->ProcessEvent ( pIsRespawnPointFailedRecently, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::IsAnyPawnWithinRadius ( class ANavigationPoint* N )
//{
//	static UFunction* pIsAnyPawnWithinRadius = 0;
//	AGameInfo_execIsAnyPawnWithinRadius_Parms parms;
//
//	if ( !pIsAnyPawnWithinRadius )
//		pIsAnyPawnWithinRadius = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsAnyPawnWithinRadius" );
//
//	parms.N = N;
//	this->ProcessEvent ( pIsAnyPawnWithinRadius, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::IsRespawnSpecialCase (  )
//{
//	static UFunction* pIsRespawnSpecialCase = 0;
//	AGameInfo_execIsRespawnSpecialCase_Parms parms;
//
//	if ( !pIsRespawnSpecialCase )
//		pIsRespawnSpecialCase = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsRespawnSpecialCase" );
//
//	this->ProcessEvent ( pIsRespawnSpecialCase, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::EndLogging ( struct FString Reason )
//{
//	static UFunction* pEndLogging = 0;
//	AGameInfo_execEndLogging_Parms parms;
//
//	if ( !pEndLogging )
//		pEndLogging = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.EndLogging" );
//
//	parms.Reason = Reason;
//	this->ProcessEvent ( pEndLogging, &parms, NULL );
//
//}
//
//void AGameInfo::TieOnTimeOver (  )
//{
//	static UFunction* pTieOnTimeOver = 0;
//	AGameInfo_execTieOnTimeOver_Parms parms;
//
//	if ( !pTieOnTimeOver )
//		pTieOnTimeOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.TieOnTimeOver" );
//
//	this->ProcessEvent ( pTieOnTimeOver, &parms, NULL );
//
//}
//
//void AGameInfo::EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
//{
//	static UFunction* pEndGame = 0;
//	AGameInfo_execEndGame_Parms parms;
//
//	if ( !pEndGame )
//		pEndGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.EndGame" );
//
//	parms.Winner = Winner;
//	parms.Reason = Reason;
//	this->ProcessEvent ( pEndGame, &parms, NULL );
//
//}
//
//bool AGameInfo::eventCheckEndGameCondition (  )
//{
//	static UFunction* pCheckEndGameCondition = 0;
//	AGameInfo_eventCheckEndGameCondition_Parms parms;
//
//	if ( !pCheckEndGameCondition )
//		pCheckEndGameCondition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.CheckEndGameCondition" );
//
//	this->ProcessEvent ( pCheckEndGameCondition, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
//{
//	static UFunction* pCheckEndGame = 0;
//	AGameInfo_execCheckEndGame_Parms parms;
//
//	if ( !pCheckEndGame )
//		pCheckEndGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.CheckEndGame" );
//
//	parms.Winner = Winner;
//	parms.Reason = Reason;
//	this->ProcessEvent ( pCheckEndGame, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::eventBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pBroadcastLocalized = 0;
//	AGameInfo_eventBroadcastLocalized_Parms parms;
//
//	if ( !pBroadcastLocalized )
//		pBroadcastLocalized = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.BroadcastLocalized" );
//
//	parms.Sender = Sender;
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pBroadcastLocalized, &parms, NULL );
//
//}
//
//void AGameInfo::BroadcastTeam ( class AController* Sender, struct FString Msg, struct FName Type )
//{
//	static UFunction* pBroadcastTeam = 0;
//	AGameInfo_execBroadcastTeam_Parms parms;
//
//	if ( !pBroadcastTeam )
//		pBroadcastTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.BroadcastTeam" );
//
//	parms.Sender = Sender;
//	parms.Msg = Msg;
//	parms.Type = Type;
//	this->ProcessEvent ( pBroadcastTeam, &parms, NULL );
//
//}
//
//void AGameInfo::eventBroadcast ( class AActor* Sender, struct FString Msg, struct FName Type )
//{
//	static UFunction* pBroadcast = 0;
//	AGameInfo_eventBroadcast_Parms parms;
//
//	if ( !pBroadcast )
//		pBroadcast = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.Broadcast" );
//
//	parms.Sender = Sender;
//	parms.Msg = Msg;
//	parms.Type = Type;
//	this->ProcessEvent ( pBroadcast, &parms, NULL );
//
//}
//
//void AGameInfo::ChangeVoiceChannel ( class APlayerReplicationInfo* PRI, int NewChannelIndex, int OldChannelIndex )
//{
//	static UFunction* pChangeVoiceChannel = 0;
//	AGameInfo_execChangeVoiceChannel_Parms parms;
//
//	if ( !pChangeVoiceChannel )
//		pChangeVoiceChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ChangeVoiceChannel" );
//
//	parms.PRI = PRI;
//	parms.NewChannelIndex = NewChannelIndex;
//	parms.OldChannelIndex = OldChannelIndex;
//	this->ProcessEvent ( pChangeVoiceChannel, &parms, NULL );
//
//}
//
//class AMapList* AGameInfo::GetMapList ( struct FString MapListClassType )
//{
//	static UFunction* pGetMapList = 0;
//	AGameInfo_execGetMapList_Parms parms;
//
//	if ( !pGetMapList )
//		pGetMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetMapList" );
//
//	parms.MapListClassType = MapListClassType;
//	this->ProcessEvent ( pGetMapList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > AGameInfo::GetMapRotation (  )
//{
//	static UFunction* pGetMapRotation = 0;
//	AGameInfo_execGetMapRotation_Parms parms;
//
//	if ( !pGetMapRotation )
//		pGetMapRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetMapRotation" );
//
//	this->ProcessEvent ( pGetMapRotation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::RestartGame (  )
//{
//	static UFunction* pRestartGame = 0;
//	AGameInfo_execRestartGame_Parms parms;
//
//	if ( !pRestartGame )
//		pRestartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.RestartGame" );
//
//	this->ProcessEvent ( pRestartGame, &parms, NULL );
//
//}
//
//void AGameInfo::SendPlayer ( class APlayerController* aPlayer, struct FString URL )
//{
//	static UFunction* pSendPlayer = 0;
//	AGameInfo_execSendPlayer_Parms parms;
//
//	if ( !pSendPlayer )
//		pSendPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SendPlayer" );
//
//	parms.aPlayer = aPlayer;
//	parms.URL = URL;
//	this->ProcessEvent ( pSendPlayer, &parms, NULL );
//
//}
//
//unsigned char AGameInfo::PickTeam ( unsigned char Current, class AController* C )
//{
//	static UFunction* pPickTeam = 0;
//	AGameInfo_execPickTeam_Parms parms;
//
//	if ( !pPickTeam )
//		pPickTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PickTeam" );
//
//	parms.Current = Current;
//	parms.C = C;
//	this->ProcessEvent ( pPickTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::ChangeTeam ( class AController* Other, int N, bool bNewTeam )
//{
//	static UFunction* pChangeTeam = 0;
//	AGameInfo_execChangeTeam_Parms parms;
//
//	if ( !pChangeTeam )
//		pChangeTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ChangeTeam" );
//
//	parms.Other = Other;
//	parms.N = N;
//	parms.bNewTeam = bNewTeam;
//	this->ProcessEvent ( pChangeTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::eventForcedChangeTeam ( class AController* Other, int N, bool bNewTeam )
//{
//	static UFunction* pForcedChangeTeam = 0;
//	AGameInfo_eventForcedChangeTeam_Parms parms;
//
//	if ( !pForcedChangeTeam )
//		pForcedChangeTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ForcedChangeTeam" );
//
//	parms.Other = Other;
//	parms.N = N;
//	parms.bNewTeam = bNewTeam;
//	this->ProcessEvent ( pForcedChangeTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::ChangeName ( class AController* Other, struct FString S, bool bNameChange )
//{
//	static UFunction* pChangeName = 0;
//	AGameInfo_execChangeName_Parms parms;
//
//	if ( !pChangeName )
//		pChangeName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ChangeName" );
//
//	parms.Other = Other;
//	parms.S = S;
//	parms.bNameChange = bNameChange;
//	this->ProcessEvent ( pChangeName, &parms, NULL );
//
//}
//
//void AGameInfo::DiscardInventory ( class APawn* Other )
//{
//	static UFunction* pDiscardInventory = 0;
//	AGameInfo_execDiscardInventory_Parms parms;
//
//	if ( !pDiscardInventory )
//		pDiscardInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.DiscardInventory" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pDiscardInventory, &parms, NULL );
//
//}
//
//bool AGameInfo::PickupQuery ( class APawn* Other, class APickup* Item )
//{
//	static UFunction* pPickupQuery = 0;
//	AGameInfo_execPickupQuery_Parms parms;
//
//	if ( !pPickupQuery )
//		pPickupQuery = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PickupQuery" );
//
//	parms.Other = Other;
//	parms.Item = Item;
//	this->ProcessEvent ( pPickupQuery, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::ShouldRespawn ( class APickup* Other )
//{
//	static UFunction* pShouldRespawn = 0;
//	AGameInfo_execShouldRespawn_Parms parms;
//
//	if ( !pShouldRespawn )
//		pShouldRespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ShouldRespawn" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pShouldRespawn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AGameInfo::ReduceDamage ( int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, int iWeaponType, struct FVector* Momentum )
//{
//	static UFunction* pReduceDamage = 0;
//	AGameInfo_execReduceDamage_Parms parms;
//
//	if ( !pReduceDamage )
//		pReduceDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ReduceDamage" );
//
//	parms.Damage = Damage;
//	parms.injured = injured;
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.DamageType = DamageType;
//	parms.iWeaponType = iWeaponType;
//	this->ProcessEvent ( pReduceDamage, &parms, NULL );
//
//	*Momentum = parms.Momentum;
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::CanSpectate ( class APlayerController* Viewer, bool bOnlySpectator, class AActor* ViewTarget )
//{
//	static UFunction* pCanSpectate = 0;
//	AGameInfo_execCanSpectate_Parms parms;
//
//	if ( !pCanSpectate )
//		pCanSpectate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.CanSpectate" );
//
//	parms.Viewer = Viewer;
//	parms.bOnlySpectator = bOnlySpectator;
//	parms.ViewTarget = ViewTarget;
//	this->ProcessEvent ( pCanSpectate, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::IsOnTeam ( class AController* Other, int TeamNum )
//{
//	static UFunction* pIsOnTeam = 0;
//	AGameInfo_execIsOnTeam_Parms parms;
//
//	if ( !pIsOnTeam )
//		pIsOnTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsOnTeam" );
//
//	parms.Other = Other;
//	parms.TeamNum = TeamNum;
//	this->ProcessEvent ( pIsOnTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::SameTeam ( class AController* A, class AController* B )
//{
//	static UFunction* pSameTeam = 0;
//	AGameInfo_execSameTeam_Parms parms;
//
//	if ( !pSameTeam )
//		pSameTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SameTeam" );
//
//	parms.A = A;
//	parms.B = B;
//	this->ProcessEvent ( pSameTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::KickBan ( struct FString S )
//{
//	static UFunction* pKickBan = 0;
//	AGameInfo_execKickBan_Parms parms;
//
//	if ( !pKickBan )
//		pKickBan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.KickBan" );
//
//	parms.S = S;
//	this->ProcessEvent ( pKickBan, &parms, NULL );
//
//}
//
//void AGameInfo::SessionKickBan ( struct FString S )
//{
//	static UFunction* pSessionKickBan = 0;
//	AGameInfo_execSessionKickBan_Parms parms;
//
//	if ( !pSessionKickBan )
//		pSessionKickBan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SessionKickBan" );
//
//	parms.S = S;
//	this->ProcessEvent ( pSessionKickBan, &parms, NULL );
//
//}
//
//void AGameInfo::Kick ( struct FString S )
//{
//	static UFunction* pKick = 0;
//	AGameInfo_execKick_Parms parms;
//
//	if ( !pKick )
//		pKick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.Kick" );
//
//	parms.S = S;
//	this->ProcessEvent ( pKick, &parms, NULL );
//
//}
//
//struct FString AGameInfo::ParseKillMessage ( struct FString KillerName, struct FString VictimName, struct FString DeathMessage )
//{
//	static UFunction* pParseKillMessage = 0;
//	AGameInfo_execParseKillMessage_Parms parms;
//
//	if ( !pParseKillMessage )
//		pParseKillMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ParseKillMessage" );
//
//	parms.KillerName = KillerName;
//	parms.VictimName = VictimName;
//	parms.DeathMessage = DeathMessage;
//	this->ProcessEvent ( pParseKillMessage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::BroadcastDeathMessage ( class AController* Killer, class AController* Other, class UClass* DamageType, int CollisionPart, int WeaponType )
//{
//	static UFunction* pBroadcastDeathMessage = 0;
//	AGameInfo_execBroadcastDeathMessage_Parms parms;
//
//	if ( !pBroadcastDeathMessage )
//		pBroadcastDeathMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.BroadcastDeathMessage" );
//
//	parms.Killer = Killer;
//	parms.Other = Other;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	this->ProcessEvent ( pBroadcastDeathMessage, &parms, NULL );
//
//}
//
//class UClass* AGameInfo::GetWDamageType ( class UClass* DamageType, int CollisionPart, int WeaponType, int* IsHeadShot, int* IsEnableAim )
//{
//	static UFunction* pGetWDamageType = 0;
//	AGameInfo_execGetWDamageType_Parms parms;
//
//	if ( !pGetWDamageType )
//		pGetWDamageType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetWDamageType" );
//
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	this->ProcessEvent ( pGetWDamageType, &parms, NULL );
//
//	*IsHeadShot = parms.IsHeadShot;
//	*IsEnableAim = parms.IsEnableAim;
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::PreventSever ( class APawn* Killed, struct FName BoneName, int Damage, class UClass* DamageType )
//{
//	static UFunction* pPreventSever = 0;
//	AGameInfo_execPreventSever_Parms parms;
//
//	if ( !pPreventSever )
//		pPreventSever = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PreventSever" );
//
//	parms.Killed = Killed;
//	parms.BoneName = BoneName;
//	parms.Damage = Damage;
//	parms.DamageType = DamageType;
//	this->ProcessEvent ( pPreventSever, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
//{
//	static UFunction* pPreventDeath = 0;
//	AGameInfo_execPreventDeath_Parms parms;
//
//	if ( !pPreventDeath )
//		pPreventDeath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PreventDeath" );
//
//	parms.Killed = Killed;
//	parms.Killer = Killer;
//	parms.DamageType = DamageType;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pPreventDeath, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::Killed ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pKilled = 0;
//	AGameInfo_execKilled_Parms parms;
//
//	if ( !pKilled )
//		pKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.Killed" );
//
//	parms.Killer = Killer;
//	parms.Killed = Killed;
//	parms.KilledPawn = KilledPawn;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pKilled, &parms, NULL );
//
//}
//
//int AGameInfo::ExceptionKillWeapon ( int iKillWeaponID, class UClass* DamageType, int WeaponType )
//{
//	static UFunction* pExceptionKillWeapon = 0;
//	AGameInfo_execExceptionKillWeapon_Parms parms;
//
//	if ( !pExceptionKillWeapon )
//		pExceptionKillWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ExceptionKillWeapon" );
//
//	parms.iKillWeaponID = iKillWeaponID;
//	parms.DamageType = DamageType;
//	parms.WeaponType = WeaponType;
//	this->ProcessEvent ( pExceptionKillWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::KDLOG_Finalize_HeliCopter ( int KillerUID, class AController* Killer, class AController* HeliCopter )
//{
//	static UFunction* pKDLOG_Finalize_HeliCopter = 0;
//	AGameInfo_execKDLOG_Finalize_HeliCopter_Parms parms;
//
//	if ( !pKDLOG_Finalize_HeliCopter )
//		pKDLOG_Finalize_HeliCopter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.KDLOG_Finalize_HeliCopter" );
//
//	parms.KillerUID = KillerUID;
//	parms.Killer = Killer;
//	parms.HeliCopter = HeliCopter;
//	this->ProcessEvent ( pKDLOG_Finalize_HeliCopter, &parms, NULL );
//
//}
//
//void AGameInfo::KDLOG_Finalize (  )
//{
//	static UFunction* pKDLOG_Finalize = 0;
//	AGameInfo_execKDLOG_Finalize_Parms parms;
//
//	if ( !pKDLOG_Finalize )
//		pKDLOG_Finalize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.KDLOG_Finalize" );
//
//	this->ProcessEvent ( pKDLOG_Finalize, &parms, NULL );
//
//}
//
//void AGameInfo::KDLOG_Initialize (  )
//{
//	static UFunction* pKDLOG_Initialize = 0;
//	AGameInfo_execKDLOG_Initialize_Parms parms;
//
//	if ( !pKDLOG_Initialize )
//		pKDLOG_Initialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.KDLOG_Initialize" );
//
//	this->ProcessEvent ( pKDLOG_Initialize, &parms, NULL );
//
//}
//
//bool AGameInfo::DoProcessKillMessage ( class UClass* DamageType )
//{
//	static UFunction* pDoProcessKillMessage = 0;
//	AGameInfo_execDoProcessKillMessage_Parms parms;
//
//	if ( !pDoProcessKillMessage )
//		pDoProcessKillMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.DoProcessKillMessage" );
//
//	parms.DamageType = DamageType;
//	this->ProcessEvent ( pDoProcessKillMessage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::SendQuest_KillSuccession ( class AController* Killer, unsigned char byKillSuccession )
//{
//	static UFunction* pSendQuest_KillSuccession = 0;
//	AGameInfo_execSendQuest_KillSuccession_Parms parms;
//
//	if ( !pSendQuest_KillSuccession )
//		pSendQuest_KillSuccession = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SendQuest_KillSuccession" );
//
//	parms.Killer = Killer;
//	parms.byKillSuccession = byKillSuccession;
//	this->ProcessEvent ( pSendQuest_KillSuccession, &parms, NULL );
//
//}
//
//int AGameInfo::SendMessageKillSuccssion ( class AController* Killer, class APlayerController* PC, unsigned char byKillSuccession )
//{
//	static UFunction* pSendMessageKillSuccssion = 0;
//	AGameInfo_execSendMessageKillSuccssion_Parms parms;
//
//	if ( !pSendMessageKillSuccssion )
//		pSendMessageKillSuccssion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SendMessageKillSuccssion" );
//
//	parms.Killer = Killer;
//	parms.PC = PC;
//	parms.byKillSuccession = byKillSuccession;
//	this->ProcessEvent ( pSendMessageKillSuccssion, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::ProcessKillMessage ( class AController* Killer, class AController* Killed, int CollisionPart, int WeaponType, bool bWallShot, int* iConKillorHeadShot )
//{
//	static UFunction* pProcessKillMessage = 0;
//	AGameInfo_execProcessKillMessage_Parms parms;
//
//	if ( !pProcessKillMessage )
//		pProcessKillMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ProcessKillMessage" );
//
//	parms.Killer = Killer;
//	parms.Killed = Killed;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pProcessKillMessage, &parms, NULL );
//
//	*iConKillorHeadShot = parms.iConKillorHeadShot;
//}
//
//void AGameInfo::KillEvent ( struct FString KillType, class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, class UClass* Damage )
//{
//	static UFunction* pKillEvent = 0;
//	AGameInfo_execKillEvent_Parms parms;
//
//	if ( !pKillEvent )
//		pKillEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.KillEvent" );
//
//	parms.KillType = KillType;
//	parms.Killer = Killer;
//	parms.Victim = Victim;
//	parms.Damage = Damage;
//	this->ProcessEvent ( pKillEvent, &parms, NULL );
//
//}
//
//void AGameInfo::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
//{
//	static UFunction* pNotifyKilled = 0;
//	AGameInfo_execNotifyKilled_Parms parms;
//
//	if ( !pNotifyKilled )
//		pNotifyKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.NotifyKilled" );
//
//	parms.Killer = Killer;
//	parms.Killed = Killed;
//	parms.KilledPawn = KilledPawn;
//	this->ProcessEvent ( pNotifyKilled, &parms, NULL );
//
//}
//
//void AGameInfo::SetPlayerDefaults ( class APawn* PlayerPawn )
//{
//	static UFunction* pSetPlayerDefaults = 0;
//	AGameInfo_execSetPlayerDefaults_Parms parms;
//
//	if ( !pSetPlayerDefaults )
//		pSetPlayerDefaults = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SetPlayerDefaults" );
//
//	parms.PlayerPawn = PlayerPawn;
//	this->ProcessEvent ( pSetPlayerDefaults, &parms, NULL );
//
//}
//
//void AGameInfo::AddDefaultInventory ( class APawn* PlayerPawn )
//{
//	static UFunction* pAddDefaultInventory = 0;
//	AGameInfo_execAddDefaultInventory_Parms parms;
//
//	if ( !pAddDefaultInventory )
//		pAddDefaultInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AddDefaultInventory" );
//
//	parms.PlayerPawn = PlayerPawn;
//	this->ProcessEvent ( pAddDefaultInventory, &parms, NULL );
//
//}
//
//void AGameInfo::AddGameSpecificInventory ( class APawn* P )
//{
//	static UFunction* pAddGameSpecificInventory = 0;
//	AGameInfo_execAddGameSpecificInventory_Parms parms;
//
//	if ( !pAddGameSpecificInventory )
//		pAddGameSpecificInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AddGameSpecificInventory" );
//
//	parms.P = P;
//	this->ProcessEvent ( pAddGameSpecificInventory, &parms, NULL );
//
//}
//
//void AGameInfo::eventAcceptInventory ( class APawn* PlayerPawn )
//{
//	static UFunction* pAcceptInventory = 0;
//	AGameInfo_eventAcceptInventory_Parms parms;
//
//	if ( !pAcceptInventory )
//		pAcceptInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AcceptInventory" );
//
//	parms.PlayerPawn = PlayerPawn;
//	this->ProcessEvent ( pAcceptInventory, &parms, NULL );
//
//}
//
//void AGameInfo::NotifyLogout ( class AController* Exiting )
//{
//	static UFunction* pNotifyLogout = 0;
//	AGameInfo_execNotifyLogout_Parms parms;
//
//	if ( !pNotifyLogout )
//		pNotifyLogout = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.NotifyLogout" );
//
//	parms.Exiting = Exiting;
//	this->ProcessEvent ( pNotifyLogout, &parms, NULL );
//
//}
//
//void AGameInfo::NotifyLogin ( int NewPlayerID )
//{
//	static UFunction* pNotifyLogin = 0;
//	AGameInfo_execNotifyLogin_Parms parms;
//
//	if ( !pNotifyLogin )
//		pNotifyLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.NotifyLogin" );
//
//	parms.NewPlayerID = NewPlayerID;
//	this->ProcessEvent ( pNotifyLogin, &parms, NULL );
//
//}
//
//void AGameInfo::Logout ( class AController* Exiting )
//{
//	static UFunction* pLogout = 0;
//	AGameInfo_execLogout_Parms parms;
//
//	if ( !pLogout )
//		pLogout = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.Logout" );
//
//	parms.Exiting = Exiting;
//	this->ProcessEvent ( pLogout, &parms, NULL );
//
//}
//
//void AGameInfo::SetWeaponViewShake ( class APlayerController* P )
//{
//	static UFunction* pSetWeaponViewShake = 0;
//	AGameInfo_execSetWeaponViewShake_Parms parms;
//
//	if ( !pSetWeaponViewShake )
//		pSetWeaponViewShake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SetWeaponViewShake" );
//
//	parms.P = P;
//	this->ProcessEvent ( pSetWeaponViewShake, &parms, NULL );
//
//}
//
//void AGameInfo::eventPostLogin ( class APlayerController* NewPlayer )
//{
//	static UFunction* pPostLogin = 0;
//	AGameInfo_eventPostLogin_Parms parms;
//
//	if ( !pPostLogin )
//		pPostLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PostLogin" );
//
//	parms.NewPlayer = NewPlayer;
//	this->ProcessEvent ( pPostLogin, &parms, NULL );
//
//}
//
//class UClass* AGameInfo::GetDefaultPlayerClass ( class AController* C )
//{
//	static UFunction* pGetDefaultPlayerClass = 0;
//	AGameInfo_execGetDefaultPlayerClass_Parms parms;
//
//	if ( !pGetDefaultPlayerClass )
//		pGetDefaultPlayerClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetDefaultPlayerClass" );
//
//	parms.C = C;
//	this->ProcessEvent ( pGetDefaultPlayerClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::EndWaitingForStart (  )
//{
//	static UFunction* pEndWaitingForStart = 0;
//	AGameInfo_execEndWaitingForStart_Parms parms;
//
//	if ( !pEndWaitingForStart )
//		pEndWaitingForStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.EndWaitingForStart" );
//
//	this->ProcessEvent ( pEndWaitingForStart, &parms, NULL );
//
//}
//
//void AGameInfo::BeginWaitingForStart (  )
//{
//	static UFunction* pBeginWaitingForStart = 0;
//	AGameInfo_execBeginWaitingForStart_Parms parms;
//
//	if ( !pBeginWaitingForStart )
//		pBeginWaitingForStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.BeginWaitingForStart" );
//
//	this->ProcessEvent ( pBeginWaitingForStart, &parms, NULL );
//
//}
//
//void AGameInfo::RestartPlayer ( class AController* aPlayer )
//{
//	static UFunction* pRestartPlayer = 0;
//	AGameInfo_execRestartPlayer_Parms parms;
//
//	if ( !pRestartPlayer )
//		pRestartPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.RestartPlayer" );
//
//	parms.aPlayer = aPlayer;
//	this->ProcessEvent ( pRestartPlayer, &parms, NULL );
//
//}
//
//void AGameInfo::RefreshMaxPlayersDuringGame (  )
//{
//	static UFunction* pRefreshMaxPlayersDuringGame = 0;
//	AGameInfo_execRefreshMaxPlayersDuringGame_Parms parms;
//
//	if ( !pRefreshMaxPlayersDuringGame )
//		pRefreshMaxPlayersDuringGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.RefreshMaxPlayersDuringGame" );
//
//	this->ProcessEvent ( pRefreshMaxPlayersDuringGame, &parms, NULL );
//
//}
//
//void AGameInfo::execlogrep (  )
//{
//	static UFunction* plogrep = 0;
//	AGameInfo_execlogrep_Parms parms;
//
//	if ( !plogrep )
//		plogrep = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.logrep" );
//
//	this->ProcessEvent ( plogrep, &parms, NULL );
//
//}
//
//void AGameInfo::GameAddDefaultInventory ( class APawn* P )
//{
//	static UFunction* pGameAddDefaultInventory = 0;
//	AGameInfo_execGameAddDefaultInventory_Parms parms;
//
//	if ( !pGameAddDefaultInventory )
//		pGameAddDefaultInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GameAddDefaultInventory" );
//
//	parms.P = P;
//	this->ProcessEvent ( pGameAddDefaultInventory, &parms, NULL );
//
//}
//
//bool AGameInfo::PlayerCanRestartGame ( class APlayerController* aPlayer )
//{
//	static UFunction* pPlayerCanRestartGame = 0;
//	AGameInfo_execPlayerCanRestartGame_Parms parms;
//
//	if ( !pPlayerCanRestartGame )
//		pPlayerCanRestartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PlayerCanRestartGame" );
//
//	parms.aPlayer = aPlayer;
//	this->ProcessEvent ( pPlayerCanRestartGame, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::PlayerCanRestart ( class APlayerController* aPlayer )
//{
//	static UFunction* pPlayerCanRestart = 0;
//	AGameInfo_execPlayerCanRestart_Parms parms;
//
//	if ( !pPlayerCanRestart )
//		pPlayerCanRestart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PlayerCanRestart" );
//
//	parms.aPlayer = aPlayer;
//	this->ProcessEvent ( pPlayerCanRestart, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::StartAIPlayers (  )
//{
//	static UFunction* pStartAIPlayers = 0;
//	AGameInfo_execStartAIPlayers_Parms parms;
//
//	if ( !pStartAIPlayers )
//		pStartAIPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.StartAIPlayers" );
//
//	this->ProcessEvent ( pStartAIPlayers, &parms, NULL );
//
//}
//
//void AGameInfo::StartHumanPlayers (  )
//{
//	static UFunction* pStartHumanPlayers = 0;
//	AGameInfo_execStartHumanPlayers_Parms parms;
//
//	if ( !pStartHumanPlayers )
//		pStartHumanPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.StartHumanPlayers" );
//
//	this->ProcessEvent ( pStartHumanPlayers, &parms, NULL );
//
//}
//
//void AGameInfo::StartMatch (  )
//{
//	static UFunction* pStartMatch = 0;
//	AGameInfo_execStartMatch_Parms parms;
//
//	if ( !pStartMatch )
//		pStartMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.StartMatch" );
//
//	this->ProcessEvent ( pStartMatch, &parms, NULL );
//
//}
//
//void AGameInfo::TestLevel (  )
//{
//	static UFunction* pTestLevel = 0;
//	AGameInfo_execTestLevel_Parms parms;
//
//	if ( !pTestLevel )
//		pTestLevel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.TestLevel" );
//
//	this->ProcessEvent ( pTestLevel, &parms, NULL );
//
//}
//
//void AGameInfo::ContinueMatch (  )
//{
//	static UFunction* pContinueMatch = 0;
//	AGameInfo_execContinueMatch_Parms parms;
//
//	if ( !pContinueMatch )
//		pContinueMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ContinueMatch" );
//
//	this->ProcessEvent ( pContinueMatch, &parms, NULL );
//
//}
//
//void AGameInfo::GotoNextGameState (  )
//{
//	static UFunction* pGotoNextGameState = 0;
//	AGameInfo_execGotoNextGameState_Parms parms;
//
//	if ( !pGotoNextGameState )
//		pGotoNextGameState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GotoNextGameState" );
//
//	this->ProcessEvent ( pGotoNextGameState, &parms, NULL );
//
//}
//
//bool AGameInfo::eventSimpleLogin ( class APlayerController* NewPlayer, class APawn* NewPawn )
//{
//	static UFunction* pSimpleLogin = 0;
//	AGameInfo_eventSimpleLogin_Parms parms;
//
//	if ( !pSimpleLogin )
//		pSimpleLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SimpleLogin" );
//
//	parms.NewPlayer = NewPlayer;
//	parms.NewPawn = NewPawn;
//	this->ProcessEvent ( pSimpleLogin, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::eventSetPlayerID ( class APlayerController* P )
//{
//	static UFunction* pSetPlayerID = 0;
//	AGameInfo_eventSetPlayerID_Parms parms;
//
//	if ( !pSetPlayerID )
//		pSetPlayerID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SetPlayerID" );
//
//	parms.P = P;
//	this->ProcessEvent ( pSetPlayerID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::eventForcedStartMatch (  )
//{
//	static UFunction* pForcedStartMatch = 0;
//	AGameInfo_eventForcedStartMatch_Parms parms;
//
//	if ( !pForcedStartMatch )
//		pForcedStartMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ForcedStartMatch" );
//
//	this->ProcessEvent ( pForcedStartMatch, &parms, NULL );
//
//}
//
//void AGameInfo::SetPRI4Intervention ( class APlayerReplicationInfo* PRI )
//{
//	static UFunction* pSetPRI4Intervention = 0;
//	AGameInfo_execSetPRI4Intervention_Parms parms;
//
//	if ( !pSetPRI4Intervention )
//		pSetPRI4Intervention = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SetPRI4Intervention" );
//
//	parms.PRI = PRI;
//	this->ProcessEvent ( pSetPRI4Intervention, &parms, NULL );
//
//}
//
//bool AGameInfo::IsNewPlayerGotoSpectating (  )
//{
//	static UFunction* pIsNewPlayerGotoSpectating = 0;
//	AGameInfo_execIsNewPlayerGotoSpectating_Parms parms;
//
//	if ( !pIsNewPlayerGotoSpectating )
//		pIsNewPlayerGotoSpectating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.IsNewPlayerGotoSpectating" );
//
//	this->ProcessEvent ( pIsNewPlayerGotoSpectating, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class APlayerController* AGameInfo::eventLogin ( struct FString Portal, struct FString Options, struct FString* Error )
//{
//	static UFunction* pLogin = 0;
//	AGameInfo_eventLogin_Parms parms;
//
//	if ( !pLogin )
//		pLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.Login" );
//
//	parms.Portal = Portal;
//	parms.Options = Options;
//	this->ProcessEvent ( pLogin, &parms, NULL );
//
//	*Error = parms.Error;
//	return parms.ReturnValue;
//}
//
//class AWaitView* AGameInfo::GetWaitView ( class UClass* classWaitView )
//{
//	static UFunction* pGetWaitView = 0;
//	AGameInfo_execGetWaitView_Parms parms;
//
//	if ( !pGetWaitView )
//		pGetWaitView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetWaitView" );
//
//	parms.classWaitView = classWaitView;
//	this->ProcessEvent ( pGetWaitView, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UClass* AGameInfo::GetWaitViewClass ( unsigned char Team )
//{
//	static UFunction* pGetWaitViewClass = 0;
//	AGameInfo_execGetWaitViewClass_Parms parms;
//
//	if ( !pGetWaitViewClass )
//		pGetWaitViewClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetWaitViewClass" );
//
//	parms.Team = Team;
//	this->ProcessEvent ( pGetWaitViewClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::CheckOverlapUserName ( struct FString LoginedUserName, struct FString* ErrMsg )
//{
//	static UFunction* pCheckOverlapUserName = 0;
//	AGameInfo_execCheckOverlapUserName_Parms parms;
//
//	if ( !pCheckOverlapUserName )
//		pCheckOverlapUserName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.CheckOverlapUserName" );
//
//	parms.LoginedUserName = LoginedUserName;
//	this->ProcessEvent ( pCheckOverlapUserName, &parms, NULL );
//
//	*ErrMsg = parms.ErrMsg;
//	return parms.ReturnValue;
//}
//
//unsigned char AGameInfo::PopNextTeam (  )
//{
//	static UFunction* pPopNextTeam = 0;
//	AGameInfo_execPopNextTeam_Parms parms;
//
//	if ( !pPopNextTeam )
//		pPopNextTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PopNextTeam" );
//
//	this->ProcessEvent ( pPopNextTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class APawn* AGameInfo::GetPawn4ChangeHost ( struct FString nn )
//{
//	static UFunction* pGetPawn4ChangeHost = 0;
//	AGameInfo_execGetPawn4ChangeHost_Parms parms;
//
//	if ( !pGetPawn4ChangeHost )
//		pGetPawn4ChangeHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetPawn4ChangeHost" );
//
//	parms.nn = nn;
//	this->ProcessEvent ( pGetPawn4ChangeHost, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::InitSavedLevel (  )
//{
//	static UFunction* pInitSavedLevel = 0;
//	AGameInfo_execInitSavedLevel_Parms parms;
//
//	if ( !pInitSavedLevel )
//		pInitSavedLevel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.InitSavedLevel" );
//
//	this->ProcessEvent ( pInitSavedLevel, &parms, NULL );
//
//}
//
//bool AGameInfo::AtCapacity ( bool bSpectator )
//{
//	static UFunction* pAtCapacity = 0;
//	AGameInfo_execAtCapacity_Parms parms;
//
//	if ( !pAtCapacity )
//		pAtCapacity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AtCapacity" );
//
//	parms.bSpectator = bSpectator;
//	this->ProcessEvent ( pAtCapacity, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::AllowBecomeActivePlayer ( class APlayerController* P )
//{
//	static UFunction* pAllowBecomeActivePlayer = 0;
//	AGameInfo_execAllowBecomeActivePlayer_Parms parms;
//
//	if ( !pAllowBecomeActivePlayer )
//		pAllowBecomeActivePlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AllowBecomeActivePlayer" );
//
//	parms.P = P;
//	this->ProcessEvent ( pAllowBecomeActivePlayer, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::BecomeSpectator ( class APlayerController* P )
//{
//	static UFunction* pBecomeSpectator = 0;
//	AGameInfo_execBecomeSpectator_Parms parms;
//
//	if ( !pBecomeSpectator )
//		pBecomeSpectator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.BecomeSpectator" );
//
//	parms.P = P;
//	this->ProcessEvent ( pBecomeSpectator, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AGameInfo::GetIntOption ( struct FString Options, struct FString ParseString, int CurrentValue )
//{
//	static UFunction* pGetIntOption = 0;
//	AGameInfo_execGetIntOption_Parms parms;
//
//	if ( !pGetIntOption )
//		pGetIntOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetIntOption" );
//
//	parms.Options = Options;
//	parms.ParseString = ParseString;
//	parms.CurrentValue = CurrentValue;
//	this->ProcessEvent ( pGetIntOption, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::eventPreLogin ( struct FString Options, struct FString Address, struct FString PlayerID, struct FString* Error, struct FString* FailCode )
//{
//	static UFunction* pPreLogin = 0;
//	AGameInfo_eventPreLogin_Parms parms;
//
//	if ( !pPreLogin )
//		pPreLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PreLogin" );
//
//	parms.Options = Options;
//	parms.Address = Address;
//	parms.PlayerID = PlayerID;
//	this->ProcessEvent ( pPreLogin, &parms, NULL );
//
//	*Error = parms.Error;
//	*FailCode = parms.FailCode;
//}
//
//void AGameInfo::ProcessServerTravel ( struct FString URL, bool bItems )
//{
//	static UFunction* pProcessServerTravel = 0;
//	AGameInfo_execProcessServerTravel_Parms parms;
//
//	if ( !pProcessServerTravel )
//		pProcessServerTravel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ProcessServerTravel" );
//
//	parms.URL = URL;
//	parms.bItems = bItems;
//	this->ProcessEvent ( pProcessServerTravel, &parms, NULL );
//
//}
//
//struct FString AGameInfo::eventGetBeaconText (  )
//{
//	static UFunction* pGetBeaconText = 0;
//	AGameInfo_eventGetBeaconText_Parms parms;
//
//	if ( !pGetBeaconText )
//		pGetBeaconText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetBeaconText" );
//
//	this->ProcessEvent ( pGetBeaconText, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::AddGameModifier ( class AGameRules* NewRule )
//{
//	static UFunction* pAddGameModifier = 0;
//	AGameInfo_execAddGameModifier_Parms parms;
//
//	if ( !pAddGameModifier )
//		pAddGameModifier = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AddGameModifier" );
//
//	parms.NewRule = NewRule;
//	this->ProcessEvent ( pAddGameModifier, &parms, NULL );
//
//}
//
//void AGameInfo::AddMutator ( struct FString mutname, bool bUserAdded )
//{
//	static UFunction* pAddMutator = 0;
//	AGameInfo_execAddMutator_Parms parms;
//
//	if ( !pAddMutator )
//		pAddMutator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AddMutator" );
//
//	parms.mutname = mutname;
//	parms.bUserAdded = bUserAdded;
//	this->ProcessEvent ( pAddMutator, &parms, NULL );
//
//}
//
//void AGameInfo::eventInitGame ( struct FString Options, struct FString* Error )
//{
//	static UFunction* pInitGame = 0;
//	AGameInfo_eventInitGame_Parms parms;
//
//	if ( !pInitGame )
//		pInitGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.InitGame" );
//
//	parms.Options = Options;
//	this->ProcessEvent ( pInitGame, &parms, NULL );
//
//	*Error = parms.Error;
//}
//
//bool AGameInfo::HasOption ( struct FString Options, struct FString InKey )
//{
//	static UFunction* pHasOption = 0;
//	AGameInfo_execHasOption_Parms parms;
//
//	if ( !pHasOption )
//		pHasOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.HasOption" );
//
//	parms.Options = Options;
//	parms.InKey = InKey;
//	this->ProcessEvent ( pHasOption, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameInfo::ParseOption ( struct FString Options, struct FString InKey )
//{
//	static UFunction* pParseOption = 0;
//	AGameInfo_execParseOption_Parms parms;
//
//	if ( !pParseOption )
//		pParseOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ParseOption" );
//
//	parms.Options = Options;
//	parms.InKey = InKey;
//	this->ProcessEvent ( pParseOption, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::GetKeyValue ( struct FString Pair, struct FString* key, struct FString* Value )
//{
//	static UFunction* pGetKeyValue = 0;
//	AGameInfo_execGetKeyValue_Parms parms;
//
//	if ( !pGetKeyValue )
//		pGetKeyValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetKeyValue" );
//
//	parms.Pair = Pair;
//	this->ProcessEvent ( pGetKeyValue, &parms, NULL );
//
//	*key = parms.key;
//	*Value = parms.Value;
//}
//
//bool AGameInfo::GrabOption ( struct FString* Options, struct FString* Result )
//{
//	static UFunction* pGrabOption = 0;
//	AGameInfo_execGrabOption_Parms parms;
//
//	if ( !pGrabOption )
//		pGrabOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GrabOption" );
//
//	parms.Options = *Options;
//	parms.Result = *Result;
//	this->ProcessEvent ( pGrabOption, &parms, NULL );
//
//	*Options = parms.Options;
//	*Result = parms.Result;
//	return parms.ReturnValue;
//}
//
//void AGameInfo::eventDetailChange (  )
//{
//	static UFunction* pDetailChange = 0;
//	AGameInfo_eventDetailChange_Parms parms;
//
//	if ( !pDetailChange )
//		pDetailChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.DetailChange" );
//
//	this->ProcessEvent ( pDetailChange, &parms, NULL );
//
//}
//
//void AGameInfo::execSetRPPFPS ( float fps )
//{
//	static UFunction* pSetRPPFPS = 0;
//	AGameInfo_execSetRPPFPS_Parms parms;
//
//	if ( !pSetRPPFPS )
//		pSetRPPFPS = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SetRPPFPS" );
//
//	parms.fps = fps;
//	this->ProcessEvent ( pSetRPPFPS, &parms, NULL );
//
//}
//
//void AGameInfo::execSetRPPTime ( float limit )
//{
//	static UFunction* pSetRPPTime = 0;
//	AGameInfo_execSetRPPTime_Parms parms;
//
//	if ( !pSetRPPTime )
//		pSetRPPTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SetRPPTime" );
//
//	parms.limit = limit;
//	this->ProcessEvent ( pSetRPPTime, &parms, NULL );
//
//}
//
//void AGameInfo::execgamego (  )
//{
//	static UFunction* pgamego = 0;
//	AGameInfo_execgamego_Parms parms;
//
//	if ( !pgamego )
//		pgamego = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.gamego" );
//
//	this->ProcessEvent ( pgamego, &parms, NULL );
//
//}
//
//void AGameInfo::execgamestop (  )
//{
//	static UFunction* pgamestop = 0;
//	AGameInfo_execgamestop_Parms parms;
//
//	if ( !pgamestop )
//		pgamestop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.gamestop" );
//
//	this->ProcessEvent ( pgamestop, &parms, NULL );
//
//}
//
//void AGameInfo::execgamesetspeed ( float t )
//{
//	static UFunction* pgamesetspeed = 0;
//	AGameInfo_execgamesetspeed_Parms parms;
//
//	if ( !pgamesetspeed )
//		pgamesetspeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.gamesetspeed" );
//
//	parms.t = t;
//	this->ProcessEvent ( pgamesetspeed, &parms, NULL );
//
//}
//
//void AGameInfo::execshowrespawn (  )
//{
//	static UFunction* pshowrespawn = 0;
//	AGameInfo_execshowrespawn_Parms parms;
//
//	if ( !pshowrespawn )
//		pshowrespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.showrespawn" );
//
//	this->ProcessEvent ( pshowrespawn, &parms, NULL );
//
//}
//
//void AGameInfo::SetSpeed ( float t )
//{
//	static UFunction* pSetSpeed = 0;
//	AGameInfo_execSetSpeed_Parms parms;
//
//	if ( !pSetSpeed )
//		pSetSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SetSpeed" );
//
//	parms.t = t;
//	this->ProcessEvent ( pSetSpeed, &parms, NULL );
//
//}
//
//void AGameInfo::SetGameSpeed ( float t )
//{
//	static UFunction* pSetGameSpeed = 0;
//	AGameInfo_execSetGameSpeed_Parms parms;
//
//	if ( !pSetGameSpeed )
//		pSetGameSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SetGameSpeed" );
//
//	parms.t = t;
//	this->ProcessEvent ( pSetGameSpeed, &parms, NULL );
//
//}
//
//bool AGameInfo::AllowGameSpeedChange (  )
//{
//	static UFunction* pAllowGameSpeedChange = 0;
//	AGameInfo_execAllowGameSpeedChange_Parms parms;
//
//	if ( !pAllowGameSpeedChange )
//		pAllowGameSpeedChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AllowGameSpeedChange" );
//
//	this->ProcessEvent ( pAllowGameSpeedChange, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::SetPause ( bool bPause, class APlayerController* P )
//{
//	static UFunction* pSetPause = 0;
//	AGameInfo_execSetPause_Parms parms;
//
//	if ( !pSetPause )
//		pSetPause = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SetPause" );
//
//	parms.bPause = bPause;
//	parms.P = P;
//	this->ProcessEvent ( pSetPause, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AGameInfo::GetServerPort (  )
//{
//	static UFunction* pGetServerPort = 0;
//	AGameInfo_execGetServerPort_Parms parms;
//
//	if ( !pGetServerPort )
//		pGetServerPort = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetServerPort" );
//
//	this->ProcessEvent ( pGetServerPort, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::GetServerPlayers ( struct FServerResponseLine* ServerState )
//{
//	static UFunction* pGetServerPlayers = 0;
//	AGameInfo_execGetServerPlayers_Parms parms;
//
//	if ( !pGetServerPlayers )
//		pGetServerPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetServerPlayers" );
//
//	parms.ServerState = *ServerState;
//	this->ProcessEvent ( pGetServerPlayers, &parms, NULL );
//
//	*ServerState = parms.ServerState;
//}
//
//void AGameInfo::GetServerDetails ( struct FServerResponseLine* ServerState )
//{
//	static UFunction* pGetServerDetails = 0;
//	AGameInfo_execGetServerDetails_Parms parms;
//
//	if ( !pGetServerDetails )
//		pGetServerDetails = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetServerDetails" );
//
//	parms.ServerState = *ServerState;
//	this->ProcessEvent ( pGetServerDetails, &parms, NULL );
//
//	*ServerState = parms.ServerState;
//}
//
//int AGameInfo::GetNumPlayers (  )
//{
//	static UFunction* pGetNumPlayers = 0;
//	AGameInfo_execGetNumPlayers_Parms parms;
//
//	if ( !pGetNumPlayers )
//		pGetNumPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetNumPlayers" );
//
//	this->ProcessEvent ( pGetNumPlayers, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::GetServerInfo ( struct FServerResponseLine* ServerState )
//{
//	static UFunction* pGetServerInfo = 0;
//	AGameInfo_execGetServerInfo_Parms parms;
//
//	if ( !pGetServerInfo )
//		pGetServerInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetServerInfo" );
//
//	parms.ServerState = *ServerState;
//	this->ProcessEvent ( pGetServerInfo, &parms, NULL );
//
//	*ServerState = parms.ServerState;
//}
//
//struct FString AGameInfo::GetNetworkNumber (  )
//{
//	static UFunction* pGetNetworkNumber = 0;
//	AGameInfo_execGetNetworkNumber_Parms parms;
//
//	if ( !pGetNetworkNumber )
//		pGetNetworkNumber = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetNetworkNumber" );
//
//	this->ProcessEvent ( pGetNetworkNumber, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::InitMaplistHandler (  )
//{
//	static UFunction* pInitMaplistHandler = 0;
//	AGameInfo_execInitMaplistHandler_Parms parms;
//
//	if ( !pInitMaplistHandler )
//		pInitMaplistHandler = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.InitMaplistHandler" );
//
//	this->ProcessEvent ( pInitMaplistHandler, &parms, NULL );
//
//}
//
//void AGameInfo::InitVoiceReplicationInfo (  )
//{
//	static UFunction* pInitVoiceReplicationInfo = 0;
//	AGameInfo_execInitVoiceReplicationInfo_Parms parms;
//
//	if ( !pInitVoiceReplicationInfo )
//		pInitVoiceReplicationInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.InitVoiceReplicationInfo" );
//
//	this->ProcessEvent ( pInitVoiceReplicationInfo, &parms, NULL );
//
//}
//
//void AGameInfo::InitGameReplicationInfo (  )
//{
//	static UFunction* pInitGameReplicationInfo = 0;
//	AGameInfo_execInitGameReplicationInfo_Parms parms;
//
//	if ( !pInitGameReplicationInfo )
//		pInitGameReplicationInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.InitGameReplicationInfo" );
//
//	this->ProcessEvent ( pInitGameReplicationInfo, &parms, NULL );
//
//}
//
//void AGameInfo::eventKickIdler ( class APlayerController* PC )
//{
//	static UFunction* pKickIdler = 0;
//	AGameInfo_eventKickIdler_Parms parms;
//
//	if ( !pKickIdler )
//		pKickIdler = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.KickIdler" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pKickIdler, &parms, NULL );
//
//}
//
//void AGameInfo::eventGameEnding (  )
//{
//	static UFunction* pGameEnding = 0;
//	AGameInfo_eventGameEnding_Parms parms;
//
//	if ( !pGameEnding )
//		pGameEnding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GameEnding" );
//
//	this->ProcessEvent ( pGameEnding, &parms, NULL );
//
//}
//
//void AGameInfo::Timer (  )
//{
//	static UFunction* pTimer = 0;
//	AGameInfo_execTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//void AGameInfo::InitLogging (  )
//{
//	static UFunction* pInitLogging = 0;
//	AGameInfo_execInitLogging_Parms parms;
//
//	if ( !pInitLogging )
//		pInitLogging = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.InitLogging" );
//
//	this->ProcessEvent ( pInitLogging, &parms, NULL );
//
//}
//
//void AGameInfo::Reset (  )
//{
//	static UFunction* pReset = 0;
//	AGameInfo_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void AGameInfo::LogRespawnStatistics (  )
//{
//	static UFunction* pLogRespawnStatistics = 0;
//	AGameInfo_execLogRespawnStatistics_Parms parms;
//
//	if ( !pLogRespawnStatistics )
//		pLogRespawnStatistics = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.LogRespawnStatistics" );
//
//	this->ProcessEvent ( pLogRespawnStatistics, &parms, NULL );
//
//}
//
//void AGameInfo::InitializeEveryPlayerStarts (  )
//{
//	static UFunction* pInitializeEveryPlayerStarts = 0;
//	AGameInfo_execInitializeEveryPlayerStarts_Parms parms;
//
//	if ( !pInitializeEveryPlayerStarts )
//		pInitializeEveryPlayerStarts = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.InitializeEveryPlayerStarts" );
//
//	this->ProcessEvent ( pInitializeEveryPlayerStarts, &parms, NULL );
//
//}
//
//void AGameInfo::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AGameInfo_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//bool AGameInfo::NoBlood (  )
//{
//	static UFunction* pNoBlood = 0;
//	AGameInfo_execNoBlood_Parms parms;
//
//	if ( !pNoBlood )
//		pNoBlood = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.NoBlood" );
//
//	this->ProcessEvent ( pNoBlood, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::UseLowGore (  )
//{
//	static UFunction* pUseLowGore = 0;
//	AGameInfo_execUseLowGore_Parms parms;
//
//	if ( !pUseLowGore )
//		pUseLowGore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.UseLowGore" );
//
//	this->ProcessEvent ( pUseLowGore, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::ChangeMap ( int ContextID )
//{
//	static UFunction* pChangeMap = 0;
//	AGameInfo_execChangeMap_Parms parms;
//
//	if ( !pChangeMap )
//		pChangeMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ChangeMap" );
//
//	parms.ContextID = ContextID;
//	this->ProcessEvent ( pChangeMap, &parms, NULL );
//
//}
//
//void AGameInfo::TeamQueueAnnouncement ( unsigned char Team, struct FString ASoundName, unsigned char AnnouncementLevel, unsigned char Priority, unsigned char Switch )
//{
//	static UFunction* pTeamQueueAnnouncement = 0;
//	AGameInfo_execTeamQueueAnnouncement_Parms parms;
//
//	if ( !pTeamQueueAnnouncement )
//		pTeamQueueAnnouncement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.TeamQueueAnnouncement" );
//
//	parms.Team = Team;
//	parms.ASoundName = ASoundName;
//	parms.AnnouncementLevel = AnnouncementLevel;
//	parms.Priority = Priority;
//	parms.Switch = Switch;
//	this->ProcessEvent ( pTeamQueueAnnouncement, &parms, NULL );
//
//}
//
//void AGameInfo::TeamReceiveLocalizedMessageEx ( unsigned char Team, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, struct FVector vLocation, float fMaxDist, bool bExceptOwner )
//{
//	static UFunction* pTeamReceiveLocalizedMessageEx = 0;
//	AGameInfo_execTeamReceiveLocalizedMessageEx_Parms parms;
//
//	if ( !pTeamReceiveLocalizedMessageEx )
//		pTeamReceiveLocalizedMessageEx = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.TeamReceiveLocalizedMessageEx" );
//
//	parms.Team = Team;
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	parms.vLocation = vLocation;
//	parms.fMaxDist = fMaxDist;
//	parms.bExceptOwner = bExceptOwner;
//	this->ProcessEvent ( pTeamReceiveLocalizedMessageEx, &parms, NULL );
//
//}
//
//void AGameInfo::TeamReceiveLocalizedMessage ( unsigned char Team, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pTeamReceiveLocalizedMessage = 0;
//	AGameInfo_execTeamReceiveLocalizedMessage_Parms parms;
//
//	if ( !pTeamReceiveLocalizedMessage )
//		pTeamReceiveLocalizedMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.TeamReceiveLocalizedMessage" );
//
//	parms.Team = Team;
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pTeamReceiveLocalizedMessage, &parms, NULL );
//
//}
//
//void AGameInfo::AllReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pAllReceiveLocalizedMessage = 0;
//	AGameInfo_execAllReceiveLocalizedMessage_Parms parms;
//
//	if ( !pAllReceiveLocalizedMessage )
//		pAllReceiveLocalizedMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AllReceiveLocalizedMessage" );
//
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pAllReceiveLocalizedMessage, &parms, NULL );
//
//}
//
//struct FString AGameInfo::FindPlayerByID ( int PlayerID )
//{
//	static UFunction* pFindPlayerByID = 0;
//	AGameInfo_execFindPlayerByID_Parms parms;
//
//	if ( !pFindPlayerByID )
//		pFindPlayerByID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.FindPlayerByID" );
//
//	parms.PlayerID = PlayerID;
//	this->ProcessEvent ( pFindPlayerByID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::PrecacheGore (  )
//{
//	static UFunction* pPrecacheGore = 0;
//	AGameInfo_execPrecacheGore_Parms parms;
//
//	if ( !pPrecacheGore )
//		pPrecacheGore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PrecacheGore" );
//
//	this->ProcessEvent ( pPrecacheGore, &parms, NULL );
//
//}
//
//void AGameInfo::PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds )
//{
//	static UFunction* pPrecacheGameAnnouncements = 0;
//	AGameInfo_execPrecacheGameAnnouncements_Parms parms;
//
//	if ( !pPrecacheGameAnnouncements )
//		pPrecacheGameAnnouncements = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PrecacheGameAnnouncements" );
//
//	parms.V = V;
//	parms.bRewardSounds = bRewardSounds;
//	this->ProcessEvent ( pPrecacheGameAnnouncements, &parms, NULL );
//
//}
//
//void AGameInfo::PrecacheGameSkeletalMeshes ( class ALevelInfo* myLevel )
//{
//	static UFunction* pPrecacheGameSkeletalMeshes = 0;
//	AGameInfo_execPrecacheGameSkeletalMeshes_Parms parms;
//
//	if ( !pPrecacheGameSkeletalMeshes )
//		pPrecacheGameSkeletalMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PrecacheGameSkeletalMeshes" );
//
//	parms.myLevel = myLevel;
//	this->ProcessEvent ( pPrecacheGameSkeletalMeshes, &parms, NULL );
//
//}
//
//void AGameInfo::PrecacheGameStaticMeshes ( class ALevelInfo* myLevel )
//{
//	static UFunction* pPrecacheGameStaticMeshes = 0;
//	AGameInfo_execPrecacheGameStaticMeshes_Parms parms;
//
//	if ( !pPrecacheGameStaticMeshes )
//		pPrecacheGameStaticMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PrecacheGameStaticMeshes" );
//
//	parms.myLevel = myLevel;
//	this->ProcessEvent ( pPrecacheGameStaticMeshes, &parms, NULL );
//
//}
//
//void AGameInfo::PrecacheGameTextures ( class ALevelInfo* myLevel )
//{
//	static UFunction* pPrecacheGameTextures = 0;
//	AGameInfo_execPrecacheGameTextures_Parms parms;
//
//	if ( !pPrecacheGameTextures )
//		pPrecacheGameTextures = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PrecacheGameTextures" );
//
//	parms.myLevel = myLevel;
//	this->ProcessEvent ( pPrecacheGameTextures, &parms, NULL );
//
//}
//
//void AGameInfo::Precache ( class ALevelInfo* Level )
//{
//	static UFunction* pPrecache = 0;
//	AGameInfo_execPrecache_Parms parms;
//
//	if ( !pPrecache )
//		pPrecache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.Precache" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pPrecache, &parms, NULL );
//
//}
//
//void AGameInfo::UpdatePrecacheSkeletalMeshes (  )
//{
//	static UFunction* pUpdatePrecacheSkeletalMeshes = 0;
//	AGameInfo_execUpdatePrecacheSkeletalMeshes_Parms parms;
//
//	if ( !pUpdatePrecacheSkeletalMeshes )
//		pUpdatePrecacheSkeletalMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.UpdatePrecacheSkeletalMeshes" );
//
//	this->ProcessEvent ( pUpdatePrecacheSkeletalMeshes, &parms, NULL );
//
//}
//
//void AGameInfo::UpdatePrecacheStaticMeshes (  )
//{
//	static UFunction* pUpdatePrecacheStaticMeshes = 0;
//	AGameInfo_execUpdatePrecacheStaticMeshes_Parms parms;
//
//	if ( !pUpdatePrecacheStaticMeshes )
//		pUpdatePrecacheStaticMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.UpdatePrecacheStaticMeshes" );
//
//	this->ProcessEvent ( pUpdatePrecacheStaticMeshes, &parms, NULL );
//
//}
//
//void AGameInfo::UpdatePrecacheMaterials (  )
//{
//	static UFunction* pUpdatePrecacheMaterials = 0;
//	AGameInfo_execUpdatePrecacheMaterials_Parms parms;
//
//	if ( !pUpdatePrecacheMaterials )
//		pUpdatePrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.UpdatePrecacheMaterials" );
//
//	this->ProcessEvent ( pUpdatePrecacheMaterials, &parms, NULL );
//
//}
//
//void AGameInfo::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AGameInfo_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AGameInfo::eventSetOldTeamInfo ( class AGameReplicationInfo* OldGRI )
//{
//	static UFunction* pSetOldTeamInfo = 0;
//	AGameInfo_eventSetOldTeamInfo_Parms parms;
//
//	if ( !pSetOldTeamInfo )
//		pSetOldTeamInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SetOldTeamInfo" );
//
//	parms.OldGRI = OldGRI;
//	this->ProcessEvent ( pSetOldTeamInfo, &parms, NULL );
//
//}
//
//int AGameInfo::GetBootySeedValue (  )
//{
//	static UFunction* pGetBootySeedValue = 0;
//	AGameInfo_execGetBootySeedValue_Parms parms;
//
//	if ( !pGetBootySeedValue )
//		pGetBootySeedValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetBootySeedValue" );
//
//	this->ProcessEvent ( pGetBootySeedValue, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::eventForceSetGRIInitialState (  )
//{
//	static UFunction* pForceSetGRIInitialState = 0;
//	AGameInfo_eventForceSetGRIInitialState_Parms parms;
//
//	if ( !pForceSetGRIInitialState )
//		pForceSetGRIInitialState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ForceSetGRIInitialState" );
//
//	this->ProcessEvent ( pForceSetGRIInitialState, &parms, NULL );
//
//}
//
//void AGameInfo::eventForceSetInitialState (  )
//{
//	static UFunction* pForceSetInitialState = 0;
//	AGameInfo_eventForceSetInitialState_Parms parms;
//
//	if ( !pForceSetInitialState )
//		pForceSetInitialState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ForceSetInitialState" );
//
//	this->ProcessEvent ( pForceSetInitialState, &parms, NULL );
//
//}
//
//void AGameInfo::eventForcePostNetBeginPlay (  )
//{
//	static UFunction* pForcePostNetBeginPlay = 0;
//	AGameInfo_eventForcePostNetBeginPlay_Parms parms;
//
//	if ( !pForcePostNetBeginPlay )
//		pForcePostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ForcePostNetBeginPlay" );
//
//	this->ProcessEvent ( pForcePostNetBeginPlay, &parms, NULL );
//
//}
//
//void AGameInfo::eventForcePostBeginPlay (  )
//{
//	static UFunction* pForcePostBeginPlay = 0;
//	AGameInfo_eventForcePostBeginPlay_Parms parms;
//
//	if ( !pForcePostBeginPlay )
//		pForcePostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ForcePostBeginPlay" );
//
//	this->ProcessEvent ( pForcePostBeginPlay, &parms, NULL );
//
//}
//
//void AGameInfo::eventForceBeginPlay (  )
//{
//	static UFunction* pForceBeginPlay = 0;
//	AGameInfo_eventForceBeginPlay_Parms parms;
//
//	if ( !pForceBeginPlay )
//		pForceBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ForceBeginPlay" );
//
//	this->ProcessEvent ( pForceBeginPlay, &parms, NULL );
//
//}
//
//void AGameInfo::eventForcePreBeginPlay (  )
//{
//	static UFunction* pForcePreBeginPlay = 0;
//	AGameInfo_eventForcePreBeginPlay_Parms parms;
//
//	if ( !pForcePreBeginPlay )
//		pForcePreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.ForcePreBeginPlay" );
//
//	this->ProcessEvent ( pForcePreBeginPlay, &parms, NULL );
//
//}
//
//void AGameInfo::PreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AGameInfo_execPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void AGameInfo::AnnounceUAV ( class AController* Caller )
//{
//	static UFunction* pAnnounceUAV = 0;
//	AGameInfo_execAnnounceUAV_Parms parms;
//
//	if ( !pAnnounceUAV )
//		pAnnounceUAV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AnnounceUAV" );
//
//	parms.Caller = Caller;
//	this->ProcessEvent ( pAnnounceUAV, &parms, NULL );
//
//}
//
//void AGameInfo::AnnounceHelicopter ( class AController* Caller )
//{
//	static UFunction* pAnnounceHelicopter = 0;
//	AGameInfo_execAnnounceHelicopter_Parms parms;
//
//	if ( !pAnnounceHelicopter )
//		pAnnounceHelicopter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AnnounceHelicopter" );
//
//	parms.Caller = Caller;
//	this->ProcessEvent ( pAnnounceHelicopter, &parms, NULL );
//
//}
//
//void AGameInfo::AnnounceArtillery ( class AController* Caller )
//{
//	static UFunction* pAnnounceArtillery = 0;
//	AGameInfo_execAnnounceArtillery_Parms parms;
//
//	if ( !pAnnounceArtillery )
//		pAnnounceArtillery = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AnnounceArtillery" );
//
//	parms.Caller = Caller;
//	this->ProcessEvent ( pAnnounceArtillery, &parms, NULL );
//
//}
//
//void AGameInfo::NativeSettingAfterChangedHost (  )
//{
//	static UFunction* pNativeSettingAfterChangedHost = 0;
//	AGameInfo_execNativeSettingAfterChangedHost_Parms parms;
//
//	if ( !pNativeSettingAfterChangedHost )
//		pNativeSettingAfterChangedHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.NativeSettingAfterChangedHost" );
//
//	this->ProcessEvent ( pNativeSettingAfterChangedHost, &parms, NULL );
//
//}
//
//void AGameInfo::LoadMapList ( struct FString MapPrefix, class TArray< struct FString >* Maps )
//{
//	static UFunction* pLoadMapList = 0;
//	AGameInfo_execLoadMapList_Parms parms;
//
//	if ( !pLoadMapList )
//		pLoadMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.LoadMapList" );
//
//	parms.MapPrefix = MapPrefix;
//	this->ProcessEvent ( pLoadMapList, &parms, NULL );
//
//	*Maps = parms.Maps;
//}
//
//bool AGameInfo::DeletePackage ( struct FString PackageName )
//{
//	static UFunction* pDeletePackage = 0;
//	AGameInfo_execDeletePackage_Parms parms;
//
//	if ( !pDeletePackage )
//		pDeletePackage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.DeletePackage" );
//
//	parms.PackageName = PackageName;
//	this->ProcessEvent ( pDeletePackage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::SavePackage ( struct FString PackageName )
//{
//	static UFunction* pSavePackage = 0;
//	AGameInfo_execSavePackage_Parms parms;
//
//	if ( !pSavePackage )
//		pSavePackage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.SavePackage" );
//
//	parms.PackageName = PackageName;
//	this->ProcessEvent ( pSavePackage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameInfo::AllDataObjects ( class UClass* objClass, struct FString PackageName, class UObject** obj )
//{
//	static UFunction* pAllDataObjects = 0;
//	AGameInfo_execAllDataObjects_Parms parms;
//
//	if ( !pAllDataObjects )
//		pAllDataObjects = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.AllDataObjects" );
//
//	parms.objClass = objClass;
//	parms.PackageName = PackageName;
//	this->ProcessEvent ( pAllDataObjects, &parms, NULL );
//
//	*obj = parms.obj;
//}
//
//class UObject* AGameInfo::LoadDataObject ( class UClass* objClass, struct FString objName, struct FString PackageName )
//{
//	static UFunction* pLoadDataObject = 0;
//	AGameInfo_execLoadDataObject_Parms parms;
//
//	if ( !pLoadDataObject )
//		pLoadDataObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.LoadDataObject" );
//
//	parms.objClass = objClass;
//	parms.objName = objName;
//	parms.PackageName = PackageName;
//	this->ProcessEvent ( pLoadDataObject, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameInfo::DeleteDataObject ( class UClass* objClass, struct FString objName, struct FString PackageName )
//{
//	static UFunction* pDeleteDataObject = 0;
//	AGameInfo_execDeleteDataObject_Parms parms;
//
//	if ( !pDeleteDataObject )
//		pDeleteDataObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.DeleteDataObject" );
//
//	parms.objClass = objClass;
//	parms.objName = objName;
//	parms.PackageName = PackageName;
//	this->ProcessEvent ( pDeleteDataObject, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UObject* AGameInfo::CreateDataObject ( class UClass* objClass, struct FString objName, struct FString PackageName )
//{
//	static UFunction* pCreateDataObject = 0;
//	AGameInfo_execCreateDataObject_Parms parms;
//
//	if ( !pCreateDataObject )
//		pCreateDataObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.CreateDataObject" );
//
//	parms.objClass = objClass;
//	parms.objName = objName;
//	parms.PackageName = PackageName;
//	this->ProcessEvent ( pCreateDataObject, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UManifest* AGameInfo::GetSavedGames (  )
//{
//	static UFunction* pGetSavedGames = 0;
//	AGameInfo_execGetSavedGames_Parms parms;
//
//	if ( !pGetSavedGames )
//		pGetSavedGames = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameInfo.GetSavedGames" );
//
//	this->ProcessEvent ( pGetSavedGames, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALevelInfo::eventOnDisconnect (  )
//{
//	static UFunction* pOnDisconnect = 0;
//	ALevelInfo_eventOnDisconnect_Parms parms;
//
//	if ( !pOnDisconnect )
//		pOnDisconnect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.OnDisconnect" );
//
//	this->ProcessEvent ( pOnDisconnect, &parms, NULL );
//
//}
//
//bool ALevelInfo::GetIsConnectDMZ (  )
//{
//	static UFunction* pGetIsConnectDMZ = 0;
//	ALevelInfo_execGetIsConnectDMZ_Parms parms;
//
//	if ( !pGetIsConnectDMZ )
//		pGetIsConnectDMZ = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetIsConnectDMZ" );
//
//	this->ProcessEvent ( pGetIsConnectDMZ, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::GetIsForceServiceBuild (  )
//{
//	static UFunction* pGetIsForceServiceBuild = 0;
//	ALevelInfo_execGetIsForceServiceBuild_Parms parms;
//
//	if ( !pGetIsForceServiceBuild )
//		pGetIsForceServiceBuild = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetIsForceServiceBuild" );
//
//	this->ProcessEvent ( pGetIsForceServiceBuild, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::GetIsServiceBuild (  )
//{
//	static UFunction* pGetIsServiceBuild = 0;
//	ALevelInfo_execGetIsServiceBuild_Parms parms;
//
//	if ( !pGetIsServiceBuild )
//		pGetIsServiceBuild = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetIsServiceBuild" );
//
//	this->ProcessEvent ( pGetIsServiceBuild, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::GetIsUseAdvCamShake (  )
//{
//	static UFunction* pGetIsUseAdvCamShake = 0;
//	ALevelInfo_execGetIsUseAdvCamShake_Parms parms;
//
//	if ( !pGetIsUseAdvCamShake )
//		pGetIsUseAdvCamShake = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetIsUseAdvCamShake" );
//
//	this->ProcessEvent ( pGetIsUseAdvCamShake, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::GetIsUseStanceToggle (  )
//{
//	static UFunction* pGetIsUseStanceToggle = 0;
//	ALevelInfo_execGetIsUseStanceToggle_Parms parms;
//
//	if ( !pGetIsUseStanceToggle )
//		pGetIsUseStanceToggle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetIsUseStanceToggle" );
//
//	this->ProcessEvent ( pGetIsUseStanceToggle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::GetIsUseMouseRevision (  )
//{
//	static UFunction* pGetIsUseMouseRevision = 0;
//	ALevelInfo_execGetIsUseMouseRevision_Parms parms;
//
//	if ( !pGetIsUseMouseRevision )
//		pGetIsUseMouseRevision = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetIsUseMouseRevision" );
//
//	this->ProcessEvent ( pGetIsUseMouseRevision, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::GetIsUseRagdoll (  )
//{
//	static UFunction* pGetIsUseRagdoll = 0;
//	ALevelInfo_execGetIsUseRagdoll_Parms parms;
//
//	if ( !pGetIsUseRagdoll )
//		pGetIsUseRagdoll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetIsUseRagdoll" );
//
//	this->ProcessEvent ( pGetIsUseRagdoll, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::GetIsNoGore (  )
//{
//	static UFunction* pGetIsNoGore = 0;
//	ALevelInfo_execGetIsNoGore_Parms parms;
//
//	if ( !pGetIsNoGore )
//		pGetIsNoGore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetIsNoGore" );
//
//	this->ProcessEvent ( pGetIsNoGore, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::GetIsTeenVersion (  )
//{
//	static UFunction* pGetIsTeenVersion = 0;
//	ALevelInfo_execGetIsTeenVersion_Parms parms;
//
//	if ( !pGetIsTeenVersion )
//		pGetIsTeenVersion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetIsTeenVersion" );
//
//	this->ProcessEvent ( pGetIsTeenVersion, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALevelInfo::ClearInvalidCache (  )
//{
//	static UFunction* pClearInvalidCache = 0;
//	ALevelInfo_execClearInvalidCache_Parms parms;
//
//	if ( !pClearInvalidCache )
//		pClearInvalidCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.ClearInvalidCache" );
//
//	this->ProcessEvent ( pClearInvalidCache, &parms, NULL );
//
//}
//
//void ALevelInfo::eventSetNoUpdateAllGSSS (  )
//{
//	static UFunction* pSetNoUpdateAllGSSS = 0;
//	ALevelInfo_eventSetNoUpdateAllGSSS_Parms parms;
//
//	if ( !pSetNoUpdateAllGSSS )
//		pSetNoUpdateAllGSSS = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.SetNoUpdateAllGSSS" );
//
//	this->ProcessEvent ( pSetNoUpdateAllGSSS, &parms, NULL );
//
//}
//
//class APlayerController* ALevelInfo::GetLocalPlayerController (  )
//{
//	static UFunction* pGetLocalPlayerController = 0;
//	ALevelInfo_execGetLocalPlayerController_Parms parms;
//
//	if ( !pGetLocalPlayerController )
//		pGetLocalPlayerController = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetLocalPlayerController" );
//
//	this->ProcessEvent ( pGetLocalPlayerController, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALevelInfo::eventPreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	ALevelInfo_eventPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void ALevelInfo::Reset (  )
//{
//	static UFunction* pReset = 0;
//	ALevelInfo_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void ALevelInfo::ThisIsNeverExecuted (  )
//{
//	static UFunction* pThisIsNeverExecuted = 0;
//	ALevelInfo_execThisIsNeverExecuted_Parms parms;
//
//	if ( !pThisIsNeverExecuted )
//		pThisIsNeverExecuted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.ThisIsNeverExecuted" );
//
//	this->ProcessEvent ( pThisIsNeverExecuted, &parms, NULL );
//
//}
//
//void ALevelInfo::eventServerTravel ( struct FString URL, bool bItems )
//{
//	static UFunction* pServerTravel = 0;
//	ALevelInfo_eventServerTravel_Parms parms;
//
//	if ( !pServerTravel )
//		pServerTravel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.ServerTravel" );
//
//	parms.URL = URL;
//	parms.bItems = bItems;
//	this->ProcessEvent ( pServerTravel, &parms, NULL );
//
//}
//
//bool ALevelInfo::IsPendingConnection (  )
//{
//	static UFunction* pIsPendingConnection = 0;
//	ALevelInfo_execIsPendingConnection_Parms parms;
//
//	if ( !pIsPendingConnection )
//		pIsPendingConnection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.IsPendingConnection" );
//
//	this->ProcessEvent ( pIsPendingConnection, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString ALevelInfo::GetAddressURL (  )
//{
//	static UFunction* pGetAddressURL = 0;
//	ALevelInfo_execGetAddressURL_Parms parms;
//
//	if ( !pGetAddressURL )
//		pGetAddressURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetAddressURL" );
//
//	this->ProcessEvent ( pGetAddressURL, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::IsSoftwareRendering (  )
//{
//	static UFunction* pIsSoftwareRendering = 0;
//	ALevelInfo_execIsSoftwareRendering_Parms parms;
//
//	if ( !pIsSoftwareRendering )
//		pIsSoftwareRendering = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.IsSoftwareRendering" );
//
//	this->ProcessEvent ( pIsSoftwareRendering, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::IsDemoBuild (  )
//{
//	static UFunction* pIsDemoBuild = 0;
//	ALevelInfo_execIsDemoBuild_Parms parms;
//
//	if ( !pIsDemoBuild )
//		pIsDemoBuild = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.IsDemoBuild" );
//
//	this->ProcessEvent ( pIsDemoBuild, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString ALevelInfo::GetLocalURL (  )
//{
//	static UFunction* pGetLocalURL = 0;
//	ALevelInfo_execGetLocalURL_Parms parms;
//
//	if ( !pGetLocalURL )
//		pGetLocalURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetLocalURL" );
//
//	this->ProcessEvent ( pGetLocalURL, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALevelInfo::ResetPrecacheSkeletalMeshes (  )
//{
//	static UFunction* pResetPrecacheSkeletalMeshes = 0;
//	ALevelInfo_execResetPrecacheSkeletalMeshes_Parms parms;
//
//	if ( !pResetPrecacheSkeletalMeshes )
//		pResetPrecacheSkeletalMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.ResetPrecacheSkeletalMeshes" );
//
//	this->ProcessEvent ( pResetPrecacheSkeletalMeshes, &parms, NULL );
//
//}
//
//void ALevelInfo::AddPrecacheSkeletalMesh ( class UMesh* mes )
//{
//	static UFunction* pAddPrecacheSkeletalMesh = 0;
//	ALevelInfo_execAddPrecacheSkeletalMesh_Parms parms;
//
//	if ( !pAddPrecacheSkeletalMesh )
//		pAddPrecacheSkeletalMesh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.AddPrecacheSkeletalMesh" );
//
//	parms.mes = mes;
//	this->ProcessEvent ( pAddPrecacheSkeletalMesh, &parms, NULL );
//
//}
//
//void ALevelInfo::ResetPrecacheStaticMesh (  )
//{
//	static UFunction* pResetPrecacheStaticMesh = 0;
//	ALevelInfo_execResetPrecacheStaticMesh_Parms parms;
//
//	if ( !pResetPrecacheStaticMesh )
//		pResetPrecacheStaticMesh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.ResetPrecacheStaticMesh" );
//
//	this->ProcessEvent ( pResetPrecacheStaticMesh, &parms, NULL );
//
//}
//
//void ALevelInfo::AddPrecacheStaticMesh ( class UStaticMesh* stat )
//{
//	static UFunction* pAddPrecacheStaticMesh = 0;
//	ALevelInfo_execAddPrecacheStaticMesh_Parms parms;
//
//	if ( !pAddPrecacheStaticMesh )
//		pAddPrecacheStaticMesh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.AddPrecacheStaticMesh" );
//
//	parms.stat = stat;
//	this->ProcessEvent ( pAddPrecacheStaticMesh, &parms, NULL );
//
//}
//
//void ALevelInfo::ResetPrecacheMaterials (  )
//{
//	static UFunction* pResetPrecacheMaterials = 0;
//	ALevelInfo_execResetPrecacheMaterials_Parms parms;
//
//	if ( !pResetPrecacheMaterials )
//		pResetPrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.ResetPrecacheMaterials" );
//
//	this->ProcessEvent ( pResetPrecacheMaterials, &parms, NULL );
//
//}
//
//void ALevelInfo::AddPrecacheMaterial ( class UMaterial* mat )
//{
//	static UFunction* pAddPrecacheMaterial = 0;
//	ALevelInfo_execAddPrecacheMaterial_Parms parms;
//
//	if ( !pAddPrecacheMaterial )
//		pAddPrecacheMaterial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.AddPrecacheMaterial" );
//
//	parms.mat = mat;
//	this->ProcessEvent ( pAddPrecacheMaterial, &parms, NULL );
//
//}
//
//void ALevelInfo::eventFillPrecacheSkeletalMeshesArray ( bool FullPrecache )
//{
//	static UFunction* pFillPrecacheSkeletalMeshesArray = 0;
//	ALevelInfo_eventFillPrecacheSkeletalMeshesArray_Parms parms;
//
//	if ( !pFillPrecacheSkeletalMeshesArray )
//		pFillPrecacheSkeletalMeshesArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.FillPrecacheSkeletalMeshesArray" );
//
//	parms.FullPrecache = FullPrecache;
//	this->ProcessEvent ( pFillPrecacheSkeletalMeshesArray, &parms, NULL );
//
//}
//
//void ALevelInfo::eventFillPrecacheStaticMeshesArray ( bool FullPrecache )
//{
//	static UFunction* pFillPrecacheStaticMeshesArray = 0;
//	ALevelInfo_eventFillPrecacheStaticMeshesArray_Parms parms;
//
//	if ( !pFillPrecacheStaticMeshesArray )
//		pFillPrecacheStaticMeshesArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.FillPrecacheStaticMeshesArray" );
//
//	parms.FullPrecache = FullPrecache;
//	this->ProcessEvent ( pFillPrecacheStaticMeshesArray, &parms, NULL );
//
//}
//
//void ALevelInfo::PrecacheAnnouncements (  )
//{
//	static UFunction* pPrecacheAnnouncements = 0;
//	ALevelInfo_execPrecacheAnnouncements_Parms parms;
//
//	if ( !pPrecacheAnnouncements )
//		pPrecacheAnnouncements = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.PrecacheAnnouncements" );
//
//	this->ProcessEvent ( pPrecacheAnnouncements, &parms, NULL );
//
//}
//
//void ALevelInfo::eventFillPrecacheMaterialsArray ( bool FullPrecache )
//{
//	static UFunction* pFillPrecacheMaterialsArray = 0;
//	ALevelInfo_eventFillPrecacheMaterialsArray_Parms parms;
//
//	if ( !pFillPrecacheMaterialsArray )
//		pFillPrecacheMaterialsArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.FillPrecacheMaterialsArray" );
//
//	parms.FullPrecache = FullPrecache;
//	this->ProcessEvent ( pFillPrecacheMaterialsArray, &parms, NULL );
//
//}
//
//void ALevelInfo::eventPrecacheInit (  )
//{
//	static UFunction* pPrecacheInit = 0;
//	ALevelInfo_eventPrecacheInit_Parms parms;
//
//	if ( !pPrecacheInit )
//		pPrecacheInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.PrecacheInit" );
//
//	this->ProcessEvent ( pPrecacheInit, &parms, NULL );
//
//}
//
//class UClass* ALevelInfo::GetGameClass (  )
//{
//	static UFunction* pGetGameClass = 0;
//	ALevelInfo_execGetGameClass_Parms parms;
//
//	if ( !pGetGameClass )
//		pGetGameClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetGameClass" );
//
//	this->ProcessEvent ( pGetGameClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALevelInfo::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	ALevelInfo_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void ALevelInfo::eventTick ( float DeltaTime )
//{
//	static UFunction* pTick = 0;
//	ALevelInfo_eventTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.Tick" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//class ANavigationPoint* ALevelInfo::GetRandomNavigationPointAround ( struct FVector V )
//{
//	static UFunction* pGetRandomNavigationPointAround = 0;
//	ALevelInfo_execGetRandomNavigationPointAround_Parms parms;
//
//	if ( !pGetRandomNavigationPointAround )
//		pGetRandomNavigationPointAround = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetRandomNavigationPointAround" );
//
//	parms.V = V;
//	this->ProcessEvent ( pGetRandomNavigationPointAround, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class ANavigationPoint* ALevelInfo::GetClosestNavigationPoint ( struct FVector V )
//{
//	static UFunction* pGetClosestNavigationPoint = 0;
//	ALevelInfo_execGetClosestNavigationPoint_Parms parms;
//
//	if ( !pGetClosestNavigationPoint )
//		pGetClosestNavigationPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetClosestNavigationPoint" );
//
//	parms.V = V;
//	this->ProcessEvent ( pGetClosestNavigationPoint, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::IsVisibleByVisID ( int sVisID, int eVisID, int sStance, int eStance )
//{
//	static UFunction* pIsVisibleByVisID = 0;
//	ALevelInfo_execIsVisibleByVisID_Parms parms;
//
//	if ( !pIsVisibleByVisID )
//		pIsVisibleByVisID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.IsVisibleByVisID" );
//
//	parms.sVisID = sVisID;
//	parms.eVisID = eVisID;
//	parms.sStance = sStance;
//	parms.eStance = eStance;
//	this->ProcessEvent ( pIsVisibleByVisID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::IsVisible ( class ANavigationPoint* S, class ANavigationPoint* E, int sStance, int eStance )
//{
//	static UFunction* pIsVisible = 0;
//	ALevelInfo_execIsVisible_Parms parms;
//
//	if ( !pIsVisible )
//		pIsVisible = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.IsVisible" );
//
//	parms.S = S;
//	parms.E = E;
//	parms.sStance = sStance;
//	parms.eStance = eStance;
//	this->ProcessEvent ( pIsVisible, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALevelInfo::UpdateInfluence (  )
//{
//	static UFunction* pUpdateInfluence = 0;
//	ALevelInfo_execUpdateInfluence_Parms parms;
//
//	if ( !pUpdateInfluence )
//		pUpdateInfluence = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.UpdateInfluence" );
//
//	this->ProcessEvent ( pUpdateInfluence, &parms, NULL );
//
//}
//
//class AwAILevelBase* ALevelInfo::GetAILevel (  )
//{
//	static UFunction* pGetAILevel = 0;
//	ALevelInfo_execGetAILevel_Parms parms;
//
//	if ( !pGetAILevel )
//		pGetAILevel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetAILevel" );
//
//	this->ProcessEvent ( pGetAILevel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class APhysicsVolume* ALevelInfo::GetPhysicsVolume ( struct FVector loc )
//{
//	static UFunction* pGetPhysicsVolume = 0;
//	ALevelInfo_execGetPhysicsVolume_Parms parms;
//
//	if ( !pGetPhysicsVolume )
//		pGetPhysicsVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetPhysicsVolume" );
//
//	parms.loc = loc;
//	this->ProcessEvent ( pGetPhysicsVolume, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALevelInfo::ForceLoadTexture ( class UTexture* Texture )
//{
//	static UFunction* pForceLoadTexture = 0;
//	ALevelInfo_execForceLoadTexture_Parms parms;
//
//	if ( !pForceLoadTexture )
//		pForceLoadTexture = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.ForceLoadTexture" );
//
//	parms.Texture = Texture;
//	this->ProcessEvent ( pForceLoadTexture, &parms, NULL );
//
//}
//
//void ALevelInfo::UpdateDistanceFogLOD ( float LOD )
//{
//	static UFunction* pUpdateDistanceFogLOD = 0;
//	ALevelInfo_execUpdateDistanceFogLOD_Parms parms;
//
//	if ( !pUpdateDistanceFogLOD )
//		pUpdateDistanceFogLOD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.UpdateDistanceFogLOD" );
//
//	parms.LOD = LOD;
//	this->ProcessEvent ( pUpdateDistanceFogLOD, &parms, NULL );
//
//}
//
//bool ALevelInfo::IsEntry (  )
//{
//	static UFunction* pIsEntry = 0;
//	ALevelInfo_execIsEntry_Parms parms;
//
//	if ( !pIsEntry )
//		pIsEntry = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.IsEntry" );
//
//	this->ProcessEvent ( pIsEntry, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALevelInfo::DetailChange ( unsigned char NewDetailMode )
//{
//	static UFunction* pDetailChange = 0;
//	ALevelInfo_execDetailChange_Parms parms;
//
//	if ( !pDetailChange )
//		pDetailChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.DetailChange" );
//
//	parms.NewDetailMode = NewDetailMode;
//	this->ProcessEvent ( pDetailChange, &parms, NULL );
//
//}
//
//bool ALevelInfo::IsUseGraphicOption ( struct FString OptionName )
//{
//	static UFunction* pIsUseGraphicOption = 0;
//	ALevelInfo_execIsUseGraphicOption_Parms parms;
//
//	if ( !pIsUseGraphicOption )
//		pIsUseGraphicOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.IsUseGraphicOption" );
//
//	parms.OptionName = OptionName;
//	this->ProcessEvent ( pIsUseGraphicOption, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
class UwMatchMaker* ALevelInfo::GetMatchMaker (  )
{
	static UFunction* pGetMatchMaker = 0;
	ALevelInfo_execGetMatchMaker_Parms parms;

	if ( !pGetMatchMaker )
		pGetMatchMaker = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.GetMatchMaker" );

	this->ProcessEvent ( pGetMatchMaker, &parms, NULL );

	return parms.ReturnValue;
}
//
//void ALevelInfo::SetCaptureQuality ( int iValue )
//{
//	static UFunction* pSetCaptureQuality = 0;
//	ALevelInfo_execSetCaptureQuality_Parms parms;
//
//	if ( !pSetCaptureQuality )
//		pSetCaptureQuality = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.SetCaptureQuality" );
//
//	parms.iValue = iValue;
//	this->ProcessEvent ( pSetCaptureQuality, &parms, NULL );
//
//}
//
//void ALevelInfo::SetCaptureResoultion ( int iValue )
//{
//	static UFunction* pSetCaptureResoultion = 0;
//	ALevelInfo_execSetCaptureResoultion_Parms parms;
//
//	if ( !pSetCaptureResoultion )
//		pSetCaptureResoultion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.SetCaptureResoultion" );
//
//	parms.iValue = iValue;
//	this->ProcessEvent ( pSetCaptureResoultion, &parms, NULL );
//
//}
//
//bool ALevelInfo::IsCapturing (  )
//{
//	static UFunction* pIsCapturing = 0;
//	ALevelInfo_execIsCapturing_Parms parms;
//
//	if ( !pIsCapturing )
//		pIsCapturing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.IsCapturing" );
//
//	this->ProcessEvent ( pIsCapturing, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALevelInfo::SetCapture ( bool bCapture )
//{
//	static UFunction* pSetCapture = 0;
//	ALevelInfo_execSetCapture_Parms parms;
//
//	if ( !pSetCapture )
//		pSetCapture = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.SetCapture" );
//
//	parms.bCapture = bCapture;
//	this->ProcessEvent ( pSetCapture, &parms, NULL );
//
//}
//
//void ALevelInfo::ResetCombationSituationReview (  )
//{
//	static UFunction* pResetCombationSituationReview = 0;
//	ALevelInfo_execResetCombationSituationReview_Parms parms;
//
//	if ( !pResetCombationSituationReview )
//		pResetCombationSituationReview = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.ResetCombationSituationReview" );
//
//	this->ProcessEvent ( pResetCombationSituationReview, &parms, NULL );
//
//}
//
//bool ALevelInfo::LoadUsermove ( struct FString szPath, int nCommand, int nCombatNum, struct FString szUserName )
//{
//	static UFunction* pLoadUsermove = 0;
//	ALevelInfo_execLoadUsermove_Parms parms;
//
//	if ( !pLoadUsermove )
//		pLoadUsermove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.LoadUsermove" );
//
//	parms.szPath = szPath;
//	parms.nCommand = nCommand;
//	parms.nCombatNum = nCombatNum;
//	parms.szUserName = szUserName;
//	this->ProcessEvent ( pLoadUsermove, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::LoadUserzone ( struct FString szPath, int nCommand, struct FString szUserName )
//{
//	static UFunction* pLoadUserzone = 0;
//	ALevelInfo_execLoadUserzone_Parms parms;
//
//	if ( !pLoadUserzone )
//		pLoadUserzone = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.LoadUserzone" );
//
//	parms.szPath = szPath;
//	parms.nCommand = nCommand;
//	parms.szUserName = szUserName;
//	this->ProcessEvent ( pLoadUserzone, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALevelInfo::LoadKilllog ( struct FString szPath, int nCommand, int nOption )
//{
//	static UFunction* pLoadKilllog = 0;
//	ALevelInfo_execLoadKilllog_Parms parms;
//
//	if ( !pLoadKilllog )
//		pLoadKilllog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LevelInfo.LoadKilllog" );
//
//	parms.szPath = szPath;
//	parms.nCommand = nCommand;
//	parms.nOption = nOption;
//	this->ProcessEvent ( pLoadKilllog, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVignette::eventDrawVignette ( class UCanvas* C, float Progress )
//{
//	static UFunction* pDrawVignette = 0;
//	AVignette_eventDrawVignette_Parms parms;
//
//	if ( !pDrawVignette )
//		pDrawVignette = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vignette.DrawVignette" );
//
//	parms.C = C;
//	parms.Progress = Progress;
//	this->ProcessEvent ( pDrawVignette, &parms, NULL );
//
//}
//
//void AVignette::eventInit (  )
//{
//	static UFunction* pInit = 0;
//	AVignette_eventInit_Parms parms;
//
//	if ( !pInit )
//		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Vignette.Init" );
//
//	this->ProcessEvent ( pInit, &parms, NULL );
//
//}
//
//void AwWeapon::ServerMeleeFire (  )
//{
//	static UFunction* pServerMeleeFire = 0;
//	AwWeapon_execServerMeleeFire_Parms parms;
//
//	if ( !pServerMeleeFire )
//		pServerMeleeFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ServerMeleeFire" );
//
//	this->ProcessEvent ( pServerMeleeFire, &parms, NULL );
//
//}
//
//void AwWeapon::ClientMeleeFire (  )
//{
//	static UFunction* pClientMeleeFire = 0;
//	AwWeapon_execClientMeleeFire_Parms parms;
//
//	if ( !pClientMeleeFire )
//		pClientMeleeFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ClientMeleeFire" );
//
//	this->ProcessEvent ( pClientMeleeFire, &parms, NULL );
//
//}
//
//void AwWeapon::ServerThrowingWeapon (  )
//{
//	static UFunction* pServerThrowingWeapon = 0;
//	AwWeapon_execServerThrowingWeapon_Parms parms;
//
//	if ( !pServerThrowingWeapon )
//		pServerThrowingWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ServerThrowingWeapon" );
//
//	this->ProcessEvent ( pServerThrowingWeapon, &parms, NULL );
//
//}
//
//void AwWeapon::ClientThrowingWeapon (  )
//{
//	static UFunction* pClientThrowingWeapon = 0;
//	AwWeapon_execClientThrowingWeapon_Parms parms;
//
//	if ( !pClientThrowingWeapon )
//		pClientThrowingWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ClientThrowingWeapon" );
//
//	this->ProcessEvent ( pClientThrowingWeapon, &parms, NULL );
//
//}
//
//void AwWeapon::ActiveMeleeDelay (  )
//{
//	static UFunction* pActiveMeleeDelay = 0;
//	AwWeapon_execActiveMeleeDelay_Parms parms;
//
//	if ( !pActiveMeleeDelay )
//		pActiveMeleeDelay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ActiveMeleeDelay" );
//
//	this->ProcessEvent ( pActiveMeleeDelay, &parms, NULL );
//
//}
//
//void AwWeapon::ActiveFireDelay (  )
//{
//	static UFunction* pActiveFireDelay = 0;
//	AwWeapon_execActiveFireDelay_Parms parms;
//
//	if ( !pActiveFireDelay )
//		pActiveFireDelay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ActiveFireDelay" );
//
//	this->ProcessEvent ( pActiveFireDelay, &parms, NULL );
//
//}
//
int AwWeapon::GetCurMagazineAmmoCount (  )
{
	static UFunction* pGetCurMagazineAmmoCount = 0;
	AwWeapon_execGetCurMagazineAmmoCount_Parms parms;

	if ( !pGetCurMagazineAmmoCount )
		pGetCurMagazineAmmoCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GetCurMagazineAmmoCount" );

	this->ProcessEvent ( pGetCurMagazineAmmoCount, &parms, NULL );

	return parms.ReturnValue;
}

int AwWeapon::GetCurTotalAmmoCount (  )
{
	static UFunction* pGetCurTotalAmmoCount = 0;
	AwWeapon_execGetCurTotalAmmoCount_Parms parms;

	if ( !pGetCurTotalAmmoCount )
		pGetCurTotalAmmoCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GetCurTotalAmmoCount" );

	this->ProcessEvent ( pGetCurTotalAmmoCount, &parms, NULL );

	return parms.ReturnValue;
}
//
//void AwWeapon::ClientQuickReload ( bool bOn )
//{
//	static UFunction* pClientQuickReload = 0;
//	AwWeapon_execClientQuickReload_Parms parms;
//
//	if ( !pClientQuickReload )
//		pClientQuickReload = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ClientQuickReload" );
//
//	parms.bOn = bOn;
//	this->ProcessEvent ( pClientQuickReload, &parms, NULL );
//
//}
//
void AwWeapon::ServerQuickReload ( bool bOn )
{
	static UFunction* pServerQuickReload = 0;
	AwWeapon_execServerQuickReload_Parms parms;

	if ( !pServerQuickReload )
		pServerQuickReload = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ServerQuickReload" );

	parms.bOn = bOn;
	this->ProcessEvent ( pServerQuickReload, &parms, NULL );

}
//
//void AwWeapon::ClientQuickAimZoom ( bool bOn )
//{
//	static UFunction* pClientQuickAimZoom = 0;
//	AwWeapon_execClientQuickAimZoom_Parms parms;
//
//	if ( !pClientQuickAimZoom )
//		pClientQuickAimZoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ClientQuickAimZoom" );
//
//	parms.bOn = bOn;
//	this->ProcessEvent ( pClientQuickAimZoom, &parms, NULL );
//
//}
//
void AwWeapon::ServerQuickAimZoom ( bool bOn )
{
	static UFunction* pServerQuickAimZoom = 0;
	AwWeapon_execServerQuickAimZoom_Parms parms;

	if ( !pServerQuickAimZoom )
		pServerQuickAimZoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ServerQuickAimZoom" );

	parms.bOn = bOn;
	this->ProcessEvent ( pServerQuickAimZoom, &parms, NULL );

}
//
//void AwWeapon::ClientAddMagazine (  )
//{
//	static UFunction* pClientAddMagazine = 0;
//	AwWeapon_execClientAddMagazine_Parms parms;
//
//	if ( !pClientAddMagazine )
//		pClientAddMagazine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ClientAddMagazine" );
//
//	this->ProcessEvent ( pClientAddMagazine, &parms, NULL );
//
//}
//
void AwWeapon::ServerAddMagazine (  )
{
	static UFunction* pServerAddMagazine = 0;
	AwWeapon_execServerAddMagazine_Parms parms;

	if ( !pServerAddMagazine )
		pServerAddMagazine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ServerAddMagazine" );

	this->ProcessEvent ( pServerAddMagazine, &parms, NULL );

}
//
//void AwWeapon::SetWalkingSwayRot ( struct FRotator rRot )
//{
//	static UFunction* pSetWalkingSwayRot = 0;
//	AwWeapon_execSetWalkingSwayRot_Parms parms;
//
//	if ( !pSetWalkingSwayRot )
//		pSetWalkingSwayRot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetWalkingSwayRot" );
//
//	parms.rRot = rRot;
//	this->ProcessEvent ( pSetWalkingSwayRot, &parms, NULL );
//
//}
//
//void AwWeapon::SetAttackedRot ( struct FRotator rRot )
//{
//	static UFunction* pSetAttackedRot = 0;
//	AwWeapon_execSetAttackedRot_Parms parms;
//
//	if ( !pSetAttackedRot )
//		pSetAttackedRot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetAttackedRot" );
//
//	parms.rRot = rRot;
//	this->ProcessEvent ( pSetAttackedRot, &parms, NULL );
//
//}
//
//void AwWeapon::SetAttackedOffset ( struct FVector VOffset )
//{
//	static UFunction* pSetAttackedOffset = 0;
//	AwWeapon_execSetAttackedOffset_Parms parms;
//
//	if ( !pSetAttackedOffset )
//		pSetAttackedOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetAttackedOffset" );
//
//	parms.VOffset = VOffset;
//	this->ProcessEvent ( pSetAttackedOffset, &parms, NULL );
//
//}
//
//void AwWeapon::SetAmmoAmount ( int Mode, int CurrentAmmo )
//{
//	static UFunction* pSetAmmoAmount = 0;
//	AwWeapon_execSetAmmoAmount_Parms parms;
//
//	if ( !pSetAmmoAmount )
//		pSetAmmoAmount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetAmmoAmount" );
//
//	parms.Mode = Mode;
//	parms.CurrentAmmo = CurrentAmmo;
//	this->ProcessEvent ( pSetAmmoAmount, &parms, NULL );
//
//}
//
//void AwWeapon::SetAmmoTotal ( int Mode, int TotalAmmo )
//{
//	static UFunction* pSetAmmoTotal = 0;
//	AwWeapon_execSetAmmoTotal_Parms parms;
//
//	if ( !pSetAmmoTotal )
//		pSetAmmoTotal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetAmmoTotal" );
//
//	parms.Mode = Mode;
//	parms.TotalAmmo = TotalAmmo;
//	this->ProcessEvent ( pSetAmmoTotal, &parms, NULL );
//
//}
//
//bool AwWeapon::IsCanUseWeapon (  )
//{
//	static UFunction* pIsCanUseWeapon = 0;
//	AwWeapon_execIsCanUseWeapon_Parms parms;
//
//	if ( !pIsCanUseWeapon )
//		pIsCanUseWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.IsCanUseWeapon" );
//
//	this->ProcessEvent ( pIsCanUseWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::DelFireMode ( int iMode )
//{
//	static UFunction* pDelFireMode = 0;
//	AwWeapon_execDelFireMode_Parms parms;
//
//	if ( !pDelFireMode )
//		pDelFireMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.DelFireMode" );
//
//	parms.iMode = iMode;
//	this->ProcessEvent ( pDelFireMode, &parms, NULL );
//
//}
//
//void AwWeapon::CalcSwayRot ( float fDeltaTime )
//{
//	static UFunction* pCalcSwayRot = 0;
//	AwWeapon_execCalcSwayRot_Parms parms;
//
//	if ( !pCalcSwayRot )
//		pCalcSwayRot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CalcSwayRot" );
//
//	parms.fDeltaTime = fDeltaTime;
//	this->ProcessEvent ( pCalcSwayRot, &parms, NULL );
//
//}
//
//void AwWeapon::CalcFiringSwayRot ( float fDeltaTime )
//{
//	static UFunction* pCalcFiringSwayRot = 0;
//	AwWeapon_execCalcFiringSwayRot_Parms parms;
//
//	if ( !pCalcFiringSwayRot )
//		pCalcFiringSwayRot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CalcFiringSwayRot" );
//
//	parms.fDeltaTime = fDeltaTime;
//	this->ProcessEvent ( pCalcFiringSwayRot, &parms, NULL );
//
//}
//
//void AwWeapon::SetRandFiringSwayRot (  )
//{
//	static UFunction* pSetRandFiringSwayRot = 0;
//	AwWeapon_execSetRandFiringSwayRot_Parms parms;
//
//	if ( !pSetRandFiringSwayRot )
//		pSetRandFiringSwayRot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetRandFiringSwayRot" );
//
//	this->ProcessEvent ( pSetRandFiringSwayRot, &parms, NULL );
//
//}
//
//void AwWeapon::CalcBreathOffset (  )
//{
//	static UFunction* pCalcBreathOffset = 0;
//	AwWeapon_execCalcBreathOffset_Parms parms;
//
//	if ( !pCalcBreathOffset )
//		pCalcBreathOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CalcBreathOffset" );
//
//	this->ProcessEvent ( pCalcBreathOffset, &parms, NULL );
//
//}
//
//void AwWeapon::CalcStanceOffset ( float fDelta )
//{
//	static UFunction* pCalcStanceOffset = 0;
//	AwWeapon_execCalcStanceOffset_Parms parms;
//
//	if ( !pCalcStanceOffset )
//		pCalcStanceOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CalcStanceOffset" );
//
//	parms.fDelta = fDelta;
//	this->ProcessEvent ( pCalcStanceOffset, &parms, NULL );
//
//}
//
//float AwWeapon::CalcDestPivot (  )
//{
//	static UFunction* pCalcDestPivot = 0;
//	AwWeapon_execCalcDestPivot_Parms parms;
//
//	if ( !pCalcDestPivot )
//		pCalcDestPivot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CalcDestPivot" );
//
//	this->ProcessEvent ( pCalcDestPivot, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::IsExistParts ( unsigned char Type )
//{
//	static UFunction* pIsExistParts = 0;
//	AwWeapon_execIsExistParts_Parms parms;
//
//	if ( !pIsExistParts )
//		pIsExistParts = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.IsExistParts" );
//
//	parms.Type = Type;
//	this->ProcessEvent ( pIsExistParts, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::IsMeleeAttacking (  )
//{
//	static UFunction* pIsMeleeAttacking = 0;
//	AwWeapon_execIsMeleeAttacking_Parms parms;
//
//	if ( !pIsMeleeAttacking )
//		pIsMeleeAttacking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.IsMeleeAttacking" );
//
//	this->ProcessEvent ( pIsMeleeAttacking, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::IsPutdowning (  )
//{
//	static UFunction* pIsPutdowning = 0;
//	AwWeapon_execIsPutdowning_Parms parms;
//
//	if ( !pIsPutdowning )
//		pIsPutdowning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.IsPutdowning" );
//
//	this->ProcessEvent ( pIsPutdowning, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::IsWeaponChanging (  )
//{
//	static UFunction* pIsWeaponChanging = 0;
//	AwWeapon_execIsWeaponChanging_Parms parms;
//
//	if ( !pIsWeaponChanging )
//		pIsWeaponChanging = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.IsWeaponChanging" );
//
//	this->ProcessEvent ( pIsWeaponChanging, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::IsReloading (  )
//{
//	static UFunction* pIsReloading = 0;
//	AwWeapon_execIsReloading_Parms parms;
//
//	if ( !pIsReloading )
//		pIsReloading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.IsReloading" );
//
//	this->ProcessEvent ( pIsReloading, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::GetSprint (  )
//{
//	static UFunction* pGetSprint = 0;
//	AwWeapon_execGetSprint_Parms parms;
//
//	if ( !pGetSprint )
//		pGetSprint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GetSprint" );
//
//	this->ProcessEvent ( pGetSprint, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::SetSprint ( bool bValue )
//{
//	static UFunction* pSetSprint = 0;
//	AwWeapon_execSetSprint_Parms parms;
//
//	if ( !pSetSprint )
//		pSetSprint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetSprint" );
//
//	parms.bValue = bValue;
//	this->ProcessEvent ( pSetSprint, &parms, NULL );
//
//}
//
//void AwWeapon::AddParts ( unsigned char Type, struct FString szName, struct FString szSkinName, struct FString strHaveDotName, struct FVector AimDiff, int iItemID, int iPartsGroupID, bool bSightSub )
//{
//	static UFunction* pAddParts = 0;
//	AwWeapon_execAddParts_Parms parms;
//
//	if ( !pAddParts )
//		pAddParts = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.AddParts" );
//
//	parms.Type = Type;
//	parms.szName = szName;
//	parms.szSkinName = szSkinName;
//	parms.strHaveDotName = strHaveDotName;
//	parms.AimDiff = AimDiff;
//	parms.iItemID = iItemID;
//	parms.iPartsGroupID = iPartsGroupID;
//	parms.bSightSub = bSightSub;
//	this->ProcessEvent ( pAddParts, &parms, NULL );
//
//}
//
//void AwWeapon::FireOne ( int iFireMode )
//{
//	static UFunction* pFireOne = 0;
//	AwWeapon_execFireOne_Parms parms;
//
//	if ( !pFireOne )
//		pFireOne = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.FireOne" );
//
//	parms.iFireMode = iFireMode;
//	this->ProcessEvent ( pFireOne, &parms, NULL );
//
//}
//
//void AwWeapon::AttachToPawn ( class APawn* P )
//{
//	static UFunction* pAttachToPawn = 0;
//	AwWeapon_execAttachToPawn_Parms parms;
//
//	if ( !pAttachToPawn )
//		pAttachToPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.AttachToPawn" );
//
//	parms.P = P;
//	this->ProcessEvent ( pAttachToPawn, &parms, NULL );
//
//}
//
//void AwWeapon::AddPartsGroup ( int iWeaponID, int iAddPartsID )
//{
//	static UFunction* pAddPartsGroup = 0;
//	AwWeapon_execAddPartsGroup_Parms parms;
//
//	if ( !pAddPartsGroup )
//		pAddPartsGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.AddPartsGroup" );
//
//	parms.iWeaponID = iWeaponID;
//	parms.iAddPartsID = iAddPartsID;
//	this->ProcessEvent ( pAddPartsGroup, &parms, NULL );
//
//}
//
//void AwWeapon::SetAddPartsParams (  )
//{
//	static UFunction* pSetAddPartsParams = 0;
//	AwWeapon_execSetAddPartsParams_Parms parms;
//
//	if ( !pSetAddPartsParams )
//		pSetAddPartsParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetAddPartsParams" );
//
//	this->ProcessEvent ( pSetAddPartsParams, &parms, NULL );
//
//}
//
//void AwWeapon::wLoadOut ( int iID, int iAddPartsID )
//{
//	static UFunction* pwLoadOut = 0;
//	AwWeapon_execwLoadOut_Parms parms;
//
//	if ( !pwLoadOut )
//		pwLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.wLoadOut" );
//
//	parms.iID = iID;
//	parms.iAddPartsID = iAddPartsID;
//	this->ProcessEvent ( pwLoadOut, &parms, NULL );
//
//}
//
//void AwWeapon::wLoadOut_Client ( int iID, int iAddPartsID )
//{
//	static UFunction* pwLoadOut_Client = 0;
//	AwWeapon_execwLoadOut_Client_Parms parms;
//
//	if ( !pwLoadOut_Client )
//		pwLoadOut_Client = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.wLoadOut_Client" );
//
//	parms.iID = iID;
//	parms.iAddPartsID = iAddPartsID;
//	this->ProcessEvent ( pwLoadOut_Client, &parms, NULL );
//
//}
//
//void AwWeapon::wLoadOut_Server ( int iID, int iAddPartsID, bool bInGamePlaying )
//{
//	static UFunction* pwLoadOut_Server = 0;
//	AwWeapon_execwLoadOut_Server_Parms parms;
//
//	if ( !pwLoadOut_Server )
//		pwLoadOut_Server = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.wLoadOut_Server" );
//
//	parms.iID = iID;
//	parms.iAddPartsID = iAddPartsID;
//	parms.bInGamePlaying = bInGamePlaying;
//	this->ProcessEvent ( pwLoadOut_Server, &parms, NULL );
//
//}
//
//void AwWeapon::SetHands (  )
//{
//	static UFunction* pSetHands = 0;
//	AwWeapon_execSetHands_Parms parms;
//
//	if ( !pSetHands )
//		pSetHands = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetHands" );
//
//	this->ProcessEvent ( pSetHands, &parms, NULL );
//
//}
//
//void AwWeapon::SetResParams ( class UClass* wRes )
//{
//	static UFunction* pSetResParams = 0;
//	AwWeapon_execSetResParams_Parms parms;
//
//	if ( !pSetResParams )
//		pSetResParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetResParams" );
//
//	parms.wRes = wRes;
//	this->ProcessEvent ( pSetResParams, &parms, NULL );
//
//}
//
//void AwWeapon::SetBaseParams ( class UwWeaponBaseParams* wBase )
//{
//	static UFunction* pSetBaseParams = 0;
//	AwWeapon_execSetBaseParams_Parms parms;
//
//	if ( !pSetBaseParams )
//		pSetBaseParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetBaseParams" );
//
//	parms.wBase = wBase;
//	this->ProcessEvent ( pSetBaseParams, &parms, NULL );
//
//}
//
//class UwWeaponFire* AwWeapon::GetFireMode ( unsigned char Mode )
//{
//	static UFunction* pGetFireMode = 0;
//	AwWeapon_execGetFireMode_Parms parms;
//
//	if ( !pGetFireMode )
//		pGetFireMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GetFireMode" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pGetFireMode, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::PawnUnpossessed (  )
//{
//	static UFunction* pPawnUnpossessed = 0;
//	AwWeapon_execPawnUnpossessed_Parms parms;
//
//	if ( !pPawnUnpossessed )
//		pPawnUnpossessed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.PawnUnpossessed" );
//
//	this->ProcessEvent ( pPawnUnpossessed, &parms, NULL );
//
//}
//
//bool AwWeapon::ShootHoop ( class AController* B, struct FVector ShootLoc )
//{
//	static UFunction* pShootHoop = 0;
//	AwWeapon_execShootHoop_Parms parms;
//
//	if ( !pShootHoop )
//		pShootHoop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ShootHoop" );
//
//	parms.B = B;
//	parms.ShootLoc = ShootLoc;
//	this->ProcessEvent ( pShootHoop, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::ShouldFireWithoutTarget (  )
//{
//	static UFunction* pShouldFireWithoutTarget = 0;
//	AwWeapon_execShouldFireWithoutTarget_Parms parms;
//
//	if ( !pShouldFireWithoutTarget )
//		pShouldFireWithoutTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ShouldFireWithoutTarget" );
//
//	this->ProcessEvent ( pShouldFireWithoutTarget, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::CanHeal ( class AActor* Other )
//{
//	static UFunction* pCanHeal = 0;
//	AwWeapon_execCanHeal_Parms parms;
//
//	if ( !pCanHeal )
//		pCanHeal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CanHeal" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pCanHeal, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::WantsZoomFade (  )
//{
//	static UFunction* pWantsZoomFade = 0;
//	AwWeapon_execWantsZoomFade_Parms parms;
//
//	if ( !pWantsZoomFade )
//		pWantsZoomFade = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.WantsZoomFade" );
//
//	this->ProcessEvent ( pWantsZoomFade, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::HandlePickupQuery ( class APickup* Item )
//{
//	static UFunction* pHandlePickupQuery = 0;
//	AwWeapon_execHandlePickupQuery_Parms parms;
//
//	if ( !pHandlePickupQuery )
//		pHandlePickupQuery = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.HandlePickupQuery" );
//
//	parms.Item = Item;
//	this->ProcessEvent ( pHandlePickupQuery, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::DoReflectEffect ( int Drain )
//{
//	static UFunction* pDoReflectEffect = 0;
//	AwWeapon_execDoReflectEffect_Parms parms;
//
//	if ( !pDoReflectEffect )
//		pDoReflectEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.DoReflectEffect" );
//
//	parms.Drain = Drain;
//	this->ProcessEvent ( pDoReflectEffect, &parms, NULL );
//
//}
//
//bool AwWeapon::CheckTryToDrive (  )
//{
//	static UFunction* pCheckTryToDrive = 0;
//	AwWeapon_execCheckTryToDrive_Parms parms;
//
//	if ( !pCheckTryToDrive )
//		pCheckTryToDrive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CheckTryToDrive" );
//
//	this->ProcessEvent ( pCheckTryToDrive, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::CheckReflect ( struct FVector HitLocation, int AmmoDrain, struct FVector* RefNormal )
//{
//	static UFunction* pCheckReflect = 0;
//	AwWeapon_execCheckReflect_Parms parms;
//
//	if ( !pCheckReflect )
//		pCheckReflect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CheckReflect" );
//
//	parms.HitLocation = HitLocation;
//	parms.AmmoDrain = AmmoDrain;
//	this->ProcessEvent ( pCheckReflect, &parms, NULL );
//
//	*RefNormal = parms.RefNormal;
//	return parms.ReturnValue;
//}
//
//void AwWeapon::PlayIdle (  )
//{
//	static UFunction* pPlayIdle = 0;
//	AwWeapon_execPlayIdle_Parms parms;
//
//	if ( !pPlayIdle )
//		pPlayIdle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.PlayIdle" );
//
//	this->ProcessEvent ( pPlayIdle, &parms, NULL );
//
//}
//
//void AwWeapon::AnimEnd ( int Channel )
//{
//	static UFunction* pAnimEnd = 0;
//	AwWeapon_execAnimEnd_Parms parms;
//
//	if ( !pAnimEnd )
//		pAnimEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.AnimEnd" );
//
//	parms.Channel = Channel;
//	this->ProcessEvent ( pAnimEnd, &parms, NULL );
//
//}
//
//void AwWeapon::CheckSuperBerserk (  )
//{
//	static UFunction* pCheckSuperBerserk = 0;
//	AwWeapon_execCheckSuperBerserk_Parms parms;
//
//	if ( !pCheckSuperBerserk )
//		pCheckSuperBerserk = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CheckSuperBerserk" );
//
//	this->ProcessEvent ( pCheckSuperBerserk, &parms, NULL );
//
//}
//
//void AwWeapon::AdjustPlayerDamage ( class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum )
//{
//	static UFunction* pAdjustPlayerDamage = 0;
//	AwWeapon_execAdjustPlayerDamage_Parms parms;
//
//	if ( !pAdjustPlayerDamage )
//		pAdjustPlayerDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.AdjustPlayerDamage" );
//
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.DamageType = DamageType;
//	this->ProcessEvent ( pAdjustPlayerDamage, &parms, NULL );
//
//	*Damage = parms.Damage;
//	*Momentum = parms.Momentum;
//}
//
//bool AwWeapon::IsRapidFire (  )
//{
//	static UFunction* pIsRapidFire = 0;
//	AwWeapon_execIsRapidFire_Parms parms;
//
//	if ( !pIsRapidFire )
//		pIsRapidFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.IsRapidFire" );
//
//	this->ProcessEvent ( pIsRapidFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::IsSingleFire (  )
//{
//	static UFunction* pIsSingleFire = 0;
//	AwWeapon_execIsSingleFire_Parms parms;
//
//	if ( !pIsSingleFire )
//		pIsSingleFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.IsSingleFire" );
//
//	this->ProcessEvent ( pIsSingleFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::IsFiring (  )
//{
//	static UFunction* pIsFiring = 0;
//	AwWeapon_execIsFiring_Parms parms;
//
//	if ( !pIsFiring )
//		pIsFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.IsFiring" );
//
//	this->ProcessEvent ( pIsFiring, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::Timer (  )
//{
//	static UFunction* pTimer = 0;
//	AwWeapon_execTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//void AwWeapon::ImmediateStopFire (  )
//{
//	static UFunction* pImmediateStopFire = 0;
//	AwWeapon_execImmediateStopFire_Parms parms;
//
//	if ( !pImmediateStopFire )
//		pImmediateStopFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ImmediateStopFire" );
//
//	this->ProcessEvent ( pImmediateStopFire, &parms, NULL );
//
//}
//
//void AwWeapon::StoreAmmo (  )
//{
//	static UFunction* pStoreAmmo = 0;
//	AwWeapon_execStoreAmmo_Parms parms;
//
//	if ( !pStoreAmmo )
//		pStoreAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.StoreAmmo" );
//
//	this->ProcessEvent ( pStoreAmmo, &parms, NULL );
//
//}
//
//void AwWeapon::CancelFire ( int Mode )
//{
//	static UFunction* pCancelFire = 0;
//	AwWeapon_execCancelFire_Parms parms;
//
//	if ( !pCancelFire )
//		pCancelFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CancelFire" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pCancelFire, &parms, NULL );
//
//}
//
//void AwWeapon::eventStopFire ( int Mode )
//{
//	static UFunction* pStopFire = 0;
//	AwWeapon_eventStopFire_Parms parms;
//
//	if ( !pStopFire )
//		pStopFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.StopFire" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pStopFire, &parms, NULL );
//
//}
//
//bool AwWeapon::StartFire ( int Mode )
//{
//	static UFunction* pStartFire = 0;
//	AwWeapon_execStartFire_Parms parms;
//
//	if ( !pStartFire )
//		pStartFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.StartFire" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pStartFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::eventReadyToFire ( int Mode )
//{
//	static UFunction* pReadyToFire = 0;
//	AwWeapon_eventReadyToFire_Parms parms;
//
//	if ( !pReadyToFire )
//		pReadyToFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ReadyToFire" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pReadyToFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::ServerCancelFire ( unsigned char Mode )
//{
//	static UFunction* pServerCancelFire = 0;
//	AwWeapon_execServerCancelFire_Parms parms;
//
//	if ( !pServerCancelFire )
//		pServerCancelFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ServerCancelFire" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pServerCancelFire, &parms, NULL );
//
//}
//
void AwWeapon::ServerStopFire ( unsigned char Mode )
{
	static UFunction* pServerStopFire = 0;
	AwWeapon_execServerStopFire_Parms parms;

	if ( !pServerStopFire )
		pServerStopFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ServerStopFire" );

	parms.Mode = Mode;
	this->ProcessEvent ( pServerStopFire, &parms, NULL );

}
//
//void AwWeapon::SynchronizeWeapon ( class AwWeapon* ClientWeapon )
//{
//	static UFunction* pSynchronizeWeapon = 0;
//	AwWeapon_execSynchronizeWeapon_Parms parms;
//
//	if ( !pSynchronizeWeapon )
//		pSynchronizeWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SynchronizeWeapon" );
//
//	parms.ClientWeapon = ClientWeapon;
//	this->ProcessEvent ( pSynchronizeWeapon, &parms, NULL );
//
//}
//
//void AwWeapon::ClientForceAmmoUpdate ( int Mode, int NewAmount )
//{
//	static UFunction* pClientForceAmmoUpdate = 0;
//	AwWeapon_execClientForceAmmoUpdate_Parms parms;
//
//	if ( !pClientForceAmmoUpdate )
//		pClientForceAmmoUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ClientForceAmmoUpdate" );
//
//	parms.Mode = Mode;
//	parms.NewAmount = NewAmount;
//	this->ProcessEvent ( pClientForceAmmoUpdate, &parms, NULL );
//
//}
//
//void AwWeapon::eventServerStartFire ( unsigned char Mode )
//{
//	static UFunction* pServerStartFire = 0;
//	AwWeapon_eventServerStartFire_Parms parms;
//
//	if ( !pServerStartFire )
//		pServerStartFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ServerStartFire" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pServerStartFire, &parms, NULL );
//
//}
//
//void AwWeapon::ClientCancelFire ( int Mode )
//{
//	static UFunction* pClientCancelFire = 0;
//	AwWeapon_execClientCancelFire_Parms parms;
//
//	if ( !pClientCancelFire )
//		pClientCancelFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ClientCancelFire" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pClientCancelFire, &parms, NULL );
//
//}
//
//void AwWeapon::eventClientStopFire ( int Mode )
//{
//	static UFunction* pClientStopFire = 0;
//	AwWeapon_eventClientStopFire_Parms parms;
//
//	if ( !pClientStopFire )
//		pClientStopFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ClientStopFire" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pClientStopFire, &parms, NULL );
//
//}
//
//void AwWeapon::eventNotifyReloaded (  )
//{
//	static UFunction* pNotifyReloaded = 0;
//	AwWeapon_eventNotifyReloaded_Parms parms;
//
//	if ( !pNotifyReloaded )
//		pNotifyReloaded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.NotifyReloaded" );
//
//	this->ProcessEvent ( pNotifyReloaded, &parms, NULL );
//
//}
//
//void AwWeapon::eventClientStartFire ( int Mode )
//{
//	static UFunction* pClientStartFire = 0;
//	AwWeapon_eventClientStartFire_Parms parms;
//
//	if ( !pClientStartFire )
//		pClientStartFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ClientStartFire" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pClientStartFire, &parms, NULL );
//
//}
//
//void AwWeapon::DoAutoSwitch (  )
//{
//	static UFunction* pDoAutoSwitch = 0;
//	AwWeapon_execDoAutoSwitch_Parms parms;
//
//	if ( !pDoAutoSwitch )
//		pDoAutoSwitch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.DoAutoSwitch" );
//
//	this->ProcessEvent ( pDoAutoSwitch, &parms, NULL );
//
//}
//
//void AwWeapon::OutOfAmmo (  )
//{
//	static UFunction* pOutOfAmmo = 0;
//	AwWeapon_execOutOfAmmo_Parms parms;
//
//	if ( !pOutOfAmmo )
//		pOutOfAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.OutOfAmmo" );
//
//	this->ProcessEvent ( pOutOfAmmo, &parms, NULL );
//
//}
//
//void AwWeapon::ProcessMoveAni (  )
//{
//	static UFunction* pProcessMoveAni = 0;
//	AwWeapon_execProcessMoveAni_Parms parms;
//
//	if ( !pProcessMoveAni )
//		pProcessMoveAni = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ProcessMoveAni" );
//
//	this->ProcessEvent ( pProcessMoveAni, &parms, NULL );
//
//}
//
//void AwWeapon::eventWeaponTick ( float dt )
//{
//	static UFunction* pWeaponTick = 0;
//	AwWeapon_eventWeaponTick_Parms parms;
//
//	if ( !pWeaponTick )
//		pWeaponTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.WeaponTick" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pWeaponTick, &parms, NULL );
//
//}
//
//void AwWeapon::AltFire ( float f )
//{
//	static UFunction* pAltFire = 0;
//	AwWeapon_execAltFire_Parms parms;
//
//	if ( !pAltFire )
//		pAltFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.AltFire" );
//
//	parms.f = f;
//	this->ProcessEvent ( pAltFire, &parms, NULL );
//
//}
//
//void AwWeapon::Fire ( float f )
//{
//	static UFunction* pFire = 0;
//	AwWeapon_execFire_Parms parms;
//
//	if ( !pFire )
//		pFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.Fire" );
//
//	parms.f = f;
//	this->ProcessEvent ( pFire, &parms, NULL );
//
//}
//
//bool AwWeapon::PutDown (  )
//{
//	static UFunction* pPutDown = 0;
//	AwWeapon_execPutDown_Parms parms;
//
//	if ( !pPutDown )
//		pPutDown = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.PutDown" );
//
//	this->ProcessEvent ( pPutDown, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::ServerPlayOwnedSound ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner )
//{
//	static UFunction* pServerPlayOwnedSound = 0;
//	AwWeapon_execServerPlayOwnedSound_Parms parms;
//
//	if ( !pServerPlayOwnedSound )
//		pServerPlayOwnedSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ServerPlayOwnedSound" );
//
//	parms.Sound = Sound;
//	parms.Slot = Slot;
//	parms.Volume = Volume;
//	parms.bNoOverride = bNoOverride;
//	parms.Radius = Radius;
//	parms.Pitch = Pitch;
//	parms.Attenuate = Attenuate;
//	parms.Loop = Loop;
//	parms.SellectTeam = SellectTeam;
//	parms.bExceptOwner = bExceptOwner;
//	this->ProcessEvent ( pServerPlayOwnedSound, &parms, NULL );
//
//}
//
//void AwWeapon::BringUp ( class AwWeapon* PrevWeapon )
//{
//	static UFunction* pBringUp = 0;
//	AwWeapon_execBringUp_Parms parms;
//
//	if ( !pBringUp )
//		pBringUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.BringUp" );
//
//	parms.PrevWeapon = PrevWeapon;
//	this->ProcessEvent ( pBringUp, &parms, NULL );
//
//}
//
//void AwWeapon::ClientWeaponSet ( bool bPossiblySwitch )
//{
//	static UFunction* pClientWeaponSet = 0;
//	AwWeapon_execClientWeaponSet_Parms parms;
//
//	if ( !pClientWeaponSet )
//		pClientWeaponSet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ClientWeaponSet" );
//
//	parms.bPossiblySwitch = bPossiblySwitch;
//	this->ProcessEvent ( pClientWeaponSet, &parms, NULL );
//
//}
//
//void AwWeapon::CheckPartsSet (  )
//{
//	static UFunction* pCheckPartsSet = 0;
//	AwWeapon_execCheckPartsSet_Parms parms;
//
//	if ( !pCheckPartsSet )
//		pCheckPartsSet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CheckPartsSet" );
//
//	this->ProcessEvent ( pCheckPartsSet, &parms, NULL );
//
//}
//
//void AwWeapon::GiveAmmo ( int M, class AWeaponPickup* WP, bool bJustSpawned )
//{
//	static UFunction* pGiveAmmo = 0;
//	AwWeapon_execGiveAmmo_Parms parms;
//
//	if ( !pGiveAmmo )
//		pGiveAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GiveAmmo" );
//
//	parms.M = M;
//	parms.WP = WP;
//	parms.bJustSpawned = bJustSpawned;
//	this->ProcessEvent ( pGiveAmmo, &parms, NULL );
//
//}
//
//void AwWeapon::GiveTo ( class APawn* Other, class APickup* Pickup )
//{
//	static UFunction* pGiveTo = 0;
//	AwWeapon_execGiveTo_Parms parms;
//
//	if ( !pGiveTo )
//		pGiveTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GiveTo" );
//
//	parms.Other = Other;
//	parms.Pickup = Pickup;
//	this->ProcessEvent ( pGiveTo, &parms, NULL );
//
//}
//
//void AwWeapon::ClientWeaponThrown (  )
//{
//	static UFunction* pClientWeaponThrown = 0;
//	AwWeapon_execClientWeaponThrown_Parms parms;
//
//	if ( !pClientWeaponThrown )
//		pClientWeaponThrown = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ClientWeaponThrown" );
//
//	this->ProcessEvent ( pClientWeaponThrown, &parms, NULL );
//
//}
//
//void AwWeapon::DetachFromPawn ( class APawn* P )
//{
//	static UFunction* pDetachFromPawn = 0;
//	AwWeapon_execDetachFromPawn_Parms parms;
//
//	if ( !pDetachFromPawn )
//		pDetachFromPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.DetachFromPawn" );
//
//	parms.P = P;
//	this->ProcessEvent ( pDetachFromPawn, &parms, NULL );
//
//}
//
//void AwWeapon::DropFrom ( struct FVector StartLocation, struct FRotator StartRotation )
//{
//	static UFunction* pDropFrom = 0;
//	AwWeapon_execDropFrom_Parms parms;
//
//	if ( !pDropFrom )
//		pDropFrom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.DropFrom" );
//
//	parms.StartLocation = StartLocation;
//	parms.StartRotation = StartRotation;
//	this->ProcessEvent ( pDropFrom, &parms, NULL );
//
//}
//
//void AwWeapon::RemoveWeapon (  )
//{
//	static UFunction* pRemoveWeapon = 0;
//	AwWeapon_execRemoveWeapon_Parms parms;
//
//	if ( !pRemoveWeapon )
//		pRemoveWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.RemoveWeapon" );
//
//	this->ProcessEvent ( pRemoveWeapon, &parms, NULL );
//
//}
//
//bool AwWeapon::CanThrow (  )
//{
//	static UFunction* pCanThrow = 0;
//	AwWeapon_execCanThrow_Parms parms;
//
//	if ( !pCanThrow )
//		pCanThrow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CanThrow" );
//
//	this->ProcessEvent ( pCanThrow, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::HolderDied (  )
//{
//	static UFunction* pHolderDied = 0;
//	AwWeapon_execHolderDied_Parms parms;
//
//	if ( !pHolderDied )
//		pHolderDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.HolderDied" );
//
//	this->ProcessEvent ( pHolderDied, &parms, NULL );
//
//}
//
//class AwWeapon* AwWeapon::NextWeapon ( class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon )
//{
//	static UFunction* pNextWeapon = 0;
//	AwWeapon_execNextWeapon_Parms parms;
//
//	if ( !pNextWeapon )
//		pNextWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.NextWeapon" );
//
//	parms.CurrentChoice = CurrentChoice;
//	parms.CurrentWeapon = CurrentWeapon;
//	this->ProcessEvent ( pNextWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* AwWeapon::PrevWeapon ( class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon )
//{
//	static UFunction* pPrevWeapon = 0;
//	AwWeapon_execPrevWeapon_Parms parms;
//
//	if ( !pPrevWeapon )
//		pPrevWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.PrevWeapon" );
//
//	parms.CurrentChoice = CurrentChoice;
//	parms.CurrentWeapon = CurrentWeapon;
//	this->ProcessEvent ( pPrevWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* AwWeapon::WeaponChangeWID ( int iWeaponID )
//{
//	static UFunction* pWeaponChangeWID = 0;
//	AwWeapon_execWeaponChangeWID_Parms parms;
//
//	if ( !pWeaponChangeWID )
//		pWeaponChangeWID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.WeaponChangeWID" );
//
//	parms.iWeaponID = iWeaponID;
//	this->ProcessEvent ( pWeaponChangeWID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* AwWeapon::WeaponChangeWClass ( struct FName wClass )
//{
//	static UFunction* pWeaponChangeWClass = 0;
//	AwWeapon_execWeaponChangeWClass_Parms parms;
//
//	if ( !pWeaponChangeWClass )
//		pWeaponChangeWClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.WeaponChangeWClass" );
//
//	parms.wClass = wClass;
//	this->ProcessEvent ( pWeaponChangeWClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* AwWeapon::WeaponChange ( unsigned char f, bool bSilent )
//{
//	static UFunction* pWeaponChange = 0;
//	AwWeapon_execWeaponChange_Parms parms;
//
//	if ( !pWeaponChange )
//		pWeaponChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.WeaponChange" );
//
//	parms.f = f;
//	parms.bSilent = bSilent;
//	this->ProcessEvent ( pWeaponChange, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::ZeroFlashCount ( int Mode )
//{
//	static UFunction* pZeroFlashCount = 0;
//	AwWeapon_execZeroFlashCount_Parms parms;
//
//	if ( !pZeroFlashCount )
//		pZeroFlashCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ZeroFlashCount" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pZeroFlashCount, &parms, NULL );
//
//}
//
//void AwWeapon::IncrementFlashCount ( int Mode )
//{
//	static UFunction* pIncrementFlashCount = 0;
//	AwWeapon_execIncrementFlashCount_Parms parms;
//
//	if ( !pIncrementFlashCount )
//		pIncrementFlashCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.IncrementFlashCount" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pIncrementFlashCount, &parms, NULL );
//
//}
//
//struct FVector AwWeapon::GetEffectStart (  )
//{
//	static UFunction* pGetEffectStart = 0;
//	AwWeapon_execGetEffectStart_Parms parms;
//
//	if ( !pGetEffectStart )
//		pGetEffectStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GetEffectStart" );
//
//	this->ProcessEvent ( pGetEffectStart, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FVector AwWeapon::CenteredEffectStart (  )
//{
//	static UFunction* pCenteredEffectStart = 0;
//	AwWeapon_execCenteredEffectStart_Parms parms;
//
//	if ( !pCenteredEffectStart )
//		pCenteredEffectStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CenteredEffectStart" );
//
//	this->ProcessEvent ( pCenteredEffectStart, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::GetViewAxes ( struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis )
//{
//	static UFunction* pGetViewAxes = 0;
//	AwWeapon_execGetViewAxes_Parms parms;
//
//	if ( !pGetViewAxes )
//		pGetViewAxes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GetViewAxes" );
//
//	parms.XAxis = *XAxis;
//	parms.YAxis = *YAxis;
//	parms.ZAxis = *ZAxis;
//	this->ProcessEvent ( pGetViewAxes, &parms, NULL );
//
//	*XAxis = parms.XAxis;
//	*YAxis = parms.YAxis;
//	*ZAxis = parms.ZAxis;
//}
//
//void AwWeapon::SetHand ( float InHand )
//{
//	static UFunction* pSetHand = 0;
//	AwWeapon_execSetHand_Parms parms;
//
//	if ( !pSetHand )
//		pSetHand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetHand" );
//
//	parms.InHand = InHand;
//	this->ProcessEvent ( pSetHand, &parms, NULL );
//
//}
//
//void AwWeapon::PreDrawFPWeapon (  )
//{
//	static UFunction* pPreDrawFPWeapon = 0;
//	AwWeapon_execPreDrawFPWeapon_Parms parms;
//
//	if ( !pPreDrawFPWeapon )
//		pPreDrawFPWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.PreDrawFPWeapon" );
//
//	this->ProcessEvent ( pPreDrawFPWeapon, &parms, NULL );
//
//}
//
//void AwWeapon::ApplyOffset (  )
//{
//	static UFunction* pApplyOffset = 0;
//	AwWeapon_execApplyOffset_Parms parms;
//
//	if ( !pApplyOffset )
//		pApplyOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ApplyOffset" );
//
//	this->ProcessEvent ( pApplyOffset, &parms, NULL );
//
//}
//
//void AwWeapon::ApplyOffset_Rot (  )
//{
//	static UFunction* pApplyOffset_Rot = 0;
//	AwWeapon_execApplyOffset_Rot_Parms parms;
//
//	if ( !pApplyOffset_Rot )
//		pApplyOffset_Rot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ApplyOffset_Rot" );
//
//	this->ProcessEvent ( pApplyOffset_Rot, &parms, NULL );
//
//}
//
//void AwWeapon::ApplyOffset_Trans (  )
//{
//	static UFunction* pApplyOffset_Trans = 0;
//	AwWeapon_execApplyOffset_Trans_Parms parms;
//
//	if ( !pApplyOffset_Trans )
//		pApplyOffset_Trans = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ApplyOffset_Trans" );
//
//	this->ProcessEvent ( pApplyOffset_Trans, &parms, NULL );
//
//}
//
//void AwWeapon::eventRenderOverlays ( class UCanvas* Canvas )
//{
//	static UFunction* pRenderOverlays = 0;
//	AwWeapon_eventRenderOverlays_Parms parms;
//
//	if ( !pRenderOverlays )
//		pRenderOverlays = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.RenderOverlays" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pRenderOverlays, &parms, NULL );
//
//}
//
//void AwWeapon::RenderScope ( class UCanvas* Canv )
//{
//	static UFunction* pRenderScope = 0;
//	AwWeapon_execRenderScope_Parms parms;
//
//	if ( !pRenderScope )
//		pRenderScope = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.RenderScope" );
//
//	parms.Canv = Canv;
//	this->ProcessEvent ( pRenderScope, &parms, NULL );
//
//}
//
//bool AwWeapon::WeaponCentered (  )
//{
//	static UFunction* pWeaponCentered = 0;
//	AwWeapon_execWeaponCentered_Parms parms;
//
//	if ( !pWeaponCentered )
//		pWeaponCentered = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.WeaponCentered" );
//
//	this->ProcessEvent ( pWeaponCentered, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::Reselect (  )
//{
//	static UFunction* pReselect = 0;
//	AwWeapon_execReselect_Parms parms;
//
//	if ( !pReselect )
//		pReselect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.Reselect" );
//
//	this->ProcessEvent ( pReselect, &parms, NULL );
//
//}
//
//void AwWeapon::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AwWeapon_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AwWeapon::SetGRI ( class AGameReplicationInfo* G )
//{
//	static UFunction* pSetGRI = 0;
//	AwWeapon_execSetGRI_Parms parms;
//
//	if ( !pSetGRI )
//		pSetGRI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetGRI" );
//
//	parms.G = G;
//	this->ProcessEvent ( pSetGRI, &parms, NULL );
//
//}
//
//bool AwWeapon::CanAttack ( class AActor* Other )
//{
//	static UFunction* pCanAttack = 0;
//	AwWeapon_execCanAttack_Parms parms;
//
//	if ( !pCanAttack )
//		pCanAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CanAttack" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pCanAttack, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::SplashJump (  )
//{
//	static UFunction* pSplashJump = 0;
//	AwWeapon_execSplashJump_Parms parms;
//
//	if ( !pSplashJump )
//		pSplashJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SplashJump" );
//
//	this->ProcessEvent ( pSplashJump, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AwWeapon::SuggestDefenseStyle (  )
//{
//	static UFunction* pSuggestDefenseStyle = 0;
//	AwWeapon_execSuggestDefenseStyle_Parms parms;
//
//	if ( !pSuggestDefenseStyle )
//		pSuggestDefenseStyle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SuggestDefenseStyle" );
//
//	this->ProcessEvent ( pSuggestDefenseStyle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AwWeapon::SuggestAttackStyle (  )
//{
//	static UFunction* pSuggestAttackStyle = 0;
//	AwWeapon_execSuggestAttackStyle_Parms parms;
//
//	if ( !pSuggestAttackStyle )
//		pSuggestAttackStyle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SuggestAttackStyle" );
//
//	this->ProcessEvent ( pSuggestAttackStyle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AwWeapon::GetAIRating (  )
//{
//	static UFunction* pGetAIRating = 0;
//	AwWeapon_execGetAIRating_Parms parms;
//
//	if ( !pGetAIRating )
//		pGetAIRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GetAIRating" );
//
//	this->ProcessEvent ( pGetAIRating, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AwWeapon::RateSelf (  )
//{
//	static UFunction* pRateSelf = 0;
//	AwWeapon_execRateSelf_Parms parms;
//
//	if ( !pRateSelf )
//		pRateSelf = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.RateSelf" );
//
//	this->ProcessEvent ( pRateSelf, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FVector AwWeapon::GetFireStart ( struct FVector X, struct FVector Y, struct FVector Z )
//{
//	static UFunction* pGetFireStart = 0;
//	AwWeapon_execGetFireStart_Parms parms;
//
//	if ( !pGetFireStart )
//		pGetFireStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GetFireStart" );
//
//	parms.X = X;
//	parms.Y = Y;
//	parms.Z = Z;
//	this->ProcessEvent ( pGetFireStart, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::BotFire ( bool bFinished, struct FName FiringMode )
//{
//	static UFunction* pBotFire = 0;
//	AwWeapon_execBotFire_Parms parms;
//
//	if ( !pBotFire )
//		pBotFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.BotFire" );
//
//	parms.bFinished = bFinished;
//	parms.FiringMode = FiringMode;
//	this->ProcessEvent ( pBotFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char AwWeapon::BestMode (  )
//{
//	static UFunction* pBestMode = 0;
//	AwWeapon_execBestMode_Parms parms;
//
//	if ( !pBestMode )
//		pBestMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.BestMode" );
//
//	this->ProcessEvent ( pBestMode, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::SetAITarget ( class AActor* t )
//{
//	static UFunction* pSetAITarget = 0;
//	AwWeapon_execSetAITarget_Parms parms;
//
//	if ( !pSetAITarget )
//		pSetAITarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SetAITarget" );
//
//	parms.t = t;
//	this->ProcessEvent ( pSetAITarget, &parms, NULL );
//
//}
//
//class AwWeapon* AwWeapon::RecommendWeapon ( float* rating )
//{
//	static UFunction* pRecommendWeapon = 0;
//	AwWeapon_execRecommendWeapon_Parms parms;
//
//	if ( !pRecommendWeapon )
//		pRecommendWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.RecommendWeapon" );
//
//	parms.rating = *rating;
//	this->ProcessEvent ( pRecommendWeapon, &parms, NULL );
//
//	*rating = parms.rating;
//	return parms.ReturnValue;
//}
//
//void AwWeapon::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	AwWeapon_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//void AwWeapon::Loaded (  )
//{
//	static UFunction* pLoaded = 0;
//	AwWeapon_execLoaded_Parms parms;
//
//	if ( !pLoaded )
//		pLoaded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.Loaded" );
//
//	this->ProcessEvent ( pLoaded, &parms, NULL );
//
//}
//
//bool AwWeapon::FireOnRelease (  )
//{
//	static UFunction* pFireOnRelease = 0;
//	AwWeapon_execFireOnRelease_Parms parms;
//
//	if ( !pFireOnRelease )
//		pFireOnRelease = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.FireOnRelease" );
//
//	this->ProcessEvent ( pFireOnRelease, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AwWeapon::RefireRate (  )
//{
//	static UFunction* pRefireRate = 0;
//	AwWeapon_execRefireRate_Parms parms;
//
//	if ( !pRefireRate )
//		pRefireRate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.RefireRate" );
//
//	this->ProcessEvent ( pRefireRate, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AwWeapon::GetDamageRadius (  )
//{
//	static UFunction* pGetDamageRadius = 0;
//	AwWeapon_execGetDamageRadius_Parms parms;
//
//	if ( !pGetDamageRadius )
//		pGetDamageRadius = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GetDamageRadius" );
//
//	this->ProcessEvent ( pGetDamageRadius, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::RecommendSplashDamage (  )
//{
//	static UFunction* pRecommendSplashDamage = 0;
//	AwWeapon_execRecommendSplashDamage_Parms parms;
//
//	if ( !pRecommendSplashDamage )
//		pRecommendSplashDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.RecommendSplashDamage" );
//
//	this->ProcessEvent ( pRecommendSplashDamage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::SplashDamage (  )
//{
//	static UFunction* pSplashDamage = 0;
//	AwWeapon_execSplashDamage_Parms parms;
//
//	if ( !pSplashDamage )
//		pSplashDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SplashDamage" );
//
//	this->ProcessEvent ( pSplashDamage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::FireHack ( unsigned char Mode )
//{
//	static UFunction* pFireHack = 0;
//	AwWeapon_execFireHack_Parms parms;
//
//	if ( !pFireHack )
//		pFireHack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.FireHack" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pFireHack, &parms, NULL );
//
//}
//
//bool AwWeapon::FocusOnLeader ( bool bLeaderFiring )
//{
//	static UFunction* pFocusOnLeader = 0;
//	AwWeapon_execFocusOnLeader_Parms parms;
//
//	if ( !pFocusOnLeader )
//		pFocusOnLeader = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.FocusOnLeader" );
//
//	parms.bLeaderFiring = bLeaderFiring;
//	this->ProcessEvent ( pFocusOnLeader, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::RecommendLongRangedAttack (  )
//{
//	static UFunction* pRecommendLongRangedAttack = 0;
//	AwWeapon_execRecommendLongRangedAttack_Parms parms;
//
//	if ( !pRecommendLongRangedAttack )
//		pRecommendLongRangedAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.RecommendLongRangedAttack" );
//
//	this->ProcessEvent ( pRecommendLongRangedAttack, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::RecommendRangedAttack (  )
//{
//	static UFunction* pRecommendRangedAttack = 0;
//	AwWeapon_execRecommendRangedAttack_Parms parms;
//
//	if ( !pRecommendRangedAttack )
//		pRecommendRangedAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.RecommendRangedAttack" );
//
//	this->ProcessEvent ( pRecommendRangedAttack, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AwWeapon::RangedAttackTime (  )
//{
//	static UFunction* pRangedAttackTime = 0;
//	AwWeapon_execRangedAttackTime_Parms parms;
//
//	if ( !pRangedAttackTime )
//		pRangedAttackTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.RangedAttackTime" );
//
//	this->ProcessEvent ( pRangedAttackTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::HackPlayFireSound (  )
//{
//	static UFunction* pHackPlayFireSound = 0;
//	AwWeapon_execHackPlayFireSound_Parms parms;
//
//	if ( !pHackPlayFireSound )
//		pHackPlayFireSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.HackPlayFireSound" );
//
//	this->ProcessEvent ( pHackPlayFireSound, &parms, NULL );
//
//}
//
//class UClass* AwWeapon::GetDamageType (  )
//{
//	static UFunction* pGetDamageType = 0;
//	AwWeapon_execGetDamageType_Parms parms;
//
//	if ( !pGetDamageType )
//		pGetDamageType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GetDamageType" );
//
//	this->ProcessEvent ( pGetDamageType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::ClientWriteStats ( unsigned char Mode, bool bMatch, bool bAllowFire, bool bDelay, bool bAlt, float wait )
//{
//	static UFunction* pClientWriteStats = 0;
//	AwWeapon_execClientWriteStats_Parms parms;
//
//	if ( !pClientWriteStats )
//		pClientWriteStats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ClientWriteStats" );
//
//	parms.Mode = Mode;
//	parms.bMatch = bMatch;
//	parms.bAllowFire = bAllowFire;
//	parms.bDelay = bDelay;
//	parms.bAlt = bAlt;
//	parms.wait = wait;
//	this->ProcessEvent ( pClientWriteStats, &parms, NULL );
//
//}
//
//void AwWeapon::StartDebugging (  )
//{
//	static UFunction* pStartDebugging = 0;
//	AwWeapon_execStartDebugging_Parms parms;
//
//	if ( !pStartDebugging )
//		pStartDebugging = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.StartDebugging" );
//
//	this->ProcessEvent ( pStartDebugging, &parms, NULL );
//
//}
//
//void AwWeapon::NewDrawWeaponInfo ( class UCanvas* C, float YPos )
//{
//	static UFunction* pNewDrawWeaponInfo = 0;
//	AwWeapon_execNewDrawWeaponInfo_Parms parms;
//
//	if ( !pNewDrawWeaponInfo )
//		pNewDrawWeaponInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.NewDrawWeaponInfo" );
//
//	parms.C = C;
//	parms.YPos = YPos;
//	this->ProcessEvent ( pNewDrawWeaponInfo, &parms, NULL );
//
//}
//
//void AwWeapon::DrawWeaponInfo ( class UCanvas* C )
//{
//	static UFunction* pDrawWeaponInfo = 0;
//	AwWeapon_execDrawWeaponInfo_Parms parms;
//
//	if ( !pDrawWeaponInfo )
//		pDrawWeaponInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.DrawWeaponInfo" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawWeaponInfo, &parms, NULL );
//
//}
//
//void AwWeapon::PostNetReceive (  )
//{
//	static UFunction* pPostNetReceive = 0;
//	AwWeapon_execPostNetReceive_Parms parms;
//
//	if ( !pPostNetReceive )
//		pPostNetReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.PostNetReceive" );
//
//	this->ProcessEvent ( pPostNetReceive, &parms, NULL );
//
//}
//
//bool AwWeapon::CheckOutOfAmmo (  )
//{
//	static UFunction* pCheckOutOfAmmo = 0;
//	AwWeapon_execCheckOutOfAmmo_Parms parms;
//
//	if ( !pCheckOutOfAmmo )
//		pCheckOutOfAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.CheckOutOfAmmo" );
//
//	this->ProcessEvent ( pCheckOutOfAmmo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AwWeapon::DesireAmmo ( class UClass* NewAmmoClass, bool bDetour )
//{
//	static UFunction* pDesireAmmo = 0;
//	AwWeapon_execDesireAmmo_Parms parms;
//
//	if ( !pDesireAmmo )
//		pDesireAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.DesireAmmo" );
//
//	parms.NewAmmoClass = NewAmmoClass;
//	parms.bDetour = bDetour;
//	this->ProcessEvent ( pDesireAmmo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::NeedAmmo ( int Mode )
//{
//	static UFunction* pNeedAmmo = 0;
//	AwWeapon_execNeedAmmo_Parms parms;
//
//	if ( !pNeedAmmo )
//		pNeedAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.NeedAmmo" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pNeedAmmo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::HasAmmo (  )
//{
//	static UFunction* pHasAmmo = 0;
//	AwWeapon_execHasAmmo_Parms parms;
//
//	if ( !pHasAmmo )
//		pHasAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.HasAmmo" );
//
//	this->ProcessEvent ( pHasAmmo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::AddAmmo ( int AmmoToAdd, int Mode )
//{
//	static UFunction* pAddAmmo = 0;
//	AwWeapon_execAddAmmo_Parms parms;
//
//	if ( !pAddAmmo )
//		pAddAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.AddAmmo" );
//
//	parms.AmmoToAdd = AmmoToAdd;
//	parms.Mode = Mode;
//	this->ProcessEvent ( pAddAmmo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwWeapon::SeverConsumeAmmo ( int Mode, float Load, bool bAmountNeededIsMax )
//{
//	static UFunction* pSeverConsumeAmmo = 0;
//	AwWeapon_execSeverConsumeAmmo_Parms parms;
//
//	if ( !pSeverConsumeAmmo )
//		pSeverConsumeAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SeverConsumeAmmo" );
//
//	parms.Mode = Mode;
//	parms.Load = Load;
//	parms.bAmountNeededIsMax = bAmountNeededIsMax;
//	this->ProcessEvent ( pSeverConsumeAmmo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AwWeapon::AmmoStatus ( int Mode )
//{
//	static UFunction* pAmmoStatus = 0;
//	AwWeapon_execAmmoStatus_Parms parms;
//
//	if ( !pAmmoStatus )
//		pAmmoStatus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.AmmoStatus" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pAmmoStatus, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::eventGetAmmoCount ( float* MaxAmmoPrimary, float* CurAmmoPrimary )
//{
//	static UFunction* pGetAmmoCount = 0;
//	AwWeapon_eventGetAmmoCount_Parms parms;
//
//	if ( !pGetAmmoCount )
//		pGetAmmoCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GetAmmoCount" );
//
//	parms.MaxAmmoPrimary = *MaxAmmoPrimary;
//	parms.CurAmmoPrimary = *CurAmmoPrimary;
//	this->ProcessEvent ( pGetAmmoCount, &parms, NULL );
//
//	*MaxAmmoPrimary = parms.MaxAmmoPrimary;
//	*CurAmmoPrimary = parms.CurAmmoPrimary;
//}
//
//bool AwWeapon::AmmoMaxed ( int Mode )
//{
//	static UFunction* pAmmoMaxed = 0;
//	AwWeapon_execAmmoMaxed_Parms parms;
//
//	if ( !pAmmoMaxed )
//		pAmmoMaxed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.AmmoMaxed" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pAmmoMaxed, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UClass* AwWeapon::AmmoPickupClass ( int Mode )
//{
//	static UFunction* pAmmoPickupClass = 0;
//	AwWeapon_execAmmoPickupClass_Parms parms;
//
//	if ( !pAmmoPickupClass )
//		pAmmoPickupClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.AmmoPickupClass" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pAmmoPickupClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AwWeapon::AmmoAmount ( int Mode )
//{
//	static UFunction* pAmmoAmount = 0;
//	AwWeapon_execAmmoAmount_Parms parms;
//
//	if ( !pAmmoAmount )
//		pAmmoAmount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.AmmoAmount" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pAmmoAmount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::FillToDefaultAmmo (  )
//{
//	static UFunction* pFillToDefaultAmmo = 0;
//	AwWeapon_execFillToDefaultAmmo_Parms parms;
//
//	if ( !pFillToDefaultAmmo )
//		pFillToDefaultAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.FillToDefaultAmmo" );
//
//	this->ProcessEvent ( pFillToDefaultAmmo, &parms, NULL );
//
//}
//
//void AwWeapon::FillToInitialAmmo (  )
//{
//	static UFunction* pFillToInitialAmmo = 0;
//	AwWeapon_execFillToInitialAmmo_Parms parms;
//
//	if ( !pFillToInitialAmmo )
//		pFillToInitialAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.FillToInitialAmmo" );
//
//	this->ProcessEvent ( pFillToInitialAmmo, &parms, NULL );
//
//}
//
//int AwWeapon::MaxAmmo ( int Mode )
//{
//	static UFunction* pMaxAmmo = 0;
//	AwWeapon_execMaxAmmo_Parms parms;
//
//	if ( !pMaxAmmo )
//		pMaxAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.MaxAmmo" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pMaxAmmo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::SuperMaxOutAmmo (  )
//{
//	static UFunction* pSuperMaxOutAmmo = 0;
//	AwWeapon_execSuperMaxOutAmmo_Parms parms;
//
//	if ( !pSuperMaxOutAmmo )
//		pSuperMaxOutAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.SuperMaxOutAmmo" );
//
//	this->ProcessEvent ( pSuperMaxOutAmmo, &parms, NULL );
//
//}
//
//void AwWeapon::MaxOutAmmo (  )
//{
//	static UFunction* pMaxOutAmmo = 0;
//	AwWeapon_execMaxOutAmmo_Parms parms;
//
//	if ( !pMaxOutAmmo )
//		pMaxOutAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.MaxOutAmmo" );
//
//	this->ProcessEvent ( pMaxOutAmmo, &parms, NULL );
//
//}
//
//class UClass* AwWeapon::GetAmmoClass ( int Mode )
//{
//	static UFunction* pGetAmmoClass = 0;
//	AwWeapon_execGetAmmoClass_Parms parms;
//
//	if ( !pGetAmmoClass )
//		pGetAmmoClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.GetAmmoClass" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pGetAmmoClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AwWeapon::ChargeBar (  )
//{
//	static UFunction* pChargeBar = 0;
//	AwWeapon_execChargeBar_Parms parms;
//
//	if ( !pChargeBar )
//		pChargeBar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.ChargeBar" );
//
//	this->ProcessEvent ( pChargeBar, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeapon::InitWeaponFires (  )
//{
//	static UFunction* pInitWeaponFires = 0;
//	AwWeapon_execInitWeaponFires_Parms parms;
//
//	if ( !pInitWeaponFires )
//		pInitWeaponFires = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeapon.InitWeaponFires" );
//
//	this->ProcessEvent ( pInitWeaponFires, &parms, NULL );
//
//}
//
//void AKVehicle::eventTick ( float DeltaSeconds )
//{
//	static UFunction* pTick = 0;
//	AKVehicle_eventTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KVehicle.Tick" );
//
//	parms.DeltaSeconds = DeltaSeconds;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void AKVehicle::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AKVehicle_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KVehicle.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//bool AKVehicle::SpecialCalcView ( class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation )
//{
//	static UFunction* pSpecialCalcView = 0;
//	AKVehicle_execSpecialCalcView_Parms parms;
//
//	if ( !pSpecialCalcView )
//		pSpecialCalcView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KVehicle.SpecialCalcView" );
//
//	parms.ViewActor = *ViewActor;
//	parms.CameraLocation = *CameraLocation;
//	parms.CameraRotation = *CameraRotation;
//	this->ProcessEvent ( pSpecialCalcView, &parms, NULL );
//
//	*ViewActor = parms.ViewActor;
//	*CameraLocation = parms.CameraLocation;
//	*CameraRotation = parms.CameraRotation;
//	return parms.ReturnValue;
//}
//
//bool AKVehicle::KDriverLeave ( bool bForceLeave )
//{
//	static UFunction* pKDriverLeave = 0;
//	AKVehicle_execKDriverLeave_Parms parms;
//
//	if ( !pKDriverLeave )
//		pKDriverLeave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KVehicle.KDriverLeave" );
//
//	parms.bForceLeave = bForceLeave;
//	this->ProcessEvent ( pKDriverLeave, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AKVehicle::ClientKDriverLeave ( class APlayerController* PC )
//{
//	static UFunction* pClientKDriverLeave = 0;
//	AKVehicle_execClientKDriverLeave_Parms parms;
//
//	if ( !pClientKDriverLeave )
//		pClientKDriverLeave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KVehicle.ClientKDriverLeave" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pClientKDriverLeave, &parms, NULL );
//
//}
//
//void AKVehicle::KDriverEnter ( class APawn* P )
//{
//	static UFunction* pKDriverEnter = 0;
//	AKVehicle_execKDriverEnter_Parms parms;
//
//	if ( !pKDriverEnter )
//		pKDriverEnter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KVehicle.KDriverEnter" );
//
//	parms.P = P;
//	this->ProcessEvent ( pKDriverEnter, &parms, NULL );
//
//}
//
//void AKVehicle::ClientKDriverEnter ( class APlayerController* PC )
//{
//	static UFunction* pClientKDriverEnter = 0;
//	AKVehicle_execClientKDriverEnter_Parms parms;
//
//	if ( !pClientKDriverEnter )
//		pClientKDriverEnter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KVehicle.ClientKDriverEnter" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pClientKDriverEnter, &parms, NULL );
//
//}
//
//bool AKVehicle::TryToDrive ( class APawn* P )
//{
//	static UFunction* pTryToDrive = 0;
//	AKVehicle_execTryToDrive_Parms parms;
//
//	if ( !pTryToDrive )
//		pTryToDrive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KVehicle.TryToDrive" );
//
//	parms.P = P;
//	this->ProcessEvent ( pTryToDrive, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AKVehicle::eventKVehicleUpdateParams (  )
//{
//	static UFunction* pKVehicleUpdateParams = 0;
//	AKVehicle_eventKVehicleUpdateParams_Parms parms;
//
//	if ( !pKVehicleUpdateParams )
//		pKVehicleUpdateParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KVehicle.KVehicleUpdateParams" );
//
//	this->ProcessEvent ( pKVehicleUpdateParams, &parms, NULL );
//
//}
//
//void AKVehicle::eventVehicleStateReceived (  )
//{
//	static UFunction* pVehicleStateReceived = 0;
//	AKVehicle_eventVehicleStateReceived_Parms parms;
//
//	if ( !pVehicleStateReceived )
//		pVehicleStateReceived = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KVehicle.VehicleStateReceived" );
//
//	this->ProcessEvent ( pVehicleStateReceived, &parms, NULL );
//
//}
//
//void AKVehicle::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pTakeDamage = 0;
//	AKVehicle_execTakeDamage_Parms parms;
//
//	if ( !pTakeDamage )
//		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KVehicle.TakeDamage" );
//
//	parms.Damage = Damage;
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.Momentum = Momentum;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pTakeDamage, &parms, NULL );
//
//}
//
//void AKVehicle::GraphData ( struct FString DataName, float DataValue )
//{
//	static UFunction* pGraphData = 0;
//	AKVehicle_execGraphData_Parms parms;
//
//	if ( !pGraphData )
//		pGraphData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KVehicle.GraphData" );
//
//	parms.DataName = DataName;
//	parms.DataValue = DataValue;
//	this->ProcessEvent ( pGraphData, &parms, NULL );
//
//}
//
//void AKActor::eventKImpact ( class AActor* Other, struct FVector pos, struct FVector impactVel, struct FVector impactNorm )
//{
//	static UFunction* pKImpact = 0;
//	AKActor_eventKImpact_Parms parms;
//
//	if ( !pKImpact )
//		pKImpact = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KActor.KImpact" );
//
//	parms.Other = Other;
//	parms.pos = pos;
//	parms.impactVel = impactVel;
//	parms.impactNorm = impactNorm;
//	this->ProcessEvent ( pKImpact, &parms, NULL );
//
//}
//
//void AKActor::Trigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	AKActor_execTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KActor.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//void AKActor::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pTakeDamage = 0;
//	AKActor_execTakeDamage_Parms parms;
//
//	if ( !pTakeDamage )
//		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KActor.TakeDamage" );
//
//	parms.Damage = Damage;
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.Momentum = Momentum;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pTakeDamage, &parms, NULL );
//
//}
//
//void AKTire::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pTakeDamage = 0;
//	AKTire_execTakeDamage_Parms parms;
//
//	if ( !pTakeDamage )
//		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KTire.TakeDamage" );
//
//	parms.Damage = Damage;
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.Momentum = Momentum;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pTakeDamage, &parms, NULL );
//
//}
//
//bool AKTire::eventKUpdateState ( struct FKRigidBodyState* NewState )
//{
//	static UFunction* pKUpdateState = 0;
//	AKTire_eventKUpdateState_Parms parms;
//
//	if ( !pKUpdateState )
//		pKUpdateState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KTire.KUpdateState" );
//
//	parms.NewState = *NewState;
//	this->ProcessEvent ( pKUpdateState, &parms, NULL );
//
//	*NewState = parms.NewState;
//	return parms.ReturnValue;
//}
//
//void UKarmaParamsCollision::CalcContactRegion (  )
//{
//	static UFunction* pCalcContactRegion = 0;
//	UKarmaParamsCollision_execCalcContactRegion_Parms parms;
//
//	if ( !pCalcContactRegion )
//		pCalcContactRegion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KarmaParamsCollision.CalcContactRegion" );
//
//	this->ProcessEvent ( pCalcContactRegion, &parms, NULL );
//
//}
//
//void AKConstraint::eventKForceExceed ( float forceMag )
//{
//	static UFunction* pKForceExceed = 0;
//	AKConstraint_eventKForceExceed_Parms parms;
//
//	if ( !pKForceExceed )
//		pKForceExceed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KConstraint.KForceExceed" );
//
//	parms.forceMag = forceMag;
//	this->ProcessEvent ( pKForceExceed, &parms, NULL );
//
//}
//
//void AKConstraint::KGetConstraintTorque ( struct FVector* Torque )
//{
//	static UFunction* pKGetConstraintTorque = 0;
//	AKConstraint_execKGetConstraintTorque_Parms parms;
//
//	if ( !pKGetConstraintTorque )
//		pKGetConstraintTorque = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KConstraint.KGetConstraintTorque" );
//
//	parms.Torque = *Torque;
//	this->ProcessEvent ( pKGetConstraintTorque, &parms, NULL );
//
//	*Torque = parms.Torque;
//}
//
//void AKConstraint::KGetConstraintForce ( struct FVector* Force )
//{
//	static UFunction* pKGetConstraintForce = 0;
//	AKConstraint_execKGetConstraintForce_Parms parms;
//
//	if ( !pKGetConstraintForce )
//		pKGetConstraintForce = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KConstraint.KGetConstraintForce" );
//
//	parms.Force = *Force;
//	this->ProcessEvent ( pKGetConstraintForce, &parms, NULL );
//
//	*Force = parms.Force;
//}
//
//void AKConstraint::KUpdateConstraintParams (  )
//{
//	static UFunction* pKUpdateConstraintParams = 0;
//	AKConstraint_execKUpdateConstraintParams_Parms parms;
//
//	if ( !pKUpdateConstraintParams )
//		pKUpdateConstraintParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.KConstraint.KUpdateConstraintParams" );
//
//	this->ProcessEvent ( pKUpdateConstraintParams, &parms, NULL );
//
//}
//
//void AwProcMesh::Touch ( class AActor* Other )
//{
//	static UFunction* pTouch = 0;
//	AwProcMesh_execTouch_Parms parms;
//
//	if ( !pTouch )
//		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProcMesh.Touch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTouch, &parms, NULL );
//
//}
//
//void AwProcMesh::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
//{
//	static UFunction* pTakeDamage = 0;
//	AwProcMesh_execTakeDamage_Parms parms;
//
//	if ( !pTakeDamage )
//		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProcMesh.TakeDamage" );
//
//	parms.Damage = Damage;
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.Momentum = Momentum;
//	parms.DamageType = DamageType;
//	parms.CollisionPart = CollisionPart;
//	parms.WeaponType = WeaponType;
//	parms.bWallShot = bWallShot;
//	this->ProcessEvent ( pTakeDamage, &parms, NULL );
//
//}
//
//void AwProcMesh::ProcPling ( struct FVector Position, float Strength, float Radius, struct FVector* EffectLocation, struct FVector* EffectNormal )
//{
//	static UFunction* pProcPling = 0;
//	AwProcMesh_execProcPling_Parms parms;
//
//	if ( !pProcPling )
//		pProcPling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProcMesh.ProcPling" );
//
//	parms.Position = Position;
//	parms.Strength = Strength;
//	parms.Radius = Radius;
//	this->ProcessEvent ( pProcPling, &parms, NULL );
//
//	*EffectLocation = parms.EffectLocation;
//	*EffectNormal = parms.EffectNormal;
//}
//
//void AwPickUpBase::SpawnPickup (  )
//{
//	static UFunction* pSpawnPickup = 0;
//	AwPickUpBase_execSpawnPickup_Parms parms;
//
//	if ( !pSpawnPickup )
//		pSpawnPickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wPickUpBase.SpawnPickup" );
//
//	this->ProcessEvent ( pSpawnPickup, &parms, NULL );
//
//}
//
//void AwPickUpBase::TurnOn (  )
//{
//	static UFunction* pTurnOn = 0;
//	AwPickUpBase_execTurnOn_Parms parms;
//
//	if ( !pTurnOn )
//		pTurnOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wPickUpBase.TurnOn" );
//
//	this->ProcessEvent ( pTurnOn, &parms, NULL );
//
//}
//
//unsigned char AwPickUpBase::GetInventoryGroup (  )
//{
//	static UFunction* pGetInventoryGroup = 0;
//	AwPickUpBase_execGetInventoryGroup_Parms parms;
//
//	if ( !pGetInventoryGroup )
//		pGetInventoryGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wPickUpBase.GetInventoryGroup" );
//
//	this->ProcessEvent ( pGetInventoryGroup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwPickUpBase::CheckForErrors (  )
//{
//	static UFunction* pCheckForErrors = 0;
//	AwPickUpBase_execCheckForErrors_Parms parms;
//
//	if ( !pCheckForErrors )
//		pCheckForErrors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wPickUpBase.CheckForErrors" );
//
//	this->ProcessEvent ( pCheckForErrors, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwPickUpBase::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AwPickUpBase_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wPickUpBase.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//class APlayerController* AwGameStateStorageSender::GetPlayerController (  )
//{
//	static UFunction* pGetPlayerController = 0;
//	AwGameStateStorageSender_execGetPlayerController_Parms parms;
//
//	if ( !pGetPlayerController )
//		pGetPlayerController = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.GetPlayerController" );
//
//	this->ProcessEvent ( pGetPlayerController, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwGameStateStorageSender::ClientInitialize ( int id, class APlayerController* PC )
//{
//	static UFunction* pClientInitialize = 0;
//	AwGameStateStorageSender_execClientInitialize_Parms parms;
//
//	if ( !pClientInitialize )
//		pClientInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientInitialize" );
//
//	parms.id = id;
//	parms.PC = PC;
//	this->ProcessEvent ( pClientInitialize, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::Initialize ( int id, class APlayerController* PC )
//{
//	static UFunction* pInitialize = 0;
//	AwGameStateStorageSender_execInitialize_Parms parms;
//
//	if ( !pInitialize )
//		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.Initialize" );
//
//	parms.id = id;
//	parms.PC = PC;
//	this->ProcessEvent ( pInitialize, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::eventDestroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AwGameStateStorageSender_eventDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::eventPreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AwGameStateStorageSender_eventPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetGameState_OnlyClient (  )
//{
//	static UFunction* pSetGameState_OnlyClient = 0;
//	AwGameStateStorageSender_execSetGameState_OnlyClient_Parms parms;
//
//	if ( !pSetGameState_OnlyClient )
//		pSetGameState_OnlyClient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetGameState_OnlyClient" );
//
//	this->ProcessEvent ( pSetGameState_OnlyClient, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetScoreState_OnlyClient (  )
//{
//	static UFunction* pSetScoreState_OnlyClient = 0;
//	AwGameStateStorageSender_execSetScoreState_OnlyClient_Parms parms;
//
//	if ( !pSetScoreState_OnlyClient )
//		pSetScoreState_OnlyClient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetScoreState_OnlyClient" );
//
//	this->ProcessEvent ( pSetScoreState_OnlyClient, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::eventTick ( float DeltaTime )
//{
//	static UFunction* pTick = 0;
//	AwGameStateStorageSender_eventTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.Tick" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientTick ( float DeltaTime )
//{
//	static UFunction* pClientTick = 0;
//	AwGameStateStorageSender_execClientTick_Parms parms;
//
//	if ( !pClientTick )
//		pClientTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientTick" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pClientTick, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetAllDataToInterventionUser ( class AwGameStateStorageSender* ToGSSS )
//{
//	static UFunction* pSetAllDataToInterventionUser = 0;
//	AwGameStateStorageSender_execSetAllDataToInterventionUser_Parms parms;
//
//	if ( !pSetAllDataToInterventionUser )
//		pSetAllDataToInterventionUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetAllDataToInterventionUser" );
//
//	parms.ToGSSS = ToGSSS;
//	this->ProcessEvent ( pSetAllDataToInterventionUser, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage_AllUserData (  )
//{
//	static UFunction* pSetToStorage_AllUserData = 0;
//	AwGameStateStorageSender_execSetToStorage_AllUserData_Parms parms;
//
//	if ( !pSetToStorage_AllUserData )
//		pSetToStorage_AllUserData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage_AllUserData" );
//
//	this->ProcessEvent ( pSetToStorage_AllUserData, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientDeleteFromStorage_Weapon ( int UserID, struct FString strWeaponName )
//{
//	static UFunction* pClientDeleteFromStorage_Weapon = 0;
//	AwGameStateStorageSender_execClientDeleteFromStorage_Weapon_Parms parms;
//
//	if ( !pClientDeleteFromStorage_Weapon )
//		pClientDeleteFromStorage_Weapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientDeleteFromStorage_Weapon" );
//
//	parms.UserID = UserID;
//	parms.strWeaponName = strWeaponName;
//	this->ProcessEvent ( pClientDeleteFromStorage_Weapon, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::DeleteFromStorage_Weapon ( struct FString strWeaponName )
//{
//	static UFunction* pDeleteFromStorage_Weapon = 0;
//	AwGameStateStorageSender_execDeleteFromStorage_Weapon_Parms parms;
//
//	if ( !pDeleteFromStorage_Weapon )
//		pDeleteFromStorage_Weapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.DeleteFromStorage_Weapon" );
//
//	parms.strWeaponName = strWeaponName;
//	this->ProcessEvent ( pDeleteFromStorage_Weapon, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientClearStorage ( struct FString sUserID )
//{
//	static UFunction* pClientClearStorage = 0;
//	AwGameStateStorageSender_execClientClearStorage_Parms parms;
//
//	if ( !pClientClearStorage )
//		pClientClearStorage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientClearStorage" );
//
//	parms.sUserID = sUserID;
//	this->ProcessEvent ( pClientClearStorage, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClearStorage (  )
//{
//	static UFunction* pClearStorage = 0;
//	AwGameStateStorageSender_execClearStorage_Parms parms;
//
//	if ( !pClearStorage )
//		pClearStorage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClearStorage" );
//
//	this->ProcessEvent ( pClearStorage, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientDeleteFromStorage ( struct FString sUserID, struct FString Section, struct FString sName )
//{
//	static UFunction* pClientDeleteFromStorage = 0;
//	AwGameStateStorageSender_execClientDeleteFromStorage_Parms parms;
//
//	if ( !pClientDeleteFromStorage )
//		pClientDeleteFromStorage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientDeleteFromStorage" );
//
//	parms.sUserID = sUserID;
//	parms.Section = Section;
//	parms.sName = sName;
//	this->ProcessEvent ( pClientDeleteFromStorage, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::DeleteFromStorage ( struct FString Section, struct FString sName )
//{
//	static UFunction* pDeleteFromStorage = 0;
//	AwGameStateStorageSender_execDeleteFromStorage_Parms parms;
//
//	if ( !pDeleteFromStorage )
//		pDeleteFromStorage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.DeleteFromStorage" );
//
//	parms.Section = Section;
//	parms.sName = sName;
//	this->ProcessEvent ( pDeleteFromStorage, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientSetToStorage3 ( struct FString sUserID, struct FString Section, struct FString sName, struct FString Type, struct FString Value, struct FString Section2, struct FString sName2, struct FString type2, struct FString value2, struct FString Section3, struct FString sName3, struct FString type3, struct FString value3 )
//{
//	static UFunction* pClientSetToStorage3 = 0;
//	AwGameStateStorageSender_execClientSetToStorage3_Parms parms;
//
//	if ( !pClientSetToStorage3 )
//		pClientSetToStorage3 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientSetToStorage3" );
//
//	parms.sUserID = sUserID;
//	parms.Section = Section;
//	parms.sName = sName;
//	parms.Type = Type;
//	parms.Value = Value;
//	parms.Section2 = Section2;
//	parms.sName2 = sName2;
//	parms.type2 = type2;
//	parms.value2 = value2;
//	parms.Section3 = Section3;
//	parms.sName3 = sName3;
//	parms.type3 = type3;
//	parms.value3 = value3;
//	this->ProcessEvent ( pClientSetToStorage3, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage3 ( struct FString Section, struct FString sName, struct FString Type, struct FString Value, struct FString Section2, struct FString sName2, struct FString type2, struct FString value2, struct FString Section3, struct FString sName3, struct FString type3, struct FString value3 )
//{
//	static UFunction* pSetToStorage3 = 0;
//	AwGameStateStorageSender_execSetToStorage3_Parms parms;
//
//	if ( !pSetToStorage3 )
//		pSetToStorage3 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage3" );
//
//	parms.Section = Section;
//	parms.sName = sName;
//	parms.Type = Type;
//	parms.Value = Value;
//	parms.Section2 = Section2;
//	parms.sName2 = sName2;
//	parms.type2 = type2;
//	parms.value2 = value2;
//	parms.Section3 = Section3;
//	parms.sName3 = sName3;
//	parms.type3 = type3;
//	parms.value3 = value3;
//	this->ProcessEvent ( pSetToStorage3, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientSetToStorage_Vehicle_Leave ( int UserID )
//{
//	static UFunction* pClientSetToStorage_Vehicle_Leave = 0;
//	AwGameStateStorageSender_execClientSetToStorage_Vehicle_Leave_Parms parms;
//
//	if ( !pClientSetToStorage_Vehicle_Leave )
//		pClientSetToStorage_Vehicle_Leave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientSetToStorage_Vehicle_Leave" );
//
//	parms.UserID = UserID;
//	this->ProcessEvent ( pClientSetToStorage_Vehicle_Leave, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientSetToStorage_Vehicle_Enter ( int UserID, struct FString strClassName, float Pos_X, float Pos_Y, float Pos_Z )
//{
//	static UFunction* pClientSetToStorage_Vehicle_Enter = 0;
//	AwGameStateStorageSender_execClientSetToStorage_Vehicle_Enter_Parms parms;
//
//	if ( !pClientSetToStorage_Vehicle_Enter )
//		pClientSetToStorage_Vehicle_Enter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientSetToStorage_Vehicle_Enter" );
//
//	parms.UserID = UserID;
//	parms.strClassName = strClassName;
//	parms.Pos_X = Pos_X;
//	parms.Pos_Y = Pos_Y;
//	parms.Pos_Z = Pos_Z;
//	this->ProcessEvent ( pClientSetToStorage_Vehicle_Enter, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientSetToStorage_Skill_UpdateCall ( int UserID, int nSkillID, bool bUpdateCall )
//{
//	static UFunction* pClientSetToStorage_Skill_UpdateCall = 0;
//	AwGameStateStorageSender_execClientSetToStorage_Skill_UpdateCall_Parms parms;
//
//	if ( !pClientSetToStorage_Skill_UpdateCall )
//		pClientSetToStorage_Skill_UpdateCall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientSetToStorage_Skill_UpdateCall" );
//
//	parms.UserID = UserID;
//	parms.nSkillID = nSkillID;
//	parms.bUpdateCall = bUpdateCall;
//	this->ProcessEvent ( pClientSetToStorage_Skill_UpdateCall, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientSetToStorage_Skill_AddCount ( int UserID, int nSkillID, unsigned char byAddCount )
//{
//	static UFunction* pClientSetToStorage_Skill_AddCount = 0;
//	AwGameStateStorageSender_execClientSetToStorage_Skill_AddCount_Parms parms;
//
//	if ( !pClientSetToStorage_Skill_AddCount )
//		pClientSetToStorage_Skill_AddCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientSetToStorage_Skill_AddCount" );
//
//	parms.UserID = UserID;
//	parms.nSkillID = nSkillID;
//	parms.byAddCount = byAddCount;
//	this->ProcessEvent ( pClientSetToStorage_Skill_AddCount, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientSetToStorage_Skill_Used ( int UserID, int nSkillID, bool bUsed )
//{
//	static UFunction* pClientSetToStorage_Skill_Used = 0;
//	AwGameStateStorageSender_execClientSetToStorage_Skill_Used_Parms parms;
//
//	if ( !pClientSetToStorage_Skill_Used )
//		pClientSetToStorage_Skill_Used = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientSetToStorage_Skill_Used" );
//
//	parms.UserID = UserID;
//	parms.nSkillID = nSkillID;
//	parms.bUsed = bUsed;
//	this->ProcessEvent ( pClientSetToStorage_Skill_Used, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientSetToStorage_Skill_IsEnable ( int UserID, int nSkillID, bool bIsEnable )
//{
//	static UFunction* pClientSetToStorage_Skill_IsEnable = 0;
//	AwGameStateStorageSender_execClientSetToStorage_Skill_IsEnable_Parms parms;
//
//	if ( !pClientSetToStorage_Skill_IsEnable )
//		pClientSetToStorage_Skill_IsEnable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientSetToStorage_Skill_IsEnable" );
//
//	parms.UserID = UserID;
//	parms.nSkillID = nSkillID;
//	parms.bIsEnable = bIsEnable;
//	this->ProcessEvent ( pClientSetToStorage_Skill_IsEnable, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientSetToStorage_PlayerState ( int UserID, struct FString strName, unsigned char bPawnExistCondition )
//{
//	static UFunction* pClientSetToStorage_PlayerState = 0;
//	AwGameStateStorageSender_execClientSetToStorage_PlayerState_Parms parms;
//
//	if ( !pClientSetToStorage_PlayerState )
//		pClientSetToStorage_PlayerState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientSetToStorage_PlayerState" );
//
//	parms.UserID = UserID;
//	parms.strName = strName;
//	parms.bPawnExistCondition = bPawnExistCondition;
//	this->ProcessEvent ( pClientSetToStorage_PlayerState, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientSetToStorage_WeaponAmmo ( int UserID, struct FString strName, int nTotalAmmo, int nCurrentAmmo )
//{
//	static UFunction* pClientSetToStorage_WeaponAmmo = 0;
//	AwGameStateStorageSender_execClientSetToStorage_WeaponAmmo_Parms parms;
//
//	if ( !pClientSetToStorage_WeaponAmmo )
//		pClientSetToStorage_WeaponAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientSetToStorage_WeaponAmmo" );
//
//	parms.UserID = UserID;
//	parms.strName = strName;
//	parms.nTotalAmmo = nTotalAmmo;
//	parms.nCurrentAmmo = nCurrentAmmo;
//	this->ProcessEvent ( pClientSetToStorage_WeaponAmmo, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientSetToStorage_AddWeapon ( int UserID, struct FString strWeaponName, int nWeaponID, int nAddPartID, bool bUniqueID, int iPainting_Item_ID )
//{
//	static UFunction* pClientSetToStorage_AddWeapon = 0;
//	AwGameStateStorageSender_execClientSetToStorage_AddWeapon_Parms parms;
//
//	if ( !pClientSetToStorage_AddWeapon )
//		pClientSetToStorage_AddWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientSetToStorage_AddWeapon" );
//
//	parms.UserID = UserID;
//	parms.strWeaponName = strWeaponName;
//	parms.nWeaponID = nWeaponID;
//	parms.nAddPartID = nAddPartID;
//	parms.bUniqueID = bUniqueID;
//	parms.iPainting_Item_ID = iPainting_Item_ID;
//	this->ProcessEvent ( pClientSetToStorage_AddWeapon, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientSetToStorage_OldWeapon ( int UserID, int nWeaponID )
//{
//	static UFunction* pClientSetToStorage_OldWeapon = 0;
//	AwGameStateStorageSender_execClientSetToStorage_OldWeapon_Parms parms;
//
//	if ( !pClientSetToStorage_OldWeapon )
//		pClientSetToStorage_OldWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientSetToStorage_OldWeapon" );
//
//	parms.UserID = UserID;
//	parms.nWeaponID = nWeaponID;
//	this->ProcessEvent ( pClientSetToStorage_OldWeapon, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientSetToStorage_CurrentWeapon ( int UserID, int nWeaponID )
//{
//	static UFunction* pClientSetToStorage_CurrentWeapon = 0;
//	AwGameStateStorageSender_execClientSetToStorage_CurrentWeapon_Parms parms;
//
//	if ( !pClientSetToStorage_CurrentWeapon )
//		pClientSetToStorage_CurrentWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientSetToStorage_CurrentWeapon" );
//
//	parms.UserID = UserID;
//	parms.nWeaponID = nWeaponID;
//	this->ProcessEvent ( pClientSetToStorage_CurrentWeapon, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage_Vehicle_Leave (  )
//{
//	static UFunction* pSetToStorage_Vehicle_Leave = 0;
//	AwGameStateStorageSender_execSetToStorage_Vehicle_Leave_Parms parms;
//
//	if ( !pSetToStorage_Vehicle_Leave )
//		pSetToStorage_Vehicle_Leave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage_Vehicle_Leave" );
//
//	this->ProcessEvent ( pSetToStorage_Vehicle_Leave, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage_Vehicle_Enter ( struct FString strClassName, float Pos_X, float Pos_Y, float Pos_Z )
//{
//	static UFunction* pSetToStorage_Vehicle_Enter = 0;
//	AwGameStateStorageSender_execSetToStorage_Vehicle_Enter_Parms parms;
//
//	if ( !pSetToStorage_Vehicle_Enter )
//		pSetToStorage_Vehicle_Enter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage_Vehicle_Enter" );
//
//	parms.strClassName = strClassName;
//	parms.Pos_X = Pos_X;
//	parms.Pos_Y = Pos_Y;
//	parms.Pos_Z = Pos_Z;
//	this->ProcessEvent ( pSetToStorage_Vehicle_Enter, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage_Skill_UpdateCall ( int nSkillID, bool bUpdateCall )
//{
//	static UFunction* pSetToStorage_Skill_UpdateCall = 0;
//	AwGameStateStorageSender_execSetToStorage_Skill_UpdateCall_Parms parms;
//
//	if ( !pSetToStorage_Skill_UpdateCall )
//		pSetToStorage_Skill_UpdateCall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage_Skill_UpdateCall" );
//
//	parms.nSkillID = nSkillID;
//	parms.bUpdateCall = bUpdateCall;
//	this->ProcessEvent ( pSetToStorage_Skill_UpdateCall, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage_Skill_AddCount ( int nSkillID, unsigned char byAddCount )
//{
//	static UFunction* pSetToStorage_Skill_AddCount = 0;
//	AwGameStateStorageSender_execSetToStorage_Skill_AddCount_Parms parms;
//
//	if ( !pSetToStorage_Skill_AddCount )
//		pSetToStorage_Skill_AddCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage_Skill_AddCount" );
//
//	parms.nSkillID = nSkillID;
//	parms.byAddCount = byAddCount;
//	this->ProcessEvent ( pSetToStorage_Skill_AddCount, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage_Skill_Used ( int nSkillID, bool bUsed )
//{
//	static UFunction* pSetToStorage_Skill_Used = 0;
//	AwGameStateStorageSender_execSetToStorage_Skill_Used_Parms parms;
//
//	if ( !pSetToStorage_Skill_Used )
//		pSetToStorage_Skill_Used = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage_Skill_Used" );
//
//	parms.nSkillID = nSkillID;
//	parms.bUsed = bUsed;
//	this->ProcessEvent ( pSetToStorage_Skill_Used, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage_Skill_IsEnable ( int nSkillID, bool bIsEnable )
//{
//	static UFunction* pSetToStorage_Skill_IsEnable = 0;
//	AwGameStateStorageSender_execSetToStorage_Skill_IsEnable_Parms parms;
//
//	if ( !pSetToStorage_Skill_IsEnable )
//		pSetToStorage_Skill_IsEnable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage_Skill_IsEnable" );
//
//	parms.nSkillID = nSkillID;
//	parms.bIsEnable = bIsEnable;
//	this->ProcessEvent ( pSetToStorage_Skill_IsEnable, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage_PlayerState ( struct FString strName, unsigned char bPawnExistCondition )
//{
//	static UFunction* pSetToStorage_PlayerState = 0;
//	AwGameStateStorageSender_execSetToStorage_PlayerState_Parms parms;
//
//	if ( !pSetToStorage_PlayerState )
//		pSetToStorage_PlayerState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage_PlayerState" );
//
//	parms.strName = strName;
//	parms.bPawnExistCondition = bPawnExistCondition;
//	this->ProcessEvent ( pSetToStorage_PlayerState, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage_WeaponAmmo ( struct FString strName, int nTotalAmmo, int nCurrentAmmo )
//{
//	static UFunction* pSetToStorage_WeaponAmmo = 0;
//	AwGameStateStorageSender_execSetToStorage_WeaponAmmo_Parms parms;
//
//	if ( !pSetToStorage_WeaponAmmo )
//		pSetToStorage_WeaponAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage_WeaponAmmo" );
//
//	parms.strName = strName;
//	parms.nTotalAmmo = nTotalAmmo;
//	parms.nCurrentAmmo = nCurrentAmmo;
//	this->ProcessEvent ( pSetToStorage_WeaponAmmo, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage_AddWeapon ( struct FString strWeaponName, int nWeaponID, int nAddPartID, bool bUniqueID, int iPainting_Item_ID )
//{
//	static UFunction* pSetToStorage_AddWeapon = 0;
//	AwGameStateStorageSender_execSetToStorage_AddWeapon_Parms parms;
//
//	if ( !pSetToStorage_AddWeapon )
//		pSetToStorage_AddWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage_AddWeapon" );
//
//	parms.strWeaponName = strWeaponName;
//	parms.nWeaponID = nWeaponID;
//	parms.nAddPartID = nAddPartID;
//	parms.bUniqueID = bUniqueID;
//	parms.iPainting_Item_ID = iPainting_Item_ID;
//	this->ProcessEvent ( pSetToStorage_AddWeapon, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage_OldWeapon ( int nWeaponID )
//{
//	static UFunction* pSetToStorage_OldWeapon = 0;
//	AwGameStateStorageSender_execSetToStorage_OldWeapon_Parms parms;
//
//	if ( !pSetToStorage_OldWeapon )
//		pSetToStorage_OldWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage_OldWeapon" );
//
//	parms.nWeaponID = nWeaponID;
//	this->ProcessEvent ( pSetToStorage_OldWeapon, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage_CurrentWeapon ( int nWeaponID )
//{
//	static UFunction* pSetToStorage_CurrentWeapon = 0;
//	AwGameStateStorageSender_execSetToStorage_CurrentWeapon_Parms parms;
//
//	if ( !pSetToStorage_CurrentWeapon )
//		pSetToStorage_CurrentWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage_CurrentWeapon" );
//
//	parms.nWeaponID = nWeaponID;
//	this->ProcessEvent ( pSetToStorage_CurrentWeapon, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowWeapon_Delete ( int UserID, struct FString strWeaponName )
//{
//	static UFunction* pLowWeapon_Delete = 0;
//	AwGameStateStorageSender_execLowWeapon_Delete_Parms parms;
//
//	if ( !pLowWeapon_Delete )
//		pLowWeapon_Delete = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowWeapon_Delete" );
//
//	parms.UserID = UserID;
//	parms.strWeaponName = strWeaponName;
//	this->ProcessEvent ( pLowWeapon_Delete, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowVehicleLeave_Set ( int UserID )
//{
//	static UFunction* pLowVehicleLeave_Set = 0;
//	AwGameStateStorageSender_execLowVehicleLeave_Set_Parms parms;
//
//	if ( !pLowVehicleLeave_Set )
//		pLowVehicleLeave_Set = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowVehicleLeave_Set" );
//
//	parms.UserID = UserID;
//	this->ProcessEvent ( pLowVehicleLeave_Set, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowVehicleEnter_Set ( int UserID, struct FString strClassName, float Pos_X, float Pos_Y, float Pos_Z )
//{
//	static UFunction* pLowVehicleEnter_Set = 0;
//	AwGameStateStorageSender_execLowVehicleEnter_Set_Parms parms;
//
//	if ( !pLowVehicleEnter_Set )
//		pLowVehicleEnter_Set = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowVehicleEnter_Set" );
//
//	parms.UserID = UserID;
//	parms.strClassName = strClassName;
//	parms.Pos_X = Pos_X;
//	parms.Pos_Y = Pos_Y;
//	parms.Pos_Z = Pos_Z;
//	this->ProcessEvent ( pLowVehicleEnter_Set, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowSkill_UpdateCall_Set ( int UserID, int nSkillID, bool bUpdateCall )
//{
//	static UFunction* pLowSkill_UpdateCall_Set = 0;
//	AwGameStateStorageSender_execLowSkill_UpdateCall_Set_Parms parms;
//
//	if ( !pLowSkill_UpdateCall_Set )
//		pLowSkill_UpdateCall_Set = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowSkill_UpdateCall_Set" );
//
//	parms.UserID = UserID;
//	parms.nSkillID = nSkillID;
//	parms.bUpdateCall = bUpdateCall;
//	this->ProcessEvent ( pLowSkill_UpdateCall_Set, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowSkill_AddCount_Set ( int UserID, int nSkillID, unsigned char byAddCount )
//{
//	static UFunction* pLowSkill_AddCount_Set = 0;
//	AwGameStateStorageSender_execLowSkill_AddCount_Set_Parms parms;
//
//	if ( !pLowSkill_AddCount_Set )
//		pLowSkill_AddCount_Set = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowSkill_AddCount_Set" );
//
//	parms.UserID = UserID;
//	parms.nSkillID = nSkillID;
//	parms.byAddCount = byAddCount;
//	this->ProcessEvent ( pLowSkill_AddCount_Set, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowSkill_Used_Set ( int UserID, int nSkillID, bool bUsed )
//{
//	static UFunction* pLowSkill_Used_Set = 0;
//	AwGameStateStorageSender_execLowSkill_Used_Set_Parms parms;
//
//	if ( !pLowSkill_Used_Set )
//		pLowSkill_Used_Set = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowSkill_Used_Set" );
//
//	parms.UserID = UserID;
//	parms.nSkillID = nSkillID;
//	parms.bUsed = bUsed;
//	this->ProcessEvent ( pLowSkill_Used_Set, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowSkill_IsEnable_Set ( int UserID, int nSkillID, bool bIsEnable )
//{
//	static UFunction* pLowSkill_IsEnable_Set = 0;
//	AwGameStateStorageSender_execLowSkill_IsEnable_Set_Parms parms;
//
//	if ( !pLowSkill_IsEnable_Set )
//		pLowSkill_IsEnable_Set = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowSkill_IsEnable_Set" );
//
//	parms.UserID = UserID;
//	parms.nSkillID = nSkillID;
//	parms.bIsEnable = bIsEnable;
//	this->ProcessEvent ( pLowSkill_IsEnable_Set, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowPlayerState_Set ( int UserID, struct FString strName, unsigned char bPawnExistCondition )
//{
//	static UFunction* pLowPlayerState_Set = 0;
//	AwGameStateStorageSender_execLowPlayerState_Set_Parms parms;
//
//	if ( !pLowPlayerState_Set )
//		pLowPlayerState_Set = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowPlayerState_Set" );
//
//	parms.UserID = UserID;
//	parms.strName = strName;
//	parms.bPawnExistCondition = bPawnExistCondition;
//	this->ProcessEvent ( pLowPlayerState_Set, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowWeaponAmmo_Set ( int UserID, struct FString strWeaponName, int nTotalAmmo, int nCurrentAmmo )
//{
//	static UFunction* pLowWeaponAmmo_Set = 0;
//	AwGameStateStorageSender_execLowWeaponAmmo_Set_Parms parms;
//
//	if ( !pLowWeaponAmmo_Set )
//		pLowWeaponAmmo_Set = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowWeaponAmmo_Set" );
//
//	parms.UserID = UserID;
//	parms.strWeaponName = strWeaponName;
//	parms.nTotalAmmo = nTotalAmmo;
//	parms.nCurrentAmmo = nCurrentAmmo;
//	this->ProcessEvent ( pLowWeaponAmmo_Set, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowAddWeapon_Set ( int UserID, struct FString strWeaponName, int nWeaponID, int nAddPartID, bool bUniqueID, int iPainting_Item_ID )
//{
//	static UFunction* pLowAddWeapon_Set = 0;
//	AwGameStateStorageSender_execLowAddWeapon_Set_Parms parms;
//
//	if ( !pLowAddWeapon_Set )
//		pLowAddWeapon_Set = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowAddWeapon_Set" );
//
//	parms.UserID = UserID;
//	parms.strWeaponName = strWeaponName;
//	parms.nWeaponID = nWeaponID;
//	parms.nAddPartID = nAddPartID;
//	parms.bUniqueID = bUniqueID;
//	parms.iPainting_Item_ID = iPainting_Item_ID;
//	this->ProcessEvent ( pLowAddWeapon_Set, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowOldWeapon_Set ( int UserID, int nWeaponID )
//{
//	static UFunction* pLowOldWeapon_Set = 0;
//	AwGameStateStorageSender_execLowOldWeapon_Set_Parms parms;
//
//	if ( !pLowOldWeapon_Set )
//		pLowOldWeapon_Set = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowOldWeapon_Set" );
//
//	parms.UserID = UserID;
//	parms.nWeaponID = nWeaponID;
//	this->ProcessEvent ( pLowOldWeapon_Set, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowCurrentWeapon_Set ( int UserID, int nWeaponID )
//{
//	static UFunction* pLowCurrentWeapon_Set = 0;
//	AwGameStateStorageSender_execLowCurrentWeapon_Set_Parms parms;
//
//	if ( !pLowCurrentWeapon_Set )
//		pLowCurrentWeapon_Set = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowCurrentWeapon_Set" );
//
//	parms.UserID = UserID;
//	parms.nWeaponID = nWeaponID;
//	this->ProcessEvent ( pLowCurrentWeapon_Set, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ClientSetToStorage ( struct FString sUserID, struct FString Section, struct FString sName, struct FString Type, struct FString Value )
//{
//	static UFunction* pClientSetToStorage = 0;
//	AwGameStateStorageSender_execClientSetToStorage_Parms parms;
//
//	if ( !pClientSetToStorage )
//		pClientSetToStorage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ClientSetToStorage" );
//
//	parms.sUserID = sUserID;
//	parms.Section = Section;
//	parms.sName = sName;
//	parms.Type = Type;
//	parms.Value = Value;
//	this->ProcessEvent ( pClientSetToStorage, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::SetToStorage ( struct FString Section, struct FString sName, struct FString Type, struct FString Value )
//{
//	static UFunction* pSetToStorage = 0;
//	AwGameStateStorageSender_execSetToStorage_Parms parms;
//
//	if ( !pSetToStorage )
//		pSetToStorage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.SetToStorage" );
//
//	parms.Section = Section;
//	parms.sName = sName;
//	parms.Type = Type;
//	parms.Value = Value;
//	this->ProcessEvent ( pSetToStorage, &parms, NULL );
//
//}
//
//bool AwGameStateStorageSender::GetValue ( struct FString Section, struct FString sName, struct FString Type, struct FString* Value )
//{
//	static UFunction* pGetValue = 0;
//	AwGameStateStorageSender_execGetValue_Parms parms;
//
//	if ( !pGetValue )
//		pGetValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.GetValue" );
//
//	parms.Section = Section;
//	parms.sName = sName;
//	parms.Type = Type;
//	this->ProcessEvent ( pGetValue, &parms, NULL );
//
//	*Value = parms.Value;
//	return parms.ReturnValue;
//}
//
//void AwGameStateStorageSender::AllValues ( struct FString Section, struct FString sName, struct FString* Type, struct FString* Value )
//{
//	static UFunction* pAllValues = 0;
//	AwGameStateStorageSender_execAllValues_Parms parms;
//
//	if ( !pAllValues )
//		pAllValues = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.AllValues" );
//
//	parms.Section = Section;
//	parms.sName = sName;
//	this->ProcessEvent ( pAllValues, &parms, NULL );
//
//	*Type = parms.Type;
//	*Value = parms.Value;
//}
//
//void AwGameStateStorageSender::AllNames ( struct FString Section, struct FString* sName )
//{
//	static UFunction* pAllNames = 0;
//	AwGameStateStorageSender_execAllNames_Parms parms;
//
//	if ( !pAllNames )
//		pAllNames = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.AllNames" );
//
//	parms.Section = Section;
//	this->ProcessEvent ( pAllNames, &parms, NULL );
//
//	*sName = parms.sName;
//}
//
//void AwGameStateStorageSender::LowClear ( struct FString sUserID )
//{
//	static UFunction* pLowClear = 0;
//	AwGameStateStorageSender_execLowClear_Parms parms;
//
//	if ( !pLowClear )
//		pLowClear = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowClear" );
//
//	parms.sUserID = sUserID;
//	this->ProcessEvent ( pLowClear, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowDelete ( struct FString sUserID, struct FString Section, struct FString sName )
//{
//	static UFunction* pLowDelete = 0;
//	AwGameStateStorageSender_execLowDelete_Parms parms;
//
//	if ( !pLowDelete )
//		pLowDelete = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowDelete" );
//
//	parms.sUserID = sUserID;
//	parms.Section = Section;
//	parms.sName = sName;
//	this->ProcessEvent ( pLowDelete, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::LowSet ( struct FString sUserID, struct FString Section, struct FString sName, struct FString Type, struct FString Value )
//{
//	static UFunction* pLowSet = 0;
//	AwGameStateStorageSender_execLowSet_Parms parms;
//
//	if ( !pLowSet )
//		pLowSet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.LowSet" );
//
//	parms.sUserID = sUserID;
//	parms.Section = Section;
//	parms.sName = sName;
//	parms.Type = Type;
//	parms.Value = Value;
//	this->ProcessEvent ( pLowSet, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::RemoveGSSS (  )
//{
//	static UFunction* pRemoveGSSS = 0;
//	AwGameStateStorageSender_execRemoveGSSS_Parms parms;
//
//	if ( !pRemoveGSSS )
//		pRemoveGSSS = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.RemoveGSSS" );
//
//	this->ProcessEvent ( pRemoveGSSS, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::AddGSSS (  )
//{
//	static UFunction* pAddGSSS = 0;
//	AwGameStateStorageSender_execAddGSSS_Parms parms;
//
//	if ( !pAddGSSS )
//		pAddGSSS = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.AddGSSS" );
//
//	this->ProcessEvent ( pAddGSSS, &parms, NULL );
//
//}
//
//void AwGameStateStorageSender::ForceSetOwner ( class APlayerController* PC )
//{
//	static UFunction* pForceSetOwner = 0;
//	AwGameStateStorageSender_execForceSetOwner_Parms parms;
//
//	if ( !pForceSetOwner )
//		pForceSetOwner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageSender.ForceSetOwner" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pForceSetOwner, &parms, NULL );
//
//}
//
//void AwEmitter::PrecacheContent ( class ALevelInfo* Level )
//{
//	static UFunction* pPrecacheContent = 0;
//	AwEmitter_execPrecacheContent_Parms parms;
//
//	if ( !pPrecacheContent )
//		pPrecacheContent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wEmitter.PrecacheContent" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pPrecacheContent, &parms, NULL );
//
//}
//
//void AwEmitter::UpdatePrecacheMaterials (  )
//{
//	static UFunction* pUpdatePrecacheMaterials = 0;
//	AwEmitter_execUpdatePrecacheMaterials_Parms parms;
//
//	if ( !pUpdatePrecacheMaterials )
//		pUpdatePrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wEmitter.UpdatePrecacheMaterials" );
//
//	this->ProcessEvent ( pUpdatePrecacheMaterials, &parms, NULL );
//
//}
//
//void AwEmitter::eventTrigger ( class AActor* Other, class APawn* EventInstigator )
//{
//	static UFunction* pTrigger = 0;
//	AwEmitter_eventTrigger_Parms parms;
//
//	if ( !pTrigger )
//		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wEmitter.Trigger" );
//
//	parms.Other = Other;
//	parms.EventInstigator = EventInstigator;
//	this->ProcessEvent ( pTrigger, &parms, NULL );
//
//}
//
//float AwEmitter::ClampToMaxParticles ( float InPart )
//{
//	static UFunction* pClampToMaxParticles = 0;
//	AwEmitter_execClampToMaxParticles_Parms parms;
//
//	if ( !pClampToMaxParticles )
//		pClampToMaxParticles = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wEmitter.ClampToMaxParticles" );
//
//	parms.InPart = InPart;
//	this->ProcessEvent ( pClampToMaxParticles, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwEmitter::eventPreSpawned (  )
//{
//	static UFunction* pPreSpawned = 0;
//	AwEmitter_eventPreSpawned_Parms parms;
//
//	if ( !pPreSpawned )
//		pPreSpawned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wEmitter.PreSpawned" );
//
//	this->ProcessEvent ( pPreSpawned, &parms, NULL );
//
//}
//
//void AwEmitter::eventCollisionSound (  )
//{
//	static UFunction* pCollisionSound = 0;
//	AwEmitter_eventCollisionSound_Parms parms;
//
//	if ( !pCollisionSound )
//		pCollisionSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wEmitter.CollisionSound" );
//
//	this->ProcessEvent ( pCollisionSound, &parms, NULL );
//
//}
//
//void ASceneSubtitles::eventReset (  )
//{
//	static UFunction* pReset = 0;
//	ASceneSubtitles_eventReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SceneSubtitles.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//struct FString ASceneSubtitles::GetSubTitles (  )
//{
//	static UFunction* pGetSubTitles = 0;
//	ASceneSubtitles_execGetSubTitles_Parms parms;
//
//	if ( !pGetSubTitles )
//		pGetSubTitles = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SceneSubtitles.GetSubTitles" );
//
//	this->ProcessEvent ( pGetSubTitles, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
////void ASceneSubtitles::ProcessEvent ( unsigned char Mode )
////{
////	static UFunction* pProcessEvent = 0;
////	ASceneSubtitles_execProcessEvent_Parms parms;
////
////	if ( !pProcessEvent )
////		pProcessEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.SceneSubtitles.ProcessEvent" );
////
////	parms.Mode = Mode;
////	this->ProcessEvent ( pProcessEvent, &parms, NULL );
////
////}
//
//struct FString AGameStats::GetLogFilename (  )
//{
//	static UFunction* pGetLogFilename = 0;
//	AGameStats_execGetLogFilename_Parms parms;
//
//	if ( !pGetLogFilename )
//		pGetLogFilename = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.GetLogFilename" );
//
//	this->ProcessEvent ( pGetLogFilename, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameStats::GameEvent ( struct FString GEvent, struct FString Desc, class APlayerReplicationInfo* Who )
//{
//	static UFunction* pGameEvent = 0;
//	AGameStats_execGameEvent_Parms parms;
//
//	if ( !pGameEvent )
//		pGameEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.GameEvent" );
//
//	parms.GEvent = GEvent;
//	parms.Desc = Desc;
//	parms.Who = Who;
//	this->ProcessEvent ( pGameEvent, &parms, NULL );
//
//}
//
//void AGameStats::SpecialEvent ( class APlayerReplicationInfo* Who, struct FString Desc )
//{
//	static UFunction* pSpecialEvent = 0;
//	AGameStats_execSpecialEvent_Parms parms;
//
//	if ( !pSpecialEvent )
//		pSpecialEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.SpecialEvent" );
//
//	parms.Who = Who;
//	parms.Desc = Desc;
//	this->ProcessEvent ( pSpecialEvent, &parms, NULL );
//
//}
//
//void AGameStats::KillEvent ( struct FString KillType, class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, class UClass* Damage )
//{
//	static UFunction* pKillEvent = 0;
//	AGameStats_execKillEvent_Parms parms;
//
//	if ( !pKillEvent )
//		pKillEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.KillEvent" );
//
//	parms.KillType = KillType;
//	parms.Killer = Killer;
//	parms.Victim = Victim;
//	parms.Damage = Damage;
//	this->ProcessEvent ( pKillEvent, &parms, NULL );
//
//}
//
//void AGameStats::TeamScoreEvent ( int Team, float Points, struct FString Desc )
//{
//	static UFunction* pTeamScoreEvent = 0;
//	AGameStats_execTeamScoreEvent_Parms parms;
//
//	if ( !pTeamScoreEvent )
//		pTeamScoreEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.TeamScoreEvent" );
//
//	parms.Team = Team;
//	parms.Points = Points;
//	parms.Desc = Desc;
//	this->ProcessEvent ( pTeamScoreEvent, &parms, NULL );
//
//}
//
//void AGameStats::ScoreEvent ( class APlayerReplicationInfo* Who, float Points, struct FString Desc )
//{
//	static UFunction* pScoreEvent = 0;
//	AGameStats_execScoreEvent_Parms parms;
//
//	if ( !pScoreEvent )
//		pScoreEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.ScoreEvent" );
//
//	parms.Who = Who;
//	parms.Points = Points;
//	parms.Desc = Desc;
//	this->ProcessEvent ( pScoreEvent, &parms, NULL );
//
//}
//
//void AGameStats::DisconnectEvent ( class APlayerReplicationInfo* Who )
//{
//	static UFunction* pDisconnectEvent = 0;
//	AGameStats_execDisconnectEvent_Parms parms;
//
//	if ( !pDisconnectEvent )
//		pDisconnectEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.DisconnectEvent" );
//
//	parms.Who = Who;
//	this->ProcessEvent ( pDisconnectEvent, &parms, NULL );
//
//}
//
//void AGameStats::ConnectEvent ( class APlayerReplicationInfo* Who )
//{
//	static UFunction* pConnectEvent = 0;
//	AGameStats_execConnectEvent_Parms parms;
//
//	if ( !pConnectEvent )
//		pConnectEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.ConnectEvent" );
//
//	parms.Who = Who;
//	this->ProcessEvent ( pConnectEvent, &parms, NULL );
//
//}
//
//void AGameStats::EndGame ( struct FString Reason )
//{
//	static UFunction* pEndGame = 0;
//	AGameStats_execEndGame_Parms parms;
//
//	if ( !pEndGame )
//		pEndGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.EndGame" );
//
//	parms.Reason = Reason;
//	this->ProcessEvent ( pEndGame, &parms, NULL );
//
//}
//
//void AGameStats::StartGame (  )
//{
//	static UFunction* pStartGame = 0;
//	AGameStats_execStartGame_Parms parms;
//
//	if ( !pStartGame )
//		pStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.StartGame" );
//
//	this->ProcessEvent ( pStartGame, &parms, NULL );
//
//}
//
//void AGameStats::ServerInfo (  )
//{
//	static UFunction* pServerInfo = 0;
//	AGameStats_execServerInfo_Parms parms;
//
//	if ( !pServerInfo )
//		pServerInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.ServerInfo" );
//
//	this->ProcessEvent ( pServerInfo, &parms, NULL );
//
//}
//
//void AGameStats::NewGame (  )
//{
//	static UFunction* pNewGame = 0;
//	AGameStats_execNewGame_Parms parms;
//
//	if ( !pNewGame )
//		pNewGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.NewGame" );
//
//	this->ProcessEvent ( pNewGame, &parms, NULL );
//
//}
//
//struct FString AGameStats::MapName (  )
//{
//	static UFunction* pMapName = 0;
//	AGameStats_execMapName_Parms parms;
//
//	if ( !pMapName )
//		pMapName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.MapName" );
//
//	this->ProcessEvent ( pMapName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameStats::TimeZone (  )
//{
//	static UFunction* pTimeZone = 0;
//	AGameStats_execTimeZone_Parms parms;
//
//	if ( !pTimeZone )
//		pTimeZone = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.TimeZone" );
//
//	this->ProcessEvent ( pTimeZone, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameStats::FullTimeDate (  )
//{
//	static UFunction* pFullTimeDate = 0;
//	AGameStats_execFullTimeDate_Parms parms;
//
//	if ( !pFullTimeDate )
//		pFullTimeDate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.FullTimeDate" );
//
//	this->ProcessEvent ( pFullTimeDate, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameStats::Header (  )
//{
//	static UFunction* pHeader = 0;
//	AGameStats_execHeader_Parms parms;
//
//	if ( !pHeader )
//		pHeader = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.Header" );
//
//	this->ProcessEvent ( pHeader, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameStats::TimeStamp (  )
//{
//	static UFunction* pTimeStamp = 0;
//	AGameStats_execTimeStamp_Parms parms;
//
//	if ( !pTimeStamp )
//		pTimeStamp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.TimeStamp" );
//
//	this->ProcessEvent ( pTimeStamp, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameStats::eventDestroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AGameStats_eventDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AGameStats::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AGameStats_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AGameStats::Logf ( struct FString LogString )
//{
//	static UFunction* pLogf = 0;
//	AGameStats_execLogf_Parms parms;
//
//	if ( !pLogf )
//		pLogf = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.Logf" );
//
//	parms.LogString = LogString;
//	this->ProcessEvent ( pLogf, &parms, NULL );
//
//}
//
//void AGameStats::Shutdown (  )
//{
//	static UFunction* pShutdown = 0;
//	AGameStats_execShutdown_Parms parms;
//
//	if ( !pShutdown )
//		pShutdown = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.Shutdown" );
//
//	this->ProcessEvent ( pShutdown, &parms, NULL );
//
//}
//
//void AGameStats::Init (  )
//{
//	static UFunction* pInit = 0;
//	AGameStats_execInit_Parms parms;
//
//	if ( !pInit )
//		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.Init" );
//
//	this->ProcessEvent ( pInit, &parms, NULL );
//
//}
//
//struct FString AGameStats::GetMapFileName (  )
//{
//	static UFunction* pGetMapFileName = 0;
//	AGameStats_execGetMapFileName_Parms parms;
//
//	if ( !pGetMapFileName )
//		pGetMapFileName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.GetMapFileName" );
//
//	this->ProcessEvent ( pGetMapFileName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AGameStats::GetStatsIdentifier ( class AController* C )
//{
//	static UFunction* pGetStatsIdentifier = 0;
//	AGameStats_execGetStatsIdentifier_Parms parms;
//
//	if ( !pGetStatsIdentifier )
//		pGetStatsIdentifier = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameStats.GetStatsIdentifier" );
//
//	parms.C = C;
//	this->ProcessEvent ( pGetStatsIdentifier, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AFileLog::Logf ( struct FString LogString )
//{
//	static UFunction* pLogf = 0;
//	AFileLog_execLogf_Parms parms;
//
//	if ( !pLogf )
//		pLogf = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.FileLog.Logf" );
//
//	parms.LogString = LogString;
//	this->ProcessEvent ( pLogf, &parms, NULL );
//
//}
//
//void AFileLog::CloseLog (  )
//{
//	static UFunction* pCloseLog = 0;
//	AFileLog_execCloseLog_Parms parms;
//
//	if ( !pCloseLog )
//		pCloseLog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.FileLog.CloseLog" );
//
//	this->ProcessEvent ( pCloseLog, &parms, NULL );
//
//}
//
//void AFileLog::OpenLog ( struct FString FName, struct FString FExt, bool bOverwrite )
//{
//	static UFunction* pOpenLog = 0;
//	AFileLog_execOpenLog_Parms parms;
//
//	if ( !pOpenLog )
//		pOpenLog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.FileLog.OpenLog" );
//
//	parms.FName = FName;
//	parms.FExt = FExt;
//	parms.bOverwrite = bOverwrite;
//	this->ProcessEvent ( pOpenLog, &parms, NULL );
//
//}
//
//bool ALocalMessage::IsConsoleMessage ( int Switch )
//{
//	static UFunction* pIsConsoleMessage = 0;
//	ALocalMessage_execIsConsoleMessage_Parms parms;
//
//	if ( !pIsConsoleMessage )
//		pIsConsoleMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LocalMessage.IsConsoleMessage" );
//
//	parms.Switch = Switch;
//	this->ProcessEvent ( pIsConsoleMessage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float ALocalMessage::GetLifeTime ( int Switch )
//{
//	static UFunction* pGetLifeTime = 0;
//	ALocalMessage_execGetLifeTime_Parms parms;
//
//	if ( !pGetLifeTime )
//		pGetLifeTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LocalMessage.GetLifeTime" );
//
//	parms.Switch = Switch;
//	this->ProcessEvent ( pGetLifeTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int ALocalMessage::GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer )
//{
//	static UFunction* pGetFontSize = 0;
//	ALocalMessage_execGetFontSize_Parms parms;
//
//	if ( !pGetFontSize )
//		pGetFontSize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LocalMessage.GetFontSize" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI1 = RelatedPRI1;
//	parms.RelatedPRI2 = RelatedPRI2;
//	parms.LocalPlayer = LocalPlayer;
//	this->ProcessEvent ( pGetFontSize, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALocalMessage::GetPos ( int Switch, unsigned char* OutDrawPivot, unsigned char* OutStackMode, float* OutPosX, float* OutPosY )
//{
//	static UFunction* pGetPos = 0;
//	ALocalMessage_execGetPos_Parms parms;
//
//	if ( !pGetPos )
//		pGetPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LocalMessage.GetPos" );
//
//	parms.Switch = Switch;
//	this->ProcessEvent ( pGetPos, &parms, NULL );
//
//	*OutDrawPivot = parms.OutDrawPivot;
//	*OutStackMode = parms.OutStackMode;
//	*OutPosX = parms.OutPosX;
//	*OutPosY = parms.OutPosY;
//}
//
//class FColor ALocalMessage::GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2 )
//{
//	static UFunction* pGetColor = 0;
//	ALocalMessage_execGetColor_Parms parms;
//
//	if ( !pGetColor )
//		pGetColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LocalMessage.GetColor" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	this->ProcessEvent ( pGetColor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class FColor ALocalMessage::GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI_1 )
//{
//	static UFunction* pGetConsoleColor = 0;
//	ALocalMessage_execGetConsoleColor_Parms parms;
//
//	if ( !pGetConsoleColor )
//		pGetConsoleColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LocalMessage.GetConsoleColor" );
//
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	this->ProcessEvent ( pGetConsoleColor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALocalMessage::GotoBTConsole ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGotoBTConsole = 0;
//	ALocalMessage_execGotoBTConsole_Parms parms;
//
//	if ( !pGotoBTConsole )
//		pGotoBTConsole = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LocalMessage.GotoBTConsole" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGotoBTConsole, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ALocalMessage::GotoHud ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGotoHud = 0;
//	ALocalMessage_execGotoHud_Parms parms;
//
//	if ( !pGotoHud )
//		pGotoHud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LocalMessage.GotoHud" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGotoHud, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALocalMessage::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pClientReceive = 0;
//	ALocalMessage_execClientReceive_Parms parms;
//
//	if ( !pClientReceive )
//		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LocalMessage.ClientReceive" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pClientReceive, &parms, NULL );
//
//}
//
//struct FString ALocalMessage::AssembleString ( class AHUD* myHUD, int Switch, class APlayerReplicationInfo* RelatedPRI_1, struct FString MessageString )
//{
//	static UFunction* pAssembleString = 0;
//	ALocalMessage_execAssembleString_Parms parms;
//
//	if ( !pAssembleString )
//		pAssembleString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LocalMessage.AssembleString" );
//
//	parms.myHUD = myHUD;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.MessageString = MessageString;
//	this->ProcessEvent ( pAssembleString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString ALocalMessage::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGetString = 0;
//	ALocalMessage_execGetString_Parms parms;
//
//	if ( !pGetString )
//		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LocalMessage.GetString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGetString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString ALocalMessage::GetRelatedString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGetRelatedString = 0;
//	ALocalMessage_execGetRelatedString_Parms parms;
//
//	if ( !pGetRelatedString )
//		pGetRelatedString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LocalMessage.GetRelatedString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGetRelatedString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ALocalMessage::RenderComplexMessage ( class UCanvas* Canvas, struct FString MessageString, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, float* XL, float* YL )
//{
//	static UFunction* pRenderComplexMessage = 0;
//	ALocalMessage_execRenderComplexMessage_Parms parms;
//
//	if ( !pRenderComplexMessage )
//		pRenderComplexMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LocalMessage.RenderComplexMessage" );
//
//	parms.Canvas = Canvas;
//	parms.MessageString = MessageString;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pRenderComplexMessage, &parms, NULL );
//
//	*XL = parms.XL;
//	*YL = parms.YL;
//}
//
//void AGameMessage::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pClientReceive = 0;
//	AGameMessage_execClientReceive_Parms parms;
//
//	if ( !pClientReceive )
//		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameMessage.ClientReceive" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pClientReceive, &parms, NULL );
//
//}
//
//struct FString AGameMessage::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGetString = 0;
//	AGameMessage_execGetString_Parms parms;
//
//	if ( !pGetString )
//		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameMessage.GetString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGetString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVolumeTimer::Timer (  )
//{
//	static UFunction* pTimer = 0;
//	AVolumeTimer_execTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VolumeTimer.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//void AVolumeTimer::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AVolumeTimer_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VolumeTimer.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AwProjectile::RecoverFromHostChange (  )
//{
//	static UFunction* pRecoverFromHostChange = 0;
//	AwProjectile_execRecoverFromHostChange_Parms parms;
//
//	if ( !pRecoverFromHostChange )
//		pRecoverFromHostChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.RecoverFromHostChange" );
//
//	this->ProcessEvent ( pRecoverFromHostChange, &parms, NULL );
//
//}
//
//void AwProjectile::RecoverInstigator (  )
//{
//	static UFunction* pRecoverInstigator = 0;
//	AwProjectile_execRecoverInstigator_Parms parms;
//
//	if ( !pRecoverInstigator )
//		pRecoverInstigator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.RecoverInstigator" );
//
//	this->ProcessEvent ( pRecoverInstigator, &parms, NULL );
//
//}
//
//void AwProjectile::RumbleRadius ( struct FVector HitLocation )
//{
//	static UFunction* pRumbleRadius = 0;
//	AwProjectile_execRumbleRadius_Parms parms;
//
//	if ( !pRumbleRadius )
//		pRumbleRadius = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.RumbleRadius" );
//
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pRumbleRadius, &parms, NULL );
//
//}
//
//void AwProjectile::BlowUp ( struct FVector HitLocation )
//{
//	static UFunction* pBlowUp = 0;
//	AwProjectile_execBlowUp_Parms parms;
//
//	if ( !pBlowUp )
//		pBlowUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.BlowUp" );
//
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pBlowUp, &parms, NULL );
//
//}
//
//void AwProjectile::wLoadOut ( int iID )
//{
//	static UFunction* pwLoadOut = 0;
//	AwProjectile_execwLoadOut_Parms parms;
//
//	if ( !pwLoadOut )
//		pwLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.wLoadOut" );
//
//	parms.iID = iID;
//	this->ProcessEvent ( pwLoadOut, &parms, NULL );
//
//}
//
//class UClass* AwProjectile::GetExplosionClass (  )
//{
//	static UFunction* pGetExplosionClass = 0;
//	AwProjectile_execGetExplosionClass_Parms parms;
//
//	if ( !pGetExplosionClass )
//		pGetExplosionClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.GetExplosionClass" );
//
//	this->ProcessEvent ( pGetExplosionClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UClass* AwProjectile::GetExplosionClassByMaterial (  )
//{
//	static UFunction* pGetExplosionClassByMaterial = 0;
//	AwProjectile_execGetExplosionClassByMaterial_Parms parms;
//
//	if ( !pGetExplosionClassByMaterial )
//		pGetExplosionClassByMaterial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.GetExplosionClassByMaterial" );
//
//	this->ProcessEvent ( pGetExplosionClassByMaterial, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UClass* AwProjectile::GetExplosionClassByActor (  )
//{
//	static UFunction* pGetExplosionClassByActor = 0;
//	AwProjectile_execGetExplosionClassByActor_Parms parms;
//
//	if ( !pGetExplosionClassByActor )
//		pGetExplosionClassByActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.GetExplosionClassByActor" );
//
//	this->ProcessEvent ( pGetExplosionClassByActor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwProjectile::DamageLog ( class APawn* Victim, float fDam, float fDist )
//{
//	static UFunction* pDamageLog = 0;
//	AwProjectile_execDamageLog_Parms parms;
//
//	if ( !pDamageLog )
//		pDamageLog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.DamageLog" );
//
//	parms.Victim = Victim;
//	parms.fDam = fDam;
//	parms.fDist = fDist;
//	this->ProcessEvent ( pDamageLog, &parms, NULL );
//
//}
//
//void AwProjectile::SufferEffect ( class APawn* Victim, float fDist, float fReduceRate )
//{
//	static UFunction* pSufferEffect = 0;
//	AwProjectile_execSufferEffect_Parms parms;
//
//	if ( !pSufferEffect )
//		pSufferEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.SufferEffect" );
//
//	parms.Victim = Victim;
//	parms.fDist = fDist;
//	parms.fReduceRate = fReduceRate;
//	this->ProcessEvent ( pSufferEffect, &parms, NULL );
//
//}
//
//void AwProjectile::HurtRadiusTutorial ( float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HitLocation )
//{
//	static UFunction* pHurtRadiusTutorial = 0;
//	AwProjectile_execHurtRadiusTutorial_Parms parms;
//
//	if ( !pHurtRadiusTutorial )
//		pHurtRadiusTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.HurtRadiusTutorial" );
//
//	parms.DamageAmount = DamageAmount;
//	parms.DamageRadius = DamageRadius;
//	parms.DamageType = DamageType;
//	parms.Momentum = Momentum;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pHurtRadiusTutorial, &parms, NULL );
//
//}
//
//void AwProjectile::HurtRadius ( float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HitLocation )
//{
//	static UFunction* pHurtRadius = 0;
//	AwProjectile_execHurtRadius_Parms parms;
//
//	if ( !pHurtRadius )
//		pHurtRadius = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.HurtRadius" );
//
//	parms.DamageAmount = DamageAmount;
//	parms.DamageRadius = DamageRadius;
//	parms.DamageType = DamageType;
//	parms.Momentum = Momentum;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pHurtRadius, &parms, NULL );
//
//}
//
//void AwProjectile::eventTick ( float DeltaTime )
//{
//	static UFunction* pTick = 0;
//	AwProjectile_eventTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.Tick" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void AwProjectile::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AwProjectile_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectile.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AwMessage_Quest::PlaySoundMessageQuest ( class APlayerController* P )
//{
//	static UFunction* pPlaySoundMessageQuest = 0;
//	AwMessage_Quest_execPlaySoundMessageQuest_Parms parms;
//
//	if ( !pPlaySoundMessageQuest )
//		pPlaySoundMessageQuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Quest.PlaySoundMessageQuest" );
//
//	parms.P = P;
//	this->ProcessEvent ( pPlaySoundMessageQuest, &parms, NULL );
//
//}
//
//void AwMessage_Quest::ClientReceive_Type3 ( class APlayerController* P, int Switch, int iRDifficult, int iRMap )
//{
//	static UFunction* pClientReceive_Type3 = 0;
//	AwMessage_Quest_execClientReceive_Type3_Parms parms;
//
//	if ( !pClientReceive_Type3 )
//		pClientReceive_Type3 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Quest.ClientReceive_Type3" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.iRDifficult = iRDifficult;
//	parms.iRMap = iRMap;
//	this->ProcessEvent ( pClientReceive_Type3, &parms, NULL );
//
//}
//
//void AwMessage_Quest::ClientReceive_Type2 ( class APlayerController* P, int Switch, int iRMode, int iRMap, int iRMin, int iRSec )
//{
//	static UFunction* pClientReceive_Type2 = 0;
//	AwMessage_Quest_execClientReceive_Type2_Parms parms;
//
//	if ( !pClientReceive_Type2 )
//		pClientReceive_Type2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Quest.ClientReceive_Type2" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.iRMode = iRMode;
//	parms.iRMap = iRMap;
//	parms.iRMin = iRMin;
//	parms.iRSec = iRSec;
//	this->ProcessEvent ( pClientReceive_Type2, &parms, NULL );
//
//}
//
//void AwMessage_Quest::ClientReceive_Type1 ( class APlayerController* P, int Switch, int iRWeaponType, int iRweaponId )
//{
//	static UFunction* pClientReceive_Type1 = 0;
//	AwMessage_Quest_execClientReceive_Type1_Parms parms;
//
//	if ( !pClientReceive_Type1 )
//		pClientReceive_Type1 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Quest.ClientReceive_Type1" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.iRWeaponType = iRWeaponType;
//	parms.iRweaponId = iRweaponId;
//	this->ProcessEvent ( pClientReceive_Type1, &parms, NULL );
//
//}
//
//void AwMessage_Quest::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pClientReceive = 0;
//	AwMessage_Quest_execClientReceive_Parms parms;
//
//	if ( !pClientReceive )
//		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Quest.ClientReceive" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pClientReceive, &parms, NULL );
//
//}
//
//struct FString AwMessage_Quest::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGetString = 0;
//	AwMessage_Quest_execGetString_Parms parms;
//
//	if ( !pGetString )
//		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Quest.GetString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGetString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AwMessage_Game::GetSoundPackageByTeam ( int iTeam, int iLang )
//{
//	static UFunction* pGetSoundPackageByTeam = 0;
//	AwMessage_Game_execGetSoundPackageByTeam_Parms parms;
//
//	if ( !pGetSoundPackageByTeam )
//		pGetSoundPackageByTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game.GetSoundPackageByTeam" );
//
//	parms.iTeam = iTeam;
//	parms.iLang = iLang;
//	this->ProcessEvent ( pGetSoundPackageByTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwMessage_Game::GotoBTConsole ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGotoBTConsole = 0;
//	AwMessage_Game_execGotoBTConsole_Parms parms;
//
//	if ( !pGotoBTConsole )
//		pGotoBTConsole = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game.GotoBTConsole" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGotoBTConsole, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwMessage_Game::GotoHud ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGotoHud = 0;
//	AwMessage_Game_execGotoHud_Parms parms;
//
//	if ( !pGotoHud )
//		pGotoHud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game.GotoHud" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGotoHud, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AwMessage_Game::GetPopMessageStr ( int Switch )
//{
//	static UFunction* pGetPopMessageStr = 0;
//	AwMessage_Game_execGetPopMessageStr_Parms parms;
//
//	if ( !pGetPopMessageStr )
//		pGetPopMessageStr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game.GetPopMessageStr" );
//
//	parms.Switch = Switch;
//	this->ProcessEvent ( pGetPopMessageStr, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwMessage_Game::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pClientReceive = 0;
//	AwMessage_Game_execClientReceive_Parms parms;
//
//	if ( !pClientReceive )
//		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game.ClientReceive" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pClientReceive, &parms, NULL );
//
//}
//
//struct FString AwMessage_Game::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGetString = 0;
//	AwMessage_Game_execGetString_Parms parms;
//
//	if ( !pGetString )
//		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game.GetString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGetString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AwGun::GetCurMagazineAmmoCount (  )
//{
//	static UFunction* pGetCurMagazineAmmoCount = 0;
//	AwGun_execGetCurMagazineAmmoCount_Parms parms;
//
//	if ( !pGetCurMagazineAmmoCount )
//		pGetCurMagazineAmmoCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.GetCurMagazineAmmoCount" );
//
//	this->ProcessEvent ( pGetCurMagazineAmmoCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AwGun::GetCurTotalAmmoCount (  )
//{
//	static UFunction* pGetCurTotalAmmoCount = 0;
//	AwGun_execGetCurTotalAmmoCount_Parms parms;
//
//	if ( !pGetCurTotalAmmoCount )
//		pGetCurTotalAmmoCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.GetCurTotalAmmoCount" );
//
//	this->ProcessEvent ( pGetCurTotalAmmoCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwGun::ClientAddMagazine (  )
//{
//	static UFunction* pClientAddMagazine = 0;
//	AwGun_execClientAddMagazine_Parms parms;
//
//	if ( !pClientAddMagazine )
//		pClientAddMagazine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ClientAddMagazine" );
//
//	this->ProcessEvent ( pClientAddMagazine, &parms, NULL );
//
//}
//
//void AwGun::ServerAddMagazine (  )
//{
//	static UFunction* pServerAddMagazine = 0;
//	AwGun_execServerAddMagazine_Parms parms;
//
//	if ( !pServerAddMagazine )
//		pServerAddMagazine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ServerAddMagazine" );
//
//	this->ProcessEvent ( pServerAddMagazine, &parms, NULL );
//
//}
//
//void AwGun::Change3DScopeMesh (  )
//{
//	static UFunction* pChange3DScopeMesh = 0;
//	AwGun_execChange3DScopeMesh_Parms parms;
//
//	if ( !pChange3DScopeMesh )
//		pChange3DScopeMesh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.Change3DScopeMesh" );
//
//	this->ProcessEvent ( pChange3DScopeMesh, &parms, NULL );
//
//}
//
//void AwGun::CheckPartsSet (  )
//{
//	static UFunction* pCheckPartsSet = 0;
//	AwGun_execCheckPartsSet_Parms parms;
//
//	if ( !pCheckPartsSet )
//		pCheckPartsSet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.CheckPartsSet" );
//
//	this->ProcessEvent ( pCheckPartsSet, &parms, NULL );
//
//}
//
//void AwGun::SetAmmoAmount ( int Mode, int CurrentAmmo )
//{
//	static UFunction* pSetAmmoAmount = 0;
//	AwGun_execSetAmmoAmount_Parms parms;
//
//	if ( !pSetAmmoAmount )
//		pSetAmmoAmount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.SetAmmoAmount" );
//
//	parms.Mode = Mode;
//	parms.CurrentAmmo = CurrentAmmo;
//	this->ProcessEvent ( pSetAmmoAmount, &parms, NULL );
//
//}
//
//void AwGun::SetAmmoTotal ( int Mode, int TotalAmmo )
//{
//	static UFunction* pSetAmmoTotal = 0;
//	AwGun_execSetAmmoTotal_Parms parms;
//
//	if ( !pSetAmmoTotal )
//		pSetAmmoTotal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.SetAmmoTotal" );
//
//	parms.Mode = Mode;
//	parms.TotalAmmo = TotalAmmo;
//	this->ProcessEvent ( pSetAmmoTotal, &parms, NULL );
//
//}
//
//void AwGun::ClientWeaponThrown (  )
//{
//	static UFunction* pClientWeaponThrown = 0;
//	AwGun_execClientWeaponThrown_Parms parms;
//
//	if ( !pClientWeaponThrown )
//		pClientWeaponThrown = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ClientWeaponThrown" );
//
//	this->ProcessEvent ( pClientWeaponThrown, &parms, NULL );
//
//}
//
//void AwGun::CalcBreathRot (  )
//{
//	static UFunction* pCalcBreathRot = 0;
//	AwGun_execCalcBreathRot_Parms parms;
//
//	if ( !pCalcBreathRot )
//		pCalcBreathRot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.CalcBreathRot" );
//
//	this->ProcessEvent ( pCalcBreathRot, &parms, NULL );
//
//}
//
//void AwGun::CalcBreathOffset (  )
//{
//	static UFunction* pCalcBreathOffset = 0;
//	AwGun_execCalcBreathOffset_Parms parms;
//
//	if ( !pCalcBreathOffset )
//		pCalcBreathOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.CalcBreathOffset" );
//
//	this->ProcessEvent ( pCalcBreathOffset, &parms, NULL );
//
//}
//
//void AwGun::SetSprint ( bool bValue )
//{
//	static UFunction* pSetSprint = 0;
//	AwGun_execSetSprint_Parms parms;
//
//	if ( !pSetSprint )
//		pSetSprint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.SetSprint" );
//
//	parms.bValue = bValue;
//	this->ProcessEvent ( pSetSprint, &parms, NULL );
//
//}
//
//bool AwGun::StartFire ( int Mode )
//{
//	static UFunction* pStartFire = 0;
//	AwGun_execStartFire_Parms parms;
//
//	if ( !pStartFire )
//		pStartFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.StartFire" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pStartFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwGun::eventClientStartFire ( int Mode )
//{
//	static UFunction* pClientStartFire = 0;
//	AwGun_eventClientStartFire_Parms parms;
//
//	if ( !pClientStartFire )
//		pClientStartFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ClientStartFire" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pClientStartFire, &parms, NULL );
//
//}
//
//struct FVector AwGun::GetEffectStart (  )
//{
//	static UFunction* pGetEffectStart = 0;
//	AwGun_execGetEffectStart_Parms parms;
//
//	if ( !pGetEffectStart )
//		pGetEffectStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.GetEffectStart" );
//
//	this->ProcessEvent ( pGetEffectStart, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwGun::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	AwGun_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//void AwGun::SpawnShell (  )
//{
//	static UFunction* pSpawnShell = 0;
//	AwGun_execSpawnShell_Parms parms;
//
//	if ( !pSpawnShell )
//		pSpawnShell = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.SpawnShell" );
//
//	this->ProcessEvent ( pSpawnShell, &parms, NULL );
//
//}
//
//void AwGun::ServerSilencerAttached ( bool bEnabled )
//{
//	static UFunction* pServerSilencerAttached = 0;
//	AwGun_execServerSilencerAttached_Parms parms;
//
//	if ( !pServerSilencerAttached )
//		pServerSilencerAttached = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ServerSilencerAttached" );
//
//	parms.bEnabled = bEnabled;
//	this->ProcessEvent ( pServerSilencerAttached, &parms, NULL );
//
//}
//
//void AwGun::SilencerAttached ( bool bEnabled )
//{
//	static UFunction* pSilencerAttached = 0;
//	AwGun_execSilencerAttached_Parms parms;
//
//	if ( !pSilencerAttached )
//		pSilencerAttached = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.SilencerAttached" );
//
//	parms.bEnabled = bEnabled;
//	this->ProcessEvent ( pSilencerAttached, &parms, NULL );
//
//}
//
//void AwGun::ApplyPartsParam ( struct FString strOption, struct FString strValue )
//{
//	static UFunction* pApplyPartsParam = 0;
//	AwGun_execApplyPartsParam_Parms parms;
//
//	if ( !pApplyPartsParam )
//		pApplyPartsParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ApplyPartsParam" );
//
//	parms.strOption = strOption;
//	parms.strValue = strValue;
//	this->ProcessEvent ( pApplyPartsParam, &parms, NULL );
//
//}
//
//void AwGun::SetAddPartsParams (  )
//{
//	static UFunction* pSetAddPartsParams = 0;
//	AwGun_execSetAddPartsParams_Parms parms;
//
//	if ( !pSetAddPartsParams )
//		pSetAddPartsParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.SetAddPartsParams" );
//
//	this->ProcessEvent ( pSetAddPartsParams, &parms, NULL );
//
//}
//
//void AwGun::ScopeAttached ( bool bEnabled )
//{
//	static UFunction* pScopeAttached = 0;
//	AwGun_execScopeAttached_Parms parms;
//
//	if ( !pScopeAttached )
//		pScopeAttached = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ScopeAttached" );
//
//	parms.bEnabled = bEnabled;
//	this->ProcessEvent ( pScopeAttached, &parms, NULL );
//
//}
//
//void AwGun::CalcSwayRot ( float fDeltaTime )
//{
//	static UFunction* pCalcSwayRot = 0;
//	AwGun_execCalcSwayRot_Parms parms;
//
//	if ( !pCalcSwayRot )
//		pCalcSwayRot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.CalcSwayRot" );
//
//	parms.fDeltaTime = fDeltaTime;
//	this->ProcessEvent ( pCalcSwayRot, &parms, NULL );
//
//}
//
//void AwGun::CalcSwayRot_Aim ( float fDeltaTime )
//{
//	static UFunction* pCalcSwayRot_Aim = 0;
//	AwGun_execCalcSwayRot_Aim_Parms parms;
//
//	if ( !pCalcSwayRot_Aim )
//		pCalcSwayRot_Aim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.CalcSwayRot_Aim" );
//
//	parms.fDeltaTime = fDeltaTime;
//	this->ProcessEvent ( pCalcSwayRot_Aim, &parms, NULL );
//
//}
//
//void AwGun::CalcFiringSwayRot ( float fDeltaTime )
//{
//	static UFunction* pCalcFiringSwayRot = 0;
//	AwGun_execCalcFiringSwayRot_Parms parms;
//
//	if ( !pCalcFiringSwayRot )
//		pCalcFiringSwayRot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.CalcFiringSwayRot" );
//
//	parms.fDeltaTime = fDeltaTime;
//	this->ProcessEvent ( pCalcFiringSwayRot, &parms, NULL );
//
//}
//
//void AwGun::CalcFiringSwayRot_Aim ( float fDeltaTime )
//{
//	static UFunction* pCalcFiringSwayRot_Aim = 0;
//	AwGun_execCalcFiringSwayRot_Aim_Parms parms;
//
//	if ( !pCalcFiringSwayRot_Aim )
//		pCalcFiringSwayRot_Aim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.CalcFiringSwayRot_Aim" );
//
//	parms.fDeltaTime = fDeltaTime;
//	this->ProcessEvent ( pCalcFiringSwayRot_Aim, &parms, NULL );
//
//}
//
//void AwGun::CalcStanceOffset ( float fDelta )
//{
//	static UFunction* pCalcStanceOffset = 0;
//	AwGun_execCalcStanceOffset_Parms parms;
//
//	if ( !pCalcStanceOffset )
//		pCalcStanceOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.CalcStanceOffset" );
//
//	parms.fDelta = fDelta;
//	this->ProcessEvent ( pCalcStanceOffset, &parms, NULL );
//
//}
//
//float AwGun::CalcDestPivot (  )
//{
//	static UFunction* pCalcDestPivot = 0;
//	AwGun_execCalcDestPivot_Parms parms;
//
//	if ( !pCalcDestPivot )
//		pCalcDestPivot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.CalcDestPivot" );
//
//	this->ProcessEvent ( pCalcDestPivot, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwGun::CalcPartsOffset (  )
//{
//	static UFunction* pCalcPartsOffset = 0;
//	AwGun_execCalcPartsOffset_Parms parms;
//
//	if ( !pCalcPartsOffset )
//		pCalcPartsOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.CalcPartsOffset" );
//
//	this->ProcessEvent ( pCalcPartsOffset, &parms, NULL );
//
//}
//
//void AwGun::SetAimDiff ( float InX, float InY, float InZ )
//{
//	static UFunction* pSetAimDiff = 0;
//	AwGun_execSetAimDiff_Parms parms;
//
//	if ( !pSetAimDiff )
//		pSetAimDiff = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.SetAimDiff" );
//
//	parms.InX = InX;
//	parms.InY = InY;
//	parms.InZ = InZ;
//	this->ProcessEvent ( pSetAimDiff, &parms, NULL );
//
//}
//
//bool AwGun::HasDotSight (  )
//{
//	static UFunction* pHasDotSight = 0;
//	AwGun_execHasDotSight_Parms parms;
//
//	if ( !pHasDotSight )
//		pHasDotSight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.HasDotSight" );
//
//	this->ProcessEvent ( pHasDotSight, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwGun::ApplyOffset (  )
//{
//	static UFunction* pApplyOffset = 0;
//	AwGun_execApplyOffset_Parms parms;
//
//	if ( !pApplyOffset )
//		pApplyOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ApplyOffset" );
//
//	this->ProcessEvent ( pApplyOffset, &parms, NULL );
//
//}
//
//void AwGun::ApplyOffset_Trans (  )
//{
//	static UFunction* pApplyOffset_Trans = 0;
//	AwGun_execApplyOffset_Trans_Parms parms;
//
//	if ( !pApplyOffset_Trans )
//		pApplyOffset_Trans = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ApplyOffset_Trans" );
//
//	this->ProcessEvent ( pApplyOffset_Trans, &parms, NULL );
//
//}
//
//void AwGun::ApplyOffset_Rot (  )
//{
//	static UFunction* pApplyOffset_Rot = 0;
//	AwGun_execApplyOffset_Rot_Parms parms;
//
//	if ( !pApplyOffset_Rot )
//		pApplyOffset_Rot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ApplyOffset_Rot" );
//
//	this->ProcessEvent ( pApplyOffset_Rot, &parms, NULL );
//
//}
//
//bool AwGun::IsAiming (  )
//{
//	static UFunction* pIsAiming = 0;
//	AwGun_execIsAiming_Parms parms;
//
//	if ( !pIsAiming )
//		pIsAiming = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.IsAiming" );
//
//	this->ProcessEvent ( pIsAiming, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwGun::eventRenderOverlays ( class UCanvas* Canvas )
//{
//	static UFunction* pRenderOverlays = 0;
//	AwGun_eventRenderOverlays_Parms parms;
//
//	if ( !pRenderOverlays )
//		pRenderOverlays = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.RenderOverlays" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pRenderOverlays, &parms, NULL );
//
//}
//
//void AwGun::RenderScope ( class UCanvas* Canv )
//{
//	static UFunction* pRenderScope = 0;
//	AwGun_execRenderScope_Parms parms;
//
//	if ( !pRenderScope )
//		pRenderScope = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.RenderScope" );
//
//	parms.Canv = Canv;
//	this->ProcessEvent ( pRenderScope, &parms, NULL );
//
//}
//
//void AwGun::ForceRenderOverlays ( class UCanvas* Canv )
//{
//	static UFunction* pForceRenderOverlays = 0;
//	AwGun_execForceRenderOverlays_Parms parms;
//
//	if ( !pForceRenderOverlays )
//		pForceRenderOverlays = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ForceRenderOverlays" );
//
//	parms.Canv = Canv;
//	this->ProcessEvent ( pForceRenderOverlays, &parms, NULL );
//
//}
//
//void AwGun::FireOne ( int iFireMode )
//{
//	static UFunction* pFireOne = 0;
//	AwGun_execFireOne_Parms parms;
//
//	if ( !pFireOne )
//		pFireOne = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.FireOne" );
//
//	parms.iFireMode = iFireMode;
//	this->ProcessEvent ( pFireOne, &parms, NULL );
//
//}
//
//bool AwGun::PutDown (  )
//{
//	static UFunction* pPutDown = 0;
//	AwGun_execPutDown_Parms parms;
//
//	if ( !pPutDown )
//		pPutDown = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.PutDown" );
//
//	this->ProcessEvent ( pPutDown, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwGun::BringUp ( class AwWeapon* PrevWeapon )
//{
//	static UFunction* pBringUp = 0;
//	AwGun_execBringUp_Parms parms;
//
//	if ( !pBringUp )
//		pBringUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.BringUp" );
//
//	parms.PrevWeapon = PrevWeapon;
//	this->ProcessEvent ( pBringUp, &parms, NULL );
//
//}
//
//void AwGun::eventDestroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AwGun_eventDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AwGun::SetResParams ( class UClass* wRes )
//{
//	static UFunction* pSetResParams = 0;
//	AwGun_execSetResParams_Parms parms;
//
//	if ( !pSetResParams )
//		pSetResParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.SetResParams" );
//
//	parms.wRes = wRes;
//	this->ProcessEvent ( pSetResParams, &parms, NULL );
//
//}
//
//void AwGun::SetBaseParams ( class UwWeaponBaseParams* wBase )
//{
//	static UFunction* pSetBaseParams = 0;
//	AwGun_execSetBaseParams_Parms parms;
//
//	if ( !pSetBaseParams )
//		pSetBaseParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.SetBaseParams" );
//
//	parms.wBase = wBase;
//	this->ProcessEvent ( pSetBaseParams, &parms, NULL );
//
//}
//
//void AwGun::FillToDefaultAmmo (  )
//{
//	static UFunction* pFillToDefaultAmmo = 0;
//	AwGun_execFillToDefaultAmmo_Parms parms;
//
//	if ( !pFillToDefaultAmmo )
//		pFillToDefaultAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.FillToDefaultAmmo" );
//
//	this->ProcessEvent ( pFillToDefaultAmmo, &parms, NULL );
//
//}
//
//void AwGun::FillToInitialAmmo (  )
//{
//	static UFunction* pFillToInitialAmmo = 0;
//	AwGun_execFillToInitialAmmo_Parms parms;
//
//	if ( !pFillToInitialAmmo )
//		pFillToInitialAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.FillToInitialAmmo" );
//
//	this->ProcessEvent ( pFillToInitialAmmo, &parms, NULL );
//
//}
//
//void AwGun::ReloadComplete (  )
//{
//	static UFunction* pReloadComplete = 0;
//	AwGun_execReloadComplete_Parms parms;
//
//	if ( !pReloadComplete )
//		pReloadComplete = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ReloadComplete" );
//
//	this->ProcessEvent ( pReloadComplete, &parms, NULL );
//
//}
//
//void AwGun::eventNotifyReloaded (  )
//{
//	static UFunction* pNotifyReloaded = 0;
//	AwGun_eventNotifyReloaded_Parms parms;
//
//	if ( !pNotifyReloaded )
//		pNotifyReloaded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.NotifyReloaded" );
//
//	this->ProcessEvent ( pNotifyReloaded, &parms, NULL );
//
//}
//
//void AwGun::GetAmmoCount ( float* MaxAmmoPrimary, float* CurAmmoPrimary )
//{
//	static UFunction* pGetAmmoCount = 0;
//	AwGun_execGetAmmoCount_Parms parms;
//
//	if ( !pGetAmmoCount )
//		pGetAmmoCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.GetAmmoCount" );
//
//	parms.MaxAmmoPrimary = *MaxAmmoPrimary;
//	parms.CurAmmoPrimary = *CurAmmoPrimary;
//	this->ProcessEvent ( pGetAmmoCount, &parms, NULL );
//
//	*MaxAmmoPrimary = parms.MaxAmmoPrimary;
//	*CurAmmoPrimary = parms.CurAmmoPrimary;
//}
//
//void AwGun::StoreAmmo (  )
//{
//	static UFunction* pStoreAmmo = 0;
//	AwGun_execStoreAmmo_Parms parms;
//
//	if ( !pStoreAmmo )
//		pStoreAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.StoreAmmo" );
//
//	this->ProcessEvent ( pStoreAmmo, &parms, NULL );
//
//}
//
//void AwGun::ServerReload (  )
//{
//	static UFunction* pServerReload = 0;
//	AwGun_execServerReload_Parms parms;
//
//	if ( !pServerReload )
//		pServerReload = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ServerReload" );
//
//	this->ProcessEvent ( pServerReload, &parms, NULL );
//
//}
//
//bool AwGun::Reload (  )
//{
//	static UFunction* pReload = 0;
//	AwGun_execReload_Parms parms;
//
//	if ( !pReload )
//		pReload = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.Reload" );
//
//	this->ProcessEvent ( pReload, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwGun::ProcessMoveAni (  )
//{
//	static UFunction* pProcessMoveAni = 0;
//	AwGun_execProcessMoveAni_Parms parms;
//
//	if ( !pProcessMoveAni )
//		pProcessMoveAni = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ProcessMoveAni" );
//
//	this->ProcessEvent ( pProcessMoveAni, &parms, NULL );
//
//}
//
//void AwGun::PlayIdle (  )
//{
//	static UFunction* pPlayIdle = 0;
//	AwGun_execPlayIdle_Parms parms;
//
//	if ( !pPlayIdle )
//		pPlayIdle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.PlayIdle" );
//
//	this->ProcessEvent ( pPlayIdle, &parms, NULL );
//
//}
//
//void AwGun::ForcePlayIdle (  )
//{
//	static UFunction* pForcePlayIdle = 0;
//	AwGun_execForcePlayIdle_Parms parms;
//
//	if ( !pForcePlayIdle )
//		pForcePlayIdle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ForcePlayIdle" );
//
//	this->ProcessEvent ( pForcePlayIdle, &parms, NULL );
//
//}
//
//void AwGun::AnimEnd ( int Channel )
//{
//	static UFunction* pAnimEnd = 0;
//	AwGun_execAnimEnd_Parms parms;
//
//	if ( !pAnimEnd )
//		pAnimEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.AnimEnd" );
//
//	parms.Channel = Channel;
//	this->ProcessEvent ( pAnimEnd, &parms, NULL );
//
//}
//
//void AwGun::OutOfAmmo (  )
//{
//	static UFunction* pOutOfAmmo = 0;
//	AwGun_execOutOfAmmo_Parms parms;
//
//	if ( !pOutOfAmmo )
//		pOutOfAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.OutOfAmmo" );
//
//	this->ProcessEvent ( pOutOfAmmo, &parms, NULL );
//
//}
//
//bool AwGun::CheckOutOfAmmo (  )
//{
//	static UFunction* pCheckOutOfAmmo = 0;
//	AwGun_execCheckOutOfAmmo_Parms parms;
//
//	if ( !pCheckOutOfAmmo )
//		pCheckOutOfAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.CheckOutOfAmmo" );
//
//	this->ProcessEvent ( pCheckOutOfAmmo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwGun::CheckActioned (  )
//{
//	static UFunction* pCheckActioned = 0;
//	AwGun_execCheckActioned_Parms parms;
//
//	if ( !pCheckActioned )
//		pCheckActioned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.CheckActioned" );
//
//	this->ProcessEvent ( pCheckActioned, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwGun::SeverConsumeAmmo ( int Mode, float Load, bool bAmountNeededIsMax )
//{
//	static UFunction* pSeverConsumeAmmo = 0;
//	AwGun_execSeverConsumeAmmo_Parms parms;
//
//	if ( !pSeverConsumeAmmo )
//		pSeverConsumeAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.SeverConsumeAmmo" );
//
//	parms.Mode = Mode;
//	parms.Load = Load;
//	parms.bAmountNeededIsMax = bAmountNeededIsMax;
//	this->ProcessEvent ( pSeverConsumeAmmo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwGun::ClientForceAmmoUpdate ( int Mode, int NewAmount )
//{
//	static UFunction* pClientForceAmmoUpdate = 0;
//	AwGun_execClientForceAmmoUpdate_Parms parms;
//
//	if ( !pClientForceAmmoUpdate )
//		pClientForceAmmoUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ClientForceAmmoUpdate" );
//
//	parms.Mode = Mode;
//	parms.NewAmount = NewAmount;
//	this->ProcessEvent ( pClientForceAmmoUpdate, &parms, NULL );
//
//}
//
//int AwGun::AmmoAmount ( int Mode )
//{
//	static UFunction* pAmmoAmount = 0;
//	AwGun_execAmmoAmount_Parms parms;
//
//	if ( !pAmmoAmount )
//		pAmmoAmount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.AmmoAmount" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pAmmoAmount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwGun::IsReloading (  )
//{
//	static UFunction* pIsReloading = 0;
//	AwGun_execIsReloading_Parms parms;
//
//	if ( !pIsReloading )
//		pIsReloading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.IsReloading" );
//
//	this->ProcessEvent ( pIsReloading, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char AwGun::IsRechambering (  )
//{
//	static UFunction* pIsRechambering = 0;
//	AwGun_execIsRechambering_Parms parms;
//
//	if ( !pIsRechambering )
//		pIsRechambering = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.IsRechambering" );
//
//	this->ProcessEvent ( pIsRechambering, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwGun::ServerAim ( bool bValue )
//{
//	static UFunction* pServerAim = 0;
//	AwGun_execServerAim_Parms parms;
//
//	if ( !pServerAim )
//		pServerAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ServerAim" );
//
//	parms.bValue = bValue;
//	this->ProcessEvent ( pServerAim, &parms, NULL );
//
//}
//
//void AwGun::PlayAim ( bool bUpOrDown )
//{
//	static UFunction* pPlayAim = 0;
//	AwGun_execPlayAim_Parms parms;
//
//	if ( !pPlayAim )
//		pPlayAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.PlayAim" );
//
//	parms.bUpOrDown = bUpOrDown;
//	this->ProcessEvent ( pPlayAim, &parms, NULL );
//
//}
//
//bool AwGun::eventReadyToFire ( int Mode )
//{
//	static UFunction* pReadyToFire = 0;
//	AwGun_eventReadyToFire_Parms parms;
//
//	if ( !pReadyToFire )
//		pReadyToFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ReadyToFire" );
//
//	parms.Mode = Mode;
//	this->ProcessEvent ( pReadyToFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwGun::CheckAim (  )
//{
//	static UFunction* pCheckAim = 0;
//	AwGun_execCheckAim_Parms parms;
//
//	if ( !pCheckAim )
//		pCheckAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.CheckAim" );
//
//	this->ProcessEvent ( pCheckAim, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwGun::SetAim ( bool bAim )
//{
//	static UFunction* pSetAim = 0;
//	AwGun_execSetAim_Parms parms;
//
//	if ( !pSetAim )
//		pSetAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.SetAim" );
//
//	parms.bAim = bAim;
//	this->ProcessEvent ( pSetAim, &parms, NULL );
//
//}
//
//void AwGun::eventWeaponTick ( float dt )
//{
//	static UFunction* pWeaponTick = 0;
//	AwGun_eventWeaponTick_Parms parms;
//
//	if ( !pWeaponTick )
//		pWeaponTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.WeaponTick" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pWeaponTick, &parms, NULL );
//
//}
//
//void AwGun::ServerMeleeFire (  )
//{
//	static UFunction* pServerMeleeFire = 0;
//	AwGun_execServerMeleeFire_Parms parms;
//
//	if ( !pServerMeleeFire )
//		pServerMeleeFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ServerMeleeFire" );
//
//	this->ProcessEvent ( pServerMeleeFire, &parms, NULL );
//
//}
//
//void AwGun::ResetAim (  )
//{
//	static UFunction* pResetAim = 0;
//	AwGun_execResetAim_Parms parms;
//
//	if ( !pResetAim )
//		pResetAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ResetAim" );
//
//	this->ProcessEvent ( pResetAim, &parms, NULL );
//
//}
//
//void AwGun::ClientMeleeFire (  )
//{
//	static UFunction* pClientMeleeFire = 0;
//	AwGun_execClientMeleeFire_Parms parms;
//
//	if ( !pClientMeleeFire )
//		pClientMeleeFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ClientMeleeFire" );
//
//	this->ProcessEvent ( pClientMeleeFire, &parms, NULL );
//
//}
//
//void AwGun::ActiveMeleeDelay (  )
//{
//	static UFunction* pActiveMeleeDelay = 0;
//	AwGun_execActiveMeleeDelay_Parms parms;
//
//	if ( !pActiveMeleeDelay )
//		pActiveMeleeDelay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.ActiveMeleeDelay" );
//
//	this->ProcessEvent ( pActiveMeleeDelay, &parms, NULL );
//
//}
//
//void AwGun::SetActioned (  )
//{
//	static UFunction* pSetActioned = 0;
//	AwGun_execSetActioned_Parms parms;
//
//	if ( !pSetActioned )
//		pSetActioned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.SetActioned" );
//
//	this->ProcessEvent ( pSetActioned, &parms, NULL );
//
//}
//
//void AwGun::SetUnactioned (  )
//{
//	static UFunction* pSetUnactioned = 0;
//	AwGun_execSetUnactioned_Parms parms;
//
//	if ( !pSetUnactioned )
//		pSetUnactioned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGun.SetUnactioned" );
//
//	this->ProcessEvent ( pSetUnactioned, &parms, NULL );
//
//}
//
//void UwSkillBase::UseSupplyItem ( unsigned char byType )
//{
//	static UFunction* pUseSupplyItem = 0;
//	UwSkillBase_execUseSupplyItem_Parms parms;
//
//	if ( !pUseSupplyItem )
//		pUseSupplyItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkillBase.UseSupplyItem" );
//
//	parms.byType = byType;
//	this->ProcessEvent ( pUseSupplyItem, &parms, NULL );
//
//}
//
//void UwSkillBase::AddSupplyItem ( unsigned char byType )
//{
//	static UFunction* pAddSupplyItem = 0;
//	UwSkillBase_execAddSupplyItem_Parms parms;
//
//	if ( !pAddSupplyItem )
//		pAddSupplyItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkillBase.AddSupplyItem" );
//
//	parms.byType = byType;
//	this->ProcessEvent ( pAddSupplyItem, &parms, NULL );
//
//}
//
//void UwSkillBase::UsedbyWeapon ( int iWeaponID )
//{
//	static UFunction* pUsedbyWeapon = 0;
//	UwSkillBase_execUsedbyWeapon_Parms parms;
//
//	if ( !pUsedbyWeapon )
//		pUsedbyWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkillBase.UsedbyWeapon" );
//
//	parms.iWeaponID = iWeaponID;
//	this->ProcessEvent ( pUsedbyWeapon, &parms, NULL );
//
//}
//
//void UwSkillBase::RemoveSkill ( int iSkillID, class UwGameManager* gm )
//{
//	static UFunction* pRemoveSkill = 0;
//	UwSkillBase_execRemoveSkill_Parms parms;
//
//	if ( !pRemoveSkill )
//		pRemoveSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkillBase.RemoveSkill" );
//
//	parms.iSkillID = iSkillID;
//	parms.gm = gm;
//	this->ProcessEvent ( pRemoveSkill, &parms, NULL );
//
//}
//
//void UwSkillBase::AddSkill ( int iSkillID, class UwGameManager* gm )
//{
//	static UFunction* pAddSkill = 0;
//	UwSkillBase_execAddSkill_Parms parms;
//
//	if ( !pAddSkill )
//		pAddSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkillBase.AddSkill" );
//
//	parms.iSkillID = iSkillID;
//	parms.gm = gm;
//	this->ProcessEvent ( pAddSkill, &parms, NULL );
//
//}
//
//void UwSkillBase::ResetSkillState (  )
//{
//	static UFunction* pResetSkillState = 0;
//	UwSkillBase_execResetSkillState_Parms parms;
//
//	if ( !pResetSkillState )
//		pResetSkillState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkillBase.ResetSkillState" );
//
//	this->ProcessEvent ( pResetSkillState, &parms, NULL );
//
//}
//
//void UwSkillBase::DeadPlayer (  )
//{
//	static UFunction* pDeadPlayer = 0;
//	UwSkillBase_execDeadPlayer_Parms parms;
//
//	if ( !pDeadPlayer )
//		pDeadPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkillBase.DeadPlayer" );
//
//	this->ProcessEvent ( pDeadPlayer, &parms, NULL );
//
//}
//
//void UwSkillBase::UpdateProcess (  )
//{
//	static UFunction* pUpdateProcess = 0;
//	UwSkillBase_execUpdateProcess_Parms parms;
//
//	if ( !pUpdateProcess )
//		pUpdateProcess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkillBase.UpdateProcess" );
//
//	this->ProcessEvent ( pUpdateProcess, &parms, NULL );
//
//}
//
//void UwSkillBase::ForceResetSkillUpdateCall (  )
//{
//	static UFunction* pForceResetSkillUpdateCall = 0;
//	UwSkillBase_execForceResetSkillUpdateCall_Parms parms;
//
//	if ( !pForceResetSkillUpdateCall )
//		pForceResetSkillUpdateCall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkillBase.ForceResetSkillUpdateCall" );
//
//	this->ProcessEvent ( pForceResetSkillUpdateCall, &parms, NULL );
//
//}
//
//void UwSkillBase::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	UwSkillBase_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkillBase.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void ABroadcastHandler::eventDestroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	ABroadcastHandler_eventDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//bool ABroadcastHandler::AcceptBroadcastVoice ( class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI )
//{
//	static UFunction* pAcceptBroadcastVoice = 0;
//	ABroadcastHandler_execAcceptBroadcastVoice_Parms parms;
//
//	if ( !pAcceptBroadcastVoice )
//		pAcceptBroadcastVoice = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.AcceptBroadcastVoice" );
//
//	parms.Receiver = Receiver;
//	parms.SenderPRI = SenderPRI;
//	this->ProcessEvent ( pAcceptBroadcastVoice, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ABroadcastHandler::AcceptBroadcastSpeech ( class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI )
//{
//	static UFunction* pAcceptBroadcastSpeech = 0;
//	ABroadcastHandler_execAcceptBroadcastSpeech_Parms parms;
//
//	if ( !pAcceptBroadcastSpeech )
//		pAcceptBroadcastSpeech = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.AcceptBroadcastSpeech" );
//
//	parms.Receiver = Receiver;
//	parms.SenderPRI = SenderPRI;
//	this->ProcessEvent ( pAcceptBroadcastSpeech, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ABroadcastHandler::AcceptBroadcastLocalized ( class APlayerController* Receiver, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* obj )
//{
//	static UFunction* pAcceptBroadcastLocalized = 0;
//	ABroadcastHandler_execAcceptBroadcastLocalized_Parms parms;
//
//	if ( !pAcceptBroadcastLocalized )
//		pAcceptBroadcastLocalized = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.AcceptBroadcastLocalized" );
//
//	parms.Receiver = Receiver;
//	parms.Sender = Sender;
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.obj = obj;
//	this->ProcessEvent ( pAcceptBroadcastLocalized, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ABroadcastHandler::AcceptBroadcastText ( class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI, struct FName Type, struct FString* Msg )
//{
//	static UFunction* pAcceptBroadcastText = 0;
//	ABroadcastHandler_execAcceptBroadcastText_Parms parms;
//
//	if ( !pAcceptBroadcastText )
//		pAcceptBroadcastText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.AcceptBroadcastText" );
//
//	parms.Receiver = Receiver;
//	parms.SenderPRI = SenderPRI;
//	parms.Type = Type;
//	this->ProcessEvent ( pAcceptBroadcastText, &parms, NULL );
//
//	*Msg = parms.Msg;
//	return parms.ReturnValue;
//}
//
//void ABroadcastHandler::RegisterBroadcastHandler ( class ABroadcastHandler* NewBH )
//{
//	static UFunction* pRegisterBroadcastHandler = 0;
//	ABroadcastHandler_execRegisterBroadcastHandler_Parms parms;
//
//	if ( !pRegisterBroadcastHandler )
//		pRegisterBroadcastHandler = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.RegisterBroadcastHandler" );
//
//	parms.NewBH = NewBH;
//	this->ProcessEvent ( pRegisterBroadcastHandler, &parms, NULL );
//
//}
//
//void ABroadcastHandler::eventAllowBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pAllowBroadcastLocalized = 0;
//	ABroadcastHandler_eventAllowBroadcastLocalized_Parms parms;
//
//	if ( !pAllowBroadcastLocalized )
//		pAllowBroadcastLocalized = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.AllowBroadcastLocalized" );
//
//	parms.Sender = Sender;
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pAllowBroadcastLocalized, &parms, NULL );
//
//}
//
//void ABroadcastHandler::BroadcastTeam ( class AController* Sender, struct FString Msg, struct FName Type, unsigned char mType )
//{
//	static UFunction* pBroadcastTeam = 0;
//	ABroadcastHandler_execBroadcastTeam_Parms parms;
//
//	if ( !pBroadcastTeam )
//		pBroadcastTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.BroadcastTeam" );
//
//	parms.Sender = Sender;
//	parms.Msg = Msg;
//	parms.Type = Type;
//	parms.mType = mType;
//	this->ProcessEvent ( pBroadcastTeam, &parms, NULL );
//
//}
//
//void ABroadcastHandler::Broadcast ( class AActor* Sender, struct FString Msg, struct FName Type, unsigned char mType )
//{
//	static UFunction* pBroadcast = 0;
//	ABroadcastHandler_execBroadcast_Parms parms;
//
//	if ( !pBroadcast )
//		pBroadcast = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.Broadcast" );
//
//	parms.Sender = Sender;
//	parms.Msg = Msg;
//	parms.Type = Type;
//	parms.mType = mType;
//	this->ProcessEvent ( pBroadcast, &parms, NULL );
//
//}
//
//void ABroadcastHandler::BroadcastLocalized ( class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pBroadcastLocalized = 0;
//	ABroadcastHandler_execBroadcastLocalized_Parms parms;
//
//	if ( !pBroadcastLocalized )
//		pBroadcastLocalized = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.BroadcastLocalized" );
//
//	parms.Sender = Sender;
//	parms.Receiver = Receiver;
//	parms.Message = Message;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pBroadcastLocalized, &parms, NULL );
//
//}
//
//void ABroadcastHandler::BroadcastText ( class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, struct FString Msg, struct FName Type )
//{
//	static UFunction* pBroadcastText = 0;
//	ABroadcastHandler_execBroadcastText_Parms parms;
//
//	if ( !pBroadcastText )
//		pBroadcastText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.BroadcastText" );
//
//	parms.SenderPRI = SenderPRI;
//	parms.Receiver = Receiver;
//	parms.Msg = Msg;
//	parms.Type = Type;
//	this->ProcessEvent ( pBroadcastText, &parms, NULL );
//
//}
//
//bool ABroadcastHandler::HandlerAllowsBroadcast ( class AActor* broadcaster, int SentTextNum )
//{
//	static UFunction* pHandlerAllowsBroadcast = 0;
//	ABroadcastHandler_execHandlerAllowsBroadcast_Parms parms;
//
//	if ( !pHandlerAllowsBroadcast )
//		pHandlerAllowsBroadcast = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.HandlerAllowsBroadcast" );
//
//	parms.broadcaster = broadcaster;
//	parms.SentTextNum = SentTextNum;
//	this->ProcessEvent ( pHandlerAllowsBroadcast, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool ABroadcastHandler::AllowsBroadcast ( class AActor* broadcaster, int Len )
//{
//	static UFunction* pAllowsBroadcast = 0;
//	ABroadcastHandler_execAllowsBroadcast_Parms parms;
//
//	if ( !pAllowsBroadcast )
//		pAllowsBroadcast = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.AllowsBroadcast" );
//
//	parms.broadcaster = broadcaster;
//	parms.Len = Len;
//	this->ProcessEvent ( pAllowsBroadcast, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString ABroadcastHandler::eventGetDescriptionText ( struct FString PropName )
//{
//	static UFunction* pGetDescriptionText = 0;
//	ABroadcastHandler_eventGetDescriptionText_Parms parms;
//
//	if ( !pGetDescriptionText )
//		pGetDescriptionText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.GetDescriptionText" );
//
//	parms.PropName = PropName;
//	this->ProcessEvent ( pGetDescriptionText, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void ABroadcastHandler::FillPlayInfo ( class UPlayInfo* PlayInfo )
//{
//	static UFunction* pFillPlayInfo = 0;
//	ABroadcastHandler_execFillPlayInfo_Parms parms;
//
//	if ( !pFillPlayInfo )
//		pFillPlayInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.FillPlayInfo" );
//
//	parms.PlayInfo = PlayInfo;
//	this->ProcessEvent ( pFillPlayInfo, &parms, NULL );
//
//}
//
//void ABroadcastHandler::UpdateSentText (  )
//{
//	static UFunction* pUpdateSentText = 0;
//	ABroadcastHandler_execUpdateSentText_Parms parms;
//
//	if ( !pUpdateSentText )
//		pUpdateSentText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BroadcastHandler.UpdateSentText" );
//
//	this->ProcessEvent ( pUpdateSentText, &parms, NULL );
//
//}
//
//bool AVotingReplicationInfoBase::MatchSetupEnabled (  )
//{
//	static UFunction* pMatchSetupEnabled = 0;
//	AVotingReplicationInfoBase_execMatchSetupEnabled_Parms parms;
//
//	if ( !pMatchSetupEnabled )
//		pMatchSetupEnabled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingReplicationInfoBase.MatchSetupEnabled" );
//
//	this->ProcessEvent ( pMatchSetupEnabled, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVotingReplicationInfoBase::KickVoteEnabled (  )
//{
//	static UFunction* pKickVoteEnabled = 0;
//	AVotingReplicationInfoBase_execKickVoteEnabled_Parms parms;
//
//	if ( !pKickVoteEnabled )
//		pKickVoteEnabled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingReplicationInfoBase.KickVoteEnabled" );
//
//	this->ProcessEvent ( pKickVoteEnabled, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVotingReplicationInfoBase::MapVoteEnabled (  )
//{
//	static UFunction* pMapVoteEnabled = 0;
//	AVotingReplicationInfoBase_execMapVoteEnabled_Parms parms;
//
//	if ( !pMapVoteEnabled )
//		pMapVoteEnabled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingReplicationInfoBase.MapVoteEnabled" );
//
//	this->ProcessEvent ( pMapVoteEnabled, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVotingReplicationInfoBase::MatchSetupLocked (  )
//{
//	static UFunction* pMatchSetupLocked = 0;
//	AVotingReplicationInfoBase_execMatchSetupLocked_Parms parms;
//
//	if ( !pMatchSetupLocked )
//		pMatchSetupLocked = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingReplicationInfoBase.MatchSetupLocked" );
//
//	this->ProcessEvent ( pMatchSetupLocked, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVotingReplicationInfoBase::SendResponse ( struct FString Response )
//{
//	static UFunction* pSendResponse = 0;
//	AVotingReplicationInfoBase_execSendResponse_Parms parms;
//
//	if ( !pSendResponse )
//		pSendResponse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingReplicationInfoBase.SendResponse" );
//
//	parms.Response = Response;
//	this->ProcessEvent ( pSendResponse, &parms, NULL );
//
//}
//
//void AVotingReplicationInfoBase::SendCommand ( struct FString Cmd )
//{
//	static UFunction* pSendCommand = 0;
//	AVotingReplicationInfoBase_execSendCommand_Parms parms;
//
//	if ( !pSendCommand )
//		pSendCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingReplicationInfoBase.SendCommand" );
//
//	parms.Cmd = Cmd;
//	this->ProcessEvent ( pSendCommand, &parms, NULL );
//
//}
//
//void AVotingReplicationInfoBase::ProcessResponse ( struct FString Response )
//{
//	static UFunction* pProcessResponse = 0;
//	AVotingReplicationInfoBase_execProcessResponse_Parms parms;
//
//	if ( !pProcessResponse )
//		pProcessResponse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingReplicationInfoBase.ProcessResponse" );
//
//	parms.Response = Response;
//	this->ProcessEvent ( pProcessResponse, &parms, NULL );
//
//}
//
//void AVotingReplicationInfoBase::ProcessCommand ( struct FString Command )
//{
//	static UFunction* pProcessCommand = 0;
//	AVotingReplicationInfoBase_execProcessCommand_Parms parms;
//
//	if ( !pProcessCommand )
//		pProcessCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingReplicationInfoBase.ProcessCommand" );
//
//	parms.Command = Command;
//	this->ProcessEvent ( pProcessCommand, &parms, NULL );
//
//}
//
//void AScoreBoard::NextStats (  )
//{
//	static UFunction* pNextStats = 0;
//	AScoreBoard_execNextStats_Parms parms;
//
//	if ( !pNextStats )
//		pNextStats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.NextStats" );
//
//	this->ProcessEvent ( pNextStats, &parms, NULL );
//
//}
//
//void AScoreBoard::SortPRIArray (  )
//{
//	static UFunction* pSortPRIArray = 0;
//	AScoreBoard_execSortPRIArray_Parms parms;
//
//	if ( !pSortPRIArray )
//		pSortPRIArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.SortPRIArray" );
//
//	this->ProcessEvent ( pSortPRIArray, &parms, NULL );
//
//}
//
//bool AScoreBoard::InOrder ( class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2 )
//{
//	static UFunction* pInOrder = 0;
//	AScoreBoard_execInOrder_Parms parms;
//
//	if ( !pInOrder )
//		pInOrder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.InOrder" );
//
//	parms.P1 = P1;
//	parms.P2 = P2;
//	this->ProcessEvent ( pInOrder, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AScoreBoard::UpdateScoreBoard ( class UCanvas* Canvas )
//{
//	static UFunction* pUpdateScoreBoard = 0;
//	AScoreBoard_execUpdateScoreBoard_Parms parms;
//
//	if ( !pUpdateScoreBoard )
//		pUpdateScoreBoard = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.UpdateScoreBoard" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pUpdateScoreBoard, &parms, NULL );
//
//}
//
//struct FString AScoreBoard::FormatTime ( int Seconds )
//{
//	static UFunction* pFormatTime = 0;
//	AScoreBoard_execFormatTime_Parms parms;
//
//	if ( !pFormatTime )
//		pFormatTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.FormatTime" );
//
//	parms.Seconds = Seconds;
//	this->ProcessEvent ( pFormatTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AScoreBoard::UpdateGRI (  )
//{
//	static UFunction* pUpdateGRI = 0;
//	AScoreBoard_execUpdateGRI_Parms parms;
//
//	if ( !pUpdateGRI )
//		pUpdateGRI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.UpdateGRI" );
//
//	this->ProcessEvent ( pUpdateGRI, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AScoreBoard::eventDrawMiniMap ( class UCanvas* C )
//{
//	static UFunction* pDrawMiniMap = 0;
//	AScoreBoard_eventDrawMiniMap_Parms parms;
//
//	if ( !pDrawMiniMap )
//		pDrawMiniMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.DrawMiniMap" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawMiniMap, &parms, NULL );
//
//}
//
//void AScoreBoard::eventDrawGMUserBoard ( class UCanvas* C )
//{
//	static UFunction* pDrawGMUserBoard = 0;
//	AScoreBoard_eventDrawGMUserBoard_Parms parms;
//
//	if ( !pDrawGMUserBoard )
//		pDrawGMUserBoard = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.DrawGMUserBoard" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawGMUserBoard, &parms, NULL );
//
//}
//
//void AScoreBoard::eventDrawScoreboard ( class UCanvas* C )
//{
//	static UFunction* pDrawScoreboard = 0;
//	AScoreBoard_eventDrawScoreboard_Parms parms;
//
//	if ( !pDrawScoreboard )
//		pDrawScoreboard = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.DrawScoreboard" );
//
//	parms.C = C;
//	this->ProcessEvent ( pDrawScoreboard, &parms, NULL );
//
//}
//
//void AScoreBoard::Init (  )
//{
//	static UFunction* pInit = 0;
//	AScoreBoard_execInit_Parms parms;
//
//	if ( !pInit )
//		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.Init" );
//
//	this->ProcessEvent ( pInit, &parms, NULL );
//
//}
//
//struct FString AScoreBoard::InitTitle (  )
//{
//	static UFunction* pInitTitle = 0;
//	AScoreBoard_execInitTitle_Parms parms;
//
//	if ( !pInitTitle )
//		pInitTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.InitTitle" );
//
//	this->ProcessEvent ( pInitTitle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AScoreBoard::InitGRI (  )
//{
//	static UFunction* pInitGRI = 0;
//	AScoreBoard_execInitGRI_Parms parms;
//
//	if ( !pInitGRI )
//		pInitGRI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.InitGRI" );
//
//	this->ProcessEvent ( pInitGRI, &parms, NULL );
//
//}
//
//class UFont* AScoreBoard::GetSmallFontFor ( int ScreenWidth, int offset )
//{
//	static UFunction* pGetSmallFontFor = 0;
//	AScoreBoard_execGetSmallFontFor_Parms parms;
//
//	if ( !pGetSmallFontFor )
//		pGetSmallFontFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.GetSmallFontFor" );
//
//	parms.ScreenWidth = ScreenWidth;
//	parms.offset = offset;
//	this->ProcessEvent ( pGetSmallFontFor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AScoreBoard::HaveHalfFont ( class UCanvas* Canvas, int offset )
//{
//	static UFunction* pHaveHalfFont = 0;
//	AScoreBoard_execHaveHalfFont_Parms parms;
//
//	if ( !pHaveHalfFont )
//		pHaveHalfFont = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.HaveHalfFont" );
//
//	parms.Canvas = Canvas;
//	parms.offset = offset;
//	this->ProcessEvent ( pHaveHalfFont, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UFont* AScoreBoard::GetSmallerFontFor ( class UCanvas* Canvas, int offset )
//{
//	static UFunction* pGetSmallerFontFor = 0;
//	AScoreBoard_execGetSmallerFontFor_Parms parms;
//
//	if ( !pGetSmallerFontFor )
//		pGetSmallerFontFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.GetSmallerFontFor" );
//
//	parms.Canvas = Canvas;
//	parms.offset = offset;
//	this->ProcessEvent ( pGetSmallerFontFor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AScoreBoard::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AScoreBoard_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ScoreBoard.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//int AAccessControl::CheckID ( struct FString CDHash )
//{
//	static UFunction* pCheckID = 0;
//	AAccessControl_execCheckID_Parms parms;
//
//	if ( !pCheckID )
//		pCheckID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.CheckID" );
//
//	parms.CDHash = CDHash;
//	this->ProcessEvent ( pCheckID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AAccessControl::eventGetDescriptionText ( struct FString PropName )
//{
//	static UFunction* pGetDescriptionText = 0;
//	AAccessControl_eventGetDescriptionText_Parms parms;
//
//	if ( !pGetDescriptionText )
//		pGetDescriptionText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.GetDescriptionText" );
//
//	parms.PropName = PropName;
//	this->ProcessEvent ( pGetDescriptionText, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAccessControl::FillPlayInfo ( class UPlayInfo* PlayInfo )
//{
//	static UFunction* pFillPlayInfo = 0;
//	AAccessControl_execFillPlayInfo_Parms parms;
//
//	if ( !pFillPlayInfo )
//		pFillPlayInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.FillPlayInfo" );
//
//	parms.PlayInfo = PlayInfo;
//	this->ProcessEvent ( pFillPlayInfo, &parms, NULL );
//
//}
//
//bool AAccessControl::AllowPriv ( struct FString priv )
//{
//	static UFunction* pAllowPriv = 0;
//	AAccessControl_execAllowPriv_Parms parms;
//
//	if ( !pAllowPriv )
//		pAllowPriv = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.AllowPriv" );
//
//	parms.priv = priv;
//	this->ProcessEvent ( pAllowPriv, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAccessControl::CanPerform ( class APlayerController* P, struct FString Action )
//{
//	static UFunction* pCanPerform = 0;
//	AAccessControl_execCanPerform_Parms parms;
//
//	if ( !pCanPerform )
//		pCanPerform = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.CanPerform" );
//
//	parms.P = P;
//	parms.Action = Action;
//	this->ProcessEvent ( pCanPerform, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AAccessControl::CheckIPPolicy ( struct FString Address, bool bSilent )
//{
//	static UFunction* pCheckIPPolicy = 0;
//	AAccessControl_execCheckIPPolicy_Parms parms;
//
//	if ( !pCheckIPPolicy )
//		pCheckIPPolicy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.CheckIPPolicy" );
//
//	parms.Address = Address;
//	parms.bSilent = bSilent;
//	this->ProcessEvent ( pCheckIPPolicy, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAccessControl::eventPreLogin ( struct FString Options, struct FString Address, struct FString PlayerID, bool bSpectator, struct FString* Error, struct FString* FailCode )
//{
//	static UFunction* pPreLogin = 0;
//	AAccessControl_eventPreLogin_Parms parms;
//
//	if ( !pPreLogin )
//		pPreLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.PreLogin" );
//
//	parms.Options = Options;
//	parms.Address = Address;
//	parms.PlayerID = PlayerID;
//	parms.bSpectator = bSpectator;
//	this->ProcessEvent ( pPreLogin, &parms, NULL );
//
//	*Error = parms.Error;
//	*FailCode = parms.FailCode;
//}
//
//class UwAdminUser* AAccessControl::GetUser ( struct FString uname )
//{
//	static UFunction* pGetUser = 0;
//	AAccessControl_execGetUser_Parms parms;
//
//	if ( !pGetUser )
//		pGetUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.GetUser" );
//
//	parms.uname = uname;
//	this->ProcessEvent ( pGetUser, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwAdminUser* AAccessControl::GetLoggedAdmin ( class APlayerController* P )
//{
//	static UFunction* pGetLoggedAdmin = 0;
//	AAccessControl_execGetLoggedAdmin_Parms parms;
//
//	if ( !pGetLoggedAdmin )
//		pGetLoggedAdmin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.GetLoggedAdmin" );
//
//	parms.P = P;
//	this->ProcessEvent ( pGetLoggedAdmin, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAccessControl::ValidLogin ( struct FString UserName, struct FString Password )
//{
//	static UFunction* pValidLogin = 0;
//	AAccessControl_execValidLogin_Parms parms;
//
//	if ( !pValidLogin )
//		pValidLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.ValidLogin" );
//
//	parms.UserName = UserName;
//	parms.Password = Password;
//	this->ProcessEvent ( pValidLogin, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAccessControl::CheckOptionsAdmin ( struct FString Options )
//{
//	static UFunction* pCheckOptionsAdmin = 0;
//	AAccessControl_execCheckOptionsAdmin_Parms parms;
//
//	if ( !pCheckOptionsAdmin )
//		pCheckOptionsAdmin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.CheckOptionsAdmin" );
//
//	parms.Options = Options;
//	this->ProcessEvent ( pCheckOptionsAdmin, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAccessControl::KickBanPlayer ( class APlayerController* P )
//{
//	static UFunction* pKickBanPlayer = 0;
//	AAccessControl_execKickBanPlayer_Parms parms;
//
//	if ( !pKickBanPlayer )
//		pKickBanPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.KickBanPlayer" );
//
//	parms.P = P;
//	this->ProcessEvent ( pKickBanPlayer, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAccessControl::BanPlayer ( class APlayerController* C, bool bSession )
//{
//	static UFunction* pBanPlayer = 0;
//	AAccessControl_execBanPlayer_Parms parms;
//
//	if ( !pBanPlayer )
//		pBanPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.BanPlayer" );
//
//	parms.C = C;
//	parms.bSession = bSession;
//	this->ProcessEvent ( pBanPlayer, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAccessControl::KickPlayer ( class APlayerController* C )
//{
//	static UFunction* pKickPlayer = 0;
//	AAccessControl_execKickPlayer_Parms parms;
//
//	if ( !pKickPlayer )
//		pKickPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.KickPlayer" );
//
//	parms.C = C;
//	this->ProcessEvent ( pKickPlayer, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAccessControl::KickBan ( struct FString S )
//{
//	static UFunction* pKickBan = 0;
//	AAccessControl_execKickBan_Parms parms;
//
//	if ( !pKickBan )
//		pKickBan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.KickBan" );
//
//	parms.S = S;
//	this->ProcessEvent ( pKickBan, &parms, NULL );
//
//}
//
//void AAccessControl::SessionKickBan ( struct FString S )
//{
//	static UFunction* pSessionKickBan = 0;
//	AAccessControl_execSessionKickBan_Parms parms;
//
//	if ( !pSessionKickBan )
//		pSessionKickBan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.SessionKickBan" );
//
//	parms.S = S;
//	this->ProcessEvent ( pSessionKickBan, &parms, NULL );
//
//}
//
//void AAccessControl::Kick ( struct FString S )
//{
//	static UFunction* pKick = 0;
//	AAccessControl_execKick_Parms parms;
//
//	if ( !pKick )
//		pKick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.Kick" );
//
//	parms.S = S;
//	this->ProcessEvent ( pKick, &parms, NULL );
//
//}
//
//struct FString AAccessControl::GetAdminName ( class APlayerController* PC )
//{
//	static UFunction* pGetAdminName = 0;
//	AAccessControl_execGetAdminName_Parms parms;
//
//	if ( !pGetAdminName )
//		pGetAdminName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.GetAdminName" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pGetAdminName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwAdminUser* AAccessControl::GetAdmin ( class APlayerController* PC )
//{
//	static UFunction* pGetAdmin = 0;
//	AAccessControl_execGetAdmin_Parms parms;
//
//	if ( !pGetAdmin )
//		pGetAdmin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.GetAdmin" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pGetAdmin, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAccessControl::RequiresPassword (  )
//{
//	static UFunction* pRequiresPassword = 0;
//	AAccessControl_execRequiresPassword_Parms parms;
//
//	if ( !pRequiresPassword )
//		pRequiresPassword = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.RequiresPassword" );
//
//	this->ProcessEvent ( pRequiresPassword, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAccessControl::SetGamePassword ( struct FString P )
//{
//	static UFunction* pSetGamePassword = 0;
//	AAccessControl_execSetGamePassword_Parms parms;
//
//	if ( !pSetGamePassword )
//		pSetGamePassword = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.SetGamePassword" );
//
//	parms.P = P;
//	this->ProcessEvent ( pSetGamePassword, &parms, NULL );
//
//}
//
//bool AAccessControl::SetAdminPassword ( struct FString P )
//{
//	static UFunction* pSetAdminPassword = 0;
//	AAccessControl_execSetAdminPassword_Parms parms;
//
//	if ( !pSetAdminPassword )
//		pSetAdminPassword = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.SetAdminPassword" );
//
//	parms.P = P;
//	this->ProcessEvent ( pSetAdminPassword, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAccessControl::SetAdminFromURL ( struct FString N, struct FString P )
//{
//	static UFunction* pSetAdminFromURL = 0;
//	AAccessControl_execSetAdminFromURL_Parms parms;
//
//	if ( !pSetAdminFromURL )
//		pSetAdminFromURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.SetAdminFromURL" );
//
//	parms.N = N;
//	parms.P = P;
//	this->ProcessEvent ( pSetAdminFromURL, &parms, NULL );
//
//}
//
//bool AAccessControl::IsAdmin ( class APlayerController* P )
//{
//	static UFunction* pIsAdmin = 0;
//	AAccessControl_execIsAdmin_Parms parms;
//
//	if ( !pIsAdmin )
//		pIsAdmin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.IsAdmin" );
//
//	parms.P = P;
//	this->ProcessEvent ( pIsAdmin, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAccessControl::AdminExited ( class APlayerController* P )
//{
//	static UFunction* pAdminExited = 0;
//	AAccessControl_execAdminExited_Parms parms;
//
//	if ( !pAdminExited )
//		pAdminExited = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.AdminExited" );
//
//	parms.P = P;
//	this->ProcessEvent ( pAdminExited, &parms, NULL );
//
//}
//
//void AAccessControl::AdminEntered ( class APlayerController* P, struct FString UserName )
//{
//	static UFunction* pAdminEntered = 0;
//	AAccessControl_execAdminEntered_Parms parms;
//
//	if ( !pAdminEntered )
//		pAdminEntered = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.AdminEntered" );
//
//	parms.P = P;
//	parms.UserName = UserName;
//	this->ProcessEvent ( pAdminEntered, &parms, NULL );
//
//}
//
//bool AAccessControl::AdminLogout ( class APlayerController* P )
//{
//	static UFunction* pAdminLogout = 0;
//	AAccessControl_execAdminLogout_Parms parms;
//
//	if ( !pAdminLogout )
//		pAdminLogout = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.AdminLogout" );
//
//	parms.P = P;
//	this->ProcessEvent ( pAdminLogout, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAccessControl::AdminLogin ( class APlayerController* P, struct FString UserName, struct FString Password )
//{
//	static UFunction* pAdminLogin = 0;
//	AAccessControl_execAdminLogin_Parms parms;
//
//	if ( !pAdminLogin )
//		pAdminLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.AdminLogin" );
//
//	parms.P = P;
//	parms.UserName = UserName;
//	parms.Password = Password;
//	this->ProcessEvent ( pAdminLogin, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAccessControl::SaveAdmins (  )
//{
//	static UFunction* pSaveAdmins = 0;
//	AAccessControl_execSaveAdmins_Parms parms;
//
//	if ( !pSaveAdmins )
//		pSaveAdmins = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.SaveAdmins" );
//
//	this->ProcessEvent ( pSaveAdmins, &parms, NULL );
//
//}
//
//void AAccessControl::InitPrivs (  )
//{
//	static UFunction* pInitPrivs = 0;
//	AAccessControl_execInitPrivs_Parms parms;
//
//	if ( !pInitPrivs )
//		pInitPrivs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.InitPrivs" );
//
//	this->ProcessEvent ( pInitPrivs, &parms, NULL );
//
//}
//
//void AAccessControl::eventPreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AAccessControl_eventPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AccessControl.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//bool UXBoxPlayerInput::InvertLook (  )
//{
//	static UFunction* pInvertLook = 0;
//	UXBoxPlayerInput_execInvertLook_Parms parms;
//
//	if ( !pInvertLook )
//		pInvertLook = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.XBoxPlayerInput.InvertLook" );
//
//	this->ProcessEvent ( pInvertLook, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
////float UXBoxPlayerInput::FilterOutput ( float output, float* filter )
////{
////	static UFunction* pFilterOutput = 0;
////	UXBoxPlayerInput_execFilterOutput_Parms parms;
////
////	if ( !pFilterOutput )
////		pFilterOutput = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.XBoxPlayerInput.FilterOutput" );
////
////	parms.output = output;
////	this->ProcessEvent ( pFilterOutput, &parms, NULL );
////
////	*filter = parms.filter;
////	return parms.ReturnValue;
////}
//
//float UXBoxPlayerInput::sign ( float in )
//{
//	static UFunction* psign = 0;
//	UXBoxPlayerInput_execsign_Parms parms;
//
//	if ( !psign )
//		psign = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.XBoxPlayerInput.sign" );
//
//	parms.in = in;
//	this->ProcessEvent ( psign, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
////float UXBoxPlayerInput::GetComponentAccel ( float Input, struct FVector Dir, float dt, bool blog, float* filter )
////{
////	static UFunction* pGetComponentAccel = 0;
////	UXBoxPlayerInput_execGetComponentAccel_Parms parms;
////
////	if ( !pGetComponentAccel )
////		pGetComponentAccel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.XBoxPlayerInput.GetComponentAccel" );
////
////	parms.Input = Input;
////	parms.Dir = Dir;
////	parms.dt = dt;
////	parms.blog = blog;
////	this->ProcessEvent ( pGetComponentAccel, &parms, NULL );
////
////	*filter = parms.filter;
////	return parms.ReturnValue;
////}
//
//void UXBoxPlayerInput::VelToAccel ( float dt )
//{
//	static UFunction* pVelToAccel = 0;
//	UXBoxPlayerInput_execVelToAccel_Parms parms;
//
//	if ( !pVelToAccel )
//		pVelToAccel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.XBoxPlayerInput.VelToAccel" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pVelToAccel, &parms, NULL );
//
//}
//
//float UXBoxPlayerInput::Remap ( float in, float Scale, float Exp, float ratemax )
//{
//	static UFunction* pRemap = 0;
//	UXBoxPlayerInput_execRemap_Parms parms;
//
//	if ( !pRemap )
//		pRemap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.XBoxPlayerInput.Remap" );
//
//	parms.in = in;
//	parms.Scale = Scale;
//	parms.Exp = Exp;
//	parms.ratemax = ratemax;
//	this->ProcessEvent ( pRemap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UXBoxPlayerInput::PlayerInput ( float DeltaTime )
//{
//	static UFunction* pPlayerInput = 0;
//	UXBoxPlayerInput_execPlayerInput_Parms parms;
//
//	if ( !pPlayerInput )
//		pPlayerInput = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.XBoxPlayerInput.PlayerInput" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pPlayerInput, &parms, NULL );
//
//}
//
//void UwGameStateStorageGetter::GetUserSkillState ( class AwGameStateStorageSender* GSSS, class APlayerController* PC )
//{
//	static UFunction* pGetUserSkillState = 0;
//	UwGameStateStorageGetter_execGetUserSkillState_Parms parms;
//
//	if ( !pGetUserSkillState )
//		pGetUserSkillState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageGetter.GetUserSkillState" );
//
//	parms.GSSS = GSSS;
//	parms.PC = PC;
//	this->ProcessEvent ( pGetUserSkillState, &parms, NULL );
//
//}
//
//void UwGameStateStorageGetter::GetUserWeaponState ( class AwGameStateStorageSender* GSSS, class APlayerController* PC )
//{
//	static UFunction* pGetUserWeaponState = 0;
//	UwGameStateStorageGetter_execGetUserWeaponState_Parms parms;
//
//	if ( !pGetUserWeaponState )
//		pGetUserWeaponState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageGetter.GetUserWeaponState" );
//
//	parms.GSSS = GSSS;
//	parms.PC = PC;
//	this->ProcessEvent ( pGetUserWeaponState, &parms, NULL );
//
//}
//
//void UwGameStateStorageGetter::GetUserVehicle ( class AwGameStateStorageSender* GSSS, class APlayerController* PC )
//{
//	static UFunction* pGetUserVehicle = 0;
//	UwGameStateStorageGetter_execGetUserVehicle_Parms parms;
//
//	if ( !pGetUserVehicle )
//		pGetUserVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageGetter.GetUserVehicle" );
//
//	parms.GSSS = GSSS;
//	parms.PC = PC;
//	this->ProcessEvent ( pGetUserVehicle, &parms, NULL );
//
//}
//
//void UwGameStateStorageGetter::GetUserScoreState ( class AwGameStateStorageSender* GSSS, class APlayerController* PC )
//{
//	static UFunction* pGetUserScoreState = 0;
//	UwGameStateStorageGetter_execGetUserScoreState_Parms parms;
//
//	if ( !pGetUserScoreState )
//		pGetUserScoreState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageGetter.GetUserScoreState" );
//
//	parms.GSSS = GSSS;
//	parms.PC = PC;
//	this->ProcessEvent ( pGetUserScoreState, &parms, NULL );
//
//}
//
//void UwGameStateStorageGetter::GetUserState ( class AwGameStateStorageSender* GSSS, class APlayerController* PC )
//{
//	static UFunction* pGetUserState = 0;
//	UwGameStateStorageGetter_execGetUserState_Parms parms;
//
//	if ( !pGetUserState )
//		pGetUserState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageGetter.GetUserState" );
//
//	parms.GSSS = GSSS;
//	parms.PC = PC;
//	this->ProcessEvent ( pGetUserState, &parms, NULL );
//
//}
//
//void UwGameStateStorageGetter::GetUserSupplyState ( class AwGameStateStorageSender* GSSS, class APlayerController* PC )
//{
//	static UFunction* pGetUserSupplyState = 0;
//	UwGameStateStorageGetter_execGetUserSupplyState_Parms parms;
//
//	if ( !pGetUserSupplyState )
//		pGetUserSupplyState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageGetter.GetUserSupplyState" );
//
//	parms.GSSS = GSSS;
//	parms.PC = PC;
//	this->ProcessEvent ( pGetUserSupplyState, &parms, NULL );
//
//}
//
//void UwGameStateStorageGetter::GetUserQSlotState ( class AwGameStateStorageSender* GSSS, class APlayerController* PC )
//{
//	static UFunction* pGetUserQSlotState = 0;
//	UwGameStateStorageGetter_execGetUserQSlotState_Parms parms;
//
//	if ( !pGetUserQSlotState )
//		pGetUserQSlotState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameStateStorageGetter.GetUserQSlotState" );
//
//	parms.GSSS = GSSS;
//	parms.PC = PC;
//	this->ProcessEvent ( pGetUserQSlotState, &parms, NULL );
//
//}
//
//struct FString UwGameSettings::GetRespawnTypeByIndex ( int Index )
//{
//	static UFunction* pGetRespawnTypeByIndex = 0;
//	UwGameSettings_execGetRespawnTypeByIndex_Parms parms;
//
//	if ( !pGetRespawnTypeByIndex )
//		pGetRespawnTypeByIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetRespawnTypeByIndex" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pGetRespawnTypeByIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< int > UwGameSettings::GetGameModeDispOrder (  )
//{
//	static UFunction* pGetGameModeDispOrder = 0;
//	UwGameSettings_execGetGameModeDispOrder_Parms parms;
//
//	if ( !pGetGameModeDispOrder )
//		pGetGameModeDispOrder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetGameModeDispOrder" );
//
//	this->ProcessEvent ( pGetGameModeDispOrder, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameSettings::IsAllowedWeaponRest ( int Index )
//{
//	static UFunction* pIsAllowedWeaponRest = 0;
//	UwGameSettings_execIsAllowedWeaponRest_Parms parms;
//
//	if ( !pIsAllowedWeaponRest )
//		pIsAllowedWeaponRest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.IsAllowedWeaponRest" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pIsAllowedWeaponRest, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > UwGameSettings::GetWeaponRestrictions (  )
//{
//	static UFunction* pGetWeaponRestrictions = 0;
//	UwGameSettings_execGetWeaponRestrictions_Parms parms;
//
//	if ( !pGetWeaponRestrictions )
//		pGetWeaponRestrictions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetWeaponRestrictions" );
//
//	this->ProcessEvent ( pGetWeaponRestrictions, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > UwGameSettings::GetBotModeTeam ( int BotModeIdx )
//{
//	static UFunction* pGetBotModeTeam = 0;
//	UwGameSettings_execGetBotModeTeam_Parms parms;
//
//	if ( !pGetBotModeTeam )
//		pGetBotModeTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetBotModeTeam" );
//
//	parms.BotModeIdx = BotModeIdx;
//	this->ProcessEvent ( pGetBotModeTeam, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwGameSettings::GetBotModeTeamByIndex ( int Index )
//{
//	static UFunction* pGetBotModeTeamByIndex = 0;
//	UwGameSettings_execGetBotModeTeamByIndex_Parms parms;
//
//	if ( !pGetBotModeTeamByIndex )
//		pGetBotModeTeamByIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetBotModeTeamByIndex" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pGetBotModeTeamByIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwGameSettings::GetWeaponRestrictionByIndex ( int Index )
//{
//	static UFunction* pGetWeaponRestrictionByIndex = 0;
//	UwGameSettings_execGetWeaponRestrictionByIndex_Parms parms;
//
//	if ( !pGetWeaponRestrictionByIndex )
//		pGetWeaponRestrictionByIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetWeaponRestrictionByIndex" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pGetWeaponRestrictionByIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwGameSettings::GetDefaultScore ( struct FString ClassName )
//{
//	static UFunction* pGetDefaultScore = 0;
//	UwGameSettings_execGetDefaultScore_Parms parms;
//
//	if ( !pGetDefaultScore )
//		pGetDefaultScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetDefaultScore" );
//
//	parms.ClassName = ClassName;
//	this->ProcessEvent ( pGetDefaultScore, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwGameSettings::GetDefaultScore_ModeNum ( int ModeNum )
//{
//	static UFunction* pGetDefaultScore_ModeNum = 0;
//	UwGameSettings_execGetDefaultScore_ModeNum_Parms parms;
//
//	if ( !pGetDefaultScore_ModeNum )
//		pGetDefaultScore_ModeNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetDefaultScore_ModeNum" );
//
//	parms.ModeNum = ModeNum;
//	this->ProcessEvent ( pGetDefaultScore_ModeNum, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwGameSettings::GetDefaultTimeLimit ( struct FString ClassName, struct FString Score )
//{
//	static UFunction* pGetDefaultTimeLimit = 0;
//	UwGameSettings_execGetDefaultTimeLimit_Parms parms;
//
//	if ( !pGetDefaultTimeLimit )
//		pGetDefaultTimeLimit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetDefaultTimeLimit" );
//
//	parms.ClassName = ClassName;
//	parms.Score = Score;
//	this->ProcessEvent ( pGetDefaultTimeLimit, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwGameSettings::GetDefaultTimeLimit_ModeNum ( int ModeNum, struct FString Score )
//{
//	static UFunction* pGetDefaultTimeLimit_ModeNum = 0;
//	UwGameSettings_execGetDefaultTimeLimit_ModeNum_Parms parms;
//
//	if ( !pGetDefaultTimeLimit_ModeNum )
//		pGetDefaultTimeLimit_ModeNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetDefaultTimeLimit_ModeNum" );
//
//	parms.ModeNum = ModeNum;
//	parms.Score = Score;
//	this->ProcessEvent ( pGetDefaultTimeLimit_ModeNum, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FGameModeInfo > UwGameSettings::GetAllGameModesAtServiceBuild (  )
//{
//	static UFunction* pGetAllGameModesAtServiceBuild = 0;
//	UwGameSettings_execGetAllGameModesAtServiceBuild_Parms parms;
//
//	if ( !pGetAllGameModesAtServiceBuild )
//		pGetAllGameModesAtServiceBuild = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetAllGameModesAtServiceBuild" );
//
//	this->ProcessEvent ( pGetAllGameModesAtServiceBuild, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FGameModeInfo > UwGameSettings::GetAllGameModes (  )
//{
//	static UFunction* pGetAllGameModes = 0;
//	UwGameSettings_execGetAllGameModes_Parms parms;
//
//	if ( !pGetAllGameModes )
//		pGetAllGameModes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetAllGameModes" );
//
//	this->ProcessEvent ( pGetAllGameModes, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeCount (  )
//{
//	static UFunction* pGetModeCount = 0;
//	UwGameSettings_execGetModeCount_Parms parms;
//
//	if ( !pGetModeCount )
//		pGetModeCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeCount" );
//
//	this->ProcessEvent ( pGetModeCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_Alien (  )
//{
//	static UFunction* pGetModeIndex_Alien = 0;
//	UwGameSettings_execGetModeIndex_Alien_Parms parms;
//
//	if ( !pGetModeIndex_Alien )
//		pGetModeIndex_Alien = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_Alien" );
//
//	this->ProcessEvent ( pGetModeIndex_Alien, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_DOA (  )
//{
//	static UFunction* pGetModeIndex_DOA = 0;
//	UwGameSettings_execGetModeIndex_DOA_Parms parms;
//
//	if ( !pGetModeIndex_DOA )
//		pGetModeIndex_DOA = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_DOA" );
//
//	this->ProcessEvent ( pGetModeIndex_DOA, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_Defence (  )
//{
//	static UFunction* pGetModeIndex_Defence = 0;
//	UwGameSettings_execGetModeIndex_Defence_Parms parms;
//
//	if ( !pGetModeIndex_Defence )
//		pGetModeIndex_Defence = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_Defence" );
//
//	this->ProcessEvent ( pGetModeIndex_Defence, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_BotTeamDeathBeginner (  )
//{
//	static UFunction* pGetModeIndex_BotTeamDeathBeginner = 0;
//	UwGameSettings_execGetModeIndex_BotTeamDeathBeginner_Parms parms;
//
//	if ( !pGetModeIndex_BotTeamDeathBeginner )
//		pGetModeIndex_BotTeamDeathBeginner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_BotTeamDeathBeginner" );
//
//	this->ProcessEvent ( pGetModeIndex_BotTeamDeathBeginner, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_COL (  )
//{
//	static UFunction* pGetModeIndex_COL = 0;
//	UwGameSettings_execGetModeIndex_COL_Parms parms;
//
//	if ( !pGetModeIndex_COL )
//		pGetModeIndex_COL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_COL" );
//
//	this->ProcessEvent ( pGetModeIndex_COL, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_Medal (  )
//{
//	static UFunction* pGetModeIndex_Medal = 0;
//	UwGameSettings_execGetModeIndex_Medal_Parms parms;
//
//	if ( !pGetModeIndex_Medal )
//		pGetModeIndex_Medal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_Medal" );
//
//	this->ProcessEvent ( pGetModeIndex_Medal, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_BotTutorial (  )
//{
//	static UFunction* pGetModeIndex_BotTutorial = 0;
//	UwGameSettings_execGetModeIndex_BotTutorial_Parms parms;
//
//	if ( !pGetModeIndex_BotTutorial )
//		pGetModeIndex_BotTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_BotTutorial" );
//
//	this->ProcessEvent ( pGetModeIndex_BotTutorial, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_BotDeathMatch (  )
//{
//	static UFunction* pGetModeIndex_BotDeathMatch = 0;
//	UwGameSettings_execGetModeIndex_BotDeathMatch_Parms parms;
//
//	if ( !pGetModeIndex_BotDeathMatch )
//		pGetModeIndex_BotDeathMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_BotDeathMatch" );
//
//	this->ProcessEvent ( pGetModeIndex_BotDeathMatch, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_BotDomination (  )
//{
//	static UFunction* pGetModeIndex_BotDomination = 0;
//	UwGameSettings_execGetModeIndex_BotDomination_Parms parms;
//
//	if ( !pGetModeIndex_BotDomination )
//		pGetModeIndex_BotDomination = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_BotDomination" );
//
//	this->ProcessEvent ( pGetModeIndex_BotDomination, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_BotTeamDeath (  )
//{
//	static UFunction* pGetModeIndex_BotTeamDeath = 0;
//	UwGameSettings_execGetModeIndex_BotTeamDeath_Parms parms;
//
//	if ( !pGetModeIndex_BotTeamDeath )
//		pGetModeIndex_BotTeamDeath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_BotTeamDeath" );
//
//	this->ProcessEvent ( pGetModeIndex_BotTeamDeath, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_Sabotage (  )
//{
//	static UFunction* pGetModeIndex_Sabotage = 0;
//	UwGameSettings_execGetModeIndex_Sabotage_Parms parms;
//
//	if ( !pGetModeIndex_Sabotage )
//		pGetModeIndex_Sabotage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_Sabotage" );
//
//	this->ProcessEvent ( pGetModeIndex_Sabotage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_Domination (  )
//{
//	static UFunction* pGetModeIndex_Domination = 0;
//	UwGameSettings_execGetModeIndex_Domination_Parms parms;
//
//	if ( !pGetModeIndex_Domination )
//		pGetModeIndex_Domination = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_Domination" );
//
//	this->ProcessEvent ( pGetModeIndex_Domination, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_DeathMatch (  )
//{
//	static UFunction* pGetModeIndex_DeathMatch = 0;
//	UwGameSettings_execGetModeIndex_DeathMatch_Parms parms;
//
//	if ( !pGetModeIndex_DeathMatch )
//		pGetModeIndex_DeathMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_DeathMatch" );
//
//	this->ProcessEvent ( pGetModeIndex_DeathMatch, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_SD (  )
//{
//	static UFunction* pGetModeIndex_SD = 0;
//	UwGameSettings_execGetModeIndex_SD_Parms parms;
//
//	if ( !pGetModeIndex_SD )
//		pGetModeIndex_SD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_SD" );
//
//	this->ProcessEvent ( pGetModeIndex_SD, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwGameSettings::GetModeIndex_TeamDeath (  )
//{
//	static UFunction* pGetModeIndex_TeamDeath = 0;
//	UwGameSettings_execGetModeIndex_TeamDeath_Parms parms;
//
//	if ( !pGetModeIndex_TeamDeath )
//		pGetModeIndex_TeamDeath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetModeIndex_TeamDeath" );
//
//	this->ProcessEvent ( pGetModeIndex_TeamDeath, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwGameSettings::IsBotModeIndex ( int Index )
//{
//	static UFunction* pIsBotModeIndex = 0;
//	UwGameSettings_execIsBotModeIndex_Parms parms;
//
//	if ( !pIsBotModeIndex )
//		pIsBotModeIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.IsBotModeIndex" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pIsBotModeIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FGameModeInfo UwGameSettings::GetGameModeByIndex ( int Index )
//{
//	static UFunction* pGetGameModeByIndex = 0;
//	UwGameSettings_execGetGameModeByIndex_Parms parms;
//
//	if ( !pGetGameModeByIndex )
//		pGetGameModeByIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetGameModeByIndex" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pGetGameModeByIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FGameModeInfo UwGameSettings::GetGameModeByClass ( struct FString ClassName )
//{
//	static UFunction* pGetGameModeByClass = 0;
//	UwGameSettings_execGetGameModeByClass_Parms parms;
//
//	if ( !pGetGameModeByClass )
//		pGetGameModeByClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wGameSettings.GetGameModeByClass" );
//
//	parms.ClassName = ClassName;
//	this->ProcessEvent ( pGetGameModeByClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwMessage_Game_ImpSystem::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pClientReceive = 0;
//	AwMessage_Game_ImpSystem_execClientReceive_Parms parms;
//
//	if ( !pClientReceive )
//		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game_ImpSystem.ClientReceive" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pClientReceive, &parms, NULL );
//
//}
//
//bool AwMessage_Game_ImpSystem::IsMessageSystem ( int iCode )
//{
//	static UFunction* pIsMessageSystem = 0;
//	AwMessage_Game_ImpSystem_execIsMessageSystem_Parms parms;
//
//	if ( !pIsMessageSystem )
//		pIsMessageSystem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game_ImpSystem.IsMessageSystem" );
//
//	parms.iCode = iCode;
//	this->ProcessEvent ( pIsMessageSystem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwMessage_Game_ImpSystem::IsMessageMode ( int iCode )
//{
//	static UFunction* pIsMessageMode = 0;
//	AwMessage_Game_ImpSystem_execIsMessageMode_Parms parms;
//
//	if ( !pIsMessageMode )
//		pIsMessageMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game_ImpSystem.IsMessageMode" );
//
//	parms.iCode = iCode;
//	this->ProcessEvent ( pIsMessageMode, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AwMessage_Game_ImpSystem::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGetString = 0;
//	AwMessage_Game_ImpSystem_execGetString_Parms parms;
//
//	if ( !pGetString )
//		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game_ImpSystem.GetString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGetString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwMessage_Game_ImpSystem::GotoBTConsole ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGotoBTConsole = 0;
//	AwMessage_Game_ImpSystem_execGotoBTConsole_Parms parms;
//
//	if ( !pGotoBTConsole )
//		pGotoBTConsole = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game_ImpSystem.GotoBTConsole" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGotoBTConsole, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwMessage_Game_ImpSystem::GotoHud ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGotoHud = 0;
//	AwMessage_Game_ImpSystem_execGotoHud_Parms parms;
//
//	if ( !pGotoHud )
//		pGotoHud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game_ImpSystem.GotoHud" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGotoHud, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AwMessage_Game_ImpSystem::GetLifeTime ( int Switch )
//{
//	static UFunction* pGetLifeTime = 0;
//	AwMessage_Game_ImpSystem_execGetLifeTime_Parms parms;
//
//	if ( !pGetLifeTime )
//		pGetLifeTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game_ImpSystem.GetLifeTime" );
//
//	parms.Switch = Switch;
//	this->ProcessEvent ( pGetLifeTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAnnouncerQueueManager::ProcessQueueItem ( struct FQueueItem Item )
//{
//	static UFunction* pProcessQueueItem = 0;
//	AAnnouncerQueueManager_execProcessQueueItem_Parms parms;
//
//	if ( !pProcessQueueItem )
//		pProcessQueueItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerQueueManager.ProcessQueueItem" );
//
//	parms.Item = Item;
//	this->ProcessEvent ( pProcessQueueItem, &parms, NULL );
//
//}
//
//void AAnnouncerQueueManager::Timer (  )
//{
//	static UFunction* pTimer = 0;
//	AAnnouncerQueueManager_execTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerQueueManager.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//float AAnnouncerQueueManager::GetQueueWaitTime (  )
//{
//	static UFunction* pGetQueueWaitTime = 0;
//	AAnnouncerQueueManager_execGetQueueWaitTime_Parms parms;
//
//	if ( !pGetQueueWaitTime )
//		pGetQueueWaitTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerQueueManager.GetQueueWaitTime" );
//
//	this->ProcessEvent ( pGetQueueWaitTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAnnouncerQueueManager::IsQueueingSwitch ( unsigned char Switch )
//{
//	static UFunction* pIsQueueingSwitch = 0;
//	AAnnouncerQueueManager_execIsQueueingSwitch_Parms parms;
//
//	if ( !pIsQueueingSwitch )
//		pIsQueueingSwitch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerQueueManager.IsQueueingSwitch" );
//
//	parms.Switch = Switch;
//	this->ProcessEvent ( pIsQueueingSwitch, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAnnouncerQueueManager::IsQueueing (  )
//{
//	static UFunction* pIsQueueing = 0;
//	AAnnouncerQueueManager_execIsQueueing_Parms parms;
//
//	if ( !pIsQueueing )
//		pIsQueueing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerQueueManager.IsQueueing" );
//
//	this->ProcessEvent ( pIsQueueing, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAnnouncerQueueManager::RemoveSound ( struct FString soundName )
//{
//	static UFunction* pRemoveSound = 0;
//	AAnnouncerQueueManager_execRemoveSound_Parms parms;
//
//	if ( !pRemoveSound )
//		pRemoveSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerQueueManager.RemoveSound" );
//
//	parms.soundName = soundName;
//	this->ProcessEvent ( pRemoveSound, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAnnouncerQueueManager::CanFindSoundInQueue ( struct FString DaSoundName )
//{
//	static UFunction* pCanFindSoundInQueue = 0;
//	AAnnouncerQueueManager_execCanFindSoundInQueue_Parms parms;
//
//	if ( !pCanFindSoundInQueue )
//		pCanFindSoundInQueue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerQueueManager.CanFindSoundInQueue" );
//
//	parms.DaSoundName = DaSoundName;
//	this->ProcessEvent ( pCanFindSoundInQueue, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AAnnouncerQueueManager::AddItemToQueue ( struct FString ASound, unsigned char Priority, unsigned char Switch )
//{
//	static UFunction* pAddItemToQueue = 0;
//	AAnnouncerQueueManager_execAddItemToQueue_Parms parms;
//
//	if ( !pAddItemToQueue )
//		pAddItemToQueue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerQueueManager.AddItemToQueue" );
//
//	parms.ASound = ASound;
//	parms.Priority = Priority;
//	parms.Switch = Switch;
//	this->ProcessEvent ( pAddItemToQueue, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AAnnouncerQueueManager::InitFor ( class APlayerController* PC )
//{
//	static UFunction* pInitFor = 0;
//	AAnnouncerQueueManager_execInitFor_Parms parms;
//
//	if ( !pInitFor )
//		pInitFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerQueueManager.InitFor" );
//
//	parms.PC = PC;
//	this->ProcessEvent ( pInitFor, &parms, NULL );
//
//}
//
//void AAnnouncerQueueManager::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AAnnouncerQueueManager_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.AnnouncerQueueManager.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void ARunTestsBase::RunTestClass ( class UClass* TestClass, int* passes, int* fails )
//{
//	static UFunction* pRunTestClass = 0;
//	ARunTestsBase_execRunTestClass_Parms parms;
//
//	if ( !pRunTestClass )
//		pRunTestClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.RunTestsBase.RunTestClass" );
//
//	parms.TestClass = TestClass;
//	this->ProcessEvent ( pRunTestClass, &parms, NULL );
//
//	*passes = parms.passes;
//	*fails = parms.fails;
//}
//
//void ARunTestsBase::Run (  )
//{
//	static UFunction* pRun = 0;
//	ARunTestsBase_execRun_Parms parms;
//
//	if ( !pRun )
//		pRun = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.RunTestsBase.Run" );
//
//	this->ProcessEvent ( pRun, &parms, NULL );
//
//}
//
//bool AChatRoomMessage::IsConsoleMessage ( int Index )
//{
//	static UFunction* pIsConsoleMessage = 0;
//	AChatRoomMessage_execIsConsoleMessage_Parms parms;
//
//	if ( !pIsConsoleMessage )
//		pIsConsoleMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ChatRoomMessage.IsConsoleMessage" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pIsConsoleMessage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AChatRoomMessage::AssembleMessage ( int Index, struct FString ChannelTitle, class APlayerReplicationInfo* RelatedPRI )
//{
//	static UFunction* pAssembleMessage = 0;
//	AChatRoomMessage_execAssembleMessage_Parms parms;
//
//	if ( !pAssembleMessage )
//		pAssembleMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ChatRoomMessage.AssembleMessage" );
//
//	parms.Index = Index;
//	parms.ChannelTitle = ChannelTitle;
//	parms.RelatedPRI = RelatedPRI;
//	this->ProcessEvent ( pAssembleMessage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwMapInfo* UwMapSettings::GetMapInfo ( struct FString dfile )
//{
//	static UFunction* pGetMapInfo = 0;
//	UwMapSettings_execGetMapInfo_Parms parms;
//
//	if ( !pGetMapInfo )
//		pGetMapInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings.GetMapInfo" );
//
//	parms.dfile = dfile;
//	this->ProcessEvent ( pGetMapInfo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwMapInfo* UwMapSettings::GetMapInfoByID ( int MapID )
//{
//	static UFunction* pGetMapInfoByID = 0;
//	UwMapSettings_execGetMapInfoByID_Parms parms;
//
//	if ( !pGetMapInfoByID )
//		pGetMapInfoByID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings.GetMapInfoByID" );
//
//	parms.MapID = MapID;
//	this->ProcessEvent ( pGetMapInfoByID, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMapSettings::GetWeaponRestriction ( int MapID, int weaponID )
//{
//	static UFunction* pGetWeaponRestriction = 0;
//	UwMapSettings_execGetWeaponRestriction_Parms parms;
//
//	if ( !pGetWeaponRestriction )
//		pGetWeaponRestriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings.GetWeaponRestriction" );
//
//	parms.MapID = MapID;
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pGetWeaponRestriction, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMapSettings::GetMaxUserCount ( int MapID, int GameModeIdx )
//{
//	static UFunction* pGetMaxUserCount = 0;
//	UwMapSettings_execGetMaxUserCount_Parms parms;
//
//	if ( !pGetMaxUserCount )
//		pGetMaxUserCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings.GetMaxUserCount" );
//
//	parms.MapID = MapID;
//	parms.GameModeIdx = GameModeIdx;
//	this->ProcessEvent ( pGetMaxUserCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMapSettings::IsDOMI_RandomRespawn ( int MapID, int GameModeIdx )
//{
//	static UFunction* pIsDOMI_RandomRespawn = 0;
//	UwMapSettings_execIsDOMI_RandomRespawn_Parms parms;
//
//	if ( !pIsDOMI_RandomRespawn )
//		pIsDOMI_RandomRespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings.IsDOMI_RandomRespawn" );
//
//	parms.MapID = MapID;
//	parms.GameModeIdx = GameModeIdx;
//	this->ProcessEvent ( pIsDOMI_RandomRespawn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMapSettings::IsTDM_RandomRespawn ( int MapID, int GameModeIdx )
//{
//	static UFunction* pIsTDM_RandomRespawn = 0;
//	UwMapSettings_execIsTDM_RandomRespawn_Parms parms;
//
//	if ( !pIsTDM_RandomRespawn )
//		pIsTDM_RandomRespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings.IsTDM_RandomRespawn" );
//
//	parms.MapID = MapID;
//	parms.GameModeIdx = GameModeIdx;
//	this->ProcessEvent ( pIsTDM_RandomRespawn, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwMapSettings::IsGameModeEnable ( int MapID, int GameModeIdx )
//{
//	static UFunction* pIsGameModeEnable = 0;
//	UwMapSettings_execIsGameModeEnable_Parms parms;
//
//	if ( !pIsGameModeEnable )
//		pIsGameModeEnable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings.IsGameModeEnable" );
//
//	parms.MapID = MapID;
//	parms.GameModeIdx = GameModeIdx;
//	this->ProcessEvent ( pIsGameModeEnable, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwMapInfo* UwMapSettings::GetMapInfoByMapNum ( class TArray< class UwMapInfo* > infos, int MapNum )
//{
//	static UFunction* pGetMapInfoByMapNum = 0;
//	UwMapSettings_execGetMapInfoByMapNum_Parms parms;
//
//	if ( !pGetMapInfoByMapNum )
//		pGetMapInfoByMapNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings.GetMapInfoByMapNum" );
//
//	parms.infos = infos;
//	parms.MapNum = MapNum;
//	this->ProcessEvent ( pGetMapInfoByMapNum, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< class UwMapInfo* > UwMapSettings::GetAllMapInfos ( bool bServiceBuild )
//{
//	static UFunction* pGetAllMapInfos = 0;
//	UwMapSettings_execGetAllMapInfos_Parms parms;
//
//	if ( !pGetAllMapInfos )
//		pGetAllMapInfos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings.GetAllMapInfos" );
//
//	parms.bServiceBuild = bServiceBuild;
//	this->ProcessEvent ( pGetAllMapInfos, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMapSettings::IsValidMap_THAILAND ( struct FString LocStr, bool bServiceBuild )
//{
//	static UFunction* pIsValidMap_THAILAND = 0;
//	UwMapSettings_execIsValidMap_THAILAND_Parms parms;
//
//	if ( !pIsValidMap_THAILAND )
//		pIsValidMap_THAILAND = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings.IsValidMap_THAILAND" );
//
//	parms.LocStr = LocStr;
//	parms.bServiceBuild = bServiceBuild;
//	this->ProcessEvent ( pIsValidMap_THAILAND, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMapSettings::IsValidMap_GP ( struct FString LocStr, bool bServiceBuild )
//{
//	static UFunction* pIsValidMap_GP = 0;
//	UwMapSettings_execIsValidMap_GP_Parms parms;
//
//	if ( !pIsValidMap_GP )
//		pIsValidMap_GP = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings.IsValidMap_GP" );
//
//	parms.LocStr = LocStr;
//	parms.bServiceBuild = bServiceBuild;
//	this->ProcessEvent ( pIsValidMap_GP, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMapSettings::IsValidMap_CHINA ( struct FString LocStr, bool bServiceBuild )
//{
//	static UFunction* pIsValidMap_CHINA = 0;
//	UwMapSettings_execIsValidMap_CHINA_Parms parms;
//
//	if ( !pIsValidMap_CHINA )
//		pIsValidMap_CHINA = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings.IsValidMap_CHINA" );
//
//	parms.LocStr = LocStr;
//	parms.bServiceBuild = bServiceBuild;
//	this->ProcessEvent ( pIsValidMap_CHINA, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMapSettings::_isValidMap ( struct FString fileName, bool bServiceBuild )
//{
//	static UFunction* p_isValidMap = 0;
//	UwMapSettings_exec_isValidMap_Parms parms;
//
//	if ( !p_isValidMap )
//		p_isValidMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings._isValidMap" );
//
//	parms.fileName = fileName;
//	parms.bServiceBuild = bServiceBuild;
//	this->ProcessEvent ( p_isValidMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMapSettings::Initialize ( class UwMatchMaker* MM )
//{
//	static UFunction* pInitialize = 0;
//	UwMapSettings_execInitialize_Parms parms;
//
//	if ( !pInitialize )
//		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMapSettings.Initialize" );
//
//	parms.MM = MM;
//	this->ProcessEvent ( pInitialize, &parms, NULL );
//
//}
//
//bool UwItemBoxHK::IsCashItem (  )
//{
//	static UFunction* pIsCashItem = 0;
//	UwItemBoxHK_execIsCashItem_Parms parms;
//
//	if ( !pIsCashItem )
//		pIsCashItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxHK.IsCashItem" );
//
//	this->ProcessEvent ( pIsCashItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwItemBoxHK::GetPartSkillName ( int PartID )
//{
//	static UFunction* pGetPartSkillName = 0;
//	UwItemBoxHK_execGetPartSkillName_Parms parms;
//
//	if ( !pGetPartSkillName )
//		pGetPartSkillName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxHK.GetPartSkillName" );
//
//	parms.PartID = PartID;
//	this->ProcessEvent ( pGetPartSkillName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwItemBoxHK::GetUIDamage ( int PartID )
//{
//	static UFunction* pGetUIDamage = 0;
//	UwItemBoxHK_execGetUIDamage_Parms parms;
//
//	if ( !pGetUIDamage )
//		pGetUIDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxHK.GetUIDamage" );
//
//	parms.PartID = PartID;
//	this->ProcessEvent ( pGetUIDamage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwItemBoxHK::GetUISpread ( int PartID )
//{
//	static UFunction* pGetUISpread = 0;
//	UwItemBoxHK_execGetUISpread_Parms parms;
//
//	if ( !pGetUISpread )
//		pGetUISpread = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxHK.GetUISpread" );
//
//	parms.PartID = PartID;
//	this->ProcessEvent ( pGetUISpread, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwItemBoxHK::GetUIViewKick ( int PartID )
//{
//	static UFunction* pGetUIViewKick = 0;
//	UwItemBoxHK_execGetUIViewKick_Parms parms;
//
//	if ( !pGetUIViewKick )
//		pGetUIViewKick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxHK.GetUIViewKick" );
//
//	parms.PartID = PartID;
//	this->ProcessEvent ( pGetUIViewKick, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwItemBoxHK::GetUIRateOfFire ( int PartID )
//{
//	static UFunction* pGetUIRateOfFire = 0;
//	UwItemBoxHK_execGetUIRateOfFire_Parms parms;
//
//	if ( !pGetUIRateOfFire )
//		pGetUIRateOfFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxHK.GetUIRateOfFire" );
//
//	parms.PartID = PartID;
//	this->ProcessEvent ( pGetUIRateOfFire, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwItemBoxHK::GetUIMove ( int PartID )
//{
//	static UFunction* pGetUIMove = 0;
//	UwItemBoxHK_execGetUIMove_Parms parms;
//
//	if ( !pGetUIMove )
//		pGetUIMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxHK.GetUIMove" );
//
//	parms.PartID = PartID;
//	this->ProcessEvent ( pGetUIMove, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwItemBoxHK::GetUIRange ( int PartID )
//{
//	static UFunction* pGetUIRange = 0;
//	UwItemBoxHK_execGetUIRange_Parms parms;
//
//	if ( !pGetUIRange )
//		pGetUIRange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxHK.GetUIRange" );
//
//	parms.PartID = PartID;
//	this->ProcessEvent ( pGetUIRange, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UwItemBoxHK::GetPartName ( int PartID )
//{
//	static UFunction* pGetPartName = 0;
//	UwItemBoxHK_execGetPartName_Parms parms;
//
//	if ( !pGetPartName )
//		pGetPartName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxHK.GetPartName" );
//
//	parms.PartID = PartID;
//	this->ProcessEvent ( pGetPartName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwItemBoxHK::FindPartGroupIndex ( int PartID )
//{
//	static UFunction* pFindPartGroupIndex = 0;
//	UwItemBoxHK_execFindPartGroupIndex_Parms parms;
//
//	if ( !pFindPartGroupIndex )
//		pFindPartGroupIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxHK.FindPartGroupIndex" );
//
//	parms.PartID = PartID;
//	this->ProcessEvent ( pFindPartGroupIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwItemBoxHK::SortPartList (  )
//{
//	static UFunction* pSortPartList = 0;
//	UwItemBoxHK_execSortPartList_Parms parms;
//
//	if ( !pSortPartList )
//		pSortPartList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxHK.SortPartList" );
//
//	this->ProcessEvent ( pSortPartList, &parms, NULL );
//
//}
//
//void UwMatchUserInfo::LogUsedStatus (  )
//{
//	static UFunction* pLogUsedStatus = 0;
//	UwMatchUserInfo_execLogUsedStatus_Parms parms;
//
//	if ( !pLogUsedStatus )
//		pLogUsedStatus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchUserInfo.LogUsedStatus" );
//
//	this->ProcessEvent ( pLogUsedStatus, &parms, NULL );
//
//}
//
//int UwMatchUserInfo::GetPaintIDEquippedItems ( int weaponID )
//{
//	static UFunction* pGetPaintIDEquippedItems = 0;
//	UwMatchUserInfo_execGetPaintIDEquippedItems_Parms parms;
//
//	if ( !pGetPaintIDEquippedItems )
//		pGetPaintIDEquippedItems = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchUserInfo.GetPaintIDEquippedItems" );
//
//	parms.weaponID = weaponID;
//	this->ProcessEvent ( pGetPaintIDEquippedItems, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwMatchUserInfo::ResetQSlotItemUse ( int i, int j, float Time )
//{
//	static UFunction* pResetQSlotItemUse = 0;
//	UwMatchUserInfo_execResetQSlotItemUse_Parms parms;
//
//	if ( !pResetQSlotItemUse )
//		pResetQSlotItemUse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchUserInfo.ResetQSlotItemUse" );
//
//	parms.i = i;
//	parms.j = j;
//	parms.Time = Time;
//	this->ProcessEvent ( pResetQSlotItemUse, &parms, NULL );
//
//}
//
//void UwMatchUserInfo::ResetItemUse ( int i, float Time )
//{
//	static UFunction* pResetItemUse = 0;
//	UwMatchUserInfo_execResetItemUse_Parms parms;
//
//	if ( !pResetItemUse )
//		pResetItemUse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchUserInfo.ResetItemUse" );
//
//	parms.i = i;
//	parms.Time = Time;
//	this->ProcessEvent ( pResetItemUse, &parms, NULL );
//
//}
//
//void UwMatchUserInfo::SetItemUse ( int i )
//{
//	static UFunction* pSetItemUse = 0;
//	UwMatchUserInfo_execSetItemUse_Parms parms;
//
//	if ( !pSetItemUse )
//		pSetItemUse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchUserInfo.SetItemUse" );
//
//	parms.i = i;
//	this->ProcessEvent ( pSetItemUse, &parms, NULL );
//
//}
//
//float UwMatchUserInfo::ExtractBonusPoint ( int ItemID, class UwGameManager* GameMgr )
//{
//	static UFunction* pExtractBonusPoint = 0;
//	UwMatchUserInfo_execExtractBonusPoint_Parms parms;
//
//	if ( !pExtractBonusPoint )
//		pExtractBonusPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchUserInfo.ExtractBonusPoint" );
//
//	parms.ItemID = ItemID;
//	parms.GameMgr = GameMgr;
//	this->ProcessEvent ( pExtractBonusPoint, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float UwMatchUserInfo::ExtractBonusExp ( int ItemID, class UwGameManager* GameMgr )
//{
//	static UFunction* pExtractBonusExp = 0;
//	UwMatchUserInfo_execExtractBonusExp_Parms parms;
//
//	if ( !pExtractBonusExp )
//		pExtractBonusExp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchUserInfo.ExtractBonusExp" );
//
//	parms.ItemID = ItemID;
//	parms.GameMgr = GameMgr;
//	this->ProcessEvent ( pExtractBonusExp, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float UwMatchUserInfo::GetBonusPoint ( class UwGameManager* GameMgr )
//{
//	static UFunction* pGetBonusPoint = 0;
//	UwMatchUserInfo_execGetBonusPoint_Parms parms;
//
//	if ( !pGetBonusPoint )
//		pGetBonusPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchUserInfo.GetBonusPoint" );
//
//	parms.GameMgr = GameMgr;
//	this->ProcessEvent ( pGetBonusPoint, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float UwMatchUserInfo::GetBonusExP ( class UwGameManager* GameMgr )
//{
//	static UFunction* pGetBonusExP = 0;
//	UwMatchUserInfo_execGetBonusExP_Parms parms;
//
//	if ( !pGetBonusExP )
//		pGetBonusExP = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMatchUserInfo.GetBonusExP" );
//
//	parms.GameMgr = GameMgr;
//	this->ProcessEvent ( pGetBonusExP, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UBTCustomDrawHK::Get_0x0A_RemoveString ( struct FString S )
//{
//	static UFunction* pGet_0x0A_RemoveString = 0;
//	UBTCustomDrawHK_execGet_0x0A_RemoveString_Parms parms;
//
//	if ( !pGet_0x0A_RemoveString )
//		pGet_0x0A_RemoveString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.Get_0x0A_RemoveString" );
//
//	parms.S = S;
//	this->ProcessEvent ( pGet_0x0A_RemoveString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UBTCustomDrawHK::GetNumberString ( int Num, bool fixedsize, int fixedlen )
//{
//	static UFunction* pGetNumberString = 0;
//	UBTCustomDrawHK_execGetNumberString_Parms parms;
//
//	if ( !pGetNumberString )
//		pGetNumberString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.GetNumberString" );
//
//	parms.Num = Num;
//	parms.fixedsize = fixedsize;
//	parms.fixedlen = fixedlen;
//	this->ProcessEvent ( pGetNumberString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UBTCustomDrawHK::IsInBox ( float boxx1, float boxx2, float boxy1, float boxy2, float X, float Y )
//{
//	static UFunction* pIsInBox = 0;
//	UBTCustomDrawHK_execIsInBox_Parms parms;
//
//	if ( !pIsInBox )
//		pIsInBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.IsInBox" );
//
//	parms.boxx1 = boxx1;
//	parms.boxx2 = boxx2;
//	parms.boxy1 = boxy1;
//	parms.boxy2 = boxy2;
//	parms.X = X;
//	parms.Y = Y;
//	this->ProcessEvent ( pIsInBox, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UBTCustomDrawHK::IsInFloatBox ( struct FFloatBox Box, float X, float Y )
//{
//	static UFunction* pIsInFloatBox = 0;
//	UBTCustomDrawHK_execIsInFloatBox_Parms parms;
//
//	if ( !pIsInFloatBox )
//		pIsInFloatBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.IsInFloatBox" );
//
//	parms.Box = Box;
//	parms.X = X;
//	parms.Y = Y;
//	this->ProcessEvent ( pIsInFloatBox, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UBTCustomDrawHK::GetRatioIndex ( int width, int Height )
//{
//	static UFunction* pGetRatioIndex = 0;
//	UBTCustomDrawHK_execGetRatioIndex_Parms parms;
//
//	if ( !pGetRatioIndex )
//		pGetRatioIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.GetRatioIndex" );
//
//	parms.width = width;
//	parms.Height = Height;
//	this->ProcessEvent ( pGetRatioIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UIntClass* UBTCustomDrawHK::MakeIntClass ( int A )
//{
//	static UFunction* pMakeIntClass = 0;
//	UBTCustomDrawHK_execMakeIntClass_Parms parms;
//
//	if ( !pMakeIntClass )
//		pMakeIntClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.MakeIntClass" );
//
//	parms.A = A;
//	this->ProcessEvent ( pMakeIntClass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > UBTCustomDrawHK::FormatStringDiviedArray ( struct FString original, class TArray< struct FString > args )
//{
//	static UFunction* pFormatStringDiviedArray = 0;
//	UBTCustomDrawHK_execFormatStringDiviedArray_Parms parms;
//
//	if ( !pFormatStringDiviedArray )
//		pFormatStringDiviedArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.FormatStringDiviedArray" );
//
//	parms.original = original;
//	parms.args = args;
//	this->ProcessEvent ( pFormatStringDiviedArray, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UBTCustomDrawHK::SplitString ( struct FString original, int ExceptDivideMode, struct FString divider1, struct FString divider2, struct FString divider3, class TArray< struct FString >* temp )
//{
//	static UFunction* pSplitString = 0;
//	UBTCustomDrawHK_execSplitString_Parms parms;
//
//	if ( !pSplitString )
//		pSplitString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.SplitString" );
//
//	parms.original = original;
//	parms.ExceptDivideMode = ExceptDivideMode;
//	parms.divider1 = divider1;
//	parms.divider2 = divider2;
//	parms.divider3 = divider3;
//	this->ProcessEvent ( pSplitString, &parms, NULL );
//
//	*temp = parms.temp;
//	return parms.ReturnValue;
//}
//
//struct FString UBTCustomDrawHK::FormatStringArray ( struct FString original, class TArray< struct FString > args )
//{
//	static UFunction* pFormatStringArray = 0;
//	UBTCustomDrawHK_execFormatStringArray_Parms parms;
//
//	if ( !pFormatStringArray )
//		pFormatStringArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.FormatStringArray" );
//
//	parms.original = original;
//	parms.args = args;
//	this->ProcessEvent ( pFormatStringArray, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UBTCustomDrawHK::FormatString ( struct FString original, struct FString arg0, struct FString arg1, struct FString arg2, struct FString arg3, struct FString arg4, struct FString arg5, struct FString arg6, struct FString arg7, struct FString arg8 )
//{
//	static UFunction* pFormatString = 0;
//	UBTCustomDrawHK_execFormatString_Parms parms;
//
//	if ( !pFormatString )
//		pFormatString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.FormatString" );
//
//	parms.original = original;
//	parms.arg0 = arg0;
//	parms.arg1 = arg1;
//	parms.arg2 = arg2;
//	parms.arg3 = arg3;
//	parms.arg4 = arg4;
//	parms.arg5 = arg5;
//	parms.arg6 = arg6;
//	parms.arg7 = arg7;
//	parms.arg8 = arg8;
//	this->ProcessEvent ( pFormatString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FFloatBox UBTCustomDrawHK::MakeResizeBox ( struct FFloatBox inBox, int resizeX, int resizeY )
//{
//	static UFunction* pMakeResizeBox = 0;
//	UBTCustomDrawHK_execMakeResizeBox_Parms parms;
//
//	if ( !pMakeResizeBox )
//		pMakeResizeBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.MakeResizeBox" );
//
//	parms.inBox = inBox;
//	parms.resizeX = resizeX;
//	parms.resizeY = resizeY;
//	this->ProcessEvent ( pMakeResizeBox, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FFloatBox UBTCustomDrawHK::MakeEmptyBox (  )
//{
//	static UFunction* pMakeEmptyBox = 0;
//	UBTCustomDrawHK_execMakeEmptyBox_Parms parms;
//
//	if ( !pMakeEmptyBox )
//		pMakeEmptyBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.MakeEmptyBox" );
//
//	this->ProcessEvent ( pMakeEmptyBox, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FFloatBox UBTCustomDrawHK::MakeFloatBox ( float X1, float Y1, float X2, float Y2 )
//{
//	static UFunction* pMakeFloatBox = 0;
//	UBTCustomDrawHK_execMakeFloatBox_Parms parms;
//
//	if ( !pMakeFloatBox )
//		pMakeFloatBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.MakeFloatBox" );
//
//	parms.X1 = X1;
//	parms.Y1 = Y1;
//	parms.X2 = X2;
//	parms.Y2 = Y2;
//	this->ProcessEvent ( pMakeFloatBox, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UBTCustomDrawHK::HasString ( struct FString Check, struct FString word )
//{
//	static UFunction* pHasString = 0;
//	UBTCustomDrawHK_execHasString_Parms parms;
//
//	if ( !pHasString )
//		pHasString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.HasString" );
//
//	parms.Check = Check;
//	parms.word = word;
//	this->ProcessEvent ( pHasString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UBTCustomDrawHK::SplitTextBounds ( class UCanvas* C, struct FString Text, int FontSize, float clientWidth, class TArray< struct FString >* tarray )
//{
//	static UFunction* pSplitTextBounds = 0;
//	UBTCustomDrawHK_execSplitTextBounds_Parms parms;
//
//	if ( !pSplitTextBounds )
//		pSplitTextBounds = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.SplitTextBounds" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.FontSize = FontSize;
//	parms.clientWidth = clientWidth;
//	this->ProcessEvent ( pSplitTextBounds, &parms, NULL );
//
//	*tarray = parms.tarray;
//}
//
//void UBTCustomDrawHK::DrawImageStretchedHK ( class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img )
//{
//	static UFunction* pDrawImageStretchedHK = 0;
//	UBTCustomDrawHK_execDrawImageStretchedHK_Parms parms;
//
//	if ( !pDrawImageStretchedHK )
//		pDrawImageStretchedHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageStretchedHK" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	this->ProcessEvent ( pDrawImageStretchedHK, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImageStretchedCache ( class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img )
//{
//	static UFunction* pDrawImageStretchedCache = 0;
//	UBTCustomDrawHK_execDrawImageStretchedCache_Parms parms;
//
//	if ( !pDrawImageStretchedCache )
//		pDrawImageStretchedCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageStretchedCache" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.Level = Level;
//	this->ProcessEvent ( pDrawImageStretchedCache, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImageStretched ( class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img )
//{
//	static UFunction* pDrawImageStretched = 0;
//	UBTCustomDrawHK_execDrawImageStretched_Parms parms;
//
//	if ( !pDrawImageStretched )
//		pDrawImageStretched = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageStretched" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	this->ProcessEvent ( pDrawImageStretched, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImageStretchedWithClipArea ( class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img )
//{
//	static UFunction* pDrawImageStretchedWithClipArea = 0;
//	UBTCustomDrawHK_execDrawImageStretchedWithClipArea_Parms parms;
//
//	if ( !pDrawImageStretchedWithClipArea )
//		pDrawImageStretchedWithClipArea = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageStretchedWithClipArea" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.cL = cL;
//	parms.ct = ct;
//	parms.cR = cR;
//	parms.cb = cb;
//	this->ProcessEvent ( pDrawImageStretchedWithClipArea, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImageScaleCache ( class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img )
//{
//	static UFunction* pDrawImageScaleCache = 0;
//	UBTCustomDrawHK_execDrawImageScaleCache_Parms parms;
//
//	if ( !pDrawImageScaleCache )
//		pDrawImageScaleCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageScaleCache" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.Level = Level;
//	this->ProcessEvent ( pDrawImageScaleCache, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImageScale ( class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img )
//{
//	static UFunction* pDrawImageScale = 0;
//	UBTCustomDrawHK_execDrawImageScale_Parms parms;
//
//	if ( !pDrawImageScale )
//		pDrawImageScale = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageScale" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	this->ProcessEvent ( pDrawImageScale, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImageScaleWithClipArea ( class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img )
//{
//	static UFunction* pDrawImageScaleWithClipArea = 0;
//	UBTCustomDrawHK_execDrawImageScaleWithClipArea_Parms parms;
//
//	if ( !pDrawImageScaleWithClipArea )
//		pDrawImageScaleWithClipArea = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageScaleWithClipArea" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.cL = cL;
//	parms.ct = ct;
//	parms.cR = cR;
//	parms.cb = cb;
//	this->ProcessEvent ( pDrawImageScaleWithClipArea, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImageOriginalWithClipArea ( class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img )
//{
//	static UFunction* pDrawImageOriginalWithClipArea = 0;
//	UBTCustomDrawHK_execDrawImageOriginalWithClipArea_Parms parms;
//
//	if ( !pDrawImageOriginalWithClipArea )
//		pDrawImageOriginalWithClipArea = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageOriginalWithClipArea" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.cL = cL;
//	parms.ct = ct;
//	parms.cR = cR;
//	parms.cb = cb;
//	this->ProcessEvent ( pDrawImageOriginalWithClipArea, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImageWithClipArea ( class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img )
//{
//	static UFunction* pDrawImageWithClipArea = 0;
//	UBTCustomDrawHK_execDrawImageWithClipArea_Parms parms;
//
//	if ( !pDrawImageWithClipArea )
//		pDrawImageWithClipArea = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageWithClipArea" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.cL = cL;
//	parms.ct = ct;
//	parms.cR = cR;
//	parms.cb = cb;
//	this->ProcessEvent ( pDrawImageWithClipArea, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImageOriginalCache ( class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img )
//{
//	static UFunction* pDrawImageOriginalCache = 0;
//	UBTCustomDrawHK_execDrawImageOriginalCache_Parms parms;
//
//	if ( !pDrawImageOriginalCache )
//		pDrawImageOriginalCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageOriginalCache" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.Level = Level;
//	this->ProcessEvent ( pDrawImageOriginalCache, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImageOriginal ( class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img )
//{
//	static UFunction* pDrawImageOriginal = 0;
//	UBTCustomDrawHK_execDrawImageOriginal_Parms parms;
//
//	if ( !pDrawImageOriginal )
//		pDrawImageOriginal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageOriginal" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	this->ProcessEvent ( pDrawImageOriginal, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImageCache ( class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img )
//{
//	static UFunction* pDrawImageCache = 0;
//	UBTCustomDrawHK_execDrawImageCache_Parms parms;
//
//	if ( !pDrawImageCache )
//		pDrawImageCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageCache" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.Level = Level;
//	this->ProcessEvent ( pDrawImageCache, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImage_Alpha ( class UCanvas* C, float tL, float tT, float tR, float tB, float Alpha, struct FImage* img )
//{
//	static UFunction* pDrawImage_Alpha = 0;
//	UBTCustomDrawHK_execDrawImage_Alpha_Parms parms;
//
//	if ( !pDrawImage_Alpha )
//		pDrawImage_Alpha = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImage_Alpha" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.Alpha = Alpha;
//	this->ProcessEvent ( pDrawImage_Alpha, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImage ( class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img )
//{
//	static UFunction* pDrawImage = 0;
//	UBTCustomDrawHK_execDrawImage_Parms parms;
//
//	if ( !pDrawImage )
//		pDrawImage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImage" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	this->ProcessEvent ( pDrawImage, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImagePaddingCache ( class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, int Level, struct FImage* img )
//{
//	static UFunction* pDrawImagePaddingCache = 0;
//	UBTCustomDrawHK_execDrawImagePaddingCache_Parms parms;
//
//	if ( !pDrawImagePaddingCache )
//		pDrawImagePaddingCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImagePaddingCache" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.pL = pL;
//	parms.pT = pT;
//	parms.pR = pR;
//	parms.pB = pB;
//	parms.Level = Level;
//	this->ProcessEvent ( pDrawImagePaddingCache, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImagePadding ( class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, struct FImage* img )
//{
//	static UFunction* pDrawImagePadding = 0;
//	UBTCustomDrawHK_execDrawImagePadding_Parms parms;
//
//	if ( !pDrawImagePadding )
//		pDrawImagePadding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImagePadding" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.pL = pL;
//	parms.pT = pT;
//	parms.pR = pR;
//	parms.pB = pB;
//	this->ProcessEvent ( pDrawImagePadding, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImagePaddingOffset ( class UCanvas* C, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, struct FImage* img )
//{
//	static UFunction* pDrawImagePaddingOffset = 0;
//	UBTCustomDrawHK_execDrawImagePaddingOffset_Parms parms;
//
//	if ( !pDrawImagePaddingOffset )
//		pDrawImagePaddingOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImagePaddingOffset" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.pL = pL;
//	parms.pT = pT;
//	parms.pR = pR;
//	parms.pB = pB;
//	this->ProcessEvent ( pDrawImagePaddingOffset, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImageScaleAllAndPaddingOffsetAndClipping ( class UCanvas* C, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, float cL, float ct, float cR, float cb, struct FImage* img )
//{
//	static UFunction* pDrawImageScaleAllAndPaddingOffsetAndClipping = 0;
//	UBTCustomDrawHK_execDrawImageScaleAllAndPaddingOffsetAndClipping_Parms parms;
//
//	if ( !pDrawImageScaleAllAndPaddingOffsetAndClipping )
//		pDrawImageScaleAllAndPaddingOffsetAndClipping = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageScaleAllAndPaddingOffsetAndClipping" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.pL = pL;
//	parms.pT = pT;
//	parms.pR = pR;
//	parms.pB = pB;
//	parms.cL = cL;
//	parms.ct = ct;
//	parms.cR = cR;
//	parms.cb = cb;
//	this->ProcessEvent ( pDrawImageScaleAllAndPaddingOffsetAndClipping, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawImageScaleAllAndPaddingAndClipping ( class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, float cL, float ct, float cR, float cb, struct FImage* img )
//{
//	static UFunction* pDrawImageScaleAllAndPaddingAndClipping = 0;
//	UBTCustomDrawHK_execDrawImageScaleAllAndPaddingAndClipping_Parms parms;
//
//	if ( !pDrawImageScaleAllAndPaddingAndClipping )
//		pDrawImageScaleAllAndPaddingAndClipping = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawImageScaleAllAndPaddingAndClipping" );
//
//	parms.C = C;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.pL = pL;
//	parms.pT = pT;
//	parms.pR = pR;
//	parms.pB = pB;
//	parms.cL = cL;
//	parms.ct = ct;
//	parms.cR = cR;
//	parms.cb = cb;
//	this->ProcessEvent ( pDrawImageScaleAllAndPaddingAndClipping, &parms, NULL );
//
//	*img = parms.img;
//}
//
//void UBTCustomDrawHK::DrawEllipsisStringPaddingOffset ( class UCanvas* C, struct FString Text, unsigned char dt, float FontSize, float widthPerc, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, class FColor BackShadowColor, int Level )
//{
//	static UFunction* pDrawEllipsisStringPaddingOffset = 0;
//	UBTCustomDrawHK_execDrawEllipsisStringPaddingOffset_Parms parms;
//
//	if ( !pDrawEllipsisStringPaddingOffset )
//		pDrawEllipsisStringPaddingOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawEllipsisStringPaddingOffset" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.dt = dt;
//	parms.FontSize = FontSize;
//	parms.widthPerc = widthPerc;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.pL = pL;
//	parms.pT = pT;
//	parms.pR = pR;
//	parms.pB = pB;
//	parms.BackShadowColor = BackShadowColor;
//	parms.Level = Level;
//	this->ProcessEvent ( pDrawEllipsisStringPaddingOffset, &parms, NULL );
//
//}
//
//void UBTCustomDrawHK::DrawEllipsisStringPadding ( class UCanvas* C, struct FString Text, unsigned char dt, float FontSize, float widthPerc, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, class FColor BackShadowColor, int Level )
//{
//	static UFunction* pDrawEllipsisStringPadding = 0;
//	UBTCustomDrawHK_execDrawEllipsisStringPadding_Parms parms;
//
//	if ( !pDrawEllipsisStringPadding )
//		pDrawEllipsisStringPadding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawEllipsisStringPadding" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.dt = dt;
//	parms.FontSize = FontSize;
//	parms.widthPerc = widthPerc;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.pL = pL;
//	parms.pT = pT;
//	parms.pR = pR;
//	parms.pB = pB;
//	parms.BackShadowColor = BackShadowColor;
//	parms.Level = Level;
//	this->ProcessEvent ( pDrawEllipsisStringPadding, &parms, NULL );
//
//}
//
//void UBTCustomDrawHK::DrawEllipsisString ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float widthPerc, float tL, float tT, float tR, float tB, class FColor BackShadowColor, int Level )
//{
//	static UFunction* pDrawEllipsisString = 0;
//	UBTCustomDrawHK_execDrawEllipsisString_Parms parms;
//
//	if ( !pDrawEllipsisString )
//		pDrawEllipsisString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawEllipsisString" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.dt = dt;
//	parms.fntSize = fntSize;
//	parms.widthPerc = widthPerc;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.BackShadowColor = BackShadowColor;
//	parms.Level = Level;
//	this->ProcessEvent ( pDrawEllipsisString, &parms, NULL );
//
//}
//
//struct FFloatBox UBTCustomDrawHK::GetDrawStringFloatBoxOLD ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor )
//{
//	static UFunction* pGetDrawStringFloatBoxOLD = 0;
//	UBTCustomDrawHK_execGetDrawStringFloatBoxOLD_Parms parms;
//
//	if ( !pGetDrawStringFloatBoxOLD )
//		pGetDrawStringFloatBoxOLD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.GetDrawStringFloatBoxOLD" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.dt = dt;
//	parms.fntSize = fntSize;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.BackShadowColor = BackShadowColor;
//	this->ProcessEvent ( pGetDrawStringFloatBoxOLD, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FFloatBox UBTCustomDrawHK::GetDrawStringFloatBoxLH ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor )
//{
//	static UFunction* pGetDrawStringFloatBoxLH = 0;
//	UBTCustomDrawHK_execGetDrawStringFloatBoxLH_Parms parms;
//
//	if ( !pGetDrawStringFloatBoxLH )
//		pGetDrawStringFloatBoxLH = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.GetDrawStringFloatBoxLH" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.dt = dt;
//	parms.fntSize = fntSize;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.BackShadowColor = BackShadowColor;
//	this->ProcessEvent ( pGetDrawStringFloatBoxLH, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FFloatBox UBTCustomDrawHK::GetDrawStringFloatBox ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor )
//{
//	static UFunction* pGetDrawStringFloatBox = 0;
//	UBTCustomDrawHK_execGetDrawStringFloatBox_Parms parms;
//
//	if ( !pGetDrawStringFloatBox )
//		pGetDrawStringFloatBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.GetDrawStringFloatBox" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.dt = dt;
//	parms.fntSize = fntSize;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.BackShadowColor = BackShadowColor;
//	this->ProcessEvent ( pGetDrawStringFloatBox, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UBTCustomDrawHK::DrawStringCache ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor, int Level )
//{
//	static UFunction* pDrawStringCache = 0;
//	UBTCustomDrawHK_execDrawStringCache_Parms parms;
//
//	if ( !pDrawStringCache )
//		pDrawStringCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawStringCache" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.dt = dt;
//	parms.fntSize = fntSize;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.BackShadowColor = BackShadowColor;
//	parms.Level = Level;
//	this->ProcessEvent ( pDrawStringCache, &parms, NULL );
//
//}
//
//void UBTCustomDrawHK::DrawString ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor, int PresetIndex, bool bUseD3DFont )
//{
//	static UFunction* pDrawString = 0;
//	UBTCustomDrawHK_execDrawString_Parms parms;
//
//	if ( !pDrawString )
//		pDrawString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawString" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.dt = dt;
//	parms.fntSize = fntSize;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.BackShadowColor = BackShadowColor;
//	parms.PresetIndex = PresetIndex;
//	parms.bUseD3DFont = bUseD3DFont;
//	this->ProcessEvent ( pDrawString, &parms, NULL );
//
//}
//
//void UBTCustomDrawHK::DrawStringModulateAlpha ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor, int PresetIndex, bool bUseD3DFont )
//{
//	static UFunction* pDrawStringModulateAlpha = 0;
//	UBTCustomDrawHK_execDrawStringModulateAlpha_Parms parms;
//
//	if ( !pDrawStringModulateAlpha )
//		pDrawStringModulateAlpha = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawStringModulateAlpha" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.dt = dt;
//	parms.fntSize = fntSize;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.BackShadowColor = BackShadowColor;
//	parms.PresetIndex = PresetIndex;
//	parms.bUseD3DFont = bUseD3DFont;
//	this->ProcessEvent ( pDrawStringModulateAlpha, &parms, NULL );
//
//}
//
//void UBTCustomDrawHK::DrawString_UseModulateColor ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor, int PresetIndex, bool bUseD3DFont, bool bUseModulateColor, struct FPlane mColor )
//{
//	static UFunction* pDrawString_UseModulateColor = 0;
//	UBTCustomDrawHK_execDrawString_UseModulateColor_Parms parms;
//
//	if ( !pDrawString_UseModulateColor )
//		pDrawString_UseModulateColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawString_UseModulateColor" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.dt = dt;
//	parms.fntSize = fntSize;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.BackShadowColor = BackShadowColor;
//	parms.PresetIndex = PresetIndex;
//	parms.bUseD3DFont = bUseD3DFont;
//	parms.bUseModulateColor = bUseModulateColor;
//	parms.mColor = mColor;
//	this->ProcessEvent ( pDrawString_UseModulateColor, &parms, NULL );
//
//}
//
//void UBTCustomDrawHK::DrawStringPaddingOffset ( class UCanvas* C, struct FString Text, unsigned char dt, float FontSize, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, class FColor BackShadowColor, int PresetIndex, bool bUseD3DFont )
//{
//	static UFunction* pDrawStringPaddingOffset = 0;
//	UBTCustomDrawHK_execDrawStringPaddingOffset_Parms parms;
//
//	if ( !pDrawStringPaddingOffset )
//		pDrawStringPaddingOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawStringPaddingOffset" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.dt = dt;
//	parms.FontSize = FontSize;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.pL = pL;
//	parms.pT = pT;
//	parms.pR = pR;
//	parms.pB = pB;
//	parms.BackShadowColor = BackShadowColor;
//	parms.PresetIndex = PresetIndex;
//	parms.bUseD3DFont = bUseD3DFont;
//	this->ProcessEvent ( pDrawStringPaddingOffset, &parms, NULL );
//
//}
//
//void UBTCustomDrawHK::DrawStringPadding ( class UCanvas* C, struct FString Text, unsigned char dt, float FontSize, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, class FColor BackShadowColor, int Level )
//{
//	static UFunction* pDrawStringPadding = 0;
//	UBTCustomDrawHK_execDrawStringPadding_Parms parms;
//
//	if ( !pDrawStringPadding )
//		pDrawStringPadding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawStringPadding" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.dt = dt;
//	parms.FontSize = FontSize;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.pL = pL;
//	parms.pT = pT;
//	parms.pR = pR;
//	parms.pB = pB;
//	parms.BackShadowColor = BackShadowColor;
//	parms.Level = Level;
//	this->ProcessEvent ( pDrawStringPadding, &parms, NULL );
//
//}
//
//float UBTCustomDrawHK::DrawTextArray ( class UCanvas* C, class TArray< struct FText > textArray, unsigned char dt, unsigned char tadt, float tL, float tT, float tR, float tB, int Level )
//{
//	static UFunction* pDrawTextArray = 0;
//	UBTCustomDrawHK_execDrawTextArray_Parms parms;
//
//	if ( !pDrawTextArray )
//		pDrawTextArray = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawTextArray" );
//
//	parms.C = C;
//	parms.textArray = textArray;
//	parms.dt = dt;
//	parms.tadt = tadt;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.Level = Level;
//	this->ProcessEvent ( pDrawTextArray, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UBTCustomDrawHK::DrawTextCache ( class UCanvas* C, struct FText Text, float tL, float tT, float tR, float tB, int Level )
//{
//	static UFunction* pDrawTextCache = 0;
//	UBTCustomDrawHK_execDrawTextCache_Parms parms;
//
//	if ( !pDrawTextCache )
//		pDrawTextCache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawTextCache" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.Level = Level;
//	this->ProcessEvent ( pDrawTextCache, &parms, NULL );
//
//}
//
//void UBTCustomDrawHK::DrawText_UseModulateColor ( class UCanvas* C, struct FText Text, float tL, float tT, float tR, float tB, int PresetIndex, bool bUseD3DFont, bool bUseModulateColor, struct FPlane mColor )
//{
//	static UFunction* pDrawText_UseModulateColor = 0;
//	UBTCustomDrawHK_execDrawText_UseModulateColor_Parms parms;
//
//	if ( !pDrawText_UseModulateColor )
//		pDrawText_UseModulateColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawText_UseModulateColor" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.PresetIndex = PresetIndex;
//	parms.bUseD3DFont = bUseD3DFont;
//	parms.bUseModulateColor = bUseModulateColor;
//	parms.mColor = mColor;
//	this->ProcessEvent ( pDrawText_UseModulateColor, &parms, NULL );
//
//}
//
//void UBTCustomDrawHK::DrawText ( class UCanvas* C, struct FText Text, float tL, float tT, float tR, float tB, int PresetIndex, bool bUseD3DFont )
//{
//	static UFunction* pDrawText = 0;
//	UBTCustomDrawHK_execDrawText_Parms parms;
//
//	if ( !pDrawText )
//		pDrawText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawText" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.PresetIndex = PresetIndex;
//	parms.bUseD3DFont = bUseD3DFont;
//	this->ProcessEvent ( pDrawText, &parms, NULL );
//
//}
//
//void UBTCustomDrawHK::DrawTextPaddingOffset ( class UCanvas* C, struct FText Text, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB )
//{
//	static UFunction* pDrawTextPaddingOffset = 0;
//	UBTCustomDrawHK_execDrawTextPaddingOffset_Parms parms;
//
//	if ( !pDrawTextPaddingOffset )
//		pDrawTextPaddingOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawTextPaddingOffset" );
//
//	parms.C = C;
//	parms.Text = Text;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.pL = pL;
//	parms.pT = pT;
//	parms.pR = pR;
//	parms.pB = pB;
//	this->ProcessEvent ( pDrawTextPaddingOffset, &parms, NULL );
//
//}
//
//void UBTCustomDrawHK::DrawTextArrayPadding ( class UCanvas* C, class TArray< struct FText > textArray, unsigned char dt, unsigned char tadt, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB )
//{
//	static UFunction* pDrawTextArrayPadding = 0;
//	UBTCustomDrawHK_execDrawTextArrayPadding_Parms parms;
//
//	if ( !pDrawTextArrayPadding )
//		pDrawTextArrayPadding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.DrawTextArrayPadding" );
//
//	parms.C = C;
//	parms.textArray = textArray;
//	parms.dt = dt;
//	parms.tadt = tadt;
//	parms.tL = tL;
//	parms.tT = tT;
//	parms.tR = tR;
//	parms.tB = tB;
//	parms.pL = pL;
//	parms.pT = pT;
//	parms.pR = pR;
//	parms.pB = pB;
//	this->ProcessEvent ( pDrawTextArrayPadding, &parms, NULL );
//
//}
//
//struct FString UBTCustomDrawHK::ToDollarString ( struct FString money )
//{
//	static UFunction* pToDollarString = 0;
//	UBTCustomDrawHK_execToDollarString_Parms parms;
//
//	if ( !pToDollarString )
//		pToDollarString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.ToDollarString" );
//
//	parms.money = money;
//	this->ProcessEvent ( pToDollarString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UBTCustomDrawHK::ToWonString ( struct FString money )
//{
//	static UFunction* pToWonString = 0;
//	UBTCustomDrawHK_execToWonString_Parms parms;
//
//	if ( !pToWonString )
//		pToWonString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.ToWonString" );
//
//	parms.money = money;
//	this->ProcessEvent ( pToWonString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class FColor UBTCustomDrawHK::MakeColorRGB ( unsigned char R, unsigned char G, unsigned char B )
//{
//	static UFunction* pMakeColorRGB = 0;
//	UBTCustomDrawHK_execMakeColorRGB_Parms parms;
//
//	if ( !pMakeColorRGB )
//		pMakeColorRGB = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.MakeColorRGB" );
//
//	parms.R = R;
//	parms.G = G;
//	parms.B = B;
//	this->ProcessEvent ( pMakeColorRGB, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FImage UBTCustomDrawHK::MakeImageColor ( int width, int Height, unsigned char dt, class UMaterial* img, class FColor frontColor, class FColor BackShadowColor )
//{
//	static UFunction* pMakeImageColor = 0;
//	UBTCustomDrawHK_execMakeImageColor_Parms parms;
//
//	if ( !pMakeImageColor )
//		pMakeImageColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.MakeImageColor" );
//
//	parms.width = width;
//	parms.Height = Height;
//	parms.dt = dt;
//	parms.img = img;
//	parms.frontColor = frontColor;
//	parms.BackShadowColor = BackShadowColor;
//	this->ProcessEvent ( pMakeImageColor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FImage UBTCustomDrawHK::MakeImage ( int width, int Height, unsigned char dt, class UMaterial* img )
//{
//	static UFunction* pMakeImage = 0;
//	UBTCustomDrawHK_execMakeImage_Parms parms;
//
//	if ( !pMakeImage )
//		pMakeImage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.MakeImage" );
//
//	parms.width = width;
//	parms.Height = Height;
//	parms.dt = dt;
//	parms.img = img;
//	this->ProcessEvent ( pMakeImage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FText UBTCustomDrawHK::MakeTextColor ( int fntSize, unsigned char fntDrawType, struct FString txt, class FColor frontColor, class FColor BackShadowColor )
//{
//	static UFunction* pMakeTextColor = 0;
//	UBTCustomDrawHK_execMakeTextColor_Parms parms;
//
//	if ( !pMakeTextColor )
//		pMakeTextColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.MakeTextColor" );
//
//	parms.fntSize = fntSize;
//	parms.fntDrawType = fntDrawType;
//	parms.txt = txt;
//	parms.frontColor = frontColor;
//	parms.BackShadowColor = BackShadowColor;
//	this->ProcessEvent ( pMakeTextColor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FText UBTCustomDrawHK::MakeText ( int fntSize, unsigned char fntDrawType, struct FString txt )
//{
//	static UFunction* pMakeText = 0;
//	UBTCustomDrawHK_execMakeText_Parms parms;
//
//	if ( !pMakeText )
//		pMakeText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BTCustomDrawHK.MakeText" );
//
//	parms.fntSize = fntSize;
//	parms.fntDrawType = fntDrawType;
//	parms.txt = txt;
//	this->ProcessEvent ( pMakeText, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwItemBoxCashHK::SetCashItemInfo ( class UwItemBoxHK* ItemInfo, struct FGP20Product GP20Product, struct FString strEndDate )
//{
//	static UFunction* pSetCashItemInfo = 0;
//	UwItemBoxCashHK_execSetCashItemInfo_Parms parms;
//
//	if ( !pSetCashItemInfo )
//		pSetCashItemInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxCashHK.SetCashItemInfo" );
//
//	parms.ItemInfo = ItemInfo;
//	parms.GP20Product = GP20Product;
//	parms.strEndDate = strEndDate;
//	this->ProcessEvent ( pSetCashItemInfo, &parms, NULL );
//
//}
//
//void UwItemBoxCashHK::SetProductType ( struct FString proType )
//{
//	static UFunction* pSetProductType = 0;
//	UwItemBoxCashHK_execSetProductType_Parms parms;
//
//	if ( !pSetProductType )
//		pSetProductType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxCashHK.SetProductType" );
//
//	parms.proType = proType;
//	this->ProcessEvent ( pSetProductType, &parms, NULL );
//
//}
//
//bool UwItemBoxCashHK::IsShowStore ( struct FGP20Product GP20Product )
//{
//	static UFunction* pIsShowStore = 0;
//	UwItemBoxCashHK_execIsShowStore_Parms parms;
//
//	if ( !pIsShowStore )
//		pIsShowStore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxCashHK.IsShowStore" );
//
//	parms.GP20Product = GP20Product;
//	this->ProcessEvent ( pIsShowStore, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char UwItemBoxCashHK::CCoinType (  )
//{
//	static UFunction* pCCoinType = 0;
//	UwItemBoxCashHK_execCCoinType_Parms parms;
//
//	if ( !pCCoinType )
//		pCCoinType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxCashHK.CCoinType" );
//
//	this->ProcessEvent ( pCCoinType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char UwItemBoxCashHK::PCoinType (  )
//{
//	static UFunction* pPCoinType = 0;
//	UwItemBoxCashHK_execPCoinType_Parms parms;
//
//	if ( !pPCoinType )
//		pPCoinType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wItemBoxCashHK.PCoinType" );
//
//	this->ProcessEvent ( pPCoinType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UClanMarkManager::Render ( class UCanvas* C, int X1, int Y1, int X2, int Y2, struct FString ClanName )
//{
//	static UFunction* pRender = 0;
//	UClanMarkManager_execRender_Parms parms;
//
//	if ( !pRender )
//		pRender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ClanMarkManager.Render" );
//
//	parms.C = C;
//	parms.X1 = X1;
//	parms.Y1 = Y1;
//	parms.X2 = X2;
//	parms.Y2 = Y2;
//	parms.ClanName = ClanName;
//	this->ProcessEvent ( pRender, &parms, NULL );
//
//}
//
//int UClanMarkManager::FindClanMark_Inner ( struct FString ClanName, int Left, int Right )
//{
//	static UFunction* pFindClanMark_Inner = 0;
//	UClanMarkManager_execFindClanMark_Inner_Parms parms;
//
//	if ( !pFindClanMark_Inner )
//		pFindClanMark_Inner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ClanMarkManager.FindClanMark_Inner" );
//
//	parms.ClanName = ClanName;
//	parms.Left = Left;
//	parms.Right = Right;
//	this->ProcessEvent ( pFindClanMark_Inner, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UClanMarkManager::FindClanMark ( struct FString ClanName )
//{
//	static UFunction* pFindClanMark = 0;
//	UClanMarkManager_execFindClanMark_Parms parms;
//
//	if ( !pFindClanMark )
//		pFindClanMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ClanMarkManager.FindClanMark" );
//
//	parms.ClanName = ClanName;
//	this->ProcessEvent ( pFindClanMark, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UClanMarkManager::FindClanMark_ForInsertLocation ( struct FString ClanName )
//{
//	static UFunction* pFindClanMark_ForInsertLocation = 0;
//	UClanMarkManager_execFindClanMark_ForInsertLocation_Parms parms;
//
//	if ( !pFindClanMark_ForInsertLocation )
//		pFindClanMark_ForInsertLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ClanMarkManager.FindClanMark_ForInsertLocation" );
//
//	parms.ClanName = ClanName;
//	this->ProcessEvent ( pFindClanMark_ForInsertLocation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UClanMarkManager::RemoveClanMark ( struct FString ClanName )
//{
//	static UFunction* pRemoveClanMark = 0;
//	UClanMarkManager_execRemoveClanMark_Parms parms;
//
//	if ( !pRemoveClanMark )
//		pRemoveClanMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ClanMarkManager.RemoveClanMark" );
//
//	parms.ClanName = ClanName;
//	this->ProcessEvent ( pRemoveClanMark, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UClanMarkManager::SetClanLevel ( struct FString ClanName, int ClanLevel )
//{
//	static UFunction* pSetClanLevel = 0;
//	UClanMarkManager_execSetClanLevel_Parms parms;
//
//	if ( !pSetClanLevel )
//		pSetClanLevel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ClanMarkManager.SetClanLevel" );
//
//	parms.ClanName = ClanName;
//	parms.ClanLevel = ClanLevel;
//	this->ProcessEvent ( pSetClanLevel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UClanMarkManager::AddClanMark ( struct FString ClanName, int Pattern, int BG, int BL, bool bSetClanState, bool bClanLF )
//{
//	static UFunction* pAddClanMark = 0;
//	UClanMarkManager_execAddClanMark_Parms parms;
//
//	if ( !pAddClanMark )
//		pAddClanMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ClanMarkManager.AddClanMark" );
//
//	parms.ClanName = ClanName;
//	parms.Pattern = Pattern;
//	parms.BG = BG;
//	parms.BL = BL;
//	parms.bSetClanState = bSetClanState;
//	parms.bClanLF = bClanLF;
//	this->ProcessEvent ( pAddClanMark, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UClanMarkManager::SetClanState ( struct FString ClanName, bool bClanLF )
//{
//	static UFunction* pSetClanState = 0;
//	UClanMarkManager_execSetClanState_Parms parms;
//
//	if ( !pSetClanState )
//		pSetClanState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ClanMarkManager.SetClanState" );
//
//	parms.ClanName = ClanName;
//	parms.bClanLF = bClanLF;
//	this->ProcessEvent ( pSetClanState, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UClanMarkManager::Init ( class UwGameManager* gm )
//{
//	static UFunction* pInit = 0;
//	UClanMarkManager_execInit_Parms parms;
//
//	if ( !pInit )
//		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ClanMarkManager.Init" );
//
//	parms.gm = gm;
//	this->ProcessEvent ( pInit, &parms, NULL );
//
//}
//
//void UClanMarkManager::Tick ( float Delta )
//{
//	static UFunction* pTick = 0;
//	UClanMarkManager_execTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ClanMarkManager.Tick" );
//
//	parms.Delta = Delta;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void UDelegateEventTimer::OnEventTimer ( int Index )
//{
//	static UFunction* pOnEventTimer = 0;
//	UDelegateEventTimer_execOnEventTimer_Parms parms;
//
//	if ( !pOnEventTimer )
//		pOnEventTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.DelegateEventTimer.OnEventTimer" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pOnEventTimer, &parms, NULL );
//
//}
//
//void AwWeaponRes_Base::PrecacheSound (  )
//{
//	static UFunction* pPrecacheSound = 0;
//	AwWeaponRes_Base_execPrecacheSound_Parms parms;
//
//	if ( !pPrecacheSound )
//		pPrecacheSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponRes_Base.PrecacheSound" );
//
//	this->ProcessEvent ( pPrecacheSound, &parms, NULL );
//
//}
//
//void AwWeaponRes_Base::PrecacheMaterials ( class ALevelInfo* Level )
//{
//	static UFunction* pPrecacheMaterials = 0;
//	AwWeaponRes_Base_execPrecacheMaterials_Parms parms;
//
//	if ( !pPrecacheMaterials )
//		pPrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponRes_Base.PrecacheMaterials" );
//
//	parms.Level = Level;
//	this->ProcessEvent ( pPrecacheMaterials, &parms, NULL );
//
//}
//
//void AwWeaponRes_Base::PrecacheClasses (  )
//{
//	static UFunction* pPrecacheClasses = 0;
//	AwWeaponRes_Base_execPrecacheClasses_Parms parms;
//
//	if ( !pPrecacheClasses )
//		pPrecacheClasses = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponRes_Base.PrecacheClasses" );
//
//	this->ProcessEvent ( pPrecacheClasses, &parms, NULL );
//
//}
//
//bool AwWeaponAcce::IsAiming (  )
//{
//	static UFunction* pIsAiming = 0;
//	AwWeaponAcce_execIsAiming_Parms parms;
//
//	if ( !pIsAiming )
//		pIsAiming = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponAcce.IsAiming" );
//
//	this->ProcessEvent ( pIsAiming, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwWeaponAcce::Switch3DScope ( bool bAiming )
//{
//	static UFunction* pSwitch3DScope = 0;
//	AwWeaponAcce_execSwitch3DScope_Parms parms;
//
//	if ( !pSwitch3DScope )
//		pSwitch3DScope = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponAcce.Switch3DScope" );
//
//	parms.bAiming = bAiming;
//	this->ProcessEvent ( pSwitch3DScope, &parms, NULL );
//
//}
//
//bool AwWeaponAcce::Set ( unsigned char Type, struct FString szMesh, struct FVector AimDiff, int iPartsItemID, int iPartsGroupID, bool bUseMeshString )
//{
//	static UFunction* pSet = 0;
//	AwWeaponAcce_execSet_Parms parms;
//
//	if ( !pSet )
//		pSet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wWeaponAcce.Set" );
//
//	parms.Type = Type;
//	parms.szMesh = szMesh;
//	parms.AimDiff = AimDiff;
//	parms.iPartsItemID = iPartsItemID;
//	parms.iPartsGroupID = iPartsGroupID;
//	parms.bUseMeshString = bUseMeshString;
//	this->ProcessEvent ( pSet, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AwMessage_Score::GetGainPoint ( int Code_MessageScore )
//{
//	static UFunction* pGetGainPoint = 0;
//	AwMessage_Score_execGetGainPoint_Parms parms;
//
//	if ( !pGetGainPoint )
//		pGetGainPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Score.GetGainPoint" );
//
//	parms.Code_MessageScore = Code_MessageScore;
//	this->ProcessEvent ( pGetGainPoint, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwMessage_Score::PlaySoundMessageScore ( class APlayerController* P, struct FString SoundKind )
//{
//	static UFunction* pPlaySoundMessageScore = 0;
//	AwMessage_Score_execPlaySoundMessageScore_Parms parms;
//
//	if ( !pPlaySoundMessageScore )
//		pPlaySoundMessageScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Score.PlaySoundMessageScore" );
//
//	parms.P = P;
//	parms.SoundKind = SoundKind;
//	this->ProcessEvent ( pPlaySoundMessageScore, &parms, NULL );
//
//}
//
//void AwMessage_Score::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pClientReceive = 0;
//	AwMessage_Score_execClientReceive_Parms parms;
//
//	if ( !pClientReceive )
//		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Score.ClientReceive" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pClientReceive, &parms, NULL );
//
//}
//
//struct FString AwMessage_Score::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGetString = 0;
//	AwMessage_Score_execGetString_Parms parms;
//
//	if ( !pGetString )
//		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Score.GetString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGetString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UPrecacheInterface::PrecacheGameSkeletalMeshes ( class ALevelInfo* myLevel )
//{
//	static UFunction* pPrecacheGameSkeletalMeshes = 0;
//	UPrecacheInterface_execPrecacheGameSkeletalMeshes_Parms parms;
//
//	if ( !pPrecacheGameSkeletalMeshes )
//		pPrecacheGameSkeletalMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PrecacheInterface.PrecacheGameSkeletalMeshes" );
//
//	parms.myLevel = myLevel;
//	this->ProcessEvent ( pPrecacheGameSkeletalMeshes, &parms, NULL );
//
//}
//
//void UPrecacheInterface::PrecacheGameStaticMeshes ( class ALevelInfo* myLevel )
//{
//	static UFunction* pPrecacheGameStaticMeshes = 0;
//	UPrecacheInterface_execPrecacheGameStaticMeshes_Parms parms;
//
//	if ( !pPrecacheGameStaticMeshes )
//		pPrecacheGameStaticMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PrecacheInterface.PrecacheGameStaticMeshes" );
//
//	parms.myLevel = myLevel;
//	this->ProcessEvent ( pPrecacheGameStaticMeshes, &parms, NULL );
//
//}
//
//void UPrecacheInterface::PrecacheGameTextures ( class ALevelInfo* myLevel )
//{
//	static UFunction* pPrecacheGameTextures = 0;
//	UPrecacheInterface_execPrecacheGameTextures_Parms parms;
//
//	if ( !pPrecacheGameTextures )
//		pPrecacheGameTextures = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PrecacheInterface.PrecacheGameTextures" );
//
//	parms.myLevel = myLevel;
//	this->ProcessEvent ( pPrecacheGameTextures, &parms, NULL );
//
//}
//
//class AArmor* AArmor::PrioritizeArmor ( int Damage, class UClass* DamageType, struct FVector HitLocation )
//{
//	static UFunction* pPrioritizeArmor = 0;
//	AArmor_execPrioritizeArmor_Parms parms;
//
//	if ( !pPrioritizeArmor )
//		pPrioritizeArmor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Armor.PrioritizeArmor" );
//
//	parms.Damage = Damage;
//	parms.DamageType = DamageType;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pPrioritizeArmor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AArmor::ArmorImpactEffect ( struct FVector HitLocation )
//{
//	static UFunction* pArmorImpactEffect = 0;
//	AArmor_execArmorImpactEffect_Parms parms;
//
//	if ( !pArmorImpactEffect )
//		pArmorImpactEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Armor.ArmorImpactEffect" );
//
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pArmorImpactEffect, &parms, NULL );
//
//}
//
//int AArmor::ArmorPriority ( class UClass* DamageType )
//{
//	static UFunction* pArmorPriority = 0;
//	AArmor_execArmorPriority_Parms parms;
//
//	if ( !pArmorPriority )
//		pArmorPriority = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Armor.ArmorPriority" );
//
//	parms.DamageType = DamageType;
//	this->ProcessEvent ( pArmorPriority, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AArmor::ArmorAbsorbDamage ( int Damage, class UClass* DamageType, struct FVector HitLocation )
//{
//	static UFunction* pArmorAbsorbDamage = 0;
//	AArmor_execArmorAbsorbDamage_Parms parms;
//
//	if ( !pArmorAbsorbDamage )
//		pArmorAbsorbDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Armor.ArmorAbsorbDamage" );
//
//	parms.Damage = Damage;
//	parms.DamageType = DamageType;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pArmorAbsorbDamage, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AWeaponPickup::Reset (  )
//{
//	static UFunction* pReset = 0;
//	AWeaponPickup_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponPickup.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void AWeaponPickup::InitDroppedPickupFor ( class AInventory* Inv )
//{
//	static UFunction* pInitDroppedPickupFor = 0;
//	AWeaponPickup_execInitDroppedPickupFor_Parms parms;
//
//	if ( !pInitDroppedPickupFor )
//		pInitDroppedPickupFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponPickup.InitDroppedPickupFor" );
//
//	parms.Inv = Inv;
//	this->ProcessEvent ( pInitDroppedPickupFor, &parms, NULL );
//
//}
//
//float AWeaponPickup::GetRespawnTime (  )
//{
//	static UFunction* pGetRespawnTime = 0;
//	AWeaponPickup_execGetRespawnTime_Parms parms;
//
//	if ( !pGetRespawnTime )
//		pGetRespawnTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponPickup.GetRespawnTime" );
//
//	this->ProcessEvent ( pGetRespawnTime, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AWeaponPickup::BotDesireability ( class APawn* Bot )
//{
//	static UFunction* pBotDesireability = 0;
//	AWeaponPickup_execBotDesireability_Parms parms;
//
//	if ( !pBotDesireability )
//		pBotDesireability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponPickup.BotDesireability" );
//
//	parms.Bot = Bot;
//	this->ProcessEvent ( pBotDesireability, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AWeaponPickup::DetourWeight ( class APawn* Other, float PathWeight )
//{
//	static UFunction* pDetourWeight = 0;
//	AWeaponPickup_execDetourWeight_Parms parms;
//
//	if ( !pDetourWeight )
//		pDetourWeight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponPickup.DetourWeight" );
//
//	parms.Other = Other;
//	parms.PathWeight = PathWeight;
//	this->ProcessEvent ( pDetourWeight, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AWeaponPickup::AllowRepeatPickup (  )
//{
//	static UFunction* pAllowRepeatPickup = 0;
//	AWeaponPickup_execAllowRepeatPickup_Parms parms;
//
//	if ( !pAllowRepeatPickup )
//		pAllowRepeatPickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponPickup.AllowRepeatPickup" );
//
//	this->ProcessEvent ( pAllowRepeatPickup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AWeaponPickup::StartSleeping (  )
//{
//	static UFunction* pStartSleeping = 0;
//	AWeaponPickup_execStartSleeping_Parms parms;
//
//	if ( !pStartSleeping )
//		pStartSleeping = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponPickup.StartSleeping" );
//
//	this->ProcessEvent ( pStartSleeping, &parms, NULL );
//
//}
//
//void AWeaponPickup::UpdateHUD ( class AHUD* H )
//{
//	static UFunction* pUpdateHUD = 0;
//	AWeaponPickup_execUpdateHUD_Parms parms;
//
//	if ( !pUpdateHUD )
//		pUpdateHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponPickup.UpdateHUD" );
//
//	parms.H = H;
//	this->ProcessEvent ( pUpdateHUD, &parms, NULL );
//
//}
//
//void AWeaponPickup::SetWeaponStay (  )
//{
//	static UFunction* pSetWeaponStay = 0;
//	AWeaponPickup_execSetWeaponStay_Parms parms;
//
//	if ( !pSetWeaponStay )
//		pSetWeaponStay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponPickup.SetWeaponStay" );
//
//	this->ProcessEvent ( pSetWeaponStay, &parms, NULL );
//
//}
//
//void AWeaponPickup::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AWeaponPickup_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WeaponPickup.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void UwMeleeFire::SetFireAnim (  )
//{
//	static UFunction* pSetFireAnim = 0;
//	UwMeleeFire_execSetFireAnim_Parms parms;
//
//	if ( !pSetFireAnim )
//		pSetFireAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeFire.SetFireAnim" );
//
//	this->ProcessEvent ( pSetFireAnim, &parms, NULL );
//
//}
//
//void UwMeleeFire::wLoadOut (  )
//{
//	static UFunction* pwLoadOut = 0;
//	UwMeleeFire_execwLoadOut_Parms parms;
//
//	if ( !pwLoadOut )
//		pwLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeFire.wLoadOut" );
//
//	this->ProcessEvent ( pwLoadOut, &parms, NULL );
//
//}
//
//void UwMeleeFire::DoTraceTutorial ( struct FVector Start, struct FRotator Dir )
//{
//	static UFunction* pDoTraceTutorial = 0;
//	UwMeleeFire_execDoTraceTutorial_Parms parms;
//
//	if ( !pDoTraceTutorial )
//		pDoTraceTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeFire.DoTraceTutorial" );
//
//	parms.Start = Start;
//	parms.Dir = Dir;
//	this->ProcessEvent ( pDoTraceTutorial, &parms, NULL );
//
//}
//
//void UwMeleeFire::DoTrace ( struct FVector Start, struct FRotator Dir )
//{
//	static UFunction* pDoTrace = 0;
//	UwMeleeFire_execDoTrace_Parms parms;
//
//	if ( !pDoTrace )
//		pDoTrace = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeFire.DoTrace" );
//
//	parms.Start = Start;
//	parms.Dir = Dir;
//	this->ProcessEvent ( pDoTrace, &parms, NULL );
//
//}
//
//float UwMeleeFire::GetDamagePerc ( unsigned char HitPart )
//{
//	static UFunction* pGetDamagePerc = 0;
//	UwMeleeFire_execGetDamagePerc_Parms parms;
//
//	if ( !pGetDamagePerc )
//		pGetDamagePerc = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeFire.GetDamagePerc" );
//
//	parms.HitPart = HitPart;
//	this->ProcessEvent ( pGetDamagePerc, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwMeleeFire::FindTarget4 ( struct FVector Start, struct FRotator Dir, class AActor** rTarget, struct FVector* HitLocation )
//{
//	static UFunction* pFindTarget4 = 0;
//	UwMeleeFire_execFindTarget4_Parms parms;
//
//	if ( !pFindTarget4 )
//		pFindTarget4 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeFire.FindTarget4" );
//
//	parms.Start = Start;
//	parms.Dir = Dir;
//	this->ProcessEvent ( pFindTarget4, &parms, NULL );
//
//	*rTarget = parms.rTarget;
//	*HitLocation = parms.HitLocation;
//	return parms.ReturnValue;
//}
//
//bool UwMeleeFire::FindTarget ( struct FVector Start, struct FRotator Dir, class APawn** rTarget, struct FVector* HitLocation )
//{
//	static UFunction* pFindTarget = 0;
//	UwMeleeFire_execFindTarget_Parms parms;
//
//	if ( !pFindTarget )
//		pFindTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeFire.FindTarget" );
//
//	parms.Start = Start;
//	parms.Dir = Dir;
//	this->ProcessEvent ( pFindTarget, &parms, NULL );
//
//	*rTarget = parms.rTarget;
//	*HitLocation = parms.HitLocation;
//	return parms.ReturnValue;
//}
//
//bool UwMeleeFire::FindTarget3 ( struct FVector Start, struct FRotator Dir, class AActor** rTarget, struct FVector* HitLocation )
//{
//	static UFunction* pFindTarget3 = 0;
//	UwMeleeFire_execFindTarget3_Parms parms;
//
//	if ( !pFindTarget3 )
//		pFindTarget3 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeFire.FindTarget3" );
//
//	parms.Start = Start;
//	parms.Dir = Dir;
//	this->ProcessEvent ( pFindTarget3, &parms, NULL );
//
//	*rTarget = parms.rTarget;
//	*HitLocation = parms.HitLocation;
//	return parms.ReturnValue;
//}
//
//bool UwMeleeFire::FindTarget2 ( struct FVector Start, struct FRotator Dir, class APawn** rTarget, struct FVector* HitLocation, unsigned char* HitCollisionPart )
//{
//	static UFunction* pFindTarget2 = 0;
//	UwMeleeFire_execFindTarget2_Parms parms;
//
//	if ( !pFindTarget2 )
//		pFindTarget2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeFire.FindTarget2" );
//
//	parms.Start = Start;
//	parms.Dir = Dir;
//	this->ProcessEvent ( pFindTarget2, &parms, NULL );
//
//	*rTarget = parms.rTarget;
//	*HitLocation = parms.HitLocation;
//	*HitCollisionPart = parms.HitCollisionPart;
//	return parms.ReturnValue;
//}
//
//void UwMeleeFire::DoFireEffect (  )
//{
//	static UFunction* pDoFireEffect = 0;
//	UwMeleeFire_execDoFireEffect_Parms parms;
//
//	if ( !pDoFireEffect )
//		pDoFireEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeFire.DoFireEffect" );
//
//	this->ProcessEvent ( pDoFireEffect, &parms, NULL );
//
//}
//
//void UwMeleeFire::PlayFiring (  )
//{
//	static UFunction* pPlayFiring = 0;
//	UwMeleeFire_execPlayFiring_Parms parms;
//
//	if ( !pPlayFiring )
//		pPlayFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeFire.PlayFiring" );
//
//	this->ProcessEvent ( pPlayFiring, &parms, NULL );
//
//}
//
//void UwMeleeFire::eventModeDoFire (  )
//{
//	static UFunction* pModeDoFire = 0;
//	UwMeleeFire_eventModeDoFire_Parms parms;
//
//	if ( !pModeDoFire )
//		pModeDoFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeFire.ModeDoFire" );
//
//	this->ProcessEvent ( pModeDoFire, &parms, NULL );
//
//}
//
//void AwSpecialKillMessage::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pClientReceive = 0;
//	AwSpecialKillMessage_execClientReceive_Parms parms;
//
//	if ( !pClientReceive )
//		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSpecialKillMessage.ClientReceive" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pClientReceive, &parms, NULL );
//
//}
//
//struct FString AwSpecialKillMessage::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGetString = 0;
//	AwSpecialKillMessage_execGetString_Parms parms;
//
//	if ( !pGetString )
//		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSpecialKillMessage.GetString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGetString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMapList::SetMaplist ( int CurrentNum, class TArray< struct FString > NewMaps )
//{
//	static UFunction* pSetMaplist = 0;
//	AMapList_execSetMaplist_Parms parms;
//
//	if ( !pSetMaplist )
//		pSetMaplist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MapList.SetMaplist" );
//
//	parms.CurrentNum = CurrentNum;
//	parms.NewMaps = NewMaps;
//	this->ProcessEvent ( pSetMaplist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMapList::StaticHasInvalidMaps ( bool bReadOnly )
//{
//	static UFunction* pStaticHasInvalidMaps = 0;
//	AMapList_execStaticHasInvalidMaps_Parms parms;
//
//	if ( !pStaticHasInvalidMaps )
//		pStaticHasInvalidMaps = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MapList.StaticHasInvalidMaps" );
//
//	parms.bReadOnly = bReadOnly;
//	this->ProcessEvent ( pStaticHasInvalidMaps, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMapList::HasInvalidMaps ( bool bReadOnly )
//{
//	static UFunction* pHasInvalidMaps = 0;
//	AMapList_execHasInvalidMaps_Parms parms;
//
//	if ( !pHasInvalidMaps )
//		pHasInvalidMaps = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MapList.HasInvalidMaps" );
//
//	parms.bReadOnly = bReadOnly;
//	this->ProcessEvent ( pHasInvalidMaps, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > AMapList::StaticGetMaps (  )
//{
//	static UFunction* pStaticGetMaps = 0;
//	AMapList_execStaticGetMaps_Parms parms;
//
//	if ( !pStaticGetMaps )
//		pStaticGetMaps = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MapList.StaticGetMaps" );
//
//	this->ProcessEvent ( pStaticGetMaps, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > AMapList::GetMaps (  )
//{
//	static UFunction* pGetMaps = 0;
//	AMapList_execGetMaps_Parms parms;
//
//	if ( !pGetMaps )
//		pGetMaps = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MapList.GetMaps" );
//
//	this->ProcessEvent ( pGetMaps, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AMapList::GetMap ( int MapIndex )
//{
//	static UFunction* pGetMap = 0;
//	AMapList_execGetMap_Parms parms;
//
//	if ( !pGetMap )
//		pGetMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MapList.GetMap" );
//
//	parms.MapIndex = MapIndex;
//	this->ProcessEvent ( pGetMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMapList::FindCacheIndex ( struct FString MapName )
//{
//	static UFunction* pFindCacheIndex = 0;
//	AMapList_execFindCacheIndex_Parms parms;
//
//	if ( !pFindCacheIndex )
//		pFindCacheIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MapList.FindCacheIndex" );
//
//	parms.MapName = MapName;
//	this->ProcessEvent ( pFindCacheIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AMapList::UpdateMapNum ( int NewMapNum )
//{
//	static UFunction* pUpdateMapNum = 0;
//	AMapList_execUpdateMapNum_Parms parms;
//
//	if ( !pUpdateMapNum )
//		pUpdateMapNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MapList.UpdateMapNum" );
//
//	parms.NewMapNum = NewMapNum;
//	this->ProcessEvent ( pUpdateMapNum, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AMapList::GetNextMap (  )
//{
//	static UFunction* pGetNextMap = 0;
//	AMapList_execGetNextMap_Parms parms;
//
//	if ( !pGetNextMap )
//		pGetNextMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MapList.GetNextMap" );
//
//	this->ProcessEvent ( pGetNextMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMapList::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AMapList_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MapList.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AMapList::eventPreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AMapList_eventPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MapList.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void AwMultiKillMessage::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pClientReceive = 0;
//	AwMultiKillMessage_execClientReceive_Parms parms;
//
//	if ( !pClientReceive )
//		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMultiKillMessage.ClientReceive" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pClientReceive, &parms, NULL );
//
//}
//
//struct FString AwMultiKillMessage::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGetString = 0;
//	AwMultiKillMessage_execGetString_Parms parms;
//
//	if ( !pGetString )
//		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMultiKillMessage.GetString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGetString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwMessage_BGM::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pClientReceive = 0;
//	AwMessage_BGM_execClientReceive_Parms parms;
//
//	if ( !pClientReceive )
//		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_BGM.ClientReceive" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pClientReceive, &parms, NULL );
//
//}
//
//struct FString AwMessage_BGM::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGetString = 0;
//	AwMessage_BGM_execGetString_Parms parms;
//
//	if ( !pGetString )
//		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_BGM.GetString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGetString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AGameRules::NetDamage ( int OriginalDamage, int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector* Momentum )
//{
//	static UFunction* pNetDamage = 0;
//	AGameRules_execNetDamage_Parms parms;
//
//	if ( !pNetDamage )
//		pNetDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.NetDamage" );
//
//	parms.OriginalDamage = OriginalDamage;
//	parms.Damage = Damage;
//	parms.injured = injured;
//	parms.instigatedBy = instigatedBy;
//	parms.HitLocation = HitLocation;
//	parms.DamageType = DamageType;
//	this->ProcessEvent ( pNetDamage, &parms, NULL );
//
//	*Momentum = parms.Momentum;
//	return parms.ReturnValue;
//}
//
//bool AGameRules::CriticalPlayer ( class AController* Other )
//{
//	static UFunction* pCriticalPlayer = 0;
//	AGameRules_execCriticalPlayer_Parms parms;
//
//	if ( !pCriticalPlayer )
//		pCriticalPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.CriticalPlayer" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pCriticalPlayer, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameRules::ScoreKill ( class AController* Killer, class AController* Killed )
//{
//	static UFunction* pScoreKill = 0;
//	AGameRules_execScoreKill_Parms parms;
//
//	if ( !pScoreKill )
//		pScoreKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.ScoreKill" );
//
//	parms.Killer = Killer;
//	parms.Killed = Killed;
//	this->ProcessEvent ( pScoreKill, &parms, NULL );
//
//}
//
//void AGameRules::ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score )
//{
//	static UFunction* pScoreObjective = 0;
//	AGameRules_execScoreObjective_Parms parms;
//
//	if ( !pScoreObjective )
//		pScoreObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.ScoreObjective" );
//
//	parms.Scorer = Scorer;
//	parms.Score = Score;
//	this->ProcessEvent ( pScoreObjective, &parms, NULL );
//
//}
//
//bool AGameRules::PreventSever ( class APawn* Killed, struct FName BoneName, int Damage, class UClass* DamageType )
//{
//	static UFunction* pPreventSever = 0;
//	AGameRules_execPreventSever_Parms parms;
//
//	if ( !pPreventSever )
//		pPreventSever = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.PreventSever" );
//
//	parms.Killed = Killed;
//	parms.BoneName = BoneName;
//	parms.Damage = Damage;
//	parms.DamageType = DamageType;
//	this->ProcessEvent ( pPreventSever, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameRules::PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
//{
//	static UFunction* pPreventDeath = 0;
//	AGameRules_execPreventDeath_Parms parms;
//
//	if ( !pPreventDeath )
//		pPreventDeath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.PreventDeath" );
//
//	parms.Killed = Killed;
//	parms.Killer = Killer;
//	parms.DamageType = DamageType;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pPreventDeath, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameRules::OverridePickupQuery ( class APawn* Other, class APickup* Item, unsigned char* bAllowPickup )
//{
//	static UFunction* pOverridePickupQuery = 0;
//	AGameRules_execOverridePickupQuery_Parms parms;
//
//	if ( !pOverridePickupQuery )
//		pOverridePickupQuery = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.OverridePickupQuery" );
//
//	parms.Other = Other;
//	parms.Item = Item;
//	this->ProcessEvent ( pOverridePickupQuery, &parms, NULL );
//
//	*bAllowPickup = parms.bAllowPickup;
//	return parms.ReturnValue;
//}
//
//bool AGameRules::CheckScore ( class APlayerReplicationInfo* Scorer )
//{
//	static UFunction* pCheckScore = 0;
//	AGameRules_execCheckScore_Parms parms;
//
//	if ( !pCheckScore )
//		pCheckScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.CheckScore" );
//
//	parms.Scorer = Scorer;
//	this->ProcessEvent ( pCheckScore, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameRules::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
//{
//	static UFunction* pCheckEndGame = 0;
//	AGameRules_execCheckEndGame_Parms parms;
//
//	if ( !pCheckEndGame )
//		pCheckEndGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.CheckEndGame" );
//
//	parms.Winner = Winner;
//	parms.Reason = Reason;
//	this->ProcessEvent ( pCheckEndGame, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AGameRules::HandleRestartGame (  )
//{
//	static UFunction* pHandleRestartGame = 0;
//	AGameRules_execHandleRestartGame_Parms parms;
//
//	if ( !pHandleRestartGame )
//		pHandleRestartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.HandleRestartGame" );
//
//	this->ProcessEvent ( pHandleRestartGame, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameRules::GetServerDetails ( struct FServerResponseLine* ServerState )
//{
//	static UFunction* pGetServerDetails = 0;
//	AGameRules_execGetServerDetails_Parms parms;
//
//	if ( !pGetServerDetails )
//		pGetServerDetails = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.GetServerDetails" );
//
//	parms.ServerState = *ServerState;
//	this->ProcessEvent ( pGetServerDetails, &parms, NULL );
//
//	*ServerState = parms.ServerState;
//}
//
//struct FString AGameRules::GetRules (  )
//{
//	static UFunction* pGetRules = 0;
//	AGameRules_execGetRules_Parms parms;
//
//	if ( !pGetRules )
//		pGetRules = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.GetRules" );
//
//	this->ProcessEvent ( pGetRules, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class ANavigationPoint* AGameRules::FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName )
//{
//	static UFunction* pFindPlayerStart = 0;
//	AGameRules_execFindPlayerStart_Parms parms;
//
//	if ( !pFindPlayerStart )
//		pFindPlayerStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.FindPlayerStart" );
//
//	parms.Player = Player;
//	parms.inTeam = inTeam;
//	parms.incomingName = incomingName;
//	this->ProcessEvent ( pFindPlayerStart, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AGameRules::AddGameRules ( class AGameRules* GR )
//{
//	static UFunction* pAddGameRules = 0;
//	AGameRules_execAddGameRules_Parms parms;
//
//	if ( !pAddGameRules )
//		pAddGameRules = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.GameRules.AddGameRules" );
//
//	parms.GR = GR;
//	this->ProcessEvent ( pAddGameRules, &parms, NULL );
//
//}
//
//void AMessagingSpectator::InitPlayerReplicationInfo (  )
//{
//	static UFunction* pInitPlayerReplicationInfo = 0;
//	AMessagingSpectator_execInitPlayerReplicationInfo_Parms parms;
//
//	if ( !pInitPlayerReplicationInfo )
//		pInitPlayerReplicationInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MessagingSpectator.InitPlayerReplicationInfo" );
//
//	this->ProcessEvent ( pInitPlayerReplicationInfo, &parms, NULL );
//
//}
//
//void AMessagingSpectator::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AMessagingSpectator_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MessagingSpectator.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AVotingHandler::GetServerDetails ( struct FServerResponseLine* ServerState )
//{
//	static UFunction* pGetServerDetails = 0;
//	AVotingHandler_execGetServerDetails_Parms parms;
//
//	if ( !pGetServerDetails )
//		pGetServerDetails = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingHandler.GetServerDetails" );
//
//	parms.ServerState = *ServerState;
//	this->ProcessEvent ( pGetServerDetails, &parms, NULL );
//
//	*ServerState = parms.ServerState;
//}
//
//void AVotingHandler::ReloadAll ( bool bParam )
//{
//	static UFunction* pReloadAll = 0;
//	AVotingHandler_execReloadAll_Parms parms;
//
//	if ( !pReloadAll )
//		pReloadAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingHandler.ReloadAll" );
//
//	parms.bParam = bParam;
//	this->ProcessEvent ( pReloadAll, &parms, NULL );
//
//}
//
//bool AVotingHandler::IsEnabled (  )
//{
//	static UFunction* pIsEnabled = 0;
//	AVotingHandler_execIsEnabled_Parms parms;
//
//	if ( !pIsEnabled )
//		pIsEnabled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingHandler.IsEnabled" );
//
//	this->ProcessEvent ( pIsEnabled, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVotingHandler::FillPlayInfo ( class UPlayInfo* PlayInfo )
//{
//	static UFunction* pFillPlayInfo = 0;
//	AVotingHandler_execFillPlayInfo_Parms parms;
//
//	if ( !pFillPlayInfo )
//		pFillPlayInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingHandler.FillPlayInfo" );
//
//	parms.PlayInfo = PlayInfo;
//	this->ProcessEvent ( pFillPlayInfo, &parms, NULL );
//
//}
//
//int AVotingHandler::GetConfigArrayItemCount ( struct FString ConfigArrayName )
//{
//	static UFunction* pGetConfigArrayItemCount = 0;
//	AVotingHandler_execGetConfigArrayItemCount_Parms parms;
//
//	if ( !pGetConfigArrayItemCount )
//		pGetConfigArrayItemCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingHandler.GetConfigArrayItemCount" );
//
//	parms.ConfigArrayName = ConfigArrayName;
//	this->ProcessEvent ( pGetConfigArrayItemCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVotingHandler::UpdateConfigArrayItem ( struct FString ConfigArrayName, int RowIndex, int ColumnIndex, struct FString NewValue )
//{
//	static UFunction* pUpdateConfigArrayItem = 0;
//	AVotingHandler_execUpdateConfigArrayItem_Parms parms;
//
//	if ( !pUpdateConfigArrayItem )
//		pUpdateConfigArrayItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingHandler.UpdateConfigArrayItem" );
//
//	parms.ConfigArrayName = ConfigArrayName;
//	parms.RowIndex = RowIndex;
//	parms.ColumnIndex = ColumnIndex;
//	parms.NewValue = NewValue;
//	this->ProcessEvent ( pUpdateConfigArrayItem, &parms, NULL );
//
//}
//
//int AVotingHandler::AddConfigArrayItem ( struct FString ConfigArrayName )
//{
//	static UFunction* pAddConfigArrayItem = 0;
//	AVotingHandler_execAddConfigArrayItem_Parms parms;
//
//	if ( !pAddConfigArrayItem )
//		pAddConfigArrayItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingHandler.AddConfigArrayItem" );
//
//	parms.ConfigArrayName = ConfigArrayName;
//	this->ProcessEvent ( pAddConfigArrayItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVotingHandler::DeleteConfigArrayItem ( struct FString ConfigArrayName, int RowIndex )
//{
//	static UFunction* pDeleteConfigArrayItem = 0;
//	AVotingHandler_execDeleteConfigArrayItem_Parms parms;
//
//	if ( !pDeleteConfigArrayItem )
//		pDeleteConfigArrayItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingHandler.DeleteConfigArrayItem" );
//
//	parms.ConfigArrayName = ConfigArrayName;
//	parms.RowIndex = RowIndex;
//	this->ProcessEvent ( pDeleteConfigArrayItem, &parms, NULL );
//
//}
//
//struct FString AVotingHandler::GetConfigArrayColumnTitle ( struct FString ConfigArrayName, int ColumnIndex )
//{
//	static UFunction* pGetConfigArrayColumnTitle = 0;
//	AVotingHandler_execGetConfigArrayColumnTitle_Parms parms;
//
//	if ( !pGetConfigArrayColumnTitle )
//		pGetConfigArrayColumnTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingHandler.GetConfigArrayColumnTitle" );
//
//	parms.ConfigArrayName = ConfigArrayName;
//	parms.ColumnIndex = ColumnIndex;
//	this->ProcessEvent ( pGetConfigArrayColumnTitle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AVotingHandler::GetConfigArrayData ( struct FString ConfigArrayName, int RowIndex, int ColumnIndex )
//{
//	static UFunction* pGetConfigArrayData = 0;
//	AVotingHandler_execGetConfigArrayData_Parms parms;
//
//	if ( !pGetConfigArrayData )
//		pGetConfigArrayData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingHandler.GetConfigArrayData" );
//
//	parms.ConfigArrayName = ConfigArrayName;
//	parms.RowIndex = RowIndex;
//	parms.ColumnIndex = ColumnIndex;
//	this->ProcessEvent ( pGetConfigArrayData, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AVotingHandler::HandleRestartGame (  )
//{
//	static UFunction* pHandleRestartGame = 0;
//	AVotingHandler_execHandleRestartGame_Parms parms;
//
//	if ( !pHandleRestartGame )
//		pHandleRestartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingHandler.HandleRestartGame" );
//
//	this->ProcessEvent ( pHandleRestartGame, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AVotingHandler::PlayerExit ( class AController* Exiting )
//{
//	static UFunction* pPlayerExit = 0;
//	AVotingHandler_execPlayerExit_Parms parms;
//
//	if ( !pPlayerExit )
//		pPlayerExit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingHandler.PlayerExit" );
//
//	parms.Exiting = Exiting;
//	this->ProcessEvent ( pPlayerExit, &parms, NULL );
//
//}
//
//void AVotingHandler::PlayerJoin ( class APlayerController* Player )
//{
//	static UFunction* pPlayerJoin = 0;
//	AVotingHandler_execPlayerJoin_Parms parms;
//
//	if ( !pPlayerJoin )
//		pPlayerJoin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.VotingHandler.PlayerJoin" );
//
//	parms.Player = Player;
//	this->ProcessEvent ( pPlayerJoin, &parms, NULL );
//
//}
//
//bool AMaplistManager::MaplistDirty ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pMaplistDirty = 0;
//	AMaplistManager_execMaplistDirty_Parms parms;
//
//	if ( !pMaplistDirty )
//		pMaplistDirty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.MaplistDirty" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pMaplistDirty, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManager::ValidName ( struct FString S )
//{
//	static UFunction* pValidName = 0;
//	AMaplistManager_execValidName_Parms parms;
//
//	if ( !pValidName )
//		pValidName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.ValidName" );
//
//	parms.S = S;
//	this->ProcessEvent ( pValidName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManager::ValidGameType ( struct FString GameType )
//{
//	static UFunction* pValidGameType = 0;
//	AMaplistManager_execValidGameType_Parms parms;
//
//	if ( !pValidGameType )
//		pValidGameType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.ValidGameType" );
//
//	parms.GameType = GameType;
//	this->ProcessEvent ( pValidGameType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManager::ValidGameIndex ( int i )
//{
//	static UFunction* pValidGameIndex = 0;
//	AMaplistManager_execValidGameIndex_Parms parms;
//
//	if ( !pValidGameIndex )
//		pValidGameIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.ValidGameIndex" );
//
//	parms.i = i;
//	this->ProcessEvent ( pValidGameIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManager::ValidCacheGameIndex ( int i )
//{
//	static UFunction* pValidCacheGameIndex = 0;
//	AMaplistManager_execValidCacheGameIndex_Parms parms;
//
//	if ( !pValidCacheGameIndex )
//		pValidCacheGameIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.ValidCacheGameIndex" );
//
//	parms.i = i;
//	this->ProcessEvent ( pValidCacheGameIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::GetActiveMap ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pGetActiveMap = 0;
//	AMaplistManager_execGetActiveMap_Parms parms;
//
//	if ( !pGetActiveMap )
//		pGetActiveMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetActiveMap" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pGetActiveMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::GetActiveList ( int GameIndex )
//{
//	static UFunction* pGetActiveList = 0;
//	AMaplistManager_execGetActiveList_Parms parms;
//
//	if ( !pGetActiveList )
//		pGetActiveList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetActiveList" );
//
//	parms.GameIndex = GameIndex;
//	this->ProcessEvent ( pGetActiveList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AMaplistManager::GetMapListTitle ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pGetMapListTitle = 0;
//	AMaplistManager_execGetMapListTitle_Parms parms;
//
//	if ( !pGetMapListTitle )
//		pGetMapListTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetMapListTitle" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pGetMapListTitle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::GetRecordIndex ( int GameIndex, struct FString MapListName )
//{
//	static UFunction* pGetRecordIndex = 0;
//	AMaplistManager_execGetRecordIndex_Parms parms;
//
//	if ( !pGetRecordIndex )
//		pGetRecordIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetRecordIndex" );
//
//	parms.GameIndex = GameIndex;
//	parms.MapListName = MapListName;
//	this->ProcessEvent ( pGetRecordIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::GetMapIndex ( int GameIndex, int RecordIndex, struct FString MapName )
//{
//	static UFunction* pGetMapIndex = 0;
//	AMaplistManager_execGetMapIndex_Parms parms;
//
//	if ( !pGetMapIndex )
//		pGetMapIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetMapIndex" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	parms.MapName = MapName;
//	this->ProcessEvent ( pGetMapIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::FindMaplistContaining ( int GameIndex, struct FString MapName )
//{
//	static UFunction* pFindMaplistContaining = 0;
//	AMaplistManager_execFindMaplistContaining_Parms parms;
//
//	if ( !pFindMaplistContaining )
//		pFindMaplistContaining = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.FindMaplistContaining" );
//
//	parms.GameIndex = GameIndex;
//	parms.MapName = MapName;
//	this->ProcessEvent ( pFindMaplistContaining, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > AMaplistManager::GetCacheMapList ( struct FString Acronym )
//{
//	static UFunction* pGetCacheMapList = 0;
//	AMaplistManager_execGetCacheMapList_Parms parms;
//
//	if ( !pGetCacheMapList )
//		pGetCacheMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetCacheMapList" );
//
//	parms.Acronym = Acronym;
//	this->ProcessEvent ( pGetCacheMapList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManager::GetAvailableMaps ( int GameIndex, class TArray< struct FMapItem >* AR )
//{
//	static UFunction* pGetAvailableMaps = 0;
//	AMaplistManager_execGetAvailableMaps_Parms parms;
//
//	if ( !pGetAvailableMaps )
//		pGetAvailableMaps = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetAvailableMaps" );
//
//	parms.GameIndex = GameIndex;
//	this->ProcessEvent ( pGetAvailableMaps, &parms, NULL );
//
//	*AR = parms.AR;
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > AMaplistManager::GetMapList ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pGetMapList = 0;
//	AMaplistManager_execGetMapList_Parms parms;
//
//	if ( !pGetMapList )
//		pGetMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetMapList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pGetMapList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AMaplistManager::GetMapURL ( int GameIndex, int RecordIndex, int MapIndex )
//{
//	static UFunction* pGetMapURL = 0;
//	AMaplistManager_execGetMapURL_Parms parms;
//
//	if ( !pGetMapURL )
//		pGetMapURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetMapURL" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	parms.MapIndex = MapIndex;
//	this->ProcessEvent ( pGetMapURL, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AMaplistManager::GetMapTitle ( int GameIndex, int RecordIndex, int MapIndex )
//{
//	static UFunction* pGetMapTitle = 0;
//	AMaplistManager_execGetMapTitle_Parms parms;
//
//	if ( !pGetMapTitle )
//		pGetMapTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetMapTitle" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	parms.MapIndex = MapIndex;
//	this->ProcessEvent ( pGetMapTitle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AMaplistManager::GetActiveMapName ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pGetActiveMapName = 0;
//	AMaplistManager_execGetActiveMapName_Parms parms;
//
//	if ( !pGetActiveMapName )
//		pGetActiveMapName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetActiveMapName" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pGetActiveMapName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > AMaplistManager::GetCurrentMapRotation (  )
//{
//	static UFunction* pGetCurrentMapRotation = 0;
//	AMaplistManager_execGetCurrentMapRotation_Parms parms;
//
//	if ( !pGetCurrentMapRotation )
//		pGetCurrentMapRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetCurrentMapRotation" );
//
//	this->ProcessEvent ( pGetCurrentMapRotation, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > AMaplistManager::GetMapListNames ( int GameIndex )
//{
//	static UFunction* pGetMapListNames = 0;
//	AMaplistManager_execGetMapListNames_Parms parms;
//
//	if ( !pGetMapListNames )
//		pGetMapListNames = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetMapListNames" );
//
//	parms.GameIndex = GameIndex;
//	this->ProcessEvent ( pGetMapListNames, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::GetCacheGameIndex ( struct FString GameType )
//{
//	static UFunction* pGetCacheGameIndex = 0;
//	AMaplistManager_execGetCacheGameIndex_Parms parms;
//
//	if ( !pGetCacheGameIndex )
//		pGetCacheGameIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetCacheGameIndex" );
//
//	parms.GameType = GameType;
//	this->ProcessEvent ( pGetCacheGameIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::GetGameIndex ( struct FString GameType )
//{
//	static UFunction* pGetGameIndex = 0;
//	AMaplistManager_execGetGameIndex_Parms parms;
//
//	if ( !pGetGameIndex )
//		pGetGameIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetGameIndex" );
//
//	parms.GameType = GameType;
//	this->ProcessEvent ( pGetGameIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::SetActiveMap ( int GameIndex, int RecordIndex, int MapIndex )
//{
//	static UFunction* pSetActiveMap = 0;
//	AMaplistManager_execSetActiveMap_Parms parms;
//
//	if ( !pSetActiveMap )
//		pSetActiveMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.SetActiveMap" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	parms.MapIndex = MapIndex;
//	this->ProcessEvent ( pSetActiveMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMaplistManager::ShiftMap ( int GameIndex, int RecordIndex, struct FString MapName, int Count )
//{
//	static UFunction* pShiftMap = 0;
//	AMaplistManager_execShiftMap_Parms parms;
//
//	if ( !pShiftMap )
//		pShiftMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.ShiftMap" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	parms.MapName = MapName;
//	parms.Count = Count;
//	this->ProcessEvent ( pShiftMap, &parms, NULL );
//
//}
//
//bool AMaplistManager::RemoveMap ( int GameIndex, int RecordIndex, struct FString MapName )
//{
//	static UFunction* pRemoveMap = 0;
//	AMaplistManager_execRemoveMap_Parms parms;
//
//	if ( !pRemoveMap )
//		pRemoveMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.RemoveMap" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	parms.MapName = MapName;
//	this->ProcessEvent ( pRemoveMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManager::InsertMap ( int GameIndex, int RecordIndex, struct FString MapName, int ListIndex )
//{
//	static UFunction* pInsertMap = 0;
//	AMaplistManager_execInsertMap_Parms parms;
//
//	if ( !pInsertMap )
//		pInsertMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.InsertMap" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	parms.MapName = MapName;
//	parms.ListIndex = ListIndex;
//	this->ProcessEvent ( pInsertMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManager::AddMap ( int GameIndex, int RecordIndex, struct FString MapName )
//{
//	static UFunction* pAddMap = 0;
//	AMaplistManager_execAddMap_Parms parms;
//
//	if ( !pAddMap )
//		pAddMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.AddMap" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	parms.MapName = MapName;
//	this->ProcessEvent ( pAddMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManager::SetActiveList ( int GameIndex, int NewActive )
//{
//	static UFunction* pSetActiveList = 0;
//	AMaplistManager_execSetActiveList_Parms parms;
//
//	if ( !pSetActiveList )
//		pSetActiveList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.SetActiveList" );
//
//	parms.GameIndex = GameIndex;
//	parms.NewActive = NewActive;
//	this->ProcessEvent ( pSetActiveList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManager::ApplyMapList ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pApplyMapList = 0;
//	AMaplistManager_execApplyMapList_Parms parms;
//
//	if ( !pApplyMapList )
//		pApplyMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.ApplyMapList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pApplyMapList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMaplistManager::ResetGame ( int GameIndex )
//{
//	static UFunction* pResetGame = 0;
//	AMaplistManager_execResetGame_Parms parms;
//
//	if ( !pResetGame )
//		pResetGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.ResetGame" );
//
//	parms.GameIndex = GameIndex;
//	this->ProcessEvent ( pResetGame, &parms, NULL );
//
//}
//
//bool AMaplistManager::SaveGame ( int GameIndex )
//{
//	static UFunction* pSaveGame = 0;
//	AMaplistManager_execSaveGame_Parms parms;
//
//	if ( !pSaveGame )
//		pSaveGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.SaveGame" );
//
//	parms.GameIndex = GameIndex;
//	this->ProcessEvent ( pSaveGame, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMaplistManager::ResetList ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pResetList = 0;
//	AMaplistManager_execResetList_Parms parms;
//
//	if ( !pResetList )
//		pResetList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.ResetList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pResetList, &parms, NULL );
//
//}
//
//bool AMaplistManager::ClearList ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pClearList = 0;
//	AMaplistManager_execClearList_Parms parms;
//
//	if ( !pClearList )
//		pClearList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.ClearList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pClearList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManager::SaveMapList ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pSaveMapList = 0;
//	AMaplistManager_execSaveMapList_Parms parms;
//
//	if ( !pSaveMapList )
//		pSaveMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.SaveMapList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pSaveMapList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::RemoveList ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pRemoveList = 0;
//	AMaplistManager_execRemoveList_Parms parms;
//
//	if ( !pRemoveList )
//		pRemoveList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.RemoveList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pRemoveList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::RenameList ( int GameIndex, int RecordIndex, struct FString NewName )
//{
//	static UFunction* pRenameList = 0;
//	AMaplistManager_execRenameList_Parms parms;
//
//	if ( !pRenameList )
//		pRenameList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.RenameList" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	parms.NewName = NewName;
//	this->ProcessEvent ( pRenameList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::AddList ( struct FString GameType, struct FString NewName, class TArray< struct FString > Maps )
//{
//	static UFunction* pAddList = 0;
//	AMaplistManager_execAddList_Parms parms;
//
//	if ( !pAddList )
//		pAddList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.AddList" );
//
//	parms.GameType = GameType;
//	parms.NewName = NewName;
//	parms.Maps = Maps;
//	this->ProcessEvent ( pAddList, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMaplistManager::MapChange ( struct FString NewMap )
//{
//	static UFunction* pMapChange = 0;
//	AMaplistManager_execMapChange_Parms parms;
//
//	if ( !pMapChange )
//		pMapChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.MapChange" );
//
//	parms.NewMap = NewMap;
//	this->ProcessEvent ( pMapChange, &parms, NULL );
//
//}
//
//bool AMaplistManager::ValidRecordIndex ( int GameIndex, int MapListIndex )
//{
//	static UFunction* pValidRecordIndex = 0;
//	AMaplistManager_execValidRecordIndex_Parms parms;
//
//	if ( !pValidRecordIndex )
//		pValidRecordIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.ValidRecordIndex" );
//
//	parms.GameIndex = GameIndex;
//	parms.MapListIndex = MapListIndex;
//	this->ProcessEvent ( pValidRecordIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< class UMaplistRecord* > AMaplistManager::GetRecords ( int GameIndex )
//{
//	static UFunction* pGetRecords = 0;
//	AMaplistManager_execGetRecords_Parms parms;
//
//	if ( !pGetRecords )
//		pGetRecords = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetRecords" );
//
//	parms.GameIndex = GameIndex;
//	this->ProcessEvent ( pGetRecords, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManager::IsNewGameType ( struct FString GameClassName )
//{
//	static UFunction* pIsNewGameType = 0;
//	AMaplistManager_execIsNewGameType_Parms parms;
//
//	if ( !pIsNewGameType )
//		pIsNewGameType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.IsNewGameType" );
//
//	parms.GameClassName = GameClassName;
//	this->ProcessEvent ( pIsNewGameType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UMaplistRecord* AMaplistManager::CreateRecord ( struct FString RecordName )
//{
//	static UFunction* pCreateRecord = 0;
//	AMaplistManager_execCreateRecord_Parms parms;
//
//	if ( !pCreateRecord )
//		pCreateRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.CreateRecord" );
//
//	parms.RecordName = RecordName;
//	this->ProcessEvent ( pCreateRecord, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMaplistManager::Save (  )
//{
//	static UFunction* pSave = 0;
//	AMaplistManager_execSave_Parms parms;
//
//	if ( !pSave )
//		pSave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.Save" );
//
//	this->ProcessEvent ( pSave, &parms, NULL );
//
//}
//
//int AMaplistManager::GetStoredGameIndex ( struct FString GameType )
//{
//	static UFunction* pGetStoredGameIndex = 0;
//	AMaplistManager_execGetStoredGameIndex_Parms parms;
//
//	if ( !pGetStoredGameIndex )
//		pGetStoredGameIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetStoredGameIndex" );
//
//	parms.GameType = GameType;
//	this->ProcessEvent ( pGetStoredGameIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::RemoveRecord ( int GameIndex, int RecordIndex )
//{
//	static UFunction* pRemoveRecord = 0;
//	AMaplistManager_execRemoveRecord_Parms parms;
//
//	if ( !pRemoveRecord )
//		pRemoveRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.RemoveRecord" );
//
//	parms.GameIndex = GameIndex;
//	parms.RecordIndex = RecordIndex;
//	this->ProcessEvent ( pRemoveRecord, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AMaplistManager::RemoveGame ( int i )
//{
//	static UFunction* pRemoveGame = 0;
//	AMaplistManager_execRemoveGame_Parms parms;
//
//	if ( !pRemoveGame )
//		pRemoveGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.RemoveGame" );
//
//	parms.i = i;
//	this->ProcessEvent ( pRemoveGame, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMaplistManager::GenerateGroupMaplist ( int GroupIndex )
//{
//	static UFunction* pGenerateGroupMaplist = 0;
//	AMaplistManager_execGenerateGroupMaplist_Parms parms;
//
//	if ( !pGenerateGroupMaplist )
//		pGenerateGroupMaplist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GenerateGroupMaplist" );
//
//	parms.GroupIndex = GroupIndex;
//	this->ProcessEvent ( pGenerateGroupMaplist, &parms, NULL );
//
//}
//
//int AMaplistManager::AddGameType ( struct FString NewGameType )
//{
//	static UFunction* pAddGameType = 0;
//	AMaplistManager_execAddGameType_Parms parms;
//
//	if ( !pAddGameType )
//		pAddGameType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.AddGameType" );
//
//	parms.NewGameType = NewGameType;
//	this->ProcessEvent ( pAddGameType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::AddGroup ( struct FString GameType )
//{
//	static UFunction* pAddGroup = 0;
//	AMaplistManager_execAddGroup_Parms parms;
//
//	if ( !pAddGroup )
//		pAddGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.AddGroup" );
//
//	parms.GameType = GameType;
//	this->ProcessEvent ( pAddGroup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AMaplistManager::AddMaplistRecord ( class UMaplistRecord* Rec )
//{
//	static UFunction* pAddMaplistRecord = 0;
//	AMaplistManager_execAddMaplistRecord_Parms parms;
//
//	if ( !pAddMaplistRecord )
//		pAddMaplistRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.AddMaplistRecord" );
//
//	parms.Rec = Rec;
//	this->ProcessEvent ( pAddMaplistRecord, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AMaplistManager::InitializeActiveLists (  )
//{
//	static UFunction* pInitializeActiveLists = 0;
//	AMaplistManager_execInitializeActiveLists_Parms parms;
//
//	if ( !pInitializeActiveLists )
//		pInitializeActiveLists = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.InitializeActiveLists" );
//
//	this->ProcessEvent ( pInitializeActiveLists, &parms, NULL );
//
//}
//
//void AMaplistManager::InitializeMaplistRecords (  )
//{
//	static UFunction* pInitializeMaplistRecords = 0;
//	AMaplistManager_execInitializeMaplistRecords_Parms parms;
//
//	if ( !pInitializeMaplistRecords )
//		pInitializeMaplistRecords = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.InitializeMaplistRecords" );
//
//	this->ProcessEvent ( pInitializeMaplistRecords, &parms, NULL );
//
//}
//
//bool AMaplistManager::GetDefaultMaps ( struct FString MapListClassName, class TArray< struct FString >* Maps )
//{
//	static UFunction* pGetDefaultMaps = 0;
//	AMaplistManager_execGetDefaultMaps_Parms parms;
//
//	if ( !pGetDefaultMaps )
//		pGetDefaultMaps = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.GetDefaultMaps" );
//
//	parms.MapListClassName = MapListClassName;
//	this->ProcessEvent ( pGetDefaultMaps, &parms, NULL );
//
//	*Maps = parms.Maps;
//	return parms.ReturnValue;
//}
//
//void AMaplistManager::CreateDefaultList ( int i )
//{
//	static UFunction* pCreateDefaultList = 0;
//	AMaplistManager_execCreateDefaultList_Parms parms;
//
//	if ( !pCreateDefaultList )
//		pCreateDefaultList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.CreateDefaultList" );
//
//	parms.i = i;
//	this->ProcessEvent ( pCreateDefaultList, &parms, NULL );
//
//}
//
//void AMaplistManager::eventDestroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AMaplistManager_eventDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AMaplistManager::eventPreBeginPlay (  )
//{
//	static UFunction* pPreBeginPlay = 0;
//	AMaplistManager_eventPreBeginPlay_Parms parms;
//
//	if ( !pPreBeginPlay )
//		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistManager.PreBeginPlay" );
//
//	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );
//
//}
//
//void AEmitterFirstPerson::eventPostNetBeginPlay (  )
//{
//	static UFunction* pPostNetBeginPlay = 0;
//	AEmitterFirstPerson_eventPostNetBeginPlay_Parms parms;
//
//	if ( !pPostNetBeginPlay )
//		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.EmitterFirstPerson.PostNetBeginPlay" );
//
//	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );
//
//}
//
//void AEmitterFirstPerson::DestroyIfThirdPerson (  )
//{
//	static UFunction* pDestroyIfThirdPerson = 0;
//	AEmitterFirstPerson_execDestroyIfThirdPerson_Parms parms;
//
//	if ( !pDestroyIfThirdPerson )
//		pDestroyIfThirdPerson = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.EmitterFirstPerson.DestroyIfThirdPerson" );
//
//	this->ProcessEvent ( pDestroyIfThirdPerson, &parms, NULL );
//
//}
//
//void AShadowProjector::LightUpdate ( class TArray< class AActor* > LightSources )
//{
//	static UFunction* pLightUpdate = 0;
//	AShadowProjector_execLightUpdate_Parms parms;
//
//	if ( !pLightUpdate )
//		pLightUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ShadowProjector.LightUpdate" );
//
//	parms.LightSources = LightSources;
//	this->ProcessEvent ( pLightUpdate, &parms, NULL );
//
//}
//
//void AShadowProjector::UpdateSunLight ( struct FVector SunDir )
//{
//	static UFunction* pUpdateSunLight = 0;
//	AShadowProjector_execUpdateSunLight_Parms parms;
//
//	if ( !pUpdateSunLight )
//		pUpdateSunLight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ShadowProjector.UpdateSunLight" );
//
//	parms.SunDir = SunDir;
//	this->ProcessEvent ( pUpdateSunLight, &parms, NULL );
//
//}
//
//void AShadowProjector::Tick ( float DeltaTime )
//{
//	static UFunction* pTick = 0;
//	AShadowProjector_execTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ShadowProjector.Tick" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void AShadowProjector::UpdateShadow (  )
//{
//	static UFunction* pUpdateShadow = 0;
//	AShadowProjector_execUpdateShadow_Parms parms;
//
//	if ( !pUpdateShadow )
//		pUpdateShadow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ShadowProjector.UpdateShadow" );
//
//	this->ProcessEvent ( pUpdateShadow, &parms, NULL );
//
//}
//
//void AShadowProjector::InitShadow (  )
//{
//	static UFunction* pInitShadow = 0;
//	AShadowProjector_execInitShadow_Parms parms;
//
//	if ( !pInitShadow )
//		pInitShadow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ShadowProjector.InitShadow" );
//
//	this->ProcessEvent ( pInitShadow, &parms, NULL );
//
//}
//
//void AShadowProjector::eventDestroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AShadowProjector_eventDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ShadowProjector.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AShadowProjector::eventPostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AShadowProjector_eventPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ShadowProjector.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AHudOverlay::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AHudOverlay_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HudOverlay.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AHudOverlay::Render ( class UCanvas* C )
//{
//	static UFunction* pRender = 0;
//	AHudOverlay_execRender_Parms parms;
//
//	if ( !pRender )
//		pRender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.HudOverlay.Render" );
//
//	parms.C = C;
//	this->ProcessEvent ( pRender, &parms, NULL );
//
//}
//
//struct FString AFailedConnect::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGetString = 0;
//	AFailedConnect_execGetString_Parms parms;
//
//	if ( !pGetString )
//		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.FailedConnect.GetString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGetString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int AFailedConnect::GetFailSwitch ( struct FString FailString )
//{
//	static UFunction* pGetFailSwitch = 0;
//	AFailedConnect_execGetFailSwitch_Parms parms;
//
//	if ( !pGetFailSwitch )
//		pGetFailSwitch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.FailedConnect.GetFailSwitch" );
//
//	parms.FailString = FailString;
//	this->ProcessEvent ( pGetFailSwitch, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwSkill::SetbUpdateCall ( bool bValue )
//{
//	static UFunction* pSetbUpdateCall = 0;
//	UwSkill_execSetbUpdateCall_Parms parms;
//
//	if ( !pSetbUpdateCall )
//		pSetbUpdateCall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill.SetbUpdateCall" );
//
//	parms.bValue = bValue;
//	this->ProcessEvent ( pSetbUpdateCall, &parms, NULL );
//
//}
//
//void UwSkill::SetbyAddCount ( unsigned char byValue )
//{
//	static UFunction* pSetbyAddCount = 0;
//	UwSkill_execSetbyAddCount_Parms parms;
//
//	if ( !pSetbyAddCount )
//		pSetbyAddCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill.SetbyAddCount" );
//
//	parms.byValue = byValue;
//	this->ProcessEvent ( pSetbyAddCount, &parms, NULL );
//
//}
//
//void UwSkill::SetbUsed ( bool bValue )
//{
//	static UFunction* pSetbUsed = 0;
//	UwSkill_execSetbUsed_Parms parms;
//
//	if ( !pSetbUsed )
//		pSetbUsed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill.SetbUsed" );
//
//	parms.bValue = bValue;
//	this->ProcessEvent ( pSetbUsed, &parms, NULL );
//
//}
//
//void UwSkill::SetIsEnable ( bool bValue )
//{
//	static UFunction* pSetIsEnable = 0;
//	UwSkill_execSetIsEnable_Parms parms;
//
//	if ( !pSetIsEnable )
//		pSetIsEnable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill.SetIsEnable" );
//
//	parms.bValue = bValue;
//	this->ProcessEvent ( pSetIsEnable, &parms, NULL );
//
//}
//
//void UwSkill::UsedbyWeapon (  )
//{
//	static UFunction* pUsedbyWeapon = 0;
//	UwSkill_execUsedbyWeapon_Parms parms;
//
//	if ( !pUsedbyWeapon )
//		pUsedbyWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill.UsedbyWeapon" );
//
//	this->ProcessEvent ( pUsedbyWeapon, &parms, NULL );
//
//}
//
//void UwSkill::Initialize ( class UwSkillBase* SkillBase, class UwSkillBaseParam* Param )
//{
//	static UFunction* pInitialize = 0;
//	UwSkill_execInitialize_Parms parms;
//
//	if ( !pInitialize )
//		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill.Initialize" );
//
//	parms.SkillBase = SkillBase;
//	parms.Param = Param;
//	this->ProcessEvent ( pInitialize, &parms, NULL );
//
//}
//
//void UwSkill::DeadPlayer (  )
//{
//	static UFunction* pDeadPlayer = 0;
//	UwSkill_execDeadPlayer_Parms parms;
//
//	if ( !pDeadPlayer )
//		pDeadPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill.DeadPlayer" );
//
//	this->ProcessEvent ( pDeadPlayer, &parms, NULL );
//
//}
//
//void UwSkill::RemoveSkill (  )
//{
//	static UFunction* pRemoveSkill = 0;
//	UwSkill_execRemoveSkill_Parms parms;
//
//	if ( !pRemoveSkill )
//		pRemoveSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill.RemoveSkill" );
//
//	this->ProcessEvent ( pRemoveSkill, &parms, NULL );
//
//}
//
//void UwSkill::UpdateProcess (  )
//{
//	static UFunction* pUpdateProcess = 0;
//	UwSkill_execUpdateProcess_Parms parms;
//
//	if ( !pUpdateProcess )
//		pUpdateProcess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill.UpdateProcess" );
//
//	this->ProcessEvent ( pUpdateProcess, &parms, NULL );
//
//}
//
//void UwSkill::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	UwSkill_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void UwSkill_RestoreSupply::UpdateProcess (  )
//{
//	static UFunction* pUpdateProcess = 0;
//	UwSkill_RestoreSupply_execUpdateProcess_Parms parms;
//
//	if ( !pUpdateProcess )
//		pUpdateProcess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill_RestoreSupply.UpdateProcess" );
//
//	this->ProcessEvent ( pUpdateProcess, &parms, NULL );
//
//}
//
//void UwSkill_RestoreSupply::RemoveSupplyItem ( unsigned char byType )
//{
//	static UFunction* pRemoveSupplyItem = 0;
//	UwSkill_RestoreSupply_execRemoveSupplyItem_Parms parms;
//
//	if ( !pRemoveSupplyItem )
//		pRemoveSupplyItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill_RestoreSupply.RemoveSupplyItem" );
//
//	parms.byType = byType;
//	this->ProcessEvent ( pRemoveSupplyItem, &parms, NULL );
//
//}
//
//void UwSkill_RestoreSupply::SetSupplyItem ( unsigned char byType )
//{
//	static UFunction* pSetSupplyItem = 0;
//	UwSkill_RestoreSupply_execSetSupplyItem_Parms parms;
//
//	if ( !pSetSupplyItem )
//		pSetSupplyItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill_RestoreSupply.SetSupplyItem" );
//
//	parms.byType = byType;
//	this->ProcessEvent ( pSetSupplyItem, &parms, NULL );
//
//}
//
//void UwSkill_RestoreSupply::RemoveSkill (  )
//{
//	static UFunction* pRemoveSkill = 0;
//	UwSkill_RestoreSupply_execRemoveSkill_Parms parms;
//
//	if ( !pRemoveSkill )
//		pRemoveSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill_RestoreSupply.RemoveSkill" );
//
//	this->ProcessEvent ( pRemoveSkill, &parms, NULL );
//
//}
//
//void UwSkill_RestoreSupply::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	UwSkill_RestoreSupply_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill_RestoreSupply.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void UwAimFire::eventModeDoFire (  )
//{
//	static UFunction* pModeDoFire = 0;
//	UwAimFire_eventModeDoFire_Parms parms;
//
//	if ( !pModeDoFire )
//		pModeDoFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAimFire.ModeDoFire" );
//
//	this->ProcessEvent ( pModeDoFire, &parms, NULL );
//
//}
//
//void UwAimFire::PlayFireEnd (  )
//{
//	static UFunction* pPlayFireEnd = 0;
//	UwAimFire_execPlayFireEnd_Parms parms;
//
//	if ( !pPlayFireEnd )
//		pPlayFireEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAimFire.PlayFireEnd" );
//
//	this->ProcessEvent ( pPlayFireEnd, &parms, NULL );
//
//}
//
//void UwAimFire::SetFOV ( bool bFOV )
//{
//	static UFunction* pSetFOV = 0;
//	UwAimFire_execSetFOV_Parms parms;
//
//	if ( !pSetFOV )
//		pSetFOV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAimFire.SetFOV" );
//
//	parms.bFOV = bFOV;
//	this->ProcessEvent ( pSetFOV, &parms, NULL );
//
//}
//
//void UwAimFire::SetAim ( bool bAim )
//{
//	static UFunction* pSetAim = 0;
//	UwAimFire_execSetAim_Parms parms;
//
//	if ( !pSetAim )
//		pSetAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAimFire.SetAim" );
//
//	parms.bAim = bAim;
//	this->ProcessEvent ( pSetAim, &parms, NULL );
//
//}
//
//void UwAimFire::ShakeView (  )
//{
//	static UFunction* pShakeView = 0;
//	UwAimFire_execShakeView_Parms parms;
//
//	if ( !pShakeView )
//		pShakeView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAimFire.ShakeView" );
//
//	this->ProcessEvent ( pShakeView, &parms, NULL );
//
//}
//
//bool UwAimFire::RenderOverlays ( class UCanvas* Canv )
//{
//	static UFunction* pRenderOverlays = 0;
//	UwAimFire_execRenderOverlays_Parms parms;
//
//	if ( !pRenderOverlays )
//		pRenderOverlays = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAimFire.RenderOverlays" );
//
//	parms.Canv = Canv;
//	this->ProcessEvent ( pRenderOverlays, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwAimFire::wLoadOut (  )
//{
//	static UFunction* pwLoadOut = 0;
//	UwAimFire_execwLoadOut_Parms parms;
//
//	if ( !pwLoadOut )
//		pwLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAimFire.wLoadOut" );
//
//	this->ProcessEvent ( pwLoadOut, &parms, NULL );
//
//}
//
//void UwAimFire::StartMuzzleSmoke (  )
//{
//	static UFunction* pStartMuzzleSmoke = 0;
//	UwAimFire_execStartMuzzleSmoke_Parms parms;
//
//	if ( !pStartMuzzleSmoke )
//		pStartMuzzleSmoke = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAimFire.StartMuzzleSmoke" );
//
//	this->ProcessEvent ( pStartMuzzleSmoke, &parms, NULL );
//
//}
//
//void UwAimFire::FlashMuzzleFlash (  )
//{
//	static UFunction* pFlashMuzzleFlash = 0;
//	UwAimFire_execFlashMuzzleFlash_Parms parms;
//
//	if ( !pFlashMuzzleFlash )
//		pFlashMuzzleFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAimFire.FlashMuzzleFlash" );
//
//	this->ProcessEvent ( pFlashMuzzleFlash, &parms, NULL );
//
//}
//
//void UwAimFire::PlayFiring (  )
//{
//	static UFunction* pPlayFiring = 0;
//	UwAimFire_execPlayFiring_Parms parms;
//
//	if ( !pPlayFiring )
//		pPlayFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAimFire.PlayFiring" );
//
//	this->ProcessEvent ( pPlayFiring, &parms, NULL );
//
//}
//
//void UwZoomFire3D::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	UwZoomFire3D_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wZoomFire3D.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//bool UwZoomFire3D::RenderOverlays ( class UCanvas* Canv )
//{
//	static UFunction* pRenderOverlays = 0;
//	UwZoomFire3D_execRenderOverlays_Parms parms;
//
//	if ( !pRenderOverlays )
//		pRenderOverlays = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wZoomFire3D.RenderOverlays" );
//
//	parms.Canv = Canv;
//	this->ProcessEvent ( pRenderOverlays, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwZoomFire3D::eventModeTick ( float dt )
//{
//	static UFunction* pModeTick = 0;
//	UwZoomFire3D_eventModeTick_Parms parms;
//
//	if ( !pModeTick )
//		pModeTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wZoomFire3D.ModeTick" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pModeTick, &parms, NULL );
//
//}
//
//void UwZoomFire3D::PlayFireEnd (  )
//{
//	static UFunction* pPlayFireEnd = 0;
//	UwZoomFire3D_execPlayFireEnd_Parms parms;
//
//	if ( !pPlayFireEnd )
//		pPlayFireEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wZoomFire3D.PlayFireEnd" );
//
//	this->ProcessEvent ( pPlayFireEnd, &parms, NULL );
//
//}
//
//void UwZoomFire3D::Switch3DScope ( bool bAiming )
//{
//	static UFunction* pSwitch3DScope = 0;
//	UwZoomFire3D_execSwitch3DScope_Parms parms;
//
//	if ( !pSwitch3DScope )
//		pSwitch3DScope = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wZoomFire3D.Switch3DScope" );
//
//	parms.bAiming = bAiming;
//	this->ProcessEvent ( pSwitch3DScope, &parms, NULL );
//
//}
//
//void UwZoomFire3D::SetFOV ( bool bFOV )
//{
//	static UFunction* pSetFOV = 0;
//	UwZoomFire3D_execSetFOV_Parms parms;
//
//	if ( !pSetFOV )
//		pSetFOV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wZoomFire3D.SetFOV" );
//
//	parms.bFOV = bFOV;
//	this->ProcessEvent ( pSetFOV, &parms, NULL );
//
//}
//
//void UwZoomFire3D::SetAim ( bool bAim )
//{
//	static UFunction* pSetAim = 0;
//	UwZoomFire3D_execSetAim_Parms parms;
//
//	if ( !pSetAim )
//		pSetAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wZoomFire3D.SetAim" );
//
//	parms.bAim = bAim;
//	this->ProcessEvent ( pSetAim, &parms, NULL );
//
//}
//
//void UwZoomFire3D::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	UwZoomFire3D_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wZoomFire3D.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void UwAdminUser::UnlinkGroups (  )
//{
//	static UFunction* pUnlinkGroups = 0;
//	UwAdminUser_execUnlinkGroups_Parms parms;
//
//	if ( !pUnlinkGroups )
//		pUnlinkGroups = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.UnlinkGroups" );
//
//	this->ProcessEvent ( pUnlinkGroups, &parms, NULL );
//
//}
//
//class UwAdminUserList* UwAdminUser::GetManagedUsers ( class UwAdminGroupList* uAllGroups )
//{
//	static UFunction* pGetManagedUsers = 0;
//	UwAdminUser_execGetManagedUsers_Parms parms;
//
//	if ( !pGetManagedUsers )
//		pGetManagedUsers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.GetManagedUsers" );
//
//	parms.uAllGroups = uAllGroups;
//	this->ProcessEvent ( pGetManagedUsers, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwAdminGroup* UwAdminUser::GetManagedGroup ( struct FString GroupName )
//{
//	static UFunction* pGetManagedGroup = 0;
//	UwAdminUser_execGetManagedGroup_Parms parms;
//
//	if ( !pGetManagedGroup )
//		pGetManagedGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.GetManagedGroup" );
//
//	parms.GroupName = GroupName;
//	this->ProcessEvent ( pGetManagedGroup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwAdminGroup* UwAdminUser::GetGroup ( struct FString GroupName )
//{
//	static UFunction* pGetGroup = 0;
//	UwAdminUser_execGetGroup_Parms parms;
//
//	if ( !pGetGroup )
//		pGetGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.GetGroup" );
//
//	parms.GroupName = GroupName;
//	this->ProcessEvent ( pGetGroup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwAdminUser::MaxSecLevel (  )
//{
//	static UFunction* pMaxSecLevel = 0;
//	UwAdminUser_execMaxSecLevel_Parms parms;
//
//	if ( !pMaxSecLevel )
//		pMaxSecLevel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.MaxSecLevel" );
//
//	this->ProcessEvent ( pMaxSecLevel, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwAdminUser::ValidName ( struct FString uname )
//{
//	static UFunction* pValidName = 0;
//	UwAdminUser_execValidName_Parms parms;
//
//	if ( !pValidName )
//		pValidName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.ValidName" );
//
//	parms.uname = uname;
//	this->ProcessEvent ( pValidName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwAdminUser::ValidPass ( struct FString upass )
//{
//	static UFunction* pValidPass = 0;
//	UwAdminUser_execValidPass_Parms parms;
//
//	if ( !pValidPass )
//		pValidPass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.ValidPass" );
//
//	parms.upass = upass;
//	this->ProcessEvent ( pValidPass, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwAdminUser::CanManageUser ( class UwAdminUser* User )
//{
//	static UFunction* pCanManageUser = 0;
//	UwAdminUser_execCanManageUser_Parms parms;
//
//	if ( !pCanManageUser )
//		pCanManageUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.CanManageUser" );
//
//	parms.User = User;
//	this->ProcessEvent ( pCanManageUser, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwAdminUser::CanManageGroup ( class UwAdminGroup* Group )
//{
//	static UFunction* pCanManageGroup = 0;
//	UwAdminUser_execCanManageGroup_Parms parms;
//
//	if ( !pCanManageGroup )
//		pCanManageGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.CanManageGroup" );
//
//	parms.Group = Group;
//	this->ProcessEvent ( pCanManageGroup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwAdminUser::MergePrivs ( struct FString newprivs )
//{
//	static UFunction* pMergePrivs = 0;
//	UwAdminUser_execMergePrivs_Parms parms;
//
//	if ( !pMergePrivs )
//		pMergePrivs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.MergePrivs" );
//
//	parms.newprivs = newprivs;
//	this->ProcessEvent ( pMergePrivs, &parms, NULL );
//
//}
//
//void UwAdminUser::RedoMergedPrivs (  )
//{
//	static UFunction* pRedoMergedPrivs = 0;
//	UwAdminUser_execRedoMergedPrivs_Parms parms;
//
//	if ( !pRedoMergedPrivs )
//		pRedoMergedPrivs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.RedoMergedPrivs" );
//
//	this->ProcessEvent ( pRedoMergedPrivs, &parms, NULL );
//
//}
//
//bool UwAdminUser::HasPrivilege ( struct FString priv )
//{
//	static UFunction* pHasPrivilege = 0;
//	UwAdminUser_execHasPrivilege_Parms parms;
//
//	if ( !pHasPrivilege )
//		pHasPrivilege = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.HasPrivilege" );
//
//	parms.priv = priv;
//	this->ProcessEvent ( pHasPrivilege, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwAdminUser::AddManagedGroupsByName ( class UwAdminGroupList* lGroups, class TArray< struct FString > aGroupNames )
//{
//	static UFunction* pAddManagedGroupsByName = 0;
//	UwAdminUser_execAddManagedGroupsByName_Parms parms;
//
//	if ( !pAddManagedGroupsByName )
//		pAddManagedGroupsByName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.AddManagedGroupsByName" );
//
//	parms.lGroups = lGroups;
//	parms.aGroupNames = aGroupNames;
//	this->ProcessEvent ( pAddManagedGroupsByName, &parms, NULL );
//
//}
//
//void UwAdminUser::AddGroupsByName ( class UwAdminGroupList* lGroups, class TArray< struct FString > aGroupNames )
//{
//	static UFunction* pAddGroupsByName = 0;
//	UwAdminUser_execAddGroupsByName_Parms parms;
//
//	if ( !pAddGroupsByName )
//		pAddGroupsByName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.AddGroupsByName" );
//
//	parms.lGroups = lGroups;
//	parms.aGroupNames = aGroupNames;
//	this->ProcessEvent ( pAddGroupsByName, &parms, NULL );
//
//}
//
//void UwAdminUser::RemoveManagedGroup ( class UwAdminGroup* Group )
//{
//	static UFunction* pRemoveManagedGroup = 0;
//	UwAdminUser_execRemoveManagedGroup_Parms parms;
//
//	if ( !pRemoveManagedGroup )
//		pRemoveManagedGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.RemoveManagedGroup" );
//
//	parms.Group = Group;
//	this->ProcessEvent ( pRemoveManagedGroup, &parms, NULL );
//
//}
//
//void UwAdminUser::AddManagedGroup ( class UwAdminGroup* Group )
//{
//	static UFunction* pAddManagedGroup = 0;
//	UwAdminUser_execAddManagedGroup_Parms parms;
//
//	if ( !pAddManagedGroup )
//		pAddManagedGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.AddManagedGroup" );
//
//	parms.Group = Group;
//	this->ProcessEvent ( pAddManagedGroup, &parms, NULL );
//
//}
//
//void UwAdminUser::RemoveGroup ( class UwAdminGroup* Group )
//{
//	static UFunction* pRemoveGroup = 0;
//	UwAdminUser_execRemoveGroup_Parms parms;
//
//	if ( !pRemoveGroup )
//		pRemoveGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.RemoveGroup" );
//
//	parms.Group = Group;
//	this->ProcessEvent ( pRemoveGroup, &parms, NULL );
//
//}
//
//void UwAdminUser::AddGroup ( class UwAdminGroup* Group )
//{
//	static UFunction* pAddGroup = 0;
//	UwAdminUser_execAddGroup_Parms parms;
//
//	if ( !pAddGroup )
//		pAddGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.AddGroup" );
//
//	parms.Group = Group;
//	this->ProcessEvent ( pAddGroup, &parms, NULL );
//
//}
//
//void UwAdminUser::Init ( struct FString uname, struct FString PASS, struct FString privs )
//{
//	static UFunction* pInit = 0;
//	UwAdminUser_execInit_Parms parms;
//
//	if ( !pInit )
//		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.Init" );
//
//	parms.uname = uname;
//	parms.PASS = PASS;
//	parms.privs = privs;
//	this->ProcessEvent ( pInit, &parms, NULL );
//
//}
//
//void UwAdminUser::Created (  )
//{
//	static UFunction* pCreated = 0;
//	UwAdminUser_execCreated_Parms parms;
//
//	if ( !pCreated )
//		pCreated = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUser.Created" );
//
//	this->ProcessEvent ( pCreated, &parms, NULL );
//
//}
//
//bool UwAdminGroup::HasPrivilege ( struct FString priv )
//{
//	static UFunction* pHasPrivilege = 0;
//	UwAdminGroup_execHasPrivilege_Parms parms;
//
//	if ( !pHasPrivilege )
//		pHasPrivilege = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroup.HasPrivilege" );
//
//	parms.priv = priv;
//	this->ProcessEvent ( pHasPrivilege, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwAdminGroup::RemoveUser ( class UwAdminUser* User )
//{
//	static UFunction* pRemoveUser = 0;
//	UwAdminGroup_execRemoveUser_Parms parms;
//
//	if ( !pRemoveUser )
//		pRemoveUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroup.RemoveUser" );
//
//	parms.User = User;
//	this->ProcessEvent ( pRemoveUser, &parms, NULL );
//
//}
//
//void UwAdminGroup::UnlinkUsers (  )
//{
//	static UFunction* pUnlinkUsers = 0;
//	UwAdminGroup_execUnlinkUsers_Parms parms;
//
//	if ( !pUnlinkUsers )
//		pUnlinkUsers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroup.UnlinkUsers" );
//
//	this->ProcessEvent ( pUnlinkUsers, &parms, NULL );
//
//}
//
//bool UwAdminGroup::ValidName ( struct FString uname )
//{
//	static UFunction* pValidName = 0;
//	UwAdminGroup_execValidName_Parms parms;
//
//	if ( !pValidName )
//		pValidName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroup.ValidName" );
//
//	parms.uname = uname;
//	this->ProcessEvent ( pValidName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwAdminGroup::SetPrivs ( struct FString privs )
//{
//	static UFunction* pSetPrivs = 0;
//	UwAdminGroup_execSetPrivs_Parms parms;
//
//	if ( !pSetPrivs )
//		pSetPrivs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroup.SetPrivs" );
//
//	parms.privs = privs;
//	this->ProcessEvent ( pSetPrivs, &parms, NULL );
//
//}
//
//void UwAdminGroup::Init ( struct FString sGroupName, struct FString sPrivileges, unsigned char nGameSecLevel )
//{
//	static UFunction* pInit = 0;
//	UwAdminGroup_execInit_Parms parms;
//
//	if ( !pInit )
//		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroup.Init" );
//
//	parms.sGroupName = sGroupName;
//	parms.sPrivileges = sPrivileges;
//	parms.nGameSecLevel = nGameSecLevel;
//	this->ProcessEvent ( pInit, &parms, NULL );
//
//}
//
//void UwAdminGroup::Created (  )
//{
//	static UFunction* pCreated = 0;
//	UwAdminGroup_execCreated_Parms parms;
//
//	if ( !pCreated )
//		pCreated = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroup.Created" );
//
//	this->ProcessEvent ( pCreated, &parms, NULL );
//
//}
//
//class UwAdminUser* UwAdminUserList::FindByName ( struct FString UserName )
//{
//	static UFunction* pFindByName = 0;
//	UwAdminUserList_execFindByName_Parms parms;
//
//	if ( !pFindByName )
//		pFindByName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUserList.FindByName" );
//
//	parms.UserName = UserName;
//	this->ProcessEvent ( pFindByName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwAdminUserList::Contains ( class UwAdminUser* User )
//{
//	static UFunction* pContains = 0;
//	UwAdminUserList_execContains_Parms parms;
//
//	if ( !pContains )
//		pContains = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUserList.Contains" );
//
//	parms.User = User;
//	this->ProcessEvent ( pContains, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwAdminUserList::Clear (  )
//{
//	static UFunction* pClear = 0;
//	UwAdminUserList_execClear_Parms parms;
//
//	if ( !pClear )
//		pClear = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUserList.Clear" );
//
//	this->ProcessEvent ( pClear, &parms, NULL );
//
//}
//
//void UwAdminUserList::Remove ( class UwAdminUser* User )
//{
//	static UFunction* pRemove = 0;
//	UwAdminUserList_execRemove_Parms parms;
//
//	if ( !pRemove )
//		pRemove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUserList.Remove" );
//
//	parms.User = User;
//	this->ProcessEvent ( pRemove, &parms, NULL );
//
//}
//
//class UwAdminUser* UwAdminUserList::Get ( int i )
//{
//	static UFunction* pGet = 0;
//	UwAdminUserList_execGet_Parms parms;
//
//	if ( !pGet )
//		pGet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUserList.Get" );
//
//	parms.i = i;
//	this->ProcessEvent ( pGet, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwAdminUserList::Add ( class UwAdminUser* NewUser )
//{
//	static UFunction* pAdd = 0;
//	UwAdminUserList_execAdd_Parms parms;
//
//	if ( !pAdd )
//		pAdd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUserList.Add" );
//
//	parms.NewUser = NewUser;
//	this->ProcessEvent ( pAdd, &parms, NULL );
//
//}
//
//class UwAdminUser* UwAdminUserList::Create ( struct FString UserName, struct FString Password, struct FString Privileges )
//{
//	static UFunction* pCreate = 0;
//	UwAdminUserList_execCreate_Parms parms;
//
//	if ( !pCreate )
//		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUserList.Create" );
//
//	parms.UserName = UserName;
//	parms.Password = Password;
//	parms.Privileges = Privileges;
//	this->ProcessEvent ( pCreate, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwAdminUserList::Count (  )
//{
//	static UFunction* pCount = 0;
//	UwAdminUserList_execCount_Parms parms;
//
//	if ( !pCount )
//		pCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminUserList.Count" );
//
//	this->ProcessEvent ( pCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwAdminGroupList::Clear (  )
//{
//	static UFunction* pClear = 0;
//	UwAdminGroupList_execClear_Parms parms;
//
//	if ( !pClear )
//		pClear = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroupList.Clear" );
//
//	this->ProcessEvent ( pClear, &parms, NULL );
//
//}
//
//class UwAdminGroup* UwAdminGroupList::FindMasterGroup (  )
//{
//	static UFunction* pFindMasterGroup = 0;
//	UwAdminGroupList_execFindMasterGroup_Parms parms;
//
//	if ( !pFindMasterGroup )
//		pFindMasterGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroupList.FindMasterGroup" );
//
//	this->ProcessEvent ( pFindMasterGroup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UwAdminGroupList::Contains ( class UwAdminGroup* Group )
//{
//	static UFunction* pContains = 0;
//	UwAdminGroupList_execContains_Parms parms;
//
//	if ( !pContains )
//		pContains = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroupList.Contains" );
//
//	parms.Group = Group;
//	this->ProcessEvent ( pContains, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwAdminGroup* UwAdminGroupList::FindByName ( struct FString GroupName )
//{
//	static UFunction* pFindByName = 0;
//	UwAdminGroupList_execFindByName_Parms parms;
//
//	if ( !pFindByName )
//		pFindByName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroupList.FindByName" );
//
//	parms.GroupName = GroupName;
//	this->ProcessEvent ( pFindByName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UwAdminGroup* UwAdminGroupList::Get ( int Index )
//{
//	static UFunction* pGet = 0;
//	UwAdminGroupList_execGet_Parms parms;
//
//	if ( !pGet )
//		pGet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroupList.Get" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pGet, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwAdminGroupList::Remove ( class UwAdminGroup* Group )
//{
//	static UFunction* pRemove = 0;
//	UwAdminGroupList_execRemove_Parms parms;
//
//	if ( !pRemove )
//		pRemove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroupList.Remove" );
//
//	parms.Group = Group;
//	this->ProcessEvent ( pRemove, &parms, NULL );
//
//}
//
//void UwAdminGroupList::Add ( class UwAdminGroup* Group )
//{
//	static UFunction* pAdd = 0;
//	UwAdminGroupList_execAdd_Parms parms;
//
//	if ( !pAdd )
//		pAdd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroupList.Add" );
//
//	parms.Group = Group;
//	this->ProcessEvent ( pAdd, &parms, NULL );
//
//}
//
//class UwAdminGroup* UwAdminGroupList::CreateGroup ( struct FString GroupName, struct FString Privileges, unsigned char GameSecLevel )
//{
//	static UFunction* pCreateGroup = 0;
//	UwAdminGroupList_execCreateGroup_Parms parms;
//
//	if ( !pCreateGroup )
//		pCreateGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroupList.CreateGroup" );
//
//	parms.GroupName = GroupName;
//	parms.Privileges = Privileges;
//	parms.GameSecLevel = GameSecLevel;
//	this->ProcessEvent ( pCreateGroup, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UwAdminGroupList::Count (  )
//{
//	static UFunction* pCount = 0;
//	UwAdminGroupList_execCount_Parms parms;
//
//	if ( !pCount )
//		pCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wAdminGroupList.Count" );
//
//	this->ProcessEvent ( pCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwPrivilegeBase::eventCreated (  )
//{
//	static UFunction* pCreated = 0;
//	UwPrivilegeBase_eventCreated_Parms parms;
//
//	if ( !pCreated )
//		pCreated = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wPrivilegeBase.Created" );
//
//	this->ProcessEvent ( pCreated, &parms, NULL );
//
//}
//
//void UAdmin::DoLogout (  )
//{
//	static UFunction* pDoLogout = 0;
//	UAdmin_execDoLogout_Parms parms;
//
//	if ( !pDoLogout )
//		pDoLogout = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Admin.DoLogout" );
//
//	this->ProcessEvent ( pDoLogout, &parms, NULL );
//
//}
//
//void UAdmin::DoLogin ( struct FString UserName, struct FString Password )
//{
//	static UFunction* pDoLogin = 0;
//	UAdmin_execDoLogin_Parms parms;
//
//	if ( !pDoLogin )
//		pDoLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Admin.DoLogin" );
//
//	parms.UserName = UserName;
//	parms.Password = Password;
//	this->ProcessEvent ( pDoLogin, &parms, NULL );
//
//}
//
//void AFragment::RandSpin ( float spinRate )
//{
//	static UFunction* pRandSpin = 0;
//	AFragment_execRandSpin_Parms parms;
//
//	if ( !pRandSpin )
//		pRandSpin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Fragment.RandSpin" );
//
//	parms.spinRate = spinRate;
//	this->ProcessEvent ( pRandSpin, &parms, NULL );
//
//}
//
//void AFragment::HitWall ( struct FVector HitNormal, class AActor* HitWall, class UMaterial* HitMaterial )
//{
//	static UFunction* pHitWall = 0;
//	AFragment_execHitWall_Parms parms;
//
//	if ( !pHitWall )
//		pHitWall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Fragment.HitWall" );
//
//	parms.HitNormal = HitNormal;
//	parms.HitWall = HitWall;
//	parms.HitMaterial = HitMaterial;
//	this->ProcessEvent ( pHitWall, &parms, NULL );
//
//}
//
//void AFragment::CalcVelocity ( struct FVector Momentum )
//{
//	static UFunction* pCalcVelocity = 0;
//	AFragment_execCalcVelocity_Parms parms;
//
//	if ( !pCalcVelocity )
//		pCalcVelocity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Fragment.CalcVelocity" );
//
//	parms.Momentum = Momentum;
//	this->ProcessEvent ( pCalcVelocity, &parms, NULL );
//
//}
//
//bool AFragment::CanSplash (  )
//{
//	static UFunction* pCanSplash = 0;
//	AFragment_execCanSplash_Parms parms;
//
//	if ( !pCanSplash )
//		pCanSplash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Fragment.CanSplash" );
//
//	this->ProcessEvent ( pCanSplash, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AUnitTest::DQ (  )
//{
//	static UFunction* pDQ = 0;
//	AUnitTest_execDQ_Parms parms;
//
//	if ( !pDQ )
//		pDQ = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UnitTest.DQ" );
//
//	this->ProcessEvent ( pDQ, &parms, NULL );
//
//}
//
//class AActor* AUnitTest::EQ ( class AActor* A )
//{
//	static UFunction* pEQ = 0;
//	AUnitTest_execEQ_Parms parms;
//
//	if ( !pEQ )
//		pEQ = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UnitTest.EQ" );
//
//	parms.A = A;
//	this->ProcessEvent ( pEQ, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AUnitTest::Check ( bool Valid, struct FString Msg )
//{
//	static UFunction* pCheck = 0;
//	AUnitTest_execCheck_Parms parms;
//
//	if ( !pCheck )
//		pCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UnitTest.Check" );
//
//	parms.Valid = Valid;
//	parms.Msg = Msg;
//	this->ProcessEvent ( pCheck, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString AUnitTest::RunUnitTest ( int SW )
//{
//	static UFunction* pRunUnitTest = 0;
//	AUnitTest_execRunUnitTest_Parms parms;
//
//	if ( !pRunUnitTest )
//		pRunUnitTest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UnitTest.RunUnitTest" );
//
//	parms.SW = SW;
//	this->ProcessEvent ( pRunUnitTest, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AUnitTest::TestTearOff (  )
//{
//	static UFunction* pTestTearOff = 0;
//	AUnitTest_execTestTearOff_Parms parms;
//
//	if ( !pTestTearOff )
//		pTestTearOff = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UnitTest.TestTearOff" );
//
//	this->ProcessEvent ( pTestTearOff, &parms, NULL );
//
//}
//
//void AUnitTest::TestSetup (  )
//{
//	static UFunction* pTestSetup = 0;
//	AUnitTest_execTestSetup_Parms parms;
//
//	if ( !pTestSetup )
//		pTestSetup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UnitTest.TestSetup" );
//
//	this->ProcessEvent ( pTestSetup, &parms, NULL );
//
//}
//
//void AUnitTest::FixtureTearOff (  )
//{
//	static UFunction* pFixtureTearOff = 0;
//	AUnitTest_execFixtureTearOff_Parms parms;
//
//	if ( !pFixtureTearOff )
//		pFixtureTearOff = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UnitTest.FixtureTearOff" );
//
//	this->ProcessEvent ( pFixtureTearOff, &parms, NULL );
//
//}
//
//void AUnitTest::FixtureSetup (  )
//{
//	static UFunction* pFixtureSetup = 0;
//	AUnitTest_execFixtureSetup_Parms parms;
//
//	if ( !pFixtureSetup )
//		pFixtureSetup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.UnitTest.FixtureSetup" );
//
//	this->ProcessEvent ( pFixtureSetup, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
//{
//	static UFunction* pDisplayDebug = 0;
//	AwFPWeaponAttachment_execDisplayDebug_Parms parms;
//
//	if ( !pDisplayDebug )
//		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.DisplayDebug" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDisplayDebug, &parms, NULL );
//
//	*YL = parms.YL;
//	*YPos = parms.YPos;
//}
//
//void AwFPWeaponAttachment::eventRenderOverlays ( class UCanvas* Canvas )
//{
//	static UFunction* pRenderOverlays = 0;
//	AwFPWeaponAttachment_eventRenderOverlays_Parms parms;
//
//	if ( !pRenderOverlays )
//		pRenderOverlays = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.RenderOverlays" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pRenderOverlays, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::FPCalcSpread (  )
//{
//	static UFunction* pFPCalcSpread = 0;
//	AwFPWeaponAttachment_execFPCalcSpread_Parms parms;
//
//	if ( !pFPCalcSpread )
//		pFPCalcSpread = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.FPCalcSpread" );
//
//	this->ProcessEvent ( pFPCalcSpread, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::FPModeDoFire (  )
//{
//	static UFunction* pFPModeDoFire = 0;
//	AwFPWeaponAttachment_execFPModeDoFire_Parms parms;
//
//	if ( !pFPModeDoFire )
//		pFPModeDoFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.FPModeDoFire" );
//
//	this->ProcessEvent ( pFPModeDoFire, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::TickFPWeapon ( float DeltaTime )
//{
//	static UFunction* pTickFPWeapon = 0;
//	AwFPWeaponAttachment_execTickFPWeapon_Parms parms;
//
//	if ( !pTickFPWeapon )
//		pTickFPWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.TickFPWeapon" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTickFPWeapon, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::RefreshState (  )
//{
//	static UFunction* pRefreshState = 0;
//	AwFPWeaponAttachment_execRefreshState_Parms parms;
//
//	if ( !pRefreshState )
//		pRefreshState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.RefreshState" );
//
//	this->ProcessEvent ( pRefreshState, &parms, NULL );
//
//}
//
//bool AwFPWeaponAttachment::IsActive (  )
//{
//	static UFunction* pIsActive = 0;
//	AwFPWeaponAttachment_execIsActive_Parms parms;
//
//	if ( !pIsActive )
//		pIsActive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.IsActive" );
//
//	this->ProcessEvent ( pIsActive, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwFPWeaponAttachment::ShakeView (  )
//{
//	static UFunction* pShakeView = 0;
//	AwFPWeaponAttachment_execShakeView_Parms parms;
//
//	if ( !pShakeView )
//		pShakeView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.ShakeView" );
//
//	this->ProcessEvent ( pShakeView, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::CheckBob ( float DeltaTime )
//{
//	static UFunction* pCheckBob = 0;
//	AwFPWeaponAttachment_execCheckBob_Parms parms;
//
//	if ( !pCheckBob )
//		pCheckBob = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.CheckBob" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pCheckBob, &parms, NULL );
//
//}
//
//struct FVector AwFPWeaponAttachment::WeaponBob ( float BobDamping )
//{
//	static UFunction* pWeaponBob = 0;
//	AwFPWeaponAttachment_execWeaponBob_Parms parms;
//
//	if ( !pWeaponBob )
//		pWeaponBob = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.WeaponBob" );
//
//	parms.BobDamping = BobDamping;
//	this->ProcessEvent ( pWeaponBob, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwFPWeaponAttachment::CalcStanceOffset ( float fDelta )
//{
//	static UFunction* pCalcStanceOffset = 0;
//	AwFPWeaponAttachment_execCalcStanceOffset_Parms parms;
//
//	if ( !pCalcStanceOffset )
//		pCalcStanceOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.CalcStanceOffset" );
//
//	parms.fDelta = fDelta;
//	this->ProcessEvent ( pCalcStanceOffset, &parms, NULL );
//
//}
//
//float AwFPWeaponAttachment::CalcDestPivot (  )
//{
//	static UFunction* pCalcDestPivot = 0;
//	AwFPWeaponAttachment_execCalcDestPivot_Parms parms;
//
//	if ( !pCalcDestPivot )
//		pCalcDestPivot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.CalcDestPivot" );
//
//	this->ProcessEvent ( pCalcDestPivot, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwFPWeaponAttachment::CalcPartsOffset (  )
//{
//	static UFunction* pCalcPartsOffset = 0;
//	AwFPWeaponAttachment_execCalcPartsOffset_Parms parms;
//
//	if ( !pCalcPartsOffset )
//		pCalcPartsOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.CalcPartsOffset" );
//
//	this->ProcessEvent ( pCalcPartsOffset, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::SetAnimAction ( unsigned char byType, bool Opt1 )
//{
//	static UFunction* pSetAnimAction = 0;
//	AwFPWeaponAttachment_execSetAnimAction_Parms parms;
//
//	if ( !pSetAnimAction )
//		pSetAnimAction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.SetAnimAction" );
//
//	parms.byType = byType;
//	parms.Opt1 = Opt1;
//	this->ProcessEvent ( pSetAnimAction, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::PlayIdle (  )
//{
//	static UFunction* pPlayIdle = 0;
//	AwFPWeaponAttachment_execPlayIdle_Parms parms;
//
//	if ( !pPlayIdle )
//		pPlayIdle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.PlayIdle" );
//
//	this->ProcessEvent ( pPlayIdle, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::AnimEnd ( int Channel )
//{
//	static UFunction* pAnimEnd = 0;
//	AwFPWeaponAttachment_execAnimEnd_Parms parms;
//
//	if ( !pAnimEnd )
//		pAnimEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.AnimEnd" );
//
//	parms.Channel = Channel;
//	this->ProcessEvent ( pAnimEnd, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::SetQuickFOV ( bool bFOV )
//{
//	static UFunction* pSetQuickFOV = 0;
//	AwFPWeaponAttachment_execSetQuickFOV_Parms parms;
//
//	if ( !pSetQuickFOV )
//		pSetQuickFOV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.SetQuickFOV" );
//
//	parms.bFOV = bFOV;
//	this->ProcessEvent ( pSetQuickFOV, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::SetFOV ( bool bFOV, bool bQuick )
//{
//	static UFunction* pSetFOV = 0;
//	AwFPWeaponAttachment_execSetFOV_Parms parms;
//
//	if ( !pSetFOV )
//		pSetFOV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.SetFOV" );
//
//	parms.bFOV = bFOV;
//	parms.bQuick = bQuick;
//	this->ProcessEvent ( pSetFOV, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::Change3DScopeMesh ( bool bAiming )
//{
//	static UFunction* pChange3DScopeMesh = 0;
//	AwFPWeaponAttachment_execChange3DScopeMesh_Parms parms;
//
//	if ( !pChange3DScopeMesh )
//		pChange3DScopeMesh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.Change3DScopeMesh" );
//
//	parms.bAiming = bAiming;
//	this->ProcessEvent ( pChange3DScopeMesh, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::StartMuzzleSmoke (  )
//{
//	static UFunction* pStartMuzzleSmoke = 0;
//	AwFPWeaponAttachment_execStartMuzzleSmoke_Parms parms;
//
//	if ( !pStartMuzzleSmoke )
//		pStartMuzzleSmoke = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.StartMuzzleSmoke" );
//
//	this->ProcessEvent ( pStartMuzzleSmoke, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::FlashMuzzleFlash (  )
//{
//	static UFunction* pFlashMuzzleFlash = 0;
//	AwFPWeaponAttachment_execFlashMuzzleFlash_Parms parms;
//
//	if ( !pFlashMuzzleFlash )
//		pFlashMuzzleFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.FlashMuzzleFlash" );
//
//	this->ProcessEvent ( pFlashMuzzleFlash, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::DrawMuzzleFlash ( class UCanvas* Canvas )
//{
//	static UFunction* pDrawMuzzleFlash = 0;
//	AwFPWeaponAttachment_execDrawMuzzleFlash_Parms parms;
//
//	if ( !pDrawMuzzleFlash )
//		pDrawMuzzleFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.DrawMuzzleFlash" );
//
//	parms.Canvas = Canvas;
//	this->ProcessEvent ( pDrawMuzzleFlash, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::SpawnShell (  )
//{
//	static UFunction* pSpawnShell = 0;
//	AwFPWeaponAttachment_execSpawnShell_Parms parms;
//
//	if ( !pSpawnShell )
//		pSpawnShell = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.SpawnShell" );
//
//	this->ProcessEvent ( pSpawnShell, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::LoadWarhead ( class UStaticMesh* stProj )
//{
//	static UFunction* pLoadWarhead = 0;
//	AwFPWeaponAttachment_execLoadWarhead_Parms parms;
//
//	if ( !pLoadWarhead )
//		pLoadWarhead = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.LoadWarhead" );
//
//	parms.stProj = stProj;
//	this->ProcessEvent ( pLoadWarhead, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::SetResParams ( class UClass* wRes )
//{
//	static UFunction* pSetResParams = 0;
//	AwFPWeaponAttachment_execSetResParams_Parms parms;
//
//	if ( !pSetResParams )
//		pSetResParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.SetResParams" );
//
//	parms.wRes = wRes;
//	this->ProcessEvent ( pSetResParams, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::SetBaseParams ( class UwWeaponBaseParams* wBase )
//{
//	static UFunction* pSetBaseParams = 0;
//	AwFPWeaponAttachment_execSetBaseParams_Parms parms;
//
//	if ( !pSetBaseParams )
//		pSetBaseParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.SetBaseParams" );
//
//	parms.wBase = wBase;
//	this->ProcessEvent ( pSetBaseParams, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::AttWarhead ( bool bAttOrDtt )
//{
//	static UFunction* pAttWarhead = 0;
//	AwFPWeaponAttachment_execAttWarhead_Parms parms;
//
//	if ( !pAttWarhead )
//		pAttWarhead = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.AttWarhead" );
//
//	parms.bAttOrDtt = bAttOrDtt;
//	this->ProcessEvent ( pAttWarhead, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::AddParts ( unsigned char Type, struct FString szName, struct FString szSkinName, struct FString strHaveDotName, struct FVector AimDiff, int iItemID, int iPartsGroupID, bool bSecondSight )
//{
//	static UFunction* pAddParts = 0;
//	AwFPWeaponAttachment_execAddParts_Parms parms;
//
//	if ( !pAddParts )
//		pAddParts = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.AddParts" );
//
//	parms.Type = Type;
//	parms.szName = szName;
//	parms.szSkinName = szSkinName;
//	parms.strHaveDotName = strHaveDotName;
//	parms.AimDiff = AimDiff;
//	parms.iItemID = iItemID;
//	parms.iPartsGroupID = iPartsGroupID;
//	parms.bSecondSight = bSecondSight;
//	this->ProcessEvent ( pAddParts, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::SetWeaponPaint ( int iPaintID )
//{
//	static UFunction* pSetWeaponPaint = 0;
//	AwFPWeaponAttachment_execSetWeaponPaint_Parms parms;
//
//	if ( !pSetWeaponPaint )
//		pSetWeaponPaint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.SetWeaponPaint" );
//
//	parms.iPaintID = iPaintID;
//	this->ProcessEvent ( pSetWeaponPaint, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::AddPartsGroup ( int iWeaponID, int iAddPartsID )
//{
//	static UFunction* pAddPartsGroup = 0;
//	AwFPWeaponAttachment_execAddPartsGroup_Parms parms;
//
//	if ( !pAddPartsGroup )
//		pAddPartsGroup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.AddPartsGroup" );
//
//	parms.iWeaponID = iWeaponID;
//	parms.iAddPartsID = iAddPartsID;
//	this->ProcessEvent ( pAddPartsGroup, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::wLoadOut ( int iID, int iAddPartsID, int iPaintID, class APawn* Pawn )
//{
//	static UFunction* pwLoadOut = 0;
//	AwFPWeaponAttachment_execwLoadOut_Parms parms;
//
//	if ( !pwLoadOut )
//		pwLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.wLoadOut" );
//
//	parms.iID = iID;
//	parms.iAddPartsID = iAddPartsID;
//	parms.iPaintID = iPaintID;
//	parms.Pawn = Pawn;
//	this->ProcessEvent ( pwLoadOut, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::ResetBase (  )
//{
//	static UFunction* pResetBase = 0;
//	AwFPWeaponAttachment_execResetBase_Parms parms;
//
//	if ( !pResetBase )
//		pResetBase = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.ResetBase" );
//
//	this->ProcessEvent ( pResetBase, &parms, NULL );
//
//}
//
//void AwFPWeaponAttachment::eventDestroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AwFPWeaponAttachment_eventDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wFPWeaponAttachment.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//int ULadderInfo::LengthOfLadder ( int Ladder )
//{
//	static UFunction* pLengthOfLadder = 0;
//	ULadderInfo_execLengthOfLadder_Parms parms;
//
//	if ( !pLengthOfLadder )
//		pLengthOfLadder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LadderInfo.LengthOfLadder" );
//
//	parms.Ladder = Ladder;
//	this->ProcessEvent ( pLengthOfLadder, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString ULadderInfo::GetMatchDescription ( class UGameProfile* G )
//{
//	static UFunction* pGetMatchDescription = 0;
//	ULadderInfo_execGetMatchDescription_Parms parms;
//
//	if ( !pGetMatchDescription )
//		pGetMatchDescription = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LadderInfo.GetMatchDescription" );
//
//	parms.G = G;
//	this->ProcessEvent ( pGetMatchDescription, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString ULadderInfo::MakeURLFor ( class UGameProfile* G )
//{
//	static UFunction* pMakeURLFor = 0;
//	ULadderInfo_execMakeURLFor_Parms parms;
//
//	if ( !pMakeURLFor )
//		pMakeURLFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LadderInfo.MakeURLFor" );
//
//	parms.G = G;
//	this->ProcessEvent ( pMakeURLFor, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UMatchInfo* ULadderInfo::GetCurrentMatchInfo ( class UGameProfile* G )
//{
//	static UFunction* pGetCurrentMatchInfo = 0;
//	ULadderInfo_execGetCurrentMatchInfo_Parms parms;
//
//	if ( !pGetCurrentMatchInfo )
//		pGetCurrentMatchInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LadderInfo.GetCurrentMatchInfo" );
//
//	parms.G = G;
//	this->ProcessEvent ( pGetCurrentMatchInfo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UMatchInfo* ULadderInfo::GetMatchInfo ( int Ladder, int rung )
//{
//	static UFunction* pGetMatchInfo = 0;
//	ULadderInfo_execGetMatchInfo_Parms parms;
//
//	if ( !pGetMatchInfo )
//		pGetMatchInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LadderInfo.GetMatchInfo" );
//
//	parms.Ladder = Ladder;
//	parms.rung = rung;
//	this->ProcessEvent ( pGetMatchInfo, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString ULadderInfo::UpdateLadders ( class UGameProfile* G, int CurrentLadder )
//{
//	static UFunction* pUpdateLadders = 0;
//	ULadderInfo_execUpdateLadders_Parms parms;
//
//	if ( !pUpdateLadders )
//		pUpdateLadders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.LadderInfo.UpdateLadders" );
//
//	parms.G = G;
//	parms.CurrentLadder = CurrentLadder;
//	this->ProcessEvent ( pUpdateLadders, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UMaplistRecord::CreateMapItemList ( class TArray< struct FString > MapURLs, class TArray< struct FMapItem >* MapItems )
//{
//	static UFunction* pCreateMapItemList = 0;
//	UMaplistRecord_execCreateMapItemList_Parms parms;
//
//	if ( !pCreateMapItemList )
//		pCreateMapItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.CreateMapItemList" );
//
//	parms.MapURLs = MapURLs;
//	this->ProcessEvent ( pCreateMapItemList, &parms, NULL );
//
//	*MapItems = parms.MapItems;
//}
//
//bool UMaplistRecord::CreateMapItem ( struct FString FullMapURL, struct FMapItem* Item )
//{
//	static UFunction* pCreateMapItem = 0;
//	UMaplistRecord_execCreateMapItem_Parms parms;
//
//	if ( !pCreateMapItem )
//		pCreateMapItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.CreateMapItem" );
//
//	parms.FullMapURL = FullMapURL;
//	this->ProcessEvent ( pCreateMapItem, &parms, NULL );
//
//	*Item = parms.Item;
//	return parms.ReturnValue;
//}
//
//struct FKeyValuePair UMaplistRecord::CreateMapOption ( struct FString* MapOptionString )
//{
//	static UFunction* pCreateMapOption = 0;
//	UMaplistRecord_execCreateMapOption_Parms parms;
//
//	if ( !pCreateMapOption )
//		pCreateMapOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.CreateMapOption" );
//
//	parms.MapOptionString = *MapOptionString;
//	this->ProcessEvent ( pCreateMapOption, &parms, NULL );
//
//	*MapOptionString = parms.MapOptionString;
//	return parms.ReturnValue;
//}
//
//struct FString UMaplistRecord::GetBaseMapName ( struct FString* FullMapURL )
//{
//	static UFunction* pGetBaseMapName = 0;
//	UMaplistRecord_execGetBaseMapName_Parms parms;
//
//	if ( !pGetBaseMapName )
//		pGetBaseMapName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetBaseMapName" );
//
//	parms.FullMapURL = *FullMapURL;
//	this->ProcessEvent ( pGetBaseMapName, &parms, NULL );
//
//	*FullMapURL = parms.FullMapURL;
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::ItemHasOption ( struct FMapItem Item, struct FKeyValuePair Option )
//{
//	static UFunction* pItemHasOption = 0;
//	UMaplistRecord_execItemHasOption_Parms parms;
//
//	if ( !pItemHasOption )
//		pItemHasOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.ItemHasOption" );
//
//	parms.Item = Item;
//	parms.Option = Option;
//	this->ProcessEvent ( pItemHasOption, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::MapHasOption ( int MapIndex, struct FKeyValuePair Option )
//{
//	static UFunction* pMapHasOption = 0;
//	UMaplistRecord_execMapHasOption_Parms parms;
//
//	if ( !pMapHasOption )
//		pMapHasOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.MapHasOption" );
//
//	parms.MapIndex = MapIndex;
//	parms.Option = Option;
//	this->ProcessEvent ( pMapHasOption, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::ValidOptionIndex ( int MapIndex, int OptionIndex )
//{
//	static UFunction* pValidOptionIndex = 0;
//	UMaplistRecord_execValidOptionIndex_Parms parms;
//
//	if ( !pValidOptionIndex )
//		pValidOptionIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.ValidOptionIndex" );
//
//	parms.MapIndex = MapIndex;
//	parms.OptionIndex = OptionIndex;
//	this->ProcessEvent ( pValidOptionIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::ValidIndex ( int i )
//{
//	static UFunction* pValidIndex = 0;
//	UMaplistRecord_execValidIndex_Parms parms;
//
//	if ( !pValidIndex )
//		pValidIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.ValidIndex" );
//
//	parms.i = i;
//	this->ProcessEvent ( pValidIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::ValidMap ( struct FString MapName )
//{
//	static UFunction* pValidMap = 0;
//	UMaplistRecord_execValidMap_Parms parms;
//
//	if ( !pValidMap )
//		pValidMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.ValidMap" );
//
//	parms.MapName = MapName;
//	this->ProcessEvent ( pValidMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UMaplistRecord::GetOptionIndex ( int MapIndex, struct FKeyValuePair Option )
//{
//	static UFunction* pGetOptionIndex = 0;
//	UMaplistRecord_execGetOptionIndex_Parms parms;
//
//	if ( !pGetOptionIndex )
//		pGetOptionIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetOptionIndex" );
//
//	parms.MapIndex = MapIndex;
//	parms.Option = Option;
//	this->ProcessEvent ( pGetOptionIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UMaplistRecord::GetMapItemIndex ( struct FMapItem Item )
//{
//	static UFunction* pGetMapItemIndex = 0;
//	UMaplistRecord_execGetMapItemIndex_Parms parms;
//
//	if ( !pGetMapItemIndex )
//		pGetMapItemIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetMapItemIndex" );
//
//	parms.Item = Item;
//	this->ProcessEvent ( pGetMapItemIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UMaplistRecord::GetMapIndex ( struct FString MapName )
//{
//	static UFunction* pGetMapIndex = 0;
//	UMaplistRecord_execGetMapIndex_Parms parms;
//
//	if ( !pGetMapIndex )
//		pGetMapIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetMapIndex" );
//
//	parms.MapName = MapName;
//	this->ProcessEvent ( pGetMapIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UMaplistRecord::GetActiveMapIndex (  )
//{
//	static UFunction* pGetActiveMapIndex = 0;
//	UMaplistRecord_execGetActiveMapIndex_Parms parms;
//
//	if ( !pGetActiveMapIndex )
//		pGetActiveMapIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetActiveMapIndex" );
//
//	this->ProcessEvent ( pGetActiveMapIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UMaplistRecord::GetCacheIndex ( struct FString MapName )
//{
//	static UFunction* pGetCacheIndex = 0;
//	UMaplistRecord_execGetCacheIndex_Parms parms;
//
//	if ( !pGetCacheIndex )
//		pGetCacheIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetCacheIndex" );
//
//	parms.MapName = MapName;
//	this->ProcessEvent ( pGetCacheIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::IsDirty (  )
//{
//	static UFunction* pIsDirty = 0;
//	UMaplistRecord_execIsDirty_Parms parms;
//
//	if ( !pIsDirty )
//		pIsDirty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.IsDirty" );
//
//	this->ProcessEvent ( pIsDirty, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FString > UMaplistRecord::GetAllMapURL (  )
//{
//	static UFunction* pGetAllMapURL = 0;
//	UMaplistRecord_execGetAllMapURL_Parms parms;
//
//	if ( !pGetAllMapURL )
//		pGetAllMapURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetAllMapURL" );
//
//	this->ProcessEvent ( pGetAllMapURL, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class TArray< struct FMapItem > UMaplistRecord::GetMaps (  )
//{
//	static UFunction* pGetMaps = 0;
//	UMaplistRecord_execGetMaps_Parms parms;
//
//	if ( !pGetMaps )
//		pGetMaps = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetMaps" );
//
//	this->ProcessEvent ( pGetMaps, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UMaplistRecord::GetMapURL ( int Index )
//{
//	static UFunction* pGetMapURL = 0;
//	UMaplistRecord_execGetMapURL_Parms parms;
//
//	if ( !pGetMapURL )
//		pGetMapURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetMapURL" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pGetMapURL, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UMaplistRecord::GetMapName ( int i )
//{
//	static UFunction* pGetMapName = 0;
//	UMaplistRecord_execGetMapName_Parms parms;
//
//	if ( !pGetMapName )
//		pGetMapName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetMapName" );
//
//	parms.i = i;
//	this->ProcessEvent ( pGetMapName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UMaplistRecord::GetActiveMapURL (  )
//{
//	static UFunction* pGetActiveMapURL = 0;
//	UMaplistRecord_execGetActiveMapURL_Parms parms;
//
//	if ( !pGetActiveMapURL )
//		pGetActiveMapURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetActiveMapURL" );
//
//	this->ProcessEvent ( pGetActiveMapURL, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UMaplistRecord::GetActiveMapName (  )
//{
//	static UFunction* pGetActiveMapName = 0;
//	UMaplistRecord_execGetActiveMapName_Parms parms;
//
//	if ( !pGetActiveMapName )
//		pGetActiveMapName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetActiveMapName" );
//
//	this->ProcessEvent ( pGetActiveMapName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UMaplistRecord::GetGameType (  )
//{
//	static UFunction* pGetGameType = 0;
//	UMaplistRecord_execGetGameType_Parms parms;
//
//	if ( !pGetGameType )
//		pGetGameType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetGameType" );
//
//	this->ProcessEvent ( pGetGameType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UMaplistRecord::GetTitle (  )
//{
//	static UFunction* pGetTitle = 0;
//	UMaplistRecord_execGetTitle_Parms parms;
//
//	if ( !pGetTitle )
//		pGetTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.GetTitle" );
//
//	this->ProcessEvent ( pGetTitle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::SetMapOptions ( int MapIndex, struct FString OptionString )
//{
//	static UFunction* pSetMapOptions = 0;
//	UMaplistRecord_execSetMapOptions_Parms parms;
//
//	if ( !pSetMapOptions )
//		pSetMapOptions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.SetMapOptions" );
//
//	parms.MapIndex = MapIndex;
//	parms.OptionString = OptionString;
//	this->ProcessEvent ( pSetMapOptions, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::RemoveMap ( struct FString MapName )
//{
//	static UFunction* pRemoveMap = 0;
//	UMaplistRecord_execRemoveMap_Parms parms;
//
//	if ( !pRemoveMap )
//		pRemoveMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.RemoveMap" );
//
//	parms.MapName = MapName;
//	this->ProcessEvent ( pRemoveMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::InsertMap ( struct FString MapName, int Index )
//{
//	static UFunction* pInsertMap = 0;
//	UMaplistRecord_execInsertMap_Parms parms;
//
//	if ( !pInsertMap )
//		pInsertMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.InsertMap" );
//
//	parms.MapName = MapName;
//	parms.Index = Index;
//	this->ProcessEvent ( pInsertMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::AddMap ( struct FString MapName )
//{
//	static UFunction* pAddMap = 0;
//	UMaplistRecord_execAddMap_Parms parms;
//
//	if ( !pAddMap )
//		pAddMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.AddMap" );
//
//	parms.MapName = MapName;
//	this->ProcessEvent ( pAddMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UMaplistRecord::RefreshMapItem ( int MapIndex )
//{
//	static UFunction* pRefreshMapItem = 0;
//	UMaplistRecord_execRefreshMapItem_Parms parms;
//
//	if ( !pRefreshMapItem )
//		pRefreshMapItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.RefreshMapItem" );
//
//	parms.MapIndex = MapIndex;
//	this->ProcessEvent ( pRefreshMapItem, &parms, NULL );
//
//}
//
//bool UMaplistRecord::RemoveOptionItem ( int MapIndex, struct FKeyValuePair Option )
//{
//	static UFunction* pRemoveOptionItem = 0;
//	UMaplistRecord_execRemoveOptionItem_Parms parms;
//
//	if ( !pRemoveOptionItem )
//		pRemoveOptionItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.RemoveOptionItem" );
//
//	parms.MapIndex = MapIndex;
//	parms.Option = Option;
//	this->ProcessEvent ( pRemoveOptionItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::RemoveOptionString ( int MapIndex, struct FString OptionString )
//{
//	static UFunction* pRemoveOptionString = 0;
//	UMaplistRecord_execRemoveOptionString_Parms parms;
//
//	if ( !pRemoveOptionString )
//		pRemoveOptionString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.RemoveOptionString" );
//
//	parms.MapIndex = MapIndex;
//	parms.OptionString = OptionString;
//	this->ProcessEvent ( pRemoveOptionString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::AddOptionItem ( int MapIndex, struct FKeyValuePair Option )
//{
//	static UFunction* pAddOptionItem = 0;
//	UMaplistRecord_execAddOptionItem_Parms parms;
//
//	if ( !pAddOptionItem )
//		pAddOptionItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.AddOptionItem" );
//
//	parms.MapIndex = MapIndex;
//	parms.Option = Option;
//	this->ProcessEvent ( pAddOptionItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::AddOptionString ( int MapIndex, struct FString OptionString )
//{
//	static UFunction* pAddOptionString = 0;
//	UMaplistRecord_execAddOptionString_Parms parms;
//
//	if ( !pAddOptionString )
//		pAddOptionString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.AddOptionString" );
//
//	parms.MapIndex = MapIndex;
//	parms.OptionString = OptionString;
//	this->ProcessEvent ( pAddOptionString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UMaplistRecord::Clear ( bool bReset )
//{
//	static UFunction* pClear = 0;
//	UMaplistRecord_execClear_Parms parms;
//
//	if ( !pClear )
//		pClear = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.Clear" );
//
//	parms.bReset = bReset;
//	this->ProcessEvent ( pClear, &parms, NULL );
//
//}
//
//void UMaplistRecord::CancelChanges (  )
//{
//	static UFunction* pCancelChanges = 0;
//	UMaplistRecord_execCancelChanges_Parms parms;
//
//	if ( !pCancelChanges )
//		pCancelChanges = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.CancelChanges" );
//
//	this->ProcessEvent ( pCancelChanges, &parms, NULL );
//
//}
//
//void UMaplistRecord::VerifyMaps (  )
//{
//	static UFunction* pVerifyMaps = 0;
//	UMaplistRecord_execVerifyMaps_Parms parms;
//
//	if ( !pVerifyMaps )
//		pVerifyMaps = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.VerifyMaps" );
//
//	this->ProcessEvent ( pVerifyMaps, &parms, NULL );
//
//}
//
//void UMaplistRecord::Save (  )
//{
//	static UFunction* pSave = 0;
//	UMaplistRecord_execSave_Parms parms;
//
//	if ( !pSave )
//		pSave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.Save" );
//
//	this->ProcessEvent ( pSave, &parms, NULL );
//
//}
//
//void UMaplistRecord::SetMapItemList ( class TArray< struct FMapItem > NewMaps )
//{
//	static UFunction* pSetMapItemList = 0;
//	UMaplistRecord_execSetMapItemList_Parms parms;
//
//	if ( !pSetMapItemList )
//		pSetMapItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.SetMapItemList" );
//
//	parms.NewMaps = NewMaps;
//	this->ProcessEvent ( pSetMapItemList, &parms, NULL );
//
//}
//
//void UMaplistRecord::SetMaplist ( class TArray< struct FString > NewMaps )
//{
//	static UFunction* pSetMaplist = 0;
//	UMaplistRecord_execSetMaplist_Parms parms;
//
//	if ( !pSetMaplist )
//		pSetMaplist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.SetMaplist" );
//
//	parms.NewMaps = NewMaps;
//	this->ProcessEvent ( pSetMaplist, &parms, NULL );
//
//}
//
//int UMaplistRecord::SetActiveMap ( int i )
//{
//	static UFunction* pSetActiveMap = 0;
//	UMaplistRecord_execSetActiveMap_Parms parms;
//
//	if ( !pSetActiveMap )
//		pSetActiveMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.SetActiveMap" );
//
//	parms.i = i;
//	this->ProcessEvent ( pSetActiveMap, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::SetGameType ( struct FString NewGameType )
//{
//	static UFunction* pSetGameType = 0;
//	UMaplistRecord_execSetGameType_Parms parms;
//
//	if ( !pSetGameType )
//		pSetGameType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.SetGameType" );
//
//	parms.NewGameType = NewGameType;
//	this->ProcessEvent ( pSetGameType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::SetTitle ( struct FString NewTitle )
//{
//	static UFunction* pSetTitle = 0;
//	UMaplistRecord_execSetTitle_Parms parms;
//
//	if ( !pSetTitle )
//		pSetTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.SetTitle" );
//
//	parms.NewTitle = NewTitle;
//	this->ProcessEvent ( pSetTitle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UMaplistRecord::SetCacheMaps ( class TArray< struct FMapItem > CacheMaps )
//{
//	static UFunction* pSetCacheMaps = 0;
//	UMaplistRecord_execSetCacheMaps_Parms parms;
//
//	if ( !pSetCacheMaps )
//		pSetCacheMaps = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.SetCacheMaps" );
//
//	parms.CacheMaps = CacheMaps;
//	this->ProcessEvent ( pSetCacheMaps, &parms, NULL );
//
//}
//
//void UMaplistRecord::eventCreated (  )
//{
//	static UFunction* pCreated = 0;
//	UMaplistRecord_eventCreated_Parms parms;
//
//	if ( !pCreated )
//		pCreated = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.Created" );
//
//	this->ProcessEvent ( pCreated, &parms, NULL );
//
//}
//
//bool UMaplistRecord::CompareItemsSlow ( struct FMapItem A, struct FMapItem B )
//{
//	static UFunction* pCompareItemsSlow = 0;
//	UMaplistRecord_execCompareItemsSlow_Parms parms;
//
//	if ( !pCompareItemsSlow )
//		pCompareItemsSlow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.CompareItemsSlow" );
//
//	parms.A = A;
//	parms.B = B;
//	this->ProcessEvent ( pCompareItemsSlow, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::CompareItems ( struct FMapItem A, struct FMapItem B )
//{
//	static UFunction* pCompareItems = 0;
//	UMaplistRecord_execCompareItems_Parms parms;
//
//	if ( !pCompareItems )
//		pCompareItems = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.CompareItems" );
//
//	parms.A = A;
//	parms.B = B;
//	this->ProcessEvent ( pCompareItems, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::EqualEqual_MapItemMapItem ( struct FMapItem A, struct FMapItem B )
//{
//	static UFunction* pEqualEqual_MapItemMapItem = 0;
//	UMaplistRecord_execEqualEqual_MapItemMapItem_Parms parms;
//
//	if ( !pEqualEqual_MapItemMapItem )
//		pEqualEqual_MapItemMapItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.EqualEqual_MapItemMapItem" );
//
//	parms.A = A;
//	parms.B = B;
//	this->ProcessEvent ( pEqualEqual_MapItemMapItem, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UMaplistRecord::EqualEqual_KeyValuePairKeyValuePair ( struct FKeyValuePair A, struct FKeyValuePair B )
//{
//	static UFunction* pEqualEqual_KeyValuePairKeyValuePair = 0;
//	UMaplistRecord_execEqualEqual_KeyValuePairKeyValuePair_Parms parms;
//
//	if ( !pEqualEqual_KeyValuePairKeyValuePair )
//		pEqualEqual_KeyValuePairKeyValuePair = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.MaplistRecord.EqualEqual_KeyValuePairKeyValuePair" );
//
//	parms.A = A;
//	parms.B = B;
//	this->ProcessEvent ( pEqualEqual_KeyValuePairKeyValuePair, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStreamPlaylistManager::GetCurrentTitle (  )
//{
//	static UFunction* pGetCurrentTitle = 0;
//	UStreamPlaylistManager_execGetCurrentTitle_Parms parms;
//
//	if ( !pGetCurrentTitle )
//		pGetCurrentTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.GetCurrentTitle" );
//
//	this->ProcessEvent ( pGetCurrentTitle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamPlaylistManager::Save (  )
//{
//	static UFunction* pSave = 0;
//	UStreamPlaylistManager_execSave_Parms parms;
//
//	if ( !pSave )
//		pSave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.Save" );
//
//	this->ProcessEvent ( pSave, &parms, NULL );
//
//}
//
//bool UStreamPlaylistManager::HandleDebugExec ( struct FString Command, struct FString Param )
//{
//	static UFunction* pHandleDebugExec = 0;
//	UStreamPlaylistManager_execHandleDebugExec_Parms parms;
//
//	if ( !pHandleDebugExec )
//		pHandleDebugExec = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.HandleDebugExec" );
//
//	parms.Command = Command;
//	parms.Param = Param;
//	this->ProcessEvent ( pHandleDebugExec, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UStreamPlaylist* UStreamPlaylistManager::CreatePlaylist ( struct FString PlaylistName )
//{
//	static UFunction* pCreatePlaylist = 0;
//	UStreamPlaylistManager_execCreatePlaylist_Parms parms;
//
//	if ( !pCreatePlaylist )
//		pCreatePlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.CreatePlaylist" );
//
//	parms.PlaylistName = PlaylistName;
//	this->ProcessEvent ( pCreatePlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamPlaylistManager::SetRepeatAll ( bool bEnable )
//{
//	static UFunction* pSetRepeatAll = 0;
//	UStreamPlaylistManager_execSetRepeatAll_Parms parms;
//
//	if ( !pSetRepeatAll )
//		pSetRepeatAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.SetRepeatAll" );
//
//	parms.bEnable = bEnable;
//	this->ProcessEvent ( pSetRepeatAll, &parms, NULL );
//
//}
//
//void UStreamPlaylistManager::SetRepeat ( bool bEnable )
//{
//	static UFunction* pSetRepeat = 0;
//	UStreamPlaylistManager_execSetRepeat_Parms parms;
//
//	if ( !pSetRepeat )
//		pSetRepeat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.SetRepeat" );
//
//	parms.bEnable = bEnable;
//	this->ProcessEvent ( pSetRepeat, &parms, NULL );
//
//}
//
//void UStreamPlaylistManager::SetShuffleAll ( bool bEnable )
//{
//	static UFunction* pSetShuffleAll = 0;
//	UStreamPlaylistManager_execSetShuffleAll_Parms parms;
//
//	if ( !pSetShuffleAll )
//		pSetShuffleAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.SetShuffleAll" );
//
//	parms.bEnable = bEnable;
//	this->ProcessEvent ( pSetShuffleAll, &parms, NULL );
//
//}
//
//void UStreamPlaylistManager::SetShuffle ( bool bEnable )
//{
//	static UFunction* pSetShuffle = 0;
//	UStreamPlaylistManager_execSetShuffle_Parms parms;
//
//	if ( !pSetShuffle )
//		pSetShuffle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.SetShuffle" );
//
//	parms.bEnable = bEnable;
//	this->ProcessEvent ( pSetShuffle, &parms, NULL );
//
//}
//
//bool UStreamPlaylistManager::GetRepeatAll (  )
//{
//	static UFunction* pGetRepeatAll = 0;
//	UStreamPlaylistManager_execGetRepeatAll_Parms parms;
//
//	if ( !pGetRepeatAll )
//		pGetRepeatAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.GetRepeatAll" );
//
//	this->ProcessEvent ( pGetRepeatAll, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::GetRepeat (  )
//{
//	static UFunction* pGetRepeat = 0;
//	UStreamPlaylistManager_execGetRepeat_Parms parms;
//
//	if ( !pGetRepeat )
//		pGetRepeat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.GetRepeat" );
//
//	this->ProcessEvent ( pGetRepeat, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::GetShuffleAll (  )
//{
//	static UFunction* pGetShuffleAll = 0;
//	UStreamPlaylistManager_execGetShuffleAll_Parms parms;
//
//	if ( !pGetShuffleAll )
//		pGetShuffleAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.GetShuffleAll" );
//
//	this->ProcessEvent ( pGetShuffleAll, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::GetShuffle (  )
//{
//	static UFunction* pGetShuffle = 0;
//	UStreamPlaylistManager_execGetShuffle_Parms parms;
//
//	if ( !pGetShuffle )
//		pGetShuffle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.GetShuffle" );
//
//	this->ProcessEvent ( pGetShuffle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::ValidName ( struct FString Test )
//{
//	static UFunction* pValidName = 0;
//	UStreamPlaylistManager_execValidName_Parms parms;
//
//	if ( !pValidName )
//		pValidName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.ValidName" );
//
//	parms.Test = Test;
//	this->ProcessEvent ( pValidName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylistManager::FindPlaylistIndex ( class UStreamPlaylist* Playlist )
//{
//	static UFunction* pFindPlaylistIndex = 0;
//	UStreamPlaylistManager_execFindPlaylistIndex_Parms parms;
//
//	if ( !pFindPlaylistIndex )
//		pFindPlaylistIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.FindPlaylistIndex" );
//
//	parms.Playlist = Playlist;
//	this->ProcessEvent ( pFindPlaylistIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylistManager::FindNameIndex ( struct FString PlaylistName )
//{
//	static UFunction* pFindNameIndex = 0;
//	UStreamPlaylistManager_execFindNameIndex_Parms parms;
//
//	if ( !pFindNameIndex )
//		pFindNameIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.FindNameIndex" );
//
//	parms.PlaylistName = PlaylistName;
//	this->ProcessEvent ( pFindNameIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::ValidIndex ( int Index )
//{
//	static UFunction* pValidIndex = 0;
//	UStreamPlaylistManager_execValidIndex_Parms parms;
//
//	if ( !pValidIndex )
//		pValidIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.ValidIndex" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pValidIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylistManager::GetPlaylistCount (  )
//{
//	static UFunction* pGetPlaylistCount = 0;
//	UStreamPlaylistManager_execGetPlaylistCount_Parms parms;
//
//	if ( !pGetPlaylistCount )
//		pGetPlaylistCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.GetPlaylistCount" );
//
//	this->ProcessEvent ( pGetPlaylistCount, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UStreamPlaylist* UStreamPlaylistManager::GetPlaylistAt ( int idx )
//{
//	static UFunction* pGetPlaylistAt = 0;
//	UStreamPlaylistManager_execGetPlaylistAt_Parms parms;
//
//	if ( !pGetPlaylistAt )
//		pGetPlaylistAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.GetPlaylistAt" );
//
//	parms.idx = idx;
//	this->ProcessEvent ( pGetPlaylistAt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UStreamPlaylist* UStreamPlaylistManager::GetRandomPlaylist (  )
//{
//	static UFunction* pGetRandomPlaylist = 0;
//	UStreamPlaylistManager_execGetRandomPlaylist_Parms parms;
//
//	if ( !pGetRandomPlaylist )
//		pGetRandomPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.GetRandomPlaylist" );
//
//	this->ProcessEvent ( pGetRandomPlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UStreamPlaylist* UStreamPlaylistManager::GetCurrentPlaylist (  )
//{
//	static UFunction* pGetCurrentPlaylist = 0;
//	UStreamPlaylistManager_execGetCurrentPlaylist_Parms parms;
//
//	if ( !pGetCurrentPlaylist )
//		pGetCurrentPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.GetCurrentPlaylist" );
//
//	this->ProcessEvent ( pGetCurrentPlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylistManager::GetCurrentIndex (  )
//{
//	static UFunction* pGetCurrentIndex = 0;
//	UStreamPlaylistManager_execGetCurrentIndex_Parms parms;
//
//	if ( !pGetCurrentIndex )
//		pGetCurrentIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.GetCurrentIndex" );
//
//	this->ProcessEvent ( pGetCurrentIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStreamPlaylistManager::GetRandomSong (  )
//{
//	static UFunction* pGetRandomSong = 0;
//	UStreamPlaylistManager_execGetRandomSong_Parms parms;
//
//	if ( !pGetRandomSong )
//		pGetRandomSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.GetRandomSong" );
//
//	this->ProcessEvent ( pGetRandomSong, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStreamPlaylistManager::PrevSong ( bool bForce )
//{
//	static UFunction* pPrevSong = 0;
//	UStreamPlaylistManager_execPrevSong_Parms parms;
//
//	if ( !pPrevSong )
//		pPrevSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.PrevSong" );
//
//	parms.bForce = bForce;
//	this->ProcessEvent ( pPrevSong, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStreamPlaylistManager::NextSong ( bool bForce )
//{
//	static UFunction* pNextSong = 0;
//	UStreamPlaylistManager_execNextSong_Parms parms;
//
//	if ( !pNextSong )
//		pNextSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.NextSong" );
//
//	parms.bForce = bForce;
//	this->ProcessEvent ( pNextSong, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::ImportPlaylist ( int PlaylistIndex, int InsertPosition, struct FString Path )
//{
//	static UFunction* pImportPlaylist = 0;
//	UStreamPlaylistManager_execImportPlaylist_Parms parms;
//
//	if ( !pImportPlaylist )
//		pImportPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.ImportPlaylist" );
//
//	parms.PlaylistIndex = PlaylistIndex;
//	parms.InsertPosition = InsertPosition;
//	parms.Path = Path;
//	this->ProcessEvent ( pImportPlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::AddDirectory ( int PlaylistIndex, int InsertPosition, struct FString Path, bool bRecurseDirectories )
//{
//	static UFunction* pAddDirectory = 0;
//	UStreamPlaylistManager_execAddDirectory_Parms parms;
//
//	if ( !pAddDirectory )
//		pAddDirectory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.AddDirectory" );
//
//	parms.PlaylistIndex = PlaylistIndex;
//	parms.InsertPosition = InsertPosition;
//	parms.Path = Path;
//	parms.bRecurseDirectories = bRecurseDirectories;
//	this->ProcessEvent ( pAddDirectory, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//unsigned char UStreamPlaylistManager::GetPlaylistType ( struct FString Path )
//{
//	static UFunction* pGetPlaylistType = 0;
//	UStreamPlaylistManager_execGetPlaylistType_Parms parms;
//
//	if ( !pGetPlaylistType )
//		pGetPlaylistType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.GetPlaylistType" );
//
//	parms.Path = Path;
//	this->ProcessEvent ( pGetPlaylistType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::ClearCurrentPlaylist (  )
//{
//	static UFunction* pClearCurrentPlaylist = 0;
//	UStreamPlaylistManager_execClearCurrentPlaylist_Parms parms;
//
//	if ( !pClearCurrentPlaylist )
//		pClearCurrentPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.ClearCurrentPlaylist" );
//
//	this->ProcessEvent ( pClearCurrentPlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::RemoveFromCurrentPlaylist ( struct FString Path, bool bSkipNotification )
//{
//	static UFunction* pRemoveFromCurrentPlaylist = 0;
//	UStreamPlaylistManager_execRemoveFromCurrentPlaylist_Parms parms;
//
//	if ( !pRemoveFromCurrentPlaylist )
//		pRemoveFromCurrentPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.RemoveFromCurrentPlaylist" );
//
//	parms.Path = Path;
//	parms.bSkipNotification = bSkipNotification;
//	this->ProcessEvent ( pRemoveFromCurrentPlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::InsertInPlaylist ( int PlaylistIndex, int InsertPosition, struct FString Path, bool bSkipNotification )
//{
//	static UFunction* pInsertInPlaylist = 0;
//	UStreamPlaylistManager_execInsertInPlaylist_Parms parms;
//
//	if ( !pInsertInPlaylist )
//		pInsertInPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.InsertInPlaylist" );
//
//	parms.PlaylistIndex = PlaylistIndex;
//	parms.InsertPosition = InsertPosition;
//	parms.Path = Path;
//	parms.bSkipNotification = bSkipNotification;
//	this->ProcessEvent ( pInsertInPlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::AddToPlaylist ( int PlaylistIndex, struct FString Path, bool bSkipNotification )
//{
//	static UFunction* pAddToPlaylist = 0;
//	UStreamPlaylistManager_execAddToPlaylist_Parms parms;
//
//	if ( !pAddToPlaylist )
//		pAddToPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.AddToPlaylist" );
//
//	parms.PlaylistIndex = PlaylistIndex;
//	parms.Path = Path;
//	parms.bSkipNotification = bSkipNotification;
//	this->ProcessEvent ( pAddToPlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::RenamePlaylist ( int Index, struct FString* NewName )
//{
//	static UFunction* pRenamePlaylist = 0;
//	UStreamPlaylistManager_execRenamePlaylist_Parms parms;
//
//	if ( !pRenamePlaylist )
//		pRenamePlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.RenamePlaylist" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pRenamePlaylist, &parms, NULL );
//
//	*NewName = parms.NewName;
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::RemovePlaylistAt ( int Index )
//{
//	static UFunction* pRemovePlaylistAt = 0;
//	UStreamPlaylistManager_execRemovePlaylistAt_Parms parms;
//
//	if ( !pRemovePlaylistAt )
//		pRemovePlaylistAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.RemovePlaylistAt" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pRemovePlaylistAt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::RemovePlaylist ( struct FString PlaylistName )
//{
//	static UFunction* pRemovePlaylist = 0;
//	UStreamPlaylistManager_execRemovePlaylist_Parms parms;
//
//	if ( !pRemovePlaylist )
//		pRemovePlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.RemovePlaylist" );
//
//	parms.PlaylistName = PlaylistName;
//	this->ProcessEvent ( pRemovePlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylistManager::AppendPlaylist ( class UStreamPlaylist* Playlist )
//{
//	static UFunction* pAppendPlaylist = 0;
//	UStreamPlaylistManager_execAppendPlaylist_Parms parms;
//
//	if ( !pAppendPlaylist )
//		pAppendPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.AppendPlaylist" );
//
//	parms.Playlist = Playlist;
//	this->ProcessEvent ( pAppendPlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylistManager::AddPlaylist ( struct FString* NewPlaylistName )
//{
//	static UFunction* pAddPlaylist = 0;
//	UStreamPlaylistManager_execAddPlaylist_Parms parms;
//
//	if ( !pAddPlaylist )
//		pAddPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.AddPlaylist" );
//
//	parms.NewPlaylistName = *NewPlaylistName;
//	this->ProcessEvent ( pAddPlaylist, &parms, NULL );
//
//	*NewPlaylistName = parms.NewPlaylistName;
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylistManager::ActivatePlaylist ( int ListIndex, bool bNoFail )
//{
//	static UFunction* pActivatePlaylist = 0;
//	UStreamPlaylistManager_execActivatePlaylist_Parms parms;
//
//	if ( !pActivatePlaylist )
//		pActivatePlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.ActivatePlaylist" );
//
//	parms.ListIndex = ListIndex;
//	parms.bNoFail = bNoFail;
//	this->ProcessEvent ( pActivatePlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UStreamPlaylist* UStreamPlaylistManager::CreateDefaultPlaylist (  )
//{
//	static UFunction* pCreateDefaultPlaylist = 0;
//	UStreamPlaylistManager_execCreateDefaultPlaylist_Parms parms;
//
//	if ( !pCreateDefaultPlaylist )
//		pCreateDefaultPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.CreateDefaultPlaylist" );
//
//	this->ProcessEvent ( pCreateDefaultPlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamPlaylistManager::InitializeParsers (  )
//{
//	static UFunction* pInitializeParsers = 0;
//	UStreamPlaylistManager_execInitializeParsers_Parms parms;
//
//	if ( !pInitializeParsers )
//		pInitializeParsers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.InitializeParsers" );
//
//	this->ProcessEvent ( pInitializeParsers, &parms, NULL );
//
//}
//
//void UStreamPlaylistManager::InitializePlaylists (  )
//{
//	static UFunction* pInitializePlaylists = 0;
//	UStreamPlaylistManager_execInitializePlaylists_Parms parms;
//
//	if ( !pInitializePlaylists )
//		pInitializePlaylists = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.InitializePlaylists" );
//
//	this->ProcessEvent ( pInitializePlaylists, &parms, NULL );
//
//}
//
//void UStreamPlaylistManager::Initialize ( class UStreamInterface* InFileManager )
//{
//	static UFunction* pInitialize = 0;
//	UStreamPlaylistManager_execInitialize_Parms parms;
//
//	if ( !pInitialize )
//		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.Initialize" );
//
//	parms.InFileManager = InFileManager;
//	this->ProcessEvent ( pInitialize, &parms, NULL );
//
//}
//
//void UStreamPlaylistManager::ChangedActivePlaylist ( class UStreamPlaylist* NewPlaylist )
//{
//	static UFunction* pChangedActivePlaylist = 0;
//	UStreamPlaylistManager_execChangedActivePlaylist_Parms parms;
//
//	if ( !pChangedActivePlaylist )
//		pChangedActivePlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylistManager.ChangedActivePlaylist" );
//
//	parms.NewPlaylist = NewPlaylist;
//	this->ProcessEvent ( pChangedActivePlaylist, &parms, NULL );
//
//}
//
//void UStreamPlaylist::Save (  )
//{
//	static UFunction* pSave = 0;
//	UStreamPlaylist_execSave_Parms parms;
//
//	if ( !pSave )
//		pSave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.Save" );
//
//	this->ProcessEvent ( pSave, &parms, NULL );
//
//}
//
//bool UStreamPlaylist::HandleDebugExec ( struct FString Command, struct FString Param )
//{
//	static UFunction* pHandleDebugExec = 0;
//	UStreamPlaylist_execHandleDebugExec_Parms parms;
//
//	if ( !pHandleDebugExec )
//		pHandleDebugExec = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.HandleDebugExec" );
//
//	parms.Command = Command;
//	parms.Param = Param;
//	this->ProcessEvent ( pHandleDebugExec, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamPlaylist::DebugInfo (  )
//{
//	static UFunction* pDebugInfo = 0;
//	UStreamPlaylist_execDebugInfo_Parms parms;
//
//	if ( !pDebugInfo )
//		pDebugInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.DebugInfo" );
//
//	this->ProcessEvent ( pDebugInfo, &parms, NULL );
//
//}
//
//bool UStreamPlaylist::ValidStreamIndex ( int Index )
//{
//	static UFunction* pValidStreamIndex = 0;
//	UStreamPlaylist_execValidStreamIndex_Parms parms;
//
//	if ( !pValidStreamIndex )
//		pValidStreamIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.ValidStreamIndex" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pValidStreamIndex, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylist::ValidStreamName ( struct FString fileName )
//{
//	static UFunction* pValidStreamName = 0;
//	UStreamPlaylist_execValidStreamName_Parms parms;
//
//	if ( !pValidStreamName )
//		pValidStreamName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.ValidStreamName" );
//
//	parms.fileName = fileName;
//	this->ProcessEvent ( pValidStreamName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylist::FindIndexByFileName ( struct FString Test )
//{
//	static UFunction* pFindIndexByFileName = 0;
//	UStreamPlaylist_execFindIndexByFileName_Parms parms;
//
//	if ( !pFindIndexByFileName )
//		pFindIndexByFileName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.FindIndexByFileName" );
//
//	parms.Test = Test;
//	this->ProcessEvent ( pFindIndexByFileName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylist::FindIndexByFullName ( struct FString Test )
//{
//	static UFunction* pFindIndexByFullName = 0;
//	UStreamPlaylist_execFindIndexByFullName_Parms parms;
//
//	if ( !pFindIndexByFullName )
//		pFindIndexByFullName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.FindIndexByFullName" );
//
//	parms.Test = Test;
//	this->ProcessEvent ( pFindIndexByFullName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylist::FindIndexByPath ( struct FString Test )
//{
//	static UFunction* pFindIndexByPath = 0;
//	UStreamPlaylist_execFindIndexByPath_Parms parms;
//
//	if ( !pFindIndexByPath )
//		pFindIndexByPath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.FindIndexByPath" );
//
//	parms.Test = Test;
//	this->ProcessEvent ( pFindIndexByPath, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylist::FindIndexByName ( struct FString Test )
//{
//	static UFunction* pFindIndexByName = 0;
//	UStreamPlaylist_execFindIndexByName_Parms parms;
//
//	if ( !pFindIndexByName )
//		pFindIndexByName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.FindIndexByName" );
//
//	parms.Test = Test;
//	this->ProcessEvent ( pFindIndexByName, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylist::GetPlaylistLength (  )
//{
//	static UFunction* pGetPlaylistLength = 0;
//	UStreamPlaylist_execGetPlaylistLength_Parms parms;
//
//	if ( !pGetPlaylistLength )
//		pGetPlaylistLength = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.GetPlaylistLength" );
//
//	this->ProcessEvent ( pGetPlaylistLength, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UStream* UStreamPlaylist::GetStreamAt ( int Index )
//{
//	static UFunction* pGetStreamAt = 0;
//	UStreamPlaylist_execGetStreamAt_Parms parms;
//
//	if ( !pGetStreamAt )
//		pGetStreamAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.GetStreamAt" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pGetStreamAt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UStream* UStreamPlaylist::GetStream ( struct FString StreamName )
//{
//	static UFunction* pGetStream = 0;
//	UStreamPlaylist_execGetStream_Parms parms;
//
//	if ( !pGetStream )
//		pGetStream = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.GetStream" );
//
//	parms.StreamName = StreamName;
//	this->ProcessEvent ( pGetStream, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UStream* UStreamPlaylist::GetCurrentStream (  )
//{
//	static UFunction* pGetCurrentStream = 0;
//	UStreamPlaylist_execGetCurrentStream_Parms parms;
//
//	if ( !pGetCurrentStream )
//		pGetCurrentStream = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.GetCurrentStream" );
//
//	this->ProcessEvent ( pGetCurrentStream, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamPlaylist::GetSongs ( class TArray< class UStream* >* SongArray )
//{
//	static UFunction* pGetSongs = 0;
//	UStreamPlaylist_execGetSongs_Parms parms;
//
//	if ( !pGetSongs )
//		pGetSongs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.GetSongs" );
//
//	parms.SongArray = *SongArray;
//	this->ProcessEvent ( pGetSongs, &parms, NULL );
//
//	*SongArray = parms.SongArray;
//}
//
//int UStreamPlaylist::GetCurrent (  )
//{
//	static UFunction* pGetCurrent = 0;
//	UStreamPlaylist_execGetCurrent_Parms parms;
//
//	if ( !pGetCurrent )
//		pGetCurrent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.GetCurrent" );
//
//	this->ProcessEvent ( pGetCurrent, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStreamPlaylist::GetTitle (  )
//{
//	static UFunction* pGetTitle = 0;
//	UStreamPlaylist_execGetTitle_Parms parms;
//
//	if ( !pGetTitle )
//		pGetTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.GetTitle" );
//
//	this->ProcessEvent ( pGetTitle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylist::IsInitialized (  )
//{
//	static UFunction* pIsInitialized = 0;
//	UStreamPlaylist_execIsInitialized_Parms parms;
//
//	if ( !pIsInitialized )
//		pIsInitialized = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.IsInitialized" );
//
//	this->ProcessEvent ( pIsInitialized, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylist::SetSongs ( class TArray< class UStream* > NewSongs )
//{
//	static UFunction* pSetSongs = 0;
//	UStreamPlaylist_execSetSongs_Parms parms;
//
//	if ( !pSetSongs )
//		pSetSongs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.SetSongs" );
//
//	parms.NewSongs = NewSongs;
//	this->ProcessEvent ( pSetSongs, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylist::SetCurrent ( int Index )
//{
//	static UFunction* pSetCurrent = 0;
//	UStreamPlaylist_execSetCurrent_Parms parms;
//
//	if ( !pSetCurrent )
//		pSetCurrent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.SetCurrent" );
//
//	parms.Index = Index;
//	this->ProcessEvent ( pSetCurrent, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylist::SetTitle ( struct FString NewTitle )
//{
//	static UFunction* pSetTitle = 0;
//	UStreamPlaylist_execSetTitle_Parms parms;
//
//	if ( !pSetTitle )
//		pSetTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.SetTitle" );
//
//	parms.NewTitle = NewTitle;
//	this->ProcessEvent ( pSetTitle, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamPlaylist::ResetRandomPool (  )
//{
//	static UFunction* pResetRandomPool = 0;
//	UStreamPlaylist_execResetRandomPool_Parms parms;
//
//	if ( !pResetRandomPool )
//		pResetRandomPool = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.ResetRandomPool" );
//
//	this->ProcessEvent ( pResetRandomPool, &parms, NULL );
//
//}
//
//struct FString UStreamPlaylist::GetRandomSong (  )
//{
//	static UFunction* pGetRandomSong = 0;
//	UStreamPlaylist_execGetRandomSong_Parms parms;
//
//	if ( !pGetRandomSong )
//		pGetRandomSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.GetRandomSong" );
//
//	this->ProcessEvent ( pGetRandomSong, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylist::ClearPlaylist (  )
//{
//	static UFunction* pClearPlaylist = 0;
//	UStreamPlaylist_execClearPlaylist_Parms parms;
//
//	if ( !pClearPlaylist )
//		pClearPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.ClearPlaylist" );
//
//	this->ProcessEvent ( pClearPlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamPlaylist::ReplaceWith ( class UStreamPlaylist* Other )
//{
//	static UFunction* pReplaceWith = 0;
//	UStreamPlaylist_execReplaceWith_Parms parms;
//
//	if ( !pReplaceWith )
//		pReplaceWith = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.ReplaceWith" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pReplaceWith, &parms, NULL );
//
//}
//
//struct FString UStreamPlaylist::PrevSong ( bool bMayRepeat )
//{
//	static UFunction* pPrevSong = 0;
//	UStreamPlaylist_execPrevSong_Parms parms;
//
//	if ( !pPrevSong )
//		pPrevSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.PrevSong" );
//
//	parms.bMayRepeat = bMayRepeat;
//	this->ProcessEvent ( pPrevSong, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UStreamPlaylist::NextSong ( bool bMayRepeat )
//{
//	static UFunction* pNextSong = 0;
//	UStreamPlaylist_execNextSong_Parms parms;
//
//	if ( !pNextSong )
//		pNextSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.NextSong" );
//
//	parms.bMayRepeat = bMayRepeat;
//	this->ProcessEvent ( pNextSong, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylist::RemoveSongAt ( int idx, bool bSkipNotification )
//{
//	static UFunction* pRemoveSongAt = 0;
//	UStreamPlaylist_execRemoveSongAt_Parms parms;
//
//	if ( !pRemoveSongAt )
//		pRemoveSongAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.RemoveSongAt" );
//
//	parms.idx = idx;
//	parms.bSkipNotification = bSkipNotification;
//	this->ProcessEvent ( pRemoveSongAt, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylist::RemoveSong ( struct FString SongFileName, bool bSkipNotification )
//{
//	static UFunction* pRemoveSong = 0;
//	UStreamPlaylist_execRemoveSong_Parms parms;
//
//	if ( !pRemoveSong )
//		pRemoveSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.RemoveSong" );
//
//	parms.SongFileName = SongFileName;
//	parms.bSkipNotification = bSkipNotification;
//	this->ProcessEvent ( pRemoveSong, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylist::InsertSong ( int idx, struct FString Path, bool bSkipNotification )
//{
//	static UFunction* pInsertSong = 0;
//	UStreamPlaylist_execInsertSong_Parms parms;
//
//	if ( !pInsertSong )
//		pInsertSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.InsertSong" );
//
//	parms.idx = idx;
//	parms.Path = Path;
//	parms.bSkipNotification = bSkipNotification;
//	this->ProcessEvent ( pInsertSong, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylist::AddStream ( int Index, class UStream* NewStream, bool bSkipNotification )
//{
//	static UFunction* pAddStream = 0;
//	UStreamPlaylist_execAddStream_Parms parms;
//
//	if ( !pAddStream )
//		pAddStream = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.AddStream" );
//
//	parms.Index = Index;
//	parms.NewStream = NewStream;
//	parms.bSkipNotification = bSkipNotification;
//	this->ProcessEvent ( pAddStream, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//int UStreamPlaylist::AddSong ( struct FString SongFileName, bool bSkipNotification )
//{
//	static UFunction* pAddSong = 0;
//	UStreamPlaylist_execAddSong_Parms parms;
//
//	if ( !pAddSong )
//		pAddSong = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.AddSong" );
//
//	parms.SongFileName = SongFileName;
//	parms.bSkipNotification = bSkipNotification;
//	this->ProcessEvent ( pAddSong, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class UStream* UStreamPlaylist::CreateStream ( struct FString fileName )
//{
//	static UFunction* pCreateStream = 0;
//	UStreamPlaylist_execCreateStream_Parms parms;
//
//	if ( !pCreateStream )
//		pCreateStream = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.CreateStream" );
//
//	parms.fileName = fileName;
//	this->ProcessEvent ( pCreateStream, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylist::LoadPlaylist (  )
//{
//	static UFunction* pLoadPlaylist = 0;
//	UStreamPlaylist_execLoadPlaylist_Parms parms;
//
//	if ( !pLoadPlaylist )
//		pLoadPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.LoadPlaylist" );
//
//	this->ProcessEvent ( pLoadPlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool UStreamPlaylist::InitializePlaylist ( class UStreamInterface* InManager )
//{
//	static UFunction* pInitializePlaylist = 0;
//	UStreamPlaylist_execInitializePlaylist_Parms parms;
//
//	if ( !pInitializePlaylist )
//		pInitializePlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.InitializePlaylist" );
//
//	parms.InManager = InManager;
//	this->ProcessEvent ( pInitializePlaylist, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UStreamPlaylist::OnPlaylistChanged (  )
//{
//	static UFunction* pOnPlaylistChanged = 0;
//	UStreamPlaylist_execOnPlaylistChanged_Parms parms;
//
//	if ( !pOnPlaylistChanged )
//		pOnPlaylistChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.StreamPlaylist.OnPlaylistChanged" );
//
//	this->ProcessEvent ( pOnPlaylistChanged, &parms, NULL );
//
//}
//
//struct FString UPlaylistParserBase::HtmlDecode ( struct FString Src )
//{
//	static UFunction* pHtmlDecode = 0;
//	UPlaylistParserBase_execHtmlDecode_Parms parms;
//
//	if ( !pHtmlDecode )
//		pHtmlDecode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlaylistParserBase.HtmlDecode" );
//
//	parms.Src = Src;
//	this->ProcessEvent ( pHtmlDecode, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//struct FString UPlaylistParserBase::GetTagged ( struct FString* Text )
//{
//	static UFunction* pGetTagged = 0;
//	UPlaylistParserBase_execGetTagged_Parms parms;
//
//	if ( !pGetTagged )
//		pGetTagged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlaylistParserBase.GetTagged" );
//
//	parms.Text = *Text;
//	this->ProcessEvent ( pGetTagged, &parms, NULL );
//
//	*Text = parms.Text;
//	return parms.ReturnValue;
//}
//
//struct FString UPlaylistParserBase::GetValue ( struct FString KeyValuePair, bool bAllowSpaces )
//{
//	static UFunction* pGetValue = 0;
//	UPlaylistParserBase_execGetValue_Parms parms;
//
//	if ( !pGetValue )
//		pGetValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlaylistParserBase.GetValue" );
//
//	parms.KeyValuePair = KeyValuePair;
//	parms.bAllowSpaces = bAllowSpaces;
//	this->ProcessEvent ( pGetValue, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UPlaylistParserBase::ParseLines (  )
//{
//	static UFunction* pParseLines = 0;
//	UPlaylistParserBase_execParseLines_Parms parms;
//
//	if ( !pParseLines )
//		pParseLines = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlaylistParserBase.ParseLines" );
//
//	this->ProcessEvent ( pParseLines, &parms, NULL );
//
//}
//
//void UPlaylistParserBase::ImportedPlaylist ( int PlaylistIndex, int InsertPosition )
//{
//	static UFunction* pImportedPlaylist = 0;
//	UPlaylistParserBase_execImportedPlaylist_Parms parms;
//
//	if ( !pImportedPlaylist )
//		pImportedPlaylist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlaylistParserBase.ImportedPlaylist" );
//
//	parms.PlaylistIndex = PlaylistIndex;
//	parms.InsertPosition = InsertPosition;
//	this->ProcessEvent ( pImportedPlaylist, &parms, NULL );
//
//}
//
//bool UPlaylistParserBase::Import ( int PlaylistIndex, int InsertPosition, struct FString Path )
//{
//	static UFunction* pImport = 0;
//	UPlaylistParserBase_execImport_Parms parms;
//
//	if ( !pImport )
//		pImport = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlaylistParserBase.Import" );
//
//	parms.PlaylistIndex = PlaylistIndex;
//	parms.InsertPosition = InsertPosition;
//	parms.Path = Path;
//	this->ProcessEvent ( pImport, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UPlaylistParserBase::SetType ( unsigned char InType )
//{
//	static UFunction* pSetType = 0;
//	UPlaylistParserBase_execSetType_Parms parms;
//
//	if ( !pSetType )
//		pSetType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlaylistParserBase.SetType" );
//
//	parms.InType = InType;
//	this->ProcessEvent ( pSetType, &parms, NULL );
//
//}
//
//unsigned char UPlaylistParserBase::GetType (  )
//{
//	static UFunction* pGetType = 0;
//	UPlaylistParserBase_execGetType_Parms parms;
//
//	if ( !pGetType )
//		pGetType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PlaylistParserBase.GetType" );
//
//	this->ProcessEvent ( pGetType, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AZoneTrigger::UnTouch ( class AActor* Other )
//{
//	static UFunction* pUnTouch = 0;
//	AZoneTrigger_execUnTouch_Parms parms;
//
//	if ( !pUnTouch )
//		pUnTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ZoneTrigger.UnTouch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pUnTouch, &parms, NULL );
//
//}
//
//void AZoneTrigger::Touch ( class AActor* Other )
//{
//	static UFunction* pTouch = 0;
//	AZoneTrigger_execTouch_Parms parms;
//
//	if ( !pTouch )
//		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ZoneTrigger.Touch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTouch, &parms, NULL );
//
//}
//
//void AwMessage_NoWeapon::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pClientReceive = 0;
//	AwMessage_NoWeapon_execClientReceive_Parms parms;
//
//	if ( !pClientReceive )
//		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_NoWeapon.ClientReceive" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pClientReceive, &parms, NULL );
//
//}
//
//struct FString AwMessage_NoWeapon::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGetString = 0;
//	AwMessage_NoWeapon_execGetString_Parms parms;
//
//	if ( !pGetString )
//		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_NoWeapon.GetString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGetString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AEffect_ShadowController::SunLightDirectionUpdate ( struct FVector direction )
//{
//	static UFunction* pSunLightDirectionUpdate = 0;
//	AEffect_ShadowController_execSunLightDirectionUpdate_Parms parms;
//
//	if ( !pSunLightDirectionUpdate )
//		pSunLightDirectionUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowController.SunLightDirectionUpdate" );
//
//	parms.direction = direction;
//	this->ProcessEvent ( pSunLightDirectionUpdate, &parms, NULL );
//
//}
//
//void AEffect_ShadowController::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AEffect_ShadowController_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowController.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//class AEffect_ShadowProjector* AEffect_ShadowController::SpawnShadow ( struct FRotator LightRotation )
//{
//	static UFunction* pSpawnShadow = 0;
//	AEffect_ShadowController_execSpawnShadow_Parms parms;
//
//	if ( !pSpawnShadow )
//		pSpawnShadow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowController.SpawnShadow" );
//
//	parms.LightRotation = LightRotation;
//	this->ProcessEvent ( pSpawnShadow, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AEffect_ShadowController::UpdateShadows ( float dt )
//{
//	static UFunction* pUpdateShadows = 0;
//	AEffect_ShadowController_execUpdateShadows_Parms parms;
//
//	if ( !pUpdateShadows )
//		pUpdateShadows = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowController.UpdateShadows" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pUpdateShadows, &parms, NULL );
//
//}
//
//void AEffect_ShadowController::Tick ( float dt )
//{
//	static UFunction* pTick = 0;
//	AEffect_ShadowController_execTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowController.Tick" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//bool AEffect_ShadowController::IsVisible ( struct FVector loc )
//{
//	static UFunction* pIsVisible = 0;
//	AEffect_ShadowController_execIsVisible_Parms parms;
//
//	if ( !pIsVisible )
//		pIsVisible = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowController.IsVisible" );
//
//	parms.loc = loc;
//	this->ProcessEvent ( pIsVisible, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float AEffect_ShadowController::LightPriority ( float Brightness, float Radius, float Distance )
//{
//	static UFunction* pLightPriority = 0;
//	AEffect_ShadowController_execLightPriority_Parms parms;
//
//	if ( !pLightPriority )
//		pLightPriority = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowController.LightPriority" );
//
//	parms.Brightness = Brightness;
//	parms.Radius = Radius;
//	parms.Distance = Distance;
//	this->ProcessEvent ( pLightPriority, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AEffect_ShadowController::FillLights (  )
//{
//	static UFunction* pFillLights = 0;
//	AEffect_ShadowController_execFillLights_Parms parms;
//
//	if ( !pFillLights )
//		pFillLights = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowController.FillLights" );
//
//	this->ProcessEvent ( pFillLights, &parms, NULL );
//
//}
//
//void AEffect_ShadowController::Timer (  )
//{
//	static UFunction* pTimer = 0;
//	AEffect_ShadowController_execTimer_Parms parms;
//
//	if ( !pTimer )
//		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowController.Timer" );
//
//	this->ProcessEvent ( pTimer, &parms, NULL );
//
//}
//
//void AEffect_ShadowController::Initialize (  )
//{
//	static UFunction* pInitialize = 0;
//	AEffect_ShadowController_execInitialize_Parms parms;
//
//	if ( !pInitialize )
//		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowController.Initialize" );
//
//	this->ProcessEvent ( pInitialize, &parms, NULL );
//
//}
//
//void AEffect_ShadowProjector::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AEffect_ShadowProjector_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowProjector.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AEffect_ShadowProjector::UpdateShadow ( float dt, int LN, class AEffect_ShadowController* ShadowController )
//{
//	static UFunction* pUpdateShadow = 0;
//	AEffect_ShadowProjector_execUpdateShadow_Parms parms;
//
//	if ( !pUpdateShadow )
//		pUpdateShadow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowProjector.UpdateShadow" );
//
//	parms.dt = dt;
//	parms.LN = LN;
//	parms.ShadowController = ShadowController;
//	this->ProcessEvent ( pUpdateShadow, &parms, NULL );
//
//}
//
//void AEffect_ShadowProjector::InitializeFor ( class AEffect_ShadowController* ShadowController )
//{
//	static UFunction* pInitializeFor = 0;
//	AEffect_ShadowProjector_execInitializeFor_Parms parms;
//
//	if ( !pInitializeFor )
//		pInitializeFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowProjector.InitializeFor" );
//
//	parms.ShadowController = ShadowController;
//	this->ProcessEvent ( pInitializeFor, &parms, NULL );
//
//}
//
//void AEffect_ShadowProjector::DisableShadow (  )
//{
//	static UFunction* pDisableShadow = 0;
//	AEffect_ShadowProjector_execDisableShadow_Parms parms;
//
//	if ( !pDisableShadow )
//		pDisableShadow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowProjector.DisableShadow" );
//
//	this->ProcessEvent ( pDisableShadow, &parms, NULL );
//
//}
//
//void AEffect_ShadowProjector::Tick ( float dt )
//{
//	static UFunction* pTick = 0;
//	AEffect_ShadowProjector_execTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowProjector.Tick" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void AEffect_ShadowProjector::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AEffect_ShadowProjector_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.Effect_ShadowProjector.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AwRocket::wLoadOut ( int iID )
//{
//	static UFunction* pwLoadOut = 0;
//	AwRocket_execwLoadOut_Parms parms;
//
//	if ( !pwLoadOut )
//		pwLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wRocket.wLoadOut" );
//
//	parms.iID = iID;
//	this->ProcessEvent ( pwLoadOut, &parms, NULL );
//
//}
//
//void AwRocket::Tick ( float DeltaTime )
//{
//	static UFunction* pTick = 0;
//	AwRocket_execTick_Parms parms;
//
//	if ( !pTick )
//		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wRocket.Tick" );
//
//	parms.DeltaTime = DeltaTime;
//	this->ProcessEvent ( pTick, &parms, NULL );
//
//}
//
//void AwRocket::Explode ( struct FVector HitLocation, struct FVector HitNormal )
//{
//	static UFunction* pExplode = 0;
//	AwRocket_execExplode_Parms parms;
//
//	if ( !pExplode )
//		pExplode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wRocket.Explode" );
//
//	parms.HitLocation = HitLocation;
//	parms.HitNormal = HitNormal;
//	this->ProcessEvent ( pExplode, &parms, NULL );
//
//}
//
//void AwRocket::HitWall ( struct FVector HitNormal, class AActor* Wall, class UMaterial* HitMaterial )
//{
//	static UFunction* pHitWall = 0;
//	AwRocket_execHitWall_Parms parms;
//
//	if ( !pHitWall )
//		pHitWall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wRocket.HitWall" );
//
//	parms.HitNormal = HitNormal;
//	parms.Wall = Wall;
//	parms.HitMaterial = HitMaterial;
//	this->ProcessEvent ( pHitWall, &parms, NULL );
//
//}
//
//void AwRocket::ProcessTouch ( class AActor* Other, struct FVector HitLocation )
//{
//	static UFunction* pProcessTouch = 0;
//	AwRocket_execProcessTouch_Parms parms;
//
//	if ( !pProcessTouch )
//		pProcessTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wRocket.ProcessTouch" );
//
//	parms.Other = Other;
//	parms.HitLocation = HitLocation;
//	this->ProcessEvent ( pProcessTouch, &parms, NULL );
//
//}
//
//void AwRocket::Landed ( struct FVector HitNormal )
//{
//	static UFunction* pLanded = 0;
//	AwRocket_execLanded_Parms parms;
//
//	if ( !pLanded )
//		pLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wRocket.Landed" );
//
//	parms.HitNormal = HitNormal;
//	this->ProcessEvent ( pLanded, &parms, NULL );
//
//}
//
//void AwRocket::PostNetBeginPlay (  )
//{
//	static UFunction* pPostNetBeginPlay = 0;
//	AwRocket_execPostNetBeginPlay_Parms parms;
//
//	if ( !pPostNetBeginPlay )
//		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wRocket.PostNetBeginPlay" );
//
//	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );
//
//}
//
//void AwRocket::SetSpeed ( float fSpeed )
//{
//	static UFunction* pSetSpeed = 0;
//	AwRocket_execSetSpeed_Parms parms;
//
//	if ( !pSetSpeed )
//		pSetSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wRocket.SetSpeed" );
//
//	parms.fSpeed = fSpeed;
//	this->ProcessEvent ( pSetSpeed, &parms, NULL );
//
//}
//
//void AwRocket::Destroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AwRocket_execDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wRocket.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//int UBGMTable::GetDuration ( struct FString File )
//{
//	static UFunction* pGetDuration = 0;
//	UBGMTable_execGetDuration_Parms parms;
//
//	if ( !pGetDuration )
//		pGetDuration = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.BGMTable.GetDuration" );
//
//	parms.File = File;
//	this->ProcessEvent ( pGetDuration, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwMessage_Game_Mode::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pClientReceive = 0;
//	AwMessage_Game_Mode_execClientReceive_Parms parms;
//
//	if ( !pClientReceive )
//		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game_Mode.ClientReceive" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pClientReceive, &parms, NULL );
//
//}
//
//struct FString AwMessage_Game_Mode::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGetString = 0;
//	AwMessage_Game_Mode_execGetString_Parms parms;
//
//	if ( !pGetString )
//		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game_Mode.GetString" );
//
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGetString, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwMessage_Game_Mode::GotoBTConsole ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGotoBTConsole = 0;
//	AwMessage_Game_Mode_execGotoBTConsole_Parms parms;
//
//	if ( !pGotoBTConsole )
//		pGotoBTConsole = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game_Mode.GotoBTConsole" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGotoBTConsole, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//bool AwMessage_Game_Mode::GotoHud ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
//{
//	static UFunction* pGotoHud = 0;
//	AwMessage_Game_Mode_execGotoHud_Parms parms;
//
//	if ( !pGotoHud )
//		pGotoHud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMessage_Game_Mode.GotoHud" );
//
//	parms.P = P;
//	parms.Switch = Switch;
//	parms.RelatedPRI_1 = RelatedPRI_1;
//	parms.RelatedPRI_2 = RelatedPRI_2;
//	parms.OptionalObject = OptionalObject;
//	this->ProcessEvent ( pGotoHud, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float UWinBox::H (  )
//{
//	static UFunction* pH = 0;
//	UWinBox_execH_Parms parms;
//
//	if ( !pH )
//		pH = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WinBox.H" );
//
//	this->ProcessEvent ( pH, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float UWinBox::W (  )
//{
//	static UFunction* pW = 0;
//	UWinBox_execW_Parms parms;
//
//	if ( !pW )
//		pW = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WinBox.W" );
//
//	this->ProcessEvent ( pW, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float UWinBox::Y (  )
//{
//	static UFunction* pY = 0;
//	UWinBox_execY_Parms parms;
//
//	if ( !pY )
//		pY = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WinBox.Y" );
//
//	this->ProcessEvent ( pY, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//float UWinBox::X (  )
//{
//	static UFunction* pX = 0;
//	UWinBox_execX_Parms parms;
//
//	if ( !pX )
//		pX = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WinBox.X" );
//
//	this->ProcessEvent ( pX, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UWinFrameChanger::WinBoxToFloatBoxWH_OUT ( class UWinBox* B, struct FFloatBoxWH* fb )
//{
//	static UFunction* pWinBoxToFloatBoxWH_OUT = 0;
//	UWinFrameChanger_execWinBoxToFloatBoxWH_OUT_Parms parms;
//
//	if ( !pWinBoxToFloatBoxWH_OUT )
//		pWinBoxToFloatBoxWH_OUT = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WinFrameChanger.WinBoxToFloatBoxWH_OUT" );
//
//	parms.B = B;
//	this->ProcessEvent ( pWinBoxToFloatBoxWH_OUT, &parms, NULL );
//
//	*fb = parms.fb;
//}
//
//struct FFloatBoxWH UWinFrameChanger::WinBoxToFloatBoxWH ( class UWinBox* B )
//{
//	static UFunction* pWinBoxToFloatBoxWH = 0;
//	UWinFrameChanger_execWinBoxToFloatBoxWH_Parms parms;
//
//	if ( !pWinBoxToFloatBoxWH )
//		pWinBoxToFloatBoxWH = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WinFrameChanger.WinBoxToFloatBoxWH" );
//
//	parms.B = B;
//	this->ProcessEvent ( pWinBoxToFloatBoxWH, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UWinFrameChanger::SetFrameByFloatBox ( struct FFloatBox B )
//{
//	static UFunction* pSetFrameByFloatBox = 0;
//	UWinFrameChanger_execSetFrameByFloatBox_Parms parms;
//
//	if ( !pSetFrameByFloatBox )
//		pSetFrameByFloatBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WinFrameChanger.SetFrameByFloatBox" );
//
//	parms.B = B;
//	this->ProcessEvent ( pSetFrameByFloatBox, &parms, NULL );
//
//}
//
//void UWinFrameChanger::SetFrame ( float nx, float ny, float nw, float nh )
//{
//	static UFunction* pSetFrame = 0;
//	UWinFrameChanger_execSetFrame_Parms parms;
//
//	if ( !pSetFrame )
//		pSetFrame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.WinFrameChanger.SetFrame" );
//
//	parms.nx = nx;
//	parms.ny = ny;
//	parms.nw = nw;
//	parms.nh = nh;
//	this->ProcessEvent ( pSetFrame, &parms, NULL );
//
//}
//
//struct FVector UwProjectileFire::GetFireStart ( struct FVector X, struct FVector Y, struct FVector Z )
//{
//	static UFunction* pGetFireStart = 0;
//	UwProjectileFire_execGetFireStart_Parms parms;
//
//	if ( !pGetFireStart )
//		pGetFireStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectileFire.GetFireStart" );
//
//	parms.X = X;
//	parms.Y = Y;
//	parms.Z = Z;
//	this->ProcessEvent ( pGetFireStart, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwProjectile* UwProjectileFire::SpawnProjectile ( struct FVector Start, struct FRotator Dir )
//{
//	static UFunction* pSpawnProjectile = 0;
//	UwProjectileFire_execSpawnProjectile_Parms parms;
//
//	if ( !pSpawnProjectile )
//		pSpawnProjectile = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectileFire.SpawnProjectile" );
//
//	parms.Start = Start;
//	parms.Dir = Dir;
//	this->ProcessEvent ( pSpawnProjectile, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UwProjectileFire::DoFireEffect (  )
//{
//	static UFunction* pDoFireEffect = 0;
//	UwProjectileFire_execDoFireEffect_Parms parms;
//
//	if ( !pDoFireEffect )
//		pDoFireEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wProjectileFire.DoFireEffect" );
//
//	this->ProcessEvent ( pDoFireEffect, &parms, NULL );
//
//}
//
//void UB4SParser::ParseLines (  )
//{
//	static UFunction* pParseLines = 0;
//	UB4SParser_execParseLines_Parms parms;
//
//	if ( !pParseLines )
//		pParseLines = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.B4SParser.ParseLines" );
//
//	this->ProcessEvent ( pParseLines, &parms, NULL );
//
//}
//
//struct FString UM3UParser::MatchPath ( struct FString str )
//{
//	static UFunction* pMatchPath = 0;
//	UM3UParser_execMatchPath_Parms parms;
//
//	if ( !pMatchPath )
//		pMatchPath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.M3UParser.MatchPath" );
//
//	parms.str = str;
//	this->ProcessEvent ( pMatchPath, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UM3UParser::ParseLines (  )
//{
//	static UFunction* pParseLines = 0;
//	UM3UParser_execParseLines_Parms parms;
//
//	if ( !pParseLines )
//		pParseLines = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.M3UParser.ParseLines" );
//
//	this->ProcessEvent ( pParseLines, &parms, NULL );
//
//}
//
//bool UM3UParser::Import ( int PlaylistIndex, int InsertPosition, struct FString Path )
//{
//	static UFunction* pImport = 0;
//	UM3UParser_execImport_Parms parms;
//
//	if ( !pImport )
//		pImport = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.M3UParser.Import" );
//
//	parms.PlaylistIndex = PlaylistIndex;
//	parms.InsertPosition = InsertPosition;
//	parms.Path = Path;
//	this->ProcessEvent ( pImport, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void UPLSParser::ParseLines (  )
//{
//	static UFunction* pParseLines = 0;
//	UPLSParser_execParseLines_Parms parms;
//
//	if ( !pParseLines )
//		pParseLines = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.PLSParser.ParseLines" );
//
//	this->ProcessEvent ( pParseLines, &parms, NULL );
//
//}
//
//void AEAXSoundVolume::eventTouch ( class AActor* Other )
//{
//	static UFunction* pTouch = 0;
//	AEAXSoundVolume_eventTouch_Parms parms;
//
//	if ( !pTouch )
//		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.EAXSoundVolume.Touch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTouch, &parms, NULL );
//
//}
//
//void AEAXSoundVolume::eventPawnLeavingVolume ( class APawn* P )
//{
//	static UFunction* pPawnLeavingVolume = 0;
//	AEAXSoundVolume_eventPawnLeavingVolume_Parms parms;
//
//	if ( !pPawnLeavingVolume )
//		pPawnLeavingVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.EAXSoundVolume.PawnLeavingVolume" );
//
//	parms.P = P;
//	this->ProcessEvent ( pPawnLeavingVolume, &parms, NULL );
//
//}
//
//void AEAXSoundVolume::eventPawnEnteredVolume ( class APawn* P )
//{
//	static UFunction* pPawnEnteredVolume = 0;
//	AEAXSoundVolume_eventPawnEnteredVolume_Parms parms;
//
//	if ( !pPawnEnteredVolume )
//		pPawnEnteredVolume = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.EAXSoundVolume.PawnEnteredVolume" );
//
//	parms.P = P;
//	this->ProcessEvent ( pPawnEnteredVolume, &parms, NULL );
//
//}
//
//void AClientMover::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AClientMover_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.ClientMover.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AwC4Explosive::Explode2 ( struct FVector HitLocation, struct FVector HitNormal )
//{
//	static UFunction* pExplode2 = 0;
//	AwC4Explosive_execExplode2_Parms parms;
//
//	if ( !pExplode2 )
//		pExplode2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wC4Explosive.Explode2" );
//
//	parms.HitLocation = HitLocation;
//	parms.HitNormal = HitNormal;
//	this->ProcessEvent ( pExplode2, &parms, NULL );
//
//}
//
//void AwC4Explosive::Explode ( struct FVector HitLocation, struct FVector HitNormal )
//{
//	static UFunction* pExplode = 0;
//	AwC4Explosive_execExplode_Parms parms;
//
//	if ( !pExplode )
//		pExplode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wC4Explosive.Explode" );
//
//	parms.HitLocation = HitLocation;
//	parms.HitNormal = HitNormal;
//	this->ProcessEvent ( pExplode, &parms, NULL );
//
//}
//
//void AwC4Explosive::Touch ( class AActor* Other )
//{
//	static UFunction* pTouch = 0;
//	AwC4Explosive_execTouch_Parms parms;
//
//	if ( !pTouch )
//		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wC4Explosive.Touch" );
//
//	parms.Other = Other;
//	this->ProcessEvent ( pTouch, &parms, NULL );
//
//}
//
//void AwC4Explosive::Reset (  )
//{
//	static UFunction* pReset = 0;
//	AwC4Explosive_execReset_Parms parms;
//
//	if ( !pReset )
//		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wC4Explosive.Reset" );
//
//	this->ProcessEvent ( pReset, &parms, NULL );
//
//}
//
//void AwC4Explosive::OnEndRound (  )
//{
//	static UFunction* pOnEndRound = 0;
//	AwC4Explosive_execOnEndRound_Parms parms;
//
//	if ( !pOnEndRound )
//		pOnEndRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wC4Explosive.OnEndRound" );
//
//	this->ProcessEvent ( pOnEndRound, &parms, NULL );
//
//}
//
//void AwC4Explosive::OnBeginRound (  )
//{
//	static UFunction* pOnBeginRound = 0;
//	AwC4Explosive_execOnBeginRound_Parms parms;
//
//	if ( !pOnBeginRound )
//		pOnBeginRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wC4Explosive.OnBeginRound" );
//
//	this->ProcessEvent ( pOnBeginRound, &parms, NULL );
//
//}
//
//void AwC4Explosive::Go (  )
//{
//	static UFunction* pGo = 0;
//	AwC4Explosive_execGo_Parms parms;
//
//	if ( !pGo )
//		pGo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wC4Explosive.Go" );
//
//	this->ProcessEvent ( pGo, &parms, NULL );
//
//}
//
//void AwC4Explosive::eventDestroyed (  )
//{
//	static UFunction* pDestroyed = 0;
//	AwC4Explosive_eventDestroyed_Parms parms;
//
//	if ( !pDestroyed )
//		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wC4Explosive.Destroyed" );
//
//	this->ProcessEvent ( pDestroyed, &parms, NULL );
//
//}
//
//void AwC4Explosive::PostNetBeginPlay (  )
//{
//	static UFunction* pPostNetBeginPlay = 0;
//	AwC4Explosive_execPostNetBeginPlay_Parms parms;
//
//	if ( !pPostNetBeginPlay )
//		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wC4Explosive.PostNetBeginPlay" );
//
//	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );
//
//}
//
//void AwC4Explosive::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	AwC4Explosive_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wC4Explosive.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AwMeleeWeapon::ServerMeleeFire (  )
//{
//	static UFunction* pServerMeleeFire = 0;
//	AwMeleeWeapon_execServerMeleeFire_Parms parms;
//
//	if ( !pServerMeleeFire )
//		pServerMeleeFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeWeapon.ServerMeleeFire" );
//
//	this->ProcessEvent ( pServerMeleeFire, &parms, NULL );
//
//}
//
//void AwMeleeWeapon::ClientMeleeFire (  )
//{
//	static UFunction* pClientMeleeFire = 0;
//	AwMeleeWeapon_execClientMeleeFire_Parms parms;
//
//	if ( !pClientMeleeFire )
//		pClientMeleeFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeWeapon.ClientMeleeFire" );
//
//	this->ProcessEvent ( pClientMeleeFire, &parms, NULL );
//
//}
//
//void AwMeleeWeapon::ActiveMeleeDelay (  )
//{
//	static UFunction* pActiveMeleeDelay = 0;
//	AwMeleeWeapon_execActiveMeleeDelay_Parms parms;
//
//	if ( !pActiveMeleeDelay )
//		pActiveMeleeDelay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeWeapon.ActiveMeleeDelay" );
//
//	this->ProcessEvent ( pActiveMeleeDelay, &parms, NULL );
//
//}
//
//void AwMeleeWeapon::eventWeaponTick ( float dt )
//{
//	static UFunction* pWeaponTick = 0;
//	AwMeleeWeapon_eventWeaponTick_Parms parms;
//
//	if ( !pWeaponTick )
//		pWeaponTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeWeapon.WeaponTick" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pWeaponTick, &parms, NULL );
//
//}
//
//class AwWeapon* AwMeleeWeapon::RecommendWeapon ( float* rating )
//{
//	static UFunction* pRecommendWeapon = 0;
//	AwMeleeWeapon_execRecommendWeapon_Parms parms;
//
//	if ( !pRecommendWeapon )
//		pRecommendWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeWeapon.RecommendWeapon" );
//
//	parms.rating = *rating;
//	this->ProcessEvent ( pRecommendWeapon, &parms, NULL );
//
//	*rating = parms.rating;
//	return parms.ReturnValue;
//}
//
//class AwWeapon* AwMeleeWeapon::NextWeapon ( class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon )
//{
//	static UFunction* pNextWeapon = 0;
//	AwMeleeWeapon_execNextWeapon_Parms parms;
//
//	if ( !pNextWeapon )
//		pNextWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeWeapon.NextWeapon" );
//
//	parms.CurrentChoice = CurrentChoice;
//	parms.CurrentWeapon = CurrentWeapon;
//	this->ProcessEvent ( pNextWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* AwMeleeWeapon::PrevWeapon ( class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon )
//{
//	static UFunction* pPrevWeapon = 0;
//	AwMeleeWeapon_execPrevWeapon_Parms parms;
//
//	if ( !pPrevWeapon )
//		pPrevWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeWeapon.PrevWeapon" );
//
//	parms.CurrentChoice = CurrentChoice;
//	parms.CurrentWeapon = CurrentWeapon;
//	this->ProcessEvent ( pPrevWeapon, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//class AwWeapon* AwMeleeWeapon::WeaponChange ( unsigned char f, bool bSilent )
//{
//	static UFunction* pWeaponChange = 0;
//	AwMeleeWeapon_execWeaponChange_Parms parms;
//
//	if ( !pWeaponChange )
//		pWeaponChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeWeapon.WeaponChange" );
//
//	parms.f = f;
//	parms.bSilent = bSilent;
//	this->ProcessEvent ( pWeaponChange, &parms, NULL );
//
//	return parms.ReturnValue;
//}
//
//void AwMeleeWeapon::SetBaseParams ( class UwWeaponBaseParams* wBase )
//{
//	static UFunction* pSetBaseParams = 0;
//	AwMeleeWeapon_execSetBaseParams_Parms parms;
//
//	if ( !pSetBaseParams )
//		pSetBaseParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeWeapon.SetBaseParams" );
//
//	parms.wBase = wBase;
//	this->ProcessEvent ( pSetBaseParams, &parms, NULL );
//
//}
//
//void AwMeleeWeapon::eventAnimEnd ( int Channel )
//{
//	static UFunction* pAnimEnd = 0;
//	AwMeleeWeapon_eventAnimEnd_Parms parms;
//
//	if ( !pAnimEnd )
//		pAnimEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeWeapon.AnimEnd" );
//
//	parms.Channel = Channel;
//	this->ProcessEvent ( pAnimEnd, &parms, NULL );
//
//}
//
//void AwMeleeWeapon::BringUp ( class AwWeapon* PrevWeapon )
//{
//	static UFunction* pBringUp = 0;
//	AwMeleeWeapon_execBringUp_Parms parms;
//
//	if ( !pBringUp )
//		pBringUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wMeleeWeapon.BringUp" );
//
//	parms.PrevWeapon = PrevWeapon;
//	this->ProcessEvent ( pBringUp, &parms, NULL );
//
//}
//
//void AwKnife::ServerMeleeFire (  )
//{
//	static UFunction* pServerMeleeFire = 0;
//	AwKnife_execServerMeleeFire_Parms parms;
//
//	if ( !pServerMeleeFire )
//		pServerMeleeFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wKnife.ServerMeleeFire" );
//
//	this->ProcessEvent ( pServerMeleeFire, &parms, NULL );
//
//}
//
//void AwKnife::ClientMeleeFire (  )
//{
//	static UFunction* pClientMeleeFire = 0;
//	AwKnife_execClientMeleeFire_Parms parms;
//
//	if ( !pClientMeleeFire )
//		pClientMeleeFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wKnife.ClientMeleeFire" );
//
//	this->ProcessEvent ( pClientMeleeFire, &parms, NULL );
//
//}
//
//void AwKnife::ActiveMeleeDelay (  )
//{
//	static UFunction* pActiveMeleeDelay = 0;
//	AwKnife_execActiveMeleeDelay_Parms parms;
//
//	if ( !pActiveMeleeDelay )
//		pActiveMeleeDelay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wKnife.ActiveMeleeDelay" );
//
//	this->ProcessEvent ( pActiveMeleeDelay, &parms, NULL );
//
//}
//
//void AwKnife::eventWeaponTick ( float dt )
//{
//	static UFunction* pWeaponTick = 0;
//	AwKnife_eventWeaponTick_Parms parms;
//
//	if ( !pWeaponTick )
//		pWeaponTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wKnife.WeaponTick" );
//
//	parms.dt = dt;
//	this->ProcessEvent ( pWeaponTick, &parms, NULL );
//
//}
//
//void AwKnife::DropFrom ( struct FVector StartLocation, struct FRotator StartRotation )
//{
//	static UFunction* pDropFrom = 0;
//	AwKnife_execDropFrom_Parms parms;
//
//	if ( !pDropFrom )
//		pDropFrom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wKnife.DropFrom" );
//
//	parms.StartLocation = StartLocation;
//	parms.StartRotation = StartRotation;
//	this->ProcessEvent ( pDropFrom, &parms, NULL );
//
//}
//
//void AwKnife::ForcePlayIdle (  )
//{
//	static UFunction* pForcePlayIdle = 0;
//	AwKnife_execForcePlayIdle_Parms parms;
//
//	if ( !pForcePlayIdle )
//		pForcePlayIdle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wKnife.ForcePlayIdle" );
//
//	this->ProcessEvent ( pForcePlayIdle, &parms, NULL );
//
//}
//
//void AwKnife::eventAnimEnd ( int Channel )
//{
//	static UFunction* pAnimEnd = 0;
//	AwKnife_eventAnimEnd_Parms parms;
//
//	if ( !pAnimEnd )
//		pAnimEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wKnife.AnimEnd" );
//
//	parms.Channel = Channel;
//	this->ProcessEvent ( pAnimEnd, &parms, NULL );
//
//}
//
//void AwKnife::BringUp ( class AwWeapon* PrevWeapon )
//{
//	static UFunction* pBringUp = 0;
//	AwKnife_execBringUp_Parms parms;
//
//	if ( !pBringUp )
//		pBringUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wKnife.BringUp" );
//
//	parms.PrevWeapon = PrevWeapon;
//	this->ProcessEvent ( pBringUp, &parms, NULL );
//
//}
//
//void AwKnife::SetBaseParams ( class UwWeaponBaseParams* wBase )
//{
//	static UFunction* pSetBaseParams = 0;
//	AwKnife_execSetBaseParams_Parms parms;
//
//	if ( !pSetBaseParams )
//		pSetBaseParams = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wKnife.SetBaseParams" );
//
//	parms.wBase = wBase;
//	this->ProcessEvent ( pSetBaseParams, &parms, NULL );
//
//}
//
//void AwKnife::wLoadOut ( int iID, int iAddPartsID )
//{
//	static UFunction* pwLoadOut = 0;
//	AwKnife_execwLoadOut_Parms parms;
//
//	if ( !pwLoadOut )
//		pwLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wKnife.wLoadOut" );
//
//	parms.iID = iID;
//	parms.iAddPartsID = iAddPartsID;
//	this->ProcessEvent ( pwLoadOut, &parms, NULL );
//
//}
//
//void UwKnifeFire::PlayFiring (  )
//{
//	static UFunction* pPlayFiring = 0;
//	UwKnifeFire_execPlayFiring_Parms parms;
//
//	if ( !pPlayFiring )
//		pPlayFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wKnifeFire.PlayFiring" );
//
//	this->ProcessEvent ( pPlayFiring, &parms, NULL );
//
//}
//
//void UwKnifeFire::SetFireAnim (  )
//{
//	static UFunction* pSetFireAnim = 0;
//	UwKnifeFire_execSetFireAnim_Parms parms;
//
//	if ( !pSetFireAnim )
//		pSetFireAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wKnifeFire.SetFireAnim" );
//
//	this->ProcessEvent ( pSetFireAnim, &parms, NULL );
//
//}
//
//void UwSkill_QuickDemolition::RemoveSkill (  )
//{
//	static UFunction* pRemoveSkill = 0;
//	UwSkill_QuickDemolition_execRemoveSkill_Parms parms;
//
//	if ( !pRemoveSkill )
//		pRemoveSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill_QuickDemolition.RemoveSkill" );
//
//	this->ProcessEvent ( pRemoveSkill, &parms, NULL );
//
//}
//
//void UwSkill_QuickDemolition::PostBeginPlay (  )
//{
//	static UFunction* pPostBeginPlay = 0;
//	UwSkill_QuickDemolition_execPostBeginPlay_Parms parms;
//
//	if ( !pPostBeginPlay )
//		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.wSkill_QuickDemolition.PostBeginPlay" );
//
//	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );
//
//}
//
//void AEmitterThirdPerson::eventPostNetBeginPlay (  )
//{
//	static UFunction* pPostNetBeginPlay = 0;
//	AEmitterThirdPerson_eventPostNetBeginPlay_Parms parms;
//
//	if ( !pPostNetBeginPlay )
//		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.EmitterThirdPerson.PostNetBeginPlay" );
//
//	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );
//
//}
//
//void AEmitterThirdPerson::DestroyIfFirstPerson (  )
//{
//	static UFunction* pDestroyIfFirstPerson = 0;
//	AEmitterThirdPerson_execDestroyIfFirstPerson_Parms parms;
//
//	if ( !pDestroyIfFirstPerson )
//		pDestroyIfFirstPerson = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Engine.EmitterThirdPerson.DestroyIfFirstPerson" );
//
//	this->ProcessEvent ( pDestroyIfFirstPerson, &parms, NULL );
//
//}

