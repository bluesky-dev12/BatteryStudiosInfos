#pragma once
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : UnrealGame
# >    File : Classes.h
# ======================================================================================== #
*/

#ifdef _MSC_VER
#pragma pack ( push, 4 )
#endif


/*
# ======================================================================================== #
# > Constants
# ======================================================================================== #
*/

#define CONST_MPPROPNUM                                          4
#define CONST_DMPROPNUM                                          14
#define CONST_AngleConvert                                       0.0000958738
#define CONST_TGPROPNUM                                          5
#define CONST_PROPNUM01                                          2
#define CONST_BANNED                                             8
#define CONST_NOVOICE                                            4
#define CONST_NOSPEECH                                           2
#define CONST_NOTEXT                                             1

/*
# ======================================================================================== #
# > Enums
# ======================================================================================== #
*/

// Enum UnrealGame.Bot.EScriptFollow
enum EScriptFollow
{
	FOLLOWSCRIPT_IgnoreAllStimuli                      = 0,
	FOLLOWSCRIPT_IgnoreEnemies                         = 1,
	FOLLOWSCRIPT_StayOnScript                          = 2,
	FOLLOWSCRIPT_LeaveScriptForCombat                  = 3
};

// Enum UnrealGame.RosterEntry.EOrders
enum EOrders
{
	ORDERS_None                                        = 0,
	ORDERS_Attack                                      = 1,
	ORDERS_Defend                                      = 2,
	ORDERS_Freelance                                   = 3,
	ORDERS_Support                                     = 4,
	ORDERS_Roam                                        = 5
};

// Enum UnrealGame.DestroyableObjective.EConstraintInstigator
enum EConstraintInstigator
{
	CI_All                                             = 0,
	CI_PawnClass                                       = 1
};


/*
# ======================================================================================== #
# > Classes
# ======================================================================================== #
*/

// Class UnrealGame.StartupMessage
class DLL_IMPORT AStartupMessage : public ACriticalEventPlus
{
public:
	struct FString                                     Stage[ 0x64 ];                                    		// 0x0440 ( 0x04B0 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NotReady;                                         		// 0x08F0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SinglePlayer;                                     		// 0x08FC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class USound*                                      Riff;                                             		// 0x0908 ( 0x0004 ) 

	// UScript Functions
	 bool                      GotoHud ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  UnrealGame.StartupMessage.GotoHud
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  UnrealGame.StartupMessage.GetString
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] UnrealGame.StartupMessage.ClientReceive
}; // Size: 0x04CC

// Class UnrealGame.UnrealMPGameInfo
class DLL_IMPORT AUnrealMPGameInfo : public AGameInfo
{
public:
	unsigned char                                      BotMode;                                          		// 0x09A8 ( 0x0001 ) 
	int                                                MinPlayers;                                       		// 0x09AC ( 0x0004 ) 
	float                                              EndTimeDelay;                                     		// 0x09B0 ( 0x0004 ) 
	float                                              BotRatio;                                         		// 0x09B4 ( 0x0004 ) 
	unsigned long                                      bPreloadAllSkins:1;                               		// 0x09B8 ( 0x0004 )  [0x00000001]
	struct FString                                     DefaultVoiceChannel;                              		// 0x09BC ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bAllowPrivateChat:1;                              		// 0x09C8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bTeamScoreRounds:1;                               		// 0x09C8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bSoaking:1;                                       		// 0x09C8 ( 0x0004 )  [0x00000004]
	unsigned long                                      bPlayersVsBots:1;                                 		// 0x09C8 ( 0x0004 )  [0x00000008]
	float                                              EndTime;                                          		// 0x09CC ( 0x0004 ) 
	class ASpecialVehicleObjective*                    SpecialVehicleObjectives;                         		// 0x09D0 ( 0x0004 ) 
	class UClass*                                      LocalStatsScreenClass;                            		// 0x09D4 ( 0x0004 ) 
	struct FString                                     VoiceReplicationInfoType;                         		// 0x09D8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     MPGIPropsDisplayText[ 0x04 ];                     		// 0x09E4 ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MPGIPropDescText[ 0x04 ];                         		// 0x0A14 ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BotModeText;                                      		// 0x0A44 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SPBotText;                                        		// 0x0A50 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MPBotText;                                        		// 0x0A5C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SPBotDesc;                                        		// 0x0A68 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MPBotDesc;                                        		// 0x0A74 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BotOptions[ 0x04 ];                               		// 0x0A80 ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class AMasterServerUplink*                         MSUplink;                                         		// 0x0AB0 ( 0x0004 ) 
	unsigned long                                      bMSUplinkSet:1;                                   		// 0x0AB4 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 int                       MultiMinPlayers (  );                             		//  UnrealGame.UnrealMPGameInfo.MultiMinPlayers
	 struct FString            eventGetDescriptionText ( struct FString PropName );		// [ FUNC_Event ] UnrealGame.UnrealMPGameInfo.GetDescriptionText
	 void                      FillPlayInfo ( class UPlayInfo* PlayInfo );       		//  UnrealGame.UnrealMPGameInfo.FillPlayInfo
	 struct FString            GenerateBotOptions ( bool bSinglePlayer );        		//  UnrealGame.UnrealMPGameInfo.GenerateBotOptions
	 void                      AdjustBotInterface ( bool bSinglePlayer );        		//  UnrealGame.UnrealMPGameInfo.AdjustBotInterface
	 void                      GetServerDetails ( struct FServerResponseLine* ServerState );		//  UnrealGame.UnrealMPGameInfo.GetServerDetails
	 void                      InitPlacedBot ( class AController* C, class URosterEntry* R );		//  UnrealGame.UnrealMPGameInfo.InitPlacedBot
	 bool                      PickupQuery ( class APawn* Other, class APickup* Item );		//  UnrealGame.UnrealMPGameInfo.PickupQuery
	 bool                      CanDisableObjective ( class AGameObjective* Go ); 		//  UnrealGame.UnrealMPGameInfo.CanDisableObjective
	 int                       AdjustDestroyObjectiveDamage ( int Damage, class AController* instigatedBy, class AGameObjective* Go );		//  UnrealGame.UnrealMPGameInfo.AdjustDestroyObjectiveDamage
	 void                      ShowPathTo ( class APlayerController* P, int TeamNum );		//  UnrealGame.UnrealMPGameInfo.ShowPathTo
	 bool                      CanShowPathTo ( class APlayerController* P, int TeamNum );		//  UnrealGame.UnrealMPGameInfo.CanShowPathTo
	 void                      ForceAddBot (  );                                 		//  UnrealGame.UnrealMPGameInfo.ForceAddBot
	 void                      ChangeLoadOut ( class APlayerController* P, struct FString LoadoutName );		//  UnrealGame.UnrealMPGameInfo.ChangeLoadOut
	 void                      ScoreGameObject ( class AController* C, class AGameObject* Go );		//  UnrealGame.UnrealMPGameInfo.ScoreGameObject
	 class AGameObject*        GetGameObject ( struct FName GameObjectName );    		//  UnrealGame.UnrealMPGameInfo.GetGameObject
	 void                      FindNewObjectives ( class AGameObjective* DisabledObjective );		//  UnrealGame.UnrealMPGameInfo.FindNewObjectives
	 void                      ObjectiveDisabled ( class AGameObjective* DisabledObjective );		//  UnrealGame.UnrealMPGameInfo.ObjectiveDisabled
	 class UTexture*           GetRandomTeamSymbol ( int Base );                 		//  UnrealGame.UnrealMPGameInfo.GetRandomTeamSymbol
	 void                      RestartGame (  );                                 		//  UnrealGame.UnrealMPGameInfo.RestartGame
	 bool                      TooManyBots ( class AController* botToRemove );   		//  UnrealGame.UnrealMPGameInfo.TooManyBots
	 float                     SpawnWait ( class AAIController* B );             		//  UnrealGame.UnrealMPGameInfo.SpawnWait
	 bool                      ShouldRespawn ( class APickup* Other );           		//  UnrealGame.UnrealMPGameInfo.ShouldRespawn
	 int                       GetNumPlayers (  );                               		//  UnrealGame.UnrealMPGameInfo.GetNumPlayers
	 void                      TeamScoreEvent ( int Team, float Points, struct FString Desc );		//  UnrealGame.UnrealMPGameInfo.TeamScoreEvent
	 void                      ScoreEvent ( class APlayerReplicationInfo* Who, float Points, struct FString Desc );		//  UnrealGame.UnrealMPGameInfo.ScoreEvent
	 void                      GameEvent ( struct FString GEvent, struct FString Desc, class APlayerReplicationInfo* Who );		//  UnrealGame.UnrealMPGameInfo.GameEvent
	 void                      KillEvent ( struct FString KillType, class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, class UClass* Damage );		//  UnrealGame.UnrealMPGameInfo.KillEvent
	 void                      SpecialEvent ( class APlayerReplicationInfo* Who, struct FString Desc );		//  UnrealGame.UnrealMPGameInfo.SpecialEvent
	 void                      ChangeVoiceChannel ( class APlayerReplicationInfo* PRI, int NewChannelIndex, int OldChannelIndex );		//  UnrealGame.UnrealMPGameInfo.ChangeVoiceChannel
	 void                      InitMaplistHandler (  );                          		//  UnrealGame.UnrealMPGameInfo.InitMaplistHandler
	 void                      InitVoiceReplicationInfo (  );                    		//  UnrealGame.UnrealMPGameInfo.InitVoiceReplicationInfo
	 class APlayerController*  eventLogin ( struct FString Portal, struct FString Options, struct FString* Error );		// [ FUNC_Event ] UnrealGame.UnrealMPGameInfo.Login
	 void                      eventPreLogin ( struct FString Options, struct FString Address, struct FString PlayerID, struct FString* Error, struct FString* FailCode );		// [ FUNC_Event ] UnrealGame.UnrealMPGameInfo.PreLogin
}; // Size: 0x0110

// Class UnrealGame.DeathMatch
class DLL_IMPORT ADeathMatch : public AUnrealMPGameInfo
{
public:
	class TArray< struct FAddBotInfo >                 AddBotQueue;                                      		// 0x0AB8 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                NetWait;                                          		// 0x0AC4 ( 0x0004 ) [ CPF_Config ]
	int                                                NetWaitClan;                                      		// 0x0AC8 ( 0x0004 ) [ CPF_Config ]
	int                                                MinNetPlayers;                                    		// 0x0ACC ( 0x0004 ) 
	int                                                RestartWait;                                      		// 0x0AD0 ( 0x0004 ) 
	unsigned long                                      bTournament:1;                                    		// 0x0AD4 ( 0x0004 )  [0x00000001]
	unsigned long                                      bAutoNumBots:1;                                   		// 0x0AD4 ( 0x0004 )  [0x00000002]
	unsigned long                                      bColoredDMSkins:1;                                		// 0x0AD4 ( 0x0004 )  [0x00000004]
	unsigned long                                      bPlayersMustBeReady:1;                            		// 0x0AD4 ( 0x0004 )  [0x00000008]
	unsigned long                                      bForceRespawn:1;                                  		// 0x0AD4 ( 0x0004 )  [0x00000010]
	unsigned long                                      bAdjustSkill:1;                                   		// 0x0AD4 ( 0x0004 )  [0x00000020]
	unsigned long                                      bAllowTaunts:1;                                   		// 0x0AD4 ( 0x0004 )  [0x00000040]
	unsigned long                                      bAllowTrans:1;                                    		// 0x0AD4 ( 0x0004 )  [0x00000080]
	unsigned long                                      bDefaultTranslocator:1;                           		// 0x0AD4 ( 0x0004 )  [0x00000100]
	unsigned long                                      bOverrideTranslocator:1;                          		// 0x0AD4 ( 0x0004 )  [0x00000200]
	unsigned long                                      bWaitForNetPlayers:1;                             		// 0x0AD4 ( 0x0004 )  [0x00000400]
	unsigned long                                      bFirstBlood:1;                                    		// 0x0AD4 ( 0x0004 )  [0x00000800]
	unsigned long                                      bQuickStart:1;                                    		// 0x0AD4 ( 0x0004 )  [0x00001000]
	unsigned long                                      bSkipPlaySound:1;                                 		// 0x0AD4 ( 0x0004 )  [0x00002000]
	unsigned long                                      bStartedCountDown:1;                              		// 0x0AD4 ( 0x0004 )  [0x00004000]
	unsigned long                                      bFinalStartup:1;                                  		// 0x0AD4 ( 0x0004 )  [0x00008000]
	unsigned long                                      bOverTimeBroadcast:1;                             		// 0x0AD4 ( 0x0004 )  [0x00010000]
	unsigned long                                      bEpicNames:1;                                     		// 0x0AD4 ( 0x0004 )  [0x00020000]
	unsigned long                                      bKillBots:1;                                      		// 0x0AD4 ( 0x0004 )  [0x00040000]
	unsigned long                                      bCustomBots:1;                                    		// 0x0AD4 ( 0x0004 )  [0x00080000]
	unsigned long                                      bReviewingJumpSpots:1;                            		// 0x0AD4 ( 0x0004 )  [0x00100000]
	unsigned long                                      bAllowPlayerLights:1;                             		// 0x0AD4 ( 0x0004 )  [0x00200000]
	unsigned long                                      bForceNoPlayerLights:1;                           		// 0x0AD4 ( 0x0004 )  [0x00400000]
	unsigned long                                      bAlwaysShowLoginMenu:1;                           		// 0x0AD4 ( 0x0004 )  [0x00800000][ CPF_Edit ]
	unsigned long                                      GiveBotsFakeUID:1;                                		// 0x0AD4 ( 0x0004 )  [0x01000000]
	class TArray< class AVehicle* >                    Vehicles;                                         		// 0x0AD8 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bForceDefaultCharacter:1;                         		// 0x0AE4 ( 0x0004 )  [0x00000001]
	unsigned long                                      bPlayerBecameActive:1;                            		// 0x0AE4 ( 0x0004 )  [0x00000002]
	unsigned long                                      bMustHaveMultiplePlayers:1;                       		// 0x0AE4 ( 0x0004 )  [0x00000004]
	unsigned char                                      StartupStage;                                     		// 0x0AE8 ( 0x0001 ) 
	int                                                NumRounds;                                        		// 0x0AEC ( 0x0004 ) 
	float                                              SpawnProtectionTime;                              		// 0x0AF0 ( 0x0004 ) 
	int                                                DefaultMaxLives;                                  		// 0x0AF4 ( 0x0004 ) 
	int                                                LateEntryLives;                                   		// 0x0AF8 ( 0x0004 ) 
	int                                                RemainingTime;                                    		// 0x0AFC ( 0x0004 ) 
	int                                                ElapsedTime;                                      		// 0x0B00 ( 0x0004 ) 
	int                                                CountDown;                                        		// 0x0B04 ( 0x0004 ) 
	float                                              AdjustedDifficulty;                               		// 0x0B08 ( 0x0004 ) 
	int                                                PlayerKills;                                      		// 0x0B0C ( 0x0004 ) 
	int                                                PlayerDeaths;                                     		// 0x0B10 ( 0x0004 ) 
	class UClass*                                      DMSquadClass;                                     		// 0x0B14 ( 0x0004 ) 
	class UClass*                                      LevelRulesClass;                                  		// 0x0B18 ( 0x0004 ) 
	class ALevelGameRules*                             LevelRules;                                       		// 0x0B1C ( 0x0004 ) 
	class AUnrealTeamInfo*                             EnemyRoster;                                      		// 0x0B20 ( 0x0004 ) 
	struct FString                                     EnemyRosterName;                                  		// 0x0B24 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DefaultEnemyRosterClass;                          		// 0x0B30 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                RemainingBots;                                    		// 0x0B3C ( 0x0004 ) 
	int                                                InitialBots;                                      		// 0x0B40 ( 0x0004 ) 
	class ANavigationPoint*                            LastPlayerStartSpot;                              		// 0x0B44 ( 0x0004 ) 
	class ANavigationPoint*                            LastStartSpot;                                    		// 0x0B48 ( 0x0004 ) 
	int                                                NameNumber;                                       		// 0x0B4C ( 0x0004 ) 
	int                                                EndMessageWait;                                   		// 0x0B50 ( 0x0004 ) 
	int                                                EndMessageCounter;                                		// 0x0B54 ( 0x0004 ) [ CPF_Transient ]
	struct FName                                       AltEndGameSoundName[ 0x02 ];                      		// 0x0B58 ( 0x0008 ) 
	int                                                SinglePlayerWait;                                 		// 0x0B60 ( 0x0004 ) 
	struct FString                                     NamePrefixes[ 0x0A ];                             		// 0x0B64 ( 0x0078 ) [ CPF_NeedCtorLink ]
	struct FString                                     NameSuffixes[ 0x0A ];                             		// 0x0BDC ( 0x0078 ) [ CPF_NeedCtorLink ]
	class AActor*                                      EndGameFocus;                                     		// 0x0C54 ( 0x0004 ) 
	class APlayerController*                           StandalonePlayer;                                 		// 0x0C58 ( 0x0004 ) 
	struct FString                                     DMPropsDisplayText[ 0x0E ];                       		// 0x0C5C ( 0x00A8 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DMPropDescText[ 0x0E ];                           		// 0x0D04 ( 0x00A8 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     YouDestroyed;                                     		// 0x0DAC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     YouDestroyedTrailer;                              		// 0x0DB8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              ADR_Kill;                                         		// 0x0DC4 ( 0x0004 ) [ CPF_Edit ]
	float                                              ADR_MajorKill;                                    		// 0x0DC8 ( 0x0004 ) [ CPF_Edit ]
	float                                              ADR_MinorError;                                   		// 0x0DCC ( 0x0004 ) [ CPF_Edit ]
	float                                              ADR_MinorBonus;                                   		// 0x0DD0 ( 0x0004 ) [ CPF_Edit ]
	float                                              ADR_KillTeamMate;                                 		// 0x0DD4 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     EpicNames[ 0x15 ];                                		// 0x0DD8 ( 0x00FC ) [ CPF_NeedCtorLink ]
	struct FString                                     MaleBackupNames[ 0x20 ];                          		// 0x0ED4 ( 0x0180 ) [ CPF_NeedCtorLink ]
	struct FString                                     FemaleBackupNames[ 0x20 ];                        		// 0x1054 ( 0x0180 ) [ CPF_NeedCtorLink ]
	int                                                EpicOffset;                                       		// 0x11D4 ( 0x0004 ) 
	int                                                TotalEpic;                                        		// 0x11D8 ( 0x0004 ) 
	int                                                MaleBackupNameOffset;                             		// 0x11DC ( 0x0004 ) 
	int                                                FemaleBackupNameOffset;                           		// 0x11E0 ( 0x0004 ) 
	struct FString                                     LoginMenuClass;                                   		// 0x11E4 ( 0x000C ) [ CPF_Edit | CPF_Config | CPF_NeedCtorLink ]
	class TArray< struct FString >                     DMHints;                                          		// 0x11F0 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	float                                              InventoryListLastTime;                            		// 0x11FC ( 0x0004 ) 
	int                                                StartPlayerNum;                                   		// 0x1200 ( 0x0004 ) 
	struct FName                                       VoiceTimesUp;                                     		// 0x1204 ( 0x0004 ) 
	struct FName                                       sndModeName;                                      		// 0x1208 ( 0x0004 ) 
	struct FName                                       sndModeExplain;                                   		// 0x120C ( 0x0004 ) 
	class TArray< class APawn* >                       InventoryList;                                    		// 0x1210 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      SendMatchOverEndState:1;                          		// 0x121C ( 0x0004 )  [0x00000001]
	unsigned long                                      SendMatchOverState:1;                             		// 0x121C ( 0x0004 )  [0x00000002]
	struct FScriptDelegate                             __deleAnnounceMatchInfo__Delegate;                		// 0x1220 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      PermitWeaponChangeInSpecialMode (  );             		//  UnrealGame.DeathMatch.PermitWeaponChangeInSpecialMode
	 void                      AnnounceUAV ( class AController* Caller );        		//  UnrealGame.DeathMatch.AnnounceUAV
	 void                      AnnounceHelicopter ( class AController* Caller ); 		//  UnrealGame.DeathMatch.AnnounceHelicopter
	 void                      AnnounceArtillery ( class AController* Caller );  		//  UnrealGame.DeathMatch.AnnounceArtillery
	 class TArray< struct FString > GetAllLoadHints ( bool bThisClassOnly );          		//  UnrealGame.DeathMatch.GetAllLoadHints
	 struct FString            GetNextLoadHint ( struct FString MapName );       		//  UnrealGame.DeathMatch.GetNextLoadHint
	 void                      eventSetGrammar (  );                             		// [ FUNC_Event ] UnrealGame.DeathMatch.SetGrammar
	 void                      PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds );		//  UnrealGame.DeathMatch.PrecacheGameAnnouncements
	 bool                      WantsPickups ( class ABot* B );                   		//  UnrealGame.DeathMatch.WantsPickups
	 void                      EndSpree ( class AController* Killer, class AController* Other );		//  UnrealGame.DeathMatch.EndSpree
	 void                      NotifySpree ( class AController* Other, int Num );		//  UnrealGame.DeathMatch.NotifySpree
	 struct FString            eventGetDescriptionText ( struct FString PropName );		// [ FUNC_Event ] UnrealGame.DeathMatch.GetDescriptionText
	 struct FString            GetDisplayText ( struct FString PropName );       		//  UnrealGame.DeathMatch.GetDisplayText
	 void                      FillPlayInfo ( class UPlayInfo* PlayInfo );       		//  UnrealGame.DeathMatch.FillPlayInfo
	 bool                      eventAcceptPlayInfoProperty ( struct FString PropertyName );		// [ FUNC_Event ] UnrealGame.DeathMatch.AcceptPlayInfoProperty
	 void                      ReviewJumpSpots ( struct FName TestLabel );       		//  UnrealGame.DeathMatch.ReviewJumpSpots
	 void                      execaddaistrike ( int Num );                      		// [ FUNC_Exec ] UnrealGame.DeathMatch.addaistrike
	 void                      execaddaifire ( struct FString Num, struct FString Team );		// [ FUNC_Exec ] UnrealGame.DeathMatch.addaifire
	 void                      execaddai ( struct FString Num, struct FString Team );		// [ FUNC_Exec ] UnrealGame.DeathMatch.addai
	 void                      execaddaibot ( struct FString Num, struct FString Team, struct FString Grade, struct FString NPCID );		// [ FUNC_Exec ] UnrealGame.DeathMatch.addaibot
	 void                      AddwAIBot ( struct FString strNum, struct FString strTeam, struct FString aiClass, struct FString strGrade, struct FString strNPCID, struct FString strRegenLoc );		//  UnrealGame.DeathMatch.AddwAIBot
	 bool                      rfAckGetBotID ( int Result, unsigned char RequestedAFCount, unsigned char RequestedRSACount, class TArray< int > AFBotID, class TArray< int > RSABotID );		//  UnrealGame.DeathMatch.rfAckGetBotID
	 void                      HandleGetBotID ( int Team, class TArray< int > BotID );		//  UnrealGame.DeathMatch.HandleGetBotID
	 void                      EnqueueAddBot ( class UClass* BotClass, int Team, int Grade, int NPCID, int RegenLoc );		//  UnrealGame.DeathMatch.EnqueueAddBot
	 void                      execKillaibots ( int Num );                       		// [ FUNC_Exec ] UnrealGame.DeathMatch.Killaibots
	 void                      Kill ( class AController* C );                    		//  UnrealGame.DeathMatch.Kill
	 void                      execKillBots ( int Num );                         		// [ FUNC_Exec ] UnrealGame.DeathMatch.KillBots
	 void                      execAddBots ( int Num );                          		// [ FUNC_Exec ] UnrealGame.DeathMatch.AddBots
	 void                      execAddNamedBot ( struct FString botname );       		// [ FUNC_Exec ] UnrealGame.DeathMatch.AddNamedBot
	 void                      execdobalancebots (  );                           		// [ FUNC_Exec ] UnrealGame.DeathMatch.dobalancebots
	 void                      execsetFakeUID (  );                              		// [ FUNC_Exec ] UnrealGame.DeathMatch.setFakeUID
	 int                       ReduceDamage ( int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, int iWeaponType, struct FVector* Momentum );		//  UnrealGame.DeathMatch.ReduceDamage
	 void                      AdjustSkill ( class AAIController* B, class APlayerController* P, bool bWinner );		//  UnrealGame.DeathMatch.AdjustSkill
	 void                      ScoreKill ( class AController* Killer, class AController* Other );		//  UnrealGame.DeathMatch.ScoreKill
	 void                      ScoreObjective ( class APlayerReplicationInfo* Scorer, float Score );		//  UnrealGame.DeathMatch.ScoreObjective
	 void                      CheckScore ( class APlayerReplicationInfo* Scorer );		//  UnrealGame.DeathMatch.CheckScore
	 bool                      CheckMaxLives ( class APlayerReplicationInfo* Scorer );		//  UnrealGame.DeathMatch.CheckMaxLives
	 float                     RatePlayerStart ( class ANavigationPoint* N, unsigned char Team, class AController* Player );		//  UnrealGame.DeathMatch.RatePlayerStart
	 bool                      CheckLives ( class APlayerReplicationInfo* Scorer );		//  UnrealGame.DeathMatch.CheckLives
	 void                      ChangeHostExtraWork (  );                         		//  UnrealGame.DeathMatch.ChangeHostExtraWork
	 void                      GetUserBackToVehicle (  );                        		//  UnrealGame.DeathMatch.GetUserBackToVehicle
	 void                      ContinueMatch (  );                               		//  UnrealGame.DeathMatch.ContinueMatch
	 void                      RecoverHelicopter ( class APawn* P );             		//  UnrealGame.DeathMatch.RecoverHelicopter
	 void                      OnKillingDropOut ( class APawn* P );              		//  UnrealGame.DeathMatch.OnKillingDropOut
	 void                      CalcItemUsedTimeAll (  );                         		//  UnrealGame.DeathMatch.CalcItemUsedTimeAll
	 void                      eventForcedStartMatch (  );                       		// [ FUNC_Event ] UnrealGame.DeathMatch.ForcedStartMatch
	 void                      UpdateVehicles (  );                              		//  UnrealGame.DeathMatch.UpdateVehicles
	 void                      ProcessDefaultInv (  );                           		//  UnrealGame.DeathMatch.ProcessDefaultInv
	 void                      GameAddDefaultInventory ( class APawn* P );       		//  UnrealGame.DeathMatch.GameAddDefaultInventory
	 void                      AnnounceTimesUp (  );                             		//  UnrealGame.DeathMatch.AnnounceTimesUp
	 int                       GetNetWait (  );                                  		//  UnrealGame.DeathMatch.GetNetWait
	 void                      PlayStartupMessage (  );                          		//  UnrealGame.DeathMatch.PlayStartupMessage
	 void                      PlayEndOfMatchMessage (  );                       		//  UnrealGame.DeathMatch.PlayEndOfMatchMessage
	 class ANavigationPoint*   FindPlayerStart_TU ( class AController* Player, unsigned char inTeam, struct FString incomingName );		//  UnrealGame.DeathMatch.FindPlayerStart_TU
	 class ANavigationPoint*   FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName );		//  UnrealGame.DeathMatch.FindPlayerStart
	 void                      SetGameEndType ( struct FString Reason );         		//  UnrealGame.DeathMatch.SetGameEndType
	 void                      EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );		//  UnrealGame.DeathMatch.EndGame
	 void                      AnnounceMatchInfo (  );                           		//  UnrealGame.DeathMatch.AnnounceMatchInfo
	 void                      deleAnnounceMatchInfo (  );                       		//  UnrealGame.DeathMatch.deleAnnounceMatchInfo
	 void                      BalanceBots (  );                                 		//  UnrealGame.DeathMatch.BalanceBots
	 void                      StartMatch (  );                                  		//  UnrealGame.DeathMatch.StartMatch
	 class AUnrealTeamInfo*    FindTeamFor ( class AController* C );             		//  UnrealGame.DeathMatch.FindTeamFor
	 void                      InitPlacedBot ( class AController* C, class URosterEntry* R );		//  UnrealGame.DeathMatch.InitPlacedBot
	 void                      InitializeBot ( class ABot* NewBot, class AUnrealTeamInfo* BotTeam, class URosterEntry* Chosen );		//  UnrealGame.DeathMatch.InitializeBot
	 class ABot*               SpawnBot ( struct FString botname );              		//  UnrealGame.DeathMatch.SpawnBot
	 void                      PreLoadBot (  );                                  		//  UnrealGame.DeathMatch.PreLoadBot
	 void                      PreLoadNamedBot ( struct FString botname );       		//  UnrealGame.DeathMatch.PreLoadNamedBot
	 class AUnrealTeamInfo*    GetBotTeam2 ( bool forceTeam, int Team );         		//  UnrealGame.DeathMatch.GetBotTeam2
	 class AUnrealTeamInfo*    GetBotTeam ( int TeamBots );                      		//  UnrealGame.DeathMatch.GetBotTeam
	 void                      InitTeamSymbols (  );                             		//  UnrealGame.DeathMatch.InitTeamSymbols
	 void                      InitGameReplicationInfo (  );                     		//  UnrealGame.DeathMatch.InitGameReplicationInfo
	 void                      GetServerDetails ( struct FServerResponseLine* ServerState );		//  UnrealGame.DeathMatch.GetServerDetails
	 bool                      NeedPlayers (  );                                 		//  UnrealGame.DeathMatch.NeedPlayers
	 void                      Logout ( class AController* Exiting );            		//  UnrealGame.DeathMatch.Logout
	 bool                      AllowBecomeActivePlayer ( class APlayerController* P );		//  UnrealGame.DeathMatch.AllowBecomeActivePlayer
	 bool                      BecomeSpectator ( class APlayerController* P );   		//  UnrealGame.DeathMatch.BecomeSpectator
	 void                      ChangeName ( class AController* Other, struct FString S, bool bNameChange );		//  UnrealGame.DeathMatch.ChangeName
	 bool                      ShouldRespawn ( class APickup* Other );           		//  UnrealGame.DeathMatch.ShouldRespawn
	 bool                      CanSpectate ( class APlayerController* Viewer, bool bOnlySpectator, class AActor* ViewTarget );		//  UnrealGame.DeathMatch.CanSpectate
	 void                      AddDefaultInventory ( class APawn* PlayerPawn );  		//  UnrealGame.DeathMatch.AddDefaultInventory
	 bool                      AddBot ( struct FString botname );                		//  UnrealGame.DeathMatch.AddBot
	 void                      ForceAddBot (  );                                 		//  UnrealGame.DeathMatch.ForceAddBot
	 bool                      TooManyBots ( class AController* botToRemove );   		//  UnrealGame.DeathMatch.TooManyBots
	 void                      RestartPlayer ( class AController* aPlayer );     		//  UnrealGame.DeathMatch.RestartPlayer
	 void                      ChangeLoadOut ( class APlayerController* P, struct FString LoadoutName );		//  UnrealGame.DeathMatch.ChangeLoadOut
	 void                      eventPostLogin ( class APlayerController* NewPlayer );		// [ FUNC_Event ] UnrealGame.DeathMatch.PostLogin
	 class APlayerController*  eventLogin ( struct FString Portal, struct FString Options, struct FString* Error );		// [ FUNC_Event ] UnrealGame.DeathMatch.Login
	 bool                      AtCapacity ( bool bSpectator );                   		//  UnrealGame.DeathMatch.AtCapacity
	 void                      PlayWinMessage ( class APlayerController* Player, bool bWinner );		//  UnrealGame.DeathMatch.PlayWinMessage
	 bool                      CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );		//  UnrealGame.DeathMatch.CheckEndGame
	 bool                      eventCheckEndGameCondition (  );                  		// [ FUNC_Event ] UnrealGame.DeathMatch.CheckEndGameCondition
	 void                      AcceptInventory ( class APawn* PlayerPawn );      		//  UnrealGame.DeathMatch.AcceptInventory
	 int                       GetMinPlayers (  );                               		//  UnrealGame.DeathMatch.GetMinPlayers
	 void                      TweakSkill ( class ABot* B );                     		//  UnrealGame.DeathMatch.TweakSkill
	 void                      eventInitGame ( struct FString Options, struct FString* Error );		// [ FUNC_Event ] UnrealGame.DeathMatch.InitGame
	 void                      AddGameSpecificInventory ( class APawn* P );      		//  UnrealGame.DeathMatch.AddGameSpecificInventory
	 bool                      AllowTransloc (  );                               		//  UnrealGame.DeathMatch.AllowTransloc
	 bool                      NeverAllowTransloc (  );                          		//  UnrealGame.DeathMatch.NeverAllowTransloc
	 void                      InitLogging (  );                                 		//  UnrealGame.DeathMatch.InitLogging
	 int                       VehicleScoreKill ( class AController* Killer, class AController* Killed, class AVehicle* DestroyedVehicle, struct FString* KillInfo );		//  UnrealGame.DeathMatch.VehicleScoreKill
	 void                      Killed ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  UnrealGame.DeathMatch.Killed
	 void                      CheckReady (  );                                  		//  UnrealGame.DeathMatch.CheckReady
	 bool                      JustStarted ( float t );                          		//  UnrealGame.DeathMatch.JustStarted
	 void                      Reset (  );                                       		//  UnrealGame.DeathMatch.Reset
	 void                      OverrideInitialBots (  );                         		//  UnrealGame.DeathMatch.OverrideInitialBots
	 void                      PostBeginPlay (  );                               		//  UnrealGame.DeathMatch.PostBeginPlay
	 int                       GetTimeSecondsLeft (  );                          		//  UnrealGame.DeathMatch.GetTimeSecondsLeft
	 void                      SendBgmMessageBeginMatch (  );                    		//  UnrealGame.DeathMatch.SendBgmMessageBeginMatch
}; // Size: 0x0770

// Class UnrealGame.RosterEntry
class DLL_IMPORT URosterEntry : public UObject
{
public:
	class UClass*                                      PawnClass;                                        		// 0x002C ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     PawnClassName;                                    		// 0x0030 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     PlayerName;                                       		// 0x003C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     ModifiedPlayerName;                               		// 0x0048 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     VoiceTypeName;                                    		// 0x0054 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned char                                      Orders;                                           		// 0x0060 ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      bTaken:1;                                         		// 0x0064 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	class UClass*                                      FavoriteWeapon;                                   		// 0x0068 ( 0x0004 ) [ CPF_Edit ]
	float                                              Aggressiveness;                                   		// 0x006C ( 0x0004 ) [ CPF_Edit ]
	float                                              Accuracy;                                         		// 0x0070 ( 0x0004 ) [ CPF_Edit ]
	float                                              CombatStyle;                                      		// 0x0074 ( 0x0004 ) [ CPF_Edit ]
	float                                              StrafingAbility;                                  		// 0x0078 ( 0x0004 ) [ CPF_Edit ]
	float                                              Tactics;                                          		// 0x007C ( 0x0004 ) [ CPF_Edit ]
	float                                              ReactionTime;                                     		// 0x0080 ( 0x0004 ) [ CPF_Edit ]
	float                                              Jumpiness;                                        		// 0x0084 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bJumpy:1;                                         		// 0x0088 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      InitBot ( class ABot* B );                        		//  UnrealGame.RosterEntry.InitBot
	 bool                      RecommendAttack (  );                             		//  UnrealGame.RosterEntry.RecommendAttack
	 bool                      RecommendFreelance (  );                          		//  UnrealGame.RosterEntry.RecommendFreelance
	 bool                      RecommendDefense (  );                            		//  UnrealGame.RosterEntry.RecommendDefense
	 bool                      NoRecommendation (  );                            		//  UnrealGame.RosterEntry.NoRecommendation
	 bool                      RecommendSupport (  );                            		//  UnrealGame.RosterEntry.RecommendSupport
	 void                      SetOrders ( unsigned char Position );             		//  UnrealGame.RosterEntry.SetOrders
	 void                      PrecacheRosterFor ( class AUnrealTeamInfo* t );   		//  UnrealGame.RosterEntry.PrecacheRosterFor
	 void                      Init (  );                                        		//  UnrealGame.RosterEntry.Init
}; // Size: 0x0060

// Class UnrealGame.UnrealPawn
class DLL_IMPORT AUnrealPawn : public APawn
{
public:
	unsigned long                                      bNoDefaultInventory:1;                            		// 0x0FB4 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bAcceptAllInventory:1;                            		// 0x0FB4 ( 0x0004 )  [0x00000002]
	unsigned long                                      bIsSquadLeader:1;                                 		// 0x0FB4 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bSoakDebug:1;                                     		// 0x0FB4 ( 0x0004 )  [0x00000008]
	unsigned long                                      bKeepTaunting:1;                                  		// 0x0FB4 ( 0x0004 )  [0x00000010]
	unsigned long                                      bPlayOwnFootsteps:1;                              		// 0x0FB4 ( 0x0004 )  [0x00000020]
	unsigned char                                      LoadOut;                                          		// 0x0FB8 ( 0x0001 ) 
	unsigned char                                      SelectedEquipment[ 0x10 ];                        		// 0x0FB9 ( 0x0010 ) 
	struct FString                                     RequiredEquipment[ 0x10 ];                        		// 0x0FCC ( 0x00C0 ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     OptionalEquipment[ 0x10 ];                        		// 0x108C ( 0x00C0 ) [ CPF_NeedCtorLink ]
	float                                              AttackSuitability;                                		// 0x114C ( 0x0004 ) 
	float                                              LastFootStepTime;                                 		// 0x1150 ( 0x0004 ) 
	unsigned char                                      CurrentDir;                                       		// 0x1154 ( 0x0001 ) 
	struct FVector                                     GameObjOffset;                                    		// 0x1158 ( 0x000C ) 
	struct FRotator                                    GameObjRot;                                       		// 0x1164 ( 0x000C ) 
	struct FName                                       SquadName;                                        		// 0x1170 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     VoiceType;                                        		// 0x1174 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bPlayerShadows:1;                                 		// 0x1180 ( 0x0004 )  [0x00000001]
	unsigned long                                      bBlobShadow:1;                                    		// 0x1180 ( 0x0004 )  [0x00000002]
	int                                                Spree;                                            		// 0x1184 ( 0x0004 ) 
	int                                                iCheckBreath;                                     		// 0x1188 ( 0x0004 ) 

	// UScript Functions
	 void                      SpawnGibs ( struct FRotator HitRotation, float ChunkPerterbation );		// [ FUNC_Simulated ] UnrealGame.UnrealPawn.SpawnGibs
	 void                      ChunkUp ( struct FRotator HitRotation, float ChunkPerterbation );		// [ FUNC_Simulated ] UnrealGame.UnrealPawn.ChunkUp
	 void                      PlayFootStep ( int side );                        		// [ FUNC_Simulated ] UnrealGame.UnrealPawn.PlayFootStep
	 void                      IncrementSpree (  );                              		//  UnrealGame.UnrealPawn.IncrementSpree
	 int                       GetSpree (  );                                    		//  UnrealGame.UnrealPawn.GetSpree
	 void                      TakeDrowningDamage (  );                          		//  UnrealGame.UnrealPawn.TakeDrowningDamage
	 void                      SetMovementPhysics (  );                          		//  UnrealGame.UnrealPawn.SetMovementPhysics
	 class URosterEntry*       GetPlacedRoster (  );                             		//  UnrealGame.UnrealPawn.GetPlacedRoster
	 void                      PostNetBeginPlay (  );                            		// [ FUNC_Simulated ] UnrealGame.UnrealPawn.PostNetBeginPlay
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] UnrealGame.UnrealPawn.PostBeginPlay
	 bool                      Dodge ( unsigned char DoubleClickMove );          		//  UnrealGame.UnrealPawn.Dodge
	 bool                      PerformDodge ( unsigned char DoubleClickMove, struct FVector Dir, struct FVector Cross );		//  UnrealGame.UnrealPawn.PerformDodge
	 class AInventory*         CreateInventory ( struct FString InventoryClassName );		//  UnrealGame.UnrealPawn.CreateInventory
	 class AInventory*         CustomCreateInventory ( struct FString WeaponClassName );		//  UnrealGame.UnrealPawn.CustomCreateInventory
	 void                      AddDefaultInventory ( bool bQuickslotChange );    		//  UnrealGame.UnrealPawn.AddDefaultInventory
	 void                      AddDefaultInventoryDOA ( bool bQuickslotChange ); 		//  UnrealGame.UnrealPawn.AddDefaultInventoryDOA
	 bool                      IsInLoadout ( class UClass* InventoryClass );     		//  UnrealGame.UnrealPawn.IsInLoadout
	 void                      PlayBreathSounds (  );                            		// [ FUNC_Simulated ] UnrealGame.UnrealPawn.PlayBreathSounds
	 void                      CheckBob ( float DeltaTime, struct FVector Y );   		//  UnrealGame.UnrealPawn.CheckBob
	 struct FName              GetWeaponBoneFor ( class AInventory* i );         		//  UnrealGame.UnrealPawn.GetWeaponBoneFor
	 struct FString            GetDebugName (  );                                		//  UnrealGame.UnrealPawn.GetDebugName
	 void                      eventSetAnimAction ( struct FName NewAction );    		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.UnrealPawn.SetAnimAction
	 void                      ShouldUnCrouch (  );                              		// [ FUNC_Simulated ] UnrealGame.UnrealPawn.ShouldUnCrouch
	 void                      EndJump (  );                                     		//  UnrealGame.UnrealPawn.EndJump
	 void                      HoldGameObject ( class AGameObject* gameObj, struct FName GameObjBone );		//  UnrealGame.UnrealPawn.HoldGameObject
	 void                      HoldFlag ( class AActor* FlagActor );             		//  UnrealGame.UnrealPawn.HoldFlag
	 struct FVector            BotDodge ( struct FVector Dir );                  		//  UnrealGame.UnrealPawn.BotDodge
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] UnrealGame.UnrealPawn.DisplayDebug
	 void                      gibbedBy ( class AActor* Other );                 		//  UnrealGame.UnrealPawn.gibbedBy
	 bool                      FindValidTaunt ( struct FName* Sequence );        		// [ FUNC_Simulated ] UnrealGame.UnrealPawn.FindValidTaunt
	 void                      DropFlag ( struct FString sReason );              		//  UnrealGame.UnrealPawn.DropFlag
}; // Size: 0x01D8

// Class UnrealGame.JumpSpot
class DLL_IMPORT AJumpSpot : public AJumpDest
{
public:
	unsigned long                                      bOnlyTranslocator:1;                              		// 0x0538 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bRealOnlyTranslocator:1;                          		// 0x0538 ( 0x0004 )  [0x00000002]
	unsigned long                                      bNeverImpactJump:1;                               		// 0x0538 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bNoLowGrav:1;                                     		// 0x0538 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bForceAllowDoubleJumping:1;                       		// 0x0538 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bDodgeUp:1;                                       		// 0x0538 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	struct FName                                       TranslocTargetTag;                                		// 0x053C ( 0x0004 ) [ CPF_Edit ]
	float                                              TranslocZOffset;                                  		// 0x0540 ( 0x0004 ) [ CPF_Edit ]
	class AActor*                                      TranslocTarget;                                   		// 0x0544 ( 0x0004 ) 
	struct FVector                                     CachedSpeed[ 0x08 ];                              		// 0x0548 ( 0x0060 ) 

	// UScript Functions
	 bool                      TryTranslocator ( class APawn* Other );           		//  UnrealGame.JumpSpot.TryTranslocator
	 bool                      eventSuggestMovePreparation ( class APawn* Other );		// [ FUNC_Event ] UnrealGame.JumpSpot.SuggestMovePreparation
	 int                       eventSpecialCost ( class APawn* Other, class UReachSpec* Path );		// [ FUNC_Event ] UnrealGame.JumpSpot.SpecialCost
	 float                     EffectiveDoubleJump ( class UReachSpec* Path );   		//  UnrealGame.JumpSpot.EffectiveDoubleJump
	 bool                      CanDoubleJump ( class APawn* Other );             		//  UnrealGame.JumpSpot.CanDoubleJump
	 bool                      CanMakeJump ( class APawn* Other, float JumpHeight, float GroundSpeed, int Num, class AActor* Start, bool bForceCheck );		//  UnrealGame.JumpSpot.CanMakeJump
	 void                      PostBeginPlay (  );                               		//  UnrealGame.JumpSpot.PostBeginPlay
}; // Size: 0x0070

// Class UnrealGame.GameObjective
class DLL_IMPORT AGameObjective : public AJumpSpot
{
public:
	float                                              DrawDistThresHold;                                		// 0x05A8 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bUsePriorityOnHUD:1;                              		// 0x05AC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bOverrideZoneCheck:1;                             		// 0x05AC ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bOverrideVisibilityCheck:1;                       		// 0x05AC ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bReplicateObjective:1;                            		// 0x05AC ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bAnnounceNextObjective:1;                         		// 0x05AC ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bMustBoardVehicleFirst:1;                         		// 0x05AC ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bBotOnlyObjective:1;                              		// 0x05AC ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bInitiallyActive:1;                               		// 0x05AC ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      bActive:1;                                        		// 0x05AC ( 0x0004 )  [0x00000100][ CPF_Net ]
	unsigned long                                      bTriggerOnceOnly:1;                               		// 0x05AC ( 0x0004 )  [0x00000200][ CPF_Edit ]
	unsigned long                                      bOptionalObjective:1;                             		// 0x05AC ( 0x0004 )  [0x00000400][ CPF_Edit ]
	unsigned long                                      bIgnoredObjective:1;                              		// 0x05AC ( 0x0004 )  [0x00000800]
	unsigned long                                      bDisabled:1;                                      		// 0x05AC ( 0x0004 )  [0x00001000][ CPF_Net ]
	unsigned long                                      bOldDisabled:1;                                   		// 0x05AC ( 0x0004 )  [0x00002000]
	unsigned long                                      bFirstObjective:1;                                		// 0x05AC ( 0x0004 )  [0x00004000]
	unsigned long                                      bTeamControlled:1;                                		// 0x05AC ( 0x0004 )  [0x00008000][ CPF_Edit ]
	unsigned long                                      bAccruePoints:1;                                  		// 0x05AC ( 0x0004 )  [0x00010000][ CPF_Edit ]
	unsigned long                                      bHasShootSpots:1;                                 		// 0x05AC ( 0x0004 )  [0x00020000]
	unsigned long                                      bSoundsPrecached:1;                               		// 0x05AC ( 0x0004 )  [0x00040000]
	unsigned long                                      bIsCritical:1;                                    		// 0x05AC ( 0x0004 )  [0x00080000][ CPF_Net ]
	unsigned long                                      bHighlightPhysicalObjective:1;                    		// 0x05AC ( 0x0004 )  [0x00100000][ CPF_Net ]
	unsigned long                                      bOldHighlightPhysicalObjective:1;                 		// 0x05AC ( 0x0004 )  [0x00200000]
	unsigned long                                      bIsBeingAttacked:1;                               		// 0x05AC ( 0x0004 )  [0x00400000]
	unsigned long                                      bClearInstigator:1;                               		// 0x05AC ( 0x0004 )  [0x00800000]
	unsigned long                                      bOldCritical:1;                                   		// 0x05AC ( 0x0004 )  [0x01000000]
	unsigned long                                      bPlayCriticalAssaultAlarm:1;                      		// 0x05AC ( 0x0004 )  [0x02000000][ CPF_Edit ]
	unsigned char                                      DefenderTeamIndex;                                		// 0x05B0 ( 0x0001 ) [ CPF_Edit | CPF_Net ]
	unsigned char                                      StartTeam;                                        		// 0x05B1 ( 0x0001 ) 
	unsigned char                                      DefensePriority;                                  		// 0x05B2 ( 0x0001 ) [ CPF_Edit ]
	int                                                Score;                                            		// 0x05B4 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       DefenseScriptTags;                                		// 0x05B8 ( 0x0004 ) [ CPF_Edit ]
	class AUnrealScriptedSequence*                     DefenseScripts;                                   		// 0x05BC ( 0x0004 ) 
	struct FString                                     ObjectiveName;                                    		// 0x05C0 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DestructionMessage;                               		// 0x05CC ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     LocationPrefix;                                   		// 0x05D8 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     LocationPostfix;                                  		// 0x05E4 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ObjectiveStringPrefix;                            		// 0x05F0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ObjectiveStringSuffix;                            		// 0x05FC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class AGameObjective*                              NextObjective;                                    		// 0x0608 ( 0x0004 ) 
	class ASquadAI*                                    DefenseSquad;                                     		// 0x060C ( 0x0004 ) 
	class AAssaultPath*                                AlternatePaths;                                   		// 0x0610 ( 0x0004 ) 
	struct FName                                       AreaVolumeTag;                                    		// 0x0614 ( 0x0004 ) [ CPF_Edit ]
	class AVolume*                                     MyBaseVolume;                                     		// 0x0618 ( 0x0004 ) 
	float                                              BaseExitTime;                                     		// 0x061C ( 0x0004 ) [ CPF_Edit ]
	float                                              BaseRadius;                                       		// 0x0620 ( 0x0004 ) [ CPF_Edit ]
	float                                              BotDamageScaling;                                 		// 0x0624 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       CriticalObjectiveVolumeTag;                       		// 0x0628 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   ObjectiveTypeIcon;                                		// 0x062C ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      ObjectivePriority;                                		// 0x0630 ( 0x0001 ) 
	float                                              LastDrawTime;                                     		// 0x0634 ( 0x0004 ) 
	float                                              DrawTime;                                         		// 0x0638 ( 0x0004 ) 
	struct FString                                     ObjectiveDescription;                             		// 0x063C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Objective_Info_Attacker;                          		// 0x0648 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Objective_Info_Defender;                          		// 0x0654 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     UseDescription;                                   		// 0x0660 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Announcer_DisabledObjective;                      		// 0x066C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Announcer_ObjectiveInfo;                          		// 0x0678 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Announcer_DefendObjective;                        		// 0x0684 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class APlayerReplicationInfo*                      DisabledBy;                                       		// 0x0690 ( 0x0004 ) 
	class UMaterial*                                   HighlightOverlay[ 0x02 ];                         		// 0x0694 ( 0x0008 ) 
	class TArray< class AActor* >                      PhysicalObjectiveActors;                          		// 0x069C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FName                                       PhysicalObjectiveActorsTag;                       		// 0x06A8 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       EndCameraTag;                                     		// 0x06AC ( 0x0004 ) [ CPF_Edit ]
	class AActor*                                      EndCamera;                                        		// 0x06B0 ( 0x0004 ) 
	class AController*                                 DelayedDamageInstigatorController;                		// 0x06B4 ( 0x0004 ) 
	struct FName                                       VehiclePathName;                                  		// 0x06B8 ( 0x0004 ) [ CPF_Edit ]
	class ANavigationPoint*                            VehiclePath;                                      		// 0x06BC ( 0x0004 ) 
	int                                                ObjectiveDisabledTime;                            		// 0x06C0 ( 0x0004 ) [ CPF_Net ]
	float                                              SavedObjectiveProgress;                           		// 0x06C4 ( 0x0004 ) [ CPF_Net ]
	class TArray< struct FScorerRecord >               Scorers;                                          		// 0x06C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ApplyGameInfo;                                    		// 0x06D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bCanActive:1;                                     		// 0x06E0 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      SetTeam ( unsigned char TeamIndex );              		//  UnrealGame.GameObjective.SetTeam
	 void                      AwardAssaultScore ( int Score );                  		//  UnrealGame.GameObjective.AwardAssaultScore
	 void                      ShareScore ( int Score, struct FString EventDesc );		//  UnrealGame.GameObjective.ShareScore
	 void                      AddScorer ( class AController* C, float Pct );    		//  UnrealGame.GameObjective.AddScorer
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] UnrealGame.GameObjective.UpdatePrecacheMaterials
	 float                     GetObjectiveProgress (  );                        		// [ FUNC_Simulated ] UnrealGame.GameObjective.GetObjectiveProgress
	 void                      SetObjectiveOverlay ( bool bShow );               		// [ FUNC_Simulated ] UnrealGame.GameObjective.SetObjectiveOverlay
	 void                      PostNetReceive (  );                              		// [ FUNC_Simulated ] UnrealGame.GameObjective.PostNetReceive
	 void                      HighlightPhysicalObjective ( bool bShow );        		//  UnrealGame.GameObjective.HighlightPhysicalObjective
	 void                      PrecacheAnnouncer ( class AAnnouncerVoice* V, bool bRewardSounds );		// [ FUNC_Simulated ] UnrealGame.GameObjective.PrecacheAnnouncer
	 void                      Trigger ( class AActor* Other, class APawn* Instigator );		//  UnrealGame.GameObjective.Trigger
	 void                      CheckPlayCriticalAlarm (  );                      		//  UnrealGame.GameObjective.CheckPlayCriticalAlarm
	 void                      SetCriticalStatus ( bool bNewCriticalStatus );    		//  UnrealGame.GameObjective.SetCriticalStatus
	 bool                      IsCritical (  );                                  		// [ FUNC_Simulated ] UnrealGame.GameObjective.IsCritical
	 bool                      IsActive (  );                                    		// [ FUNC_Simulated ] UnrealGame.GameObjective.IsActive
	 void                      SetActive ( bool bActiveStatus );                 		//  UnrealGame.GameObjective.SetActive
	 void                      Reset (  );                                       		//  UnrealGame.GameObjective.Reset
	 bool                      BetterObjectiveThan ( class AGameObjective* Best, unsigned char DesiredTeamNum, unsigned char RequesterTeamNum );		//  UnrealGame.GameObjective.BetterObjectiveThan
	 void                      PlayDestructionMessage (  );                      		// [ FUNC_Simulated ] UnrealGame.GameObjective.PlayDestructionMessage
	 void                      DisableObjective ( class APawn* Instigator );     		//  UnrealGame.GameObjective.DisableObjective
	 void                      CompleteObjective ( class APawn* Instigator );    		//  UnrealGame.GameObjective.CompleteObjective
	 int                       GetNumDefenders (  );                             		//  UnrealGame.GameObjective.GetNumDefenders
	 bool                      TellBotHowToDisable ( class ABot* B );            		//  UnrealGame.GameObjective.TellBotHowToDisable
	 struct FString            GetHumanReadableName (  );                        		// [ FUNC_Simulated ] UnrealGame.GameObjective.GetHumanReadableName
	 bool                      OwnsDefenseScript ( class AUnrealScriptedSequence* S );		//  UnrealGame.GameObjective.OwnsDefenseScript
	 void                      Timer (  );                                       		//  UnrealGame.GameObjective.Timer
	 bool                      NearObjective ( class APawn* P );                 		//  UnrealGame.GameObjective.NearObjective
	 bool                      BotNearObjective ( class ABot* B );               		//  UnrealGame.GameObjective.BotNearObjective
	 void                      PlayAlarm (  );                                   		//  UnrealGame.GameObjective.PlayAlarm
	 void                      UpdateLocationName (  );                          		// [ FUNC_Simulated ] UnrealGame.GameObjective.UpdateLocationName
	 void                      ForceBegin (  );                                  		//  UnrealGame.GameObjective.ForceBegin
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] UnrealGame.GameObjective.PostBeginPlay
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.GameObjective.PreBeginPlay
	 bool                      CanDoubleJump ( class APawn* Other );             		//  UnrealGame.GameObjective.CanDoubleJump
	 float                     GetDifficulty (  );                               		//  UnrealGame.GameObjective.GetDifficulty
}; // Size: 0x013C

// Class UnrealGame.GameObject
class DLL_IMPORT AGameObject : public ADecoration
{
public:
	unsigned long                                      bHome:1;                                          		// 0x0408 ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bHeld:1;                                          		// 0x0408 ( 0x0004 )  [0x00000002][ CPF_Net ]
	unsigned long                                      bDisabled:1;                                      		// 0x0408 ( 0x0004 )  [0x00000004]
	unsigned long                                      bLastSecondSave:1;                                		// 0x0408 ( 0x0004 )  [0x00000008]
	class AUnrealPawn*                                 Holder;                                           		// 0x040C ( 0x0004 ) 
	class ATeamPlayerReplicationInfo*                  HolderPRI;                                        		// 0x0410 ( 0x0004 ) [ CPF_Net ]
	class AGameObjective*                              HomeBase;                                         		// 0x0414 ( 0x0004 ) 
	float                                              TakenTime;                                        		// 0x0418 ( 0x0004 ) 
	float                                              MaxDropTime;                                      		// 0x041C ( 0x0004 ) 
	class AController*                                 FirstTouch;                                       		// 0x0420 ( 0x0004 ) 
	class TArray< class AController* >                 Assists;                                          		// 0x0424 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FName                                       GameObjBone;                                      		// 0x0430 ( 0x0004 ) 
	struct FVector                                     GameObjOffset;                                    		// 0x0434 ( 0x000C ) 
	struct FRotator                                    GameObjRot;                                       		// 0x0440 ( 0x000C ) 
	class ATeamInfo*                                   OldTeam;                                          		// 0x044C ( 0x0004 ) 

	// UScript Functions
	 void                      LogReturned (  );                                 		//  UnrealGame.GameObject.LogReturned
	 void                      LogDropped (  );                                  		//  UnrealGame.GameObject.LogDropped
	 void                      LogTaken ( class AController* C );                		//  UnrealGame.GameObject.LogTaken
	 void                      BaseChange (  );                                  		// [ FUNC_Simulated ] UnrealGame.GameObject.BaseChange
	 void                      Landed ( struct FVector HitNormall );             		//  UnrealGame.GameObject.Landed
	 void                      eventNotReachableBy ( class APawn* P );           		// [ FUNC_Event ] UnrealGame.GameObject.NotReachableBy
	 void                      eventFellOutOfWorld ( unsigned char KillType );   		// [ FUNC_Event ] UnrealGame.GameObject.FellOutOfWorld
	 void                      Touch ( class AActor* Other );                    		//  UnrealGame.GameObject.Touch
	 bool                      ValidHolder ( class AActor* Other );              		//  UnrealGame.GameObject.ValidHolder
	 bool                      IsHome (  );                                      		//  UnrealGame.GameObject.IsHome
	 class AActor*             Position (  );                                    		//  UnrealGame.GameObject.Position
	 void                      SetDisable ( bool Disable );                      		//  UnrealGame.GameObject.SetDisable
	 void                      ClearHolder (  );                                 		//  UnrealGame.GameObject.ClearHolder
	 void                      CalcSetHome (  );                                 		//  UnrealGame.GameObject.CalcSetHome
	 void                      SendHomeDisabled ( float TimeOut );               		//  UnrealGame.GameObject.SendHomeDisabled
	 void                      SendHome (  );                                    		//  UnrealGame.GameObject.SendHome
	 void                      Drop ( struct FVector NewVel, struct FString sReason );		//  UnrealGame.GameObject.Drop
	 void                      Score (  );                                       		//  UnrealGame.GameObject.Score
	 void                      SetHolder ( class AController* C );               		//  UnrealGame.GameObject.SetHolder
	 bool                      CanBePickedUpBy ( class APawn* P );               		//  UnrealGame.GameObject.CanBePickedUpBy
	 bool                      CanBeThrownBy ( class APawn* P );                 		//  UnrealGame.GameObject.CanBeThrownBy
	 void                      ForceBegin (  );                                  		//  UnrealGame.GameObject.ForceBegin
	 void                      PostBeginPlay (  );                               		//  UnrealGame.GameObject.PostBeginPlay
}; // Size: 0x0048

// Class UnrealGame.TeamPlayerReplicationInfo
class DLL_IMPORT ATeamPlayerReplicationInfo : public APlayerReplicationInfo
{
public:
	class UClass*                                      LocalStatsScreenClass;                            		// 0x05AC ( 0x0004 ) [ CPF_Net ]
	class ASquadAI*                                    Squad;                                            		// 0x05B0 ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      bHolding:1;                                       		// 0x05B4 ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bFirstBlood:1;                                    		// 0x05B4 ( 0x0004 )  [0x00000002]
	class TArray< struct FWeaponStats >                WeaponStatsArray;                                 		// 0x05B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FVehicleStats >               VehicleStatsArray;                                		// 0x05C4 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                FlagTouches;                                      		// 0x05D0 ( 0x0004 ) 
	int                                                FlagReturns;                                      		// 0x05D4 ( 0x0004 ) 
	unsigned char                                      Spree[ 0x06 ];                                    		// 0x05D8 ( 0x0006 ) 
	unsigned char                                      MultiKills[ 0x07 ];                               		// 0x05DE ( 0x0007 ) 
	int                                                Suicides;                                         		// 0x05E8 ( 0x0004 ) 
	int                                                flakcount;                                        		// 0x05EC ( 0x0004 ) 
	int                                                combocount;                                       		// 0x05F0 ( 0x0004 ) 
	int                                                headcount;                                        		// 0x05F4 ( 0x0004 ) 
	int                                                ranovercount;                                     		// 0x05F8 ( 0x0004 ) 
	int                                                DaredevilPoints;                                  		// 0x05FC ( 0x0004 ) 
	unsigned char                                      Combos[ 0x05 ];                                   		// 0x0600 ( 0x0005 ) 

	// UScript Functions
	 void                      AddVehicleDeathDriving ( class UClass* V );       		//  UnrealGame.TeamPlayerReplicationInfo.AddVehicleDeathDriving
	 void                      AddVehicleDeath ( class UClass* D );              		//  UnrealGame.TeamPlayerReplicationInfo.AddVehicleDeath
	 void                      AddVehicleKill ( class UClass* D );               		//  UnrealGame.TeamPlayerReplicationInfo.AddVehicleKill
	 void                      UpdateVehicleStats ( class ATeamPlayerReplicationInfo* PRI, class UClass* V, int newKills, int newDeaths, int newDeathsDriving );		// [ FUNC_Simulated ] UnrealGame.TeamPlayerReplicationInfo.UpdateVehicleStats
	 void                      AddWeaponDeathHolding ( class UClass* W );        		//  UnrealGame.TeamPlayerReplicationInfo.AddWeaponDeathHolding
	 void                      AddWeaponDeath ( class UClass* D );               		//  UnrealGame.TeamPlayerReplicationInfo.AddWeaponDeath
	 void                      AddWeaponKill ( class UClass* D );                		//  UnrealGame.TeamPlayerReplicationInfo.AddWeaponKill
	 void                      UpdateWeaponStats ( class ATeamPlayerReplicationInfo* PRI, class UClass* W, int newKills, int newDeaths, int newDeathsHolding );		// [ FUNC_Simulated ] UnrealGame.TeamPlayerReplicationInfo.UpdateWeaponStats
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] UnrealGame.TeamPlayerReplicationInfo.PostBeginPlay
}; // Size: 0x005C

// Class UnrealGame.SpecialVehicleObjective
class DLL_IMPORT ASpecialVehicleObjective : public ARoadPathNode
{
public:
	class TArray< class UClass* >                      AccessibleVehicleClasses;                         		// 0x0494 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FName                                       AssociatedActorTag;                               		// 0x04A0 ( 0x0004 ) [ CPF_Edit ]
	float                                              MaxDist;                                          		// 0x04A4 ( 0x0004 ) [ CPF_Edit ]
	class AActor*                                      AssociatedActor;                                  		// 0x04A8 ( 0x0004 ) 
	unsigned long                                      bEnabled:1;                                       		// 0x04AC ( 0x0004 )  [0x00000001]
	class ASpecialVehicleObjective*                    NextSpecialVehicleObjective;                      		// 0x04B0 ( 0x0004 ) 
	class APawn*                                       TeamOwner[ 0x04 ];                                		// 0x04B4 ( 0x0010 ) 

	// UScript Functions
	 void                      Reset (  );                                       		//  UnrealGame.SpecialVehicleObjective.Reset
	 void                      UnTrigger ( class AActor* Other, class APawn* EventInstigator );		//  UnrealGame.SpecialVehicleObjective.UnTrigger
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  UnrealGame.SpecialVehicleObjective.Trigger
	 bool                      IsAccessibleTo ( class APawn* BotPawn );          		//  UnrealGame.SpecialVehicleObjective.IsAccessibleTo
	 void                      PostBeginPlay (  );                               		//  UnrealGame.SpecialVehicleObjective.PostBeginPlay
}; // Size: 0x0030

// Class UnrealGame.DMStatsScreen
class DLL_IMPORT ADMStatsScreen : public AScoreBoard
{
public:
	class AUnrealPlayer*                               PlayerOwner;                                      		// 0x042C ( 0x0004 ) 
	class ATeamPlayerReplicationInfo*                  PRI;                                              		// 0x0430 ( 0x0004 ) 
	struct FString                                     StatsString;                                      		// 0x0434 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     AwardsString;                                     		// 0x0440 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     FirstBloodString;                                 		// 0x044C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SuicidesString;                                   		// 0x0458 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     LongestSpreeString;                               		// 0x0464 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     FlakMonkey;                                       		// 0x0470 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ComboWhore;                                       		// 0x047C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     HeadHunter;                                       		// 0x0488 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     RoadRampage;                                      		// 0x0494 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DaredevilString;                                  		// 0x04A0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     FlagTouches;                                      		// 0x04AC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     FlagReturns;                                      		// 0x04B8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     GoalsScored;                                      		// 0x04C4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     HatTrick;                                         		// 0x04D0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     KillString[ 0x07 ];                               		// 0x04DC ( 0x0054 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     AdrenalineCombos;                                 		// 0x0530 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ComboNames[ 0x05 ];                               		// 0x053C ( 0x003C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     KillsByWeapon;                                    		// 0x0578 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     CombatResults;                                    		// 0x0584 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Kills;                                            		// 0x0590 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Deaths;                                           		// 0x059C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Suicides;                                         		// 0x05A8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NextStatsString;                                  		// 0x05B4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponString;                                     		// 0x05C0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DeathsBy;                                         		// 0x05CC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     deathsholding;                                    		// 0x05D8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EfficiencyString;                                 		// 0x05E4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WaitingForStats;                                  		// 0x05F0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     KillsByVehicle;                                   		// 0x05FC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     VehicleString;                                    		// 0x0608 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              LastUpdateTime;                                   		// 0x0614 ( 0x0004 ) 
	class UMaterial*                                   BoxMaterial;                                      		// 0x0618 ( 0x0004 ) 

	// UScript Functions
	 void                      NextStats (  );                                   		//  UnrealGame.DMStatsScreen.NextStats
	 void                      eventDrawScoreboard ( class UCanvas* C );         		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.DMStatsScreen.DrawScoreboard
	 struct FString            MakeColorCode ( class FColor NewColor );          		//  UnrealGame.DMStatsScreen.MakeColorCode
}; // Size: 0x01F0

// Class UnrealGame.UnrealVoiceReplicationInfo
class DLL_IMPORT AUnrealVoiceReplicationInfo : public AVoiceChatReplicationInfo
{
public:
	class UClass*                                      ChatBroadcastClass;                               		// 0x0514 ( 0x0004 ) [ CPF_Edit ]
	class AUnrealChatHandler*                          ChatBroadcastHandler;                             		// 0x0518 ( 0x0004 ) 

	// UScript Functions
	 void                      DestroyVoiceChannel ( class AVoiceChatRoom* Channel );		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.DestroyVoiceChannel
	 class AVoiceChatRoom*     CreateNewVoiceChannel ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.CreateNewVoiceChannel
	 bool                      IsMember ( class APlayerReplicationInfo* TestPRI, int ChannelIndex, bool bNoCascade );		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.IsMember
	 int                       GetPlayerChannelCount (  );                       		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.GetPlayerChannelCount
	 int                       GetPublicChannelCount ( bool bSingleTeam );       		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.GetPublicChannelCount
	 class TArray< class AVoiceChatRoom* > GetPlayerChannels (  );                           		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.GetPlayerChannels
	 class TArray< class AVoiceChatRoom* > GetPublicChannels (  );                           		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.GetPublicChannels
	 int                       eventGetChannelIndex ( struct FString ChannelTitle, int TeamIndex );		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.UnrealVoiceReplicationInfo.GetChannelIndex
	 int                       eventGetChannelCount (  );                        		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.UnrealVoiceReplicationInfo.GetChannelCount
	 class TArray< class AVoiceChatRoom* > GetChannels (  );                                 		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.GetChannels
	 class TArray< int >       GetMemberChannels ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.GetMemberChannels
	 class TArray< int >       GetChannelMembersAt ( int Index );                		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.GetChannelMembersAt
	 class TArray< int >       GetChannelMembers ( struct FString ChatRoomName, int TeamIndex );		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.GetChannelMembers
	 class AVoiceChatRoom*     GetChannelAt ( int Index );                       		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.GetChannelAt
	 class AVoiceChatRoom*     GetChannel ( struct FString ChatRoomName, int TeamIndex );		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.GetChannel
	 bool                      RemoveVoiceChannel ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.RemoveVoiceChannel
	 class AVoiceChatRoom*     AddVoiceChannel ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.AddVoiceChannel
	 bool                      LeaveChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI );		//  UnrealGame.UnrealVoiceReplicationInfo.LeaveChannel
	 unsigned char             JoinChannelAt ( int ChannelIndex, class APlayerReplicationInfo* PRI, struct FString Password );		//  UnrealGame.UnrealVoiceReplicationInfo.JoinChannelAt
	 unsigned char             JoinChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI, struct FString Password );		//  UnrealGame.UnrealVoiceReplicationInfo.JoinChannel
	 bool                      CanJoinChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.CanJoinChannel
	 void                      RemoveVoiceChatter ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.RemoveVoiceChatter
	 void                      AddVoiceChatter ( class APlayerReplicationInfo* NewPRI );		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.AddVoiceChatter
	 void                      InitChannels (  );                                		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.InitChannels
	 void                      eventSetGRI ( class AGameReplicationInfo* NewGRI );		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.UnrealVoiceReplicationInfo.SetGRI
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.UnrealVoiceReplicationInfo.PostNetBeginPlay
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] UnrealGame.UnrealVoiceReplicationInfo.PostBeginPlay
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] UnrealGame.UnrealVoiceReplicationInfo.DisplayDebug
}; // Size: 0x0008

// Class UnrealGame.Bot
class DLL_IMPORT ABot : public AScriptedController
{
public:
	unsigned long                                      bCanFire:1;                                       		// 0x063C ( 0x0004 )  [0x00000001]
	unsigned long                                      bStrafeDir:1;                                     		// 0x063C ( 0x0004 )  [0x00000002]
	unsigned long                                      bLeadTarget:1;                                    		// 0x063C ( 0x0004 )  [0x00000004]
	unsigned long                                      bChangeDir:1;                                     		// 0x063C ( 0x0004 )  [0x00000008]
	unsigned long                                      bFrustrated:1;                                    		// 0x063C ( 0x0004 )  [0x00000010]
	unsigned long                                      bInitLifeMessage:1;                               		// 0x063C ( 0x0004 )  [0x00000020]
	unsigned long                                      bReachedGatherPoint:1;                            		// 0x063C ( 0x0004 )  [0x00000040]
	unsigned long                                      bFinalStretch:1;                                  		// 0x063C ( 0x0004 )  [0x00000080]
	unsigned long                                      bJumpy:1;                                         		// 0x063C ( 0x0004 )  [0x00000100]
	unsigned long                                      bHasTranslocator:1;                               		// 0x063C ( 0x0004 )  [0x00000200]
	unsigned long                                      bHasImpactHammer:1;                               		// 0x063C ( 0x0004 )  [0x00000400]
	unsigned long                                      bTacticalDoubleJump:1;                            		// 0x063C ( 0x0004 )  [0x00000800]
	unsigned long                                      bWasNearObjective:1;                              		// 0x063C ( 0x0004 )  [0x00001000]
	unsigned long                                      bPlannedShot:1;                                   		// 0x063C ( 0x0004 )  [0x00002000]
	unsigned long                                      bHasFired:1;                                      		// 0x063C ( 0x0004 )  [0x00004000]
	unsigned long                                      bForcedDirection:1;                               		// 0x063C ( 0x0004 )  [0x00008000]
	unsigned long                                      bFireSuccess:1;                                   		// 0x063C ( 0x0004 )  [0x00010000]
	unsigned long                                      bStoppedFiring:1;                                 		// 0x063C ( 0x0004 )  [0x00020000]
	unsigned long                                      bEnemyIsVisible:1;                                		// 0x063C ( 0x0004 )  [0x00040000]
	unsigned long                                      bTranslocatorHop:1;                               		// 0x063C ( 0x0004 )  [0x00080000]
	unsigned long                                      bEnemyEngaged:1;                                  		// 0x063C ( 0x0004 )  [0x00100000]
	unsigned long                                      bMustCharge:1;                                    		// 0x063C ( 0x0004 )  [0x00200000]
	unsigned long                                      bPursuingFlag:1;                                  		// 0x063C ( 0x0004 )  [0x00400000]
	unsigned long                                      bJustLanded:1;                                    		// 0x063C ( 0x0004 )  [0x00800000]
	unsigned long                                      bSingleTestSection:1;                             		// 0x063C ( 0x0004 )  [0x01000000]
	unsigned long                                      bRecommendFastMove:1;                             		// 0x063C ( 0x0004 )  [0x02000000]
	unsigned long                                      bDodgingForward:1;                                		// 0x063C ( 0x0004 )  [0x04000000]
	unsigned long                                      bInstantAck:1;                                    		// 0x063C ( 0x0004 )  [0x08000000]
	unsigned long                                      bShieldSelf:1;                                    		// 0x063C ( 0x0004 )  [0x10000000]
	unsigned long                                      bIgnoreEnemyChange:1;                             		// 0x063C ( 0x0004 )  [0x20000000]
	unsigned long                                      bHasSuperWeapon:1;                                		// 0x063C ( 0x0004 )  [0x40000000]
	class AActor*                                      TranslocationTarget;                              		// 0x0640 ( 0x0004 ) 
	class AActor*                                      RealTranslocationTarget;                          		// 0x0644 ( 0x0004 ) 
	class AActor*                                      ImpactTarget;                                     		// 0x0648 ( 0x0004 ) 
	float                                              TranslocFreq;                                     		// 0x064C ( 0x0004 ) 
	float                                              NextTranslocTime;                                 		// 0x0650 ( 0x0004 ) 
	struct FName                                       OldMessageType;                                   		// 0x0654 ( 0x0004 ) 
	int                                                OldMessageID;                                     		// 0x0658 ( 0x0004 ) 
	struct FVector                                     HidingSpot;                                       		// 0x065C ( 0x000C ) 
	float                                              Aggressiveness;                                   		// 0x0668 ( 0x0004 ) 
	float                                              LastAttractCheck;                                 		// 0x066C ( 0x0004 ) 
	class ANavigationPoint*                            BlockedPath;                                      		// 0x0670 ( 0x0004 ) 
	float                                              AcquireTime;                                      		// 0x0674 ( 0x0004 ) 
	float                                              Aggression;                                       		// 0x0678 ( 0x0004 ) 
	float                                              LoseEnemyCheckTime;                               		// 0x067C ( 0x0004 ) 
	class AActor*                                      StartleActor;                                     		// 0x0680 ( 0x0004 ) 
	float                                              StartTacticalTime;                                		// 0x0684 ( 0x0004 ) 
	float                                              LastUnderFire;                                    		// 0x0688 ( 0x0004 ) 
	float                                              BaseAlertness;                                    		// 0x068C ( 0x0004 ) 
	float                                              Accuracy;                                         		// 0x0690 ( 0x0004 ) 
	float                                              BaseAggressiveness;                               		// 0x0694 ( 0x0004 ) 
	float                                              StrafingAbility;                                  		// 0x0698 ( 0x0004 ) 
	float                                              CombatStyle;                                      		// 0x069C ( 0x0004 ) 
	float                                              Tactics;                                          		// 0x06A0 ( 0x0004 ) 
	float                                              TranslocUse;                                      		// 0x06A4 ( 0x0004 ) 
	float                                              ReactionTime;                                     		// 0x06A8 ( 0x0004 ) 
	float                                              Jumpiness;                                        		// 0x06AC ( 0x0004 ) 
	class UClass*                                      FavoriteWeapon;                                   		// 0x06B0 ( 0x0004 ) 
	struct FString                                     GoalString;                                       		// 0x06B4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoakString;                                       		// 0x06C0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class ASquadAI*                                    Squad;                                            		// 0x06CC ( 0x0004 ) 
	class ABot*                                        NextSquadMember;                                  		// 0x06D0 ( 0x0004 ) 
	float                                              ReTaskTime;                                       		// 0x06D4 ( 0x0004 ) 
	class AUnrealScriptedSequence*                     GoalScript;                                       		// 0x06D8 ( 0x0004 ) 
	class AUnrealScriptedSequence*                     EnemyAcquisitionScript;                           		// 0x06DC ( 0x0004 ) 
	class AVehicle*                                    FormerVehicle;                                    		// 0x06E0 ( 0x0004 ) 
	unsigned char                                      ScriptedCombat;                                   		// 0x06E4 ( 0x0001 ) 
	int                                                FormationPosition;                                		// 0x06E8 ( 0x0004 ) 
	int                                                ChoosingAttackLevel;                              		// 0x06EC ( 0x0004 ) 
	float                                              ChooseAttackTime;                                 		// 0x06F0 ( 0x0004 ) 
	int                                                ChooseAttackCounter;                              		// 0x06F4 ( 0x0004 ) 
	float                                              EnemyVisibilityTime;                              		// 0x06F8 ( 0x0004 ) 
	class APawn*                                       VisibleEnemy;                                     		// 0x06FC ( 0x0004 ) 
	class APawn*                                       OldEnemy;                                         		// 0x0700 ( 0x0004 ) 
	float                                              StopStartTime;                                    		// 0x0704 ( 0x0004 ) 
	float                                              LastRespawnTime;                                  		// 0x0708 ( 0x0004 ) 
	float                                              FailedHuntTime;                                   		// 0x070C ( 0x0004 ) 
	class APawn*                                       FailedHuntEnemy;                                  		// 0x0710 ( 0x0004 ) 
	float                                              LastSearchTime;                                   		// 0x0714 ( 0x0004 ) 
	float                                              LastSearchWeight;                                 		// 0x0718 ( 0x0004 ) 
	float                                              CampTime;                                         		// 0x071C ( 0x0004 ) 
	int                                                LastTaunt;                                        		// 0x0720 ( 0x0004 ) 
	int                                                NumRandomJumps;                                   		// 0x0724 ( 0x0004 ) 
	struct FString                                     ComboNames[ 0x04 ];                               		// 0x0728 ( 0x0030 ) [ CPF_NeedCtorLink ]
	float                                              LastFireAttempt;                                  		// 0x0758 ( 0x0004 ) 
	float                                              GatherTime;                                       		// 0x075C ( 0x0004 ) 
	struct FName                                       OrderNames[ 0x10 ];                               		// 0x0760 ( 0x0040 ) [ CPF_Edit ]
	struct FName                                       OldOrders;                                        		// 0x07A0 ( 0x0004 ) 
	class AController*                                 OldOrderGiver;                                    		// 0x07A4 ( 0x0004 ) 
	struct FVector                                     LastKnownPosition;                                		// 0x07A8 ( 0x000C ) 
	struct FVector                                     LastKillerPosition;                               		// 0x07B4 ( 0x000C ) 
	class ANavigationPoint*                            TestStart;                                        		// 0x07C0 ( 0x0004 ) 
	int                                                TestPath;                                         		// 0x07C4 ( 0x0004 ) 
	struct FName                                       TestLabel;                                        		// 0x07C8 ( 0x0004 ) 

	// UScript Functions
	 bool                      ShouldPerformScript (  );                         		//  UnrealGame.Bot.ShouldPerformScript
	 bool                      ScriptingOverridesAI (  );                        		//  UnrealGame.Bot.ScriptingOverridesAI
	 void                      SetNewScript ( class AScriptedSequence* NewScript );		//  UnrealGame.Bot.SetNewScript
	 void                      SetEnemyReaction ( int AlertnessLevel );          		//  UnrealGame.Bot.SetEnemyReaction
	 bool                      IsShootingObjective (  );                         		//  UnrealGame.Bot.IsShootingObjective
	 bool                      Stopped (  );                                     		//  UnrealGame.Bot.Stopped
	 bool                      FindViewSpot (  );                                		//  UnrealGame.Bot.FindViewSpot
	 bool                      IsHunting (  );                                   		//  UnrealGame.Bot.IsHunting
	 bool                      IsStrafing (  );                                  		//  UnrealGame.Bot.IsStrafing
	 bool                      DefendMelee ( float dist );                       		//  UnrealGame.Bot.DefendMelee
	 void                      DoRetreat (  );                                   		//  UnrealGame.Bot.DoRetreat
	 void                      DoTacticalMove (  );                              		//  UnrealGame.Bot.DoTacticalMove
	 void                      DoCharge (  );                                    		//  UnrealGame.Bot.DoCharge
	 void                      DoStakeOut (  );                                  		//  UnrealGame.Bot.DoStakeOut
	 bool                      LoseEnemy (  );                                   		//  UnrealGame.Bot.LoseEnemy
	 bool                      LostContact ( float MaxTime );                    		//  UnrealGame.Bot.LostContact
	 float                     GetDesiredOffset (  );                            		//  UnrealGame.Bot.GetDesiredOffset
	 void                      ForceCelebrate (  );                              		//  UnrealGame.Bot.ForceCelebrate
	 void                      ForceGiveWeapon (  );                             		//  UnrealGame.Bot.ForceGiveWeapon
	 void                      Celebrate (  );                                   		//  UnrealGame.Bot.Celebrate
	 void                      eventRecoverFromBadStateCode (  );                		// [ FUNC_Event ] UnrealGame.Bot.RecoverFromBadStateCode
	 bool                      Formation (  );                                   		//  UnrealGame.Bot.Formation
	 bool                      IsRetreating (  );                                		//  UnrealGame.Bot.IsRetreating
	 void                      damageAttitudeTo ( class APawn* Other, float Damage );		//  UnrealGame.Bot.damageAttitudeTo
	 bool                      SuperPickupNotSpokenFor ( class APickup* P );     		//  UnrealGame.Bot.SuperPickupNotSpokenFor
	 float                     eventSuperDesireability ( class APickup* P );     		// [ FUNC_Event ] UnrealGame.Bot.SuperDesireability
	 float                     eventDesireability ( class APickup* P );          		// [ FUNC_Event ] UnrealGame.Bot.Desireability
	 bool                      NeedWeapon (  );                                  		//  UnrealGame.Bot.NeedWeapon
	 void                      WanderOrCamp ( bool bMayCrouch );                 		//  UnrealGame.Bot.WanderOrCamp
	 class AActor*             FaceActor ( float StrafingModifier );             		//  UnrealGame.Bot.FaceActor
	 class AActor*             AlternateTranslocDest (  );                       		//  UnrealGame.Bot.AlternateTranslocDest
	 bool                      ShouldStrafeTo ( class AActor* WayPoint );        		//  UnrealGame.Bot.ShouldStrafeTo
	 class AActor*             FaceMoveTarget (  );                              		//  UnrealGame.Bot.FaceMoveTarget
	 void                      NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );		//  UnrealGame.Bot.NotifyKilled
	 bool                      TryToDuck ( struct FVector duckDir, bool bReversed );		//  UnrealGame.Bot.TryToDuck
	 void                      ChangeStrafe (  );                                		//  UnrealGame.Bot.ChangeStrafe
	 bool                      TryWallDodge ( struct FVector HitNormal, class AActor* HitActor );		//  UnrealGame.Bot.TryWallDodge
	 void                      eventMissedDodge (  );                            		// [ FUNC_Event ] UnrealGame.Bot.MissedDodge
	 void                      eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* HitActor );		// [ FUNC_Event ] UnrealGame.Bot.NotifyFallingHitWall
	 void                      ReceiveWarning ( class APawn* shooter, float projSpeed, struct FVector FireDir );		//  UnrealGame.Bot.ReceiveWarning
	 void                      NotifyTakeHit ( class APawn* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, int CollisionPart );		//  UnrealGame.Bot.NotifyTakeHit
	 void                      ReceiveProjectileWarning ( class AProjectile* proj );		//  UnrealGame.Bot.ReceiveProjectileWarning
	 void                      eventDelayedWarning (  );                         		// [ FUNC_Event ] UnrealGame.Bot.DelayedWarning
	 struct FRotator           AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError );		//  UnrealGame.Bot.AdjustAim
	 float                     AdjustAimError ( float AimError, float TargetDist, bool bDefendMelee, bool bInstantProj, bool bLeadTargetNow );		//  UnrealGame.Bot.AdjustAimError
	 bool                      CheckFutureSight ( float DeltaTime );             		//  UnrealGame.Bot.CheckFutureSight
	 bool                      NearWall ( float walldist );                      		//  UnrealGame.Bot.NearWall
	 bool                      NeedToTurn ( struct FVector targ );               		//  UnrealGame.Bot.NeedToTurn
	 bool                      FindBestPathToward ( class AActor* A, bool bCheckedReach, bool bAllowDetour );		//  UnrealGame.Bot.FindBestPathToward
	 bool                      eventAllowDetourTo ( class ANavigationPoint* N ); 		// [ FUNC_Event ] UnrealGame.Bot.AllowDetourTo
	 bool                      SetRouteToGoal ( class AActor* A );               		//  UnrealGame.Bot.SetRouteToGoal
	 bool                      StartMoveToward ( class AActor* o );              		//  UnrealGame.Bot.StartMoveToward
	 void                      eventNotifyPostLanded (  );                       		// [ FUNC_Event ] UnrealGame.Bot.NotifyPostLanded
	 bool                      NotifyLanded ( struct FVector HitNormal );        		//  UnrealGame.Bot.NotifyLanded
	 void                      SetFall (  );                                     		//  UnrealGame.Bot.SetFall
	 bool                      PriorityObjective (  );                           		//  UnrealGame.Bot.PriorityObjective
	 bool                      eventNotifyBump ( class AActor* Other );          		// [ FUNC_Event ] UnrealGame.Bot.NotifyBump
	 void                      DirectedWander ( struct FVector WanderDir );      		//  UnrealGame.Bot.DirectedWander
	 bool                      AdjustAround ( class APawn* Other );              		//  UnrealGame.Bot.AdjustAround
	 void                      ClearPathFor ( class AController* C );            		//  UnrealGame.Bot.ClearPathFor
	 void                      CancelCampFor ( class AController* C );           		//  UnrealGame.Bot.CancelCampFor
	 bool                      CheckPathToGoalAround ( class APawn* P );         		//  UnrealGame.Bot.CheckPathToGoalAround
	 void                      Restart (  );                                     		//  UnrealGame.Bot.Restart
	 bool                      TestDirection ( struct FVector Dir, struct FVector* pick );		//  UnrealGame.Bot.TestDirection
	 bool                      FindRoamDest (  );                                		//  UnrealGame.Bot.FindRoamDest
	 void                      eventSoakStop ( struct FString problem );         		// [ FUNC_Event ] UnrealGame.Bot.SoakStop
	 bool                      PickRetreatDestination (  );                      		//  UnrealGame.Bot.PickRetreatDestination
	 bool                      FindInventoryGoal ( float BestWeight );           		//  UnrealGame.Bot.FindInventoryGoal
	 bool                      FindSuperPickup ( float MaxDist );                		//  UnrealGame.Bot.FindSuperPickup
	 void                      ChooseAttackMode (  );                            		//  UnrealGame.Bot.ChooseAttackMode
	 void                      DoRangedAttackOn ( class AActor* A );             		//  UnrealGame.Bot.DoRangedAttackOn
	 void                      FightEnemy ( bool bCanCharge, float EnemyStrength );		//  UnrealGame.Bot.FightEnemy
	 void                      VehicleFightEnemy ( bool bCanCharge, float EnemyStrength );		//  UnrealGame.Bot.VehicleFightEnemy
	 bool                      EnemyVisible (  );                                		//  UnrealGame.Bot.EnemyVisible
	 bool                      DoWaitForLanding (  );                            		//  UnrealGame.Bot.DoWaitForLanding
	 void                      ExecuteWhatToDoNext (  );                         		//  UnrealGame.Bot.ExecuteWhatToDoNext
	 struct FString            GetEnemyName (  );                                		//  UnrealGame.Bot.GetEnemyName
	 struct FString            GetOldEnemyName (  );                             		//  UnrealGame.Bot.GetOldEnemyName
	 void                      WhatToDoNext ( unsigned char CallingByte );       		//  UnrealGame.Bot.WhatToDoNext
	 void                      WasKilledBy ( class AController* Other );         		//  UnrealGame.Bot.WasKilledBy
	 void                      SetAlertness ( float NewAlertness );              		//  UnrealGame.Bot.SetAlertness
	 void                      SetPeripheralVision (  );                         		//  UnrealGame.Bot.SetPeripheralVision
	 void                      SetMaxDesiredSpeed (  );                          		//  UnrealGame.Bot.SetMaxDesiredSpeed
	 void                      ResetSkill (  );                                  		//  UnrealGame.Bot.ResetSkill
	 void                      InitializeSkill ( float InSkill );                		//  UnrealGame.Bot.InitializeSkill
	 void                      Possess ( class APawn* aPawn );                   		//  UnrealGame.Bot.Possess
	 void                      Reset (  );                                       		//  UnrealGame.Bot.Reset
	 void                      eventNotifyMissedJump (  );                       		// [ FUNC_Event ] UnrealGame.Bot.NotifyMissedJump
	 void                      eventNotifyJumpApex (  );                         		// [ FUNC_Event ] UnrealGame.Bot.NotifyJumpApex
	 void                      eventMayDodgeToMoveTarget (  );                   		// [ FUNC_Event ] UnrealGame.Bot.MayDodgeToMoveTarget
	 bool                      NotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume );		//  UnrealGame.Bot.NotifyPhysicsVolumeChange
	 bool                      StrafeFromDamage ( float Damage, class UClass* DamageType, bool bFindDest );		//  UnrealGame.Bot.StrafeFromDamage
	 void                      BotVoiceMessage ( struct FName MessageType, unsigned char MessageID, class AController* Sender );		//  UnrealGame.Bot.BotVoiceMessage
	 void                      EnemyChanged ( bool bNewEnemyVisible );           		//  UnrealGame.Bot.EnemyChanged
	 void                      SetEnemyInfo ( bool bNewEnemyVisible );           		//  UnrealGame.Bot.SetEnemyInfo
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  UnrealGame.Bot.Trigger
	 float                     RelativeStrength ( class APawn* Other );          		//  UnrealGame.Bot.RelativeStrength
	 bool                      AssignSquadResponsibility (  );                   		//  UnrealGame.Bot.AssignSquadResponsibility
	 void                      FreeScript (  );                                  		//  UnrealGame.Bot.FreeScript
	 bool                      IsSniping (  );                                   		//  UnrealGame.Bot.IsSniping
	 void                      CheckIfShouldCrouch ( struct FVector StartPosition, struct FVector TargetPosition, float Probability );		//  UnrealGame.Bot.CheckIfShouldCrouch
	 bool                      CanStakeOut (  );                                 		//  UnrealGame.Bot.CanStakeOut
	 bool                      ClearShot ( struct FVector TargetLoc, bool bImmediateFire );		//  UnrealGame.Bot.ClearShot
	 void                      SetAttractionState (  );                          		//  UnrealGame.Bot.SetAttractionState
	 void                      eventSeePlayer ( class APawn* SeenPlayer );       		// [ FUNC_Event ] UnrealGame.Bot.SeePlayer
	 void                      HearNoise ( float Loudness, class AActor* NoiseMaker );		//  UnrealGame.Bot.HearNoise
	 void                      ClearTemporaryOrders (  );                        		//  UnrealGame.Bot.ClearTemporaryOrders
	 void                      SetTemporaryOrders ( struct FName NewOrders, class AController* OrderGiver );		//  UnrealGame.Bot.SetTemporaryOrders
	 void                      SetOrders ( struct FName NewOrders, class AController* OrderGiver );		//  UnrealGame.Bot.SetOrders
	 void                      SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char MessageID, float wait, struct FName BroadcastType );		//  UnrealGame.Bot.SendMessage
	 unsigned char             GetMessageIndex ( struct FName PhraseName );      		//  UnrealGame.Bot.GetMessageIndex
	 void                      YellAt ( class APawn* Moron );                    		//  UnrealGame.Bot.YellAt
	 class AActor*             GetOrderObject (  );                              		//  UnrealGame.Bot.GetOrderObject
	 struct FName              GetOrders (  );                                   		//  UnrealGame.Bot.GetOrders
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		//  UnrealGame.Bot.DisplayDebug
	 bool                      CanCombo (  );                                    		//  UnrealGame.Bot.CanCombo
	 bool                      CanComboMoving (  );                              		//  UnrealGame.Bot.CanComboMoving
	 bool                      ProficientWithWeapon (  );                        		//  UnrealGame.Bot.ProficientWithWeapon
	 float                     WeaponPreference ( class AwWeapon* W );           		//  UnrealGame.Bot.WeaponPreference
	 void                      ChangedWeapon (  );                               		//  UnrealGame.Bot.ChangedWeapon
	 void                      StopFiring (  );                                  		//  UnrealGame.Bot.StopFiring
	 bool                      CanAttack ( class AActor* Other );                		//  UnrealGame.Bot.CanAttack
	 bool                      FireWeaponAt ( class AActor* A );                 		//  UnrealGame.Bot.FireWeaponAt
	 void                      TimedFireWeaponAtEnemy (  );                      		//  UnrealGame.Bot.TimedFireWeaponAtEnemy
	 bool                      ShouldFireAgain ( float RefireRate );             		//  UnrealGame.Bot.ShouldFireAgain
	 bool                      WeaponFireAgain ( float RefireRate, bool bFinishedFire );		//  UnrealGame.Bot.WeaponFireAgain
	 void                      WaitForMover ( class AMover* M );                 		//  UnrealGame.Bot.WaitForMover
	 void                      ImpactJump (  );                                  		//  UnrealGame.Bot.ImpactJump
	 bool                      CanUseTranslocator (  );                          		//  UnrealGame.Bot.CanUseTranslocator
	 bool                      CanImpactJump (  );                               		//  UnrealGame.Bot.CanImpactJump
	 float                     RateWeapon ( class AwWeapon* W );                 		// [ FUNC_Simulated ] UnrealGame.Bot.RateWeapon
	 void                      UpdatePawnViewPitch (  );                         		//  UnrealGame.Bot.UpdatePawnViewPitch
	 class APawn*              GetMyPlayer (  );                                 		//  UnrealGame.Bot.GetMyPlayer
	 void                      InitPlayerReplicationInfo (  );                   		//  UnrealGame.Bot.InitPlayerReplicationInfo
	 bool                      DontReuseTaunt ( int t );                         		//  UnrealGame.Bot.DontReuseTaunt
	 bool                      AutoTaunt (  );                                   		//  UnrealGame.Bot.AutoTaunt
	 void                      SetCombatTimer (  );                              		//  UnrealGame.Bot.SetCombatTimer
	 void                      Startle ( class AActor* Feared );                 		//  UnrealGame.Bot.Startle
	 void                      FearThisSpot ( class AAvoidMarker* aSpot );       		//  UnrealGame.Bot.FearThisSpot
	 void                      TryCombo ( struct FString ComboName );            		//  UnrealGame.Bot.TryCombo
	 bool                      CanDoubleJump ( class APawn* Other );             		//  UnrealGame.Bot.CanDoubleJump
	 void                      GetOutOfVehicle (  );                             		//  UnrealGame.Bot.GetOutOfVehicle
	 bool                      eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall );		// [ FUNC_Event ] UnrealGame.Bot.NotifyHitWall
	 void                      eventSetupSpecialPathAbilities (  );              		// [ FUNC_Event ] UnrealGame.Bot.SetupSpecialPathAbilities
	 bool                      ShouldKeepShielding (  );                         		//  UnrealGame.Bot.ShouldKeepShielding
	 void                      NotifyAddInventory ( class AInventory* NewItem ); 		//  UnrealGame.Bot.NotifyAddInventory
	 class AwWeapon*           HasSuperWeapon (  );                              		//  UnrealGame.Bot.HasSuperWeapon
	 void                      PostBeginPlay (  );                               		//  UnrealGame.Bot.PostBeginPlay
	 void                      Destroyed (  );                                   		//  UnrealGame.Bot.Destroyed
}; // Size: 0x0190

// Class UnrealGame.KillingSpreeMessage
class DLL_IMPORT AKillingSpreeMessage : public ACriticalEventPlus
{
public:
	struct FString                                     EndSpreeNote;                                     		// 0x0440 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EndSelfSpree;                                     		// 0x044C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EndFemaleSpree;                                   		// 0x0458 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MultiKillString;                                  		// 0x0464 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SpreeNote[ 0x0A ];                                		// 0x0470 ( 0x0078 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SelfSpreeNote[ 0x0A ];                            		// 0x04E8 ( 0x0078 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class USound*                                      SpreeSound[ 0x0A ];                               		// 0x0560 ( 0x0028 ) 
	struct FName                                       SpreeSoundName[ 0x0A ];                           		// 0x0588 ( 0x0028 ) 
	struct FString                                     EndSpreeNoteTrailer;                              		// 0x05B0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] UnrealGame.KillingSpreeMessage.ClientReceive
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  UnrealGame.KillingSpreeMessage.GetString
	 struct FString            GetRelatedString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  UnrealGame.KillingSpreeMessage.GetRelatedString
	 int                       GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer );		//  UnrealGame.KillingSpreeMessage.GetFontSize
}; // Size: 0x017C

// Class UnrealGame.SquadAI
class DLL_IMPORT ASquadAI : public AReplicationInfo
{
public:
	class AUnrealTeamInfo*                             Team;                                             		// 0x041C ( 0x0004 ) 
	class AController*                                 SquadLeader;                                      		// 0x0420 ( 0x0004 ) 
	class ATeamPlayerReplicationInfo*                  LeaderPRI;                                        		// 0x0424 ( 0x0004 ) [ CPF_Net ]
	class ASquadAI*                                    NextSquad;                                        		// 0x0428 ( 0x0004 ) 
	class AGameObjective*                              SquadObjective;                                   		// 0x042C ( 0x0004 ) [ CPF_Net ]
	int                                                Size;                                             		// 0x0430 ( 0x0004 ) 
	class AAssaultPath*                                AlternatePath;                                    		// 0x0434 ( 0x0004 ) 
	struct FName                                       AlternatePathTag;                                 		// 0x0438 ( 0x0004 ) 
	class ABot*                                        SquadMembers;                                     		// 0x043C ( 0x0004 ) 
	float                                              GatherThreshold;                                  		// 0x0440 ( 0x0004 ) 
	struct FString                                     SupportString;                                    		// 0x0444 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DefendString;                                     		// 0x0450 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     AttackString;                                     		// 0x045C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     HoldString;                                       		// 0x0468 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     FreelanceString;                                  		// 0x0474 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SupportStringTrailer;                             		// 0x0480 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FName                                       CurrentOrders;                                    		// 0x048C ( 0x0004 ) [ CPF_Net ]
	class APawn*                                       enemies[ 0x08 ];                                  		// 0x0490 ( 0x0020 ) 
	int                                                MaxSquadSize;                                     		// 0x04B0 ( 0x0004 ) 
	unsigned long                                      bFreelance:1;                                     		// 0x04B4 ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bFreelanceAttack:1;                               		// 0x04B4 ( 0x0004 )  [0x00000002]
	unsigned long                                      bFreelanceDefend:1;                               		// 0x04B4 ( 0x0004 )  [0x00000004]
	unsigned long                                      bRoamingSquad:1;                                  		// 0x04B4 ( 0x0004 )  [0x00000008]
	unsigned long                                      bAddTransientCosts:1;                             		// 0x04B4 ( 0x0004 )  [0x00000010]
	class AUnrealScriptedSequence*                     FreelanceScripts;                                 		// 0x04B8 ( 0x0004 ) 
	class ARestingFormation*                           RestingFormation;                                 		// 0x04BC ( 0x0004 ) 
	class UClass*                                      RestingFormationClass;                            		// 0x04C0 ( 0x0004 ) 

	// UScript Functions
	 bool                      FriendlyToward ( class APawn* Other );            		//  UnrealGame.SquadAI.FriendlyToward
	 bool                      CautiousAdvance ( class ABot* B );                		//  UnrealGame.SquadAI.CautiousAdvance
	 bool                      IsDefending ( class ABot* B );                    		//  UnrealGame.SquadAI.IsDefending
	 bool                      ClearPathFor ( class AController* C );            		//  UnrealGame.SquadAI.ClearPathFor
	 bool                      PickRetreatDestination ( class ABot* B );         		//  UnrealGame.SquadAI.PickRetreatDestination
	 bool                      BeDevious (  );                                   		//  UnrealGame.SquadAI.BeDevious
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		//  UnrealGame.SquadAI.DisplayDebug
	 class ABot*               PickBotToReassign (  );                           		//  UnrealGame.SquadAI.PickBotToReassign
	 float                     BotSuitability ( class ABot* B );                 		//  UnrealGame.SquadAI.BotSuitability
	 bool                      ShouldDestroyTranslocator ( class ABot* B );      		//  UnrealGame.SquadAI.ShouldDestroyTranslocator
	 bool                      CheckSquadObjectives ( class ABot* B );           		//  UnrealGame.SquadAI.CheckSquadObjectives
	 bool                      OverrideFollowPlayer ( class ABot* B );           		//  UnrealGame.SquadAI.OverrideFollowPlayer
	 bool                      CheckSpecialVehicleObjectives ( class ABot* B );  		//  UnrealGame.SquadAI.CheckSpecialVehicleObjectives
	 float                     VehicleDesireability ( class AVehicle* V, class ABot* B );		//  UnrealGame.SquadAI.VehicleDesireability
	 bool                      CheckVehicle ( class ABot* B );                   		//  UnrealGame.SquadAI.CheckVehicle
	 void                      BotEnteredVehicle ( class ABot* B );              		//  UnrealGame.SquadAI.BotEnteredVehicle
	 bool                      NeverBail ( class APawn* P );                     		//  UnrealGame.SquadAI.NeverBail
	 float                     MaxVehicleDist ( class APawn* P );                		//  UnrealGame.SquadAI.MaxVehicleDist
	 bool                      AssignSquadResponsibility ( class ABot* B );      		//  UnrealGame.SquadAI.AssignSquadResponsibility
	 void                      AddTransientCosts ( class ABot* B, float f );     		//  UnrealGame.SquadAI.AddTransientCosts
	 bool                      AllowTaunt ( class ABot* B );                     		//  UnrealGame.SquadAI.AllowTaunt
	 bool                      TellBotToFollow ( class ABot* B, class AController* C );		//  UnrealGame.SquadAI.TellBotToFollow
	 void                      PickNewLeader (  );                               		//  UnrealGame.SquadAI.PickNewLeader
	 int                       GetSize (  );                                     		//  UnrealGame.SquadAI.GetSize
	 struct FString            GetShortOrderStringFor ( class ATeamPlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] UnrealGame.SquadAI.GetShortOrderStringFor
	 struct FString            GetOrderStringFor ( class ATeamPlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] UnrealGame.SquadAI.GetOrderStringFor
	 struct FName              GetOrders (  );                                   		//  UnrealGame.SquadAI.GetOrders
	 void                      Retask ( class ABot* B );                         		//  UnrealGame.SquadAI.Retask
	 void                      SetObjective ( class AGameObjective* o, bool bForceUpdate );		//  UnrealGame.SquadAI.SetObjective
	 void                      SetFreelanceScriptFor ( class ABot* B );          		//  UnrealGame.SquadAI.SetFreelanceScriptFor
	 void                      SetDefenseScriptFor ( class ABot* B );            		//  UnrealGame.SquadAI.SetDefenseScriptFor
	 void                      SwitchBots ( class ABot* MyBot, class ABot* OtherBot );		//  UnrealGame.SquadAI.SwitchBots
	 void                      AddBot ( class ABot* B );                         		//  UnrealGame.SquadAI.AddBot
	 void                      RemoveBot ( class ABot* B );                      		//  UnrealGame.SquadAI.RemoveBot
	 void                      RemovePlayer ( class APlayerController* P );      		//  UnrealGame.SquadAI.RemovePlayer
	 void                      SetLeader ( class AController* C );               		//  UnrealGame.SquadAI.SetLeader
	 void                      SetFinalStretch ( bool bValue );                  		//  UnrealGame.SquadAI.SetFinalStretch
	 bool                      FindPathToObjective ( class ABot* B, class AActor* o );		//  UnrealGame.SquadAI.FindPathToObjective
	 bool                      TryToIntercept ( class ABot* B, class APawn* P, class AActor* RouteGoal );		//  UnrealGame.SquadAI.TryToIntercept
	 void                      SetAlternatePath ( bool bResetSquad );            		//  UnrealGame.SquadAI.SetAlternatePath
	 void                      Initialize ( class AUnrealTeamInfo* t, class AGameObjective* o, class AController* C );		//  UnrealGame.SquadAI.Initialize
	 void                      MergeWith ( class ASquadAI* S );                  		//  UnrealGame.SquadAI.MergeWith
	 bool                      CloseToLeader ( class APawn* P );                 		//  UnrealGame.SquadAI.CloseToLeader
	 bool                      NearFormationCenter ( class APawn* P );           		//  UnrealGame.SquadAI.NearFormationCenter
	 bool                      WanderNearLeader ( class ABot* B );               		//  UnrealGame.SquadAI.WanderNearLeader
	 bool                      WaitAtThisPosition ( class APawn* P );            		//  UnrealGame.SquadAI.WaitAtThisPosition
	 bool                      ShouldDeferTo ( class AController* C );           		//  UnrealGame.SquadAI.ShouldDeferTo
	 float                     AssessThreat ( class ABot* B, class APawn* NewThreat, bool bThreatVisible );		//  UnrealGame.SquadAI.AssessThreat
	 bool                      UnderFire ( class APawn* NewThreat, class ABot* Ignored );		//  UnrealGame.SquadAI.UnderFire
	 float                     ModifyThreat ( float Current, class APawn* NewThreat, bool bThreatVisible, class ABot* B );		//  UnrealGame.SquadAI.ModifyThreat
	 bool                      FindNewEnemyFor ( class ABot* B, bool bSeeEnemy );		//  UnrealGame.SquadAI.FindNewEnemyFor
	 void                      NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );		//  UnrealGame.SquadAI.NotifyKilled
	 void                      RemoveEnemy ( class APawn* E );                   		//  UnrealGame.SquadAI.RemoveEnemy
	 bool                      IsOnSquad ( class AController* C );               		//  UnrealGame.SquadAI.IsOnSquad
	 unsigned char             PriorityObjective ( class ABot* B );              		//  UnrealGame.SquadAI.PriorityObjective
	 bool                      SetEnemy ( class ABot* B, class APawn* NewEnemy );		//  UnrealGame.SquadAI.SetEnemy
	 bool                      ValidEnemy ( class APawn* NewEnemy );             		//  UnrealGame.SquadAI.ValidEnemy
	 bool                      AddEnemy ( class APawn* NewEnemy );               		//  UnrealGame.SquadAI.AddEnemy
	 bool                      MustKeepEnemy ( class APawn* E );                 		//  UnrealGame.SquadAI.MustKeepEnemy
	 bool                      LostEnemy ( class ABot* B );                      		//  UnrealGame.SquadAI.LostEnemy
	 bool                      MergeEnemiesFrom ( class ASquadAI* S );           		//  UnrealGame.SquadAI.MergeEnemiesFrom
	 class AActor*             FormationCenter (  );                             		//  UnrealGame.SquadAI.FormationCenter
	 struct FRotator           GetFacingRotation (  );                           		//  UnrealGame.SquadAI.GetFacingRotation
	 class AVehicle*           GetLinkVehicle ( class ABot* B );                 		//  UnrealGame.SquadAI.GetLinkVehicle
	 class AVehicle*           GetKeyVehicle ( class ABot* B );                  		//  UnrealGame.SquadAI.GetKeyVehicle
	 class AActor*             SetFacingActor ( class ABot* B );                 		//  UnrealGame.SquadAI.SetFacingActor
	 bool                      AllowImpactJumpBy ( class ABot* B );              		//  UnrealGame.SquadAI.AllowImpactJumpBy
	 bool                      AllowTranslocationBy ( class ABot* B );           		//  UnrealGame.SquadAI.AllowTranslocationBy
	 void                      Destroyed (  );                                   		//  UnrealGame.SquadAI.Destroyed
	 class ARestingFormation*  GetRestingFormation (  );                         		//  UnrealGame.SquadAI.GetRestingFormation
	 bool                      AllowDetourTo ( class ABot* B, class ANavigationPoint* N );		//  UnrealGame.SquadAI.AllowDetourTo
	 bool                      ShouldSuppressEnemy ( class ABot* B );            		//  UnrealGame.SquadAI.ShouldSuppressEnemy
	 void                      CriticalObjectiveWarning ( class APawn* NewEnemy );		//  UnrealGame.SquadAI.CriticalObjectiveWarning
	 void                      AssignCombo ( class ABot* B );                    		//  UnrealGame.SquadAI.AssignCombo
	 void                      Reset (  );                                       		//  UnrealGame.SquadAI.Reset
}; // Size: 0x00A8

// Class UnrealGame.DMSquad
class DLL_IMPORT ADMSquad : public ASquadAI
{
public:

	// UScript Functions
	 bool                      AssignSquadResponsibility ( class ABot* B );      		//  UnrealGame.DMSquad.AssignSquadResponsibility
	 bool                      FriendlyToward ( class APawn* Other );            		//  UnrealGame.DMSquad.FriendlyToward
	 bool                      SetEnemy ( class ABot* B, class APawn* NewEnemy );		//  UnrealGame.DMSquad.SetEnemy
	 struct FName              GetOrders (  );                                   		//  UnrealGame.DMSquad.GetOrders
	 bool                      BeDevious (  );                                   		//  UnrealGame.DMSquad.BeDevious
	 bool                      NearFormationCenter ( class APawn* P );           		//  UnrealGame.DMSquad.NearFormationCenter
	 bool                      WaitAtThisPosition ( class APawn* P );            		//  UnrealGame.DMSquad.WaitAtThisPosition
	 bool                      CheckSquadObjectives ( class ABot* B );           		//  UnrealGame.DMSquad.CheckSquadObjectives
	 bool                      ShouldDeferTo ( class AController* C );           		//  UnrealGame.DMSquad.ShouldDeferTo
	 void                      RemoveBot ( class ABot* B );                      		//  UnrealGame.DMSquad.RemoveBot
	 void                      AddBot ( class ABot* B );                         		//  UnrealGame.DMSquad.AddBot
	 bool                      IsDefending ( class ABot* B );                    		//  UnrealGame.DMSquad.IsDefending
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		//  UnrealGame.DMSquad.DisplayDebug
	 void                      AssignCombo ( class ABot* B );                    		//  UnrealGame.DMSquad.AssignCombo
}; // Size: 0x0000

// Class UnrealGame.UnrealPlayer
class DLL_IMPORT AUnrealPlayer : public APlayerController
{
public:
	unsigned long                                      bRising:1;                                        		// 0x0D84 ( 0x0004 )  [0x00000001]
	unsigned long                                      bLatecomer:1;                                     		// 0x0D84 ( 0x0004 )  [0x00000002]
	unsigned long                                      bDisplayLoser:1;                                  		// 0x0D84 ( 0x0004 )  [0x00000004]
	unsigned long                                      bDisplayWinner:1;                                 		// 0x0D84 ( 0x0004 )  [0x00000008]
	int                                                LastTaunt;                                        		// 0x0D88 ( 0x0004 ) 
	float                                              LastWhispTime;                                    		// 0x0D8C ( 0x0004 ) 
	float                                              LastKillTime;                                     		// 0x0D90 ( 0x0004 ) [ CPF_Edit ]
	float                                              LastTauntAnimTime;                                		// 0x0D94 ( 0x0004 ) 
	float                                              LastAutoTauntTime;                                		// 0x0D98 ( 0x0004 ) 
	struct FString                                     CustomizedAnnouncerPack;                          		// 0x0D9C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     CustomStatusAnnouncerPack;                        		// 0x0DA8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     CustomRewardAnnouncerPack;                        		// 0x0DB4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     RejoinChannels;                                   		// 0x0DC0 ( 0x000C ) [ CPF_Transient | CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink ]
	class TArray< struct FString >                     RecentServers;                                    		// 0x0DCC ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                MaxRecentServers;                                 		// 0x0DD8 ( 0x0004 ) 
	unsigned long                                      bDontShowLoginMenu:1;                             		// 0x0DDC ( 0x0004 )  [0x00000001]
	unsigned long                                      bReadyToStart:1;                                  		// 0x0DDC ( 0x0004 )  [0x00000002]
	struct FString                                     LoginMenuClass;                                   		// 0x0DE0 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bForceLoginMenu:1;                                		// 0x0DEC ( 0x0004 )  [0x00000001]
	float                                              LastKickWarningTime;                              		// 0x0DF0 ( 0x0004 ) 
	struct FString                                     NetBotDebugString;                                		// 0x0DF4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FName                                       DirName;                                          		// 0x0E00 ( 0x0004 ) 
	struct FRotator                                    rAttackedZoomCameraS;                             		// 0x0E04 ( 0x000C ) 
	float                                              fAttackedCamera3DZoomRatioS;                      		// 0x0E10 ( 0x0004 ) 
	float                                              fAttackedWeapon3DZoomRatioS;                      		// 0x0E14 ( 0x0004 ) 
	float                                              fAttacked3DZoomSpeed;                             		// 0x0E18 ( 0x0004 ) 
	float                                              fAttacked3DZoomDecayAcc;                          		// 0x0E1C ( 0x0004 ) 

	// UScript Functions
	 void                      wViewAttacked ( float DeltaTime );                		//  UnrealGame.UnrealPlayer.wViewAttacked
	 void                      wAttackedView ( int iPitch, int iYaw, int iRoll );		//  UnrealGame.UnrealPlayer.wAttackedView
	 void                      AttackedView ( int iWeaponID, float fHitGunKick, struct FVector vAttacked );		//  UnrealGame.UnrealPlayer.AttackedView
	 void                      RotateByAttacked ( struct FVector* CameraLocation, struct FRotator* CameraRotation );		//  UnrealGame.UnrealPlayer.RotateByAttacked
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.DisplayDebug
	 void                      ClientReceiveBotDebugString ( struct FString DebugString );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.ClientReceiveBotDebugString
	 void                      ServerSendBotDebugString (  );                    		//  UnrealGame.UnrealPlayer.ServerSendBotDebugString
	 void                      execNetDebugBot (  );                             		// [ FUNC_Exec ] UnrealGame.UnrealPlayer.NetDebugBot
	 void                      ServerChatDebug (  );                             		//  UnrealGame.UnrealPlayer.ServerChatDebug
	 void                      ClientGameEnded (  );                             		//  UnrealGame.UnrealPlayer.ClientGameEnded
	 void                      AutoJoinVoiceChat (  );                           		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.AutoJoinVoiceChat
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.UnrealPlayer.PostNetBeginPlay
	 bool                      NeedNetNotify (  );                               		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.NeedNetNotify
	 void                      SetCustomRewardAnnouncerClass ( struct FString NewAnnouncerClass );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.SetCustomRewardAnnouncerClass
	 struct FString            GetCustomRewardAnnouncerClass (  );               		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.GetCustomRewardAnnouncerClass
	 void                      SetCustomStatusAnnouncerClass ( struct FString NewAnnouncerClass );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.SetCustomStatusAnnouncerClass
	 struct FString            GetCustomStatusAnnouncerClass (  );               		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.GetCustomStatusAnnouncerClass
	 void                      ShowMidGameMenu ( bool bPause );                  		//  UnrealGame.UnrealPlayer.ShowMidGameMenu
	 void                      ServerDropFlag (  );                              		//  UnrealGame.UnrealPlayer.ServerDropFlag
	 void                      execDropFlag (  );                                		// [ FUNC_Exec ] UnrealGame.UnrealPlayer.DropFlag
	 void                      PlayWinMessage ( bool bWinner );                  		//  UnrealGame.UnrealPlayer.PlayWinMessage
	 void                      ClientPlayTakeHit ( struct FVector HitLoc, unsigned char Damage, class UClass* DamageType, int CollisionPart );		//  UnrealGame.UnrealPlayer.ClientPlayTakeHit
	 void                      HitSound (  );                                    		//  UnrealGame.UnrealPlayer.HitSound
	 void                      NewClientPlayTakeHit ( struct FVector AttackLoc, struct FVector HitLoc, unsigned char Damage, class UClass* DamageType, int iWeaponID, float fHitGunKick, int CollisionPart );		//  UnrealGame.UnrealPlayer.NewClientPlayTakeHit
	 void                      NotifyTakeHit ( class APawn* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, int CollisionPart );		//  UnrealGame.UnrealPlayer.NotifyTakeHit
	 void                      ShowLoginMenu (  );                               		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.ShowLoginMenu
	 void                      ClientReceiveLoginMenu ( struct FString MenuClass, bool bForce );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.ClientReceiveLoginMenu
	 void                      ServerSetReadyToStart (  );                       		//  UnrealGame.UnrealPlayer.ServerSetReadyToStart
	 void                      InitInputSystem (  );                             		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.InitInputSystem
	 void                      eventPostNetReceive (  );                         		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.UnrealPlayer.PostNetReceive
	 void                      PlayStartupMessage ( unsigned char StartupStage );		//  UnrealGame.UnrealPlayer.PlayStartupMessage
	 void                      eventKickWarning (  );                            		// [ FUNC_Event ] UnrealGame.UnrealPlayer.KickWarning
	 void                      PlayAnnouncement ( class USound* ASound, unsigned char AnnouncementLevel, bool bForce );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.PlayAnnouncement
	 void                      PlayRewardAnnouncement ( struct FName AName, unsigned char AnnouncementLevel, bool bForce, unsigned char Slot );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.PlayRewardAnnouncement
	 void                      PlayStatusAnnouncement ( struct FString AName, unsigned char AnnouncementLevel, bool bForce );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.PlayStatusAnnouncement
	 void                      ServerPlayVehicleHorn ( int HornIndex );          		//  UnrealGame.UnrealPlayer.ServerPlayVehicleHorn
	 void                      execPlayVehicleHorn ( int HornIndex );            		// [ FUNC_Exec ] UnrealGame.UnrealPlayer.PlayVehicleHorn
	 void                      ServerTaunt ( struct FName AnimName );            		//  UnrealGame.UnrealPlayer.ServerTaunt
	 void                      execTAUNT ( struct FName Sequence );              		// [ FUNC_Exec ] UnrealGame.UnrealPlayer.TAUNT
	 void                      execRandomTaunt (  );                             		// [ FUNC_Exec ] UnrealGame.UnrealPlayer.RandomTaunt
	 unsigned char             GetMessageIndex ( struct FName PhraseName );      		//  UnrealGame.UnrealPlayer.GetMessageIndex
	 void                      ServerShowPathToBase ( int TeamNum );             		//  UnrealGame.UnrealPlayer.ServerShowPathToBase
	 void                      execBasePath ( unsigned char Num );               		// [ FUNC_Exec ] UnrealGame.UnrealPlayer.BasePath
	 void                      SoakPause ( class APawn* P );                     		//  UnrealGame.UnrealPlayer.SoakPause
	 void                      execSoakBots (  );                                		// [ FUNC_Exec ] UnrealGame.UnrealPlayer.SoakBots
	 bool                      DontReuseTaunt ( int t );                         		//  UnrealGame.UnrealPlayer.DontReuseTaunt
	 bool                      AutoTaunt (  );                                   		//  UnrealGame.UnrealPlayer.AutoTaunt
	 void                      Possess ( class APawn* aPawn );                   		//  UnrealGame.UnrealPlayer.Possess
	 void                      execShowAI (  );                                  		// [ FUNC_Exec ] UnrealGame.UnrealPlayer.ShowAI
	 void                      LogMultiKills ( float Reward, bool bEnemyKill );  		//  UnrealGame.UnrealPlayer.LogMultiKills
	 void                      ClientDelayedAnnouncement ( class USound* AnnouncementSound, unsigned char Delay );		//  UnrealGame.UnrealPlayer.ClientDelayedAnnouncement
	 void                      ClientDelayedAnnouncementNamed ( struct FName Announcement, unsigned char Delay );		//  UnrealGame.UnrealPlayer.ClientDelayedAnnouncementNamed
	 void                      AwardAdrenaline ( float Amount );                 		//  UnrealGame.UnrealPlayer.AwardAdrenaline
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.UnrealPlayer.PostBeginPlay
	 void                      ClientSendStats ( class ATeamPlayerReplicationInfo* PRI, int newgoals, bool bNewFirstBlood, int newKills, int newsuicides, int newFlagTouches, int newFlagReturns, int newFlakCount, int newComboCount, int newHeadCount, int newRanOverCount, int newDaredevilPoints );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.ClientSendStats
	 void                      ClientSendCombos ( class ATeamPlayerReplicationInfo* PRI, unsigned char Combos0, unsigned char Combos1, unsigned char Combos2, unsigned char Combos3, unsigned char Combos4 );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.ClientSendCombos
	 void                      ClientSendMultiKills ( class ATeamPlayerReplicationInfo* PRI, unsigned char MultiKills0, unsigned char MultiKills1, unsigned char MultiKills2, unsigned char MultiKills3, unsigned char MultiKills4, unsigned char MultiKills5, unsigned char MultiKills6 );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.ClientSendMultiKills
	 void                      ClientSendSprees ( class ATeamPlayerReplicationInfo* PRI, unsigned char Spree0, unsigned char Spree1, unsigned char Spree2, unsigned char Spree3, unsigned char Spree4, unsigned char Spree5 );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.ClientSendSprees
	 void                      ClientSendVehicle ( class ATeamPlayerReplicationInfo* PRI, class UClass* V, int Kills, int Deaths, int DeathsDriving, int i );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.ClientSendVehicle
	 void                      ClientSendWeapon ( class ATeamPlayerReplicationInfo* PRI, class UClass* W, int Kills, int Deaths, int deathsholding, int i );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayer.ClientSendWeapon
	 void                      ServerGetNextVehicleStats ( class ATeamPlayerReplicationInfo* PRI, int i );		//  UnrealGame.UnrealPlayer.ServerGetNextVehicleStats
	 void                      ServerGetNextWeaponStats ( class ATeamPlayerReplicationInfo* PRI, int i );		//  UnrealGame.UnrealPlayer.ServerGetNextWeaponStats
	 void                      ServerUpdateStatArrays ( class ATeamPlayerReplicationInfo* PRI );		//  UnrealGame.UnrealPlayer.ServerUpdateStatArrays
	 void                      ServerUpdateStats ( class ATeamPlayerReplicationInfo* PRI );		//  UnrealGame.UnrealPlayer.ServerUpdateStats
}; // Size: 0x009C

// Class UnrealGame.UnrealTeamInfo
class DLL_IMPORT AUnrealTeamInfo : public ATeamInfo
{
public:
	class URosterEntry*                                DefaultRosterEntry;                               		// 0x0480 ( 0x0004 ) [ CPF_Edit ]
	class TArray< class URosterEntry* >                Roster;                                           		// 0x0484 ( 0x000C ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UClass*                                      AllowedTeamMembers[ 0x20 ];                       		// 0x0490 ( 0x0080 ) [ CPF_Edit ]
	unsigned char                                      TeamAlliance;                                     		// 0x0510 ( 0x0001 ) [ CPF_Edit ]
	int                                                DesiredTeamSize;                                  		// 0x0514 ( 0x0004 ) 
	class ATeamAI*                                     AI;                                               		// 0x0518 ( 0x0004 ) 
	class FColor                                       HudTeamColor;                                     		// 0x051C ( 0x0004 ) 
	struct FString                                     TeamSymbolName;                                   		// 0x0520 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     RosterNames;                                      		// 0x052C ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              CurrentObjectiveProgress;                         		// 0x0538 ( 0x0004 ) 
	int                                                LastObjectiveTime;                                		// 0x053C ( 0x0004 ) 
	int                                                ObjectivesDisabledCount;                          		// 0x0540 ( 0x0004 ) 

	// UScript Functions
	 void                      RemoveFromTeam ( class AController* Other );      		//  UnrealGame.UnrealTeamInfo.RemoveFromTeam
	 void                      SetBotOrders ( class ABot* NewBot, class URosterEntry* R );		//  UnrealGame.UnrealTeamInfo.SetBotOrders
	 bool                      BelongsOnTeam ( class UClass* PawnClass );        		//  UnrealGame.UnrealTeamInfo.BelongsOnTeam
	 bool                      AddToTeam ( class AController* Other );           		//  UnrealGame.UnrealTeamInfo.AddToTeam
	 class URosterEntry*       GetNamedBot ( struct FString botname );           		//  UnrealGame.UnrealTeamInfo.GetNamedBot
	 class URosterEntry*       GetNextBot ( struct FString botname );            		//  UnrealGame.UnrealTeamInfo.GetNextBot
	 void                      AddNamedBot ( struct FString botname );           		//  UnrealGame.UnrealTeamInfo.AddNamedBot
	 void                      AddRandomPlayer (  );                             		//  UnrealGame.UnrealTeamInfo.AddRandomPlayer
	 bool                      AlreadyExistsEntry ( struct FString CharacterName, bool bNoRecursion );		//  UnrealGame.UnrealTeamInfo.AlreadyExistsEntry
	 class URosterEntry*       GetRandomPlayer (  );                             		//  UnrealGame.UnrealTeamInfo.GetRandomPlayer
	 class URosterEntry*       ChooseBotClass ( struct FString botname );        		//  UnrealGame.UnrealTeamInfo.ChooseBotClass
	 bool                      NeedsBotMoreThan ( class AUnrealTeamInfo* t );    		//  UnrealGame.UnrealTeamInfo.NeedsBotMoreThan
	 class UClass*             NextLoadOut ( class UClass* CurrentLoadout );     		// [ FUNC_Simulated ] UnrealGame.UnrealTeamInfo.NextLoadOut
	 void                      FillPlayerTeam ( class UGameProfile* G );         		//  UnrealGame.UnrealTeamInfo.FillPlayerTeam
	 void                      Initialize ( int TeamBots );                      		//  UnrealGame.UnrealTeamInfo.Initialize
	 bool                      AllBotsSpawned (  );                              		//  UnrealGame.UnrealTeamInfo.AllBotsSpawned
	 int                       OverrideInitialBots ( int N, class AUnrealTeamInfo* t );		//  UnrealGame.UnrealTeamInfo.OverrideInitialBots
	 void                      Reset (  );                                       		//  UnrealGame.UnrealTeamInfo.Reset
}; // Size: 0x00C4

// Class UnrealGame.WeaponDamageType
class DLL_IMPORT AWeaponDamageType : public ADamageType
{
public:
	class UClass*                                      WeaponClass;                                      		// 0x0494 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 struct FString            GetWeaponClass (  );                              		//  UnrealGame.WeaponDamageType.GetWeaponClass
}; // Size: 0x0004

// Class UnrealGame.VehicleDamageType
class DLL_IMPORT AVehicleDamageType : public ADamageType
{
public:
	class UClass*                                      VehicleClass;                                     		// 0x0494 ( 0x0004 ) [ CPF_Edit ]
}; // Size: 0x0004

// Class UnrealGame.LevelGameRules
class DLL_IMPORT ALevelGameRules : public AInfo
{
public:
	class TArray< class UClass* >                      MapMutator;                                       		// 0x041C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      UpdateGame ( class AGameInfo* G );                		//  UnrealGame.LevelGameRules.UpdateGame
	 void                      PreBeginPlay (  );                                		//  UnrealGame.LevelGameRules.PreBeginPlay
}; // Size: 0x000C

// Class UnrealGame.UnrealScriptedSequence
class DLL_IMPORT AUnrealScriptedSequence : public AScriptedSequence
{
public:
	class AUnrealScriptedSequence*                     EnemyAcquisitionScript;                           		// 0x03E4 ( 0x0004 ) 
	class AController*                                 CurrentUser;                                      		// 0x03E8 ( 0x0004 ) 
	class AUnrealScriptedSequence*                     NextScript;                                       		// 0x03EC ( 0x0004 ) 
	unsigned long                                      bFirstScript:1;                                   		// 0x03F0 ( 0x0004 )  [0x00000001]
	unsigned long                                      bSniping:1;                                       		// 0x03F0 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bDontChangeScripts:1;                             		// 0x03F0 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bFreelance:1;                                     		// 0x03F0 ( 0x0004 )  [0x00000008]
	unsigned long                                      bRoamingScript:1;                                 		// 0x03F0 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bAvoid:1;                                         		// 0x03F0 ( 0x0004 )  [0x00000020]
	unsigned long                                      bDisabled:1;                                      		// 0x03F0 ( 0x0004 )  [0x00000040]
	unsigned long                                      bNotInVehicle:1;                                  		// 0x03F0 ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned char                                      Priority;                                         		// 0x03F4 ( 0x0001 ) [ CPF_Edit ]
	struct FName                                       EnemyAcquisitionScriptTag;                        		// 0x03F8 ( 0x0004 ) [ CPF_Edit ]
	float                                              EnemyAcquisitionScriptProbability;                		// 0x03FC ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       SnipingVolumeTag;                                 		// 0x0400 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      WeaponPreference;                                 		// 0x0404 ( 0x0004 ) [ CPF_Edit ]
	float                                              NumChecked;                                       		// 0x0408 ( 0x0004 ) 

	// UScript Functions
	 bool                      HigherPriorityThan ( class AUnrealScriptedSequence* S, class ABot* B );		//  UnrealGame.UnrealScriptedSequence.HigherPriorityThan
	 void                      BeginPlay (  );                                   		//  UnrealGame.UnrealScriptedSequence.BeginPlay
	 bool                      CheckForErrors (  );                              		//  UnrealGame.UnrealScriptedSequence.CheckForErrors
	 void                      FreeScript (  );                                  		//  UnrealGame.UnrealScriptedSequence.FreeScript
	 void                      Reset (  );                                       		//  UnrealGame.UnrealScriptedSequence.Reset
}; // Size: 0x0028

// Class UnrealGame.HoldSpot
class DLL_IMPORT AHoldSpot : public AUnrealScriptedSequence
{
public:
	class AVehicle*                                    HoldVehicle;                                      		// 0x040C ( 0x0004 ) 

	// UScript Functions
	 void                      FreeScript (  );                                  		//  UnrealGame.HoldSpot.FreeScript
	 class AActor*             GetMoveTarget (  );                               		//  UnrealGame.HoldSpot.GetMoveTarget
}; // Size: 0x0004

// Class UnrealGame.TeamGame
class DLL_IMPORT ATeamGame : public ADeathMatch
{
public:
	unsigned long                                      bBalanceTeams:1;                                  		// 0x1228 ( 0x0004 )  [0x00000001]
	unsigned long                                      bPlayersBalanceTeams:1;                           		// 0x1228 ( 0x0004 )  [0x00000002]
	unsigned long                                      bAllowNonTeamChat:1;                              		// 0x1228 ( 0x0004 )  [0x00000004]
	unsigned long                                      bScoreTeamKills:1;                                		// 0x1228 ( 0x0004 )  [0x00000008]
	unsigned long                                      bSpawnInTeamArea:1;                               		// 0x1228 ( 0x0004 )  [0x00000010]
	unsigned long                                      bScoreVictimsTarget:1;                            		// 0x1228 ( 0x0004 )  [0x00000020]
	float                                              FriendlyFireScale;                                		// 0x122C ( 0x0004 ) 
	int                                                MaxTeamSize;                                      		// 0x1230 ( 0x0004 ) 
	float                                              TeammateBoost;                                    		// 0x1234 ( 0x0004 ) 
	class AUnrealTeamInfo*                             Teams[ 0x02 ];                                    		// 0x1238 ( 0x0008 ) 
	struct FString                                     BlueTeamName;                                     		// 0x1240 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     RedTeamName;                                      		// 0x124C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UClass*                                      TeamAIType[ 0x02 ];                               		// 0x1258 ( 0x0008 ) 
	struct FString                                     PathWhisps[ 0x02 ];                               		// 0x1260 ( 0x0018 ) [ CPF_NeedCtorLink ]
	struct FString                                     NearString;                                       		// 0x1278 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BareHanded;                                       		// 0x1284 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FName                                       CaptureSoundName[ 0x02 ];                         		// 0x1290 ( 0x0008 ) 
	struct FName                                       TakeLeadName[ 0x02 ];                             		// 0x1298 ( 0x0008 ) 
	struct FName                                       IncreaseLeadName[ 0x02 ];                         		// 0x12A0 ( 0x0008 ) 
	struct FString                                     TGPropsDisplayText[ 0x05 ];                       		// 0x12A8 ( 0x003C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     TGPropDescText[ 0x05 ];                           		// 0x12E4 ( 0x003C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     TGHints;                                          		// 0x1320 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	float                                              ADR_Goal;                                         		// 0x132C ( 0x0004 ) [ CPF_Edit ]
	float                                              ADR_Return;                                       		// 0x1330 ( 0x0004 ) [ CPF_Edit ]
	float                                              ADR_Control;                                      		// 0x1334 ( 0x0004 ) [ CPF_Edit ]
	class UTexture*                                    TempSymbols[ 0x02 ];                              		// 0x1338 ( 0x0008 ) 
	float                                              LastEndGameTauntTime;                             		// 0x1340 ( 0x0004 ) 
	struct FString                                     EndGameComments[ 0x0A ];                          		// 0x1344 ( 0x0078 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EndGameTaunts[ 0x0A ];                            		// 0x13BC ( 0x0078 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EndGameVictoryRemarks[ 0x0A ];                    		// 0x1434 ( 0x0078 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EndGameLossRemarks[ 0x0A ];                       		// 0x14AC ( 0x0078 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EndGameResponses[ 0x0A ];                         		// 0x1524 ( 0x0078 ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned char                                      EndGameCommented[ 0x0A ];                         		// 0x159C ( 0x000A ) 
	unsigned char                                      EndGameRemark[ 0x0A ];                            		// 0x15A6 ( 0x000A ) 
	int                                                LastEndGameComment;                               		// 0x15B0 ( 0x0004 ) 
	int                                                LastEndGameRemark;                                		// 0x15B4 ( 0x0004 ) 
	int                                                LastEndGameResponse;                              		// 0x15B8 ( 0x0004 ) 
	int                                                iCurWinningTeam;                                  		// 0x15BC ( 0x0004 ) 
	unsigned long                                      bAnnouncedAlmostWinningTeam:1;                    		// 0x15C0 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      EndGameTauntFor ( class ABot* B );                		//  UnrealGame.TeamGame.EndGameTauntFor
	 void                      EndGameCommentFor ( class ABot* B );              		//  UnrealGame.TeamGame.EndGameCommentFor
	 bool                      PickEndGameTauntFor ( class ABot* B );            		//  UnrealGame.TeamGame.PickEndGameTauntFor
	 void                      WeakObjectives (  );                              		//  UnrealGame.TeamGame.WeakObjectives
	 class TArray< struct FString > GetAllLoadHints ( bool bThisClassOnly );          		//  UnrealGame.TeamGame.GetAllLoadHints
	 void                      eventPostLogin ( class APlayerController* NewPlayer );		// [ FUNC_Event ] UnrealGame.TeamGame.PostLogin
	 void                      InitVoiceReplicationInfo (  );                    		//  UnrealGame.TeamGame.InitVoiceReplicationInfo
	 void                      AnnounceScore ( int ScoringTeam );                		//  UnrealGame.TeamGame.AnnounceScore
	 bool                      eventAcceptPlayInfoProperty ( struct FString PropertyName );		// [ FUNC_Event ] UnrealGame.TeamGame.AcceptPlayInfoProperty
	 struct FString            eventGetDescriptionText ( struct FString PropName );		// [ FUNC_Event ] UnrealGame.TeamGame.GetDescriptionText
	 void                      FillPlayInfo ( class UPlayInfo* PlayInfo );       		//  UnrealGame.TeamGame.FillPlayInfo
	 void                      FindNewObjectives ( class AGameObjective* DisabledObjective );		//  UnrealGame.TeamGame.FindNewObjectives
	 struct FString            ParseMessageString ( class AMutator* BaseMutator, class AController* Who, struct FString Message );		//  UnrealGame.TeamGame.ParseMessageString
	 struct FString            FindTeamDesignation ( class AGameReplicationInfo* GRI, class AActor* A );		//  UnrealGame.TeamGame.FindTeamDesignation
	 struct FString            ParseChatPercVar ( class AMutator* BaseMutator, class AController* Who, struct FString Cmd );		//  UnrealGame.TeamGame.ParseChatPercVar
	 void                      PlayEndOfMatchMessage (  );                       		//  UnrealGame.TeamGame.PlayEndOfMatchMessage
	 bool                      TooManyBots ( class AController* botToRemove );   		//  UnrealGame.TeamGame.TooManyBots
	 bool                      SameTeam ( class AController* A, class AController* B );		//  UnrealGame.TeamGame.SameTeam
	 int                       ReduceDamage ( int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, int iWeaponType, struct FVector* Momentum );		//  UnrealGame.TeamGame.ReduceDamage
	 void                      SetTeamAssistPoint ( class AController* Killer, class AController* Other );		//  UnrealGame.TeamGame.SetTeamAssistPoint
	 void                      ScoreKill ( class AController* Killer, class AController* Other );		//  UnrealGame.TeamGame.ScoreKill
	 bool                      NearGoal ( class AController* C );                		//  UnrealGame.TeamGame.NearGoal
	 class APawn*              FindVictimsTarget ( class AController* Other );   		//  UnrealGame.TeamGame.FindVictimsTarget
	 bool                      CriticalPlayer ( class AController* Other );      		//  UnrealGame.TeamGame.CriticalPlayer
	 void                      AnnounceAlmostWinningTeam (  );                   		//  UnrealGame.TeamGame.AnnounceAlmostWinningTeam
	 void                      AnnounceEndingWinningTeam (  );                   		//  UnrealGame.TeamGame.AnnounceEndingWinningTeam
	 void                      AnnounceWinningTeam (  );                         		//  UnrealGame.TeamGame.AnnounceWinningTeam
	 void                      CheckScore ( class APlayerReplicationInfo* Scorer );		//  UnrealGame.TeamGame.CheckScore
	 float                     RatePlayerStart ( class ANavigationPoint* N, unsigned char Team, class AController* Player );		//  UnrealGame.TeamGame.RatePlayerStart
	 bool                      ChangeTeam ( class AController* Other, int Num, bool bNewTeam );		//  UnrealGame.TeamGame.ChangeTeam
	 unsigned char             PickTeam ( unsigned char Num, class AController* C );		//  UnrealGame.TeamGame.PickTeam
	 class AUnrealTeamInfo*    FindTeamFor ( class AController* C );             		//  UnrealGame.TeamGame.FindTeamFor
	 class AUnrealTeamInfo*    GetBotTeam2 ( bool forceTeam, int Team );         		//  UnrealGame.TeamGame.GetBotTeam2
	 class AUnrealTeamInfo*    GetBotTeam ( int TeamBots );                      		//  UnrealGame.TeamGame.GetBotTeam
	 void                      GetServerDetails ( struct FServerResponseLine* ServerState );		//  UnrealGame.TeamGame.GetServerDetails
	 bool                      CanSpectate ( class APlayerController* Viewer, bool bOnlySpectator, class AActor* ViewTarget );		//  UnrealGame.TeamGame.CanSpectate
	 void                      SetEndGameFocus ( class APlayerReplicationInfo* Winner );		//  UnrealGame.TeamGame.SetEndGameFocus
	 bool                      CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );		//  UnrealGame.TeamGame.CheckEndGame
	 void                      IncrementGoalsScored ( class APlayerReplicationInfo* PRI );		//  UnrealGame.TeamGame.IncrementGoalsScored
	 void                      NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );		//  UnrealGame.TeamGame.NotifyKilled
	 void                      RestartPlayer ( class AController* aPlayer );     		//  UnrealGame.TeamGame.RestartPlayer
	 void                      ShowPathTo ( class APlayerController* P, int TeamNum );		//  UnrealGame.TeamGame.ShowPathTo
	 bool                      CanShowPathTo ( class APlayerController* P, int TeamNum );		//  UnrealGame.TeamGame.CanShowPathTo
	 int                       GetMinPlayers (  );                               		//  UnrealGame.TeamGame.GetMinPlayers
	 void                      InitTeamSymbols (  );                             		//  UnrealGame.TeamGame.InitTeamSymbols
	 void                      eventInitGame ( struct FString Options, struct FString* Error );		// [ FUNC_Event ] UnrealGame.TeamGame.InitGame
	 class AUnrealTeamInfo*    GetRedTeam ( int TeamBots );                      		//  UnrealGame.TeamGame.GetRedTeam
	 class AUnrealTeamInfo*    GetBlueTeam ( int TeamBots );                     		//  UnrealGame.TeamGame.GetBlueTeam
	 void                      PreLoadBot (  );                                  		//  UnrealGame.TeamGame.PreLoadBot
	 void                      PreLoadNamedBot ( struct FString botname );       		//  UnrealGame.TeamGame.PreLoadNamedBot
	 void                      OverrideInitialBots (  );                         		//  UnrealGame.TeamGame.OverrideInitialBots
	 class ATeamInfo*          OtherTeam ( class ATeamInfo* Requester );         		//  UnrealGame.TeamGame.OtherTeam
	 bool                      CheckMaxLives ( class APlayerReplicationInfo* Scorer );		//  UnrealGame.TeamGame.CheckMaxLives
	 void                      UpdateAnnouncements (  );                         		// [ FUNC_Simulated ] UnrealGame.TeamGame.UpdateAnnouncements
	 void                      PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds );		//  UnrealGame.TeamGame.PrecacheGameAnnouncements
	 int                       BallCarrierMessage (  );                          		//  UnrealGame.TeamGame.BallCarrierMessage
	 int                       GetStatus ( class APlayerController* Sender, class ABot* B );		//  UnrealGame.TeamGame.GetStatus
	 void                      ParseVoiceCommand ( class APlayerController* Sender, struct FString RecognizedString );		//  UnrealGame.TeamGame.ParseVoiceCommand
	 void                      ParseRecipients ( int* RecipientIDs, int* NumRecipients, struct FString* OrderString );		//  UnrealGame.TeamGame.ParseRecipients
	 int                       ParseRecipient ( struct FString Recipient );      		//  UnrealGame.TeamGame.ParseRecipient
	 bool                      ApplyOrder ( class APlayerController* Sender, int RecipientID, int OrderID );		//  UnrealGame.TeamGame.ApplyOrder
	 int                       ParseOrder ( struct FString OrderString );        		//  UnrealGame.TeamGame.ParseOrder
	 void                      StartMatch (  );                                  		//  UnrealGame.TeamGame.StartMatch
	 class TArray< int >       GetTeamScores (  );                               		//  UnrealGame.TeamGame.GetTeamScores
	 class UClass*             GetWaitViewClass ( unsigned char Team );          		//  UnrealGame.TeamGame.GetWaitViewClass
	 void                      eventSetGrammar (  );                             		// [ FUNC_Event ] UnrealGame.TeamGame.SetGrammar
	 void                      PostBeginPlay (  );                               		//  UnrealGame.TeamGame.PostBeginPlay
}; // Size: 0x039C

// Class UnrealGame.DestroyableObjective
class DLL_IMPORT ADestroyableObjective : public AGameObjective
{
public:
	unsigned char                                      ConstraintInstigator;                             		// 0x06E4 ( 0x0001 ) [ CPF_Edit ]
	class UClass*                                      ConstraintPawnClass;                              		// 0x06E8 ( 0x0004 ) [ CPF_Edit ]
	int                                                DamageCapacity;                                   		// 0x06EC ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       TakeDamageEvent;                                  		// 0x06F0 ( 0x0004 ) [ CPF_Edit ]
	int                                                DamageEventThreshold;                             		// 0x06F4 ( 0x0004 ) [ CPF_Edit ]
	int                                                AccumulatedDamage;                                		// 0x06F8 ( 0x0004 ) 
	int                                                Health;                                           		// 0x06FC ( 0x0004 ) [ CPF_Net ]
	float                                              LinkHealMult;                                     		// 0x0700 ( 0x0004 ) 
	float                                              VehicleDamageScaling;                             		// 0x0704 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     AIShootOffset;                                    		// 0x0708 ( 0x000C ) [ CPF_Edit ]
	class AShootTarget*                                ShootTarget;                                      		// 0x0714 ( 0x0004 ) 
	unsigned long                                      bCanDefenderDamage:1;                             		// 0x0718 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bReplicateHealth:1;                               		// 0x0718 ( 0x0004 )  [0x00000002]
	unsigned long                                      bMonitorUnderAttack:1;                            		// 0x0718 ( 0x0004 )  [0x00000004]
	unsigned long                                      bIsUnderAttack:1;                                 		// 0x0718 ( 0x0004 )  [0x00000008][ CPF_Net ]
	class AVolumeTimer*                                UnderAttackTimer;                                 		// 0x071C ( 0x0004 ) 
	float                                              LastDamageTime;                                   		// 0x0720 ( 0x0004 ) 
	float                                              LastWarnTime;                                     		// 0x0724 ( 0x0004 ) 

	// UScript Functions
	 float                     GetObjectiveProgress (  );                        		// [ FUNC_Simulated ] UnrealGame.DestroyableObjective.GetObjectiveProgress
	 bool                      IsCritical (  );                                  		// [ FUNC_Simulated ] UnrealGame.DestroyableObjective.IsCritical
	 void                      TimerPop ( class AVolumeTimer* t );               		//  UnrealGame.DestroyableObjective.TimerPop
	 void                      DisableObjective ( class APawn* Instigator );     		//  UnrealGame.DestroyableObjective.DisableObjective
	 bool                      HealDamage ( int Amount, class AController* Healer, class UClass* DamageType );		//  UnrealGame.DestroyableObjective.HealDamage
	 void                      AwardAssaultScore ( int Score );                  		//  UnrealGame.DestroyableObjective.AwardAssaultScore
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  UnrealGame.DestroyableObjective.TakeDamage
	 void                      Reset (  );                                       		//  UnrealGame.DestroyableObjective.Reset
	 bool                      TellBotHowToHeal ( class ABot* B );               		//  UnrealGame.DestroyableObjective.TellBotHowToHeal
	 bool                      NearObjective ( class APawn* P );                 		//  UnrealGame.DestroyableObjective.NearObjective
	 bool                      TellBotHowToDisable ( class ABot* B );            		//  UnrealGame.DestroyableObjective.TellBotHowToDisable
	 bool                      LegitimateTargetOf ( class ABot* B );             		//  UnrealGame.DestroyableObjective.LegitimateTargetOf
	 bool                      KillEnemyFirst ( class ABot* B );                 		//  UnrealGame.DestroyableObjective.KillEnemyFirst
	 class AActor*             GetShootTarget (  );                              		//  UnrealGame.DestroyableObjective.GetShootTarget
	 bool                      TeamLink ( int TeamNum );                         		// [ FUNC_Simulated ] UnrealGame.DestroyableObjective.TeamLink
	 void                      Destroyed (  );                                   		//  UnrealGame.DestroyableObjective.Destroyed
	 void                      SetDelayedDamageInstigatorController ( class AController* C );		//  UnrealGame.DestroyableObjective.SetDelayedDamageInstigatorController
	 int                       eventSpecialCost ( class APawn* Other, class UReachSpec* Path );		// [ FUNC_Event ] UnrealGame.DestroyableObjective.SpecialCost
	 void                      PostBeginPlay (  );                               		//  UnrealGame.DestroyableObjective.PostBeginPlay
}; // Size: 0x0044

// Class UnrealGame.RestingFormation
class DLL_IMPORT ARestingFormation : public AInfo
{
public:
	class ABot*                                        Occupant[ 0x10 ];                                 		// 0x041C ( 0x0040 ) 
	struct FVector                                     offset[ 0x10 ];                                   		// 0x045C ( 0x00C0 ) 
	struct FVector                                     LookDir[ 0x10 ];                                  		// 0x051C ( 0x00C0 ) 
	float                                              FormationSize;                                    		// 0x05DC ( 0x0004 ) 

	// UScript Functions
	 struct FVector            GetViewPointFor ( class ABot* B, int pos );       		//  UnrealGame.RestingFormation.GetViewPointFor
	 struct FVector            GetLocationFor ( int pos, class ABot* B );        		//  UnrealGame.RestingFormation.GetLocationFor
	 int                       RecommendPositionFor ( class ABot* B );           		//  UnrealGame.RestingFormation.RecommendPositionFor
	 bool                      SetFormation ( class ABot* B, int pos, bool bFullCheck );		//  UnrealGame.RestingFormation.SetFormation
	 void                      LeaveFormation ( class ABot* B );                 		//  UnrealGame.RestingFormation.LeaveFormation
}; // Size: 0x01C4

// Class UnrealGame.ShootTarget
class DLL_IMPORT AShootTarget : public ALookTarget
{
public:
	class USound*                                      OnTargetSound;                                    		// 0x03C8 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bEnabled:1;                                       		// 0x03CC ( 0x0004 )  [0x00000001]
	unsigned long                                      bTriggered:1;                                     		// 0x03CC ( 0x0004 )  [0x00000002]

	// UScript Functions
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  UnrealGame.ShootTarget.Trigger
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  UnrealGame.ShootTarget.TakeDamage
}; // Size: 0x0008

// Class UnrealGame.ProximityObjective
class DLL_IMPORT AProximityObjective : public AGameObjective
{
public:
	class UClass*                                      ConstraintPawnClass;                              		// 0x06E4 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 bool                      TellBotHowToDisable ( class ABot* B );            		//  UnrealGame.ProximityObjective.TellBotHowToDisable
	 void                      SetActive ( bool bActiveStatus );                 		//  UnrealGame.ProximityObjective.SetActive
	 class APawn*              FindInstigator ( class APawn* Other );            		//  UnrealGame.ProximityObjective.FindInstigator
	 bool                      IsRelevant ( class APawn* P, bool bAliveCheck );  		//  UnrealGame.ProximityObjective.IsRelevant
	 void                      Touch ( class AActor* Other );                    		//  UnrealGame.ProximityObjective.Touch
}; // Size: 0x0004

// Class UnrealGame.HoldObjective
class DLL_IMPORT AHoldObjective : public AProximityObjective
{
public:
	struct FName                                       MoverTag;                                         		// 0x06E8 ( 0x0004 ) [ CPF_Edit ]
	class TArray< class AMover* >                      LinkedMover;                                      		// 0x06EC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FTouchingPlayer >             TouchingPlayers;                                  		// 0x06F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class AController*                                 LastPlayerTouching;                               		// 0x0704 ( 0x0004 ) 
	class TArray< class AActor* >                      Touchers;                                         		// 0x0708 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              TotalHeldTime;                                    		// 0x0714 ( 0x0004 ) 
	unsigned long                                      bIsHeld:1;                                        		// 0x0718 ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bIsTriggerControl:1;                              		// 0x0718 ( 0x0004 )  [0x00000002]
	unsigned long                                      bLocationFX:1;                                    		// 0x0718 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	class AEmitter*                                    LocationFX;                                       		// 0x071C ( 0x0004 ) 

	// UScript Functions
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] UnrealGame.HoldObjective.UpdatePrecacheMaterials
	 void                      SetObjectiveOverlay ( bool bShow );               		// [ FUNC_Simulated ] UnrealGame.HoldObjective.SetObjectiveOverlay
	 bool                      IsCritical (  );                                  		// [ FUNC_Simulated ] UnrealGame.HoldObjective.IsCritical
	 float                     GetObjectiveProgress (  );                        		// [ FUNC_Simulated ] UnrealGame.HoldObjective.GetObjectiveProgress
	 void                      Reset (  );                                       		//  UnrealGame.HoldObjective.Reset
	 void                      CompleteObjective ( class APawn* Instigator );    		//  UnrealGame.HoldObjective.CompleteObjective
	 void                      Trigger ( class AActor* Other, class APawn* Instigator );		//  UnrealGame.HoldObjective.Trigger
	 void                      AwardAssaultScore ( int Score );                  		//  UnrealGame.HoldObjective.AwardAssaultScore
	 void                      RemoveTouchingPlayer ( class AController* C );    		//  UnrealGame.HoldObjective.RemoveTouchingPlayer
	 void                      AddNewTouchingPlayer ( class AController* C );    		//  UnrealGame.HoldObjective.AddNewTouchingPlayer
	 void                      PlayerToucherDied ( class APawn* P );             		//  UnrealGame.HoldObjective.PlayerToucherDied
	 void                      eventUnTouch ( class AActor* Other );             		// [ FUNC_Event ] UnrealGame.HoldObjective.UnTouch
	 void                      eventTouch ( class AActor* Other );               		// [ FUNC_Event ] UnrealGame.HoldObjective.Touch
	 bool                      TellBotHowToDisable ( class ABot* B );            		//  UnrealGame.HoldObjective.TellBotHowToDisable
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] UnrealGame.HoldObjective.PostBeginPlay
}; // Size: 0x0038

// Class UnrealGame.TeamAI
class DLL_IMPORT ATeamAI : public AInfo
{
public:
	class AUnrealTeamInfo*                             Team;                                             		// 0x041C ( 0x0004 ) 
	class AUnrealTeamInfo*                             EnemyTeam;                                        		// 0x0420 ( 0x0004 ) 
	int                                                NumSupportingPlayer;                              		// 0x0424 ( 0x0004 ) 
	class AGameObjective*                              Objectives;                                       		// 0x0428 ( 0x0004 ) 
	class AGameObjective*                              PickedObjective;                                  		// 0x042C ( 0x0004 ) 
	class ASquadAI*                                    Squads;                                           		// 0x0430 ( 0x0004 ) 
	class ASquadAI*                                    AttackSquad;                                      		// 0x0434 ( 0x0004 ) 
	class ASquadAI*                                    FreelanceSquad;                                   		// 0x0438 ( 0x0004 ) 
	class UClass*                                      SquadType;                                        		// 0x043C ( 0x0004 ) 
	int                                                OrderOffset;                                      		// 0x0440 ( 0x0004 ) 
	struct FName                                       OrderList[ 0x08 ];                                		// 0x0444 ( 0x0020 ) 
	class APickup*                                     SuperPickups[ 0x10 ];                             		// 0x0464 ( 0x0040 ) 
	int                                                NumSuperPickups;                                  		// 0x04A4 ( 0x0004 ) 

	// UScript Functions
	 void                      RemoveFromTeam ( class AController* Other );      		//  UnrealGame.TeamAI.RemoveFromTeam
	 void                      CallForHelp ( class ABot* B );                    		//  UnrealGame.TeamAI.CallForHelp
	 void                      SetOrders ( class ABot* B, struct FName NewOrders, class AController* OrderGiver );		//  UnrealGame.TeamAI.SetOrders
	 void                      SetBotOrders ( class ABot* NewBot, class URosterEntry* R );		//  UnrealGame.TeamAI.SetBotOrders
	 void                      PutOnFreelance ( class ABot* B );                 		//  UnrealGame.TeamAI.PutOnFreelance
	 void                      PutOnOffense ( class ABot* B );                   		//  UnrealGame.TeamAI.PutOnOffense
	 bool                      PutOnDefense ( class ABot* B );                   		//  UnrealGame.TeamAI.PutOnDefense
	 class AGameObjective*     GetPriorityFreelanceObjective (  );               		//  UnrealGame.TeamAI.GetPriorityFreelanceObjective
	 class AGameObjective*     GetPriorityAttackObjectiveFor ( class ASquadAI* AttackSquad );		//  UnrealGame.TeamAI.GetPriorityAttackObjectiveFor
	 class AGameObjective*     GetPriorityAttackObjective (  );                  		//  UnrealGame.TeamAI.GetPriorityAttackObjective
	 class AGameObjective*     GetMostDefendedObjective (  );                    		//  UnrealGame.TeamAI.GetMostDefendedObjective
	 class AGameObjective*     GetLeastDefendedObjective (  );                   		//  UnrealGame.TeamAI.GetLeastDefendedObjective
	 class ASquadAI*           AddSquadWithLeader ( class AController* C, class AGameObjective* o );		//  UnrealGame.TeamAI.AddSquadWithLeader
	 void                      PutBotOnSquadLedBy ( class AController* C, class ABot* B );		//  UnrealGame.TeamAI.PutBotOnSquadLedBy
	 class ASquadAI*           AddHumanSquad (  );                               		//  UnrealGame.TeamAI.AddHumanSquad
	 class ASquadAI*           FindHumanSquad (  );                              		//  UnrealGame.TeamAI.FindHumanSquad
	 void                      SetObjectiveLists (  );                           		//  UnrealGame.TeamAI.SetObjectiveLists
	 bool                      FriendlyToward ( class APawn* Other );            		//  UnrealGame.TeamAI.FriendlyToward
	 class ASquadAI*           FindSquadOf ( class AController* C );             		//  UnrealGame.TeamAI.FindSquadOf
	 bool                      OnThisTeam ( class APawn* Other );                		//  UnrealGame.TeamAI.OnThisTeam
	 void                      RemoveSquad ( class ASquadAI* Squad );            		//  UnrealGame.TeamAI.RemoveSquad
	 void                      FindNewObjectiveFor ( class ASquadAI* S, bool bForceUpdate );		//  UnrealGame.TeamAI.FindNewObjectiveFor
	 void                      FindNewObjectives ( class AGameObjective* DisabledObjective );		//  UnrealGame.TeamAI.FindNewObjectives
	 void                      NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );		//  UnrealGame.TeamAI.NotifyKilled
	 void                      ReAssessStrategy (  );                            		//  UnrealGame.TeamAI.ReAssessStrategy
	 class ASquadAI*           GetSquadLedBy ( class AController* C );           		//  UnrealGame.TeamAI.GetSquadLedBy
	 void                      ClearEnemies (  );                                		//  UnrealGame.TeamAI.ClearEnemies
	 void                      Reset (  );                                       		//  UnrealGame.TeamAI.Reset
	 bool                      SuperPickupAvailable ( class ABot* B );           		//  UnrealGame.TeamAI.SuperPickupAvailable
	 void                      CallForBall ( class APawn* Recipient );           		//  UnrealGame.TeamAI.CallForBall
	 void                      CriticalObjectiveWarning ( class AGameObjective* G, class APawn* NewEnemy );		//  UnrealGame.TeamAI.CriticalObjectiveWarning
	 void                      Timer (  );                                       		//  UnrealGame.TeamAI.Timer
	 void                      PostBeginPlay (  );                               		//  UnrealGame.TeamAI.PostBeginPlay
}; // Size: 0x008C

// Class UnrealGame.AssaultPath
class DLL_IMPORT AAssaultPath : public ANavigationPoint
{
public:
	class AGameObjective*                              AssociatedObjective;                              		// 0x0490 ( 0x0004 ) 
	class AAssaultPath*                                NextPath;                                         		// 0x0494 ( 0x0004 ) 
	int                                                Position;                                         		// 0x0498 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       ObjectiveTag;                                     		// 0x049C ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       PathTag[ 0x04 ];                                  		// 0x04A0 ( 0x0010 ) [ CPF_Edit ]
	unsigned long                                      bEnabled:1;                                       		// 0x04B0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bNoReturn:1;                                      		// 0x04B0 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bReturnOnly:1;                                    		// 0x04B0 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bFirstPath:1;                                     		// 0x04B0 ( 0x0004 )  [0x00000008]
	unsigned long                                      bLastPath:1;                                      		// 0x04B0 ( 0x0004 )  [0x00000010]
	unsigned long                                      bNoGrouping:1;                                    		// 0x04B0 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	float                                              Priority;                                         		// 0x04B4 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 class AAssaultPath*       FindPreviousPath ( struct FName AlternatePathTag );		//  UnrealGame.AssaultPath.FindPreviousPath
	 class AAssaultPath*       FindNextPath ( struct FName AlternatePathTag );   		//  UnrealGame.AssaultPath.FindNextPath
	 bool                      HasPathTag ( struct FName aPathTag );             		//  UnrealGame.AssaultPath.HasPathTag
	 struct FName              PickTag (  );                                     		//  UnrealGame.AssaultPath.PickTag
	 void                      AddTo ( class AGameObjective* o );                		//  UnrealGame.AssaultPath.AddTo
	 void                      ValidatePathTags (  );                            		//  UnrealGame.AssaultPath.ValidatePathTags
	 void                      eventTrigger ( class AActor* Other, class APawn* EventInstigator );		// [ FUNC_Event ] UnrealGame.AssaultPath.Trigger
}; // Size: 0x0028

// Class UnrealGame.UnrealChatHandler
class DLL_IMPORT AUnrealChatHandler : public ABroadcastHandler
{
public:
	unsigned long                                      bDebug:1;                                         		// 0x045C ( 0x0004 )  [0x00000001]

	// UScript Functions
	 bool                      AcceptBroadcastVoice ( class APlayerController* Receiver, class APlayerReplicationInfo* Sender );		//  UnrealGame.UnrealChatHandler.AcceptBroadcastVoice
	 bool                      AcceptBroadcastSpeech ( class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI );		//  UnrealGame.UnrealChatHandler.AcceptBroadcastSpeech
	 bool                      AcceptBroadcastLocalized ( class APlayerController* Receiver, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* obj );		//  UnrealGame.UnrealChatHandler.AcceptBroadcastLocalized
	 bool                      AcceptBroadcastText ( class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI, struct FName Type, struct FString* Msg );		//  UnrealGame.UnrealChatHandler.AcceptBroadcastText
	 void                      DoChatDebug (  );                                 		//  UnrealGame.UnrealChatHandler.DoChatDebug
	 void                      ToggleChatDebug (  );                             		//  UnrealGame.UnrealChatHandler.ToggleChatDebug
}; // Size: 0x0004

// Class UnrealGame.IdleKickWarningMessage
class DLL_IMPORT AIdleKickWarningMessage : public ALocalMessage
{
public:

	// UScript Functions
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  UnrealGame.IdleKickWarningMessage.GetString
}; // Size: 0x0000

// Class UnrealGame.AnnounceAdrenaline
class DLL_IMPORT AAnnounceAdrenaline : public AInfo
{
public:
	class USound*                                      AnnounceSound;                                    		// 0x041C ( 0x0004 ) 
	struct FName                                       Announcement;                                     		// 0x0420 ( 0x0004 ) 

	// UScript Functions
	 void                      Timer (  );                                       		//  UnrealGame.AnnounceAdrenaline.Timer
}; // Size: 0x0008

// Class UnrealGame.CustomBotConfig
class DLL_IMPORT UCustomBotConfig : public UObject
{
public:
	struct FString                                     FavoriteWeapon;                                   		// 0x002C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NoPreference;                                     		// 0x0038 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FCustomConfiguration >        ConfigArray;                                      		// 0x0044 ( 0x000C ) [ CPF_Config | CPF_NeedCtorLink ]

	// UScript Functions
	 int                       IndexFor ( struct FString PlayerName );           		//  UnrealGame.CustomBotConfig.IndexFor
	 int                       AggressivenessRating ( struct FCustomConfiguration cc );		// [ FUNC_Final | FUNC_Simulated ] UnrealGame.CustomBotConfig.AggressivenessRating
	 int                       TacticsRating ( struct FCustomConfiguration cc ); 		// [ FUNC_Final | FUNC_Simulated ] UnrealGame.CustomBotConfig.TacticsRating
	 int                       AgilityRating ( struct FCustomConfiguration cc ); 		// [ FUNC_Final | FUNC_Simulated ] UnrealGame.CustomBotConfig.AgilityRating
	 int                       AccuracyRating ( struct FCustomConfiguration cc );		// [ FUNC_Final | FUNC_Simulated ] UnrealGame.CustomBotConfig.AccuracyRating
	 int                       RatingModifier ( struct FString CharacterName );  		// [ FUNC_Final | FUNC_Simulated ] UnrealGame.CustomBotConfig.RatingModifier
	 struct FString            GetFavoriteWeaponFor ( struct FCustomConfiguration cc );		// [ FUNC_Final | FUNC_Simulated ] UnrealGame.CustomBotConfig.GetFavoriteWeaponFor
	 void                      Customize ( class URosterEntry* R );              		//  UnrealGame.CustomBotConfig.Customize
}; // Size: 0x0024

// Class UnrealGame.UnrealChatRoom
class DLL_IMPORT AUnrealChatRoom : public AVoiceChatRoom
{
public:

	// UScript Functions
	 bool                      RemoveChild ( class AVoiceChatRoom* Child );      		// [ FUNC_Simulated ] UnrealGame.UnrealChatRoom.RemoveChild
	 bool                      AddChild ( class AVoiceChatRoom* NewChild );      		// [ FUNC_Simulated ] UnrealGame.UnrealChatRoom.AddChild
	 void                      SetMask ( int NewMask );                          		//  UnrealGame.UnrealChatRoom.SetMask
	 void                      SetTeam ( int NewTeam );                          		//  UnrealGame.UnrealChatRoom.SetTeam
	 bool                      IsBanned ( class APlayerReplicationInfo* PRI );   		//  UnrealGame.UnrealChatRoom.IsBanned
	 void                      RemoveMember ( class APlayerReplicationInfo* PRI );		//  UnrealGame.UnrealChatRoom.RemoveMember
	 void                      AddMember ( class APlayerReplicationInfo* PRI );  		//  UnrealGame.UnrealChatRoom.AddMember
	 bool                      LeaveChannel ( class APlayerReplicationInfo* LeavingPRI );		//  UnrealGame.UnrealChatRoom.LeaveChannel
	 unsigned char             JoinChannel ( class APlayerReplicationInfo* NewPRI, struct FString InPassword );		//  UnrealGame.UnrealChatRoom.JoinChannel
	 bool                      CanJoinChannel ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] UnrealGame.UnrealChatRoom.CanJoinChannel
	 bool                      eventIsMember ( class APlayerReplicationInfo* PRI, bool bNoCascade );		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.UnrealChatRoom.IsMember
	 bool                      IsFull (  );                                      		// [ FUNC_Simulated ] UnrealGame.UnrealChatRoom.IsFull
	 int                       Count (  );                                       		// [ FUNC_Simulated ] UnrealGame.UnrealChatRoom.Count
	 bool                      IsPrivateChannel (  );                            		// [ FUNC_Simulated ] UnrealGame.UnrealChatRoom.IsPrivateChannel
	 bool                      IsPublicChannel (  );                             		// [ FUNC_Simulated ] UnrealGame.UnrealChatRoom.IsPublicChannel
	 class TArray< class APlayerReplicationInfo* > GetMembers (  );                                  		// [ FUNC_Simulated ] UnrealGame.UnrealChatRoom.GetMembers
	 struct FString            GetPassword (  );                                 		// [ FUNC_Simulated ] UnrealGame.UnrealChatRoom.GetPassword
	 int                       GetTeam (  );                                     		// [ FUNC_Simulated ] UnrealGame.UnrealChatRoom.GetTeam
	 struct FString            GetTitle (  );                                    		// [ FUNC_Simulated ] UnrealGame.UnrealChatRoom.GetTitle
	 int                       GetMask (  );                                     		// [ FUNC_Simulated ] UnrealGame.UnrealChatRoom.GetMask
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.UnrealChatRoom.PostNetBeginPlay
	 void                      eventTimer (  );                                  		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.UnrealChatRoom.Timer
	 void                      SetGRI ( class AGameReplicationInfo* InGRI );     		// [ FUNC_Simulated ] UnrealGame.UnrealChatRoom.SetGRI
}; // Size: 0x0000

// Class UnrealGame.SnipingVolume
class DLL_IMPORT ASnipingVolume : public AVolume
{
public:
	class AUnrealScriptedSequence*                     SnipingPoints[ 0x10 ];                            		// 0x0440 ( 0x0040 ) 

	// UScript Functions
	 void                      eventTouch ( class AActor* Other );               		// [ FUNC_Event ] UnrealGame.SnipingVolume.Touch
	 void                      AddDefensePoint ( class AUnrealScriptedSequence* S );		//  UnrealGame.SnipingVolume.AddDefensePoint
}; // Size: 0x0040

// Class UnrealGame.TeamVoiceReplicationInfo
class DLL_IMPORT ATeamVoiceReplicationInfo : public AUnrealVoiceReplicationInfo
{
public:
	int                                                RedTeamMask;                                      		// 0x051C ( 0x0004 ) [ CPF_Net ]
	int                                                BlueTeamMask;                                     		// 0x0520 ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      bTeamChatOnly:1;                                  		// 0x0524 ( 0x0004 )  [0x00000001][ CPF_Net ]

	// UScript Functions
	 int                       GetOpposingTeamChannel ( int ChannelIndex );      		// [ FUNC_Simulated ] UnrealGame.TeamVoiceReplicationInfo.GetOpposingTeamChannel
	 struct FString            GetTitle ( class AVoiceChatRoom* Room );          		// [ FUNC_Simulated ] UnrealGame.TeamVoiceReplicationInfo.GetTitle
	 void                      NotifyTeamChange ( class APlayerReplicationInfo* PRI, int TeamIndex );		//  UnrealGame.TeamVoiceReplicationInfo.NotifyTeamChange
	 unsigned char             JoinChannelAt ( int ChannelIndex, class APlayerReplicationInfo* PRI, struct FString Password );		//  UnrealGame.TeamVoiceReplicationInfo.JoinChannelAt
	 unsigned char             JoinChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI, struct FString Password );		//  UnrealGame.TeamVoiceReplicationInfo.JoinChannel
	 class AVoiceChatRoom*     GetChannel ( struct FString ChatRoomName, int TeamIndex );		// [ FUNC_Simulated ] UnrealGame.TeamVoiceReplicationInfo.GetChannel
	 int                       eventGetChannelIndex ( struct FString ChannelTitle, int TeamIndex );		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.TeamVoiceReplicationInfo.GetChannelIndex
	 int                       GetMask ( class AVoiceChatRoom* Room );           		// [ FUNC_Simulated ] UnrealGame.TeamVoiceReplicationInfo.GetMask
	 void                      SetMask ( class AVoiceChatRoom* Room, int NewMask );		//  UnrealGame.TeamVoiceReplicationInfo.SetMask
	 bool                      ValidRoom ( class AVoiceChatRoom* Room );         		// [ FUNC_Simulated ] UnrealGame.TeamVoiceReplicationInfo.ValidRoom
	 void                      eventInitChannels (  );                           		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.TeamVoiceReplicationInfo.InitChannels
}; // Size: 0x000C

// Class UnrealGame.WillowWhisp
class DLL_IMPORT AWillowWhisp : public AwEmitter
{
public:
	struct FVector                                     WayPoints[ 0x0B ];                                		// 0x05B8 ( 0x0084 ) [ CPF_Net ]
	int                                                NumPoints;                                        		// 0x063C ( 0x0004 ) [ CPF_Net ]
	int                                                Position;                                         		// 0x0640 ( 0x0004 ) 
	struct FVector                                     Destination;                                      		// 0x0644 ( 0x000C ) 
	unsigned long                                      bHeadedRight:1;                                   		// 0x0650 ( 0x0004 )  [0x00000001]
	float                                              LifeLeft;                                         		// 0x0654 ( 0x0004 ) 

	// UScript Functions
	 void                      StartNextPath (  );                               		// [ FUNC_Simulated ] UnrealGame.WillowWhisp.StartNextPath
	 void                      PostNetBeginPlay (  );                            		// [ FUNC_Simulated ] UnrealGame.WillowWhisp.PostNetBeginPlay
	 void                      PostBeginPlay (  );                               		//  UnrealGame.WillowWhisp.PostBeginPlay
}; // Size: 0x00A0

// Class UnrealGame.UnrealTeamChatRoom
class DLL_IMPORT AUnrealTeamChatRoom : public AUnrealChatRoom
{
public:

	// UScript Functions
	 bool                      NotifyTeamChange ( class APlayerReplicationInfo* PRI, int NewTeamIndex );		//  UnrealGame.UnrealTeamChatRoom.NotifyTeamChange
	 bool                      CanJoinChannel ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] UnrealGame.UnrealTeamChatRoom.CanJoinChannel
	 bool                      IsTeamChannel (  );                               		// [ FUNC_Simulated ] UnrealGame.UnrealTeamChatRoom.IsTeamChannel
}; // Size: 0x0000

// Class UnrealGame.DMMutator
class DLL_IMPORT ADMMutator : public AMutator
{
public:
	unsigned long                                      bMegaSpeed:1;                                     		// 0x0470 ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_Config | CPF_GlobalConfig ]
	float                                              AirControl;                                       		// 0x0474 ( 0x0004 ) [ CPF_Edit | CPF_Config | CPF_GlobalConfig ]
	unsigned long                                      bBrightSkins:1;                                   		// 0x0478 ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_Config | CPF_GlobalConfig ]
	struct FString                                     DMMutPropsDisplayText[ 0x02 ];                    		// 0x047C ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DMMutDescText[ 0x02 ];                            		// 0x0494 ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      GetServerDetails ( struct FServerResponseLine* ServerState );		//  UnrealGame.DMMutator.GetServerDetails
	 bool                      AlwaysKeep ( class AActor* Other );               		//  UnrealGame.DMMutator.AlwaysKeep
	 bool                      MutatorIsAllowed (  );                            		//  UnrealGame.DMMutator.MutatorIsAllowed
}; // Size: 0x003C

// Class UnrealGame.UnrealPlayerChatManager
class DLL_IMPORT AUnrealPlayerChatManager : public APlayerChatManager
{
public:
	class TArray< struct FStoredChatBan >              StoredChatRestrictions;                           		// 0x0420 ( 0x000C ) [ CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink ]
	class TArray< struct FChatBan >                    ChatRestrictions;                                 		// 0x042C ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 int                       Count (  );                                       		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.Count
	 bool                      IsLocal (  );                                     		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.IsLocal
	 bool                      IsValid ( int i );                                		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.IsValid
	 int                       GetHashIndex ( struct FString PlayerHash );       		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.GetHashIndex
	 int                       GetIDIndex ( int PlayerID );                      		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.GetIDIndex
	 struct FString            GetPlayerHash ( int PlayerID );                   		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.GetPlayerHash
	 bool                      ClientIsBanned ( struct FString PlayerHash );     		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.ClientIsBanned
	 unsigned char             GetPlayerRestriction ( int PlayerID );            		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.GetPlayerRestriction
	 bool                      UnMergeRestriction ( int Index, unsigned char NewType );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.UnMergeRestriction
	 bool                      MergeRestriction ( int Index, unsigned char NewType );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.MergeRestriction
	 bool                      ClearRestrictionID ( int PlayerID, unsigned char Type );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.ClearRestrictionID
	 bool                      ClearRestriction ( struct FString PlayerHash, unsigned char Type );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.ClearRestriction
	 bool                      AddRestrictionID ( int PlayerID, unsigned char Type );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.AddRestrictionID
	 bool                      AddRestriction ( struct FString PlayerHash, unsigned char Type );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.AddRestriction
	 bool                      SetRestrictionID ( int PlayerID, unsigned char Type );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.SetRestrictionID
	 bool                      SetRestriction ( struct FString PlayerHash, unsigned char Type );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.SetRestriction
	 bool                      IsBanned ( class APlayerReplicationInfo* PRI );   		//  UnrealGame.UnrealPlayerChatManager.IsBanned
	 bool                      eventAcceptVoice ( class APlayerReplicationInfo* SenderPRI );		// [ FUNC_Event ] UnrealGame.UnrealPlayerChatManager.AcceptVoice
	 bool                      AcceptSpeech ( class APlayerReplicationInfo* SenderPRI );		//  UnrealGame.UnrealPlayerChatManager.AcceptSpeech
	 bool                      AcceptText ( class APlayerReplicationInfo* Sender, struct FName Type, struct FString* Msg );		//  UnrealGame.UnrealPlayerChatManager.AcceptText
	 void                      UnTrackPlayer ( int PlayerID );                   		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.UnTrackPlayer
	 void                      TrackNewPlayer ( int PlayerID, struct FString PlayerHash, struct FString PlayerAddress );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.TrackNewPlayer
	 void                      ReceiveBanInfo ( struct FString S );              		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.ReceiveBanInfo
	 void                      StoreChatBan ( struct FString PlayerHash, unsigned char Restriction );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.StoreChatBan
	 bool                      LoadChatBan ( struct FString PlayerHash, unsigned char* OutRestriction );		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.LoadChatBan
	 void                      LogChatRestriction ( int i );                     		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.LogChatRestriction
	 void                      ChatDebug (  );                                   		// [ FUNC_Simulated ] UnrealGame.UnrealPlayerChatManager.ChatDebug
}; // Size: 0x0018

// Class UnrealGame.UseObjective
class DLL_IMPORT AUseObjective : public AProximityObjective
{
public:
	struct FString                                     strPlayerName;                                    		// 0x06E8 ( 0x000C ) [ CPF_Net | CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      TellBotHowToDisable ( class ABot* B );            		//  UnrealGame.UseObjective.TellBotHowToDisable
	 void                      Touch ( class AActor* Other );                    		//  UnrealGame.UseObjective.Touch
	 void                      eventUsedBy ( class APawn* User );                		// [ FUNC_Event ] UnrealGame.UseObjective.UsedBy
}; // Size: 0x000C

// Class UnrealGame.PickupMessagePlus
class DLL_IMPORT APickupMessagePlus : public ALocalMessage
{
public:

	// UScript Functions
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] UnrealGame.PickupMessagePlus.ClientReceive
}; // Size: 0x0000

// Class UnrealGame.wFlagObjectiveBase
class DLL_IMPORT AwFlagObjectiveBase : public AUseObjective
{
public:
	float                                              fStartCaptureTime;                                		// 0x06F4 ( 0x0004 ) 
	float                                              fCaptureProgress;                                 		// 0x06F8 ( 0x0004 ) [ CPF_Net ]
	float                                              fCaptureLength;                                   		// 0x06FC ( 0x0004 ) 
	float                                              fActiveStartTime;                                 		// 0x0700 ( 0x0004 ) 
	int                                                iActiveScore;                                     		// 0x0704 ( 0x0004 ) 
	float                                              fNeutrallTime;                                    		// 0x0708 ( 0x0004 ) 
	int                                                CaptureScore;                                     		// 0x070C ( 0x0004 ) 
	int                                                CaptureExp;                                       		// 0x0710 ( 0x0004 ) 
	int                                                CapturePoint;                                     		// 0x0714 ( 0x0004 ) 
	int                                                iRepCaptureTeam;                                  		// 0x0718 ( 0x0004 ) [ CPF_Net ]
	float                                              fAddMount;                                        		// 0x071C ( 0x0004 ) [ CPF_Net ]
	unsigned char                                      byGetProgress;                                    		// 0x0720 ( 0x0001 ) 
	float                                              fOldLevelTime;                                    		// 0x0724 ( 0x0004 ) 
	class TArray< class APawn* >                       LinkedTeam_A;                                     		// 0x0728 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class APawn* >                       LinkedTeam_B;                                     		// 0x0734 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                iActiveTeam;                                      		// 0x0740 ( 0x0004 ) [ CPF_Net ]
	int                                                iOldActiveTeam;                                   		// 0x0744 ( 0x0004 ) 
	int                                                iCapturingTeam;                                   		// 0x0748 ( 0x0004 ) [ CPF_Net ]
	class UMaterial*                                   texGreen;                                         		// 0x074C ( 0x0004 ) 
	class UMaterial*                                   texRed;                                           		// 0x0750 ( 0x0004 ) 
	class UMaterial*                                   texNormal;                                        		// 0x0754 ( 0x0004 ) 
	struct FScriptDelegate                             __OnTouch__Delegate;                              		// 0x0758 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnUnTouch__Delegate;                            		// 0x0760 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      RemoveTouchingPlayer ( class APawn* P );          		//  UnrealGame.wFlagObjectiveBase.RemoveTouchingPlayer
	 void                      AddNewTouchingPlayer ( class APawn* P );          		//  UnrealGame.wFlagObjectiveBase.AddNewTouchingPlayer
	 void                      PlayerToucherDied ( class APawn* P );             		//  UnrealGame.wFlagObjectiveBase.PlayerToucherDied
	 void                      CheckObjectiveProgress ( int iTeamIndex );        		// [ FUNC_Simulated ] UnrealGame.wFlagObjectiveBase.CheckObjectiveProgress
	 void                      ResetCapture (  );                                		//  UnrealGame.wFlagObjectiveBase.ResetCapture
	 void                      Reset (  );                                       		//  UnrealGame.wFlagObjectiveBase.Reset
	 void                      eventUnTouch ( class AActor* Other );             		// [ FUNC_Event ] UnrealGame.wFlagObjectiveBase.UnTouch
	 void                      eventTouch ( class AActor* Other );               		// [ FUNC_Event ] UnrealGame.wFlagObjectiveBase.Touch
	 void                      RecoverCapturing (  );                            		//  UnrealGame.wFlagObjectiveBase.RecoverCapturing
	 void                      SetActiveTeam ( int iTeam );                      		//  UnrealGame.wFlagObjectiveBase.SetActiveTeam
	 void                      eventBeginPlay (  );                              		// [ FUNC_Simulated | FUNC_Event ] UnrealGame.wFlagObjectiveBase.BeginPlay
	 void                      OnUnTouch ( class AActor* Other );                		//  UnrealGame.wFlagObjectiveBase.OnUnTouch
	 void                      OnTouch ( class AActor* Other );                  		//  UnrealGame.wFlagObjectiveBase.OnTouch
}; // Size: 0x0074

// Class UnrealGame.WillowWhispPath
class DLL_IMPORT AWillowWhispPath : public AwEmitter
{
public:
	struct FVector                                     WayPoints[ 0x0B ];                                		// 0x05B8 ( 0x0084 ) [ CPF_Net ]
	int                                                NumPoints;                                        		// 0x063C ( 0x0004 ) [ CPF_Net ]
	int                                                Position;                                         		// 0x0640 ( 0x0004 ) 
	struct FVector                                     Destination;                                      		// 0x0644 ( 0x000C ) 
	unsigned long                                      bHeadedRight:1;                                   		// 0x0650 ( 0x0004 )  [0x00000001]
	float                                              LifeLeft;                                         		// 0x0654 ( 0x0004 ) 
	unsigned long                                      bRepeat:1;                                        		// 0x0658 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      StartNextPath (  );                               		// [ FUNC_Simulated ] UnrealGame.WillowWhispPath.StartNextPath
	 void                      PostNetBeginPlay (  );                            		// [ FUNC_Simulated ] UnrealGame.WillowWhispPath.PostNetBeginPlay
	 void                      PostBeginPlay (  );                               		//  UnrealGame.WillowWhispPath.PostBeginPlay
}; // Size: 0x00A4

// Class UnrealGame.StringMessagePlus
class DLL_IMPORT AStringMessagePlus : public ALocalMessage
{
public:

	// UScript Functions
	 struct FString            AssembleString ( class AHUD* myHUD, int Switch, class APlayerReplicationInfo* RelatedPRI_1, struct FString MessageString );		//  UnrealGame.StringMessagePlus.AssembleString
}; // Size: 0x0000

// Class UnrealGame.SayMessagePlus
class DLL_IMPORT ASayMessagePlus : public AStringMessagePlus
{
public:
	class FColor                                       RedTeamColor;                                     		// 0x0440 ( 0x0004 ) 
	class FColor                                       BlueTeamColor;                                    		// 0x0444 ( 0x0004 ) 

	// UScript Functions
	 class FColor              GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI_1 );		//  UnrealGame.SayMessagePlus.GetConsoleColor
	 struct FString            AssembleString ( class AHUD* myHUD, int Switch, class APlayerReplicationInfo* RelatedPRI_1, struct FString MessageString );		//  UnrealGame.SayMessagePlus.AssembleString
	 void                      RenderComplexMessage ( class UCanvas* Canvas, struct FString MessageString, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, float* XL, float* YL );		//  UnrealGame.SayMessagePlus.RenderComplexMessage
}; // Size: 0x0008

// Class UnrealGame.TeamSayMessagePlus
class DLL_IMPORT ATeamSayMessagePlus : public AStringMessagePlus
{
public:

	// UScript Functions
	 struct FString            AssembleString ( class AHUD* myHUD, int Switch, class APlayerReplicationInfo* RelatedPRI_1, struct FString MessageString );		//  UnrealGame.TeamSayMessagePlus.AssembleString
	 void                      RenderComplexMessage ( class UCanvas* Canvas, struct FString MessageString, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, float* XL, float* YL );		//  UnrealGame.TeamSayMessagePlus.RenderComplexMessage
}; // Size: 0x0000

// Class UnrealGame.PlayerNameMessage
class DLL_IMPORT APlayerNameMessage : public ALocalMessage
{
public:

	// UScript Functions
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  UnrealGame.PlayerNameMessage.GetString
}; // Size: 0x0000

// Class UnrealGame.TurretController
class DLL_IMPORT ATurretController : public AAIController
{
public:

	// UScript Functions
	 float                     GetWaitForTargetTime (  );                        		//  UnrealGame.TurretController.GetWaitForTargetTime
	 bool                      IsTurretFiring (  );                              		//  UnrealGame.TurretController.IsTurretFiring
	 bool                      IsTargetRelevant ( class APawn* Target );         		//  UnrealGame.TurretController.IsTargetRelevant
	 int                       GetTeamNum (  );                                  		// [ FUNC_Simulated ] UnrealGame.TurretController.GetTeamNum
	 void                      Possess ( class APawn* aPawn );                   		//  UnrealGame.TurretController.Possess
	 struct FRotator           AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError );		//  UnrealGame.TurretController.AdjustAim
}; // Size: 0x0000

// Class UnrealGame.UnrealSecurity
class DLL_IMPORT AUnrealSecurity : public ASecurity
{
public:

	// UScript Functions
	 void                      eventServerCallback ( int SecType, struct FString Data );		// [ FUNC_Event ] UnrealGame.UnrealSecurity.ServerCallback
}; // Size: 0x0000

// Class UnrealGame.FemaleAnnouncer
class DLL_IMPORT AFemaleAnnouncer : public AAnnouncerVoice
{
public:
}; // Size: 0x0000

// Class UnrealGame.MaleAnnouncer
class DLL_IMPORT AMaleAnnouncer : public AAnnouncerVoice
{
public:
}; // Size: 0x0000

#ifdef _MSC_VER
#pragma pack ( pop )
#endif

