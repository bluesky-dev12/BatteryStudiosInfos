#include "stdafx.h"
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : UnrealGame
# >    File : Code.cpp
# ======================================================================================== #
*/

/*bool AStartupMessage::GotoHud ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pGotoHud = 0;
	AStartupMessage_execGotoHud_Parms parms;

	if ( !pGotoHud )
		pGotoHud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.StartupMessage.GotoHud" );

	parms.P = P;
	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pGotoHud, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AStartupMessage::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pGetString = 0;
	AStartupMessage_execGetString_Parms parms;

	if ( !pGetString )
		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.StartupMessage.GetString" );

	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pGetString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AStartupMessage::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pClientReceive = 0;
	AStartupMessage_execClientReceive_Parms parms;

	if ( !pClientReceive )
		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.StartupMessage.ClientReceive" );

	parms.P = P;
	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pClientReceive, &parms, NULL );

}*/

/*int AUnrealMPGameInfo::MultiMinPlayers (  )
{
	static UFunction* pMultiMinPlayers = 0;
	AUnrealMPGameInfo_execMultiMinPlayers_Parms parms;

	if ( !pMultiMinPlayers )
		pMultiMinPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.MultiMinPlayers" );

	this->ProcessEvent ( pMultiMinPlayers, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AUnrealMPGameInfo::eventGetDescriptionText ( struct FString PropName )
{
	static UFunction* pGetDescriptionText = 0;
	AUnrealMPGameInfo_eventGetDescriptionText_Parms parms;

	if ( !pGetDescriptionText )
		pGetDescriptionText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.GetDescriptionText" );

	parms.PropName = PropName;
	this->ProcessEvent ( pGetDescriptionText, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealMPGameInfo::FillPlayInfo ( class UPlayInfo* PlayInfo )
{
	static UFunction* pFillPlayInfo = 0;
	AUnrealMPGameInfo_execFillPlayInfo_Parms parms;

	if ( !pFillPlayInfo )
		pFillPlayInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.FillPlayInfo" );

	parms.PlayInfo = PlayInfo;
	this->ProcessEvent ( pFillPlayInfo, &parms, NULL );

}*/

/*struct FString AUnrealMPGameInfo::GenerateBotOptions ( bool bSinglePlayer )
{
	static UFunction* pGenerateBotOptions = 0;
	AUnrealMPGameInfo_execGenerateBotOptions_Parms parms;

	if ( !pGenerateBotOptions )
		pGenerateBotOptions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.GenerateBotOptions" );

	parms.bSinglePlayer = bSinglePlayer;
	this->ProcessEvent ( pGenerateBotOptions, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealMPGameInfo::AdjustBotInterface ( bool bSinglePlayer )
{
	static UFunction* pAdjustBotInterface = 0;
	AUnrealMPGameInfo_execAdjustBotInterface_Parms parms;

	if ( !pAdjustBotInterface )
		pAdjustBotInterface = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.AdjustBotInterface" );

	parms.bSinglePlayer = bSinglePlayer;
	this->ProcessEvent ( pAdjustBotInterface, &parms, NULL );

}*/

/*void AUnrealMPGameInfo::GetServerDetails ( struct FServerResponseLine* ServerState )
{
	static UFunction* pGetServerDetails = 0;
	AUnrealMPGameInfo_execGetServerDetails_Parms parms;

	if ( !pGetServerDetails )
		pGetServerDetails = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.GetServerDetails" );

	parms.ServerState = *ServerState;
	this->ProcessEvent ( pGetServerDetails, &parms, NULL );

	*ServerState = parms.ServerState;
}*/

/*void AUnrealMPGameInfo::InitPlacedBot ( class AController* C, class URosterEntry* R )
{
	static UFunction* pInitPlacedBot = 0;
	AUnrealMPGameInfo_execInitPlacedBot_Parms parms;

	if ( !pInitPlacedBot )
		pInitPlacedBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.InitPlacedBot" );

	parms.C = C;
	parms.R = R;
	this->ProcessEvent ( pInitPlacedBot, &parms, NULL );

}*/

/*bool AUnrealMPGameInfo::PickupQuery ( class APawn* Other, class APickup* Item )
{
	static UFunction* pPickupQuery = 0;
	AUnrealMPGameInfo_execPickupQuery_Parms parms;

	if ( !pPickupQuery )
		pPickupQuery = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.PickupQuery" );

	parms.Other = Other;
	parms.Item = Item;
	this->ProcessEvent ( pPickupQuery, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealMPGameInfo::CanDisableObjective ( class AGameObjective* Go )
{
	static UFunction* pCanDisableObjective = 0;
	AUnrealMPGameInfo_execCanDisableObjective_Parms parms;

	if ( !pCanDisableObjective )
		pCanDisableObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.CanDisableObjective" );

	parms.Go = Go;
	this->ProcessEvent ( pCanDisableObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUnrealMPGameInfo::AdjustDestroyObjectiveDamage ( int Damage, class AController* instigatedBy, class AGameObjective* Go )
{
	static UFunction* pAdjustDestroyObjectiveDamage = 0;
	AUnrealMPGameInfo_execAdjustDestroyObjectiveDamage_Parms parms;

	if ( !pAdjustDestroyObjectiveDamage )
		pAdjustDestroyObjectiveDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.AdjustDestroyObjectiveDamage" );

	parms.Damage = Damage;
	parms.instigatedBy = instigatedBy;
	parms.Go = Go;
	this->ProcessEvent ( pAdjustDestroyObjectiveDamage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealMPGameInfo::ShowPathTo ( class APlayerController* P, int TeamNum )
{
	static UFunction* pShowPathTo = 0;
	AUnrealMPGameInfo_execShowPathTo_Parms parms;

	if ( !pShowPathTo )
		pShowPathTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.ShowPathTo" );

	parms.P = P;
	parms.TeamNum = TeamNum;
	this->ProcessEvent ( pShowPathTo, &parms, NULL );

}*/

/*bool AUnrealMPGameInfo::CanShowPathTo ( class APlayerController* P, int TeamNum )
{
	static UFunction* pCanShowPathTo = 0;
	AUnrealMPGameInfo_execCanShowPathTo_Parms parms;

	if ( !pCanShowPathTo )
		pCanShowPathTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.CanShowPathTo" );

	parms.P = P;
	parms.TeamNum = TeamNum;
	this->ProcessEvent ( pCanShowPathTo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealMPGameInfo::ForceAddBot (  )
{
	static UFunction* pForceAddBot = 0;
	AUnrealMPGameInfo_execForceAddBot_Parms parms;

	if ( !pForceAddBot )
		pForceAddBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.ForceAddBot" );

	this->ProcessEvent ( pForceAddBot, &parms, NULL );

}*/

/*void AUnrealMPGameInfo::ChangeLoadOut ( class APlayerController* P, struct FString LoadoutName )
{
	static UFunction* pChangeLoadOut = 0;
	AUnrealMPGameInfo_execChangeLoadOut_Parms parms;

	if ( !pChangeLoadOut )
		pChangeLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.ChangeLoadOut" );

	parms.P = P;
	parms.LoadoutName = LoadoutName;
	this->ProcessEvent ( pChangeLoadOut, &parms, NULL );

}*/

/*void AUnrealMPGameInfo::ScoreGameObject ( class AController* C, class AGameObject* Go )
{
	static UFunction* pScoreGameObject = 0;
	AUnrealMPGameInfo_execScoreGameObject_Parms parms;

	if ( !pScoreGameObject )
		pScoreGameObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.ScoreGameObject" );

	parms.C = C;
	parms.Go = Go;
	this->ProcessEvent ( pScoreGameObject, &parms, NULL );

}*/

/*class AGameObject* AUnrealMPGameInfo::GetGameObject ( struct FName GameObjectName )
{
	static UFunction* pGetGameObject = 0;
	AUnrealMPGameInfo_execGetGameObject_Parms parms;

	if ( !pGetGameObject )
		pGetGameObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.GetGameObject" );

	parms.GameObjectName = GameObjectName;
	this->ProcessEvent ( pGetGameObject, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealMPGameInfo::FindNewObjectives ( class AGameObjective* DisabledObjective )
{
	static UFunction* pFindNewObjectives = 0;
	AUnrealMPGameInfo_execFindNewObjectives_Parms parms;

	if ( !pFindNewObjectives )
		pFindNewObjectives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.FindNewObjectives" );

	parms.DisabledObjective = DisabledObjective;
	this->ProcessEvent ( pFindNewObjectives, &parms, NULL );

}*/

/*void AUnrealMPGameInfo::ObjectiveDisabled ( class AGameObjective* DisabledObjective )
{
	static UFunction* pObjectiveDisabled = 0;
	AUnrealMPGameInfo_execObjectiveDisabled_Parms parms;

	if ( !pObjectiveDisabled )
		pObjectiveDisabled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.ObjectiveDisabled" );

	parms.DisabledObjective = DisabledObjective;
	this->ProcessEvent ( pObjectiveDisabled, &parms, NULL );

}*/

/*class UTexture* AUnrealMPGameInfo::GetRandomTeamSymbol ( int Base )
{
	static UFunction* pGetRandomTeamSymbol = 0;
	AUnrealMPGameInfo_execGetRandomTeamSymbol_Parms parms;

	if ( !pGetRandomTeamSymbol )
		pGetRandomTeamSymbol = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.GetRandomTeamSymbol" );

	parms.Base = Base;
	this->ProcessEvent ( pGetRandomTeamSymbol, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealMPGameInfo::RestartGame (  )
{
	static UFunction* pRestartGame = 0;
	AUnrealMPGameInfo_execRestartGame_Parms parms;

	if ( !pRestartGame )
		pRestartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.RestartGame" );

	this->ProcessEvent ( pRestartGame, &parms, NULL );

}*/

/*bool AUnrealMPGameInfo::TooManyBots ( class AController* botToRemove )
{
	static UFunction* pTooManyBots = 0;
	AUnrealMPGameInfo_execTooManyBots_Parms parms;

	if ( !pTooManyBots )
		pTooManyBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.TooManyBots" );

	parms.botToRemove = botToRemove;
	this->ProcessEvent ( pTooManyBots, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AUnrealMPGameInfo::SpawnWait ( class AAIController* B )
{
	static UFunction* pSpawnWait = 0;
	AUnrealMPGameInfo_execSpawnWait_Parms parms;

	if ( !pSpawnWait )
		pSpawnWait = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.SpawnWait" );

	parms.B = B;
	this->ProcessEvent ( pSpawnWait, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealMPGameInfo::ShouldRespawn ( class APickup* Other )
{
	static UFunction* pShouldRespawn = 0;
	AUnrealMPGameInfo_execShouldRespawn_Parms parms;

	if ( !pShouldRespawn )
		pShouldRespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.ShouldRespawn" );

	parms.Other = Other;
	this->ProcessEvent ( pShouldRespawn, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUnrealMPGameInfo::GetNumPlayers (  )
{
	static UFunction* pGetNumPlayers = 0;
	AUnrealMPGameInfo_execGetNumPlayers_Parms parms;

	if ( !pGetNumPlayers )
		pGetNumPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.GetNumPlayers" );

	this->ProcessEvent ( pGetNumPlayers, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealMPGameInfo::TeamScoreEvent ( int Team, float Points, struct FString Desc )
{
	static UFunction* pTeamScoreEvent = 0;
	AUnrealMPGameInfo_execTeamScoreEvent_Parms parms;

	if ( !pTeamScoreEvent )
		pTeamScoreEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.TeamScoreEvent" );

	parms.Team = Team;
	parms.Points = Points;
	parms.Desc = Desc;
	this->ProcessEvent ( pTeamScoreEvent, &parms, NULL );

}*/

/*void AUnrealMPGameInfo::ScoreEvent ( class APlayerReplicationInfo* Who, float Points, struct FString Desc )
{
	static UFunction* pScoreEvent = 0;
	AUnrealMPGameInfo_execScoreEvent_Parms parms;

	if ( !pScoreEvent )
		pScoreEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.ScoreEvent" );

	parms.Who = Who;
	parms.Points = Points;
	parms.Desc = Desc;
	this->ProcessEvent ( pScoreEvent, &parms, NULL );

}*/

/*void AUnrealMPGameInfo::GameEvent ( struct FString GEvent, struct FString Desc, class APlayerReplicationInfo* Who )
{
	static UFunction* pGameEvent = 0;
	AUnrealMPGameInfo_execGameEvent_Parms parms;

	if ( !pGameEvent )
		pGameEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.GameEvent" );

	parms.GEvent = GEvent;
	parms.Desc = Desc;
	parms.Who = Who;
	this->ProcessEvent ( pGameEvent, &parms, NULL );

}*/

/*void AUnrealMPGameInfo::KillEvent ( struct FString KillType, class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, class UClass* Damage )
{
	static UFunction* pKillEvent = 0;
	AUnrealMPGameInfo_execKillEvent_Parms parms;

	if ( !pKillEvent )
		pKillEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.KillEvent" );

	parms.KillType = KillType;
	parms.Killer = Killer;
	parms.Victim = Victim;
	parms.Damage = Damage;
	this->ProcessEvent ( pKillEvent, &parms, NULL );

}*/

/*void AUnrealMPGameInfo::SpecialEvent ( class APlayerReplicationInfo* Who, struct FString Desc )
{
	static UFunction* pSpecialEvent = 0;
	AUnrealMPGameInfo_execSpecialEvent_Parms parms;

	if ( !pSpecialEvent )
		pSpecialEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.SpecialEvent" );

	parms.Who = Who;
	parms.Desc = Desc;
	this->ProcessEvent ( pSpecialEvent, &parms, NULL );

}*/

/*void AUnrealMPGameInfo::ChangeVoiceChannel ( class APlayerReplicationInfo* PRI, int NewChannelIndex, int OldChannelIndex )
{
	static UFunction* pChangeVoiceChannel = 0;
	AUnrealMPGameInfo_execChangeVoiceChannel_Parms parms;

	if ( !pChangeVoiceChannel )
		pChangeVoiceChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.ChangeVoiceChannel" );

	parms.PRI = PRI;
	parms.NewChannelIndex = NewChannelIndex;
	parms.OldChannelIndex = OldChannelIndex;
	this->ProcessEvent ( pChangeVoiceChannel, &parms, NULL );

}*/

/*void AUnrealMPGameInfo::InitMaplistHandler (  )
{
	static UFunction* pInitMaplistHandler = 0;
	AUnrealMPGameInfo_execInitMaplistHandler_Parms parms;

	if ( !pInitMaplistHandler )
		pInitMaplistHandler = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.InitMaplistHandler" );

	this->ProcessEvent ( pInitMaplistHandler, &parms, NULL );

}*/

/*void AUnrealMPGameInfo::InitVoiceReplicationInfo (  )
{
	static UFunction* pInitVoiceReplicationInfo = 0;
	AUnrealMPGameInfo_execInitVoiceReplicationInfo_Parms parms;

	if ( !pInitVoiceReplicationInfo )
		pInitVoiceReplicationInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.InitVoiceReplicationInfo" );

	this->ProcessEvent ( pInitVoiceReplicationInfo, &parms, NULL );

}*/

/*class APlayerController* AUnrealMPGameInfo::eventLogin ( struct FString Portal, struct FString Options, struct FString* Error )
{
	static UFunction* pLogin = 0;
	AUnrealMPGameInfo_eventLogin_Parms parms;

	if ( !pLogin )
		pLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.Login" );

	parms.Portal = Portal;
	parms.Options = Options;
	this->ProcessEvent ( pLogin, &parms, NULL );

	*Error = parms.Error;
	return parms.ReturnValue;
}*/

/*void AUnrealMPGameInfo::eventPreLogin ( struct FString Options, struct FString Address, struct FString PlayerID, struct FString* Error, struct FString* FailCode )
{
	static UFunction* pPreLogin = 0;
	AUnrealMPGameInfo_eventPreLogin_Parms parms;

	if ( !pPreLogin )
		pPreLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealMPGameInfo.PreLogin" );

	parms.Options = Options;
	parms.Address = Address;
	parms.PlayerID = PlayerID;
	this->ProcessEvent ( pPreLogin, &parms, NULL );

	*Error = parms.Error;
	*FailCode = parms.FailCode;
}*/

/*void ADeathMatch::PermitWeaponChangeInSpecialMode (  )
{
	static UFunction* pPermitWeaponChangeInSpecialMode = 0;
	ADeathMatch_execPermitWeaponChangeInSpecialMode_Parms parms;

	if ( !pPermitWeaponChangeInSpecialMode )
		pPermitWeaponChangeInSpecialMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.PermitWeaponChangeInSpecialMode" );

	this->ProcessEvent ( pPermitWeaponChangeInSpecialMode, &parms, NULL );

}*/

/*void ADeathMatch::AnnounceUAV ( class AController* Caller )
{
	static UFunction* pAnnounceUAV = 0;
	ADeathMatch_execAnnounceUAV_Parms parms;

	if ( !pAnnounceUAV )
		pAnnounceUAV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AnnounceUAV" );

	parms.Caller = Caller;
	this->ProcessEvent ( pAnnounceUAV, &parms, NULL );

}*/

/*void ADeathMatch::AnnounceHelicopter ( class AController* Caller )
{
	static UFunction* pAnnounceHelicopter = 0;
	ADeathMatch_execAnnounceHelicopter_Parms parms;

	if ( !pAnnounceHelicopter )
		pAnnounceHelicopter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AnnounceHelicopter" );

	parms.Caller = Caller;
	this->ProcessEvent ( pAnnounceHelicopter, &parms, NULL );

}*/

/*void ADeathMatch::AnnounceArtillery ( class AController* Caller )
{
	static UFunction* pAnnounceArtillery = 0;
	ADeathMatch_execAnnounceArtillery_Parms parms;

	if ( !pAnnounceArtillery )
		pAnnounceArtillery = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AnnounceArtillery" );

	parms.Caller = Caller;
	this->ProcessEvent ( pAnnounceArtillery, &parms, NULL );

}*/

/*class TArray< struct FString > ADeathMatch::GetAllLoadHints ( bool bThisClassOnly )
{
	static UFunction* pGetAllLoadHints = 0;
	ADeathMatch_execGetAllLoadHints_Parms parms;

	if ( !pGetAllLoadHints )
		pGetAllLoadHints = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.GetAllLoadHints" );

	parms.bThisClassOnly = bThisClassOnly;
	this->ProcessEvent ( pGetAllLoadHints, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString ADeathMatch::GetNextLoadHint ( struct FString MapName )
{
	static UFunction* pGetNextLoadHint = 0;
	ADeathMatch_execGetNextLoadHint_Parms parms;

	if ( !pGetNextLoadHint )
		pGetNextLoadHint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.GetNextLoadHint" );

	parms.MapName = MapName;
	this->ProcessEvent ( pGetNextLoadHint, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::eventSetGrammar (  )
{
	static UFunction* pSetGrammar = 0;
	ADeathMatch_eventSetGrammar_Parms parms;

	if ( !pSetGrammar )
		pSetGrammar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.SetGrammar" );

	this->ProcessEvent ( pSetGrammar, &parms, NULL );

}*/

/*void ADeathMatch::PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds )
{
	static UFunction* pPrecacheGameAnnouncements = 0;
	ADeathMatch_execPrecacheGameAnnouncements_Parms parms;

	if ( !pPrecacheGameAnnouncements )
		pPrecacheGameAnnouncements = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.PrecacheGameAnnouncements" );

	parms.V = V;
	parms.bRewardSounds = bRewardSounds;
	this->ProcessEvent ( pPrecacheGameAnnouncements, &parms, NULL );

}*/

/*bool ADeathMatch::WantsPickups ( class ABot* B )
{
	static UFunction* pWantsPickups = 0;
	ADeathMatch_execWantsPickups_Parms parms;

	if ( !pWantsPickups )
		pWantsPickups = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.WantsPickups" );

	parms.B = B;
	this->ProcessEvent ( pWantsPickups, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::EndSpree ( class AController* Killer, class AController* Other )
{
	static UFunction* pEndSpree = 0;
	ADeathMatch_execEndSpree_Parms parms;

	if ( !pEndSpree )
		pEndSpree = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.EndSpree" );

	parms.Killer = Killer;
	parms.Other = Other;
	this->ProcessEvent ( pEndSpree, &parms, NULL );

}*/

/*void ADeathMatch::NotifySpree ( class AController* Other, int Num )
{
	static UFunction* pNotifySpree = 0;
	ADeathMatch_execNotifySpree_Parms parms;

	if ( !pNotifySpree )
		pNotifySpree = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.NotifySpree" );

	parms.Other = Other;
	parms.Num = Num;
	this->ProcessEvent ( pNotifySpree, &parms, NULL );

}*/

/*struct FString ADeathMatch::eventGetDescriptionText ( struct FString PropName )
{
	static UFunction* pGetDescriptionText = 0;
	ADeathMatch_eventGetDescriptionText_Parms parms;

	if ( !pGetDescriptionText )
		pGetDescriptionText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.GetDescriptionText" );

	parms.PropName = PropName;
	this->ProcessEvent ( pGetDescriptionText, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString ADeathMatch::GetDisplayText ( struct FString PropName )
{
	static UFunction* pGetDisplayText = 0;
	ADeathMatch_execGetDisplayText_Parms parms;

	if ( !pGetDisplayText )
		pGetDisplayText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.GetDisplayText" );

	parms.PropName = PropName;
	this->ProcessEvent ( pGetDisplayText, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::FillPlayInfo ( class UPlayInfo* PlayInfo )
{
	static UFunction* pFillPlayInfo = 0;
	ADeathMatch_execFillPlayInfo_Parms parms;

	if ( !pFillPlayInfo )
		pFillPlayInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.FillPlayInfo" );

	parms.PlayInfo = PlayInfo;
	this->ProcessEvent ( pFillPlayInfo, &parms, NULL );

}*/

/*bool ADeathMatch::eventAcceptPlayInfoProperty ( struct FString PropertyName )
{
	static UFunction* pAcceptPlayInfoProperty = 0;
	ADeathMatch_eventAcceptPlayInfoProperty_Parms parms;

	if ( !pAcceptPlayInfoProperty )
		pAcceptPlayInfoProperty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AcceptPlayInfoProperty" );

	parms.PropertyName = PropertyName;
	this->ProcessEvent ( pAcceptPlayInfoProperty, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::ReviewJumpSpots ( struct FName TestLabel )
{
	static UFunction* pReviewJumpSpots = 0;
	ADeathMatch_execReviewJumpSpots_Parms parms;

	if ( !pReviewJumpSpots )
		pReviewJumpSpots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.ReviewJumpSpots" );

	parms.TestLabel = TestLabel;
	this->ProcessEvent ( pReviewJumpSpots, &parms, NULL );

}*/

/*void ADeathMatch::execaddaistrike ( int Num )
{
	static UFunction* paddaistrike = 0;
	ADeathMatch_execaddaistrike_Parms parms;

	if ( !paddaistrike )
		paddaistrike = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.addaistrike" );

	parms.Num = Num;
	this->ProcessEvent ( paddaistrike, &parms, NULL );

}*/

/*void ADeathMatch::execaddaifire ( struct FString Num, struct FString Team )
{
	static UFunction* paddaifire = 0;
	ADeathMatch_execaddaifire_Parms parms;

	if ( !paddaifire )
		paddaifire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.addaifire" );

	parms.Num = Num;
	parms.Team = Team;
	this->ProcessEvent ( paddaifire, &parms, NULL );

}*/

/*void ADeathMatch::execaddai ( struct FString Num, struct FString Team )
{
	static UFunction* paddai = 0;
	ADeathMatch_execaddai_Parms parms;

	if ( !paddai )
		paddai = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.addai" );

	parms.Num = Num;
	parms.Team = Team;
	this->ProcessEvent ( paddai, &parms, NULL );

}*/

/*void ADeathMatch::execaddaibot ( struct FString Num, struct FString Team, struct FString Grade, struct FString NPCID )
{
	static UFunction* paddaibot = 0;
	ADeathMatch_execaddaibot_Parms parms;

	if ( !paddaibot )
		paddaibot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.addaibot" );

	parms.Num = Num;
	parms.Team = Team;
	parms.Grade = Grade;
	parms.NPCID = NPCID;
	this->ProcessEvent ( paddaibot, &parms, NULL );

}*/

/*void ADeathMatch::AddwAIBot ( struct FString strNum, struct FString strTeam, struct FString aiClass, struct FString strGrade, struct FString strNPCID, struct FString strRegenLoc )
{
	static UFunction* pAddwAIBot = 0;
	ADeathMatch_execAddwAIBot_Parms parms;

	if ( !pAddwAIBot )
		pAddwAIBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AddwAIBot" );

	parms.strNum = strNum;
	parms.strTeam = strTeam;
	parms.aiClass = aiClass;
	parms.strGrade = strGrade;
	parms.strNPCID = strNPCID;
	parms.strRegenLoc = strRegenLoc;
	this->ProcessEvent ( pAddwAIBot, &parms, NULL );

}*/

/*bool ADeathMatch::rfAckGetBotID ( int Result, unsigned char RequestedAFCount, unsigned char RequestedRSACount, class TArray< int > AFBotID, class TArray< int > RSABotID )
{
	static UFunction* prfAckGetBotID = 0;
	ADeathMatch_execrfAckGetBotID_Parms parms;

	if ( !prfAckGetBotID )
		prfAckGetBotID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.rfAckGetBotID" );

	parms.Result = Result;
	parms.RequestedAFCount = RequestedAFCount;
	parms.RequestedRSACount = RequestedRSACount;
	parms.AFBotID = AFBotID;
	parms.RSABotID = RSABotID;
	this->ProcessEvent ( prfAckGetBotID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::HandleGetBotID ( int Team, class TArray< int > BotID )
{
	static UFunction* pHandleGetBotID = 0;
	ADeathMatch_execHandleGetBotID_Parms parms;

	if ( !pHandleGetBotID )
		pHandleGetBotID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.HandleGetBotID" );

	parms.Team = Team;
	parms.BotID = BotID;
	this->ProcessEvent ( pHandleGetBotID, &parms, NULL );

}*/

/*void ADeathMatch::EnqueueAddBot ( class UClass* BotClass, int Team, int Grade, int NPCID, int RegenLoc )
{
	static UFunction* pEnqueueAddBot = 0;
	ADeathMatch_execEnqueueAddBot_Parms parms;

	if ( !pEnqueueAddBot )
		pEnqueueAddBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.EnqueueAddBot" );

	parms.BotClass = BotClass;
	parms.Team = Team;
	parms.Grade = Grade;
	parms.NPCID = NPCID;
	parms.RegenLoc = RegenLoc;
	this->ProcessEvent ( pEnqueueAddBot, &parms, NULL );

}*/

/*void ADeathMatch::execKillaibots ( int Num )
{
	static UFunction* pKillaibots = 0;
	ADeathMatch_execKillaibots_Parms parms;

	if ( !pKillaibots )
		pKillaibots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.Killaibots" );

	parms.Num = Num;
	this->ProcessEvent ( pKillaibots, &parms, NULL );

}*/

/*void ADeathMatch::Kill ( class AController* C )
{
	static UFunction* pKill = 0;
	ADeathMatch_execKill_Parms parms;

	if ( !pKill )
		pKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.Kill" );

	parms.C = C;
	this->ProcessEvent ( pKill, &parms, NULL );

}*/

/*void ADeathMatch::execKillBots ( int Num )
{
	static UFunction* pKillBots = 0;
	ADeathMatch_execKillBots_Parms parms;

	if ( !pKillBots )
		pKillBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.KillBots" );

	parms.Num = Num;
	this->ProcessEvent ( pKillBots, &parms, NULL );

}*/

/*void ADeathMatch::execAddBots ( int Num )
{
	static UFunction* pAddBots = 0;
	ADeathMatch_execAddBots_Parms parms;

	if ( !pAddBots )
		pAddBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AddBots" );

	parms.Num = Num;
	this->ProcessEvent ( pAddBots, &parms, NULL );

}*/

/*void ADeathMatch::execAddNamedBot ( struct FString botname )
{
	static UFunction* pAddNamedBot = 0;
	ADeathMatch_execAddNamedBot_Parms parms;

	if ( !pAddNamedBot )
		pAddNamedBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AddNamedBot" );

	parms.botname = botname;
	this->ProcessEvent ( pAddNamedBot, &parms, NULL );

}*/

/*void ADeathMatch::execdobalancebots (  )
{
	static UFunction* pdobalancebots = 0;
	ADeathMatch_execdobalancebots_Parms parms;

	if ( !pdobalancebots )
		pdobalancebots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.dobalancebots" );

	this->ProcessEvent ( pdobalancebots, &parms, NULL );

}*/

/*void ADeathMatch::execsetFakeUID (  )
{
	static UFunction* psetFakeUID = 0;
	ADeathMatch_execsetFakeUID_Parms parms;

	if ( !psetFakeUID )
		psetFakeUID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.setFakeUID" );

	this->ProcessEvent ( psetFakeUID, &parms, NULL );

}*/

/*int ADeathMatch::ReduceDamage ( int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, int iWeaponType, struct FVector* Momentum )
{
	static UFunction* pReduceDamage = 0;
	ADeathMatch_execReduceDamage_Parms parms;

	if ( !pReduceDamage )
		pReduceDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.ReduceDamage" );

	parms.Damage = Damage;
	parms.injured = injured;
	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.DamageType = DamageType;
	parms.iWeaponType = iWeaponType;
	this->ProcessEvent ( pReduceDamage, &parms, NULL );

	*Momentum = parms.Momentum;
	return parms.ReturnValue;
}*/

/*void ADeathMatch::AdjustSkill ( class AAIController* B, class APlayerController* P, bool bWinner )
{
	static UFunction* pAdjustSkill = 0;
	ADeathMatch_execAdjustSkill_Parms parms;

	if ( !pAdjustSkill )
		pAdjustSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AdjustSkill" );

	parms.B = B;
	parms.P = P;
	parms.bWinner = bWinner;
	this->ProcessEvent ( pAdjustSkill, &parms, NULL );

}*/

/*void ADeathMatch::ScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pScoreKill = 0;
	ADeathMatch_execScoreKill_Parms parms;

	if ( !pScoreKill )
		pScoreKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.ScoreKill" );

	parms.Killer = Killer;
	parms.Other = Other;
	this->ProcessEvent ( pScoreKill, &parms, NULL );

}*/

/*void ADeathMatch::ScoreObjective ( class APlayerReplicationInfo* Scorer, float Score )
{
	static UFunction* pScoreObjective = 0;
	ADeathMatch_execScoreObjective_Parms parms;

	if ( !pScoreObjective )
		pScoreObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.ScoreObjective" );

	parms.Scorer = Scorer;
	parms.Score = Score;
	this->ProcessEvent ( pScoreObjective, &parms, NULL );

}*/

/*void ADeathMatch::CheckScore ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pCheckScore = 0;
	ADeathMatch_execCheckScore_Parms parms;

	if ( !pCheckScore )
		pCheckScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.CheckScore" );

	parms.Scorer = Scorer;
	this->ProcessEvent ( pCheckScore, &parms, NULL );

}*/

/*bool ADeathMatch::CheckMaxLives ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pCheckMaxLives = 0;
	ADeathMatch_execCheckMaxLives_Parms parms;

	if ( !pCheckMaxLives )
		pCheckMaxLives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.CheckMaxLives" );

	parms.Scorer = Scorer;
	this->ProcessEvent ( pCheckMaxLives, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float ADeathMatch::RatePlayerStart ( class ANavigationPoint* N, unsigned char Team, class AController* Player )
{
	static UFunction* pRatePlayerStart = 0;
	ADeathMatch_execRatePlayerStart_Parms parms;

	if ( !pRatePlayerStart )
		pRatePlayerStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.RatePlayerStart" );

	parms.N = N;
	parms.Team = Team;
	parms.Player = Player;
	this->ProcessEvent ( pRatePlayerStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADeathMatch::CheckLives ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pCheckLives = 0;
	ADeathMatch_execCheckLives_Parms parms;

	if ( !pCheckLives )
		pCheckLives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.CheckLives" );

	parms.Scorer = Scorer;
	this->ProcessEvent ( pCheckLives, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::ChangeHostExtraWork (  )
{
	static UFunction* pChangeHostExtraWork = 0;
	ADeathMatch_execChangeHostExtraWork_Parms parms;

	if ( !pChangeHostExtraWork )
		pChangeHostExtraWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.ChangeHostExtraWork" );

	this->ProcessEvent ( pChangeHostExtraWork, &parms, NULL );

}*/

/*void ADeathMatch::GetUserBackToVehicle (  )
{
	static UFunction* pGetUserBackToVehicle = 0;
	ADeathMatch_execGetUserBackToVehicle_Parms parms;

	if ( !pGetUserBackToVehicle )
		pGetUserBackToVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.GetUserBackToVehicle" );

	this->ProcessEvent ( pGetUserBackToVehicle, &parms, NULL );

}*/

/*void ADeathMatch::ContinueMatch (  )
{
	static UFunction* pContinueMatch = 0;
	ADeathMatch_execContinueMatch_Parms parms;

	if ( !pContinueMatch )
		pContinueMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.ContinueMatch" );

	this->ProcessEvent ( pContinueMatch, &parms, NULL );

}*/

/*void ADeathMatch::RecoverHelicopter ( class APawn* P )
{
	static UFunction* pRecoverHelicopter = 0;
	ADeathMatch_execRecoverHelicopter_Parms parms;

	if ( !pRecoverHelicopter )
		pRecoverHelicopter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.RecoverHelicopter" );

	parms.P = P;
	this->ProcessEvent ( pRecoverHelicopter, &parms, NULL );

}*/

/*void ADeathMatch::OnKillingDropOut ( class APawn* P )
{
	static UFunction* pOnKillingDropOut = 0;
	ADeathMatch_execOnKillingDropOut_Parms parms;

	if ( !pOnKillingDropOut )
		pOnKillingDropOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.OnKillingDropOut" );

	parms.P = P;
	this->ProcessEvent ( pOnKillingDropOut, &parms, NULL );

}*/

/*void ADeathMatch::CalcItemUsedTimeAll (  )
{
	static UFunction* pCalcItemUsedTimeAll = 0;
	ADeathMatch_execCalcItemUsedTimeAll_Parms parms;

	if ( !pCalcItemUsedTimeAll )
		pCalcItemUsedTimeAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.CalcItemUsedTimeAll" );

	this->ProcessEvent ( pCalcItemUsedTimeAll, &parms, NULL );

}*/

/*void ADeathMatch::eventForcedStartMatch (  )
{
	static UFunction* pForcedStartMatch = 0;
	ADeathMatch_eventForcedStartMatch_Parms parms;

	if ( !pForcedStartMatch )
		pForcedStartMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.ForcedStartMatch" );

	this->ProcessEvent ( pForcedStartMatch, &parms, NULL );

}*/

/*void ADeathMatch::UpdateVehicles (  )
{
	static UFunction* pUpdateVehicles = 0;
	ADeathMatch_execUpdateVehicles_Parms parms;

	if ( !pUpdateVehicles )
		pUpdateVehicles = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.UpdateVehicles" );

	this->ProcessEvent ( pUpdateVehicles, &parms, NULL );

}*/

/*void ADeathMatch::ProcessDefaultInv (  )
{
	static UFunction* pProcessDefaultInv = 0;
	ADeathMatch_execProcessDefaultInv_Parms parms;

	if ( !pProcessDefaultInv )
		pProcessDefaultInv = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.ProcessDefaultInv" );

	this->ProcessEvent ( pProcessDefaultInv, &parms, NULL );

}*/

/*void ADeathMatch::GameAddDefaultInventory ( class APawn* P )
{
	static UFunction* pGameAddDefaultInventory = 0;
	ADeathMatch_execGameAddDefaultInventory_Parms parms;

	if ( !pGameAddDefaultInventory )
		pGameAddDefaultInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.GameAddDefaultInventory" );

	parms.P = P;
	this->ProcessEvent ( pGameAddDefaultInventory, &parms, NULL );

}*/

/*void ADeathMatch::AnnounceTimesUp (  )
{
	static UFunction* pAnnounceTimesUp = 0;
	ADeathMatch_execAnnounceTimesUp_Parms parms;

	if ( !pAnnounceTimesUp )
		pAnnounceTimesUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AnnounceTimesUp" );

	this->ProcessEvent ( pAnnounceTimesUp, &parms, NULL );

}*/

/*int ADeathMatch::GetNetWait (  )
{
	static UFunction* pGetNetWait = 0;
	ADeathMatch_execGetNetWait_Parms parms;

	if ( !pGetNetWait )
		pGetNetWait = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.GetNetWait" );

	this->ProcessEvent ( pGetNetWait, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::PlayStartupMessage (  )
{
	static UFunction* pPlayStartupMessage = 0;
	ADeathMatch_execPlayStartupMessage_Parms parms;

	if ( !pPlayStartupMessage )
		pPlayStartupMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.PlayStartupMessage" );

	this->ProcessEvent ( pPlayStartupMessage, &parms, NULL );

}*/

/*void ADeathMatch::PlayEndOfMatchMessage (  )
{
	static UFunction* pPlayEndOfMatchMessage = 0;
	ADeathMatch_execPlayEndOfMatchMessage_Parms parms;

	if ( !pPlayEndOfMatchMessage )
		pPlayEndOfMatchMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.PlayEndOfMatchMessage" );

	this->ProcessEvent ( pPlayEndOfMatchMessage, &parms, NULL );

}*/

/*class ANavigationPoint* ADeathMatch::FindPlayerStart_TU ( class AController* Player, unsigned char inTeam, struct FString incomingName )
{
	static UFunction* pFindPlayerStart_TU = 0;
	ADeathMatch_execFindPlayerStart_TU_Parms parms;

	if ( !pFindPlayerStart_TU )
		pFindPlayerStart_TU = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.FindPlayerStart_TU" );

	parms.Player = Player;
	parms.inTeam = inTeam;
	parms.incomingName = incomingName;
	this->ProcessEvent ( pFindPlayerStart_TU, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class ANavigationPoint* ADeathMatch::FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName )
{
	static UFunction* pFindPlayerStart = 0;
	ADeathMatch_execFindPlayerStart_Parms parms;

	if ( !pFindPlayerStart )
		pFindPlayerStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.FindPlayerStart" );

	parms.Player = Player;
	parms.inTeam = inTeam;
	parms.incomingName = incomingName;
	this->ProcessEvent ( pFindPlayerStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::SetGameEndType ( struct FString Reason )
{
	static UFunction* pSetGameEndType = 0;
	ADeathMatch_execSetGameEndType_Parms parms;

	if ( !pSetGameEndType )
		pSetGameEndType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.SetGameEndType" );

	parms.Reason = Reason;
	this->ProcessEvent ( pSetGameEndType, &parms, NULL );

}*/

/*void ADeathMatch::EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pEndGame = 0;
	ADeathMatch_execEndGame_Parms parms;

	if ( !pEndGame )
		pEndGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.EndGame" );

	parms.Winner = Winner;
	parms.Reason = Reason;
	this->ProcessEvent ( pEndGame, &parms, NULL );

}*/

/*void ADeathMatch::AnnounceMatchInfo (  )
{
	static UFunction* pAnnounceMatchInfo = 0;
	ADeathMatch_execAnnounceMatchInfo_Parms parms;

	if ( !pAnnounceMatchInfo )
		pAnnounceMatchInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AnnounceMatchInfo" );

	this->ProcessEvent ( pAnnounceMatchInfo, &parms, NULL );

}*/

/*void ADeathMatch::deleAnnounceMatchInfo (  )
{
	static UFunction* pdeleAnnounceMatchInfo = 0;
	ADeathMatch_execdeleAnnounceMatchInfo_Parms parms;

	if ( !pdeleAnnounceMatchInfo )
		pdeleAnnounceMatchInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.deleAnnounceMatchInfo" );

	this->ProcessEvent ( pdeleAnnounceMatchInfo, &parms, NULL );

}*/

/*void ADeathMatch::BalanceBots (  )
{
	static UFunction* pBalanceBots = 0;
	ADeathMatch_execBalanceBots_Parms parms;

	if ( !pBalanceBots )
		pBalanceBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.BalanceBots" );

	this->ProcessEvent ( pBalanceBots, &parms, NULL );

}*/

/*void ADeathMatch::StartMatch (  )
{
	static UFunction* pStartMatch = 0;
	ADeathMatch_execStartMatch_Parms parms;

	if ( !pStartMatch )
		pStartMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.StartMatch" );

	this->ProcessEvent ( pStartMatch, &parms, NULL );

}*/

/*class AUnrealTeamInfo* ADeathMatch::FindTeamFor ( class AController* C )
{
	static UFunction* pFindTeamFor = 0;
	ADeathMatch_execFindTeamFor_Parms parms;

	if ( !pFindTeamFor )
		pFindTeamFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.FindTeamFor" );

	parms.C = C;
	this->ProcessEvent ( pFindTeamFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::InitPlacedBot ( class AController* C, class URosterEntry* R )
{
	static UFunction* pInitPlacedBot = 0;
	ADeathMatch_execInitPlacedBot_Parms parms;

	if ( !pInitPlacedBot )
		pInitPlacedBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.InitPlacedBot" );

	parms.C = C;
	parms.R = R;
	this->ProcessEvent ( pInitPlacedBot, &parms, NULL );

}*/

/*void ADeathMatch::InitializeBot ( class ABot* NewBot, class AUnrealTeamInfo* BotTeam, class URosterEntry* Chosen )
{
	static UFunction* pInitializeBot = 0;
	ADeathMatch_execInitializeBot_Parms parms;

	if ( !pInitializeBot )
		pInitializeBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.InitializeBot" );

	parms.NewBot = NewBot;
	parms.BotTeam = BotTeam;
	parms.Chosen = Chosen;
	this->ProcessEvent ( pInitializeBot, &parms, NULL );

}*/

/*class ABot* ADeathMatch::SpawnBot ( struct FString botname )
{
	static UFunction* pSpawnBot = 0;
	ADeathMatch_execSpawnBot_Parms parms;

	if ( !pSpawnBot )
		pSpawnBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.SpawnBot" );

	parms.botname = botname;
	this->ProcessEvent ( pSpawnBot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::PreLoadBot (  )
{
	static UFunction* pPreLoadBot = 0;
	ADeathMatch_execPreLoadBot_Parms parms;

	if ( !pPreLoadBot )
		pPreLoadBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.PreLoadBot" );

	this->ProcessEvent ( pPreLoadBot, &parms, NULL );

}*/

/*void ADeathMatch::PreLoadNamedBot ( struct FString botname )
{
	static UFunction* pPreLoadNamedBot = 0;
	ADeathMatch_execPreLoadNamedBot_Parms parms;

	if ( !pPreLoadNamedBot )
		pPreLoadNamedBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.PreLoadNamedBot" );

	parms.botname = botname;
	this->ProcessEvent ( pPreLoadNamedBot, &parms, NULL );

}*/

/*class AUnrealTeamInfo* ADeathMatch::GetBotTeam2 ( bool forceTeam, int Team )
{
	static UFunction* pGetBotTeam2 = 0;
	ADeathMatch_execGetBotTeam2_Parms parms;

	if ( !pGetBotTeam2 )
		pGetBotTeam2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.GetBotTeam2" );

	parms.forceTeam = forceTeam;
	parms.Team = Team;
	this->ProcessEvent ( pGetBotTeam2, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AUnrealTeamInfo* ADeathMatch::GetBotTeam ( int TeamBots )
{
	static UFunction* pGetBotTeam = 0;
	ADeathMatch_execGetBotTeam_Parms parms;

	if ( !pGetBotTeam )
		pGetBotTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.GetBotTeam" );

	parms.TeamBots = TeamBots;
	this->ProcessEvent ( pGetBotTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::InitTeamSymbols (  )
{
	static UFunction* pInitTeamSymbols = 0;
	ADeathMatch_execInitTeamSymbols_Parms parms;

	if ( !pInitTeamSymbols )
		pInitTeamSymbols = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.InitTeamSymbols" );

	this->ProcessEvent ( pInitTeamSymbols, &parms, NULL );

}*/

/*void ADeathMatch::InitGameReplicationInfo (  )
{
	static UFunction* pInitGameReplicationInfo = 0;
	ADeathMatch_execInitGameReplicationInfo_Parms parms;

	if ( !pInitGameReplicationInfo )
		pInitGameReplicationInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.InitGameReplicationInfo" );

	this->ProcessEvent ( pInitGameReplicationInfo, &parms, NULL );

}*/

/*void ADeathMatch::GetServerDetails ( struct FServerResponseLine* ServerState )
{
	static UFunction* pGetServerDetails = 0;
	ADeathMatch_execGetServerDetails_Parms parms;

	if ( !pGetServerDetails )
		pGetServerDetails = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.GetServerDetails" );

	parms.ServerState = *ServerState;
	this->ProcessEvent ( pGetServerDetails, &parms, NULL );

	*ServerState = parms.ServerState;
}*/

/*bool ADeathMatch::NeedPlayers (  )
{
	static UFunction* pNeedPlayers = 0;
	ADeathMatch_execNeedPlayers_Parms parms;

	if ( !pNeedPlayers )
		pNeedPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.NeedPlayers" );

	this->ProcessEvent ( pNeedPlayers, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::Logout ( class AController* Exiting )
{
	static UFunction* pLogout = 0;
	ADeathMatch_execLogout_Parms parms;

	if ( !pLogout )
		pLogout = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.Logout" );

	parms.Exiting = Exiting;
	this->ProcessEvent ( pLogout, &parms, NULL );

}*/

/*bool ADeathMatch::AllowBecomeActivePlayer ( class APlayerController* P )
{
	static UFunction* pAllowBecomeActivePlayer = 0;
	ADeathMatch_execAllowBecomeActivePlayer_Parms parms;

	if ( !pAllowBecomeActivePlayer )
		pAllowBecomeActivePlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AllowBecomeActivePlayer" );

	parms.P = P;
	this->ProcessEvent ( pAllowBecomeActivePlayer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADeathMatch::BecomeSpectator ( class APlayerController* P )
{
	static UFunction* pBecomeSpectator = 0;
	ADeathMatch_execBecomeSpectator_Parms parms;

	if ( !pBecomeSpectator )
		pBecomeSpectator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.BecomeSpectator" );

	parms.P = P;
	this->ProcessEvent ( pBecomeSpectator, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::ChangeName ( class AController* Other, struct FString S, bool bNameChange )
{
	static UFunction* pChangeName = 0;
	ADeathMatch_execChangeName_Parms parms;

	if ( !pChangeName )
		pChangeName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.ChangeName" );

	parms.Other = Other;
	parms.S = S;
	parms.bNameChange = bNameChange;
	this->ProcessEvent ( pChangeName, &parms, NULL );

}*/

/*bool ADeathMatch::ShouldRespawn ( class APickup* Other )
{
	static UFunction* pShouldRespawn = 0;
	ADeathMatch_execShouldRespawn_Parms parms;

	if ( !pShouldRespawn )
		pShouldRespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.ShouldRespawn" );

	parms.Other = Other;
	this->ProcessEvent ( pShouldRespawn, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADeathMatch::CanSpectate ( class APlayerController* Viewer, bool bOnlySpectator, class AActor* ViewTarget )
{
	static UFunction* pCanSpectate = 0;
	ADeathMatch_execCanSpectate_Parms parms;

	if ( !pCanSpectate )
		pCanSpectate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.CanSpectate" );

	parms.Viewer = Viewer;
	parms.bOnlySpectator = bOnlySpectator;
	parms.ViewTarget = ViewTarget;
	this->ProcessEvent ( pCanSpectate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::AddDefaultInventory ( class APawn* PlayerPawn )
{
	static UFunction* pAddDefaultInventory = 0;
	ADeathMatch_execAddDefaultInventory_Parms parms;

	if ( !pAddDefaultInventory )
		pAddDefaultInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AddDefaultInventory" );

	parms.PlayerPawn = PlayerPawn;
	this->ProcessEvent ( pAddDefaultInventory, &parms, NULL );

}*/

/*bool ADeathMatch::AddBot ( struct FString botname )
{
	static UFunction* pAddBot = 0;
	ADeathMatch_execAddBot_Parms parms;

	if ( !pAddBot )
		pAddBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AddBot" );

	parms.botname = botname;
	this->ProcessEvent ( pAddBot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::ForceAddBot (  )
{
	static UFunction* pForceAddBot = 0;
	ADeathMatch_execForceAddBot_Parms parms;

	if ( !pForceAddBot )
		pForceAddBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.ForceAddBot" );

	this->ProcessEvent ( pForceAddBot, &parms, NULL );

}*/

/*bool ADeathMatch::TooManyBots ( class AController* botToRemove )
{
	static UFunction* pTooManyBots = 0;
	ADeathMatch_execTooManyBots_Parms parms;

	if ( !pTooManyBots )
		pTooManyBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.TooManyBots" );

	parms.botToRemove = botToRemove;
	this->ProcessEvent ( pTooManyBots, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::RestartPlayer ( class AController* aPlayer )
{
	static UFunction* pRestartPlayer = 0;
	ADeathMatch_execRestartPlayer_Parms parms;

	if ( !pRestartPlayer )
		pRestartPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.RestartPlayer" );

	parms.aPlayer = aPlayer;
	this->ProcessEvent ( pRestartPlayer, &parms, NULL );

}*/

/*void ADeathMatch::ChangeLoadOut ( class APlayerController* P, struct FString LoadoutName )
{
	static UFunction* pChangeLoadOut = 0;
	ADeathMatch_execChangeLoadOut_Parms parms;

	if ( !pChangeLoadOut )
		pChangeLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.ChangeLoadOut" );

	parms.P = P;
	parms.LoadoutName = LoadoutName;
	this->ProcessEvent ( pChangeLoadOut, &parms, NULL );

}*/

/*void ADeathMatch::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pPostLogin = 0;
	ADeathMatch_eventPostLogin_Parms parms;

	if ( !pPostLogin )
		pPostLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.PostLogin" );

	parms.NewPlayer = NewPlayer;
	this->ProcessEvent ( pPostLogin, &parms, NULL );

}*/

/*class APlayerController* ADeathMatch::eventLogin ( struct FString Portal, struct FString Options, struct FString* Error )
{
	static UFunction* pLogin = 0;
	ADeathMatch_eventLogin_Parms parms;

	if ( !pLogin )
		pLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.Login" );

	parms.Portal = Portal;
	parms.Options = Options;
	this->ProcessEvent ( pLogin, &parms, NULL );

	*Error = parms.Error;
	return parms.ReturnValue;
}*/

/*bool ADeathMatch::AtCapacity ( bool bSpectator )
{
	static UFunction* pAtCapacity = 0;
	ADeathMatch_execAtCapacity_Parms parms;

	if ( !pAtCapacity )
		pAtCapacity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AtCapacity" );

	parms.bSpectator = bSpectator;
	this->ProcessEvent ( pAtCapacity, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::PlayWinMessage ( class APlayerController* Player, bool bWinner )
{
	static UFunction* pPlayWinMessage = 0;
	ADeathMatch_execPlayWinMessage_Parms parms;

	if ( !pPlayWinMessage )
		pPlayWinMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.PlayWinMessage" );

	parms.Player = Player;
	parms.bWinner = bWinner;
	this->ProcessEvent ( pPlayWinMessage, &parms, NULL );

}*/

/*bool ADeathMatch::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pCheckEndGame = 0;
	ADeathMatch_execCheckEndGame_Parms parms;

	if ( !pCheckEndGame )
		pCheckEndGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.CheckEndGame" );

	parms.Winner = Winner;
	parms.Reason = Reason;
	this->ProcessEvent ( pCheckEndGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADeathMatch::eventCheckEndGameCondition (  )
{
	static UFunction* pCheckEndGameCondition = 0;
	ADeathMatch_eventCheckEndGameCondition_Parms parms;

	if ( !pCheckEndGameCondition )
		pCheckEndGameCondition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.CheckEndGameCondition" );

	this->ProcessEvent ( pCheckEndGameCondition, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::AcceptInventory ( class APawn* PlayerPawn )
{
	static UFunction* pAcceptInventory = 0;
	ADeathMatch_execAcceptInventory_Parms parms;

	if ( !pAcceptInventory )
		pAcceptInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AcceptInventory" );

	parms.PlayerPawn = PlayerPawn;
	this->ProcessEvent ( pAcceptInventory, &parms, NULL );

}*/

/*int ADeathMatch::GetMinPlayers (  )
{
	static UFunction* pGetMinPlayers = 0;
	ADeathMatch_execGetMinPlayers_Parms parms;

	if ( !pGetMinPlayers )
		pGetMinPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.GetMinPlayers" );

	this->ProcessEvent ( pGetMinPlayers, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::TweakSkill ( class ABot* B )
{
	static UFunction* pTweakSkill = 0;
	ADeathMatch_execTweakSkill_Parms parms;

	if ( !pTweakSkill )
		pTweakSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.TweakSkill" );

	parms.B = B;
	this->ProcessEvent ( pTweakSkill, &parms, NULL );

}*/

/*void ADeathMatch::eventInitGame ( struct FString Options, struct FString* Error )
{
	static UFunction* pInitGame = 0;
	ADeathMatch_eventInitGame_Parms parms;

	if ( !pInitGame )
		pInitGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.InitGame" );

	parms.Options = Options;
	this->ProcessEvent ( pInitGame, &parms, NULL );

	*Error = parms.Error;
}*/

/*void ADeathMatch::AddGameSpecificInventory ( class APawn* P )
{
	static UFunction* pAddGameSpecificInventory = 0;
	ADeathMatch_execAddGameSpecificInventory_Parms parms;

	if ( !pAddGameSpecificInventory )
		pAddGameSpecificInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AddGameSpecificInventory" );

	parms.P = P;
	this->ProcessEvent ( pAddGameSpecificInventory, &parms, NULL );

}*/

/*bool ADeathMatch::AllowTransloc (  )
{
	static UFunction* pAllowTransloc = 0;
	ADeathMatch_execAllowTransloc_Parms parms;

	if ( !pAllowTransloc )
		pAllowTransloc = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.AllowTransloc" );

	this->ProcessEvent ( pAllowTransloc, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADeathMatch::NeverAllowTransloc (  )
{
	static UFunction* pNeverAllowTransloc = 0;
	ADeathMatch_execNeverAllowTransloc_Parms parms;

	if ( !pNeverAllowTransloc )
		pNeverAllowTransloc = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.NeverAllowTransloc" );

	this->ProcessEvent ( pNeverAllowTransloc, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::InitLogging (  )
{
	static UFunction* pInitLogging = 0;
	ADeathMatch_execInitLogging_Parms parms;

	if ( !pInitLogging )
		pInitLogging = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.InitLogging" );

	this->ProcessEvent ( pInitLogging, &parms, NULL );

}*/

/*int ADeathMatch::VehicleScoreKill ( class AController* Killer, class AController* Killed, class AVehicle* DestroyedVehicle, struct FString* KillInfo )
{
	static UFunction* pVehicleScoreKill = 0;
	ADeathMatch_execVehicleScoreKill_Parms parms;

	if ( !pVehicleScoreKill )
		pVehicleScoreKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.VehicleScoreKill" );

	parms.Killer = Killer;
	parms.Killed = Killed;
	parms.DestroyedVehicle = DestroyedVehicle;
	this->ProcessEvent ( pVehicleScoreKill, &parms, NULL );

	*KillInfo = parms.KillInfo;
	return parms.ReturnValue;
}*/

/*void ADeathMatch::Killed ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
{
	static UFunction* pKilled = 0;
	ADeathMatch_execKilled_Parms parms;

	if ( !pKilled )
		pKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.Killed" );

	parms.Killer = Killer;
	parms.Killed = Killed;
	parms.KilledPawn = KilledPawn;
	parms.DamageType = DamageType;
	parms.CollisionPart = CollisionPart;
	parms.WeaponType = WeaponType;
	parms.bWallShot = bWallShot;
	this->ProcessEvent ( pKilled, &parms, NULL );

}*/

/*void ADeathMatch::CheckReady (  )
{
	static UFunction* pCheckReady = 0;
	ADeathMatch_execCheckReady_Parms parms;

	if ( !pCheckReady )
		pCheckReady = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.CheckReady" );

	this->ProcessEvent ( pCheckReady, &parms, NULL );

}*/

/*bool ADeathMatch::JustStarted ( float t )
{
	static UFunction* pJustStarted = 0;
	ADeathMatch_execJustStarted_Parms parms;

	if ( !pJustStarted )
		pJustStarted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.JustStarted" );

	parms.t = t;
	this->ProcessEvent ( pJustStarted, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::Reset (  )
{
	static UFunction* pReset = 0;
	ADeathMatch_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void ADeathMatch::OverrideInitialBots (  )
{
	static UFunction* pOverrideInitialBots = 0;
	ADeathMatch_execOverrideInitialBots_Parms parms;

	if ( !pOverrideInitialBots )
		pOverrideInitialBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.OverrideInitialBots" );

	this->ProcessEvent ( pOverrideInitialBots, &parms, NULL );

}*/

/*void ADeathMatch::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	ADeathMatch_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*int ADeathMatch::GetTimeSecondsLeft (  )
{
	static UFunction* pGetTimeSecondsLeft = 0;
	ADeathMatch_execGetTimeSecondsLeft_Parms parms;

	if ( !pGetTimeSecondsLeft )
		pGetTimeSecondsLeft = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.GetTimeSecondsLeft" );

	this->ProcessEvent ( pGetTimeSecondsLeft, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADeathMatch::SendBgmMessageBeginMatch (  )
{
	static UFunction* pSendBgmMessageBeginMatch = 0;
	ADeathMatch_execSendBgmMessageBeginMatch_Parms parms;

	if ( !pSendBgmMessageBeginMatch )
		pSendBgmMessageBeginMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DeathMatch.SendBgmMessageBeginMatch" );

	this->ProcessEvent ( pSendBgmMessageBeginMatch, &parms, NULL );

}*/

/*void URosterEntry::InitBot ( class ABot* B )
{
	static UFunction* pInitBot = 0;
	URosterEntry_execInitBot_Parms parms;

	if ( !pInitBot )
		pInitBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RosterEntry.InitBot" );

	parms.B = B;
	this->ProcessEvent ( pInitBot, &parms, NULL );

}*/

/*bool URosterEntry::RecommendAttack (  )
{
	static UFunction* pRecommendAttack = 0;
	URosterEntry_execRecommendAttack_Parms parms;

	if ( !pRecommendAttack )
		pRecommendAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RosterEntry.RecommendAttack" );

	this->ProcessEvent ( pRecommendAttack, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool URosterEntry::RecommendFreelance (  )
{
	static UFunction* pRecommendFreelance = 0;
	URosterEntry_execRecommendFreelance_Parms parms;

	if ( !pRecommendFreelance )
		pRecommendFreelance = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RosterEntry.RecommendFreelance" );

	this->ProcessEvent ( pRecommendFreelance, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool URosterEntry::RecommendDefense (  )
{
	static UFunction* pRecommendDefense = 0;
	URosterEntry_execRecommendDefense_Parms parms;

	if ( !pRecommendDefense )
		pRecommendDefense = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RosterEntry.RecommendDefense" );

	this->ProcessEvent ( pRecommendDefense, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool URosterEntry::NoRecommendation (  )
{
	static UFunction* pNoRecommendation = 0;
	URosterEntry_execNoRecommendation_Parms parms;

	if ( !pNoRecommendation )
		pNoRecommendation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RosterEntry.NoRecommendation" );

	this->ProcessEvent ( pNoRecommendation, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool URosterEntry::RecommendSupport (  )
{
	static UFunction* pRecommendSupport = 0;
	URosterEntry_execRecommendSupport_Parms parms;

	if ( !pRecommendSupport )
		pRecommendSupport = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RosterEntry.RecommendSupport" );

	this->ProcessEvent ( pRecommendSupport, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void URosterEntry::SetOrders ( unsigned char Position )
{
	static UFunction* pSetOrders = 0;
	URosterEntry_execSetOrders_Parms parms;

	if ( !pSetOrders )
		pSetOrders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RosterEntry.SetOrders" );

	parms.Position = Position;
	this->ProcessEvent ( pSetOrders, &parms, NULL );

}*/

/*void URosterEntry::PrecacheRosterFor ( class AUnrealTeamInfo* t )
{
	static UFunction* pPrecacheRosterFor = 0;
	URosterEntry_execPrecacheRosterFor_Parms parms;

	if ( !pPrecacheRosterFor )
		pPrecacheRosterFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RosterEntry.PrecacheRosterFor" );

	parms.t = t;
	this->ProcessEvent ( pPrecacheRosterFor, &parms, NULL );

}*/

/*void URosterEntry::Init (  )
{
	static UFunction* pInit = 0;
	URosterEntry_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RosterEntry.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

}*/

/*void AUnrealPawn::SpawnGibs ( struct FRotator HitRotation, float ChunkPerterbation )
{
	static UFunction* pSpawnGibs = 0;
	AUnrealPawn_execSpawnGibs_Parms parms;

	if ( !pSpawnGibs )
		pSpawnGibs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.SpawnGibs" );

	parms.HitRotation = HitRotation;
	parms.ChunkPerterbation = ChunkPerterbation;
	this->ProcessEvent ( pSpawnGibs, &parms, NULL );

}*/

/*void AUnrealPawn::ChunkUp ( struct FRotator HitRotation, float ChunkPerterbation )
{
	static UFunction* pChunkUp = 0;
	AUnrealPawn_execChunkUp_Parms parms;

	if ( !pChunkUp )
		pChunkUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.ChunkUp" );

	parms.HitRotation = HitRotation;
	parms.ChunkPerterbation = ChunkPerterbation;
	this->ProcessEvent ( pChunkUp, &parms, NULL );

}*/

/*void AUnrealPawn::PlayFootStep ( int side )
{
	static UFunction* pPlayFootStep = 0;
	AUnrealPawn_execPlayFootStep_Parms parms;

	if ( !pPlayFootStep )
		pPlayFootStep = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.PlayFootStep" );

	parms.side = side;
	this->ProcessEvent ( pPlayFootStep, &parms, NULL );

}*/

/*void AUnrealPawn::IncrementSpree (  )
{
	static UFunction* pIncrementSpree = 0;
	AUnrealPawn_execIncrementSpree_Parms parms;

	if ( !pIncrementSpree )
		pIncrementSpree = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.IncrementSpree" );

	this->ProcessEvent ( pIncrementSpree, &parms, NULL );

}*/

/*int AUnrealPawn::GetSpree (  )
{
	static UFunction* pGetSpree = 0;
	AUnrealPawn_execGetSpree_Parms parms;

	if ( !pGetSpree )
		pGetSpree = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.GetSpree" );

	this->ProcessEvent ( pGetSpree, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealPawn::TakeDrowningDamage (  )
{
	static UFunction* pTakeDrowningDamage = 0;
	AUnrealPawn_execTakeDrowningDamage_Parms parms;

	if ( !pTakeDrowningDamage )
		pTakeDrowningDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.TakeDrowningDamage" );

	this->ProcessEvent ( pTakeDrowningDamage, &parms, NULL );

}*/

/*void AUnrealPawn::SetMovementPhysics (  )
{
	static UFunction* pSetMovementPhysics = 0;
	AUnrealPawn_execSetMovementPhysics_Parms parms;

	if ( !pSetMovementPhysics )
		pSetMovementPhysics = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.SetMovementPhysics" );

	this->ProcessEvent ( pSetMovementPhysics, &parms, NULL );

}*/

/*class URosterEntry* AUnrealPawn::GetPlacedRoster (  )
{
	static UFunction* pGetPlacedRoster = 0;
	AUnrealPawn_execGetPlacedRoster_Parms parms;

	if ( !pGetPlacedRoster )
		pGetPlacedRoster = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.GetPlacedRoster" );

	this->ProcessEvent ( pGetPlacedRoster, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealPawn::PostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AUnrealPawn_execPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AUnrealPawn::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AUnrealPawn_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*bool AUnrealPawn::Dodge ( unsigned char DoubleClickMove )
{
	static UFunction* pDodge = 0;
	AUnrealPawn_execDodge_Parms parms;

	if ( !pDodge )
		pDodge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.Dodge" );

	parms.DoubleClickMove = DoubleClickMove;
	this->ProcessEvent ( pDodge, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPawn::PerformDodge ( unsigned char DoubleClickMove, struct FVector Dir, struct FVector Cross )
{
	static UFunction* pPerformDodge = 0;
	AUnrealPawn_execPerformDodge_Parms parms;

	if ( !pPerformDodge )
		pPerformDodge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.PerformDodge" );

	parms.DoubleClickMove = DoubleClickMove;
	parms.Dir = Dir;
	parms.Cross = Cross;
	this->ProcessEvent ( pPerformDodge, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AInventory* AUnrealPawn::CreateInventory ( struct FString InventoryClassName )
{
	static UFunction* pCreateInventory = 0;
	AUnrealPawn_execCreateInventory_Parms parms;

	if ( !pCreateInventory )
		pCreateInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.CreateInventory" );

	parms.InventoryClassName = InventoryClassName;
	this->ProcessEvent ( pCreateInventory, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AInventory* AUnrealPawn::CustomCreateInventory ( struct FString WeaponClassName )
{
	static UFunction* pCustomCreateInventory = 0;
	AUnrealPawn_execCustomCreateInventory_Parms parms;

	if ( !pCustomCreateInventory )
		pCustomCreateInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.CustomCreateInventory" );

	parms.WeaponClassName = WeaponClassName;
	this->ProcessEvent ( pCustomCreateInventory, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealPawn::AddDefaultInventory ( bool bQuickslotChange )
{
	static UFunction* pAddDefaultInventory = 0;
	AUnrealPawn_execAddDefaultInventory_Parms parms;

	if ( !pAddDefaultInventory )
		pAddDefaultInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.AddDefaultInventory" );

	parms.bQuickslotChange = bQuickslotChange;
	this->ProcessEvent ( pAddDefaultInventory, &parms, NULL );

}*/

/*void AUnrealPawn::AddDefaultInventoryDOA ( bool bQuickslotChange )
{
	static UFunction* pAddDefaultInventoryDOA = 0;
	AUnrealPawn_execAddDefaultInventoryDOA_Parms parms;

	if ( !pAddDefaultInventoryDOA )
		pAddDefaultInventoryDOA = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.AddDefaultInventoryDOA" );

	parms.bQuickslotChange = bQuickslotChange;
	this->ProcessEvent ( pAddDefaultInventoryDOA, &parms, NULL );

}*/

/*bool AUnrealPawn::IsInLoadout ( class UClass* InventoryClass )
{
	static UFunction* pIsInLoadout = 0;
	AUnrealPawn_execIsInLoadout_Parms parms;

	if ( !pIsInLoadout )
		pIsInLoadout = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.IsInLoadout" );

	parms.InventoryClass = InventoryClass;
	this->ProcessEvent ( pIsInLoadout, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealPawn::PlayBreathSounds (  )
{
	static UFunction* pPlayBreathSounds = 0;
	AUnrealPawn_execPlayBreathSounds_Parms parms;

	if ( !pPlayBreathSounds )
		pPlayBreathSounds = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.PlayBreathSounds" );

	this->ProcessEvent ( pPlayBreathSounds, &parms, NULL );

}*/

/*void AUnrealPawn::CheckBob ( float DeltaTime, struct FVector Y )
{
	static UFunction* pCheckBob = 0;
	AUnrealPawn_execCheckBob_Parms parms;

	if ( !pCheckBob )
		pCheckBob = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.CheckBob" );

	parms.DeltaTime = DeltaTime;
	parms.Y = Y;
	this->ProcessEvent ( pCheckBob, &parms, NULL );

}*/

/*struct FName AUnrealPawn::GetWeaponBoneFor ( class AInventory* i )
{
	static UFunction* pGetWeaponBoneFor = 0;
	AUnrealPawn_execGetWeaponBoneFor_Parms parms;

	if ( !pGetWeaponBoneFor )
		pGetWeaponBoneFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.GetWeaponBoneFor" );

	parms.i = i;
	this->ProcessEvent ( pGetWeaponBoneFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AUnrealPawn::GetDebugName (  )
{
	static UFunction* pGetDebugName = 0;
	AUnrealPawn_execGetDebugName_Parms parms;

	if ( !pGetDebugName )
		pGetDebugName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.GetDebugName" );

	this->ProcessEvent ( pGetDebugName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealPawn::eventSetAnimAction ( struct FName NewAction )
{
	static UFunction* pSetAnimAction = 0;
	AUnrealPawn_eventSetAnimAction_Parms parms;

	if ( !pSetAnimAction )
		pSetAnimAction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.SetAnimAction" );

	parms.NewAction = NewAction;
	this->ProcessEvent ( pSetAnimAction, &parms, NULL );

}*/

/*void AUnrealPawn::ShouldUnCrouch (  )
{
	static UFunction* pShouldUnCrouch = 0;
	AUnrealPawn_execShouldUnCrouch_Parms parms;

	if ( !pShouldUnCrouch )
		pShouldUnCrouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.ShouldUnCrouch" );

	this->ProcessEvent ( pShouldUnCrouch, &parms, NULL );

}*/

/*void AUnrealPawn::EndJump (  )
{
	static UFunction* pEndJump = 0;
	AUnrealPawn_execEndJump_Parms parms;

	if ( !pEndJump )
		pEndJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.EndJump" );

	this->ProcessEvent ( pEndJump, &parms, NULL );

}*/

/*void AUnrealPawn::HoldGameObject ( class AGameObject* gameObj, struct FName GameObjBone )
{
	static UFunction* pHoldGameObject = 0;
	AUnrealPawn_execHoldGameObject_Parms parms;

	if ( !pHoldGameObject )
		pHoldGameObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.HoldGameObject" );

	parms.gameObj = gameObj;
	parms.GameObjBone = GameObjBone;
	this->ProcessEvent ( pHoldGameObject, &parms, NULL );

}*/

/*void AUnrealPawn::HoldFlag ( class AActor* FlagActor )
{
	static UFunction* pHoldFlag = 0;
	AUnrealPawn_execHoldFlag_Parms parms;

	if ( !pHoldFlag )
		pHoldFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.HoldFlag" );

	parms.FlagActor = FlagActor;
	this->ProcessEvent ( pHoldFlag, &parms, NULL );

}*/

/*struct FVector AUnrealPawn::BotDodge ( struct FVector Dir )
{
	static UFunction* pBotDodge = 0;
	AUnrealPawn_execBotDodge_Parms parms;

	if ( !pBotDodge )
		pBotDodge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.BotDodge" );

	parms.Dir = Dir;
	this->ProcessEvent ( pBotDodge, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealPawn::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	AUnrealPawn_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.DisplayDebug" );

	parms.Canvas = Canvas;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*void AUnrealPawn::gibbedBy ( class AActor* Other )
{
	static UFunction* pgibbedBy = 0;
	AUnrealPawn_execgibbedBy_Parms parms;

	if ( !pgibbedBy )
		pgibbedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.gibbedBy" );

	parms.Other = Other;
	this->ProcessEvent ( pgibbedBy, &parms, NULL );

}*/

/*bool AUnrealPawn::FindValidTaunt ( struct FName* Sequence )
{
	static UFunction* pFindValidTaunt = 0;
	AUnrealPawn_execFindValidTaunt_Parms parms;

	if ( !pFindValidTaunt )
		pFindValidTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.FindValidTaunt" );

	parms.Sequence = *Sequence;
	this->ProcessEvent ( pFindValidTaunt, &parms, NULL );

	*Sequence = parms.Sequence;
	return parms.ReturnValue;
}*/

/*void AUnrealPawn::DropFlag ( struct FString sReason )
{
	static UFunction* pDropFlag = 0;
	AUnrealPawn_execDropFlag_Parms parms;

	if ( !pDropFlag )
		pDropFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPawn.DropFlag" );

	parms.sReason = sReason;
	this->ProcessEvent ( pDropFlag, &parms, NULL );

}*/

/*bool AJumpSpot::TryTranslocator ( class APawn* Other )
{
	static UFunction* pTryTranslocator = 0;
	AJumpSpot_execTryTranslocator_Parms parms;

	if ( !pTryTranslocator )
		pTryTranslocator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.JumpSpot.TryTranslocator" );

	parms.Other = Other;
	this->ProcessEvent ( pTryTranslocator, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AJumpSpot::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pSuggestMovePreparation = 0;
	AJumpSpot_eventSuggestMovePreparation_Parms parms;

	if ( !pSuggestMovePreparation )
		pSuggestMovePreparation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.JumpSpot.SuggestMovePreparation" );

	parms.Other = Other;
	this->ProcessEvent ( pSuggestMovePreparation, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AJumpSpot::eventSpecialCost ( class APawn* Other, class UReachSpec* Path )
{
	static UFunction* pSpecialCost = 0;
	AJumpSpot_eventSpecialCost_Parms parms;

	if ( !pSpecialCost )
		pSpecialCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.JumpSpot.SpecialCost" );

	parms.Other = Other;
	parms.Path = Path;
	this->ProcessEvent ( pSpecialCost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AJumpSpot::EffectiveDoubleJump ( class UReachSpec* Path )
{
	static UFunction* pEffectiveDoubleJump = 0;
	AJumpSpot_execEffectiveDoubleJump_Parms parms;

	if ( !pEffectiveDoubleJump )
		pEffectiveDoubleJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.JumpSpot.EffectiveDoubleJump" );

	parms.Path = Path;
	this->ProcessEvent ( pEffectiveDoubleJump, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AJumpSpot::CanDoubleJump ( class APawn* Other )
{
	static UFunction* pCanDoubleJump = 0;
	AJumpSpot_execCanDoubleJump_Parms parms;

	if ( !pCanDoubleJump )
		pCanDoubleJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.JumpSpot.CanDoubleJump" );

	parms.Other = Other;
	this->ProcessEvent ( pCanDoubleJump, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AJumpSpot::CanMakeJump ( class APawn* Other, float JumpHeight, float GroundSpeed, int Num, class AActor* Start, bool bForceCheck )
{
	static UFunction* pCanMakeJump = 0;
	AJumpSpot_execCanMakeJump_Parms parms;

	if ( !pCanMakeJump )
		pCanMakeJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.JumpSpot.CanMakeJump" );

	parms.Other = Other;
	parms.JumpHeight = JumpHeight;
	parms.GroundSpeed = GroundSpeed;
	parms.Num = Num;
	parms.Start = Start;
	parms.bForceCheck = bForceCheck;
	this->ProcessEvent ( pCanMakeJump, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AJumpSpot::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AJumpSpot_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.JumpSpot.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AGameObjective::SetTeam ( unsigned char TeamIndex )
{
	static UFunction* pSetTeam = 0;
	AGameObjective_execSetTeam_Parms parms;

	if ( !pSetTeam )
		pSetTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.SetTeam" );

	parms.TeamIndex = TeamIndex;
	this->ProcessEvent ( pSetTeam, &parms, NULL );

}*/

/*void AGameObjective::AwardAssaultScore ( int Score )
{
	static UFunction* pAwardAssaultScore = 0;
	AGameObjective_execAwardAssaultScore_Parms parms;

	if ( !pAwardAssaultScore )
		pAwardAssaultScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.AwardAssaultScore" );

	parms.Score = Score;
	this->ProcessEvent ( pAwardAssaultScore, &parms, NULL );

}*/

/*void AGameObjective::ShareScore ( int Score, struct FString EventDesc )
{
	static UFunction* pShareScore = 0;
	AGameObjective_execShareScore_Parms parms;

	if ( !pShareScore )
		pShareScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.ShareScore" );

	parms.Score = Score;
	parms.EventDesc = EventDesc;
	this->ProcessEvent ( pShareScore, &parms, NULL );

}*/

/*void AGameObjective::AddScorer ( class AController* C, float Pct )
{
	static UFunction* pAddScorer = 0;
	AGameObjective_execAddScorer_Parms parms;

	if ( !pAddScorer )
		pAddScorer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.AddScorer" );

	parms.C = C;
	parms.Pct = Pct;
	this->ProcessEvent ( pAddScorer, &parms, NULL );

}*/

/*void AGameObjective::UpdatePrecacheMaterials (  )
{
	static UFunction* pUpdatePrecacheMaterials = 0;
	AGameObjective_execUpdatePrecacheMaterials_Parms parms;

	if ( !pUpdatePrecacheMaterials )
		pUpdatePrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.UpdatePrecacheMaterials" );

	this->ProcessEvent ( pUpdatePrecacheMaterials, &parms, NULL );

}*/

/*float AGameObjective::GetObjectiveProgress (  )
{
	static UFunction* pGetObjectiveProgress = 0;
	AGameObjective_execGetObjectiveProgress_Parms parms;

	if ( !pGetObjectiveProgress )
		pGetObjectiveProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.GetObjectiveProgress" );

	this->ProcessEvent ( pGetObjectiveProgress, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AGameObjective::SetObjectiveOverlay ( bool bShow )
{
	static UFunction* pSetObjectiveOverlay = 0;
	AGameObjective_execSetObjectiveOverlay_Parms parms;

	if ( !pSetObjectiveOverlay )
		pSetObjectiveOverlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.SetObjectiveOverlay" );

	parms.bShow = bShow;
	this->ProcessEvent ( pSetObjectiveOverlay, &parms, NULL );

}*/

/*void AGameObjective::PostNetReceive (  )
{
	static UFunction* pPostNetReceive = 0;
	AGameObjective_execPostNetReceive_Parms parms;

	if ( !pPostNetReceive )
		pPostNetReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.PostNetReceive" );

	this->ProcessEvent ( pPostNetReceive, &parms, NULL );

}*/

/*void AGameObjective::HighlightPhysicalObjective ( bool bShow )
{
	static UFunction* pHighlightPhysicalObjective = 0;
	AGameObjective_execHighlightPhysicalObjective_Parms parms;

	if ( !pHighlightPhysicalObjective )
		pHighlightPhysicalObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.HighlightPhysicalObjective" );

	parms.bShow = bShow;
	this->ProcessEvent ( pHighlightPhysicalObjective, &parms, NULL );

}*/

/*void AGameObjective::PrecacheAnnouncer ( class AAnnouncerVoice* V, bool bRewardSounds )
{
	static UFunction* pPrecacheAnnouncer = 0;
	AGameObjective_execPrecacheAnnouncer_Parms parms;

	if ( !pPrecacheAnnouncer )
		pPrecacheAnnouncer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.PrecacheAnnouncer" );

	parms.V = V;
	parms.bRewardSounds = bRewardSounds;
	this->ProcessEvent ( pPrecacheAnnouncer, &parms, NULL );

}*/

/*void AGameObjective::Trigger ( class AActor* Other, class APawn* Instigator )
{
	static UFunction* pTrigger = 0;
	AGameObjective_execTrigger_Parms parms;

	if ( !pTrigger )
		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.Trigger" );

	parms.Other = Other;
	parms.Instigator = Instigator;
	this->ProcessEvent ( pTrigger, &parms, NULL );

}*/

/*void AGameObjective::CheckPlayCriticalAlarm (  )
{
	static UFunction* pCheckPlayCriticalAlarm = 0;
	AGameObjective_execCheckPlayCriticalAlarm_Parms parms;

	if ( !pCheckPlayCriticalAlarm )
		pCheckPlayCriticalAlarm = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.CheckPlayCriticalAlarm" );

	this->ProcessEvent ( pCheckPlayCriticalAlarm, &parms, NULL );

}*/

/*void AGameObjective::SetCriticalStatus ( bool bNewCriticalStatus )
{
	static UFunction* pSetCriticalStatus = 0;
	AGameObjective_execSetCriticalStatus_Parms parms;

	if ( !pSetCriticalStatus )
		pSetCriticalStatus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.SetCriticalStatus" );

	parms.bNewCriticalStatus = bNewCriticalStatus;
	this->ProcessEvent ( pSetCriticalStatus, &parms, NULL );

}*/

/*bool AGameObjective::IsCritical (  )
{
	static UFunction* pIsCritical = 0;
	AGameObjective_execIsCritical_Parms parms;

	if ( !pIsCritical )
		pIsCritical = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.IsCritical" );

	this->ProcessEvent ( pIsCritical, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AGameObjective::IsActive (  )
{
	static UFunction* pIsActive = 0;
	AGameObjective_execIsActive_Parms parms;

	if ( !pIsActive )
		pIsActive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.IsActive" );

	this->ProcessEvent ( pIsActive, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AGameObjective::SetActive ( bool bActiveStatus )
{
	static UFunction* pSetActive = 0;
	AGameObjective_execSetActive_Parms parms;

	if ( !pSetActive )
		pSetActive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.SetActive" );

	parms.bActiveStatus = bActiveStatus;
	this->ProcessEvent ( pSetActive, &parms, NULL );

}*/

/*void AGameObjective::Reset (  )
{
	static UFunction* pReset = 0;
	AGameObjective_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*bool AGameObjective::BetterObjectiveThan ( class AGameObjective* Best, unsigned char DesiredTeamNum, unsigned char RequesterTeamNum )
{
	static UFunction* pBetterObjectiveThan = 0;
	AGameObjective_execBetterObjectiveThan_Parms parms;

	if ( !pBetterObjectiveThan )
		pBetterObjectiveThan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.BetterObjectiveThan" );

	parms.Best = Best;
	parms.DesiredTeamNum = DesiredTeamNum;
	parms.RequesterTeamNum = RequesterTeamNum;
	this->ProcessEvent ( pBetterObjectiveThan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AGameObjective::PlayDestructionMessage (  )
{
	static UFunction* pPlayDestructionMessage = 0;
	AGameObjective_execPlayDestructionMessage_Parms parms;

	if ( !pPlayDestructionMessage )
		pPlayDestructionMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.PlayDestructionMessage" );

	this->ProcessEvent ( pPlayDestructionMessage, &parms, NULL );

}*/

/*void AGameObjective::DisableObjective ( class APawn* Instigator )
{
	static UFunction* pDisableObjective = 0;
	AGameObjective_execDisableObjective_Parms parms;

	if ( !pDisableObjective )
		pDisableObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.DisableObjective" );

	parms.Instigator = Instigator;
	this->ProcessEvent ( pDisableObjective, &parms, NULL );

}*/

/*void AGameObjective::CompleteObjective ( class APawn* Instigator )
{
	static UFunction* pCompleteObjective = 0;
	AGameObjective_execCompleteObjective_Parms parms;

	if ( !pCompleteObjective )
		pCompleteObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.CompleteObjective" );

	parms.Instigator = Instigator;
	this->ProcessEvent ( pCompleteObjective, &parms, NULL );

}*/

/*int AGameObjective::GetNumDefenders (  )
{
	static UFunction* pGetNumDefenders = 0;
	AGameObjective_execGetNumDefenders_Parms parms;

	if ( !pGetNumDefenders )
		pGetNumDefenders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.GetNumDefenders" );

	this->ProcessEvent ( pGetNumDefenders, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AGameObjective::TellBotHowToDisable ( class ABot* B )
{
	static UFunction* pTellBotHowToDisable = 0;
	AGameObjective_execTellBotHowToDisable_Parms parms;

	if ( !pTellBotHowToDisable )
		pTellBotHowToDisable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.TellBotHowToDisable" );

	parms.B = B;
	this->ProcessEvent ( pTellBotHowToDisable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AGameObjective::GetHumanReadableName (  )
{
	static UFunction* pGetHumanReadableName = 0;
	AGameObjective_execGetHumanReadableName_Parms parms;

	if ( !pGetHumanReadableName )
		pGetHumanReadableName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.GetHumanReadableName" );

	this->ProcessEvent ( pGetHumanReadableName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AGameObjective::OwnsDefenseScript ( class AUnrealScriptedSequence* S )
{
	static UFunction* pOwnsDefenseScript = 0;
	AGameObjective_execOwnsDefenseScript_Parms parms;

	if ( !pOwnsDefenseScript )
		pOwnsDefenseScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.OwnsDefenseScript" );

	parms.S = S;
	this->ProcessEvent ( pOwnsDefenseScript, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AGameObjective::Timer (  )
{
	static UFunction* pTimer = 0;
	AGameObjective_execTimer_Parms parms;

	if ( !pTimer )
		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.Timer" );

	this->ProcessEvent ( pTimer, &parms, NULL );

}*/

/*bool AGameObjective::NearObjective ( class APawn* P )
{
	static UFunction* pNearObjective = 0;
	AGameObjective_execNearObjective_Parms parms;

	if ( !pNearObjective )
		pNearObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.NearObjective" );

	parms.P = P;
	this->ProcessEvent ( pNearObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AGameObjective::BotNearObjective ( class ABot* B )
{
	static UFunction* pBotNearObjective = 0;
	AGameObjective_execBotNearObjective_Parms parms;

	if ( !pBotNearObjective )
		pBotNearObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.BotNearObjective" );

	parms.B = B;
	this->ProcessEvent ( pBotNearObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AGameObjective::PlayAlarm (  )
{
	static UFunction* pPlayAlarm = 0;
	AGameObjective_execPlayAlarm_Parms parms;

	if ( !pPlayAlarm )
		pPlayAlarm = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.PlayAlarm" );

	this->ProcessEvent ( pPlayAlarm, &parms, NULL );

}*/

/*void AGameObjective::UpdateLocationName (  )
{
	static UFunction* pUpdateLocationName = 0;
	AGameObjective_execUpdateLocationName_Parms parms;

	if ( !pUpdateLocationName )
		pUpdateLocationName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.UpdateLocationName" );

	this->ProcessEvent ( pUpdateLocationName, &parms, NULL );

}*/

/*void AGameObjective::ForceBegin (  )
{
	static UFunction* pForceBegin = 0;
	AGameObjective_execForceBegin_Parms parms;

	if ( !pForceBegin )
		pForceBegin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.ForceBegin" );

	this->ProcessEvent ( pForceBegin, &parms, NULL );

}*/

/*void AGameObjective::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AGameObjective_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AGameObjective::eventPreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	AGameObjective_eventPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*bool AGameObjective::CanDoubleJump ( class APawn* Other )
{
	static UFunction* pCanDoubleJump = 0;
	AGameObjective_execCanDoubleJump_Parms parms;

	if ( !pCanDoubleJump )
		pCanDoubleJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.CanDoubleJump" );

	parms.Other = Other;
	this->ProcessEvent ( pCanDoubleJump, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AGameObjective::GetDifficulty (  )
{
	static UFunction* pGetDifficulty = 0;
	AGameObjective_execGetDifficulty_Parms parms;

	if ( !pGetDifficulty )
		pGetDifficulty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObjective.GetDifficulty" );

	this->ProcessEvent ( pGetDifficulty, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AGameObject::LogReturned (  )
{
	static UFunction* pLogReturned = 0;
	AGameObject_execLogReturned_Parms parms;

	if ( !pLogReturned )
		pLogReturned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.LogReturned" );

	this->ProcessEvent ( pLogReturned, &parms, NULL );

}*/

/*void AGameObject::LogDropped (  )
{
	static UFunction* pLogDropped = 0;
	AGameObject_execLogDropped_Parms parms;

	if ( !pLogDropped )
		pLogDropped = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.LogDropped" );

	this->ProcessEvent ( pLogDropped, &parms, NULL );

}*/

/*void AGameObject::LogTaken ( class AController* C )
{
	static UFunction* pLogTaken = 0;
	AGameObject_execLogTaken_Parms parms;

	if ( !pLogTaken )
		pLogTaken = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.LogTaken" );

	parms.C = C;
	this->ProcessEvent ( pLogTaken, &parms, NULL );

}*/

/*void AGameObject::BaseChange (  )
{
	static UFunction* pBaseChange = 0;
	AGameObject_execBaseChange_Parms parms;

	if ( !pBaseChange )
		pBaseChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.BaseChange" );

	this->ProcessEvent ( pBaseChange, &parms, NULL );

}*/

/*void AGameObject::Landed ( struct FVector HitNormall )
{
	static UFunction* pLanded = 0;
	AGameObject_execLanded_Parms parms;

	if ( !pLanded )
		pLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.Landed" );

	parms.HitNormall = HitNormall;
	this->ProcessEvent ( pLanded, &parms, NULL );

}*/

/*void AGameObject::eventNotReachableBy ( class APawn* P )
{
	static UFunction* pNotReachableBy = 0;
	AGameObject_eventNotReachableBy_Parms parms;

	if ( !pNotReachableBy )
		pNotReachableBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.NotReachableBy" );

	parms.P = P;
	this->ProcessEvent ( pNotReachableBy, &parms, NULL );

}*/

/*void AGameObject::eventFellOutOfWorld ( unsigned char KillType )
{
	static UFunction* pFellOutOfWorld = 0;
	AGameObject_eventFellOutOfWorld_Parms parms;

	if ( !pFellOutOfWorld )
		pFellOutOfWorld = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.FellOutOfWorld" );

	parms.KillType = KillType;
	this->ProcessEvent ( pFellOutOfWorld, &parms, NULL );

}*/

/*void AGameObject::Touch ( class AActor* Other )
{
	static UFunction* pTouch = 0;
	AGameObject_execTouch_Parms parms;

	if ( !pTouch )
		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.Touch" );

	parms.Other = Other;
	this->ProcessEvent ( pTouch, &parms, NULL );

}*/

/*bool AGameObject::ValidHolder ( class AActor* Other )
{
	static UFunction* pValidHolder = 0;
	AGameObject_execValidHolder_Parms parms;

	if ( !pValidHolder )
		pValidHolder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.ValidHolder" );

	parms.Other = Other;
	this->ProcessEvent ( pValidHolder, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AGameObject::IsHome (  )
{
	static UFunction* pIsHome = 0;
	AGameObject_execIsHome_Parms parms;

	if ( !pIsHome )
		pIsHome = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.IsHome" );

	this->ProcessEvent ( pIsHome, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AActor* AGameObject::Position (  )
{
	static UFunction* pPosition = 0;
	AGameObject_execPosition_Parms parms;

	if ( !pPosition )
		pPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.Position" );

	this->ProcessEvent ( pPosition, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AGameObject::SetDisable ( bool Disable )
{
	static UFunction* pSetDisable = 0;
	AGameObject_execSetDisable_Parms parms;

	if ( !pSetDisable )
		pSetDisable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.SetDisable" );

	parms.Disable = Disable;
	this->ProcessEvent ( pSetDisable, &parms, NULL );

}*/

/*void AGameObject::ClearHolder (  )
{
	static UFunction* pClearHolder = 0;
	AGameObject_execClearHolder_Parms parms;

	if ( !pClearHolder )
		pClearHolder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.ClearHolder" );

	this->ProcessEvent ( pClearHolder, &parms, NULL );

}*/

/*void AGameObject::CalcSetHome (  )
{
	static UFunction* pCalcSetHome = 0;
	AGameObject_execCalcSetHome_Parms parms;

	if ( !pCalcSetHome )
		pCalcSetHome = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.CalcSetHome" );

	this->ProcessEvent ( pCalcSetHome, &parms, NULL );

}*/

/*void AGameObject::SendHomeDisabled ( float TimeOut )
{
	static UFunction* pSendHomeDisabled = 0;
	AGameObject_execSendHomeDisabled_Parms parms;

	if ( !pSendHomeDisabled )
		pSendHomeDisabled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.SendHomeDisabled" );

	parms.TimeOut = TimeOut;
	this->ProcessEvent ( pSendHomeDisabled, &parms, NULL );

}*/

/*void AGameObject::SendHome (  )
{
	static UFunction* pSendHome = 0;
	AGameObject_execSendHome_Parms parms;

	if ( !pSendHome )
		pSendHome = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.SendHome" );

	this->ProcessEvent ( pSendHome, &parms, NULL );

}*/

/*void AGameObject::Drop ( struct FVector NewVel, struct FString sReason )
{
	static UFunction* pDrop = 0;
	AGameObject_execDrop_Parms parms;

	if ( !pDrop )
		pDrop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.Drop" );

	parms.NewVel = NewVel;
	parms.sReason = sReason;
	this->ProcessEvent ( pDrop, &parms, NULL );

}*/

/*void AGameObject::Score (  )
{
	static UFunction* pScore = 0;
	AGameObject_execScore_Parms parms;

	if ( !pScore )
		pScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.Score" );

	this->ProcessEvent ( pScore, &parms, NULL );

}*/

/*void AGameObject::SetHolder ( class AController* C )
{
	static UFunction* pSetHolder = 0;
	AGameObject_execSetHolder_Parms parms;

	if ( !pSetHolder )
		pSetHolder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.SetHolder" );

	parms.C = C;
	this->ProcessEvent ( pSetHolder, &parms, NULL );

}*/

/*bool AGameObject::CanBePickedUpBy ( class APawn* P )
{
	static UFunction* pCanBePickedUpBy = 0;
	AGameObject_execCanBePickedUpBy_Parms parms;

	if ( !pCanBePickedUpBy )
		pCanBePickedUpBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.CanBePickedUpBy" );

	parms.P = P;
	this->ProcessEvent ( pCanBePickedUpBy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AGameObject::CanBeThrownBy ( class APawn* P )
{
	static UFunction* pCanBeThrownBy = 0;
	AGameObject_execCanBeThrownBy_Parms parms;

	if ( !pCanBeThrownBy )
		pCanBeThrownBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.CanBeThrownBy" );

	parms.P = P;
	this->ProcessEvent ( pCanBeThrownBy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AGameObject::ForceBegin (  )
{
	static UFunction* pForceBegin = 0;
	AGameObject_execForceBegin_Parms parms;

	if ( !pForceBegin )
		pForceBegin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.ForceBegin" );

	this->ProcessEvent ( pForceBegin, &parms, NULL );

}*/

/*void AGameObject::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AGameObject_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.GameObject.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void ATeamPlayerReplicationInfo::AddVehicleDeathDriving ( class UClass* V )
{
	static UFunction* pAddVehicleDeathDriving = 0;
	ATeamPlayerReplicationInfo_execAddVehicleDeathDriving_Parms parms;

	if ( !pAddVehicleDeathDriving )
		pAddVehicleDeathDriving = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamPlayerReplicationInfo.AddVehicleDeathDriving" );

	parms.V = V;
	this->ProcessEvent ( pAddVehicleDeathDriving, &parms, NULL );

}*/

/*void ATeamPlayerReplicationInfo::AddVehicleDeath ( class UClass* D )
{
	static UFunction* pAddVehicleDeath = 0;
	ATeamPlayerReplicationInfo_execAddVehicleDeath_Parms parms;

	if ( !pAddVehicleDeath )
		pAddVehicleDeath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamPlayerReplicationInfo.AddVehicleDeath" );

	parms.D = D;
	this->ProcessEvent ( pAddVehicleDeath, &parms, NULL );

}*/

/*void ATeamPlayerReplicationInfo::AddVehicleKill ( class UClass* D )
{
	static UFunction* pAddVehicleKill = 0;
	ATeamPlayerReplicationInfo_execAddVehicleKill_Parms parms;

	if ( !pAddVehicleKill )
		pAddVehicleKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamPlayerReplicationInfo.AddVehicleKill" );

	parms.D = D;
	this->ProcessEvent ( pAddVehicleKill, &parms, NULL );

}*/

/*void ATeamPlayerReplicationInfo::UpdateVehicleStats ( class ATeamPlayerReplicationInfo* PRI, class UClass* V, int newKills, int newDeaths, int newDeathsDriving )
{
	static UFunction* pUpdateVehicleStats = 0;
	ATeamPlayerReplicationInfo_execUpdateVehicleStats_Parms parms;

	if ( !pUpdateVehicleStats )
		pUpdateVehicleStats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamPlayerReplicationInfo.UpdateVehicleStats" );

	parms.PRI = PRI;
	parms.V = V;
	parms.newKills = newKills;
	parms.newDeaths = newDeaths;
	parms.newDeathsDriving = newDeathsDriving;
	this->ProcessEvent ( pUpdateVehicleStats, &parms, NULL );

}*/

/*void ATeamPlayerReplicationInfo::AddWeaponDeathHolding ( class UClass* W )
{
	static UFunction* pAddWeaponDeathHolding = 0;
	ATeamPlayerReplicationInfo_execAddWeaponDeathHolding_Parms parms;

	if ( !pAddWeaponDeathHolding )
		pAddWeaponDeathHolding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamPlayerReplicationInfo.AddWeaponDeathHolding" );

	parms.W = W;
	this->ProcessEvent ( pAddWeaponDeathHolding, &parms, NULL );

}*/

/*void ATeamPlayerReplicationInfo::AddWeaponDeath ( class UClass* D )
{
	static UFunction* pAddWeaponDeath = 0;
	ATeamPlayerReplicationInfo_execAddWeaponDeath_Parms parms;

	if ( !pAddWeaponDeath )
		pAddWeaponDeath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamPlayerReplicationInfo.AddWeaponDeath" );

	parms.D = D;
	this->ProcessEvent ( pAddWeaponDeath, &parms, NULL );

}*/

/*void ATeamPlayerReplicationInfo::AddWeaponKill ( class UClass* D )
{
	static UFunction* pAddWeaponKill = 0;
	ATeamPlayerReplicationInfo_execAddWeaponKill_Parms parms;

	if ( !pAddWeaponKill )
		pAddWeaponKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamPlayerReplicationInfo.AddWeaponKill" );

	parms.D = D;
	this->ProcessEvent ( pAddWeaponKill, &parms, NULL );

}*/

/*void ATeamPlayerReplicationInfo::UpdateWeaponStats ( class ATeamPlayerReplicationInfo* PRI, class UClass* W, int newKills, int newDeaths, int newDeathsHolding )
{
	static UFunction* pUpdateWeaponStats = 0;
	ATeamPlayerReplicationInfo_execUpdateWeaponStats_Parms parms;

	if ( !pUpdateWeaponStats )
		pUpdateWeaponStats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamPlayerReplicationInfo.UpdateWeaponStats" );

	parms.PRI = PRI;
	parms.W = W;
	parms.newKills = newKills;
	parms.newDeaths = newDeaths;
	parms.newDeathsHolding = newDeathsHolding;
	this->ProcessEvent ( pUpdateWeaponStats, &parms, NULL );

}*/

/*void ATeamPlayerReplicationInfo::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	ATeamPlayerReplicationInfo_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamPlayerReplicationInfo.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void ASpecialVehicleObjective::Reset (  )
{
	static UFunction* pReset = 0;
	ASpecialVehicleObjective_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SpecialVehicleObjective.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void ASpecialVehicleObjective::UnTrigger ( class AActor* Other, class APawn* EventInstigator )
{
	static UFunction* pUnTrigger = 0;
	ASpecialVehicleObjective_execUnTrigger_Parms parms;

	if ( !pUnTrigger )
		pUnTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SpecialVehicleObjective.UnTrigger" );

	parms.Other = Other;
	parms.EventInstigator = EventInstigator;
	this->ProcessEvent ( pUnTrigger, &parms, NULL );

}*/

/*void ASpecialVehicleObjective::Trigger ( class AActor* Other, class APawn* EventInstigator )
{
	static UFunction* pTrigger = 0;
	ASpecialVehicleObjective_execTrigger_Parms parms;

	if ( !pTrigger )
		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SpecialVehicleObjective.Trigger" );

	parms.Other = Other;
	parms.EventInstigator = EventInstigator;
	this->ProcessEvent ( pTrigger, &parms, NULL );

}*/

/*bool ASpecialVehicleObjective::IsAccessibleTo ( class APawn* BotPawn )
{
	static UFunction* pIsAccessibleTo = 0;
	ASpecialVehicleObjective_execIsAccessibleTo_Parms parms;

	if ( !pIsAccessibleTo )
		pIsAccessibleTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SpecialVehicleObjective.IsAccessibleTo" );

	parms.BotPawn = BotPawn;
	this->ProcessEvent ( pIsAccessibleTo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ASpecialVehicleObjective::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	ASpecialVehicleObjective_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SpecialVehicleObjective.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void ADMStatsScreen::NextStats (  )
{
	static UFunction* pNextStats = 0;
	ADMStatsScreen_execNextStats_Parms parms;

	if ( !pNextStats )
		pNextStats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMStatsScreen.NextStats" );

	this->ProcessEvent ( pNextStats, &parms, NULL );

}*/

/*void ADMStatsScreen::eventDrawScoreboard ( class UCanvas* C )
{
	static UFunction* pDrawScoreboard = 0;
	ADMStatsScreen_eventDrawScoreboard_Parms parms;

	if ( !pDrawScoreboard )
		pDrawScoreboard = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMStatsScreen.DrawScoreboard" );

	parms.C = C;
	this->ProcessEvent ( pDrawScoreboard, &parms, NULL );

}*/

/*struct FString ADMStatsScreen::MakeColorCode ( class FColor NewColor )
{
	static UFunction* pMakeColorCode = 0;
	ADMStatsScreen_execMakeColorCode_Parms parms;

	if ( !pMakeColorCode )
		pMakeColorCode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMStatsScreen.MakeColorCode" );

	parms.NewColor = NewColor;
	this->ProcessEvent ( pMakeColorCode, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealVoiceReplicationInfo::DestroyVoiceChannel ( class AVoiceChatRoom* Channel )
{
	static UFunction* pDestroyVoiceChannel = 0;
	AUnrealVoiceReplicationInfo_execDestroyVoiceChannel_Parms parms;

	if ( !pDestroyVoiceChannel )
		pDestroyVoiceChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.DestroyVoiceChannel" );

	parms.Channel = Channel;
	this->ProcessEvent ( pDestroyVoiceChannel, &parms, NULL );

}*/

/*class AVoiceChatRoom* AUnrealVoiceReplicationInfo::CreateNewVoiceChannel ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pCreateNewVoiceChannel = 0;
	AUnrealVoiceReplicationInfo_execCreateNewVoiceChannel_Parms parms;

	if ( !pCreateNewVoiceChannel )
		pCreateNewVoiceChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.CreateNewVoiceChannel" );

	parms.PRI = PRI;
	this->ProcessEvent ( pCreateNewVoiceChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealVoiceReplicationInfo::IsMember ( class APlayerReplicationInfo* TestPRI, int ChannelIndex, bool bNoCascade )
{
	static UFunction* pIsMember = 0;
	AUnrealVoiceReplicationInfo_execIsMember_Parms parms;

	if ( !pIsMember )
		pIsMember = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.IsMember" );

	parms.TestPRI = TestPRI;
	parms.ChannelIndex = ChannelIndex;
	parms.bNoCascade = bNoCascade;
	this->ProcessEvent ( pIsMember, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUnrealVoiceReplicationInfo::GetPlayerChannelCount (  )
{
	static UFunction* pGetPlayerChannelCount = 0;
	AUnrealVoiceReplicationInfo_execGetPlayerChannelCount_Parms parms;

	if ( !pGetPlayerChannelCount )
		pGetPlayerChannelCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.GetPlayerChannelCount" );

	this->ProcessEvent ( pGetPlayerChannelCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUnrealVoiceReplicationInfo::GetPublicChannelCount ( bool bSingleTeam )
{
	static UFunction* pGetPublicChannelCount = 0;
	AUnrealVoiceReplicationInfo_execGetPublicChannelCount_Parms parms;

	if ( !pGetPublicChannelCount )
		pGetPublicChannelCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.GetPublicChannelCount" );

	parms.bSingleTeam = bSingleTeam;
	this->ProcessEvent ( pGetPublicChannelCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class TArray< class AVoiceChatRoom* > AUnrealVoiceReplicationInfo::GetPlayerChannels (  )
{
	static UFunction* pGetPlayerChannels = 0;
	AUnrealVoiceReplicationInfo_execGetPlayerChannels_Parms parms;

	if ( !pGetPlayerChannels )
		pGetPlayerChannels = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.GetPlayerChannels" );

	this->ProcessEvent ( pGetPlayerChannels, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class TArray< class AVoiceChatRoom* > AUnrealVoiceReplicationInfo::GetPublicChannels (  )
{
	static UFunction* pGetPublicChannels = 0;
	AUnrealVoiceReplicationInfo_execGetPublicChannels_Parms parms;

	if ( !pGetPublicChannels )
		pGetPublicChannels = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.GetPublicChannels" );

	this->ProcessEvent ( pGetPublicChannels, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUnrealVoiceReplicationInfo::eventGetChannelIndex ( struct FString ChannelTitle, int TeamIndex )
{
	static UFunction* pGetChannelIndex = 0;
	AUnrealVoiceReplicationInfo_eventGetChannelIndex_Parms parms;

	if ( !pGetChannelIndex )
		pGetChannelIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.GetChannelIndex" );

	parms.ChannelTitle = ChannelTitle;
	parms.TeamIndex = TeamIndex;
	this->ProcessEvent ( pGetChannelIndex, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUnrealVoiceReplicationInfo::eventGetChannelCount (  )
{
	static UFunction* pGetChannelCount = 0;
	AUnrealVoiceReplicationInfo_eventGetChannelCount_Parms parms;

	if ( !pGetChannelCount )
		pGetChannelCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.GetChannelCount" );

	this->ProcessEvent ( pGetChannelCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class TArray< class AVoiceChatRoom* > AUnrealVoiceReplicationInfo::GetChannels (  )
{
	static UFunction* pGetChannels = 0;
	AUnrealVoiceReplicationInfo_execGetChannels_Parms parms;

	if ( !pGetChannels )
		pGetChannels = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.GetChannels" );

	this->ProcessEvent ( pGetChannels, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class TArray< int > AUnrealVoiceReplicationInfo::GetMemberChannels ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pGetMemberChannels = 0;
	AUnrealVoiceReplicationInfo_execGetMemberChannels_Parms parms;

	if ( !pGetMemberChannels )
		pGetMemberChannels = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.GetMemberChannels" );

	parms.PRI = PRI;
	this->ProcessEvent ( pGetMemberChannels, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class TArray< int > AUnrealVoiceReplicationInfo::GetChannelMembersAt ( int Index )
{
	static UFunction* pGetChannelMembersAt = 0;
	AUnrealVoiceReplicationInfo_execGetChannelMembersAt_Parms parms;

	if ( !pGetChannelMembersAt )
		pGetChannelMembersAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.GetChannelMembersAt" );

	parms.Index = Index;
	this->ProcessEvent ( pGetChannelMembersAt, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class TArray< int > AUnrealVoiceReplicationInfo::GetChannelMembers ( struct FString ChatRoomName, int TeamIndex )
{
	static UFunction* pGetChannelMembers = 0;
	AUnrealVoiceReplicationInfo_execGetChannelMembers_Parms parms;

	if ( !pGetChannelMembers )
		pGetChannelMembers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.GetChannelMembers" );

	parms.ChatRoomName = ChatRoomName;
	parms.TeamIndex = TeamIndex;
	this->ProcessEvent ( pGetChannelMembers, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AVoiceChatRoom* AUnrealVoiceReplicationInfo::GetChannelAt ( int Index )
{
	static UFunction* pGetChannelAt = 0;
	AUnrealVoiceReplicationInfo_execGetChannelAt_Parms parms;

	if ( !pGetChannelAt )
		pGetChannelAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.GetChannelAt" );

	parms.Index = Index;
	this->ProcessEvent ( pGetChannelAt, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AVoiceChatRoom* AUnrealVoiceReplicationInfo::GetChannel ( struct FString ChatRoomName, int TeamIndex )
{
	static UFunction* pGetChannel = 0;
	AUnrealVoiceReplicationInfo_execGetChannel_Parms parms;

	if ( !pGetChannel )
		pGetChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.GetChannel" );

	parms.ChatRoomName = ChatRoomName;
	parms.TeamIndex = TeamIndex;
	this->ProcessEvent ( pGetChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealVoiceReplicationInfo::RemoveVoiceChannel ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pRemoveVoiceChannel = 0;
	AUnrealVoiceReplicationInfo_execRemoveVoiceChannel_Parms parms;

	if ( !pRemoveVoiceChannel )
		pRemoveVoiceChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.RemoveVoiceChannel" );

	parms.PRI = PRI;
	this->ProcessEvent ( pRemoveVoiceChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AVoiceChatRoom* AUnrealVoiceReplicationInfo::AddVoiceChannel ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pAddVoiceChannel = 0;
	AUnrealVoiceReplicationInfo_execAddVoiceChannel_Parms parms;

	if ( !pAddVoiceChannel )
		pAddVoiceChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.AddVoiceChannel" );

	parms.PRI = PRI;
	this->ProcessEvent ( pAddVoiceChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealVoiceReplicationInfo::LeaveChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI )
{
	static UFunction* pLeaveChannel = 0;
	AUnrealVoiceReplicationInfo_execLeaveChannel_Parms parms;

	if ( !pLeaveChannel )
		pLeaveChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.LeaveChannel" );

	parms.ChannelTitle = ChannelTitle;
	parms.PRI = PRI;
	this->ProcessEvent ( pLeaveChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char AUnrealVoiceReplicationInfo::JoinChannelAt ( int ChannelIndex, class APlayerReplicationInfo* PRI, struct FString Password )
{
	static UFunction* pJoinChannelAt = 0;
	AUnrealVoiceReplicationInfo_execJoinChannelAt_Parms parms;

	if ( !pJoinChannelAt )
		pJoinChannelAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.JoinChannelAt" );

	parms.ChannelIndex = ChannelIndex;
	parms.PRI = PRI;
	parms.Password = Password;
	this->ProcessEvent ( pJoinChannelAt, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char AUnrealVoiceReplicationInfo::JoinChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI, struct FString Password )
{
	static UFunction* pJoinChannel = 0;
	AUnrealVoiceReplicationInfo_execJoinChannel_Parms parms;

	if ( !pJoinChannel )
		pJoinChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.JoinChannel" );

	parms.ChannelTitle = ChannelTitle;
	parms.PRI = PRI;
	parms.Password = Password;
	this->ProcessEvent ( pJoinChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealVoiceReplicationInfo::CanJoinChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI )
{
	static UFunction* pCanJoinChannel = 0;
	AUnrealVoiceReplicationInfo_execCanJoinChannel_Parms parms;

	if ( !pCanJoinChannel )
		pCanJoinChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.CanJoinChannel" );

	parms.ChannelTitle = ChannelTitle;
	parms.PRI = PRI;
	this->ProcessEvent ( pCanJoinChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealVoiceReplicationInfo::RemoveVoiceChatter ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pRemoveVoiceChatter = 0;
	AUnrealVoiceReplicationInfo_execRemoveVoiceChatter_Parms parms;

	if ( !pRemoveVoiceChatter )
		pRemoveVoiceChatter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.RemoveVoiceChatter" );

	parms.PRI = PRI;
	this->ProcessEvent ( pRemoveVoiceChatter, &parms, NULL );

}*/

/*void AUnrealVoiceReplicationInfo::AddVoiceChatter ( class APlayerReplicationInfo* NewPRI )
{
	static UFunction* pAddVoiceChatter = 0;
	AUnrealVoiceReplicationInfo_execAddVoiceChatter_Parms parms;

	if ( !pAddVoiceChatter )
		pAddVoiceChatter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.AddVoiceChatter" );

	parms.NewPRI = NewPRI;
	this->ProcessEvent ( pAddVoiceChatter, &parms, NULL );

}*/

/*void AUnrealVoiceReplicationInfo::InitChannels (  )
{
	static UFunction* pInitChannels = 0;
	AUnrealVoiceReplicationInfo_execInitChannels_Parms parms;

	if ( !pInitChannels )
		pInitChannels = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.InitChannels" );

	this->ProcessEvent ( pInitChannels, &parms, NULL );

}*/

/*void AUnrealVoiceReplicationInfo::eventSetGRI ( class AGameReplicationInfo* NewGRI )
{
	static UFunction* pSetGRI = 0;
	AUnrealVoiceReplicationInfo_eventSetGRI_Parms parms;

	if ( !pSetGRI )
		pSetGRI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.SetGRI" );

	parms.NewGRI = NewGRI;
	this->ProcessEvent ( pSetGRI, &parms, NULL );

}*/

/*void AUnrealVoiceReplicationInfo::eventPostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AUnrealVoiceReplicationInfo_eventPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AUnrealVoiceReplicationInfo::eventPostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AUnrealVoiceReplicationInfo_eventPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AUnrealVoiceReplicationInfo::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	AUnrealVoiceReplicationInfo_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealVoiceReplicationInfo.DisplayDebug" );

	parms.Canvas = Canvas;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*bool ABot::ShouldPerformScript (  )
{
	static UFunction* pShouldPerformScript = 0;
	ABot_execShouldPerformScript_Parms parms;

	if ( !pShouldPerformScript )
		pShouldPerformScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ShouldPerformScript" );

	this->ProcessEvent ( pShouldPerformScript, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::ScriptingOverridesAI (  )
{
	static UFunction* pScriptingOverridesAI = 0;
	ABot_execScriptingOverridesAI_Parms parms;

	if ( !pScriptingOverridesAI )
		pScriptingOverridesAI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ScriptingOverridesAI" );

	this->ProcessEvent ( pScriptingOverridesAI, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::SetNewScript ( class AScriptedSequence* NewScript )
{
	static UFunction* pSetNewScript = 0;
	ABot_execSetNewScript_Parms parms;

	if ( !pSetNewScript )
		pSetNewScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SetNewScript" );

	parms.NewScript = NewScript;
	this->ProcessEvent ( pSetNewScript, &parms, NULL );

}*/

/*void ABot::SetEnemyReaction ( int AlertnessLevel )
{
	static UFunction* pSetEnemyReaction = 0;
	ABot_execSetEnemyReaction_Parms parms;

	if ( !pSetEnemyReaction )
		pSetEnemyReaction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SetEnemyReaction" );

	parms.AlertnessLevel = AlertnessLevel;
	this->ProcessEvent ( pSetEnemyReaction, &parms, NULL );

}*/

/*bool ABot::IsShootingObjective (  )
{
	static UFunction* pIsShootingObjective = 0;
	ABot_execIsShootingObjective_Parms parms;

	if ( !pIsShootingObjective )
		pIsShootingObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.IsShootingObjective" );

	this->ProcessEvent ( pIsShootingObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::Stopped (  )
{
	static UFunction* pStopped = 0;
	ABot_execStopped_Parms parms;

	if ( !pStopped )
		pStopped = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.Stopped" );

	this->ProcessEvent ( pStopped, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::FindViewSpot (  )
{
	static UFunction* pFindViewSpot = 0;
	ABot_execFindViewSpot_Parms parms;

	if ( !pFindViewSpot )
		pFindViewSpot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.FindViewSpot" );

	this->ProcessEvent ( pFindViewSpot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::IsHunting (  )
{
	static UFunction* pIsHunting = 0;
	ABot_execIsHunting_Parms parms;

	if ( !pIsHunting )
		pIsHunting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.IsHunting" );

	this->ProcessEvent ( pIsHunting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::IsStrafing (  )
{
	static UFunction* pIsStrafing = 0;
	ABot_execIsStrafing_Parms parms;

	if ( !pIsStrafing )
		pIsStrafing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.IsStrafing" );

	this->ProcessEvent ( pIsStrafing, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::DefendMelee ( float dist )
{
	static UFunction* pDefendMelee = 0;
	ABot_execDefendMelee_Parms parms;

	if ( !pDefendMelee )
		pDefendMelee = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.DefendMelee" );

	parms.dist = dist;
	this->ProcessEvent ( pDefendMelee, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::DoRetreat (  )
{
	static UFunction* pDoRetreat = 0;
	ABot_execDoRetreat_Parms parms;

	if ( !pDoRetreat )
		pDoRetreat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.DoRetreat" );

	this->ProcessEvent ( pDoRetreat, &parms, NULL );

}*/

/*void ABot::DoTacticalMove (  )
{
	static UFunction* pDoTacticalMove = 0;
	ABot_execDoTacticalMove_Parms parms;

	if ( !pDoTacticalMove )
		pDoTacticalMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.DoTacticalMove" );

	this->ProcessEvent ( pDoTacticalMove, &parms, NULL );

}*/

/*void ABot::DoCharge (  )
{
	static UFunction* pDoCharge = 0;
	ABot_execDoCharge_Parms parms;

	if ( !pDoCharge )
		pDoCharge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.DoCharge" );

	this->ProcessEvent ( pDoCharge, &parms, NULL );

}*/

/*void ABot::DoStakeOut (  )
{
	static UFunction* pDoStakeOut = 0;
	ABot_execDoStakeOut_Parms parms;

	if ( !pDoStakeOut )
		pDoStakeOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.DoStakeOut" );

	this->ProcessEvent ( pDoStakeOut, &parms, NULL );

}*/

/*bool ABot::LoseEnemy (  )
{
	static UFunction* pLoseEnemy = 0;
	ABot_execLoseEnemy_Parms parms;

	if ( !pLoseEnemy )
		pLoseEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.LoseEnemy" );

	this->ProcessEvent ( pLoseEnemy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::LostContact ( float MaxTime )
{
	static UFunction* pLostContact = 0;
	ABot_execLostContact_Parms parms;

	if ( !pLostContact )
		pLostContact = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.LostContact" );

	parms.MaxTime = MaxTime;
	this->ProcessEvent ( pLostContact, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float ABot::GetDesiredOffset (  )
{
	static UFunction* pGetDesiredOffset = 0;
	ABot_execGetDesiredOffset_Parms parms;

	if ( !pGetDesiredOffset )
		pGetDesiredOffset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.GetDesiredOffset" );

	this->ProcessEvent ( pGetDesiredOffset, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::ForceCelebrate (  )
{
	static UFunction* pForceCelebrate = 0;
	ABot_execForceCelebrate_Parms parms;

	if ( !pForceCelebrate )
		pForceCelebrate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ForceCelebrate" );

	this->ProcessEvent ( pForceCelebrate, &parms, NULL );

}*/

/*void ABot::ForceGiveWeapon (  )
{
	static UFunction* pForceGiveWeapon = 0;
	ABot_execForceGiveWeapon_Parms parms;

	if ( !pForceGiveWeapon )
		pForceGiveWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ForceGiveWeapon" );

	this->ProcessEvent ( pForceGiveWeapon, &parms, NULL );

}*/

/*void ABot::Celebrate (  )
{
	static UFunction* pCelebrate = 0;
	ABot_execCelebrate_Parms parms;

	if ( !pCelebrate )
		pCelebrate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.Celebrate" );

	this->ProcessEvent ( pCelebrate, &parms, NULL );

}*/

/*void ABot::eventRecoverFromBadStateCode (  )
{
	static UFunction* pRecoverFromBadStateCode = 0;
	ABot_eventRecoverFromBadStateCode_Parms parms;

	if ( !pRecoverFromBadStateCode )
		pRecoverFromBadStateCode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.RecoverFromBadStateCode" );

	this->ProcessEvent ( pRecoverFromBadStateCode, &parms, NULL );

}*/

/*bool ABot::Formation (  )
{
	static UFunction* pFormation = 0;
	ABot_execFormation_Parms parms;

	if ( !pFormation )
		pFormation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.Formation" );

	this->ProcessEvent ( pFormation, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::IsRetreating (  )
{
	static UFunction* pIsRetreating = 0;
	ABot_execIsRetreating_Parms parms;

	if ( !pIsRetreating )
		pIsRetreating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.IsRetreating" );

	this->ProcessEvent ( pIsRetreating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::damageAttitudeTo ( class APawn* Other, float Damage )
{
	static UFunction* pdamageAttitudeTo = 0;
	ABot_execdamageAttitudeTo_Parms parms;

	if ( !pdamageAttitudeTo )
		pdamageAttitudeTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.damageAttitudeTo" );

	parms.Other = Other;
	parms.Damage = Damage;
	this->ProcessEvent ( pdamageAttitudeTo, &parms, NULL );

}*/

/*bool ABot::SuperPickupNotSpokenFor ( class APickup* P )
{
	static UFunction* pSuperPickupNotSpokenFor = 0;
	ABot_execSuperPickupNotSpokenFor_Parms parms;

	if ( !pSuperPickupNotSpokenFor )
		pSuperPickupNotSpokenFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SuperPickupNotSpokenFor" );

	parms.P = P;
	this->ProcessEvent ( pSuperPickupNotSpokenFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float ABot::eventSuperDesireability ( class APickup* P )
{
	static UFunction* pSuperDesireability = 0;
	ABot_eventSuperDesireability_Parms parms;

	if ( !pSuperDesireability )
		pSuperDesireability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SuperDesireability" );

	parms.P = P;
	this->ProcessEvent ( pSuperDesireability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float ABot::eventDesireability ( class APickup* P )
{
	static UFunction* pDesireability = 0;
	ABot_eventDesireability_Parms parms;

	if ( !pDesireability )
		pDesireability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.Desireability" );

	parms.P = P;
	this->ProcessEvent ( pDesireability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::NeedWeapon (  )
{
	static UFunction* pNeedWeapon = 0;
	ABot_execNeedWeapon_Parms parms;

	if ( !pNeedWeapon )
		pNeedWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NeedWeapon" );

	this->ProcessEvent ( pNeedWeapon, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::WanderOrCamp ( bool bMayCrouch )
{
	static UFunction* pWanderOrCamp = 0;
	ABot_execWanderOrCamp_Parms parms;

	if ( !pWanderOrCamp )
		pWanderOrCamp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.WanderOrCamp" );

	parms.bMayCrouch = bMayCrouch;
	this->ProcessEvent ( pWanderOrCamp, &parms, NULL );

}*/

/*class AActor* ABot::FaceActor ( float StrafingModifier )
{
	static UFunction* pFaceActor = 0;
	ABot_execFaceActor_Parms parms;

	if ( !pFaceActor )
		pFaceActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.FaceActor" );

	parms.StrafingModifier = StrafingModifier;
	this->ProcessEvent ( pFaceActor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AActor* ABot::AlternateTranslocDest (  )
{
	static UFunction* pAlternateTranslocDest = 0;
	ABot_execAlternateTranslocDest_Parms parms;

	if ( !pAlternateTranslocDest )
		pAlternateTranslocDest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.AlternateTranslocDest" );

	this->ProcessEvent ( pAlternateTranslocDest, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::ShouldStrafeTo ( class AActor* WayPoint )
{
	static UFunction* pShouldStrafeTo = 0;
	ABot_execShouldStrafeTo_Parms parms;

	if ( !pShouldStrafeTo )
		pShouldStrafeTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ShouldStrafeTo" );

	parms.WayPoint = WayPoint;
	this->ProcessEvent ( pShouldStrafeTo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AActor* ABot::FaceMoveTarget (  )
{
	static UFunction* pFaceMoveTarget = 0;
	ABot_execFaceMoveTarget_Parms parms;

	if ( !pFaceMoveTarget )
		pFaceMoveTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.FaceMoveTarget" );

	this->ProcessEvent ( pFaceMoveTarget, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
{
	static UFunction* pNotifyKilled = 0;
	ABot_execNotifyKilled_Parms parms;

	if ( !pNotifyKilled )
		pNotifyKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NotifyKilled" );

	parms.Killer = Killer;
	parms.Killed = Killed;
	parms.KilledPawn = KilledPawn;
	this->ProcessEvent ( pNotifyKilled, &parms, NULL );

}*/

/*bool ABot::TryToDuck ( struct FVector duckDir, bool bReversed )
{
	static UFunction* pTryToDuck = 0;
	ABot_execTryToDuck_Parms parms;

	if ( !pTryToDuck )
		pTryToDuck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.TryToDuck" );

	parms.duckDir = duckDir;
	parms.bReversed = bReversed;
	this->ProcessEvent ( pTryToDuck, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::ChangeStrafe (  )
{
	static UFunction* pChangeStrafe = 0;
	ABot_execChangeStrafe_Parms parms;

	if ( !pChangeStrafe )
		pChangeStrafe = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ChangeStrafe" );

	this->ProcessEvent ( pChangeStrafe, &parms, NULL );

}*/

/*bool ABot::TryWallDodge ( struct FVector HitNormal, class AActor* HitActor )
{
	static UFunction* pTryWallDodge = 0;
	ABot_execTryWallDodge_Parms parms;

	if ( !pTryWallDodge )
		pTryWallDodge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.TryWallDodge" );

	parms.HitNormal = HitNormal;
	parms.HitActor = HitActor;
	this->ProcessEvent ( pTryWallDodge, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::eventMissedDodge (  )
{
	static UFunction* pMissedDodge = 0;
	ABot_eventMissedDodge_Parms parms;

	if ( !pMissedDodge )
		pMissedDodge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.MissedDodge" );

	this->ProcessEvent ( pMissedDodge, &parms, NULL );

}*/

/*void ABot::eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* HitActor )
{
	static UFunction* pNotifyFallingHitWall = 0;
	ABot_eventNotifyFallingHitWall_Parms parms;

	if ( !pNotifyFallingHitWall )
		pNotifyFallingHitWall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NotifyFallingHitWall" );

	parms.HitNormal = HitNormal;
	parms.HitActor = HitActor;
	this->ProcessEvent ( pNotifyFallingHitWall, &parms, NULL );

}*/

/*void ABot::ReceiveWarning ( class APawn* shooter, float projSpeed, struct FVector FireDir )
{
	static UFunction* pReceiveWarning = 0;
	ABot_execReceiveWarning_Parms parms;

	if ( !pReceiveWarning )
		pReceiveWarning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ReceiveWarning" );

	parms.shooter = shooter;
	parms.projSpeed = projSpeed;
	parms.FireDir = FireDir;
	this->ProcessEvent ( pReceiveWarning, &parms, NULL );

}*/

/*void ABot::NotifyTakeHit ( class APawn* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, int CollisionPart )
{
	static UFunction* pNotifyTakeHit = 0;
	ABot_execNotifyTakeHit_Parms parms;

	if ( !pNotifyTakeHit )
		pNotifyTakeHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NotifyTakeHit" );

	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.Damage = Damage;
	parms.DamageType = DamageType;
	parms.Momentum = Momentum;
	parms.CollisionPart = CollisionPart;
	this->ProcessEvent ( pNotifyTakeHit, &parms, NULL );

}*/

/*void ABot::ReceiveProjectileWarning ( class AProjectile* proj )
{
	static UFunction* pReceiveProjectileWarning = 0;
	ABot_execReceiveProjectileWarning_Parms parms;

	if ( !pReceiveProjectileWarning )
		pReceiveProjectileWarning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ReceiveProjectileWarning" );

	parms.proj = proj;
	this->ProcessEvent ( pReceiveProjectileWarning, &parms, NULL );

}*/

/*void ABot::eventDelayedWarning (  )
{
	static UFunction* pDelayedWarning = 0;
	ABot_eventDelayedWarning_Parms parms;

	if ( !pDelayedWarning )
		pDelayedWarning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.DelayedWarning" );

	this->ProcessEvent ( pDelayedWarning, &parms, NULL );

}*/

/*struct FRotator ABot::AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError )
{
	static UFunction* pAdjustAim = 0;
	ABot_execAdjustAim_Parms parms;

	if ( !pAdjustAim )
		pAdjustAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.AdjustAim" );

	parms.FiredAmmunition = FiredAmmunition;
	parms.projStart = projStart;
	parms.AimError = AimError;
	this->ProcessEvent ( pAdjustAim, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float ABot::AdjustAimError ( float AimError, float TargetDist, bool bDefendMelee, bool bInstantProj, bool bLeadTargetNow )
{
	static UFunction* pAdjustAimError = 0;
	ABot_execAdjustAimError_Parms parms;

	if ( !pAdjustAimError )
		pAdjustAimError = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.AdjustAimError" );

	parms.AimError = AimError;
	parms.TargetDist = TargetDist;
	parms.bDefendMelee = bDefendMelee;
	parms.bInstantProj = bInstantProj;
	parms.bLeadTargetNow = bLeadTargetNow;
	this->ProcessEvent ( pAdjustAimError, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::CheckFutureSight ( float DeltaTime )
{
	static UFunction* pCheckFutureSight = 0;
	ABot_execCheckFutureSight_Parms parms;

	if ( !pCheckFutureSight )
		pCheckFutureSight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.CheckFutureSight" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pCheckFutureSight, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::NearWall ( float walldist )
{
	static UFunction* pNearWall = 0;
	ABot_execNearWall_Parms parms;

	if ( !pNearWall )
		pNearWall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NearWall" );

	parms.walldist = walldist;
	this->ProcessEvent ( pNearWall, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::NeedToTurn ( struct FVector targ )
{
	static UFunction* pNeedToTurn = 0;
	ABot_execNeedToTurn_Parms parms;

	if ( !pNeedToTurn )
		pNeedToTurn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NeedToTurn" );

	parms.targ = targ;
	this->ProcessEvent ( pNeedToTurn, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::FindBestPathToward ( class AActor* A, bool bCheckedReach, bool bAllowDetour )
{
	static UFunction* pFindBestPathToward = 0;
	ABot_execFindBestPathToward_Parms parms;

	if ( !pFindBestPathToward )
		pFindBestPathToward = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.FindBestPathToward" );

	parms.A = A;
	parms.bCheckedReach = bCheckedReach;
	parms.bAllowDetour = bAllowDetour;
	this->ProcessEvent ( pFindBestPathToward, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::eventAllowDetourTo ( class ANavigationPoint* N )
{
	static UFunction* pAllowDetourTo = 0;
	ABot_eventAllowDetourTo_Parms parms;

	if ( !pAllowDetourTo )
		pAllowDetourTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.AllowDetourTo" );

	parms.N = N;
	this->ProcessEvent ( pAllowDetourTo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::SetRouteToGoal ( class AActor* A )
{
	static UFunction* pSetRouteToGoal = 0;
	ABot_execSetRouteToGoal_Parms parms;

	if ( !pSetRouteToGoal )
		pSetRouteToGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SetRouteToGoal" );

	parms.A = A;
	this->ProcessEvent ( pSetRouteToGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::StartMoveToward ( class AActor* o )
{
	static UFunction* pStartMoveToward = 0;
	ABot_execStartMoveToward_Parms parms;

	if ( !pStartMoveToward )
		pStartMoveToward = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.StartMoveToward" );

	parms.o = o;
	this->ProcessEvent ( pStartMoveToward, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::eventNotifyPostLanded (  )
{
	static UFunction* pNotifyPostLanded = 0;
	ABot_eventNotifyPostLanded_Parms parms;

	if ( !pNotifyPostLanded )
		pNotifyPostLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NotifyPostLanded" );

	this->ProcessEvent ( pNotifyPostLanded, &parms, NULL );

}*/

/*bool ABot::NotifyLanded ( struct FVector HitNormal )
{
	static UFunction* pNotifyLanded = 0;
	ABot_execNotifyLanded_Parms parms;

	if ( !pNotifyLanded )
		pNotifyLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NotifyLanded" );

	parms.HitNormal = HitNormal;
	this->ProcessEvent ( pNotifyLanded, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::SetFall (  )
{
	static UFunction* pSetFall = 0;
	ABot_execSetFall_Parms parms;

	if ( !pSetFall )
		pSetFall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SetFall" );

	this->ProcessEvent ( pSetFall, &parms, NULL );

}*/

/*bool ABot::PriorityObjective (  )
{
	static UFunction* pPriorityObjective = 0;
	ABot_execPriorityObjective_Parms parms;

	if ( !pPriorityObjective )
		pPriorityObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.PriorityObjective" );

	this->ProcessEvent ( pPriorityObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::eventNotifyBump ( class AActor* Other )
{
	static UFunction* pNotifyBump = 0;
	ABot_eventNotifyBump_Parms parms;

	if ( !pNotifyBump )
		pNotifyBump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NotifyBump" );

	parms.Other = Other;
	this->ProcessEvent ( pNotifyBump, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::DirectedWander ( struct FVector WanderDir )
{
	static UFunction* pDirectedWander = 0;
	ABot_execDirectedWander_Parms parms;

	if ( !pDirectedWander )
		pDirectedWander = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.DirectedWander" );

	parms.WanderDir = WanderDir;
	this->ProcessEvent ( pDirectedWander, &parms, NULL );

}*/

/*bool ABot::AdjustAround ( class APawn* Other )
{
	static UFunction* pAdjustAround = 0;
	ABot_execAdjustAround_Parms parms;

	if ( !pAdjustAround )
		pAdjustAround = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.AdjustAround" );

	parms.Other = Other;
	this->ProcessEvent ( pAdjustAround, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::ClearPathFor ( class AController* C )
{
	static UFunction* pClearPathFor = 0;
	ABot_execClearPathFor_Parms parms;

	if ( !pClearPathFor )
		pClearPathFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ClearPathFor" );

	parms.C = C;
	this->ProcessEvent ( pClearPathFor, &parms, NULL );

}*/

/*void ABot::CancelCampFor ( class AController* C )
{
	static UFunction* pCancelCampFor = 0;
	ABot_execCancelCampFor_Parms parms;

	if ( !pCancelCampFor )
		pCancelCampFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.CancelCampFor" );

	parms.C = C;
	this->ProcessEvent ( pCancelCampFor, &parms, NULL );

}*/

/*bool ABot::CheckPathToGoalAround ( class APawn* P )
{
	static UFunction* pCheckPathToGoalAround = 0;
	ABot_execCheckPathToGoalAround_Parms parms;

	if ( !pCheckPathToGoalAround )
		pCheckPathToGoalAround = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.CheckPathToGoalAround" );

	parms.P = P;
	this->ProcessEvent ( pCheckPathToGoalAround, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::Restart (  )
{
	static UFunction* pRestart = 0;
	ABot_execRestart_Parms parms;

	if ( !pRestart )
		pRestart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.Restart" );

	this->ProcessEvent ( pRestart, &parms, NULL );

}*/

/*bool ABot::TestDirection ( struct FVector Dir, struct FVector* pick )
{
	static UFunction* pTestDirection = 0;
	ABot_execTestDirection_Parms parms;

	if ( !pTestDirection )
		pTestDirection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.TestDirection" );

	parms.Dir = Dir;
	this->ProcessEvent ( pTestDirection, &parms, NULL );

	*pick = parms.pick;
	return parms.ReturnValue;
}*/

/*bool ABot::FindRoamDest (  )
{
	static UFunction* pFindRoamDest = 0;
	ABot_execFindRoamDest_Parms parms;

	if ( !pFindRoamDest )
		pFindRoamDest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.FindRoamDest" );

	this->ProcessEvent ( pFindRoamDest, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::eventSoakStop ( struct FString problem )
{
	static UFunction* pSoakStop = 0;
	ABot_eventSoakStop_Parms parms;

	if ( !pSoakStop )
		pSoakStop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SoakStop" );

	parms.problem = problem;
	this->ProcessEvent ( pSoakStop, &parms, NULL );

}*/

/*bool ABot::PickRetreatDestination (  )
{
	static UFunction* pPickRetreatDestination = 0;
	ABot_execPickRetreatDestination_Parms parms;

	if ( !pPickRetreatDestination )
		pPickRetreatDestination = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.PickRetreatDestination" );

	this->ProcessEvent ( pPickRetreatDestination, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::FindInventoryGoal ( float BestWeight )
{
	static UFunction* pFindInventoryGoal = 0;
	ABot_execFindInventoryGoal_Parms parms;

	if ( !pFindInventoryGoal )
		pFindInventoryGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.FindInventoryGoal" );

	parms.BestWeight = BestWeight;
	this->ProcessEvent ( pFindInventoryGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::FindSuperPickup ( float MaxDist )
{
	static UFunction* pFindSuperPickup = 0;
	ABot_execFindSuperPickup_Parms parms;

	if ( !pFindSuperPickup )
		pFindSuperPickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.FindSuperPickup" );

	parms.MaxDist = MaxDist;
	this->ProcessEvent ( pFindSuperPickup, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::ChooseAttackMode (  )
{
	static UFunction* pChooseAttackMode = 0;
	ABot_execChooseAttackMode_Parms parms;

	if ( !pChooseAttackMode )
		pChooseAttackMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ChooseAttackMode" );

	this->ProcessEvent ( pChooseAttackMode, &parms, NULL );

}*/

/*void ABot::DoRangedAttackOn ( class AActor* A )
{
	static UFunction* pDoRangedAttackOn = 0;
	ABot_execDoRangedAttackOn_Parms parms;

	if ( !pDoRangedAttackOn )
		pDoRangedAttackOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.DoRangedAttackOn" );

	parms.A = A;
	this->ProcessEvent ( pDoRangedAttackOn, &parms, NULL );

}*/

/*void ABot::FightEnemy ( bool bCanCharge, float EnemyStrength )
{
	static UFunction* pFightEnemy = 0;
	ABot_execFightEnemy_Parms parms;

	if ( !pFightEnemy )
		pFightEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.FightEnemy" );

	parms.bCanCharge = bCanCharge;
	parms.EnemyStrength = EnemyStrength;
	this->ProcessEvent ( pFightEnemy, &parms, NULL );

}*/

/*void ABot::VehicleFightEnemy ( bool bCanCharge, float EnemyStrength )
{
	static UFunction* pVehicleFightEnemy = 0;
	ABot_execVehicleFightEnemy_Parms parms;

	if ( !pVehicleFightEnemy )
		pVehicleFightEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.VehicleFightEnemy" );

	parms.bCanCharge = bCanCharge;
	parms.EnemyStrength = EnemyStrength;
	this->ProcessEvent ( pVehicleFightEnemy, &parms, NULL );

}*/

/*bool ABot::EnemyVisible (  )
{
	static UFunction* pEnemyVisible = 0;
	ABot_execEnemyVisible_Parms parms;

	if ( !pEnemyVisible )
		pEnemyVisible = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.EnemyVisible" );

	this->ProcessEvent ( pEnemyVisible, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::DoWaitForLanding (  )
{
	static UFunction* pDoWaitForLanding = 0;
	ABot_execDoWaitForLanding_Parms parms;

	if ( !pDoWaitForLanding )
		pDoWaitForLanding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.DoWaitForLanding" );

	this->ProcessEvent ( pDoWaitForLanding, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::ExecuteWhatToDoNext (  )
{
	static UFunction* pExecuteWhatToDoNext = 0;
	ABot_execExecuteWhatToDoNext_Parms parms;

	if ( !pExecuteWhatToDoNext )
		pExecuteWhatToDoNext = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ExecuteWhatToDoNext" );

	this->ProcessEvent ( pExecuteWhatToDoNext, &parms, NULL );

}*/

/*struct FString ABot::GetEnemyName (  )
{
	static UFunction* pGetEnemyName = 0;
	ABot_execGetEnemyName_Parms parms;

	if ( !pGetEnemyName )
		pGetEnemyName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.GetEnemyName" );

	this->ProcessEvent ( pGetEnemyName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString ABot::GetOldEnemyName (  )
{
	static UFunction* pGetOldEnemyName = 0;
	ABot_execGetOldEnemyName_Parms parms;

	if ( !pGetOldEnemyName )
		pGetOldEnemyName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.GetOldEnemyName" );

	this->ProcessEvent ( pGetOldEnemyName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::WhatToDoNext ( unsigned char CallingByte )
{
	static UFunction* pWhatToDoNext = 0;
	ABot_execWhatToDoNext_Parms parms;

	if ( !pWhatToDoNext )
		pWhatToDoNext = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.WhatToDoNext" );

	parms.CallingByte = CallingByte;
	this->ProcessEvent ( pWhatToDoNext, &parms, NULL );

}*/

/*void ABot::WasKilledBy ( class AController* Other )
{
	static UFunction* pWasKilledBy = 0;
	ABot_execWasKilledBy_Parms parms;

	if ( !pWasKilledBy )
		pWasKilledBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.WasKilledBy" );

	parms.Other = Other;
	this->ProcessEvent ( pWasKilledBy, &parms, NULL );

}*/

/*void ABot::SetAlertness ( float NewAlertness )
{
	static UFunction* pSetAlertness = 0;
	ABot_execSetAlertness_Parms parms;

	if ( !pSetAlertness )
		pSetAlertness = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SetAlertness" );

	parms.NewAlertness = NewAlertness;
	this->ProcessEvent ( pSetAlertness, &parms, NULL );

}*/

/*void ABot::SetPeripheralVision (  )
{
	static UFunction* pSetPeripheralVision = 0;
	ABot_execSetPeripheralVision_Parms parms;

	if ( !pSetPeripheralVision )
		pSetPeripheralVision = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SetPeripheralVision" );

	this->ProcessEvent ( pSetPeripheralVision, &parms, NULL );

}*/

/*void ABot::SetMaxDesiredSpeed (  )
{
	static UFunction* pSetMaxDesiredSpeed = 0;
	ABot_execSetMaxDesiredSpeed_Parms parms;

	if ( !pSetMaxDesiredSpeed )
		pSetMaxDesiredSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SetMaxDesiredSpeed" );

	this->ProcessEvent ( pSetMaxDesiredSpeed, &parms, NULL );

}*/

/*void ABot::ResetSkill (  )
{
	static UFunction* pResetSkill = 0;
	ABot_execResetSkill_Parms parms;

	if ( !pResetSkill )
		pResetSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ResetSkill" );

	this->ProcessEvent ( pResetSkill, &parms, NULL );

}*/

/*void ABot::InitializeSkill ( float InSkill )
{
	static UFunction* pInitializeSkill = 0;
	ABot_execInitializeSkill_Parms parms;

	if ( !pInitializeSkill )
		pInitializeSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.InitializeSkill" );

	parms.InSkill = InSkill;
	this->ProcessEvent ( pInitializeSkill, &parms, NULL );

}*/

/*void ABot::Possess ( class APawn* aPawn )
{
	static UFunction* pPossess = 0;
	ABot_execPossess_Parms parms;

	if ( !pPossess )
		pPossess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.Possess" );

	parms.aPawn = aPawn;
	this->ProcessEvent ( pPossess, &parms, NULL );

}*/

/*void ABot::Reset (  )
{
	static UFunction* pReset = 0;
	ABot_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void ABot::eventNotifyMissedJump (  )
{
	static UFunction* pNotifyMissedJump = 0;
	ABot_eventNotifyMissedJump_Parms parms;

	if ( !pNotifyMissedJump )
		pNotifyMissedJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NotifyMissedJump" );

	this->ProcessEvent ( pNotifyMissedJump, &parms, NULL );

}*/

/*void ABot::eventNotifyJumpApex (  )
{
	static UFunction* pNotifyJumpApex = 0;
	ABot_eventNotifyJumpApex_Parms parms;

	if ( !pNotifyJumpApex )
		pNotifyJumpApex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NotifyJumpApex" );

	this->ProcessEvent ( pNotifyJumpApex, &parms, NULL );

}*/

/*void ABot::eventMayDodgeToMoveTarget (  )
{
	static UFunction* pMayDodgeToMoveTarget = 0;
	ABot_eventMayDodgeToMoveTarget_Parms parms;

	if ( !pMayDodgeToMoveTarget )
		pMayDodgeToMoveTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.MayDodgeToMoveTarget" );

	this->ProcessEvent ( pMayDodgeToMoveTarget, &parms, NULL );

}*/

/*bool ABot::NotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pNotifyPhysicsVolumeChange = 0;
	ABot_execNotifyPhysicsVolumeChange_Parms parms;

	if ( !pNotifyPhysicsVolumeChange )
		pNotifyPhysicsVolumeChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NotifyPhysicsVolumeChange" );

	parms.NewVolume = NewVolume;
	this->ProcessEvent ( pNotifyPhysicsVolumeChange, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::StrafeFromDamage ( float Damage, class UClass* DamageType, bool bFindDest )
{
	static UFunction* pStrafeFromDamage = 0;
	ABot_execStrafeFromDamage_Parms parms;

	if ( !pStrafeFromDamage )
		pStrafeFromDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.StrafeFromDamage" );

	parms.Damage = Damage;
	parms.DamageType = DamageType;
	parms.bFindDest = bFindDest;
	this->ProcessEvent ( pStrafeFromDamage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::BotVoiceMessage ( struct FName MessageType, unsigned char MessageID, class AController* Sender )
{
	static UFunction* pBotVoiceMessage = 0;
	ABot_execBotVoiceMessage_Parms parms;

	if ( !pBotVoiceMessage )
		pBotVoiceMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.BotVoiceMessage" );

	parms.MessageType = MessageType;
	parms.MessageID = MessageID;
	parms.Sender = Sender;
	this->ProcessEvent ( pBotVoiceMessage, &parms, NULL );

}*/

/*void ABot::EnemyChanged ( bool bNewEnemyVisible )
{
	static UFunction* pEnemyChanged = 0;
	ABot_execEnemyChanged_Parms parms;

	if ( !pEnemyChanged )
		pEnemyChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.EnemyChanged" );

	parms.bNewEnemyVisible = bNewEnemyVisible;
	this->ProcessEvent ( pEnemyChanged, &parms, NULL );

}*/

/*void ABot::SetEnemyInfo ( bool bNewEnemyVisible )
{
	static UFunction* pSetEnemyInfo = 0;
	ABot_execSetEnemyInfo_Parms parms;

	if ( !pSetEnemyInfo )
		pSetEnemyInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SetEnemyInfo" );

	parms.bNewEnemyVisible = bNewEnemyVisible;
	this->ProcessEvent ( pSetEnemyInfo, &parms, NULL );

}*/

/*void ABot::Trigger ( class AActor* Other, class APawn* EventInstigator )
{
	static UFunction* pTrigger = 0;
	ABot_execTrigger_Parms parms;

	if ( !pTrigger )
		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.Trigger" );

	parms.Other = Other;
	parms.EventInstigator = EventInstigator;
	this->ProcessEvent ( pTrigger, &parms, NULL );

}*/

/*float ABot::RelativeStrength ( class APawn* Other )
{
	static UFunction* pRelativeStrength = 0;
	ABot_execRelativeStrength_Parms parms;

	if ( !pRelativeStrength )
		pRelativeStrength = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.RelativeStrength" );

	parms.Other = Other;
	this->ProcessEvent ( pRelativeStrength, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::AssignSquadResponsibility (  )
{
	static UFunction* pAssignSquadResponsibility = 0;
	ABot_execAssignSquadResponsibility_Parms parms;

	if ( !pAssignSquadResponsibility )
		pAssignSquadResponsibility = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.AssignSquadResponsibility" );

	this->ProcessEvent ( pAssignSquadResponsibility, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::FreeScript (  )
{
	static UFunction* pFreeScript = 0;
	ABot_execFreeScript_Parms parms;

	if ( !pFreeScript )
		pFreeScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.FreeScript" );

	this->ProcessEvent ( pFreeScript, &parms, NULL );

}*/

/*bool ABot::IsSniping (  )
{
	static UFunction* pIsSniping = 0;
	ABot_execIsSniping_Parms parms;

	if ( !pIsSniping )
		pIsSniping = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.IsSniping" );

	this->ProcessEvent ( pIsSniping, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::CheckIfShouldCrouch ( struct FVector StartPosition, struct FVector TargetPosition, float Probability )
{
	static UFunction* pCheckIfShouldCrouch = 0;
	ABot_execCheckIfShouldCrouch_Parms parms;

	if ( !pCheckIfShouldCrouch )
		pCheckIfShouldCrouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.CheckIfShouldCrouch" );

	parms.StartPosition = StartPosition;
	parms.TargetPosition = TargetPosition;
	parms.Probability = Probability;
	this->ProcessEvent ( pCheckIfShouldCrouch, &parms, NULL );

}*/

/*bool ABot::CanStakeOut (  )
{
	static UFunction* pCanStakeOut = 0;
	ABot_execCanStakeOut_Parms parms;

	if ( !pCanStakeOut )
		pCanStakeOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.CanStakeOut" );

	this->ProcessEvent ( pCanStakeOut, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::ClearShot ( struct FVector TargetLoc, bool bImmediateFire )
{
	static UFunction* pClearShot = 0;
	ABot_execClearShot_Parms parms;

	if ( !pClearShot )
		pClearShot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ClearShot" );

	parms.TargetLoc = TargetLoc;
	parms.bImmediateFire = bImmediateFire;
	this->ProcessEvent ( pClearShot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::SetAttractionState (  )
{
	static UFunction* pSetAttractionState = 0;
	ABot_execSetAttractionState_Parms parms;

	if ( !pSetAttractionState )
		pSetAttractionState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SetAttractionState" );

	this->ProcessEvent ( pSetAttractionState, &parms, NULL );

}*/

/*void ABot::eventSeePlayer ( class APawn* SeenPlayer )
{
	static UFunction* pSeePlayer = 0;
	ABot_eventSeePlayer_Parms parms;

	if ( !pSeePlayer )
		pSeePlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SeePlayer" );

	parms.SeenPlayer = SeenPlayer;
	this->ProcessEvent ( pSeePlayer, &parms, NULL );

}*/

/*void ABot::HearNoise ( float Loudness, class AActor* NoiseMaker )
{
	static UFunction* pHearNoise = 0;
	ABot_execHearNoise_Parms parms;

	if ( !pHearNoise )
		pHearNoise = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.HearNoise" );

	parms.Loudness = Loudness;
	parms.NoiseMaker = NoiseMaker;
	this->ProcessEvent ( pHearNoise, &parms, NULL );

}*/

/*void ABot::ClearTemporaryOrders (  )
{
	static UFunction* pClearTemporaryOrders = 0;
	ABot_execClearTemporaryOrders_Parms parms;

	if ( !pClearTemporaryOrders )
		pClearTemporaryOrders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ClearTemporaryOrders" );

	this->ProcessEvent ( pClearTemporaryOrders, &parms, NULL );

}*/

/*void ABot::SetTemporaryOrders ( struct FName NewOrders, class AController* OrderGiver )
{
	static UFunction* pSetTemporaryOrders = 0;
	ABot_execSetTemporaryOrders_Parms parms;

	if ( !pSetTemporaryOrders )
		pSetTemporaryOrders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SetTemporaryOrders" );

	parms.NewOrders = NewOrders;
	parms.OrderGiver = OrderGiver;
	this->ProcessEvent ( pSetTemporaryOrders, &parms, NULL );

}*/

/*void ABot::SetOrders ( struct FName NewOrders, class AController* OrderGiver )
{
	static UFunction* pSetOrders = 0;
	ABot_execSetOrders_Parms parms;

	if ( !pSetOrders )
		pSetOrders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SetOrders" );

	parms.NewOrders = NewOrders;
	parms.OrderGiver = OrderGiver;
	this->ProcessEvent ( pSetOrders, &parms, NULL );

}*/

/*void ABot::SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char MessageID, float wait, struct FName BroadcastType )
{
	static UFunction* pSendMessage = 0;
	ABot_execSendMessage_Parms parms;

	if ( !pSendMessage )
		pSendMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SendMessage" );

	parms.Recipient = Recipient;
	parms.MessageType = MessageType;
	parms.MessageID = MessageID;
	parms.wait = wait;
	parms.BroadcastType = BroadcastType;
	this->ProcessEvent ( pSendMessage, &parms, NULL );

}*/

/*unsigned char ABot::GetMessageIndex ( struct FName PhraseName )
{
	static UFunction* pGetMessageIndex = 0;
	ABot_execGetMessageIndex_Parms parms;

	if ( !pGetMessageIndex )
		pGetMessageIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.GetMessageIndex" );

	parms.PhraseName = PhraseName;
	this->ProcessEvent ( pGetMessageIndex, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::YellAt ( class APawn* Moron )
{
	static UFunction* pYellAt = 0;
	ABot_execYellAt_Parms parms;

	if ( !pYellAt )
		pYellAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.YellAt" );

	parms.Moron = Moron;
	this->ProcessEvent ( pYellAt, &parms, NULL );

}*/

/*class AActor* ABot::GetOrderObject (  )
{
	static UFunction* pGetOrderObject = 0;
	ABot_execGetOrderObject_Parms parms;

	if ( !pGetOrderObject )
		pGetOrderObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.GetOrderObject" );

	this->ProcessEvent ( pGetOrderObject, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FName ABot::GetOrders (  )
{
	static UFunction* pGetOrders = 0;
	ABot_execGetOrders_Parms parms;

	if ( !pGetOrders )
		pGetOrders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.GetOrders" );

	this->ProcessEvent ( pGetOrders, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	ABot_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.DisplayDebug" );

	parms.Canvas = Canvas;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*bool ABot::CanCombo (  )
{
	static UFunction* pCanCombo = 0;
	ABot_execCanCombo_Parms parms;

	if ( !pCanCombo )
		pCanCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.CanCombo" );

	this->ProcessEvent ( pCanCombo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::CanComboMoving (  )
{
	static UFunction* pCanComboMoving = 0;
	ABot_execCanComboMoving_Parms parms;

	if ( !pCanComboMoving )
		pCanComboMoving = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.CanComboMoving" );

	this->ProcessEvent ( pCanComboMoving, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::ProficientWithWeapon (  )
{
	static UFunction* pProficientWithWeapon = 0;
	ABot_execProficientWithWeapon_Parms parms;

	if ( !pProficientWithWeapon )
		pProficientWithWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ProficientWithWeapon" );

	this->ProcessEvent ( pProficientWithWeapon, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float ABot::WeaponPreference ( class AwWeapon* W )
{
	static UFunction* pWeaponPreference = 0;
	ABot_execWeaponPreference_Parms parms;

	if ( !pWeaponPreference )
		pWeaponPreference = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.WeaponPreference" );

	parms.W = W;
	this->ProcessEvent ( pWeaponPreference, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::ChangedWeapon (  )
{
	static UFunction* pChangedWeapon = 0;
	ABot_execChangedWeapon_Parms parms;

	if ( !pChangedWeapon )
		pChangedWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ChangedWeapon" );

	this->ProcessEvent ( pChangedWeapon, &parms, NULL );

}*/

/*void ABot::StopFiring (  )
{
	static UFunction* pStopFiring = 0;
	ABot_execStopFiring_Parms parms;

	if ( !pStopFiring )
		pStopFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.StopFiring" );

	this->ProcessEvent ( pStopFiring, &parms, NULL );

}*/

/*bool ABot::CanAttack ( class AActor* Other )
{
	static UFunction* pCanAttack = 0;
	ABot_execCanAttack_Parms parms;

	if ( !pCanAttack )
		pCanAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.CanAttack" );

	parms.Other = Other;
	this->ProcessEvent ( pCanAttack, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::FireWeaponAt ( class AActor* A )
{
	static UFunction* pFireWeaponAt = 0;
	ABot_execFireWeaponAt_Parms parms;

	if ( !pFireWeaponAt )
		pFireWeaponAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.FireWeaponAt" );

	parms.A = A;
	this->ProcessEvent ( pFireWeaponAt, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::TimedFireWeaponAtEnemy (  )
{
	static UFunction* pTimedFireWeaponAtEnemy = 0;
	ABot_execTimedFireWeaponAtEnemy_Parms parms;

	if ( !pTimedFireWeaponAtEnemy )
		pTimedFireWeaponAtEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.TimedFireWeaponAtEnemy" );

	this->ProcessEvent ( pTimedFireWeaponAtEnemy, &parms, NULL );

}*/

/*bool ABot::ShouldFireAgain ( float RefireRate )
{
	static UFunction* pShouldFireAgain = 0;
	ABot_execShouldFireAgain_Parms parms;

	if ( !pShouldFireAgain )
		pShouldFireAgain = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ShouldFireAgain" );

	parms.RefireRate = RefireRate;
	this->ProcessEvent ( pShouldFireAgain, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::WeaponFireAgain ( float RefireRate, bool bFinishedFire )
{
	static UFunction* pWeaponFireAgain = 0;
	ABot_execWeaponFireAgain_Parms parms;

	if ( !pWeaponFireAgain )
		pWeaponFireAgain = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.WeaponFireAgain" );

	parms.RefireRate = RefireRate;
	parms.bFinishedFire = bFinishedFire;
	this->ProcessEvent ( pWeaponFireAgain, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::WaitForMover ( class AMover* M )
{
	static UFunction* pWaitForMover = 0;
	ABot_execWaitForMover_Parms parms;

	if ( !pWaitForMover )
		pWaitForMover = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.WaitForMover" );

	parms.M = M;
	this->ProcessEvent ( pWaitForMover, &parms, NULL );

}*/

/*void ABot::ImpactJump (  )
{
	static UFunction* pImpactJump = 0;
	ABot_execImpactJump_Parms parms;

	if ( !pImpactJump )
		pImpactJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ImpactJump" );

	this->ProcessEvent ( pImpactJump, &parms, NULL );

}*/

/*bool ABot::CanUseTranslocator (  )
{
	static UFunction* pCanUseTranslocator = 0;
	ABot_execCanUseTranslocator_Parms parms;

	if ( !pCanUseTranslocator )
		pCanUseTranslocator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.CanUseTranslocator" );

	this->ProcessEvent ( pCanUseTranslocator, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::CanImpactJump (  )
{
	static UFunction* pCanImpactJump = 0;
	ABot_execCanImpactJump_Parms parms;

	if ( !pCanImpactJump )
		pCanImpactJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.CanImpactJump" );

	this->ProcessEvent ( pCanImpactJump, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float ABot::RateWeapon ( class AwWeapon* W )
{
	static UFunction* pRateWeapon = 0;
	ABot_execRateWeapon_Parms parms;

	if ( !pRateWeapon )
		pRateWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.RateWeapon" );

	parms.W = W;
	this->ProcessEvent ( pRateWeapon, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::UpdatePawnViewPitch (  )
{
	static UFunction* pUpdatePawnViewPitch = 0;
	ABot_execUpdatePawnViewPitch_Parms parms;

	if ( !pUpdatePawnViewPitch )
		pUpdatePawnViewPitch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.UpdatePawnViewPitch" );

	this->ProcessEvent ( pUpdatePawnViewPitch, &parms, NULL );

}*/

/*class APawn* ABot::GetMyPlayer (  )
{
	static UFunction* pGetMyPlayer = 0;
	ABot_execGetMyPlayer_Parms parms;

	if ( !pGetMyPlayer )
		pGetMyPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.GetMyPlayer" );

	this->ProcessEvent ( pGetMyPlayer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::InitPlayerReplicationInfo (  )
{
	static UFunction* pInitPlayerReplicationInfo = 0;
	ABot_execInitPlayerReplicationInfo_Parms parms;

	if ( !pInitPlayerReplicationInfo )
		pInitPlayerReplicationInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.InitPlayerReplicationInfo" );

	this->ProcessEvent ( pInitPlayerReplicationInfo, &parms, NULL );

}*/

/*bool ABot::DontReuseTaunt ( int t )
{
	static UFunction* pDontReuseTaunt = 0;
	ABot_execDontReuseTaunt_Parms parms;

	if ( !pDontReuseTaunt )
		pDontReuseTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.DontReuseTaunt" );

	parms.t = t;
	this->ProcessEvent ( pDontReuseTaunt, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ABot::AutoTaunt (  )
{
	static UFunction* pAutoTaunt = 0;
	ABot_execAutoTaunt_Parms parms;

	if ( !pAutoTaunt )
		pAutoTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.AutoTaunt" );

	this->ProcessEvent ( pAutoTaunt, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::SetCombatTimer (  )
{
	static UFunction* pSetCombatTimer = 0;
	ABot_execSetCombatTimer_Parms parms;

	if ( !pSetCombatTimer )
		pSetCombatTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SetCombatTimer" );

	this->ProcessEvent ( pSetCombatTimer, &parms, NULL );

}*/

/*void ABot::Startle ( class AActor* Feared )
{
	static UFunction* pStartle = 0;
	ABot_execStartle_Parms parms;

	if ( !pStartle )
		pStartle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.Startle" );

	parms.Feared = Feared;
	this->ProcessEvent ( pStartle, &parms, NULL );

}*/

/*void ABot::FearThisSpot ( class AAvoidMarker* aSpot )
{
	static UFunction* pFearThisSpot = 0;
	ABot_execFearThisSpot_Parms parms;

	if ( !pFearThisSpot )
		pFearThisSpot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.FearThisSpot" );

	parms.aSpot = aSpot;
	this->ProcessEvent ( pFearThisSpot, &parms, NULL );

}*/

/*void ABot::TryCombo ( struct FString ComboName )
{
	static UFunction* pTryCombo = 0;
	ABot_execTryCombo_Parms parms;

	if ( !pTryCombo )
		pTryCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.TryCombo" );

	parms.ComboName = ComboName;
	this->ProcessEvent ( pTryCombo, &parms, NULL );

}*/

/*bool ABot::CanDoubleJump ( class APawn* Other )
{
	static UFunction* pCanDoubleJump = 0;
	ABot_execCanDoubleJump_Parms parms;

	if ( !pCanDoubleJump )
		pCanDoubleJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.CanDoubleJump" );

	parms.Other = Other;
	this->ProcessEvent ( pCanDoubleJump, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::GetOutOfVehicle (  )
{
	static UFunction* pGetOutOfVehicle = 0;
	ABot_execGetOutOfVehicle_Parms parms;

	if ( !pGetOutOfVehicle )
		pGetOutOfVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.GetOutOfVehicle" );

	this->ProcessEvent ( pGetOutOfVehicle, &parms, NULL );

}*/

/*bool ABot::eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pNotifyHitWall = 0;
	ABot_eventNotifyHitWall_Parms parms;

	if ( !pNotifyHitWall )
		pNotifyHitWall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NotifyHitWall" );

	parms.HitNormal = HitNormal;
	parms.Wall = Wall;
	this->ProcessEvent ( pNotifyHitWall, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::eventSetupSpecialPathAbilities (  )
{
	static UFunction* pSetupSpecialPathAbilities = 0;
	ABot_eventSetupSpecialPathAbilities_Parms parms;

	if ( !pSetupSpecialPathAbilities )
		pSetupSpecialPathAbilities = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.SetupSpecialPathAbilities" );

	this->ProcessEvent ( pSetupSpecialPathAbilities, &parms, NULL );

}*/

/*bool ABot::ShouldKeepShielding (  )
{
	static UFunction* pShouldKeepShielding = 0;
	ABot_execShouldKeepShielding_Parms parms;

	if ( !pShouldKeepShielding )
		pShouldKeepShielding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.ShouldKeepShielding" );

	this->ProcessEvent ( pShouldKeepShielding, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::NotifyAddInventory ( class AInventory* NewItem )
{
	static UFunction* pNotifyAddInventory = 0;
	ABot_execNotifyAddInventory_Parms parms;

	if ( !pNotifyAddInventory )
		pNotifyAddInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.NotifyAddInventory" );

	parms.NewItem = NewItem;
	this->ProcessEvent ( pNotifyAddInventory, &parms, NULL );

}*/

/*class AwWeapon* ABot::HasSuperWeapon (  )
{
	static UFunction* pHasSuperWeapon = 0;
	ABot_execHasSuperWeapon_Parms parms;

	if ( !pHasSuperWeapon )
		pHasSuperWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.HasSuperWeapon" );

	this->ProcessEvent ( pHasSuperWeapon, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ABot::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	ABot_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void ABot::Destroyed (  )
{
	static UFunction* pDestroyed = 0;
	ABot_execDestroyed_Parms parms;

	if ( !pDestroyed )
		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.Bot.Destroyed" );

	this->ProcessEvent ( pDestroyed, &parms, NULL );

}*/

/*void AKillingSpreeMessage::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pClientReceive = 0;
	AKillingSpreeMessage_execClientReceive_Parms parms;

	if ( !pClientReceive )
		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.KillingSpreeMessage.ClientReceive" );

	parms.P = P;
	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pClientReceive, &parms, NULL );

}*/

/*struct FString AKillingSpreeMessage::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pGetString = 0;
	AKillingSpreeMessage_execGetString_Parms parms;

	if ( !pGetString )
		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.KillingSpreeMessage.GetString" );

	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pGetString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AKillingSpreeMessage::GetRelatedString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pGetRelatedString = 0;
	AKillingSpreeMessage_execGetRelatedString_Parms parms;

	if ( !pGetRelatedString )
		pGetRelatedString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.KillingSpreeMessage.GetRelatedString" );

	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pGetRelatedString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AKillingSpreeMessage::GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer )
{
	static UFunction* pGetFontSize = 0;
	AKillingSpreeMessage_execGetFontSize_Parms parms;

	if ( !pGetFontSize )
		pGetFontSize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.KillingSpreeMessage.GetFontSize" );

	parms.Switch = Switch;
	parms.RelatedPRI1 = RelatedPRI1;
	parms.RelatedPRI2 = RelatedPRI2;
	parms.LocalPlayer = LocalPlayer;
	this->ProcessEvent ( pGetFontSize, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::FriendlyToward ( class APawn* Other )
{
	static UFunction* pFriendlyToward = 0;
	ASquadAI_execFriendlyToward_Parms parms;

	if ( !pFriendlyToward )
		pFriendlyToward = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.FriendlyToward" );

	parms.Other = Other;
	this->ProcessEvent ( pFriendlyToward, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::CautiousAdvance ( class ABot* B )
{
	static UFunction* pCautiousAdvance = 0;
	ASquadAI_execCautiousAdvance_Parms parms;

	if ( !pCautiousAdvance )
		pCautiousAdvance = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.CautiousAdvance" );

	parms.B = B;
	this->ProcessEvent ( pCautiousAdvance, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::IsDefending ( class ABot* B )
{
	static UFunction* pIsDefending = 0;
	ASquadAI_execIsDefending_Parms parms;

	if ( !pIsDefending )
		pIsDefending = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.IsDefending" );

	parms.B = B;
	this->ProcessEvent ( pIsDefending, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::ClearPathFor ( class AController* C )
{
	static UFunction* pClearPathFor = 0;
	ASquadAI_execClearPathFor_Parms parms;

	if ( !pClearPathFor )
		pClearPathFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.ClearPathFor" );

	parms.C = C;
	this->ProcessEvent ( pClearPathFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::PickRetreatDestination ( class ABot* B )
{
	static UFunction* pPickRetreatDestination = 0;
	ASquadAI_execPickRetreatDestination_Parms parms;

	if ( !pPickRetreatDestination )
		pPickRetreatDestination = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.PickRetreatDestination" );

	parms.B = B;
	this->ProcessEvent ( pPickRetreatDestination, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::BeDevious (  )
{
	static UFunction* pBeDevious = 0;
	ASquadAI_execBeDevious_Parms parms;

	if ( !pBeDevious )
		pBeDevious = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.BeDevious" );

	this->ProcessEvent ( pBeDevious, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ASquadAI::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	ASquadAI_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.DisplayDebug" );

	parms.Canvas = Canvas;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*class ABot* ASquadAI::PickBotToReassign (  )
{
	static UFunction* pPickBotToReassign = 0;
	ASquadAI_execPickBotToReassign_Parms parms;

	if ( !pPickBotToReassign )
		pPickBotToReassign = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.PickBotToReassign" );

	this->ProcessEvent ( pPickBotToReassign, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float ASquadAI::BotSuitability ( class ABot* B )
{
	static UFunction* pBotSuitability = 0;
	ASquadAI_execBotSuitability_Parms parms;

	if ( !pBotSuitability )
		pBotSuitability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.BotSuitability" );

	parms.B = B;
	this->ProcessEvent ( pBotSuitability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::ShouldDestroyTranslocator ( class ABot* B )
{
	static UFunction* pShouldDestroyTranslocator = 0;
	ASquadAI_execShouldDestroyTranslocator_Parms parms;

	if ( !pShouldDestroyTranslocator )
		pShouldDestroyTranslocator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.ShouldDestroyTranslocator" );

	parms.B = B;
	this->ProcessEvent ( pShouldDestroyTranslocator, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::CheckSquadObjectives ( class ABot* B )
{
	static UFunction* pCheckSquadObjectives = 0;
	ASquadAI_execCheckSquadObjectives_Parms parms;

	if ( !pCheckSquadObjectives )
		pCheckSquadObjectives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.CheckSquadObjectives" );

	parms.B = B;
	this->ProcessEvent ( pCheckSquadObjectives, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::OverrideFollowPlayer ( class ABot* B )
{
	static UFunction* pOverrideFollowPlayer = 0;
	ASquadAI_execOverrideFollowPlayer_Parms parms;

	if ( !pOverrideFollowPlayer )
		pOverrideFollowPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.OverrideFollowPlayer" );

	parms.B = B;
	this->ProcessEvent ( pOverrideFollowPlayer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::CheckSpecialVehicleObjectives ( class ABot* B )
{
	static UFunction* pCheckSpecialVehicleObjectives = 0;
	ASquadAI_execCheckSpecialVehicleObjectives_Parms parms;

	if ( !pCheckSpecialVehicleObjectives )
		pCheckSpecialVehicleObjectives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.CheckSpecialVehicleObjectives" );

	parms.B = B;
	this->ProcessEvent ( pCheckSpecialVehicleObjectives, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float ASquadAI::VehicleDesireability ( class AVehicle* V, class ABot* B )
{
	static UFunction* pVehicleDesireability = 0;
	ASquadAI_execVehicleDesireability_Parms parms;

	if ( !pVehicleDesireability )
		pVehicleDesireability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.VehicleDesireability" );

	parms.V = V;
	parms.B = B;
	this->ProcessEvent ( pVehicleDesireability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::CheckVehicle ( class ABot* B )
{
	static UFunction* pCheckVehicle = 0;
	ASquadAI_execCheckVehicle_Parms parms;

	if ( !pCheckVehicle )
		pCheckVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.CheckVehicle" );

	parms.B = B;
	this->ProcessEvent ( pCheckVehicle, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ASquadAI::BotEnteredVehicle ( class ABot* B )
{
	static UFunction* pBotEnteredVehicle = 0;
	ASquadAI_execBotEnteredVehicle_Parms parms;

	if ( !pBotEnteredVehicle )
		pBotEnteredVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.BotEnteredVehicle" );

	parms.B = B;
	this->ProcessEvent ( pBotEnteredVehicle, &parms, NULL );

}*/

/*bool ASquadAI::NeverBail ( class APawn* P )
{
	static UFunction* pNeverBail = 0;
	ASquadAI_execNeverBail_Parms parms;

	if ( !pNeverBail )
		pNeverBail = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.NeverBail" );

	parms.P = P;
	this->ProcessEvent ( pNeverBail, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float ASquadAI::MaxVehicleDist ( class APawn* P )
{
	static UFunction* pMaxVehicleDist = 0;
	ASquadAI_execMaxVehicleDist_Parms parms;

	if ( !pMaxVehicleDist )
		pMaxVehicleDist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.MaxVehicleDist" );

	parms.P = P;
	this->ProcessEvent ( pMaxVehicleDist, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::AssignSquadResponsibility ( class ABot* B )
{
	static UFunction* pAssignSquadResponsibility = 0;
	ASquadAI_execAssignSquadResponsibility_Parms parms;

	if ( !pAssignSquadResponsibility )
		pAssignSquadResponsibility = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.AssignSquadResponsibility" );

	parms.B = B;
	this->ProcessEvent ( pAssignSquadResponsibility, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ASquadAI::AddTransientCosts ( class ABot* B, float f )
{
	static UFunction* pAddTransientCosts = 0;
	ASquadAI_execAddTransientCosts_Parms parms;

	if ( !pAddTransientCosts )
		pAddTransientCosts = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.AddTransientCosts" );

	parms.B = B;
	parms.f = f;
	this->ProcessEvent ( pAddTransientCosts, &parms, NULL );

}*/

/*bool ASquadAI::AllowTaunt ( class ABot* B )
{
	static UFunction* pAllowTaunt = 0;
	ASquadAI_execAllowTaunt_Parms parms;

	if ( !pAllowTaunt )
		pAllowTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.AllowTaunt" );

	parms.B = B;
	this->ProcessEvent ( pAllowTaunt, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::TellBotToFollow ( class ABot* B, class AController* C )
{
	static UFunction* pTellBotToFollow = 0;
	ASquadAI_execTellBotToFollow_Parms parms;

	if ( !pTellBotToFollow )
		pTellBotToFollow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.TellBotToFollow" );

	parms.B = B;
	parms.C = C;
	this->ProcessEvent ( pTellBotToFollow, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ASquadAI::PickNewLeader (  )
{
	static UFunction* pPickNewLeader = 0;
	ASquadAI_execPickNewLeader_Parms parms;

	if ( !pPickNewLeader )
		pPickNewLeader = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.PickNewLeader" );

	this->ProcessEvent ( pPickNewLeader, &parms, NULL );

}*/

/*int ASquadAI::GetSize (  )
{
	static UFunction* pGetSize = 0;
	ASquadAI_execGetSize_Parms parms;

	if ( !pGetSize )
		pGetSize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.GetSize" );

	this->ProcessEvent ( pGetSize, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString ASquadAI::GetShortOrderStringFor ( class ATeamPlayerReplicationInfo* PRI )
{
	static UFunction* pGetShortOrderStringFor = 0;
	ASquadAI_execGetShortOrderStringFor_Parms parms;

	if ( !pGetShortOrderStringFor )
		pGetShortOrderStringFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.GetShortOrderStringFor" );

	parms.PRI = PRI;
	this->ProcessEvent ( pGetShortOrderStringFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString ASquadAI::GetOrderStringFor ( class ATeamPlayerReplicationInfo* PRI )
{
	static UFunction* pGetOrderStringFor = 0;
	ASquadAI_execGetOrderStringFor_Parms parms;

	if ( !pGetOrderStringFor )
		pGetOrderStringFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.GetOrderStringFor" );

	parms.PRI = PRI;
	this->ProcessEvent ( pGetOrderStringFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FName ASquadAI::GetOrders (  )
{
	static UFunction* pGetOrders = 0;
	ASquadAI_execGetOrders_Parms parms;

	if ( !pGetOrders )
		pGetOrders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.GetOrders" );

	this->ProcessEvent ( pGetOrders, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ASquadAI::Retask ( class ABot* B )
{
	static UFunction* pRetask = 0;
	ASquadAI_execRetask_Parms parms;

	if ( !pRetask )
		pRetask = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.Retask" );

	parms.B = B;
	this->ProcessEvent ( pRetask, &parms, NULL );

}*/

/*void ASquadAI::SetObjective ( class AGameObjective* o, bool bForceUpdate )
{
	static UFunction* pSetObjective = 0;
	ASquadAI_execSetObjective_Parms parms;

	if ( !pSetObjective )
		pSetObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.SetObjective" );

	parms.o = o;
	parms.bForceUpdate = bForceUpdate;
	this->ProcessEvent ( pSetObjective, &parms, NULL );

}*/

/*void ASquadAI::SetFreelanceScriptFor ( class ABot* B )
{
	static UFunction* pSetFreelanceScriptFor = 0;
	ASquadAI_execSetFreelanceScriptFor_Parms parms;

	if ( !pSetFreelanceScriptFor )
		pSetFreelanceScriptFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.SetFreelanceScriptFor" );

	parms.B = B;
	this->ProcessEvent ( pSetFreelanceScriptFor, &parms, NULL );

}*/

/*void ASquadAI::SetDefenseScriptFor ( class ABot* B )
{
	static UFunction* pSetDefenseScriptFor = 0;
	ASquadAI_execSetDefenseScriptFor_Parms parms;

	if ( !pSetDefenseScriptFor )
		pSetDefenseScriptFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.SetDefenseScriptFor" );

	parms.B = B;
	this->ProcessEvent ( pSetDefenseScriptFor, &parms, NULL );

}*/

/*void ASquadAI::SwitchBots ( class ABot* MyBot, class ABot* OtherBot )
{
	static UFunction* pSwitchBots = 0;
	ASquadAI_execSwitchBots_Parms parms;

	if ( !pSwitchBots )
		pSwitchBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.SwitchBots" );

	parms.MyBot = MyBot;
	parms.OtherBot = OtherBot;
	this->ProcessEvent ( pSwitchBots, &parms, NULL );

}*/

/*void ASquadAI::AddBot ( class ABot* B )
{
	static UFunction* pAddBot = 0;
	ASquadAI_execAddBot_Parms parms;

	if ( !pAddBot )
		pAddBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.AddBot" );

	parms.B = B;
	this->ProcessEvent ( pAddBot, &parms, NULL );

}*/

/*void ASquadAI::RemoveBot ( class ABot* B )
{
	static UFunction* pRemoveBot = 0;
	ASquadAI_execRemoveBot_Parms parms;

	if ( !pRemoveBot )
		pRemoveBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.RemoveBot" );

	parms.B = B;
	this->ProcessEvent ( pRemoveBot, &parms, NULL );

}*/

/*void ASquadAI::RemovePlayer ( class APlayerController* P )
{
	static UFunction* pRemovePlayer = 0;
	ASquadAI_execRemovePlayer_Parms parms;

	if ( !pRemovePlayer )
		pRemovePlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.RemovePlayer" );

	parms.P = P;
	this->ProcessEvent ( pRemovePlayer, &parms, NULL );

}*/

/*void ASquadAI::SetLeader ( class AController* C )
{
	static UFunction* pSetLeader = 0;
	ASquadAI_execSetLeader_Parms parms;

	if ( !pSetLeader )
		pSetLeader = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.SetLeader" );

	parms.C = C;
	this->ProcessEvent ( pSetLeader, &parms, NULL );

}*/

/*void ASquadAI::SetFinalStretch ( bool bValue )
{
	static UFunction* pSetFinalStretch = 0;
	ASquadAI_execSetFinalStretch_Parms parms;

	if ( !pSetFinalStretch )
		pSetFinalStretch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.SetFinalStretch" );

	parms.bValue = bValue;
	this->ProcessEvent ( pSetFinalStretch, &parms, NULL );

}*/

/*bool ASquadAI::FindPathToObjective ( class ABot* B, class AActor* o )
{
	static UFunction* pFindPathToObjective = 0;
	ASquadAI_execFindPathToObjective_Parms parms;

	if ( !pFindPathToObjective )
		pFindPathToObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.FindPathToObjective" );

	parms.B = B;
	parms.o = o;
	this->ProcessEvent ( pFindPathToObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::TryToIntercept ( class ABot* B, class APawn* P, class AActor* RouteGoal )
{
	static UFunction* pTryToIntercept = 0;
	ASquadAI_execTryToIntercept_Parms parms;

	if ( !pTryToIntercept )
		pTryToIntercept = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.TryToIntercept" );

	parms.B = B;
	parms.P = P;
	parms.RouteGoal = RouteGoal;
	this->ProcessEvent ( pTryToIntercept, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ASquadAI::SetAlternatePath ( bool bResetSquad )
{
	static UFunction* pSetAlternatePath = 0;
	ASquadAI_execSetAlternatePath_Parms parms;

	if ( !pSetAlternatePath )
		pSetAlternatePath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.SetAlternatePath" );

	parms.bResetSquad = bResetSquad;
	this->ProcessEvent ( pSetAlternatePath, &parms, NULL );

}*/

/*void ASquadAI::Initialize ( class AUnrealTeamInfo* t, class AGameObjective* o, class AController* C )
{
	static UFunction* pInitialize = 0;
	ASquadAI_execInitialize_Parms parms;

	if ( !pInitialize )
		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.Initialize" );

	parms.t = t;
	parms.o = o;
	parms.C = C;
	this->ProcessEvent ( pInitialize, &parms, NULL );

}*/

/*void ASquadAI::MergeWith ( class ASquadAI* S )
{
	static UFunction* pMergeWith = 0;
	ASquadAI_execMergeWith_Parms parms;

	if ( !pMergeWith )
		pMergeWith = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.MergeWith" );

	parms.S = S;
	this->ProcessEvent ( pMergeWith, &parms, NULL );

}*/

/*bool ASquadAI::CloseToLeader ( class APawn* P )
{
	static UFunction* pCloseToLeader = 0;
	ASquadAI_execCloseToLeader_Parms parms;

	if ( !pCloseToLeader )
		pCloseToLeader = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.CloseToLeader" );

	parms.P = P;
	this->ProcessEvent ( pCloseToLeader, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::NearFormationCenter ( class APawn* P )
{
	static UFunction* pNearFormationCenter = 0;
	ASquadAI_execNearFormationCenter_Parms parms;

	if ( !pNearFormationCenter )
		pNearFormationCenter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.NearFormationCenter" );

	parms.P = P;
	this->ProcessEvent ( pNearFormationCenter, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::WanderNearLeader ( class ABot* B )
{
	static UFunction* pWanderNearLeader = 0;
	ASquadAI_execWanderNearLeader_Parms parms;

	if ( !pWanderNearLeader )
		pWanderNearLeader = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.WanderNearLeader" );

	parms.B = B;
	this->ProcessEvent ( pWanderNearLeader, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::WaitAtThisPosition ( class APawn* P )
{
	static UFunction* pWaitAtThisPosition = 0;
	ASquadAI_execWaitAtThisPosition_Parms parms;

	if ( !pWaitAtThisPosition )
		pWaitAtThisPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.WaitAtThisPosition" );

	parms.P = P;
	this->ProcessEvent ( pWaitAtThisPosition, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::ShouldDeferTo ( class AController* C )
{
	static UFunction* pShouldDeferTo = 0;
	ASquadAI_execShouldDeferTo_Parms parms;

	if ( !pShouldDeferTo )
		pShouldDeferTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.ShouldDeferTo" );

	parms.C = C;
	this->ProcessEvent ( pShouldDeferTo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float ASquadAI::AssessThreat ( class ABot* B, class APawn* NewThreat, bool bThreatVisible )
{
	static UFunction* pAssessThreat = 0;
	ASquadAI_execAssessThreat_Parms parms;

	if ( !pAssessThreat )
		pAssessThreat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.AssessThreat" );

	parms.B = B;
	parms.NewThreat = NewThreat;
	parms.bThreatVisible = bThreatVisible;
	this->ProcessEvent ( pAssessThreat, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::UnderFire ( class APawn* NewThreat, class ABot* Ignored )
{
	static UFunction* pUnderFire = 0;
	ASquadAI_execUnderFire_Parms parms;

	if ( !pUnderFire )
		pUnderFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.UnderFire" );

	parms.NewThreat = NewThreat;
	parms.Ignored = Ignored;
	this->ProcessEvent ( pUnderFire, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float ASquadAI::ModifyThreat ( float Current, class APawn* NewThreat, bool bThreatVisible, class ABot* B )
{
	static UFunction* pModifyThreat = 0;
	ASquadAI_execModifyThreat_Parms parms;

	if ( !pModifyThreat )
		pModifyThreat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.ModifyThreat" );

	parms.Current = Current;
	parms.NewThreat = NewThreat;
	parms.bThreatVisible = bThreatVisible;
	parms.B = B;
	this->ProcessEvent ( pModifyThreat, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::FindNewEnemyFor ( class ABot* B, bool bSeeEnemy )
{
	static UFunction* pFindNewEnemyFor = 0;
	ASquadAI_execFindNewEnemyFor_Parms parms;

	if ( !pFindNewEnemyFor )
		pFindNewEnemyFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.FindNewEnemyFor" );

	parms.B = B;
	parms.bSeeEnemy = bSeeEnemy;
	this->ProcessEvent ( pFindNewEnemyFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ASquadAI::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
{
	static UFunction* pNotifyKilled = 0;
	ASquadAI_execNotifyKilled_Parms parms;

	if ( !pNotifyKilled )
		pNotifyKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.NotifyKilled" );

	parms.Killer = Killer;
	parms.Killed = Killed;
	parms.KilledPawn = KilledPawn;
	this->ProcessEvent ( pNotifyKilled, &parms, NULL );

}*/

/*void ASquadAI::RemoveEnemy ( class APawn* E )
{
	static UFunction* pRemoveEnemy = 0;
	ASquadAI_execRemoveEnemy_Parms parms;

	if ( !pRemoveEnemy )
		pRemoveEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.RemoveEnemy" );

	parms.E = E;
	this->ProcessEvent ( pRemoveEnemy, &parms, NULL );

}*/

/*bool ASquadAI::IsOnSquad ( class AController* C )
{
	static UFunction* pIsOnSquad = 0;
	ASquadAI_execIsOnSquad_Parms parms;

	if ( !pIsOnSquad )
		pIsOnSquad = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.IsOnSquad" );

	parms.C = C;
	this->ProcessEvent ( pIsOnSquad, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char ASquadAI::PriorityObjective ( class ABot* B )
{
	static UFunction* pPriorityObjective = 0;
	ASquadAI_execPriorityObjective_Parms parms;

	if ( !pPriorityObjective )
		pPriorityObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.PriorityObjective" );

	parms.B = B;
	this->ProcessEvent ( pPriorityObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::SetEnemy ( class ABot* B, class APawn* NewEnemy )
{
	static UFunction* pSetEnemy = 0;
	ASquadAI_execSetEnemy_Parms parms;

	if ( !pSetEnemy )
		pSetEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.SetEnemy" );

	parms.B = B;
	parms.NewEnemy = NewEnemy;
	this->ProcessEvent ( pSetEnemy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::ValidEnemy ( class APawn* NewEnemy )
{
	static UFunction* pValidEnemy = 0;
	ASquadAI_execValidEnemy_Parms parms;

	if ( !pValidEnemy )
		pValidEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.ValidEnemy" );

	parms.NewEnemy = NewEnemy;
	this->ProcessEvent ( pValidEnemy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::AddEnemy ( class APawn* NewEnemy )
{
	static UFunction* pAddEnemy = 0;
	ASquadAI_execAddEnemy_Parms parms;

	if ( !pAddEnemy )
		pAddEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.AddEnemy" );

	parms.NewEnemy = NewEnemy;
	this->ProcessEvent ( pAddEnemy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::MustKeepEnemy ( class APawn* E )
{
	static UFunction* pMustKeepEnemy = 0;
	ASquadAI_execMustKeepEnemy_Parms parms;

	if ( !pMustKeepEnemy )
		pMustKeepEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.MustKeepEnemy" );

	parms.E = E;
	this->ProcessEvent ( pMustKeepEnemy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::LostEnemy ( class ABot* B )
{
	static UFunction* pLostEnemy = 0;
	ASquadAI_execLostEnemy_Parms parms;

	if ( !pLostEnemy )
		pLostEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.LostEnemy" );

	parms.B = B;
	this->ProcessEvent ( pLostEnemy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::MergeEnemiesFrom ( class ASquadAI* S )
{
	static UFunction* pMergeEnemiesFrom = 0;
	ASquadAI_execMergeEnemiesFrom_Parms parms;

	if ( !pMergeEnemiesFrom )
		pMergeEnemiesFrom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.MergeEnemiesFrom" );

	parms.S = S;
	this->ProcessEvent ( pMergeEnemiesFrom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AActor* ASquadAI::FormationCenter (  )
{
	static UFunction* pFormationCenter = 0;
	ASquadAI_execFormationCenter_Parms parms;

	if ( !pFormationCenter )
		pFormationCenter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.FormationCenter" );

	this->ProcessEvent ( pFormationCenter, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FRotator ASquadAI::GetFacingRotation (  )
{
	static UFunction* pGetFacingRotation = 0;
	ASquadAI_execGetFacingRotation_Parms parms;

	if ( !pGetFacingRotation )
		pGetFacingRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.GetFacingRotation" );

	this->ProcessEvent ( pGetFacingRotation, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AVehicle* ASquadAI::GetLinkVehicle ( class ABot* B )
{
	static UFunction* pGetLinkVehicle = 0;
	ASquadAI_execGetLinkVehicle_Parms parms;

	if ( !pGetLinkVehicle )
		pGetLinkVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.GetLinkVehicle" );

	parms.B = B;
	this->ProcessEvent ( pGetLinkVehicle, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AVehicle* ASquadAI::GetKeyVehicle ( class ABot* B )
{
	static UFunction* pGetKeyVehicle = 0;
	ASquadAI_execGetKeyVehicle_Parms parms;

	if ( !pGetKeyVehicle )
		pGetKeyVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.GetKeyVehicle" );

	parms.B = B;
	this->ProcessEvent ( pGetKeyVehicle, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AActor* ASquadAI::SetFacingActor ( class ABot* B )
{
	static UFunction* pSetFacingActor = 0;
	ASquadAI_execSetFacingActor_Parms parms;

	if ( !pSetFacingActor )
		pSetFacingActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.SetFacingActor" );

	parms.B = B;
	this->ProcessEvent ( pSetFacingActor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::AllowImpactJumpBy ( class ABot* B )
{
	static UFunction* pAllowImpactJumpBy = 0;
	ASquadAI_execAllowImpactJumpBy_Parms parms;

	if ( !pAllowImpactJumpBy )
		pAllowImpactJumpBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.AllowImpactJumpBy" );

	parms.B = B;
	this->ProcessEvent ( pAllowImpactJumpBy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::AllowTranslocationBy ( class ABot* B )
{
	static UFunction* pAllowTranslocationBy = 0;
	ASquadAI_execAllowTranslocationBy_Parms parms;

	if ( !pAllowTranslocationBy )
		pAllowTranslocationBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.AllowTranslocationBy" );

	parms.B = B;
	this->ProcessEvent ( pAllowTranslocationBy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ASquadAI::Destroyed (  )
{
	static UFunction* pDestroyed = 0;
	ASquadAI_execDestroyed_Parms parms;

	if ( !pDestroyed )
		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.Destroyed" );

	this->ProcessEvent ( pDestroyed, &parms, NULL );

}*/

/*class ARestingFormation* ASquadAI::GetRestingFormation (  )
{
	static UFunction* pGetRestingFormation = 0;
	ASquadAI_execGetRestingFormation_Parms parms;

	if ( !pGetRestingFormation )
		pGetRestingFormation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.GetRestingFormation" );

	this->ProcessEvent ( pGetRestingFormation, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::AllowDetourTo ( class ABot* B, class ANavigationPoint* N )
{
	static UFunction* pAllowDetourTo = 0;
	ASquadAI_execAllowDetourTo_Parms parms;

	if ( !pAllowDetourTo )
		pAllowDetourTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.AllowDetourTo" );

	parms.B = B;
	parms.N = N;
	this->ProcessEvent ( pAllowDetourTo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ASquadAI::ShouldSuppressEnemy ( class ABot* B )
{
	static UFunction* pShouldSuppressEnemy = 0;
	ASquadAI_execShouldSuppressEnemy_Parms parms;

	if ( !pShouldSuppressEnemy )
		pShouldSuppressEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.ShouldSuppressEnemy" );

	parms.B = B;
	this->ProcessEvent ( pShouldSuppressEnemy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ASquadAI::CriticalObjectiveWarning ( class APawn* NewEnemy )
{
	static UFunction* pCriticalObjectiveWarning = 0;
	ASquadAI_execCriticalObjectiveWarning_Parms parms;

	if ( !pCriticalObjectiveWarning )
		pCriticalObjectiveWarning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.CriticalObjectiveWarning" );

	parms.NewEnemy = NewEnemy;
	this->ProcessEvent ( pCriticalObjectiveWarning, &parms, NULL );

}*/

/*void ASquadAI::AssignCombo ( class ABot* B )
{
	static UFunction* pAssignCombo = 0;
	ASquadAI_execAssignCombo_Parms parms;

	if ( !pAssignCombo )
		pAssignCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.AssignCombo" );

	parms.B = B;
	this->ProcessEvent ( pAssignCombo, &parms, NULL );

}*/

/*void ASquadAI::Reset (  )
{
	static UFunction* pReset = 0;
	ASquadAI_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SquadAI.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*bool ADMSquad::AssignSquadResponsibility ( class ABot* B )
{
	static UFunction* pAssignSquadResponsibility = 0;
	ADMSquad_execAssignSquadResponsibility_Parms parms;

	if ( !pAssignSquadResponsibility )
		pAssignSquadResponsibility = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.AssignSquadResponsibility" );

	parms.B = B;
	this->ProcessEvent ( pAssignSquadResponsibility, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADMSquad::FriendlyToward ( class APawn* Other )
{
	static UFunction* pFriendlyToward = 0;
	ADMSquad_execFriendlyToward_Parms parms;

	if ( !pFriendlyToward )
		pFriendlyToward = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.FriendlyToward" );

	parms.Other = Other;
	this->ProcessEvent ( pFriendlyToward, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADMSquad::SetEnemy ( class ABot* B, class APawn* NewEnemy )
{
	static UFunction* pSetEnemy = 0;
	ADMSquad_execSetEnemy_Parms parms;

	if ( !pSetEnemy )
		pSetEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.SetEnemy" );

	parms.B = B;
	parms.NewEnemy = NewEnemy;
	this->ProcessEvent ( pSetEnemy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FName ADMSquad::GetOrders (  )
{
	static UFunction* pGetOrders = 0;
	ADMSquad_execGetOrders_Parms parms;

	if ( !pGetOrders )
		pGetOrders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.GetOrders" );

	this->ProcessEvent ( pGetOrders, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADMSquad::BeDevious (  )
{
	static UFunction* pBeDevious = 0;
	ADMSquad_execBeDevious_Parms parms;

	if ( !pBeDevious )
		pBeDevious = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.BeDevious" );

	this->ProcessEvent ( pBeDevious, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADMSquad::NearFormationCenter ( class APawn* P )
{
	static UFunction* pNearFormationCenter = 0;
	ADMSquad_execNearFormationCenter_Parms parms;

	if ( !pNearFormationCenter )
		pNearFormationCenter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.NearFormationCenter" );

	parms.P = P;
	this->ProcessEvent ( pNearFormationCenter, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADMSquad::WaitAtThisPosition ( class APawn* P )
{
	static UFunction* pWaitAtThisPosition = 0;
	ADMSquad_execWaitAtThisPosition_Parms parms;

	if ( !pWaitAtThisPosition )
		pWaitAtThisPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.WaitAtThisPosition" );

	parms.P = P;
	this->ProcessEvent ( pWaitAtThisPosition, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADMSquad::CheckSquadObjectives ( class ABot* B )
{
	static UFunction* pCheckSquadObjectives = 0;
	ADMSquad_execCheckSquadObjectives_Parms parms;

	if ( !pCheckSquadObjectives )
		pCheckSquadObjectives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.CheckSquadObjectives" );

	parms.B = B;
	this->ProcessEvent ( pCheckSquadObjectives, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADMSquad::ShouldDeferTo ( class AController* C )
{
	static UFunction* pShouldDeferTo = 0;
	ADMSquad_execShouldDeferTo_Parms parms;

	if ( !pShouldDeferTo )
		pShouldDeferTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.ShouldDeferTo" );

	parms.C = C;
	this->ProcessEvent ( pShouldDeferTo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADMSquad::RemoveBot ( class ABot* B )
{
	static UFunction* pRemoveBot = 0;
	ADMSquad_execRemoveBot_Parms parms;

	if ( !pRemoveBot )
		pRemoveBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.RemoveBot" );

	parms.B = B;
	this->ProcessEvent ( pRemoveBot, &parms, NULL );

}*/

/*void ADMSquad::AddBot ( class ABot* B )
{
	static UFunction* pAddBot = 0;
	ADMSquad_execAddBot_Parms parms;

	if ( !pAddBot )
		pAddBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.AddBot" );

	parms.B = B;
	this->ProcessEvent ( pAddBot, &parms, NULL );

}*/

/*bool ADMSquad::IsDefending ( class ABot* B )
{
	static UFunction* pIsDefending = 0;
	ADMSquad_execIsDefending_Parms parms;

	if ( !pIsDefending )
		pIsDefending = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.IsDefending" );

	parms.B = B;
	this->ProcessEvent ( pIsDefending, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADMSquad::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	ADMSquad_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.DisplayDebug" );

	parms.Canvas = Canvas;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*void ADMSquad::AssignCombo ( class ABot* B )
{
	static UFunction* pAssignCombo = 0;
	ADMSquad_execAssignCombo_Parms parms;

	if ( !pAssignCombo )
		pAssignCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMSquad.AssignCombo" );

	parms.B = B;
	this->ProcessEvent ( pAssignCombo, &parms, NULL );

}*/

/*void AUnrealPlayer::wViewAttacked ( float DeltaTime )
{
	static UFunction* pwViewAttacked = 0;
	AUnrealPlayer_execwViewAttacked_Parms parms;

	if ( !pwViewAttacked )
		pwViewAttacked = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.wViewAttacked" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pwViewAttacked, &parms, NULL );

}*/

/*void AUnrealPlayer::wAttackedView ( int iPitch, int iYaw, int iRoll )
{
	static UFunction* pwAttackedView = 0;
	AUnrealPlayer_execwAttackedView_Parms parms;

	if ( !pwAttackedView )
		pwAttackedView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.wAttackedView" );

	parms.iPitch = iPitch;
	parms.iYaw = iYaw;
	parms.iRoll = iRoll;
	this->ProcessEvent ( pwAttackedView, &parms, NULL );

}*/

/*void AUnrealPlayer::AttackedView ( int iWeaponID, float fHitGunKick, struct FVector vAttacked )
{
	static UFunction* pAttackedView = 0;
	AUnrealPlayer_execAttackedView_Parms parms;

	if ( !pAttackedView )
		pAttackedView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.AttackedView" );

	parms.iWeaponID = iWeaponID;
	parms.fHitGunKick = fHitGunKick;
	parms.vAttacked = vAttacked;
	this->ProcessEvent ( pAttackedView, &parms, NULL );

}*/

/*void AUnrealPlayer::RotateByAttacked ( struct FVector* CameraLocation, struct FRotator* CameraRotation )
{
	static UFunction* pRotateByAttacked = 0;
	AUnrealPlayer_execRotateByAttacked_Parms parms;

	if ( !pRotateByAttacked )
		pRotateByAttacked = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.RotateByAttacked" );

	parms.CameraLocation = *CameraLocation;
	parms.CameraRotation = *CameraRotation;
	this->ProcessEvent ( pRotateByAttacked, &parms, NULL );

	*CameraLocation = parms.CameraLocation;
	*CameraRotation = parms.CameraRotation;
}*/

/*void AUnrealPlayer::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	AUnrealPlayer_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.DisplayDebug" );

	parms.Canvas = Canvas;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*void AUnrealPlayer::ClientReceiveBotDebugString ( struct FString DebugString )
{
	static UFunction* pClientReceiveBotDebugString = 0;
	AUnrealPlayer_execClientReceiveBotDebugString_Parms parms;

	if ( !pClientReceiveBotDebugString )
		pClientReceiveBotDebugString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ClientReceiveBotDebugString" );

	parms.DebugString = DebugString;
	this->ProcessEvent ( pClientReceiveBotDebugString, &parms, NULL );

}*/

/*void AUnrealPlayer::ServerSendBotDebugString (  )
{
	static UFunction* pServerSendBotDebugString = 0;
	AUnrealPlayer_execServerSendBotDebugString_Parms parms;

	if ( !pServerSendBotDebugString )
		pServerSendBotDebugString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ServerSendBotDebugString" );

	this->ProcessEvent ( pServerSendBotDebugString, &parms, NULL );

}*/

/*void AUnrealPlayer::execNetDebugBot (  )
{
	static UFunction* pNetDebugBot = 0;
	AUnrealPlayer_execNetDebugBot_Parms parms;

	if ( !pNetDebugBot )
		pNetDebugBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.NetDebugBot" );

	this->ProcessEvent ( pNetDebugBot, &parms, NULL );

}*/

/*void AUnrealPlayer::ServerChatDebug (  )
{
	static UFunction* pServerChatDebug = 0;
	AUnrealPlayer_execServerChatDebug_Parms parms;

	if ( !pServerChatDebug )
		pServerChatDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ServerChatDebug" );

	this->ProcessEvent ( pServerChatDebug, &parms, NULL );

}*/

/*void AUnrealPlayer::ClientGameEnded (  )
{
	static UFunction* pClientGameEnded = 0;
	AUnrealPlayer_execClientGameEnded_Parms parms;

	if ( !pClientGameEnded )
		pClientGameEnded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ClientGameEnded" );

	this->ProcessEvent ( pClientGameEnded, &parms, NULL );

}*/

/*void AUnrealPlayer::AutoJoinVoiceChat (  )
{
	static UFunction* pAutoJoinVoiceChat = 0;
	AUnrealPlayer_execAutoJoinVoiceChat_Parms parms;

	if ( !pAutoJoinVoiceChat )
		pAutoJoinVoiceChat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.AutoJoinVoiceChat" );

	this->ProcessEvent ( pAutoJoinVoiceChat, &parms, NULL );

}*/

/*void AUnrealPlayer::eventPostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AUnrealPlayer_eventPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*bool AUnrealPlayer::NeedNetNotify (  )
{
	static UFunction* pNeedNetNotify = 0;
	AUnrealPlayer_execNeedNetNotify_Parms parms;

	if ( !pNeedNetNotify )
		pNeedNetNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.NeedNetNotify" );

	this->ProcessEvent ( pNeedNetNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealPlayer::SetCustomRewardAnnouncerClass ( struct FString NewAnnouncerClass )
{
	static UFunction* pSetCustomRewardAnnouncerClass = 0;
	AUnrealPlayer_execSetCustomRewardAnnouncerClass_Parms parms;

	if ( !pSetCustomRewardAnnouncerClass )
		pSetCustomRewardAnnouncerClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.SetCustomRewardAnnouncerClass" );

	parms.NewAnnouncerClass = NewAnnouncerClass;
	this->ProcessEvent ( pSetCustomRewardAnnouncerClass, &parms, NULL );

}*/

/*struct FString AUnrealPlayer::GetCustomRewardAnnouncerClass (  )
{
	static UFunction* pGetCustomRewardAnnouncerClass = 0;
	AUnrealPlayer_execGetCustomRewardAnnouncerClass_Parms parms;

	if ( !pGetCustomRewardAnnouncerClass )
		pGetCustomRewardAnnouncerClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.GetCustomRewardAnnouncerClass" );

	this->ProcessEvent ( pGetCustomRewardAnnouncerClass, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealPlayer::SetCustomStatusAnnouncerClass ( struct FString NewAnnouncerClass )
{
	static UFunction* pSetCustomStatusAnnouncerClass = 0;
	AUnrealPlayer_execSetCustomStatusAnnouncerClass_Parms parms;

	if ( !pSetCustomStatusAnnouncerClass )
		pSetCustomStatusAnnouncerClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.SetCustomStatusAnnouncerClass" );

	parms.NewAnnouncerClass = NewAnnouncerClass;
	this->ProcessEvent ( pSetCustomStatusAnnouncerClass, &parms, NULL );

}*/

/*struct FString AUnrealPlayer::GetCustomStatusAnnouncerClass (  )
{
	static UFunction* pGetCustomStatusAnnouncerClass = 0;
	AUnrealPlayer_execGetCustomStatusAnnouncerClass_Parms parms;

	if ( !pGetCustomStatusAnnouncerClass )
		pGetCustomStatusAnnouncerClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.GetCustomStatusAnnouncerClass" );

	this->ProcessEvent ( pGetCustomStatusAnnouncerClass, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealPlayer::ShowMidGameMenu ( bool bPause )
{
	static UFunction* pShowMidGameMenu = 0;
	AUnrealPlayer_execShowMidGameMenu_Parms parms;

	if ( !pShowMidGameMenu )
		pShowMidGameMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ShowMidGameMenu" );

	parms.bPause = bPause;
	this->ProcessEvent ( pShowMidGameMenu, &parms, NULL );

}*/

/*void AUnrealPlayer::ServerDropFlag (  )
{
	static UFunction* pServerDropFlag = 0;
	AUnrealPlayer_execServerDropFlag_Parms parms;

	if ( !pServerDropFlag )
		pServerDropFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ServerDropFlag" );

	this->ProcessEvent ( pServerDropFlag, &parms, NULL );

}*/

/*void AUnrealPlayer::execDropFlag (  )
{
	static UFunction* pDropFlag = 0;
	AUnrealPlayer_execDropFlag_Parms parms;

	if ( !pDropFlag )
		pDropFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.DropFlag" );

	this->ProcessEvent ( pDropFlag, &parms, NULL );

}*/

/*void AUnrealPlayer::PlayWinMessage ( bool bWinner )
{
	static UFunction* pPlayWinMessage = 0;
	AUnrealPlayer_execPlayWinMessage_Parms parms;

	if ( !pPlayWinMessage )
		pPlayWinMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.PlayWinMessage" );

	parms.bWinner = bWinner;
	this->ProcessEvent ( pPlayWinMessage, &parms, NULL );

}*/

/*void AUnrealPlayer::ClientPlayTakeHit ( struct FVector HitLoc, unsigned char Damage, class UClass* DamageType, int CollisionPart )
{
	static UFunction* pClientPlayTakeHit = 0;
	AUnrealPlayer_execClientPlayTakeHit_Parms parms;

	if ( !pClientPlayTakeHit )
		pClientPlayTakeHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ClientPlayTakeHit" );

	parms.HitLoc = HitLoc;
	parms.Damage = Damage;
	parms.DamageType = DamageType;
	parms.CollisionPart = CollisionPart;
	this->ProcessEvent ( pClientPlayTakeHit, &parms, NULL );

}*/

/*void AUnrealPlayer::HitSound (  )
{
	static UFunction* pHitSound = 0;
	AUnrealPlayer_execHitSound_Parms parms;

	if ( !pHitSound )
		pHitSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.HitSound" );

	this->ProcessEvent ( pHitSound, &parms, NULL );

}*/

/*void AUnrealPlayer::NewClientPlayTakeHit ( struct FVector AttackLoc, struct FVector HitLoc, unsigned char Damage, class UClass* DamageType, int iWeaponID, float fHitGunKick, int CollisionPart )
{
	static UFunction* pNewClientPlayTakeHit = 0;
	AUnrealPlayer_execNewClientPlayTakeHit_Parms parms;

	if ( !pNewClientPlayTakeHit )
		pNewClientPlayTakeHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.NewClientPlayTakeHit" );

	parms.AttackLoc = AttackLoc;
	parms.HitLoc = HitLoc;
	parms.Damage = Damage;
	parms.DamageType = DamageType;
	parms.iWeaponID = iWeaponID;
	parms.fHitGunKick = fHitGunKick;
	parms.CollisionPart = CollisionPart;
	this->ProcessEvent ( pNewClientPlayTakeHit, &parms, NULL );

}*/

/*void AUnrealPlayer::NotifyTakeHit ( class APawn* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, int CollisionPart )
{
	static UFunction* pNotifyTakeHit = 0;
	AUnrealPlayer_execNotifyTakeHit_Parms parms;

	if ( !pNotifyTakeHit )
		pNotifyTakeHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.NotifyTakeHit" );

	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.Damage = Damage;
	parms.DamageType = DamageType;
	parms.Momentum = Momentum;
	parms.CollisionPart = CollisionPart;
	this->ProcessEvent ( pNotifyTakeHit, &parms, NULL );

}*/

/*void AUnrealPlayer::ShowLoginMenu (  )
{
	static UFunction* pShowLoginMenu = 0;
	AUnrealPlayer_execShowLoginMenu_Parms parms;

	if ( !pShowLoginMenu )
		pShowLoginMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ShowLoginMenu" );

	this->ProcessEvent ( pShowLoginMenu, &parms, NULL );

}*/

/*void AUnrealPlayer::ClientReceiveLoginMenu ( struct FString MenuClass, bool bForce )
{
	static UFunction* pClientReceiveLoginMenu = 0;
	AUnrealPlayer_execClientReceiveLoginMenu_Parms parms;

	if ( !pClientReceiveLoginMenu )
		pClientReceiveLoginMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ClientReceiveLoginMenu" );

	parms.MenuClass = MenuClass;
	parms.bForce = bForce;
	this->ProcessEvent ( pClientReceiveLoginMenu, &parms, NULL );

}*/

/*void AUnrealPlayer::ServerSetReadyToStart (  )
{
	static UFunction* pServerSetReadyToStart = 0;
	AUnrealPlayer_execServerSetReadyToStart_Parms parms;

	if ( !pServerSetReadyToStart )
		pServerSetReadyToStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ServerSetReadyToStart" );

	this->ProcessEvent ( pServerSetReadyToStart, &parms, NULL );

}*/

/*void AUnrealPlayer::InitInputSystem (  )
{
	static UFunction* pInitInputSystem = 0;
	AUnrealPlayer_execInitInputSystem_Parms parms;

	if ( !pInitInputSystem )
		pInitInputSystem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.InitInputSystem" );

	this->ProcessEvent ( pInitInputSystem, &parms, NULL );

}*/

/*void AUnrealPlayer::eventPostNetReceive (  )
{
	static UFunction* pPostNetReceive = 0;
	AUnrealPlayer_eventPostNetReceive_Parms parms;

	if ( !pPostNetReceive )
		pPostNetReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.PostNetReceive" );

	this->ProcessEvent ( pPostNetReceive, &parms, NULL );

}*/

/*void AUnrealPlayer::PlayStartupMessage ( unsigned char StartupStage )
{
	static UFunction* pPlayStartupMessage = 0;
	AUnrealPlayer_execPlayStartupMessage_Parms parms;

	if ( !pPlayStartupMessage )
		pPlayStartupMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.PlayStartupMessage" );

	parms.StartupStage = StartupStage;
	this->ProcessEvent ( pPlayStartupMessage, &parms, NULL );

}*/

/*void AUnrealPlayer::eventKickWarning (  )
{
	static UFunction* pKickWarning = 0;
	AUnrealPlayer_eventKickWarning_Parms parms;

	if ( !pKickWarning )
		pKickWarning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.KickWarning" );

	this->ProcessEvent ( pKickWarning, &parms, NULL );

}*/

/*void AUnrealPlayer::PlayAnnouncement ( class USound* ASound, unsigned char AnnouncementLevel, bool bForce )
{
	static UFunction* pPlayAnnouncement = 0;
	AUnrealPlayer_execPlayAnnouncement_Parms parms;

	if ( !pPlayAnnouncement )
		pPlayAnnouncement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.PlayAnnouncement" );

	parms.ASound = ASound;
	parms.AnnouncementLevel = AnnouncementLevel;
	parms.bForce = bForce;
	this->ProcessEvent ( pPlayAnnouncement, &parms, NULL );

}*/

/*void AUnrealPlayer::PlayRewardAnnouncement ( struct FName AName, unsigned char AnnouncementLevel, bool bForce, unsigned char Slot )
{
	static UFunction* pPlayRewardAnnouncement = 0;
	AUnrealPlayer_execPlayRewardAnnouncement_Parms parms;

	if ( !pPlayRewardAnnouncement )
		pPlayRewardAnnouncement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.PlayRewardAnnouncement" );

	parms.AName = AName;
	parms.AnnouncementLevel = AnnouncementLevel;
	parms.bForce = bForce;
	parms.Slot = Slot;
	this->ProcessEvent ( pPlayRewardAnnouncement, &parms, NULL );

}*/

/*void AUnrealPlayer::PlayStatusAnnouncement ( struct FString AName, unsigned char AnnouncementLevel, bool bForce )
{
	static UFunction* pPlayStatusAnnouncement = 0;
	AUnrealPlayer_execPlayStatusAnnouncement_Parms parms;

	if ( !pPlayStatusAnnouncement )
		pPlayStatusAnnouncement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.PlayStatusAnnouncement" );

	parms.AName = AName;
	parms.AnnouncementLevel = AnnouncementLevel;
	parms.bForce = bForce;
	this->ProcessEvent ( pPlayStatusAnnouncement, &parms, NULL );

}*/

/*void AUnrealPlayer::ServerPlayVehicleHorn ( int HornIndex )
{
	static UFunction* pServerPlayVehicleHorn = 0;
	AUnrealPlayer_execServerPlayVehicleHorn_Parms parms;

	if ( !pServerPlayVehicleHorn )
		pServerPlayVehicleHorn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ServerPlayVehicleHorn" );

	parms.HornIndex = HornIndex;
	this->ProcessEvent ( pServerPlayVehicleHorn, &parms, NULL );

}*/

/*void AUnrealPlayer::execPlayVehicleHorn ( int HornIndex )
{
	static UFunction* pPlayVehicleHorn = 0;
	AUnrealPlayer_execPlayVehicleHorn_Parms parms;

	if ( !pPlayVehicleHorn )
		pPlayVehicleHorn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.PlayVehicleHorn" );

	parms.HornIndex = HornIndex;
	this->ProcessEvent ( pPlayVehicleHorn, &parms, NULL );

}*/

/*void AUnrealPlayer::ServerTaunt ( struct FName AnimName )
{
	static UFunction* pServerTaunt = 0;
	AUnrealPlayer_execServerTaunt_Parms parms;

	if ( !pServerTaunt )
		pServerTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ServerTaunt" );

	parms.AnimName = AnimName;
	this->ProcessEvent ( pServerTaunt, &parms, NULL );

}*/

/*void AUnrealPlayer::execTAUNT ( struct FName Sequence )
{
	static UFunction* pTAUNT = 0;
	AUnrealPlayer_execTAUNT_Parms parms;

	if ( !pTAUNT )
		pTAUNT = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.TAUNT" );

	parms.Sequence = Sequence;
	this->ProcessEvent ( pTAUNT, &parms, NULL );

}*/

/*void AUnrealPlayer::execRandomTaunt (  )
{
	static UFunction* pRandomTaunt = 0;
	AUnrealPlayer_execRandomTaunt_Parms parms;

	if ( !pRandomTaunt )
		pRandomTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.RandomTaunt" );

	this->ProcessEvent ( pRandomTaunt, &parms, NULL );

}*/

/*unsigned char AUnrealPlayer::GetMessageIndex ( struct FName PhraseName )
{
	static UFunction* pGetMessageIndex = 0;
	AUnrealPlayer_execGetMessageIndex_Parms parms;

	if ( !pGetMessageIndex )
		pGetMessageIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.GetMessageIndex" );

	parms.PhraseName = PhraseName;
	this->ProcessEvent ( pGetMessageIndex, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealPlayer::ServerShowPathToBase ( int TeamNum )
{
	static UFunction* pServerShowPathToBase = 0;
	AUnrealPlayer_execServerShowPathToBase_Parms parms;

	if ( !pServerShowPathToBase )
		pServerShowPathToBase = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ServerShowPathToBase" );

	parms.TeamNum = TeamNum;
	this->ProcessEvent ( pServerShowPathToBase, &parms, NULL );

}*/

/*void AUnrealPlayer::execBasePath ( unsigned char Num )
{
	static UFunction* pBasePath = 0;
	AUnrealPlayer_execBasePath_Parms parms;

	if ( !pBasePath )
		pBasePath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.BasePath" );

	parms.Num = Num;
	this->ProcessEvent ( pBasePath, &parms, NULL );

}*/

/*void AUnrealPlayer::SoakPause ( class APawn* P )
{
	static UFunction* pSoakPause = 0;
	AUnrealPlayer_execSoakPause_Parms parms;

	if ( !pSoakPause )
		pSoakPause = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.SoakPause" );

	parms.P = P;
	this->ProcessEvent ( pSoakPause, &parms, NULL );

}*/

/*void AUnrealPlayer::execSoakBots (  )
{
	static UFunction* pSoakBots = 0;
	AUnrealPlayer_execSoakBots_Parms parms;

	if ( !pSoakBots )
		pSoakBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.SoakBots" );

	this->ProcessEvent ( pSoakBots, &parms, NULL );

}*/

/*bool AUnrealPlayer::DontReuseTaunt ( int t )
{
	static UFunction* pDontReuseTaunt = 0;
	AUnrealPlayer_execDontReuseTaunt_Parms parms;

	if ( !pDontReuseTaunt )
		pDontReuseTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.DontReuseTaunt" );

	parms.t = t;
	this->ProcessEvent ( pDontReuseTaunt, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayer::AutoTaunt (  )
{
	static UFunction* pAutoTaunt = 0;
	AUnrealPlayer_execAutoTaunt_Parms parms;

	if ( !pAutoTaunt )
		pAutoTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.AutoTaunt" );

	this->ProcessEvent ( pAutoTaunt, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealPlayer::Possess ( class APawn* aPawn )
{
	static UFunction* pPossess = 0;
	AUnrealPlayer_execPossess_Parms parms;

	if ( !pPossess )
		pPossess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.Possess" );

	parms.aPawn = aPawn;
	this->ProcessEvent ( pPossess, &parms, NULL );

}*/

/*void AUnrealPlayer::execShowAI (  )
{
	static UFunction* pShowAI = 0;
	AUnrealPlayer_execShowAI_Parms parms;

	if ( !pShowAI )
		pShowAI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ShowAI" );

	this->ProcessEvent ( pShowAI, &parms, NULL );

}*/

/*void AUnrealPlayer::LogMultiKills ( float Reward, bool bEnemyKill )
{
	static UFunction* pLogMultiKills = 0;
	AUnrealPlayer_execLogMultiKills_Parms parms;

	if ( !pLogMultiKills )
		pLogMultiKills = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.LogMultiKills" );

	parms.Reward = Reward;
	parms.bEnemyKill = bEnemyKill;
	this->ProcessEvent ( pLogMultiKills, &parms, NULL );

}*/

/*void AUnrealPlayer::ClientDelayedAnnouncement ( class USound* AnnouncementSound, unsigned char Delay )
{
	static UFunction* pClientDelayedAnnouncement = 0;
	AUnrealPlayer_execClientDelayedAnnouncement_Parms parms;

	if ( !pClientDelayedAnnouncement )
		pClientDelayedAnnouncement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ClientDelayedAnnouncement" );

	parms.AnnouncementSound = AnnouncementSound;
	parms.Delay = Delay;
	this->ProcessEvent ( pClientDelayedAnnouncement, &parms, NULL );

}*/

/*void AUnrealPlayer::ClientDelayedAnnouncementNamed ( struct FName Announcement, unsigned char Delay )
{
	static UFunction* pClientDelayedAnnouncementNamed = 0;
	AUnrealPlayer_execClientDelayedAnnouncementNamed_Parms parms;

	if ( !pClientDelayedAnnouncementNamed )
		pClientDelayedAnnouncementNamed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ClientDelayedAnnouncementNamed" );

	parms.Announcement = Announcement;
	parms.Delay = Delay;
	this->ProcessEvent ( pClientDelayedAnnouncementNamed, &parms, NULL );

}*/

/*void AUnrealPlayer::AwardAdrenaline ( float Amount )
{
	static UFunction* pAwardAdrenaline = 0;
	AUnrealPlayer_execAwardAdrenaline_Parms parms;

	if ( !pAwardAdrenaline )
		pAwardAdrenaline = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.AwardAdrenaline" );

	parms.Amount = Amount;
	this->ProcessEvent ( pAwardAdrenaline, &parms, NULL );

}*/

/*void AUnrealPlayer::eventPostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AUnrealPlayer_eventPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AUnrealPlayer::ClientSendStats ( class ATeamPlayerReplicationInfo* PRI, int newgoals, bool bNewFirstBlood, int newKills, int newsuicides, int newFlagTouches, int newFlagReturns, int newFlakCount, int newComboCount, int newHeadCount, int newRanOverCount, int newDaredevilPoints )
{
	static UFunction* pClientSendStats = 0;
	AUnrealPlayer_execClientSendStats_Parms parms;

	if ( !pClientSendStats )
		pClientSendStats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ClientSendStats" );

	parms.PRI = PRI;
	parms.newgoals = newgoals;
	parms.bNewFirstBlood = bNewFirstBlood;
	parms.newKills = newKills;
	parms.newsuicides = newsuicides;
	parms.newFlagTouches = newFlagTouches;
	parms.newFlagReturns = newFlagReturns;
	parms.newFlakCount = newFlakCount;
	parms.newComboCount = newComboCount;
	parms.newHeadCount = newHeadCount;
	parms.newRanOverCount = newRanOverCount;
	parms.newDaredevilPoints = newDaredevilPoints;
	this->ProcessEvent ( pClientSendStats, &parms, NULL );

}*/

/*void AUnrealPlayer::ClientSendCombos ( class ATeamPlayerReplicationInfo* PRI, unsigned char Combos0, unsigned char Combos1, unsigned char Combos2, unsigned char Combos3, unsigned char Combos4 )
{
	static UFunction* pClientSendCombos = 0;
	AUnrealPlayer_execClientSendCombos_Parms parms;

	if ( !pClientSendCombos )
		pClientSendCombos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ClientSendCombos" );

	parms.PRI = PRI;
	parms.Combos0 = Combos0;
	parms.Combos1 = Combos1;
	parms.Combos2 = Combos2;
	parms.Combos3 = Combos3;
	parms.Combos4 = Combos4;
	this->ProcessEvent ( pClientSendCombos, &parms, NULL );

}*/

/*void AUnrealPlayer::ClientSendMultiKills ( class ATeamPlayerReplicationInfo* PRI, unsigned char MultiKills0, unsigned char MultiKills1, unsigned char MultiKills2, unsigned char MultiKills3, unsigned char MultiKills4, unsigned char MultiKills5, unsigned char MultiKills6 )
{
	static UFunction* pClientSendMultiKills = 0;
	AUnrealPlayer_execClientSendMultiKills_Parms parms;

	if ( !pClientSendMultiKills )
		pClientSendMultiKills = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ClientSendMultiKills" );

	parms.PRI = PRI;
	parms.MultiKills0 = MultiKills0;
	parms.MultiKills1 = MultiKills1;
	parms.MultiKills2 = MultiKills2;
	parms.MultiKills3 = MultiKills3;
	parms.MultiKills4 = MultiKills4;
	parms.MultiKills5 = MultiKills5;
	parms.MultiKills6 = MultiKills6;
	this->ProcessEvent ( pClientSendMultiKills, &parms, NULL );

}*/

/*void AUnrealPlayer::ClientSendSprees ( class ATeamPlayerReplicationInfo* PRI, unsigned char Spree0, unsigned char Spree1, unsigned char Spree2, unsigned char Spree3, unsigned char Spree4, unsigned char Spree5 )
{
	static UFunction* pClientSendSprees = 0;
	AUnrealPlayer_execClientSendSprees_Parms parms;

	if ( !pClientSendSprees )
		pClientSendSprees = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ClientSendSprees" );

	parms.PRI = PRI;
	parms.Spree0 = Spree0;
	parms.Spree1 = Spree1;
	parms.Spree2 = Spree2;
	parms.Spree3 = Spree3;
	parms.Spree4 = Spree4;
	parms.Spree5 = Spree5;
	this->ProcessEvent ( pClientSendSprees, &parms, NULL );

}*/

/*void AUnrealPlayer::ClientSendVehicle ( class ATeamPlayerReplicationInfo* PRI, class UClass* V, int Kills, int Deaths, int DeathsDriving, int i )
{
	static UFunction* pClientSendVehicle = 0;
	AUnrealPlayer_execClientSendVehicle_Parms parms;

	if ( !pClientSendVehicle )
		pClientSendVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ClientSendVehicle" );

	parms.PRI = PRI;
	parms.V = V;
	parms.Kills = Kills;
	parms.Deaths = Deaths;
	parms.DeathsDriving = DeathsDriving;
	parms.i = i;
	this->ProcessEvent ( pClientSendVehicle, &parms, NULL );

}*/

/*void AUnrealPlayer::ClientSendWeapon ( class ATeamPlayerReplicationInfo* PRI, class UClass* W, int Kills, int Deaths, int deathsholding, int i )
{
	static UFunction* pClientSendWeapon = 0;
	AUnrealPlayer_execClientSendWeapon_Parms parms;

	if ( !pClientSendWeapon )
		pClientSendWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ClientSendWeapon" );

	parms.PRI = PRI;
	parms.W = W;
	parms.Kills = Kills;
	parms.Deaths = Deaths;
	parms.deathsholding = deathsholding;
	parms.i = i;
	this->ProcessEvent ( pClientSendWeapon, &parms, NULL );

}*/

/*void AUnrealPlayer::ServerGetNextVehicleStats ( class ATeamPlayerReplicationInfo* PRI, int i )
{
	static UFunction* pServerGetNextVehicleStats = 0;
	AUnrealPlayer_execServerGetNextVehicleStats_Parms parms;

	if ( !pServerGetNextVehicleStats )
		pServerGetNextVehicleStats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ServerGetNextVehicleStats" );

	parms.PRI = PRI;
	parms.i = i;
	this->ProcessEvent ( pServerGetNextVehicleStats, &parms, NULL );

}*/

/*void AUnrealPlayer::ServerGetNextWeaponStats ( class ATeamPlayerReplicationInfo* PRI, int i )
{
	static UFunction* pServerGetNextWeaponStats = 0;
	AUnrealPlayer_execServerGetNextWeaponStats_Parms parms;

	if ( !pServerGetNextWeaponStats )
		pServerGetNextWeaponStats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ServerGetNextWeaponStats" );

	parms.PRI = PRI;
	parms.i = i;
	this->ProcessEvent ( pServerGetNextWeaponStats, &parms, NULL );

}*/

/*void AUnrealPlayer::ServerUpdateStatArrays ( class ATeamPlayerReplicationInfo* PRI )
{
	static UFunction* pServerUpdateStatArrays = 0;
	AUnrealPlayer_execServerUpdateStatArrays_Parms parms;

	if ( !pServerUpdateStatArrays )
		pServerUpdateStatArrays = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ServerUpdateStatArrays" );

	parms.PRI = PRI;
	this->ProcessEvent ( pServerUpdateStatArrays, &parms, NULL );

}*/

/*void AUnrealPlayer::ServerUpdateStats ( class ATeamPlayerReplicationInfo* PRI )
{
	static UFunction* pServerUpdateStats = 0;
	AUnrealPlayer_execServerUpdateStats_Parms parms;

	if ( !pServerUpdateStats )
		pServerUpdateStats = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayer.ServerUpdateStats" );

	parms.PRI = PRI;
	this->ProcessEvent ( pServerUpdateStats, &parms, NULL );

}*/

/*void AUnrealTeamInfo::RemoveFromTeam ( class AController* Other )
{
	static UFunction* pRemoveFromTeam = 0;
	AUnrealTeamInfo_execRemoveFromTeam_Parms parms;

	if ( !pRemoveFromTeam )
		pRemoveFromTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.RemoveFromTeam" );

	parms.Other = Other;
	this->ProcessEvent ( pRemoveFromTeam, &parms, NULL );

}*/

/*void AUnrealTeamInfo::SetBotOrders ( class ABot* NewBot, class URosterEntry* R )
{
	static UFunction* pSetBotOrders = 0;
	AUnrealTeamInfo_execSetBotOrders_Parms parms;

	if ( !pSetBotOrders )
		pSetBotOrders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.SetBotOrders" );

	parms.NewBot = NewBot;
	parms.R = R;
	this->ProcessEvent ( pSetBotOrders, &parms, NULL );

}*/

/*bool AUnrealTeamInfo::BelongsOnTeam ( class UClass* PawnClass )
{
	static UFunction* pBelongsOnTeam = 0;
	AUnrealTeamInfo_execBelongsOnTeam_Parms parms;

	if ( !pBelongsOnTeam )
		pBelongsOnTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.BelongsOnTeam" );

	parms.PawnClass = PawnClass;
	this->ProcessEvent ( pBelongsOnTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealTeamInfo::AddToTeam ( class AController* Other )
{
	static UFunction* pAddToTeam = 0;
	AUnrealTeamInfo_execAddToTeam_Parms parms;

	if ( !pAddToTeam )
		pAddToTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.AddToTeam" );

	parms.Other = Other;
	this->ProcessEvent ( pAddToTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class URosterEntry* AUnrealTeamInfo::GetNamedBot ( struct FString botname )
{
	static UFunction* pGetNamedBot = 0;
	AUnrealTeamInfo_execGetNamedBot_Parms parms;

	if ( !pGetNamedBot )
		pGetNamedBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.GetNamedBot" );

	parms.botname = botname;
	this->ProcessEvent ( pGetNamedBot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class URosterEntry* AUnrealTeamInfo::GetNextBot ( struct FString botname )
{
	static UFunction* pGetNextBot = 0;
	AUnrealTeamInfo_execGetNextBot_Parms parms;

	if ( !pGetNextBot )
		pGetNextBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.GetNextBot" );

	parms.botname = botname;
	this->ProcessEvent ( pGetNextBot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealTeamInfo::AddNamedBot ( struct FString botname )
{
	static UFunction* pAddNamedBot = 0;
	AUnrealTeamInfo_execAddNamedBot_Parms parms;

	if ( !pAddNamedBot )
		pAddNamedBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.AddNamedBot" );

	parms.botname = botname;
	this->ProcessEvent ( pAddNamedBot, &parms, NULL );

}*/

/*void AUnrealTeamInfo::AddRandomPlayer (  )
{
	static UFunction* pAddRandomPlayer = 0;
	AUnrealTeamInfo_execAddRandomPlayer_Parms parms;

	if ( !pAddRandomPlayer )
		pAddRandomPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.AddRandomPlayer" );

	this->ProcessEvent ( pAddRandomPlayer, &parms, NULL );

}*/

/*bool AUnrealTeamInfo::AlreadyExistsEntry ( struct FString CharacterName, bool bNoRecursion )
{
	static UFunction* pAlreadyExistsEntry = 0;
	AUnrealTeamInfo_execAlreadyExistsEntry_Parms parms;

	if ( !pAlreadyExistsEntry )
		pAlreadyExistsEntry = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.AlreadyExistsEntry" );

	parms.CharacterName = CharacterName;
	parms.bNoRecursion = bNoRecursion;
	this->ProcessEvent ( pAlreadyExistsEntry, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class URosterEntry* AUnrealTeamInfo::GetRandomPlayer (  )
{
	static UFunction* pGetRandomPlayer = 0;
	AUnrealTeamInfo_execGetRandomPlayer_Parms parms;

	if ( !pGetRandomPlayer )
		pGetRandomPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.GetRandomPlayer" );

	this->ProcessEvent ( pGetRandomPlayer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class URosterEntry* AUnrealTeamInfo::ChooseBotClass ( struct FString botname )
{
	static UFunction* pChooseBotClass = 0;
	AUnrealTeamInfo_execChooseBotClass_Parms parms;

	if ( !pChooseBotClass )
		pChooseBotClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.ChooseBotClass" );

	parms.botname = botname;
	this->ProcessEvent ( pChooseBotClass, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealTeamInfo::NeedsBotMoreThan ( class AUnrealTeamInfo* t )
{
	static UFunction* pNeedsBotMoreThan = 0;
	AUnrealTeamInfo_execNeedsBotMoreThan_Parms parms;

	if ( !pNeedsBotMoreThan )
		pNeedsBotMoreThan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.NeedsBotMoreThan" );

	parms.t = t;
	this->ProcessEvent ( pNeedsBotMoreThan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UClass* AUnrealTeamInfo::NextLoadOut ( class UClass* CurrentLoadout )
{
	static UFunction* pNextLoadOut = 0;
	AUnrealTeamInfo_execNextLoadOut_Parms parms;

	if ( !pNextLoadOut )
		pNextLoadOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.NextLoadOut" );

	parms.CurrentLoadout = CurrentLoadout;
	this->ProcessEvent ( pNextLoadOut, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealTeamInfo::FillPlayerTeam ( class UGameProfile* G )
{
	static UFunction* pFillPlayerTeam = 0;
	AUnrealTeamInfo_execFillPlayerTeam_Parms parms;

	if ( !pFillPlayerTeam )
		pFillPlayerTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.FillPlayerTeam" );

	parms.G = G;
	this->ProcessEvent ( pFillPlayerTeam, &parms, NULL );

}*/

/*void AUnrealTeamInfo::Initialize ( int TeamBots )
{
	static UFunction* pInitialize = 0;
	AUnrealTeamInfo_execInitialize_Parms parms;

	if ( !pInitialize )
		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.Initialize" );

	parms.TeamBots = TeamBots;
	this->ProcessEvent ( pInitialize, &parms, NULL );

}*/

/*bool AUnrealTeamInfo::AllBotsSpawned (  )
{
	static UFunction* pAllBotsSpawned = 0;
	AUnrealTeamInfo_execAllBotsSpawned_Parms parms;

	if ( !pAllBotsSpawned )
		pAllBotsSpawned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.AllBotsSpawned" );

	this->ProcessEvent ( pAllBotsSpawned, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUnrealTeamInfo::OverrideInitialBots ( int N, class AUnrealTeamInfo* t )
{
	static UFunction* pOverrideInitialBots = 0;
	AUnrealTeamInfo_execOverrideInitialBots_Parms parms;

	if ( !pOverrideInitialBots )
		pOverrideInitialBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.OverrideInitialBots" );

	parms.N = N;
	parms.t = t;
	this->ProcessEvent ( pOverrideInitialBots, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealTeamInfo::Reset (  )
{
	static UFunction* pReset = 0;
	AUnrealTeamInfo_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamInfo.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*struct FString AWeaponDamageType::GetWeaponClass (  )
{
	static UFunction* pGetWeaponClass = 0;
	AWeaponDamageType_execGetWeaponClass_Parms parms;

	if ( !pGetWeaponClass )
		pGetWeaponClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.WeaponDamageType.GetWeaponClass" );

	this->ProcessEvent ( pGetWeaponClass, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ALevelGameRules::UpdateGame ( class AGameInfo* G )
{
	static UFunction* pUpdateGame = 0;
	ALevelGameRules_execUpdateGame_Parms parms;

	if ( !pUpdateGame )
		pUpdateGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.LevelGameRules.UpdateGame" );

	parms.G = G;
	this->ProcessEvent ( pUpdateGame, &parms, NULL );

}*/

/*void ALevelGameRules::PreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	ALevelGameRules_execPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.LevelGameRules.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*bool AUnrealScriptedSequence::HigherPriorityThan ( class AUnrealScriptedSequence* S, class ABot* B )
{
	static UFunction* pHigherPriorityThan = 0;
	AUnrealScriptedSequence_execHigherPriorityThan_Parms parms;

	if ( !pHigherPriorityThan )
		pHigherPriorityThan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealScriptedSequence.HigherPriorityThan" );

	parms.S = S;
	parms.B = B;
	this->ProcessEvent ( pHigherPriorityThan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealScriptedSequence::BeginPlay (  )
{
	static UFunction* pBeginPlay = 0;
	AUnrealScriptedSequence_execBeginPlay_Parms parms;

	if ( !pBeginPlay )
		pBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealScriptedSequence.BeginPlay" );

	this->ProcessEvent ( pBeginPlay, &parms, NULL );

}*/

/*bool AUnrealScriptedSequence::CheckForErrors (  )
{
	static UFunction* pCheckForErrors = 0;
	AUnrealScriptedSequence_execCheckForErrors_Parms parms;

	if ( !pCheckForErrors )
		pCheckForErrors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealScriptedSequence.CheckForErrors" );

	this->ProcessEvent ( pCheckForErrors, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealScriptedSequence::FreeScript (  )
{
	static UFunction* pFreeScript = 0;
	AUnrealScriptedSequence_execFreeScript_Parms parms;

	if ( !pFreeScript )
		pFreeScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealScriptedSequence.FreeScript" );

	this->ProcessEvent ( pFreeScript, &parms, NULL );

}*/

/*void AUnrealScriptedSequence::Reset (  )
{
	static UFunction* pReset = 0;
	AUnrealScriptedSequence_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealScriptedSequence.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AHoldSpot::FreeScript (  )
{
	static UFunction* pFreeScript = 0;
	AHoldSpot_execFreeScript_Parms parms;

	if ( !pFreeScript )
		pFreeScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldSpot.FreeScript" );

	this->ProcessEvent ( pFreeScript, &parms, NULL );

}*/

/*class AActor* AHoldSpot::GetMoveTarget (  )
{
	static UFunction* pGetMoveTarget = 0;
	AHoldSpot_execGetMoveTarget_Parms parms;

	if ( !pGetMoveTarget )
		pGetMoveTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldSpot.GetMoveTarget" );

	this->ProcessEvent ( pGetMoveTarget, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::EndGameTauntFor ( class ABot* B )
{
	static UFunction* pEndGameTauntFor = 0;
	ATeamGame_execEndGameTauntFor_Parms parms;

	if ( !pEndGameTauntFor )
		pEndGameTauntFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.EndGameTauntFor" );

	parms.B = B;
	this->ProcessEvent ( pEndGameTauntFor, &parms, NULL );

}*/

/*void ATeamGame::EndGameCommentFor ( class ABot* B )
{
	static UFunction* pEndGameCommentFor = 0;
	ATeamGame_execEndGameCommentFor_Parms parms;

	if ( !pEndGameCommentFor )
		pEndGameCommentFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.EndGameCommentFor" );

	parms.B = B;
	this->ProcessEvent ( pEndGameCommentFor, &parms, NULL );

}*/

/*bool ATeamGame::PickEndGameTauntFor ( class ABot* B )
{
	static UFunction* pPickEndGameTauntFor = 0;
	ATeamGame_execPickEndGameTauntFor_Parms parms;

	if ( !pPickEndGameTauntFor )
		pPickEndGameTauntFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.PickEndGameTauntFor" );

	parms.B = B;
	this->ProcessEvent ( pPickEndGameTauntFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::WeakObjectives (  )
{
	static UFunction* pWeakObjectives = 0;
	ATeamGame_execWeakObjectives_Parms parms;

	if ( !pWeakObjectives )
		pWeakObjectives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.WeakObjectives" );

	this->ProcessEvent ( pWeakObjectives, &parms, NULL );

}*/

/*class TArray< struct FString > ATeamGame::GetAllLoadHints ( bool bThisClassOnly )
{
	static UFunction* pGetAllLoadHints = 0;
	ATeamGame_execGetAllLoadHints_Parms parms;

	if ( !pGetAllLoadHints )
		pGetAllLoadHints = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.GetAllLoadHints" );

	parms.bThisClassOnly = bThisClassOnly;
	this->ProcessEvent ( pGetAllLoadHints, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pPostLogin = 0;
	ATeamGame_eventPostLogin_Parms parms;

	if ( !pPostLogin )
		pPostLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.PostLogin" );

	parms.NewPlayer = NewPlayer;
	this->ProcessEvent ( pPostLogin, &parms, NULL );

}*/

/*void ATeamGame::InitVoiceReplicationInfo (  )
{
	static UFunction* pInitVoiceReplicationInfo = 0;
	ATeamGame_execInitVoiceReplicationInfo_Parms parms;

	if ( !pInitVoiceReplicationInfo )
		pInitVoiceReplicationInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.InitVoiceReplicationInfo" );

	this->ProcessEvent ( pInitVoiceReplicationInfo, &parms, NULL );

}*/

/*void ATeamGame::AnnounceScore ( int ScoringTeam )
{
	static UFunction* pAnnounceScore = 0;
	ATeamGame_execAnnounceScore_Parms parms;

	if ( !pAnnounceScore )
		pAnnounceScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.AnnounceScore" );

	parms.ScoringTeam = ScoringTeam;
	this->ProcessEvent ( pAnnounceScore, &parms, NULL );

}*/

/*bool ATeamGame::eventAcceptPlayInfoProperty ( struct FString PropertyName )
{
	static UFunction* pAcceptPlayInfoProperty = 0;
	ATeamGame_eventAcceptPlayInfoProperty_Parms parms;

	if ( !pAcceptPlayInfoProperty )
		pAcceptPlayInfoProperty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.AcceptPlayInfoProperty" );

	parms.PropertyName = PropertyName;
	this->ProcessEvent ( pAcceptPlayInfoProperty, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString ATeamGame::eventGetDescriptionText ( struct FString PropName )
{
	static UFunction* pGetDescriptionText = 0;
	ATeamGame_eventGetDescriptionText_Parms parms;

	if ( !pGetDescriptionText )
		pGetDescriptionText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.GetDescriptionText" );

	parms.PropName = PropName;
	this->ProcessEvent ( pGetDescriptionText, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::FillPlayInfo ( class UPlayInfo* PlayInfo )
{
	static UFunction* pFillPlayInfo = 0;
	ATeamGame_execFillPlayInfo_Parms parms;

	if ( !pFillPlayInfo )
		pFillPlayInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.FillPlayInfo" );

	parms.PlayInfo = PlayInfo;
	this->ProcessEvent ( pFillPlayInfo, &parms, NULL );

}*/

/*void ATeamGame::FindNewObjectives ( class AGameObjective* DisabledObjective )
{
	static UFunction* pFindNewObjectives = 0;
	ATeamGame_execFindNewObjectives_Parms parms;

	if ( !pFindNewObjectives )
		pFindNewObjectives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.FindNewObjectives" );

	parms.DisabledObjective = DisabledObjective;
	this->ProcessEvent ( pFindNewObjectives, &parms, NULL );

}*/

/*struct FString ATeamGame::ParseMessageString ( class AMutator* BaseMutator, class AController* Who, struct FString Message )
{
	static UFunction* pParseMessageString = 0;
	ATeamGame_execParseMessageString_Parms parms;

	if ( !pParseMessageString )
		pParseMessageString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.ParseMessageString" );

	parms.BaseMutator = BaseMutator;
	parms.Who = Who;
	parms.Message = Message;
	this->ProcessEvent ( pParseMessageString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString ATeamGame::FindTeamDesignation ( class AGameReplicationInfo* GRI, class AActor* A )
{
	static UFunction* pFindTeamDesignation = 0;
	ATeamGame_execFindTeamDesignation_Parms parms;

	if ( !pFindTeamDesignation )
		pFindTeamDesignation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.FindTeamDesignation" );

	parms.GRI = GRI;
	parms.A = A;
	this->ProcessEvent ( pFindTeamDesignation, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString ATeamGame::ParseChatPercVar ( class AMutator* BaseMutator, class AController* Who, struct FString Cmd )
{
	static UFunction* pParseChatPercVar = 0;
	ATeamGame_execParseChatPercVar_Parms parms;

	if ( !pParseChatPercVar )
		pParseChatPercVar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.ParseChatPercVar" );

	parms.BaseMutator = BaseMutator;
	parms.Who = Who;
	parms.Cmd = Cmd;
	this->ProcessEvent ( pParseChatPercVar, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::PlayEndOfMatchMessage (  )
{
	static UFunction* pPlayEndOfMatchMessage = 0;
	ATeamGame_execPlayEndOfMatchMessage_Parms parms;

	if ( !pPlayEndOfMatchMessage )
		pPlayEndOfMatchMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.PlayEndOfMatchMessage" );

	this->ProcessEvent ( pPlayEndOfMatchMessage, &parms, NULL );

}*/

/*bool ATeamGame::TooManyBots ( class AController* botToRemove )
{
	static UFunction* pTooManyBots = 0;
	ATeamGame_execTooManyBots_Parms parms;

	if ( !pTooManyBots )
		pTooManyBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.TooManyBots" );

	parms.botToRemove = botToRemove;
	this->ProcessEvent ( pTooManyBots, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ATeamGame::SameTeam ( class AController* A, class AController* B )
{
	static UFunction* pSameTeam = 0;
	ATeamGame_execSameTeam_Parms parms;

	if ( !pSameTeam )
		pSameTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.SameTeam" );

	parms.A = A;
	parms.B = B;
	this->ProcessEvent ( pSameTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int ATeamGame::ReduceDamage ( int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, int iWeaponType, struct FVector* Momentum )
{
	static UFunction* pReduceDamage = 0;
	ATeamGame_execReduceDamage_Parms parms;

	if ( !pReduceDamage )
		pReduceDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.ReduceDamage" );

	parms.Damage = Damage;
	parms.injured = injured;
	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.DamageType = DamageType;
	parms.iWeaponType = iWeaponType;
	this->ProcessEvent ( pReduceDamage, &parms, NULL );

	*Momentum = parms.Momentum;
	return parms.ReturnValue;
}*/

/*void ATeamGame::SetTeamAssistPoint ( class AController* Killer, class AController* Other )
{
	static UFunction* pSetTeamAssistPoint = 0;
	ATeamGame_execSetTeamAssistPoint_Parms parms;

	if ( !pSetTeamAssistPoint )
		pSetTeamAssistPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.SetTeamAssistPoint" );

	parms.Killer = Killer;
	parms.Other = Other;
	this->ProcessEvent ( pSetTeamAssistPoint, &parms, NULL );

}*/

/*void ATeamGame::ScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pScoreKill = 0;
	ATeamGame_execScoreKill_Parms parms;

	if ( !pScoreKill )
		pScoreKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.ScoreKill" );

	parms.Killer = Killer;
	parms.Other = Other;
	this->ProcessEvent ( pScoreKill, &parms, NULL );

}*/

/*bool ATeamGame::NearGoal ( class AController* C )
{
	static UFunction* pNearGoal = 0;
	ATeamGame_execNearGoal_Parms parms;

	if ( !pNearGoal )
		pNearGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.NearGoal" );

	parms.C = C;
	this->ProcessEvent ( pNearGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class APawn* ATeamGame::FindVictimsTarget ( class AController* Other )
{
	static UFunction* pFindVictimsTarget = 0;
	ATeamGame_execFindVictimsTarget_Parms parms;

	if ( !pFindVictimsTarget )
		pFindVictimsTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.FindVictimsTarget" );

	parms.Other = Other;
	this->ProcessEvent ( pFindVictimsTarget, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ATeamGame::CriticalPlayer ( class AController* Other )
{
	static UFunction* pCriticalPlayer = 0;
	ATeamGame_execCriticalPlayer_Parms parms;

	if ( !pCriticalPlayer )
		pCriticalPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.CriticalPlayer" );

	parms.Other = Other;
	this->ProcessEvent ( pCriticalPlayer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::AnnounceAlmostWinningTeam (  )
{
	static UFunction* pAnnounceAlmostWinningTeam = 0;
	ATeamGame_execAnnounceAlmostWinningTeam_Parms parms;

	if ( !pAnnounceAlmostWinningTeam )
		pAnnounceAlmostWinningTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.AnnounceAlmostWinningTeam" );

	this->ProcessEvent ( pAnnounceAlmostWinningTeam, &parms, NULL );

}*/

/*void ATeamGame::AnnounceEndingWinningTeam (  )
{
	static UFunction* pAnnounceEndingWinningTeam = 0;
	ATeamGame_execAnnounceEndingWinningTeam_Parms parms;

	if ( !pAnnounceEndingWinningTeam )
		pAnnounceEndingWinningTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.AnnounceEndingWinningTeam" );

	this->ProcessEvent ( pAnnounceEndingWinningTeam, &parms, NULL );

}*/

/*void ATeamGame::AnnounceWinningTeam (  )
{
	static UFunction* pAnnounceWinningTeam = 0;
	ATeamGame_execAnnounceWinningTeam_Parms parms;

	if ( !pAnnounceWinningTeam )
		pAnnounceWinningTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.AnnounceWinningTeam" );

	this->ProcessEvent ( pAnnounceWinningTeam, &parms, NULL );

}*/

/*void ATeamGame::CheckScore ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pCheckScore = 0;
	ATeamGame_execCheckScore_Parms parms;

	if ( !pCheckScore )
		pCheckScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.CheckScore" );

	parms.Scorer = Scorer;
	this->ProcessEvent ( pCheckScore, &parms, NULL );

}*/

/*float ATeamGame::RatePlayerStart ( class ANavigationPoint* N, unsigned char Team, class AController* Player )
{
	static UFunction* pRatePlayerStart = 0;
	ATeamGame_execRatePlayerStart_Parms parms;

	if ( !pRatePlayerStart )
		pRatePlayerStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.RatePlayerStart" );

	parms.N = N;
	parms.Team = Team;
	parms.Player = Player;
	this->ProcessEvent ( pRatePlayerStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ATeamGame::ChangeTeam ( class AController* Other, int Num, bool bNewTeam )
{
	static UFunction* pChangeTeam = 0;
	ATeamGame_execChangeTeam_Parms parms;

	if ( !pChangeTeam )
		pChangeTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.ChangeTeam" );

	parms.Other = Other;
	parms.Num = Num;
	parms.bNewTeam = bNewTeam;
	this->ProcessEvent ( pChangeTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char ATeamGame::PickTeam ( unsigned char Num, class AController* C )
{
	static UFunction* pPickTeam = 0;
	ATeamGame_execPickTeam_Parms parms;

	if ( !pPickTeam )
		pPickTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.PickTeam" );

	parms.Num = Num;
	parms.C = C;
	this->ProcessEvent ( pPickTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AUnrealTeamInfo* ATeamGame::FindTeamFor ( class AController* C )
{
	static UFunction* pFindTeamFor = 0;
	ATeamGame_execFindTeamFor_Parms parms;

	if ( !pFindTeamFor )
		pFindTeamFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.FindTeamFor" );

	parms.C = C;
	this->ProcessEvent ( pFindTeamFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AUnrealTeamInfo* ATeamGame::GetBotTeam2 ( bool forceTeam, int Team )
{
	static UFunction* pGetBotTeam2 = 0;
	ATeamGame_execGetBotTeam2_Parms parms;

	if ( !pGetBotTeam2 )
		pGetBotTeam2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.GetBotTeam2" );

	parms.forceTeam = forceTeam;
	parms.Team = Team;
	this->ProcessEvent ( pGetBotTeam2, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AUnrealTeamInfo* ATeamGame::GetBotTeam ( int TeamBots )
{
	static UFunction* pGetBotTeam = 0;
	ATeamGame_execGetBotTeam_Parms parms;

	if ( !pGetBotTeam )
		pGetBotTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.GetBotTeam" );

	parms.TeamBots = TeamBots;
	this->ProcessEvent ( pGetBotTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::GetServerDetails ( struct FServerResponseLine* ServerState )
{
	static UFunction* pGetServerDetails = 0;
	ATeamGame_execGetServerDetails_Parms parms;

	if ( !pGetServerDetails )
		pGetServerDetails = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.GetServerDetails" );

	parms.ServerState = *ServerState;
	this->ProcessEvent ( pGetServerDetails, &parms, NULL );

	*ServerState = parms.ServerState;
}*/

/*bool ATeamGame::CanSpectate ( class APlayerController* Viewer, bool bOnlySpectator, class AActor* ViewTarget )
{
	static UFunction* pCanSpectate = 0;
	ATeamGame_execCanSpectate_Parms parms;

	if ( !pCanSpectate )
		pCanSpectate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.CanSpectate" );

	parms.Viewer = Viewer;
	parms.bOnlySpectator = bOnlySpectator;
	parms.ViewTarget = ViewTarget;
	this->ProcessEvent ( pCanSpectate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::SetEndGameFocus ( class APlayerReplicationInfo* Winner )
{
	static UFunction* pSetEndGameFocus = 0;
	ATeamGame_execSetEndGameFocus_Parms parms;

	if ( !pSetEndGameFocus )
		pSetEndGameFocus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.SetEndGameFocus" );

	parms.Winner = Winner;
	this->ProcessEvent ( pSetEndGameFocus, &parms, NULL );

}*/

/*bool ATeamGame::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pCheckEndGame = 0;
	ATeamGame_execCheckEndGame_Parms parms;

	if ( !pCheckEndGame )
		pCheckEndGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.CheckEndGame" );

	parms.Winner = Winner;
	parms.Reason = Reason;
	this->ProcessEvent ( pCheckEndGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::IncrementGoalsScored ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pIncrementGoalsScored = 0;
	ATeamGame_execIncrementGoalsScored_Parms parms;

	if ( !pIncrementGoalsScored )
		pIncrementGoalsScored = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.IncrementGoalsScored" );

	parms.PRI = PRI;
	this->ProcessEvent ( pIncrementGoalsScored, &parms, NULL );

}*/

/*void ATeamGame::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
{
	static UFunction* pNotifyKilled = 0;
	ATeamGame_execNotifyKilled_Parms parms;

	if ( !pNotifyKilled )
		pNotifyKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.NotifyKilled" );

	parms.Killer = Killer;
	parms.Killed = Killed;
	parms.KilledPawn = KilledPawn;
	this->ProcessEvent ( pNotifyKilled, &parms, NULL );

}*/

/*void ATeamGame::RestartPlayer ( class AController* aPlayer )
{
	static UFunction* pRestartPlayer = 0;
	ATeamGame_execRestartPlayer_Parms parms;

	if ( !pRestartPlayer )
		pRestartPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.RestartPlayer" );

	parms.aPlayer = aPlayer;
	this->ProcessEvent ( pRestartPlayer, &parms, NULL );

}*/

/*void ATeamGame::ShowPathTo ( class APlayerController* P, int TeamNum )
{
	static UFunction* pShowPathTo = 0;
	ATeamGame_execShowPathTo_Parms parms;

	if ( !pShowPathTo )
		pShowPathTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.ShowPathTo" );

	parms.P = P;
	parms.TeamNum = TeamNum;
	this->ProcessEvent ( pShowPathTo, &parms, NULL );

}*/

/*bool ATeamGame::CanShowPathTo ( class APlayerController* P, int TeamNum )
{
	static UFunction* pCanShowPathTo = 0;
	ATeamGame_execCanShowPathTo_Parms parms;

	if ( !pCanShowPathTo )
		pCanShowPathTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.CanShowPathTo" );

	parms.P = P;
	parms.TeamNum = TeamNum;
	this->ProcessEvent ( pCanShowPathTo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int ATeamGame::GetMinPlayers (  )
{
	static UFunction* pGetMinPlayers = 0;
	ATeamGame_execGetMinPlayers_Parms parms;

	if ( !pGetMinPlayers )
		pGetMinPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.GetMinPlayers" );

	this->ProcessEvent ( pGetMinPlayers, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::InitTeamSymbols (  )
{
	static UFunction* pInitTeamSymbols = 0;
	ATeamGame_execInitTeamSymbols_Parms parms;

	if ( !pInitTeamSymbols )
		pInitTeamSymbols = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.InitTeamSymbols" );

	this->ProcessEvent ( pInitTeamSymbols, &parms, NULL );

}*/

/*void ATeamGame::eventInitGame ( struct FString Options, struct FString* Error )
{
	static UFunction* pInitGame = 0;
	ATeamGame_eventInitGame_Parms parms;

	if ( !pInitGame )
		pInitGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.InitGame" );

	parms.Options = Options;
	this->ProcessEvent ( pInitGame, &parms, NULL );

	*Error = parms.Error;
}*/

/*class AUnrealTeamInfo* ATeamGame::GetRedTeam ( int TeamBots )
{
	static UFunction* pGetRedTeam = 0;
	ATeamGame_execGetRedTeam_Parms parms;

	if ( !pGetRedTeam )
		pGetRedTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.GetRedTeam" );

	parms.TeamBots = TeamBots;
	this->ProcessEvent ( pGetRedTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AUnrealTeamInfo* ATeamGame::GetBlueTeam ( int TeamBots )
{
	static UFunction* pGetBlueTeam = 0;
	ATeamGame_execGetBlueTeam_Parms parms;

	if ( !pGetBlueTeam )
		pGetBlueTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.GetBlueTeam" );

	parms.TeamBots = TeamBots;
	this->ProcessEvent ( pGetBlueTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::PreLoadBot (  )
{
	static UFunction* pPreLoadBot = 0;
	ATeamGame_execPreLoadBot_Parms parms;

	if ( !pPreLoadBot )
		pPreLoadBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.PreLoadBot" );

	this->ProcessEvent ( pPreLoadBot, &parms, NULL );

}*/

/*void ATeamGame::PreLoadNamedBot ( struct FString botname )
{
	static UFunction* pPreLoadNamedBot = 0;
	ATeamGame_execPreLoadNamedBot_Parms parms;

	if ( !pPreLoadNamedBot )
		pPreLoadNamedBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.PreLoadNamedBot" );

	parms.botname = botname;
	this->ProcessEvent ( pPreLoadNamedBot, &parms, NULL );

}*/

/*void ATeamGame::OverrideInitialBots (  )
{
	static UFunction* pOverrideInitialBots = 0;
	ATeamGame_execOverrideInitialBots_Parms parms;

	if ( !pOverrideInitialBots )
		pOverrideInitialBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.OverrideInitialBots" );

	this->ProcessEvent ( pOverrideInitialBots, &parms, NULL );

}*/

/*class ATeamInfo* ATeamGame::OtherTeam ( class ATeamInfo* Requester )
{
	static UFunction* pOtherTeam = 0;
	ATeamGame_execOtherTeam_Parms parms;

	if ( !pOtherTeam )
		pOtherTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.OtherTeam" );

	parms.Requester = Requester;
	this->ProcessEvent ( pOtherTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ATeamGame::CheckMaxLives ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pCheckMaxLives = 0;
	ATeamGame_execCheckMaxLives_Parms parms;

	if ( !pCheckMaxLives )
		pCheckMaxLives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.CheckMaxLives" );

	parms.Scorer = Scorer;
	this->ProcessEvent ( pCheckMaxLives, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::UpdateAnnouncements (  )
{
	static UFunction* pUpdateAnnouncements = 0;
	ATeamGame_execUpdateAnnouncements_Parms parms;

	if ( !pUpdateAnnouncements )
		pUpdateAnnouncements = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.UpdateAnnouncements" );

	this->ProcessEvent ( pUpdateAnnouncements, &parms, NULL );

}*/

/*void ATeamGame::PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds )
{
	static UFunction* pPrecacheGameAnnouncements = 0;
	ATeamGame_execPrecacheGameAnnouncements_Parms parms;

	if ( !pPrecacheGameAnnouncements )
		pPrecacheGameAnnouncements = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.PrecacheGameAnnouncements" );

	parms.V = V;
	parms.bRewardSounds = bRewardSounds;
	this->ProcessEvent ( pPrecacheGameAnnouncements, &parms, NULL );

}*/

/*int ATeamGame::BallCarrierMessage (  )
{
	static UFunction* pBallCarrierMessage = 0;
	ATeamGame_execBallCarrierMessage_Parms parms;

	if ( !pBallCarrierMessage )
		pBallCarrierMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.BallCarrierMessage" );

	this->ProcessEvent ( pBallCarrierMessage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int ATeamGame::GetStatus ( class APlayerController* Sender, class ABot* B )
{
	static UFunction* pGetStatus = 0;
	ATeamGame_execGetStatus_Parms parms;

	if ( !pGetStatus )
		pGetStatus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.GetStatus" );

	parms.Sender = Sender;
	parms.B = B;
	this->ProcessEvent ( pGetStatus, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::ParseVoiceCommand ( class APlayerController* Sender, struct FString RecognizedString )
{
	static UFunction* pParseVoiceCommand = 0;
	ATeamGame_execParseVoiceCommand_Parms parms;

	if ( !pParseVoiceCommand )
		pParseVoiceCommand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.ParseVoiceCommand" );

	parms.Sender = Sender;
	parms.RecognizedString = RecognizedString;
	this->ProcessEvent ( pParseVoiceCommand, &parms, NULL );

}*/

/*void ATeamGame::ParseRecipients ( int* RecipientIDs, int* NumRecipients, struct FString* OrderString )
{
	static UFunction* pParseRecipients = 0;
	ATeamGame_execParseRecipients_Parms parms;

	if ( !pParseRecipients )
		pParseRecipients = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.ParseRecipients" );

	parms.RecipientIDs = *RecipientIDs;
	parms.NumRecipients = *NumRecipients;
	parms.OrderString = *OrderString;
	this->ProcessEvent ( pParseRecipients, &parms, NULL );

	*RecipientIDs = parms.RecipientIDs;
	*NumRecipients = parms.NumRecipients;
	*OrderString = parms.OrderString;
}*/

/*int ATeamGame::ParseRecipient ( struct FString Recipient )
{
	static UFunction* pParseRecipient = 0;
	ATeamGame_execParseRecipient_Parms parms;

	if ( !pParseRecipient )
		pParseRecipient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.ParseRecipient" );

	parms.Recipient = Recipient;
	this->ProcessEvent ( pParseRecipient, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ATeamGame::ApplyOrder ( class APlayerController* Sender, int RecipientID, int OrderID )
{
	static UFunction* pApplyOrder = 0;
	ATeamGame_execApplyOrder_Parms parms;

	if ( !pApplyOrder )
		pApplyOrder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.ApplyOrder" );

	parms.Sender = Sender;
	parms.RecipientID = RecipientID;
	parms.OrderID = OrderID;
	this->ProcessEvent ( pApplyOrder, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int ATeamGame::ParseOrder ( struct FString OrderString )
{
	static UFunction* pParseOrder = 0;
	ATeamGame_execParseOrder_Parms parms;

	if ( !pParseOrder )
		pParseOrder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.ParseOrder" );

	parms.OrderString = OrderString;
	this->ProcessEvent ( pParseOrder, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::StartMatch (  )
{
	static UFunction* pStartMatch = 0;
	ATeamGame_execStartMatch_Parms parms;

	if ( !pStartMatch )
		pStartMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.StartMatch" );

	this->ProcessEvent ( pStartMatch, &parms, NULL );

}*/

/*class TArray< int > ATeamGame::GetTeamScores (  )
{
	static UFunction* pGetTeamScores = 0;
	ATeamGame_execGetTeamScores_Parms parms;

	if ( !pGetTeamScores )
		pGetTeamScores = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.GetTeamScores" );

	this->ProcessEvent ( pGetTeamScores, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UClass* ATeamGame::GetWaitViewClass ( unsigned char Team )
{
	static UFunction* pGetWaitViewClass = 0;
	ATeamGame_execGetWaitViewClass_Parms parms;

	if ( !pGetWaitViewClass )
		pGetWaitViewClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.GetWaitViewClass" );

	parms.Team = Team;
	this->ProcessEvent ( pGetWaitViewClass, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamGame::eventSetGrammar (  )
{
	static UFunction* pSetGrammar = 0;
	ATeamGame_eventSetGrammar_Parms parms;

	if ( !pSetGrammar )
		pSetGrammar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.SetGrammar" );

	this->ProcessEvent ( pSetGrammar, &parms, NULL );

}*/

/*void ATeamGame::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	ATeamGame_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamGame.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*float ADestroyableObjective::GetObjectiveProgress (  )
{
	static UFunction* pGetObjectiveProgress = 0;
	ADestroyableObjective_execGetObjectiveProgress_Parms parms;

	if ( !pGetObjectiveProgress )
		pGetObjectiveProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.GetObjectiveProgress" );

	this->ProcessEvent ( pGetObjectiveProgress, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADestroyableObjective::IsCritical (  )
{
	static UFunction* pIsCritical = 0;
	ADestroyableObjective_execIsCritical_Parms parms;

	if ( !pIsCritical )
		pIsCritical = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.IsCritical" );

	this->ProcessEvent ( pIsCritical, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADestroyableObjective::TimerPop ( class AVolumeTimer* t )
{
	static UFunction* pTimerPop = 0;
	ADestroyableObjective_execTimerPop_Parms parms;

	if ( !pTimerPop )
		pTimerPop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.TimerPop" );

	parms.t = t;
	this->ProcessEvent ( pTimerPop, &parms, NULL );

}*/

/*void ADestroyableObjective::DisableObjective ( class APawn* Instigator )
{
	static UFunction* pDisableObjective = 0;
	ADestroyableObjective_execDisableObjective_Parms parms;

	if ( !pDisableObjective )
		pDisableObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.DisableObjective" );

	parms.Instigator = Instigator;
	this->ProcessEvent ( pDisableObjective, &parms, NULL );

}*/

/*bool ADestroyableObjective::HealDamage ( int Amount, class AController* Healer, class UClass* DamageType )
{
	static UFunction* pHealDamage = 0;
	ADestroyableObjective_execHealDamage_Parms parms;

	if ( !pHealDamage )
		pHealDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.HealDamage" );

	parms.Amount = Amount;
	parms.Healer = Healer;
	parms.DamageType = DamageType;
	this->ProcessEvent ( pHealDamage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADestroyableObjective::AwardAssaultScore ( int Score )
{
	static UFunction* pAwardAssaultScore = 0;
	ADestroyableObjective_execAwardAssaultScore_Parms parms;

	if ( !pAwardAssaultScore )
		pAwardAssaultScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.AwardAssaultScore" );

	parms.Score = Score;
	this->ProcessEvent ( pAwardAssaultScore, &parms, NULL );

}*/

/*void ADestroyableObjective::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
{
	static UFunction* pTakeDamage = 0;
	ADestroyableObjective_execTakeDamage_Parms parms;

	if ( !pTakeDamage )
		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.TakeDamage" );

	parms.Damage = Damage;
	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.Momentum = Momentum;
	parms.DamageType = DamageType;
	parms.CollisionPart = CollisionPart;
	parms.WeaponType = WeaponType;
	parms.bWallShot = bWallShot;
	this->ProcessEvent ( pTakeDamage, &parms, NULL );

}*/

/*void ADestroyableObjective::Reset (  )
{
	static UFunction* pReset = 0;
	ADestroyableObjective_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*bool ADestroyableObjective::TellBotHowToHeal ( class ABot* B )
{
	static UFunction* pTellBotHowToHeal = 0;
	ADestroyableObjective_execTellBotHowToHeal_Parms parms;

	if ( !pTellBotHowToHeal )
		pTellBotHowToHeal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.TellBotHowToHeal" );

	parms.B = B;
	this->ProcessEvent ( pTellBotHowToHeal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADestroyableObjective::NearObjective ( class APawn* P )
{
	static UFunction* pNearObjective = 0;
	ADestroyableObjective_execNearObjective_Parms parms;

	if ( !pNearObjective )
		pNearObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.NearObjective" );

	parms.P = P;
	this->ProcessEvent ( pNearObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADestroyableObjective::TellBotHowToDisable ( class ABot* B )
{
	static UFunction* pTellBotHowToDisable = 0;
	ADestroyableObjective_execTellBotHowToDisable_Parms parms;

	if ( !pTellBotHowToDisable )
		pTellBotHowToDisable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.TellBotHowToDisable" );

	parms.B = B;
	this->ProcessEvent ( pTellBotHowToDisable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADestroyableObjective::LegitimateTargetOf ( class ABot* B )
{
	static UFunction* pLegitimateTargetOf = 0;
	ADestroyableObjective_execLegitimateTargetOf_Parms parms;

	if ( !pLegitimateTargetOf )
		pLegitimateTargetOf = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.LegitimateTargetOf" );

	parms.B = B;
	this->ProcessEvent ( pLegitimateTargetOf, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADestroyableObjective::KillEnemyFirst ( class ABot* B )
{
	static UFunction* pKillEnemyFirst = 0;
	ADestroyableObjective_execKillEnemyFirst_Parms parms;

	if ( !pKillEnemyFirst )
		pKillEnemyFirst = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.KillEnemyFirst" );

	parms.B = B;
	this->ProcessEvent ( pKillEnemyFirst, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AActor* ADestroyableObjective::GetShootTarget (  )
{
	static UFunction* pGetShootTarget = 0;
	ADestroyableObjective_execGetShootTarget_Parms parms;

	if ( !pGetShootTarget )
		pGetShootTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.GetShootTarget" );

	this->ProcessEvent ( pGetShootTarget, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADestroyableObjective::TeamLink ( int TeamNum )
{
	static UFunction* pTeamLink = 0;
	ADestroyableObjective_execTeamLink_Parms parms;

	if ( !pTeamLink )
		pTeamLink = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.TeamLink" );

	parms.TeamNum = TeamNum;
	this->ProcessEvent ( pTeamLink, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADestroyableObjective::Destroyed (  )
{
	static UFunction* pDestroyed = 0;
	ADestroyableObjective_execDestroyed_Parms parms;

	if ( !pDestroyed )
		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.Destroyed" );

	this->ProcessEvent ( pDestroyed, &parms, NULL );

}*/

/*void ADestroyableObjective::SetDelayedDamageInstigatorController ( class AController* C )
{
	static UFunction* pSetDelayedDamageInstigatorController = 0;
	ADestroyableObjective_execSetDelayedDamageInstigatorController_Parms parms;

	if ( !pSetDelayedDamageInstigatorController )
		pSetDelayedDamageInstigatorController = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.SetDelayedDamageInstigatorController" );

	parms.C = C;
	this->ProcessEvent ( pSetDelayedDamageInstigatorController, &parms, NULL );

}*/

/*int ADestroyableObjective::eventSpecialCost ( class APawn* Other, class UReachSpec* Path )
{
	static UFunction* pSpecialCost = 0;
	ADestroyableObjective_eventSpecialCost_Parms parms;

	if ( !pSpecialCost )
		pSpecialCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.SpecialCost" );

	parms.Other = Other;
	parms.Path = Path;
	this->ProcessEvent ( pSpecialCost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADestroyableObjective::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	ADestroyableObjective_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DestroyableObjective.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*struct FVector ARestingFormation::GetViewPointFor ( class ABot* B, int pos )
{
	static UFunction* pGetViewPointFor = 0;
	ARestingFormation_execGetViewPointFor_Parms parms;

	if ( !pGetViewPointFor )
		pGetViewPointFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RestingFormation.GetViewPointFor" );

	parms.B = B;
	parms.pos = pos;
	this->ProcessEvent ( pGetViewPointFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FVector ARestingFormation::GetLocationFor ( int pos, class ABot* B )
{
	static UFunction* pGetLocationFor = 0;
	ARestingFormation_execGetLocationFor_Parms parms;

	if ( !pGetLocationFor )
		pGetLocationFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RestingFormation.GetLocationFor" );

	parms.pos = pos;
	parms.B = B;
	this->ProcessEvent ( pGetLocationFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int ARestingFormation::RecommendPositionFor ( class ABot* B )
{
	static UFunction* pRecommendPositionFor = 0;
	ARestingFormation_execRecommendPositionFor_Parms parms;

	if ( !pRecommendPositionFor )
		pRecommendPositionFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RestingFormation.RecommendPositionFor" );

	parms.B = B;
	this->ProcessEvent ( pRecommendPositionFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ARestingFormation::SetFormation ( class ABot* B, int pos, bool bFullCheck )
{
	static UFunction* pSetFormation = 0;
	ARestingFormation_execSetFormation_Parms parms;

	if ( !pSetFormation )
		pSetFormation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RestingFormation.SetFormation" );

	parms.B = B;
	parms.pos = pos;
	parms.bFullCheck = bFullCheck;
	this->ProcessEvent ( pSetFormation, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ARestingFormation::LeaveFormation ( class ABot* B )
{
	static UFunction* pLeaveFormation = 0;
	ARestingFormation_execLeaveFormation_Parms parms;

	if ( !pLeaveFormation )
		pLeaveFormation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.RestingFormation.LeaveFormation" );

	parms.B = B;
	this->ProcessEvent ( pLeaveFormation, &parms, NULL );

}*/

/*void AShootTarget::Trigger ( class AActor* Other, class APawn* EventInstigator )
{
	static UFunction* pTrigger = 0;
	AShootTarget_execTrigger_Parms parms;

	if ( !pTrigger )
		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.ShootTarget.Trigger" );

	parms.Other = Other;
	parms.EventInstigator = EventInstigator;
	this->ProcessEvent ( pTrigger, &parms, NULL );

}*/

/*void AShootTarget::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
{
	static UFunction* pTakeDamage = 0;
	AShootTarget_execTakeDamage_Parms parms;

	if ( !pTakeDamage )
		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.ShootTarget.TakeDamage" );

	parms.Damage = Damage;
	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.Momentum = Momentum;
	parms.DamageType = DamageType;
	parms.CollisionPart = CollisionPart;
	parms.WeaponType = WeaponType;
	parms.bWallShot = bWallShot;
	this->ProcessEvent ( pTakeDamage, &parms, NULL );

}*/

/*bool AProximityObjective::TellBotHowToDisable ( class ABot* B )
{
	static UFunction* pTellBotHowToDisable = 0;
	AProximityObjective_execTellBotHowToDisable_Parms parms;

	if ( !pTellBotHowToDisable )
		pTellBotHowToDisable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.ProximityObjective.TellBotHowToDisable" );

	parms.B = B;
	this->ProcessEvent ( pTellBotHowToDisable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AProximityObjective::SetActive ( bool bActiveStatus )
{
	static UFunction* pSetActive = 0;
	AProximityObjective_execSetActive_Parms parms;

	if ( !pSetActive )
		pSetActive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.ProximityObjective.SetActive" );

	parms.bActiveStatus = bActiveStatus;
	this->ProcessEvent ( pSetActive, &parms, NULL );

}*/

/*class APawn* AProximityObjective::FindInstigator ( class APawn* Other )
{
	static UFunction* pFindInstigator = 0;
	AProximityObjective_execFindInstigator_Parms parms;

	if ( !pFindInstigator )
		pFindInstigator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.ProximityObjective.FindInstigator" );

	parms.Other = Other;
	this->ProcessEvent ( pFindInstigator, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AProximityObjective::IsRelevant ( class APawn* P, bool bAliveCheck )
{
	static UFunction* pIsRelevant = 0;
	AProximityObjective_execIsRelevant_Parms parms;

	if ( !pIsRelevant )
		pIsRelevant = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.ProximityObjective.IsRelevant" );

	parms.P = P;
	parms.bAliveCheck = bAliveCheck;
	this->ProcessEvent ( pIsRelevant, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AProximityObjective::Touch ( class AActor* Other )
{
	static UFunction* pTouch = 0;
	AProximityObjective_execTouch_Parms parms;

	if ( !pTouch )
		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.ProximityObjective.Touch" );

	parms.Other = Other;
	this->ProcessEvent ( pTouch, &parms, NULL );

}*/

/*void AHoldObjective::UpdatePrecacheMaterials (  )
{
	static UFunction* pUpdatePrecacheMaterials = 0;
	AHoldObjective_execUpdatePrecacheMaterials_Parms parms;

	if ( !pUpdatePrecacheMaterials )
		pUpdatePrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.UpdatePrecacheMaterials" );

	this->ProcessEvent ( pUpdatePrecacheMaterials, &parms, NULL );

}*/

/*void AHoldObjective::SetObjectiveOverlay ( bool bShow )
{
	static UFunction* pSetObjectiveOverlay = 0;
	AHoldObjective_execSetObjectiveOverlay_Parms parms;

	if ( !pSetObjectiveOverlay )
		pSetObjectiveOverlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.SetObjectiveOverlay" );

	parms.bShow = bShow;
	this->ProcessEvent ( pSetObjectiveOverlay, &parms, NULL );

}*/

/*bool AHoldObjective::IsCritical (  )
{
	static UFunction* pIsCritical = 0;
	AHoldObjective_execIsCritical_Parms parms;

	if ( !pIsCritical )
		pIsCritical = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.IsCritical" );

	this->ProcessEvent ( pIsCritical, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AHoldObjective::GetObjectiveProgress (  )
{
	static UFunction* pGetObjectiveProgress = 0;
	AHoldObjective_execGetObjectiveProgress_Parms parms;

	if ( !pGetObjectiveProgress )
		pGetObjectiveProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.GetObjectiveProgress" );

	this->ProcessEvent ( pGetObjectiveProgress, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AHoldObjective::Reset (  )
{
	static UFunction* pReset = 0;
	AHoldObjective_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AHoldObjective::CompleteObjective ( class APawn* Instigator )
{
	static UFunction* pCompleteObjective = 0;
	AHoldObjective_execCompleteObjective_Parms parms;

	if ( !pCompleteObjective )
		pCompleteObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.CompleteObjective" );

	parms.Instigator = Instigator;
	this->ProcessEvent ( pCompleteObjective, &parms, NULL );

}*/

/*void AHoldObjective::Trigger ( class AActor* Other, class APawn* Instigator )
{
	static UFunction* pTrigger = 0;
	AHoldObjective_execTrigger_Parms parms;

	if ( !pTrigger )
		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.Trigger" );

	parms.Other = Other;
	parms.Instigator = Instigator;
	this->ProcessEvent ( pTrigger, &parms, NULL );

}*/

/*void AHoldObjective::AwardAssaultScore ( int Score )
{
	static UFunction* pAwardAssaultScore = 0;
	AHoldObjective_execAwardAssaultScore_Parms parms;

	if ( !pAwardAssaultScore )
		pAwardAssaultScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.AwardAssaultScore" );

	parms.Score = Score;
	this->ProcessEvent ( pAwardAssaultScore, &parms, NULL );

}*/

/*void AHoldObjective::RemoveTouchingPlayer ( class AController* C )
{
	static UFunction* pRemoveTouchingPlayer = 0;
	AHoldObjective_execRemoveTouchingPlayer_Parms parms;

	if ( !pRemoveTouchingPlayer )
		pRemoveTouchingPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.RemoveTouchingPlayer" );

	parms.C = C;
	this->ProcessEvent ( pRemoveTouchingPlayer, &parms, NULL );

}*/

/*void AHoldObjective::AddNewTouchingPlayer ( class AController* C )
{
	static UFunction* pAddNewTouchingPlayer = 0;
	AHoldObjective_execAddNewTouchingPlayer_Parms parms;

	if ( !pAddNewTouchingPlayer )
		pAddNewTouchingPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.AddNewTouchingPlayer" );

	parms.C = C;
	this->ProcessEvent ( pAddNewTouchingPlayer, &parms, NULL );

}*/

/*void AHoldObjective::PlayerToucherDied ( class APawn* P )
{
	static UFunction* pPlayerToucherDied = 0;
	AHoldObjective_execPlayerToucherDied_Parms parms;

	if ( !pPlayerToucherDied )
		pPlayerToucherDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.PlayerToucherDied" );

	parms.P = P;
	this->ProcessEvent ( pPlayerToucherDied, &parms, NULL );

}*/

/*void AHoldObjective::eventUnTouch ( class AActor* Other )
{
	static UFunction* pUnTouch = 0;
	AHoldObjective_eventUnTouch_Parms parms;

	if ( !pUnTouch )
		pUnTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.UnTouch" );

	parms.Other = Other;
	this->ProcessEvent ( pUnTouch, &parms, NULL );

}*/

/*void AHoldObjective::eventTouch ( class AActor* Other )
{
	static UFunction* pTouch = 0;
	AHoldObjective_eventTouch_Parms parms;

	if ( !pTouch )
		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.Touch" );

	parms.Other = Other;
	this->ProcessEvent ( pTouch, &parms, NULL );

}*/

/*bool AHoldObjective::TellBotHowToDisable ( class ABot* B )
{
	static UFunction* pTellBotHowToDisable = 0;
	AHoldObjective_execTellBotHowToDisable_Parms parms;

	if ( !pTellBotHowToDisable )
		pTellBotHowToDisable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.TellBotHowToDisable" );

	parms.B = B;
	this->ProcessEvent ( pTellBotHowToDisable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AHoldObjective::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AHoldObjective_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.HoldObjective.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void ATeamAI::RemoveFromTeam ( class AController* Other )
{
	static UFunction* pRemoveFromTeam = 0;
	ATeamAI_execRemoveFromTeam_Parms parms;

	if ( !pRemoveFromTeam )
		pRemoveFromTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.RemoveFromTeam" );

	parms.Other = Other;
	this->ProcessEvent ( pRemoveFromTeam, &parms, NULL );

}*/

/*void ATeamAI::CallForHelp ( class ABot* B )
{
	static UFunction* pCallForHelp = 0;
	ATeamAI_execCallForHelp_Parms parms;

	if ( !pCallForHelp )
		pCallForHelp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.CallForHelp" );

	parms.B = B;
	this->ProcessEvent ( pCallForHelp, &parms, NULL );

}*/

/*void ATeamAI::SetOrders ( class ABot* B, struct FName NewOrders, class AController* OrderGiver )
{
	static UFunction* pSetOrders = 0;
	ATeamAI_execSetOrders_Parms parms;

	if ( !pSetOrders )
		pSetOrders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.SetOrders" );

	parms.B = B;
	parms.NewOrders = NewOrders;
	parms.OrderGiver = OrderGiver;
	this->ProcessEvent ( pSetOrders, &parms, NULL );

}*/

/*void ATeamAI::SetBotOrders ( class ABot* NewBot, class URosterEntry* R )
{
	static UFunction* pSetBotOrders = 0;
	ATeamAI_execSetBotOrders_Parms parms;

	if ( !pSetBotOrders )
		pSetBotOrders = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.SetBotOrders" );

	parms.NewBot = NewBot;
	parms.R = R;
	this->ProcessEvent ( pSetBotOrders, &parms, NULL );

}*/

/*void ATeamAI::PutOnFreelance ( class ABot* B )
{
	static UFunction* pPutOnFreelance = 0;
	ATeamAI_execPutOnFreelance_Parms parms;

	if ( !pPutOnFreelance )
		pPutOnFreelance = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.PutOnFreelance" );

	parms.B = B;
	this->ProcessEvent ( pPutOnFreelance, &parms, NULL );

}*/

/*void ATeamAI::PutOnOffense ( class ABot* B )
{
	static UFunction* pPutOnOffense = 0;
	ATeamAI_execPutOnOffense_Parms parms;

	if ( !pPutOnOffense )
		pPutOnOffense = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.PutOnOffense" );

	parms.B = B;
	this->ProcessEvent ( pPutOnOffense, &parms, NULL );

}*/

/*bool ATeamAI::PutOnDefense ( class ABot* B )
{
	static UFunction* pPutOnDefense = 0;
	ATeamAI_execPutOnDefense_Parms parms;

	if ( !pPutOnDefense )
		pPutOnDefense = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.PutOnDefense" );

	parms.B = B;
	this->ProcessEvent ( pPutOnDefense, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AGameObjective* ATeamAI::GetPriorityFreelanceObjective (  )
{
	static UFunction* pGetPriorityFreelanceObjective = 0;
	ATeamAI_execGetPriorityFreelanceObjective_Parms parms;

	if ( !pGetPriorityFreelanceObjective )
		pGetPriorityFreelanceObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.GetPriorityFreelanceObjective" );

	this->ProcessEvent ( pGetPriorityFreelanceObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AGameObjective* ATeamAI::GetPriorityAttackObjectiveFor ( class ASquadAI* AttackSquad )
{
	static UFunction* pGetPriorityAttackObjectiveFor = 0;
	ATeamAI_execGetPriorityAttackObjectiveFor_Parms parms;

	if ( !pGetPriorityAttackObjectiveFor )
		pGetPriorityAttackObjectiveFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.GetPriorityAttackObjectiveFor" );

	parms.AttackSquad = AttackSquad;
	this->ProcessEvent ( pGetPriorityAttackObjectiveFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AGameObjective* ATeamAI::GetPriorityAttackObjective (  )
{
	static UFunction* pGetPriorityAttackObjective = 0;
	ATeamAI_execGetPriorityAttackObjective_Parms parms;

	if ( !pGetPriorityAttackObjective )
		pGetPriorityAttackObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.GetPriorityAttackObjective" );

	this->ProcessEvent ( pGetPriorityAttackObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AGameObjective* ATeamAI::GetMostDefendedObjective (  )
{
	static UFunction* pGetMostDefendedObjective = 0;
	ATeamAI_execGetMostDefendedObjective_Parms parms;

	if ( !pGetMostDefendedObjective )
		pGetMostDefendedObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.GetMostDefendedObjective" );

	this->ProcessEvent ( pGetMostDefendedObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AGameObjective* ATeamAI::GetLeastDefendedObjective (  )
{
	static UFunction* pGetLeastDefendedObjective = 0;
	ATeamAI_execGetLeastDefendedObjective_Parms parms;

	if ( !pGetLeastDefendedObjective )
		pGetLeastDefendedObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.GetLeastDefendedObjective" );

	this->ProcessEvent ( pGetLeastDefendedObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class ASquadAI* ATeamAI::AddSquadWithLeader ( class AController* C, class AGameObjective* o )
{
	static UFunction* pAddSquadWithLeader = 0;
	ATeamAI_execAddSquadWithLeader_Parms parms;

	if ( !pAddSquadWithLeader )
		pAddSquadWithLeader = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.AddSquadWithLeader" );

	parms.C = C;
	parms.o = o;
	this->ProcessEvent ( pAddSquadWithLeader, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamAI::PutBotOnSquadLedBy ( class AController* C, class ABot* B )
{
	static UFunction* pPutBotOnSquadLedBy = 0;
	ATeamAI_execPutBotOnSquadLedBy_Parms parms;

	if ( !pPutBotOnSquadLedBy )
		pPutBotOnSquadLedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.PutBotOnSquadLedBy" );

	parms.C = C;
	parms.B = B;
	this->ProcessEvent ( pPutBotOnSquadLedBy, &parms, NULL );

}*/

/*class ASquadAI* ATeamAI::AddHumanSquad (  )
{
	static UFunction* pAddHumanSquad = 0;
	ATeamAI_execAddHumanSquad_Parms parms;

	if ( !pAddHumanSquad )
		pAddHumanSquad = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.AddHumanSquad" );

	this->ProcessEvent ( pAddHumanSquad, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class ASquadAI* ATeamAI::FindHumanSquad (  )
{
	static UFunction* pFindHumanSquad = 0;
	ATeamAI_execFindHumanSquad_Parms parms;

	if ( !pFindHumanSquad )
		pFindHumanSquad = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.FindHumanSquad" );

	this->ProcessEvent ( pFindHumanSquad, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamAI::SetObjectiveLists (  )
{
	static UFunction* pSetObjectiveLists = 0;
	ATeamAI_execSetObjectiveLists_Parms parms;

	if ( !pSetObjectiveLists )
		pSetObjectiveLists = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.SetObjectiveLists" );

	this->ProcessEvent ( pSetObjectiveLists, &parms, NULL );

}*/

/*bool ATeamAI::FriendlyToward ( class APawn* Other )
{
	static UFunction* pFriendlyToward = 0;
	ATeamAI_execFriendlyToward_Parms parms;

	if ( !pFriendlyToward )
		pFriendlyToward = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.FriendlyToward" );

	parms.Other = Other;
	this->ProcessEvent ( pFriendlyToward, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class ASquadAI* ATeamAI::FindSquadOf ( class AController* C )
{
	static UFunction* pFindSquadOf = 0;
	ATeamAI_execFindSquadOf_Parms parms;

	if ( !pFindSquadOf )
		pFindSquadOf = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.FindSquadOf" );

	parms.C = C;
	this->ProcessEvent ( pFindSquadOf, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ATeamAI::OnThisTeam ( class APawn* Other )
{
	static UFunction* pOnThisTeam = 0;
	ATeamAI_execOnThisTeam_Parms parms;

	if ( !pOnThisTeam )
		pOnThisTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.OnThisTeam" );

	parms.Other = Other;
	this->ProcessEvent ( pOnThisTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamAI::RemoveSquad ( class ASquadAI* Squad )
{
	static UFunction* pRemoveSquad = 0;
	ATeamAI_execRemoveSquad_Parms parms;

	if ( !pRemoveSquad )
		pRemoveSquad = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.RemoveSquad" );

	parms.Squad = Squad;
	this->ProcessEvent ( pRemoveSquad, &parms, NULL );

}*/

/*void ATeamAI::FindNewObjectiveFor ( class ASquadAI* S, bool bForceUpdate )
{
	static UFunction* pFindNewObjectiveFor = 0;
	ATeamAI_execFindNewObjectiveFor_Parms parms;

	if ( !pFindNewObjectiveFor )
		pFindNewObjectiveFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.FindNewObjectiveFor" );

	parms.S = S;
	parms.bForceUpdate = bForceUpdate;
	this->ProcessEvent ( pFindNewObjectiveFor, &parms, NULL );

}*/

/*void ATeamAI::FindNewObjectives ( class AGameObjective* DisabledObjective )
{
	static UFunction* pFindNewObjectives = 0;
	ATeamAI_execFindNewObjectives_Parms parms;

	if ( !pFindNewObjectives )
		pFindNewObjectives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.FindNewObjectives" );

	parms.DisabledObjective = DisabledObjective;
	this->ProcessEvent ( pFindNewObjectives, &parms, NULL );

}*/

/*void ATeamAI::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
{
	static UFunction* pNotifyKilled = 0;
	ATeamAI_execNotifyKilled_Parms parms;

	if ( !pNotifyKilled )
		pNotifyKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.NotifyKilled" );

	parms.Killer = Killer;
	parms.Killed = Killed;
	parms.KilledPawn = KilledPawn;
	this->ProcessEvent ( pNotifyKilled, &parms, NULL );

}*/

/*void ATeamAI::ReAssessStrategy (  )
{
	static UFunction* pReAssessStrategy = 0;
	ATeamAI_execReAssessStrategy_Parms parms;

	if ( !pReAssessStrategy )
		pReAssessStrategy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.ReAssessStrategy" );

	this->ProcessEvent ( pReAssessStrategy, &parms, NULL );

}*/

/*class ASquadAI* ATeamAI::GetSquadLedBy ( class AController* C )
{
	static UFunction* pGetSquadLedBy = 0;
	ATeamAI_execGetSquadLedBy_Parms parms;

	if ( !pGetSquadLedBy )
		pGetSquadLedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.GetSquadLedBy" );

	parms.C = C;
	this->ProcessEvent ( pGetSquadLedBy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamAI::ClearEnemies (  )
{
	static UFunction* pClearEnemies = 0;
	ATeamAI_execClearEnemies_Parms parms;

	if ( !pClearEnemies )
		pClearEnemies = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.ClearEnemies" );

	this->ProcessEvent ( pClearEnemies, &parms, NULL );

}*/

/*void ATeamAI::Reset (  )
{
	static UFunction* pReset = 0;
	ATeamAI_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*bool ATeamAI::SuperPickupAvailable ( class ABot* B )
{
	static UFunction* pSuperPickupAvailable = 0;
	ATeamAI_execSuperPickupAvailable_Parms parms;

	if ( !pSuperPickupAvailable )
		pSuperPickupAvailable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.SuperPickupAvailable" );

	parms.B = B;
	this->ProcessEvent ( pSuperPickupAvailable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamAI::CallForBall ( class APawn* Recipient )
{
	static UFunction* pCallForBall = 0;
	ATeamAI_execCallForBall_Parms parms;

	if ( !pCallForBall )
		pCallForBall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.CallForBall" );

	parms.Recipient = Recipient;
	this->ProcessEvent ( pCallForBall, &parms, NULL );

}*/

/*void ATeamAI::CriticalObjectiveWarning ( class AGameObjective* G, class APawn* NewEnemy )
{
	static UFunction* pCriticalObjectiveWarning = 0;
	ATeamAI_execCriticalObjectiveWarning_Parms parms;

	if ( !pCriticalObjectiveWarning )
		pCriticalObjectiveWarning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.CriticalObjectiveWarning" );

	parms.G = G;
	parms.NewEnemy = NewEnemy;
	this->ProcessEvent ( pCriticalObjectiveWarning, &parms, NULL );

}*/

/*void ATeamAI::Timer (  )
{
	static UFunction* pTimer = 0;
	ATeamAI_execTimer_Parms parms;

	if ( !pTimer )
		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.Timer" );

	this->ProcessEvent ( pTimer, &parms, NULL );

}*/

/*void ATeamAI::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	ATeamAI_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamAI.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*class AAssaultPath* AAssaultPath::FindPreviousPath ( struct FName AlternatePathTag )
{
	static UFunction* pFindPreviousPath = 0;
	AAssaultPath_execFindPreviousPath_Parms parms;

	if ( !pFindPreviousPath )
		pFindPreviousPath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.AssaultPath.FindPreviousPath" );

	parms.AlternatePathTag = AlternatePathTag;
	this->ProcessEvent ( pFindPreviousPath, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AAssaultPath* AAssaultPath::FindNextPath ( struct FName AlternatePathTag )
{
	static UFunction* pFindNextPath = 0;
	AAssaultPath_execFindNextPath_Parms parms;

	if ( !pFindNextPath )
		pFindNextPath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.AssaultPath.FindNextPath" );

	parms.AlternatePathTag = AlternatePathTag;
	this->ProcessEvent ( pFindNextPath, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AAssaultPath::HasPathTag ( struct FName aPathTag )
{
	static UFunction* pHasPathTag = 0;
	AAssaultPath_execHasPathTag_Parms parms;

	if ( !pHasPathTag )
		pHasPathTag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.AssaultPath.HasPathTag" );

	parms.aPathTag = aPathTag;
	this->ProcessEvent ( pHasPathTag, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FName AAssaultPath::PickTag (  )
{
	static UFunction* pPickTag = 0;
	AAssaultPath_execPickTag_Parms parms;

	if ( !pPickTag )
		pPickTag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.AssaultPath.PickTag" );

	this->ProcessEvent ( pPickTag, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AAssaultPath::AddTo ( class AGameObjective* o )
{
	static UFunction* pAddTo = 0;
	AAssaultPath_execAddTo_Parms parms;

	if ( !pAddTo )
		pAddTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.AssaultPath.AddTo" );

	parms.o = o;
	this->ProcessEvent ( pAddTo, &parms, NULL );

}*/

/*void AAssaultPath::ValidatePathTags (  )
{
	static UFunction* pValidatePathTags = 0;
	AAssaultPath_execValidatePathTags_Parms parms;

	if ( !pValidatePathTags )
		pValidatePathTags = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.AssaultPath.ValidatePathTags" );

	this->ProcessEvent ( pValidatePathTags, &parms, NULL );

}*/

/*void AAssaultPath::eventTrigger ( class AActor* Other, class APawn* EventInstigator )
{
	static UFunction* pTrigger = 0;
	AAssaultPath_eventTrigger_Parms parms;

	if ( !pTrigger )
		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.AssaultPath.Trigger" );

	parms.Other = Other;
	parms.EventInstigator = EventInstigator;
	this->ProcessEvent ( pTrigger, &parms, NULL );

}*/

/*bool AUnrealChatHandler::AcceptBroadcastVoice ( class APlayerController* Receiver, class APlayerReplicationInfo* Sender )
{
	static UFunction* pAcceptBroadcastVoice = 0;
	AUnrealChatHandler_execAcceptBroadcastVoice_Parms parms;

	if ( !pAcceptBroadcastVoice )
		pAcceptBroadcastVoice = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatHandler.AcceptBroadcastVoice" );

	parms.Receiver = Receiver;
	parms.Sender = Sender;
	this->ProcessEvent ( pAcceptBroadcastVoice, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealChatHandler::AcceptBroadcastSpeech ( class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI )
{
	static UFunction* pAcceptBroadcastSpeech = 0;
	AUnrealChatHandler_execAcceptBroadcastSpeech_Parms parms;

	if ( !pAcceptBroadcastSpeech )
		pAcceptBroadcastSpeech = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatHandler.AcceptBroadcastSpeech" );

	parms.Receiver = Receiver;
	parms.SenderPRI = SenderPRI;
	this->ProcessEvent ( pAcceptBroadcastSpeech, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealChatHandler::AcceptBroadcastLocalized ( class APlayerController* Receiver, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* obj )
{
	static UFunction* pAcceptBroadcastLocalized = 0;
	AUnrealChatHandler_execAcceptBroadcastLocalized_Parms parms;

	if ( !pAcceptBroadcastLocalized )
		pAcceptBroadcastLocalized = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatHandler.AcceptBroadcastLocalized" );

	parms.Receiver = Receiver;
	parms.Sender = Sender;
	parms.Message = Message;
	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.obj = obj;
	this->ProcessEvent ( pAcceptBroadcastLocalized, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealChatHandler::AcceptBroadcastText ( class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI, struct FName Type, struct FString* Msg )
{
	static UFunction* pAcceptBroadcastText = 0;
	AUnrealChatHandler_execAcceptBroadcastText_Parms parms;

	if ( !pAcceptBroadcastText )
		pAcceptBroadcastText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatHandler.AcceptBroadcastText" );

	parms.Receiver = Receiver;
	parms.SenderPRI = SenderPRI;
	parms.Type = Type;
	this->ProcessEvent ( pAcceptBroadcastText, &parms, NULL );

	*Msg = parms.Msg;
	return parms.ReturnValue;
}*/

/*void AUnrealChatHandler::DoChatDebug (  )
{
	static UFunction* pDoChatDebug = 0;
	AUnrealChatHandler_execDoChatDebug_Parms parms;

	if ( !pDoChatDebug )
		pDoChatDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatHandler.DoChatDebug" );

	this->ProcessEvent ( pDoChatDebug, &parms, NULL );

}*/

/*void AUnrealChatHandler::ToggleChatDebug (  )
{
	static UFunction* pToggleChatDebug = 0;
	AUnrealChatHandler_execToggleChatDebug_Parms parms;

	if ( !pToggleChatDebug )
		pToggleChatDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatHandler.ToggleChatDebug" );

	this->ProcessEvent ( pToggleChatDebug, &parms, NULL );

}*/

/*struct FString AIdleKickWarningMessage::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pGetString = 0;
	AIdleKickWarningMessage_execGetString_Parms parms;

	if ( !pGetString )
		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.IdleKickWarningMessage.GetString" );

	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pGetString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AAnnounceAdrenaline::Timer (  )
{
	static UFunction* pTimer = 0;
	AAnnounceAdrenaline_execTimer_Parms parms;

	if ( !pTimer )
		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.AnnounceAdrenaline.Timer" );

	this->ProcessEvent ( pTimer, &parms, NULL );

}*/

/*int UCustomBotConfig::IndexFor ( struct FString PlayerName )
{
	static UFunction* pIndexFor = 0;
	UCustomBotConfig_execIndexFor_Parms parms;

	if ( !pIndexFor )
		pIndexFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.CustomBotConfig.IndexFor" );

	parms.PlayerName = PlayerName;
	this->ProcessEvent ( pIndexFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UCustomBotConfig::AggressivenessRating ( struct FCustomConfiguration cc )
{
	static UFunction* pAggressivenessRating = 0;
	UCustomBotConfig_execAggressivenessRating_Parms parms;

	if ( !pAggressivenessRating )
		pAggressivenessRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.CustomBotConfig.AggressivenessRating" );

	parms.cc = cc;
	this->ProcessEvent ( pAggressivenessRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UCustomBotConfig::TacticsRating ( struct FCustomConfiguration cc )
{
	static UFunction* pTacticsRating = 0;
	UCustomBotConfig_execTacticsRating_Parms parms;

	if ( !pTacticsRating )
		pTacticsRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.CustomBotConfig.TacticsRating" );

	parms.cc = cc;
	this->ProcessEvent ( pTacticsRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UCustomBotConfig::AgilityRating ( struct FCustomConfiguration cc )
{
	static UFunction* pAgilityRating = 0;
	UCustomBotConfig_execAgilityRating_Parms parms;

	if ( !pAgilityRating )
		pAgilityRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.CustomBotConfig.AgilityRating" );

	parms.cc = cc;
	this->ProcessEvent ( pAgilityRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UCustomBotConfig::AccuracyRating ( struct FCustomConfiguration cc )
{
	static UFunction* pAccuracyRating = 0;
	UCustomBotConfig_execAccuracyRating_Parms parms;

	if ( !pAccuracyRating )
		pAccuracyRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.CustomBotConfig.AccuracyRating" );

	parms.cc = cc;
	this->ProcessEvent ( pAccuracyRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UCustomBotConfig::RatingModifier ( struct FString CharacterName )
{
	static UFunction* pRatingModifier = 0;
	UCustomBotConfig_execRatingModifier_Parms parms;

	if ( !pRatingModifier )
		pRatingModifier = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.CustomBotConfig.RatingModifier" );

	parms.CharacterName = CharacterName;
	this->ProcessEvent ( pRatingModifier, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UCustomBotConfig::GetFavoriteWeaponFor ( struct FCustomConfiguration cc )
{
	static UFunction* pGetFavoriteWeaponFor = 0;
	UCustomBotConfig_execGetFavoriteWeaponFor_Parms parms;

	if ( !pGetFavoriteWeaponFor )
		pGetFavoriteWeaponFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.CustomBotConfig.GetFavoriteWeaponFor" );

	parms.cc = cc;
	this->ProcessEvent ( pGetFavoriteWeaponFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UCustomBotConfig::Customize ( class URosterEntry* R )
{
	static UFunction* pCustomize = 0;
	UCustomBotConfig_execCustomize_Parms parms;

	if ( !pCustomize )
		pCustomize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.CustomBotConfig.Customize" );

	parms.R = R;
	this->ProcessEvent ( pCustomize, &parms, NULL );

}*/

/*bool AUnrealChatRoom::RemoveChild ( class AVoiceChatRoom* Child )
{
	static UFunction* pRemoveChild = 0;
	AUnrealChatRoom_execRemoveChild_Parms parms;

	if ( !pRemoveChild )
		pRemoveChild = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.RemoveChild" );

	parms.Child = Child;
	this->ProcessEvent ( pRemoveChild, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealChatRoom::AddChild ( class AVoiceChatRoom* NewChild )
{
	static UFunction* pAddChild = 0;
	AUnrealChatRoom_execAddChild_Parms parms;

	if ( !pAddChild )
		pAddChild = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.AddChild" );

	parms.NewChild = NewChild;
	this->ProcessEvent ( pAddChild, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealChatRoom::SetMask ( int NewMask )
{
	static UFunction* pSetMask = 0;
	AUnrealChatRoom_execSetMask_Parms parms;

	if ( !pSetMask )
		pSetMask = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.SetMask" );

	parms.NewMask = NewMask;
	this->ProcessEvent ( pSetMask, &parms, NULL );

}*/

/*void AUnrealChatRoom::SetTeam ( int NewTeam )
{
	static UFunction* pSetTeam = 0;
	AUnrealChatRoom_execSetTeam_Parms parms;

	if ( !pSetTeam )
		pSetTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.SetTeam" );

	parms.NewTeam = NewTeam;
	this->ProcessEvent ( pSetTeam, &parms, NULL );

}*/

/*bool AUnrealChatRoom::IsBanned ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pIsBanned = 0;
	AUnrealChatRoom_execIsBanned_Parms parms;

	if ( !pIsBanned )
		pIsBanned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.IsBanned" );

	parms.PRI = PRI;
	this->ProcessEvent ( pIsBanned, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealChatRoom::RemoveMember ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pRemoveMember = 0;
	AUnrealChatRoom_execRemoveMember_Parms parms;

	if ( !pRemoveMember )
		pRemoveMember = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.RemoveMember" );

	parms.PRI = PRI;
	this->ProcessEvent ( pRemoveMember, &parms, NULL );

}*/

/*void AUnrealChatRoom::AddMember ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pAddMember = 0;
	AUnrealChatRoom_execAddMember_Parms parms;

	if ( !pAddMember )
		pAddMember = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.AddMember" );

	parms.PRI = PRI;
	this->ProcessEvent ( pAddMember, &parms, NULL );

}*/

/*bool AUnrealChatRoom::LeaveChannel ( class APlayerReplicationInfo* LeavingPRI )
{
	static UFunction* pLeaveChannel = 0;
	AUnrealChatRoom_execLeaveChannel_Parms parms;

	if ( !pLeaveChannel )
		pLeaveChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.LeaveChannel" );

	parms.LeavingPRI = LeavingPRI;
	this->ProcessEvent ( pLeaveChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char AUnrealChatRoom::JoinChannel ( class APlayerReplicationInfo* NewPRI, struct FString InPassword )
{
	static UFunction* pJoinChannel = 0;
	AUnrealChatRoom_execJoinChannel_Parms parms;

	if ( !pJoinChannel )
		pJoinChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.JoinChannel" );

	parms.NewPRI = NewPRI;
	parms.InPassword = InPassword;
	this->ProcessEvent ( pJoinChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealChatRoom::CanJoinChannel ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pCanJoinChannel = 0;
	AUnrealChatRoom_execCanJoinChannel_Parms parms;

	if ( !pCanJoinChannel )
		pCanJoinChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.CanJoinChannel" );

	parms.PRI = PRI;
	this->ProcessEvent ( pCanJoinChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealChatRoom::eventIsMember ( class APlayerReplicationInfo* PRI, bool bNoCascade )
{
	static UFunction* pIsMember = 0;
	AUnrealChatRoom_eventIsMember_Parms parms;

	if ( !pIsMember )
		pIsMember = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.IsMember" );

	parms.PRI = PRI;
	parms.bNoCascade = bNoCascade;
	this->ProcessEvent ( pIsMember, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealChatRoom::IsFull (  )
{
	static UFunction* pIsFull = 0;
	AUnrealChatRoom_execIsFull_Parms parms;

	if ( !pIsFull )
		pIsFull = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.IsFull" );

	this->ProcessEvent ( pIsFull, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUnrealChatRoom::Count (  )
{
	static UFunction* pCount = 0;
	AUnrealChatRoom_execCount_Parms parms;

	if ( !pCount )
		pCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.Count" );

	this->ProcessEvent ( pCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealChatRoom::IsPrivateChannel (  )
{
	static UFunction* pIsPrivateChannel = 0;
	AUnrealChatRoom_execIsPrivateChannel_Parms parms;

	if ( !pIsPrivateChannel )
		pIsPrivateChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.IsPrivateChannel" );

	this->ProcessEvent ( pIsPrivateChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealChatRoom::IsPublicChannel (  )
{
	static UFunction* pIsPublicChannel = 0;
	AUnrealChatRoom_execIsPublicChannel_Parms parms;

	if ( !pIsPublicChannel )
		pIsPublicChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.IsPublicChannel" );

	this->ProcessEvent ( pIsPublicChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class TArray< class APlayerReplicationInfo* > AUnrealChatRoom::GetMembers (  )
{
	static UFunction* pGetMembers = 0;
	AUnrealChatRoom_execGetMembers_Parms parms;

	if ( !pGetMembers )
		pGetMembers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.GetMembers" );

	this->ProcessEvent ( pGetMembers, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AUnrealChatRoom::GetPassword (  )
{
	static UFunction* pGetPassword = 0;
	AUnrealChatRoom_execGetPassword_Parms parms;

	if ( !pGetPassword )
		pGetPassword = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.GetPassword" );

	this->ProcessEvent ( pGetPassword, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUnrealChatRoom::GetTeam (  )
{
	static UFunction* pGetTeam = 0;
	AUnrealChatRoom_execGetTeam_Parms parms;

	if ( !pGetTeam )
		pGetTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.GetTeam" );

	this->ProcessEvent ( pGetTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AUnrealChatRoom::GetTitle (  )
{
	static UFunction* pGetTitle = 0;
	AUnrealChatRoom_execGetTitle_Parms parms;

	if ( !pGetTitle )
		pGetTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.GetTitle" );

	this->ProcessEvent ( pGetTitle, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUnrealChatRoom::GetMask (  )
{
	static UFunction* pGetMask = 0;
	AUnrealChatRoom_execGetMask_Parms parms;

	if ( !pGetMask )
		pGetMask = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.GetMask" );

	this->ProcessEvent ( pGetMask, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealChatRoom::eventPostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AUnrealChatRoom_eventPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AUnrealChatRoom::eventTimer (  )
{
	static UFunction* pTimer = 0;
	AUnrealChatRoom_eventTimer_Parms parms;

	if ( !pTimer )
		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.Timer" );

	this->ProcessEvent ( pTimer, &parms, NULL );

}*/

/*void AUnrealChatRoom::SetGRI ( class AGameReplicationInfo* InGRI )
{
	static UFunction* pSetGRI = 0;
	AUnrealChatRoom_execSetGRI_Parms parms;

	if ( !pSetGRI )
		pSetGRI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealChatRoom.SetGRI" );

	parms.InGRI = InGRI;
	this->ProcessEvent ( pSetGRI, &parms, NULL );

}*/

/*void ASnipingVolume::eventTouch ( class AActor* Other )
{
	static UFunction* pTouch = 0;
	ASnipingVolume_eventTouch_Parms parms;

	if ( !pTouch )
		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SnipingVolume.Touch" );

	parms.Other = Other;
	this->ProcessEvent ( pTouch, &parms, NULL );

}*/

/*void ASnipingVolume::AddDefensePoint ( class AUnrealScriptedSequence* S )
{
	static UFunction* pAddDefensePoint = 0;
	ASnipingVolume_execAddDefensePoint_Parms parms;

	if ( !pAddDefensePoint )
		pAddDefensePoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SnipingVolume.AddDefensePoint" );

	parms.S = S;
	this->ProcessEvent ( pAddDefensePoint, &parms, NULL );

}*/

/*int ATeamVoiceReplicationInfo::GetOpposingTeamChannel ( int ChannelIndex )
{
	static UFunction* pGetOpposingTeamChannel = 0;
	ATeamVoiceReplicationInfo_execGetOpposingTeamChannel_Parms parms;

	if ( !pGetOpposingTeamChannel )
		pGetOpposingTeamChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamVoiceReplicationInfo.GetOpposingTeamChannel" );

	parms.ChannelIndex = ChannelIndex;
	this->ProcessEvent ( pGetOpposingTeamChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString ATeamVoiceReplicationInfo::GetTitle ( class AVoiceChatRoom* Room )
{
	static UFunction* pGetTitle = 0;
	ATeamVoiceReplicationInfo_execGetTitle_Parms parms;

	if ( !pGetTitle )
		pGetTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamVoiceReplicationInfo.GetTitle" );

	parms.Room = Room;
	this->ProcessEvent ( pGetTitle, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamVoiceReplicationInfo::NotifyTeamChange ( class APlayerReplicationInfo* PRI, int TeamIndex )
{
	static UFunction* pNotifyTeamChange = 0;
	ATeamVoiceReplicationInfo_execNotifyTeamChange_Parms parms;

	if ( !pNotifyTeamChange )
		pNotifyTeamChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamVoiceReplicationInfo.NotifyTeamChange" );

	parms.PRI = PRI;
	parms.TeamIndex = TeamIndex;
	this->ProcessEvent ( pNotifyTeamChange, &parms, NULL );

}*/

/*unsigned char ATeamVoiceReplicationInfo::JoinChannelAt ( int ChannelIndex, class APlayerReplicationInfo* PRI, struct FString Password )
{
	static UFunction* pJoinChannelAt = 0;
	ATeamVoiceReplicationInfo_execJoinChannelAt_Parms parms;

	if ( !pJoinChannelAt )
		pJoinChannelAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamVoiceReplicationInfo.JoinChannelAt" );

	parms.ChannelIndex = ChannelIndex;
	parms.PRI = PRI;
	parms.Password = Password;
	this->ProcessEvent ( pJoinChannelAt, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char ATeamVoiceReplicationInfo::JoinChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI, struct FString Password )
{
	static UFunction* pJoinChannel = 0;
	ATeamVoiceReplicationInfo_execJoinChannel_Parms parms;

	if ( !pJoinChannel )
		pJoinChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamVoiceReplicationInfo.JoinChannel" );

	parms.ChannelTitle = ChannelTitle;
	parms.PRI = PRI;
	parms.Password = Password;
	this->ProcessEvent ( pJoinChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AVoiceChatRoom* ATeamVoiceReplicationInfo::GetChannel ( struct FString ChatRoomName, int TeamIndex )
{
	static UFunction* pGetChannel = 0;
	ATeamVoiceReplicationInfo_execGetChannel_Parms parms;

	if ( !pGetChannel )
		pGetChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamVoiceReplicationInfo.GetChannel" );

	parms.ChatRoomName = ChatRoomName;
	parms.TeamIndex = TeamIndex;
	this->ProcessEvent ( pGetChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int ATeamVoiceReplicationInfo::eventGetChannelIndex ( struct FString ChannelTitle, int TeamIndex )
{
	static UFunction* pGetChannelIndex = 0;
	ATeamVoiceReplicationInfo_eventGetChannelIndex_Parms parms;

	if ( !pGetChannelIndex )
		pGetChannelIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamVoiceReplicationInfo.GetChannelIndex" );

	parms.ChannelTitle = ChannelTitle;
	parms.TeamIndex = TeamIndex;
	this->ProcessEvent ( pGetChannelIndex, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int ATeamVoiceReplicationInfo::GetMask ( class AVoiceChatRoom* Room )
{
	static UFunction* pGetMask = 0;
	ATeamVoiceReplicationInfo_execGetMask_Parms parms;

	if ( !pGetMask )
		pGetMask = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamVoiceReplicationInfo.GetMask" );

	parms.Room = Room;
	this->ProcessEvent ( pGetMask, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamVoiceReplicationInfo::SetMask ( class AVoiceChatRoom* Room, int NewMask )
{
	static UFunction* pSetMask = 0;
	ATeamVoiceReplicationInfo_execSetMask_Parms parms;

	if ( !pSetMask )
		pSetMask = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamVoiceReplicationInfo.SetMask" );

	parms.Room = Room;
	parms.NewMask = NewMask;
	this->ProcessEvent ( pSetMask, &parms, NULL );

}*/

/*bool ATeamVoiceReplicationInfo::ValidRoom ( class AVoiceChatRoom* Room )
{
	static UFunction* pValidRoom = 0;
	ATeamVoiceReplicationInfo_execValidRoom_Parms parms;

	if ( !pValidRoom )
		pValidRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamVoiceReplicationInfo.ValidRoom" );

	parms.Room = Room;
	this->ProcessEvent ( pValidRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamVoiceReplicationInfo::eventInitChannels (  )
{
	static UFunction* pInitChannels = 0;
	ATeamVoiceReplicationInfo_eventInitChannels_Parms parms;

	if ( !pInitChannels )
		pInitChannels = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamVoiceReplicationInfo.InitChannels" );

	this->ProcessEvent ( pInitChannels, &parms, NULL );

}*/

/*void AWillowWhisp::StartNextPath (  )
{
	static UFunction* pStartNextPath = 0;
	AWillowWhisp_execStartNextPath_Parms parms;

	if ( !pStartNextPath )
		pStartNextPath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.WillowWhisp.StartNextPath" );

	this->ProcessEvent ( pStartNextPath, &parms, NULL );

}*/

/*void AWillowWhisp::PostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AWillowWhisp_execPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.WillowWhisp.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AWillowWhisp::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AWillowWhisp_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.WillowWhisp.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*bool AUnrealTeamChatRoom::NotifyTeamChange ( class APlayerReplicationInfo* PRI, int NewTeamIndex )
{
	static UFunction* pNotifyTeamChange = 0;
	AUnrealTeamChatRoom_execNotifyTeamChange_Parms parms;

	if ( !pNotifyTeamChange )
		pNotifyTeamChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamChatRoom.NotifyTeamChange" );

	parms.PRI = PRI;
	parms.NewTeamIndex = NewTeamIndex;
	this->ProcessEvent ( pNotifyTeamChange, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealTeamChatRoom::CanJoinChannel ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pCanJoinChannel = 0;
	AUnrealTeamChatRoom_execCanJoinChannel_Parms parms;

	if ( !pCanJoinChannel )
		pCanJoinChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamChatRoom.CanJoinChannel" );

	parms.PRI = PRI;
	this->ProcessEvent ( pCanJoinChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealTeamChatRoom::IsTeamChannel (  )
{
	static UFunction* pIsTeamChannel = 0;
	AUnrealTeamChatRoom_execIsTeamChannel_Parms parms;

	if ( !pIsTeamChannel )
		pIsTeamChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealTeamChatRoom.IsTeamChannel" );

	this->ProcessEvent ( pIsTeamChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ADMMutator::GetServerDetails ( struct FServerResponseLine* ServerState )
{
	static UFunction* pGetServerDetails = 0;
	ADMMutator_execGetServerDetails_Parms parms;

	if ( !pGetServerDetails )
		pGetServerDetails = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMMutator.GetServerDetails" );

	parms.ServerState = *ServerState;
	this->ProcessEvent ( pGetServerDetails, &parms, NULL );

	*ServerState = parms.ServerState;
}*/

/*bool ADMMutator::AlwaysKeep ( class AActor* Other )
{
	static UFunction* pAlwaysKeep = 0;
	ADMMutator_execAlwaysKeep_Parms parms;

	if ( !pAlwaysKeep )
		pAlwaysKeep = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMMutator.AlwaysKeep" );

	parms.Other = Other;
	this->ProcessEvent ( pAlwaysKeep, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ADMMutator::MutatorIsAllowed (  )
{
	static UFunction* pMutatorIsAllowed = 0;
	ADMMutator_execMutatorIsAllowed_Parms parms;

	if ( !pMutatorIsAllowed )
		pMutatorIsAllowed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.DMMutator.MutatorIsAllowed" );

	this->ProcessEvent ( pMutatorIsAllowed, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUnrealPlayerChatManager::Count (  )
{
	static UFunction* pCount = 0;
	AUnrealPlayerChatManager_execCount_Parms parms;

	if ( !pCount )
		pCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.Count" );

	this->ProcessEvent ( pCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::IsLocal (  )
{
	static UFunction* pIsLocal = 0;
	AUnrealPlayerChatManager_execIsLocal_Parms parms;

	if ( !pIsLocal )
		pIsLocal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.IsLocal" );

	this->ProcessEvent ( pIsLocal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::IsValid ( int i )
{
	static UFunction* pIsValid = 0;
	AUnrealPlayerChatManager_execIsValid_Parms parms;

	if ( !pIsValid )
		pIsValid = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.IsValid" );

	parms.i = i;
	this->ProcessEvent ( pIsValid, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUnrealPlayerChatManager::GetHashIndex ( struct FString PlayerHash )
{
	static UFunction* pGetHashIndex = 0;
	AUnrealPlayerChatManager_execGetHashIndex_Parms parms;

	if ( !pGetHashIndex )
		pGetHashIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.GetHashIndex" );

	parms.PlayerHash = PlayerHash;
	this->ProcessEvent ( pGetHashIndex, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUnrealPlayerChatManager::GetIDIndex ( int PlayerID )
{
	static UFunction* pGetIDIndex = 0;
	AUnrealPlayerChatManager_execGetIDIndex_Parms parms;

	if ( !pGetIDIndex )
		pGetIDIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.GetIDIndex" );

	parms.PlayerID = PlayerID;
	this->ProcessEvent ( pGetIDIndex, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AUnrealPlayerChatManager::GetPlayerHash ( int PlayerID )
{
	static UFunction* pGetPlayerHash = 0;
	AUnrealPlayerChatManager_execGetPlayerHash_Parms parms;

	if ( !pGetPlayerHash )
		pGetPlayerHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.GetPlayerHash" );

	parms.PlayerID = PlayerID;
	this->ProcessEvent ( pGetPlayerHash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::ClientIsBanned ( struct FString PlayerHash )
{
	static UFunction* pClientIsBanned = 0;
	AUnrealPlayerChatManager_execClientIsBanned_Parms parms;

	if ( !pClientIsBanned )
		pClientIsBanned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.ClientIsBanned" );

	parms.PlayerHash = PlayerHash;
	this->ProcessEvent ( pClientIsBanned, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char AUnrealPlayerChatManager::GetPlayerRestriction ( int PlayerID )
{
	static UFunction* pGetPlayerRestriction = 0;
	AUnrealPlayerChatManager_execGetPlayerRestriction_Parms parms;

	if ( !pGetPlayerRestriction )
		pGetPlayerRestriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.GetPlayerRestriction" );

	parms.PlayerID = PlayerID;
	this->ProcessEvent ( pGetPlayerRestriction, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::UnMergeRestriction ( int Index, unsigned char NewType )
{
	static UFunction* pUnMergeRestriction = 0;
	AUnrealPlayerChatManager_execUnMergeRestriction_Parms parms;

	if ( !pUnMergeRestriction )
		pUnMergeRestriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.UnMergeRestriction" );

	parms.Index = Index;
	parms.NewType = NewType;
	this->ProcessEvent ( pUnMergeRestriction, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::MergeRestriction ( int Index, unsigned char NewType )
{
	static UFunction* pMergeRestriction = 0;
	AUnrealPlayerChatManager_execMergeRestriction_Parms parms;

	if ( !pMergeRestriction )
		pMergeRestriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.MergeRestriction" );

	parms.Index = Index;
	parms.NewType = NewType;
	this->ProcessEvent ( pMergeRestriction, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::ClearRestrictionID ( int PlayerID, unsigned char Type )
{
	static UFunction* pClearRestrictionID = 0;
	AUnrealPlayerChatManager_execClearRestrictionID_Parms parms;

	if ( !pClearRestrictionID )
		pClearRestrictionID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.ClearRestrictionID" );

	parms.PlayerID = PlayerID;
	parms.Type = Type;
	this->ProcessEvent ( pClearRestrictionID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::ClearRestriction ( struct FString PlayerHash, unsigned char Type )
{
	static UFunction* pClearRestriction = 0;
	AUnrealPlayerChatManager_execClearRestriction_Parms parms;

	if ( !pClearRestriction )
		pClearRestriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.ClearRestriction" );

	parms.PlayerHash = PlayerHash;
	parms.Type = Type;
	this->ProcessEvent ( pClearRestriction, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::AddRestrictionID ( int PlayerID, unsigned char Type )
{
	static UFunction* pAddRestrictionID = 0;
	AUnrealPlayerChatManager_execAddRestrictionID_Parms parms;

	if ( !pAddRestrictionID )
		pAddRestrictionID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.AddRestrictionID" );

	parms.PlayerID = PlayerID;
	parms.Type = Type;
	this->ProcessEvent ( pAddRestrictionID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::AddRestriction ( struct FString PlayerHash, unsigned char Type )
{
	static UFunction* pAddRestriction = 0;
	AUnrealPlayerChatManager_execAddRestriction_Parms parms;

	if ( !pAddRestriction )
		pAddRestriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.AddRestriction" );

	parms.PlayerHash = PlayerHash;
	parms.Type = Type;
	this->ProcessEvent ( pAddRestriction, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::SetRestrictionID ( int PlayerID, unsigned char Type )
{
	static UFunction* pSetRestrictionID = 0;
	AUnrealPlayerChatManager_execSetRestrictionID_Parms parms;

	if ( !pSetRestrictionID )
		pSetRestrictionID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.SetRestrictionID" );

	parms.PlayerID = PlayerID;
	parms.Type = Type;
	this->ProcessEvent ( pSetRestrictionID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::SetRestriction ( struct FString PlayerHash, unsigned char Type )
{
	static UFunction* pSetRestriction = 0;
	AUnrealPlayerChatManager_execSetRestriction_Parms parms;

	if ( !pSetRestriction )
		pSetRestriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.SetRestriction" );

	parms.PlayerHash = PlayerHash;
	parms.Type = Type;
	this->ProcessEvent ( pSetRestriction, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::IsBanned ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pIsBanned = 0;
	AUnrealPlayerChatManager_execIsBanned_Parms parms;

	if ( !pIsBanned )
		pIsBanned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.IsBanned" );

	parms.PRI = PRI;
	this->ProcessEvent ( pIsBanned, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::eventAcceptVoice ( class APlayerReplicationInfo* SenderPRI )
{
	static UFunction* pAcceptVoice = 0;
	AUnrealPlayerChatManager_eventAcceptVoice_Parms parms;

	if ( !pAcceptVoice )
		pAcceptVoice = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.AcceptVoice" );

	parms.SenderPRI = SenderPRI;
	this->ProcessEvent ( pAcceptVoice, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::AcceptSpeech ( class APlayerReplicationInfo* SenderPRI )
{
	static UFunction* pAcceptSpeech = 0;
	AUnrealPlayerChatManager_execAcceptSpeech_Parms parms;

	if ( !pAcceptSpeech )
		pAcceptSpeech = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.AcceptSpeech" );

	parms.SenderPRI = SenderPRI;
	this->ProcessEvent ( pAcceptSpeech, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUnrealPlayerChatManager::AcceptText ( class APlayerReplicationInfo* Sender, struct FName Type, struct FString* Msg )
{
	static UFunction* pAcceptText = 0;
	AUnrealPlayerChatManager_execAcceptText_Parms parms;

	if ( !pAcceptText )
		pAcceptText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.AcceptText" );

	parms.Sender = Sender;
	parms.Type = Type;
	this->ProcessEvent ( pAcceptText, &parms, NULL );

	*Msg = parms.Msg;
	return parms.ReturnValue;
}*/

/*void AUnrealPlayerChatManager::UnTrackPlayer ( int PlayerID )
{
	static UFunction* pUnTrackPlayer = 0;
	AUnrealPlayerChatManager_execUnTrackPlayer_Parms parms;

	if ( !pUnTrackPlayer )
		pUnTrackPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.UnTrackPlayer" );

	parms.PlayerID = PlayerID;
	this->ProcessEvent ( pUnTrackPlayer, &parms, NULL );

}*/

/*void AUnrealPlayerChatManager::TrackNewPlayer ( int PlayerID, struct FString PlayerHash, struct FString PlayerAddress )
{
	static UFunction* pTrackNewPlayer = 0;
	AUnrealPlayerChatManager_execTrackNewPlayer_Parms parms;

	if ( !pTrackNewPlayer )
		pTrackNewPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.TrackNewPlayer" );

	parms.PlayerID = PlayerID;
	parms.PlayerHash = PlayerHash;
	parms.PlayerAddress = PlayerAddress;
	this->ProcessEvent ( pTrackNewPlayer, &parms, NULL );

}*/

/*void AUnrealPlayerChatManager::ReceiveBanInfo ( struct FString S )
{
	static UFunction* pReceiveBanInfo = 0;
	AUnrealPlayerChatManager_execReceiveBanInfo_Parms parms;

	if ( !pReceiveBanInfo )
		pReceiveBanInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.ReceiveBanInfo" );

	parms.S = S;
	this->ProcessEvent ( pReceiveBanInfo, &parms, NULL );

}*/

/*void AUnrealPlayerChatManager::StoreChatBan ( struct FString PlayerHash, unsigned char Restriction )
{
	static UFunction* pStoreChatBan = 0;
	AUnrealPlayerChatManager_execStoreChatBan_Parms parms;

	if ( !pStoreChatBan )
		pStoreChatBan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.StoreChatBan" );

	parms.PlayerHash = PlayerHash;
	parms.Restriction = Restriction;
	this->ProcessEvent ( pStoreChatBan, &parms, NULL );

}*/

/*bool AUnrealPlayerChatManager::LoadChatBan ( struct FString PlayerHash, unsigned char* OutRestriction )
{
	static UFunction* pLoadChatBan = 0;
	AUnrealPlayerChatManager_execLoadChatBan_Parms parms;

	if ( !pLoadChatBan )
		pLoadChatBan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.LoadChatBan" );

	parms.PlayerHash = PlayerHash;
	this->ProcessEvent ( pLoadChatBan, &parms, NULL );

	*OutRestriction = parms.OutRestriction;
	return parms.ReturnValue;
}*/

/*void AUnrealPlayerChatManager::LogChatRestriction ( int i )
{
	static UFunction* pLogChatRestriction = 0;
	AUnrealPlayerChatManager_execLogChatRestriction_Parms parms;

	if ( !pLogChatRestriction )
		pLogChatRestriction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.LogChatRestriction" );

	parms.i = i;
	this->ProcessEvent ( pLogChatRestriction, &parms, NULL );

}*/

/*void AUnrealPlayerChatManager::ChatDebug (  )
{
	static UFunction* pChatDebug = 0;
	AUnrealPlayerChatManager_execChatDebug_Parms parms;

	if ( !pChatDebug )
		pChatDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealPlayerChatManager.ChatDebug" );

	this->ProcessEvent ( pChatDebug, &parms, NULL );

}*/

/*bool AUseObjective::TellBotHowToDisable ( class ABot* B )
{
	static UFunction* pTellBotHowToDisable = 0;
	AUseObjective_execTellBotHowToDisable_Parms parms;

	if ( !pTellBotHowToDisable )
		pTellBotHowToDisable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UseObjective.TellBotHowToDisable" );

	parms.B = B;
	this->ProcessEvent ( pTellBotHowToDisable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUseObjective::Touch ( class AActor* Other )
{
	static UFunction* pTouch = 0;
	AUseObjective_execTouch_Parms parms;

	if ( !pTouch )
		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UseObjective.Touch" );

	parms.Other = Other;
	this->ProcessEvent ( pTouch, &parms, NULL );

}*/

/*void AUseObjective::eventUsedBy ( class APawn* User )
{
	static UFunction* pUsedBy = 0;
	AUseObjective_eventUsedBy_Parms parms;

	if ( !pUsedBy )
		pUsedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UseObjective.UsedBy" );

	parms.User = User;
	this->ProcessEvent ( pUsedBy, &parms, NULL );

}*/

/*void APickupMessagePlus::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pClientReceive = 0;
	APickupMessagePlus_execClientReceive_Parms parms;

	if ( !pClientReceive )
		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.PickupMessagePlus.ClientReceive" );

	parms.P = P;
	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pClientReceive, &parms, NULL );

}*/

/*void AwFlagObjectiveBase::RemoveTouchingPlayer ( class APawn* P )
{
	static UFunction* pRemoveTouchingPlayer = 0;
	AwFlagObjectiveBase_execRemoveTouchingPlayer_Parms parms;

	if ( !pRemoveTouchingPlayer )
		pRemoveTouchingPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.wFlagObjectiveBase.RemoveTouchingPlayer" );

	parms.P = P;
	this->ProcessEvent ( pRemoveTouchingPlayer, &parms, NULL );

}*/

/*void AwFlagObjectiveBase::AddNewTouchingPlayer ( class APawn* P )
{
	static UFunction* pAddNewTouchingPlayer = 0;
	AwFlagObjectiveBase_execAddNewTouchingPlayer_Parms parms;

	if ( !pAddNewTouchingPlayer )
		pAddNewTouchingPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.wFlagObjectiveBase.AddNewTouchingPlayer" );

	parms.P = P;
	this->ProcessEvent ( pAddNewTouchingPlayer, &parms, NULL );

}*/

/*void AwFlagObjectiveBase::PlayerToucherDied ( class APawn* P )
{
	static UFunction* pPlayerToucherDied = 0;
	AwFlagObjectiveBase_execPlayerToucherDied_Parms parms;

	if ( !pPlayerToucherDied )
		pPlayerToucherDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.wFlagObjectiveBase.PlayerToucherDied" );

	parms.P = P;
	this->ProcessEvent ( pPlayerToucherDied, &parms, NULL );

}*/

/*void AwFlagObjectiveBase::CheckObjectiveProgress ( int iTeamIndex )
{
	static UFunction* pCheckObjectiveProgress = 0;
	AwFlagObjectiveBase_execCheckObjectiveProgress_Parms parms;

	if ( !pCheckObjectiveProgress )
		pCheckObjectiveProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.wFlagObjectiveBase.CheckObjectiveProgress" );

	parms.iTeamIndex = iTeamIndex;
	this->ProcessEvent ( pCheckObjectiveProgress, &parms, NULL );

}*/

/*void AwFlagObjectiveBase::ResetCapture (  )
{
	static UFunction* pResetCapture = 0;
	AwFlagObjectiveBase_execResetCapture_Parms parms;

	if ( !pResetCapture )
		pResetCapture = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.wFlagObjectiveBase.ResetCapture" );

	this->ProcessEvent ( pResetCapture, &parms, NULL );

}*/

/*void AwFlagObjectiveBase::Reset (  )
{
	static UFunction* pReset = 0;
	AwFlagObjectiveBase_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.wFlagObjectiveBase.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AwFlagObjectiveBase::eventUnTouch ( class AActor* Other )
{
	static UFunction* pUnTouch = 0;
	AwFlagObjectiveBase_eventUnTouch_Parms parms;

	if ( !pUnTouch )
		pUnTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.wFlagObjectiveBase.UnTouch" );

	parms.Other = Other;
	this->ProcessEvent ( pUnTouch, &parms, NULL );

}*/

/*void AwFlagObjectiveBase::eventTouch ( class AActor* Other )
{
	static UFunction* pTouch = 0;
	AwFlagObjectiveBase_eventTouch_Parms parms;

	if ( !pTouch )
		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.wFlagObjectiveBase.Touch" );

	parms.Other = Other;
	this->ProcessEvent ( pTouch, &parms, NULL );

}*/

/*void AwFlagObjectiveBase::RecoverCapturing (  )
{
	static UFunction* pRecoverCapturing = 0;
	AwFlagObjectiveBase_execRecoverCapturing_Parms parms;

	if ( !pRecoverCapturing )
		pRecoverCapturing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.wFlagObjectiveBase.RecoverCapturing" );

	this->ProcessEvent ( pRecoverCapturing, &parms, NULL );

}*/

/*void AwFlagObjectiveBase::SetActiveTeam ( int iTeam )
{
	static UFunction* pSetActiveTeam = 0;
	AwFlagObjectiveBase_execSetActiveTeam_Parms parms;

	if ( !pSetActiveTeam )
		pSetActiveTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.wFlagObjectiveBase.SetActiveTeam" );

	parms.iTeam = iTeam;
	this->ProcessEvent ( pSetActiveTeam, &parms, NULL );

}*/

/*void AwFlagObjectiveBase::eventBeginPlay (  )
{
	static UFunction* pBeginPlay = 0;
	AwFlagObjectiveBase_eventBeginPlay_Parms parms;

	if ( !pBeginPlay )
		pBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.wFlagObjectiveBase.BeginPlay" );

	this->ProcessEvent ( pBeginPlay, &parms, NULL );

}*/

/*void AwFlagObjectiveBase::OnUnTouch ( class AActor* Other )
{
	static UFunction* pOnUnTouch = 0;
	AwFlagObjectiveBase_execOnUnTouch_Parms parms;

	if ( !pOnUnTouch )
		pOnUnTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.wFlagObjectiveBase.OnUnTouch" );

	parms.Other = Other;
	this->ProcessEvent ( pOnUnTouch, &parms, NULL );

}*/

/*void AwFlagObjectiveBase::OnTouch ( class AActor* Other )
{
	static UFunction* pOnTouch = 0;
	AwFlagObjectiveBase_execOnTouch_Parms parms;

	if ( !pOnTouch )
		pOnTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.wFlagObjectiveBase.OnTouch" );

	parms.Other = Other;
	this->ProcessEvent ( pOnTouch, &parms, NULL );

}*/

/*void AWillowWhispPath::StartNextPath (  )
{
	static UFunction* pStartNextPath = 0;
	AWillowWhispPath_execStartNextPath_Parms parms;

	if ( !pStartNextPath )
		pStartNextPath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.WillowWhispPath.StartNextPath" );

	this->ProcessEvent ( pStartNextPath, &parms, NULL );

}*/

/*void AWillowWhispPath::PostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AWillowWhispPath_execPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.WillowWhispPath.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AWillowWhispPath::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AWillowWhispPath_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.WillowWhispPath.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*struct FString AStringMessagePlus::AssembleString ( class AHUD* myHUD, int Switch, class APlayerReplicationInfo* RelatedPRI_1, struct FString MessageString )
{
	static UFunction* pAssembleString = 0;
	AStringMessagePlus_execAssembleString_Parms parms;

	if ( !pAssembleString )
		pAssembleString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.StringMessagePlus.AssembleString" );

	parms.myHUD = myHUD;
	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.MessageString = MessageString;
	this->ProcessEvent ( pAssembleString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class FColor ASayMessagePlus::GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI_1 )
{
	static UFunction* pGetConsoleColor = 0;
	ASayMessagePlus_execGetConsoleColor_Parms parms;

	if ( !pGetConsoleColor )
		pGetConsoleColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SayMessagePlus.GetConsoleColor" );

	parms.RelatedPRI_1 = RelatedPRI_1;
	this->ProcessEvent ( pGetConsoleColor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString ASayMessagePlus::AssembleString ( class AHUD* myHUD, int Switch, class APlayerReplicationInfo* RelatedPRI_1, struct FString MessageString )
{
	static UFunction* pAssembleString = 0;
	ASayMessagePlus_execAssembleString_Parms parms;

	if ( !pAssembleString )
		pAssembleString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SayMessagePlus.AssembleString" );

	parms.myHUD = myHUD;
	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.MessageString = MessageString;
	this->ProcessEvent ( pAssembleString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ASayMessagePlus::RenderComplexMessage ( class UCanvas* Canvas, struct FString MessageString, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, float* XL, float* YL )
{
	static UFunction* pRenderComplexMessage = 0;
	ASayMessagePlus_execRenderComplexMessage_Parms parms;

	if ( !pRenderComplexMessage )
		pRenderComplexMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.SayMessagePlus.RenderComplexMessage" );

	parms.Canvas = Canvas;
	parms.MessageString = MessageString;
	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pRenderComplexMessage, &parms, NULL );

	*XL = parms.XL;
	*YL = parms.YL;
}*/

/*struct FString ATeamSayMessagePlus::AssembleString ( class AHUD* myHUD, int Switch, class APlayerReplicationInfo* RelatedPRI_1, struct FString MessageString )
{
	static UFunction* pAssembleString = 0;
	ATeamSayMessagePlus_execAssembleString_Parms parms;

	if ( !pAssembleString )
		pAssembleString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamSayMessagePlus.AssembleString" );

	parms.myHUD = myHUD;
	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.MessageString = MessageString;
	this->ProcessEvent ( pAssembleString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATeamSayMessagePlus::RenderComplexMessage ( class UCanvas* Canvas, struct FString MessageString, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, float* XL, float* YL )
{
	static UFunction* pRenderComplexMessage = 0;
	ATeamSayMessagePlus_execRenderComplexMessage_Parms parms;

	if ( !pRenderComplexMessage )
		pRenderComplexMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TeamSayMessagePlus.RenderComplexMessage" );

	parms.Canvas = Canvas;
	parms.MessageString = MessageString;
	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pRenderComplexMessage, &parms, NULL );

	*XL = parms.XL;
	*YL = parms.YL;
}*/

/*struct FString APlayerNameMessage::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pGetString = 0;
	APlayerNameMessage_execGetString_Parms parms;

	if ( !pGetString )
		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.PlayerNameMessage.GetString" );

	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pGetString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float ATurretController::GetWaitForTargetTime (  )
{
	static UFunction* pGetWaitForTargetTime = 0;
	ATurretController_execGetWaitForTargetTime_Parms parms;

	if ( !pGetWaitForTargetTime )
		pGetWaitForTargetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TurretController.GetWaitForTargetTime" );

	this->ProcessEvent ( pGetWaitForTargetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ATurretController::IsTurretFiring (  )
{
	static UFunction* pIsTurretFiring = 0;
	ATurretController_execIsTurretFiring_Parms parms;

	if ( !pIsTurretFiring )
		pIsTurretFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TurretController.IsTurretFiring" );

	this->ProcessEvent ( pIsTurretFiring, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ATurretController::IsTargetRelevant ( class APawn* Target )
{
	static UFunction* pIsTargetRelevant = 0;
	ATurretController_execIsTargetRelevant_Parms parms;

	if ( !pIsTargetRelevant )
		pIsTargetRelevant = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TurretController.IsTargetRelevant" );

	parms.Target = Target;
	this->ProcessEvent ( pIsTargetRelevant, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int ATurretController::GetTeamNum (  )
{
	static UFunction* pGetTeamNum = 0;
	ATurretController_execGetTeamNum_Parms parms;

	if ( !pGetTeamNum )
		pGetTeamNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TurretController.GetTeamNum" );

	this->ProcessEvent ( pGetTeamNum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ATurretController::Possess ( class APawn* aPawn )
{
	static UFunction* pPossess = 0;
	ATurretController_execPossess_Parms parms;

	if ( !pPossess )
		pPossess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TurretController.Possess" );

	parms.aPawn = aPawn;
	this->ProcessEvent ( pPossess, &parms, NULL );

}*/

/*struct FRotator ATurretController::AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError )
{
	static UFunction* pAdjustAim = 0;
	ATurretController_execAdjustAim_Parms parms;

	if ( !pAdjustAim )
		pAdjustAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.TurretController.AdjustAim" );

	parms.FiredAmmunition = FiredAmmunition;
	parms.projStart = projStart;
	parms.AimError = AimError;
	this->ProcessEvent ( pAdjustAim, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUnrealSecurity::eventServerCallback ( int SecType, struct FString Data )
{
	static UFunction* pServerCallback = 0;
	AUnrealSecurity_eventServerCallback_Parms parms;

	if ( !pServerCallback )
		pServerCallback = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"UnrealGame.UnrealSecurity.ServerCallback" );

	parms.SecType = SecType;
	parms.Data = Data;
	this->ProcessEvent ( pServerCallback, &parms, NULL );

}*/

