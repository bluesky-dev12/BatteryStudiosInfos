#pragma once
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : Core
# >    File : Structs.h
# ======================================================================================== #
*/

#ifdef _MSC_VER
#pragma pack ( push, 4 )
#endif


/*
# ======================================================================================== #
# > Structs
# ======================================================================================== #
*/

//struct DLL_IMPORT FNameEntry
//{
//    ULONG        Index;            // 0x00
//    ULONG        Flags;            // 0x04
//    ULONG        Unknown01;        // 0x08
//
//    wchar_t        Name[23];        // 0x0C
//};

//struct DLL_IMPORT FScriptDelegate
//{
//    unsigned char UnknownData00[ 0x8 ];
//};
//
//template< class T > class DLL_IMPORT TArray
//{
//public:
//    T* Data;
//    int Count;
//    int Max;
//
//    TArray();
//    TArray( INT InNum );
//    TArray( const TArray& Other );
//    ~TArray();
//    T& operator()( INT i );
//    const T& operator()( INT i ) const;
//    T Pop();
//    T& Last( INT c=0 );
//    const T& Last( INT c=0 ) const;
//    void Shrink();
//    signed long FindItem( const T& Item, INT& Index ) const;
//    INT FindItemIndex( const T& Item ) const;
//
//    INT Add( INT n=1 );
//    void Insert( INT Index, INT Count=1 );
//    void InsertZeroed( INT Index, INT Count=1 );
//    void Remove( INT Index, INT Count=1 );
//    void Empty( INT Slack=0 );
//
//    TArray& operator=( const TArray& Other );
//    INT AddItem( const T& Item );
//    INT AddZeroed( INT n=1 );
//    INT AddUniqueItem( const T& Item );
//    INT RemoveItem( const T& Item );
//};
//
//struct DLL_IMPORT FName
//{
//public:
//    int                Index;        
//
//    unsigned short const* operator*(void)const;
//    static struct FNameEntry* GetEntry(int);
//    static class TArray<struct FNameEntry *> Names;
//};
//
//struct DLL_IMPORT FString : public TArray< wchar_t >
//{
//private:
//    FString(int,unsigned short const *);
//
//public:
//    FString::~FString(void);
//    FString(struct FString const &);
//    FString(signed char,int);
//    FString(unsigned char,int);
//    FString(short,int);
//    FString(unsigned short,int);
//    FString(int,int);
//    FString(unsigned long,int);
//    FString(float,int,int,int);
//    FString(double,int,int,int);
//    FString(char const *);
//    FString(unsigned short const *);
//    FString(enum ENoInit);
//    FString(void);
//
//    struct FString & operator=(struct FString const &);
//    struct FString & operator=(unsigned short const *);
//    int operator==(struct FString const &)const;
//    int operator==(unsigned short const *)const;
//    int operator!=(struct FString const &)const;
//    int operator!=(unsigned short const *)const;
//    unsigned short & operator[](int);
//    unsigned short const & operator[](int)const;
//    operator int(void)const;
//    struct FString operator*(struct FString const &)const;
//    struct FString operator*(unsigned short const *)const;
//    unsigned short const * operator*(void)const;
//};

// Struct Core.Object.Vector
//class DLL_IMPORT FVector
//{
//public:
//	float                                              X;                                                		// 0x0000 ( 0x0004[ CPF_Edit | CPF_Config ]
//	float                                              Y;                                                		// 0x0004 ( 0x0004[ CPF_Edit | CPF_Config ]
//	float                                              Z;                                                		// 0x0008 ( 0x0004[ CPF_Edit | CPF_Config ]
//
//	// Public Imports
//	FVector(float,float,float);
//	FVector(void);
//	class FVector &  operator=(class FVector const &);
//	int  operator==(class FVector const &)const ;
//	int  operator!=(class FVector const &)const ;
//	float &  operator[](int);
//	class FVector  operator*(class FVector const &)const ;
//	class FVector  operator*(float)const ;
//	class FVector  operator-(class FVector const &)const ;
//	class FVector  operator-(void)const ;
//	class FVector  operator+(class FVector const &)const ;
//	class FVector  operator/(float)const ;
//	class FVector  operator^(class FVector const &)const ;
//	float  operator|(class FVector const &)const ;
//	class FVector  operator*=(class FVector const &);
//	class FVector  operator*=(float);
//	class FVector  operator+=(class FVector const &);
//	class FVector  operator-=(class FVector const &);
//	class FVector  operator/=(class FVector const &);
//	class FVector  operator/=(float);
//	void  AddBounded(class FVector const &,float);
//	int  Booleanize(void);
//	class FVector  BoundToCube(float);
//	float &  Component(int);
//	void  FindBestAxisVectors(class FVector &,class FVector &);
//	float  GetAbsMax(void)const ;
//	float  GetMax(void)const ;
//	float  GetMin(void)const ;
//	class FVector  GetNonParallel(void);
//	class FVector  GetNormalized(void);
//	class FVector  GridSnap(class FVector const &);
//	int  IsNearlyZero(void)const ;
//	int  IsUniform(void);
//	int  IsZero(void)const ;
//	class FVector  MirrorByPlane(class FPlane const &)const ;
//	class FVector  MirrorByVector(class FVector const &)const ;
//	int  Normalize(void);
//	class FVector  PivotTransform(class FCoords const &)const ;
//	class FVector  Projection(void)const ;
//	class FVector  RotateAngleAxis(int,class FVector const &)const ;
//	class FRotator  Rotation(void);
//	class FVector  SafeNormal(void)const ;
//	float  Size2D(void)const ;
//	float  Size(void)const ;
//	float  SizeSquared2D(void)const ;
//	float  SizeSquared(void)const ;
//	class FVector  TransformPointBy(class FCoords const &)const ;
//	class FVector  TransformVectorBy(class FCoords const &)const ;
//	class FVector  TransformVectorByTranspose(class FCoords const &)const ;
//	class FVector  UnsafeNormal(void)const ;
//}; // Size: 0x000C
//
//// Struct Core.Object.Guid
//class DLL_IMPORT FGuid
//{
//public:
//	int                                                A;                                                		// 0x0000 ( 0x0004
//	int                                                B;                                                		// 0x0004 ( 0x0004
//	int                                                C;                                                		// 0x0008 ( 0x0004
//	int                                                D;                                                		// 0x000C ( 0x0004
//
//	// Public Imports
//	FGuid(unsigned long,unsigned long,unsigned long,unsigned long);
//	FGuid(void);
//	class FGuid &  operator=(class FGuid const &);
//	unsigned short *  String(void)const ;
//}; // Size: 0x0010
//
//// Struct Core.Object.Quat
//class DLL_IMPORT FQuat
//{
//public:
//	float                                              X;                                                		// 0x0000 ( 0x0004[ CPF_Edit | CPF_Config ]
//	float                                              Y;                                                		// 0x0004 ( 0x0004[ CPF_Edit | CPF_Config ]
//	float                                              Z;                                                		// 0x0008 ( 0x0004[ CPF_Edit | CPF_Config ]
//	float                                              W;                                                		// 0x000C ( 0x0004[ CPF_Edit | CPF_Config ]
//
//	// Public Imports
//	FQuat(float,float,float,float);
//	FQuat(void);
//	class FQuat &  operator=(class FQuat const &);
//	int  operator!=(class FQuat const &)const ;
//	class FQuat  operator*(float const &)const ;
//	class FQuat  operator*(class FQuat const &)const ;
//	class FQuat  operator-(class FQuat const &)const ;
//	class FQuat  operator-(void)const ;
//	class FQuat  operator+(class FQuat const &)const ;
//	class FQuat  AngAxisToFQuat(void);
//	class FQuat  FQuatToAngAxis(void);
//	int  Normalize(void);
//	class FVector  RotateVector(class FVector);
//}; // Size: 0x0010
//
//// Struct Core.Object.Coords
//class DLL_IMPORT FCoords
//{
//public:
//	struct FVector                                     Origin;                                           		// 0x0000 ( 0x000C[ CPF_Edit | CPF_Config ]
//	struct FVector                                     XAxis;                                            		// 0x000C ( 0x000C[ CPF_Edit | CPF_Config ]
//	struct FVector                                     YAxis;                                            		// 0x0018 ( 0x000C[ CPF_Edit | CPF_Config ]
//	struct FVector                                     ZAxis;                                            		// 0x0024 ( 0x000C[ CPF_Edit | CPF_Config ]
//
//	// Public Imports
//	FCoords(class FVector const &,class FVector const &,class FVector const &,class FVector const &);
//	FCoords(class FVector const &);
//	FCoords(void);
//	class FCoords &  operator=(class FCoords const &);
//	class FCoords  operator*(class FCoords const &)const ;
//	class FCoords  operator*(class FRotator const &)const ;
//	class FCoords  operator*(class FScale const &)const ;
//	class FCoords  operator*(class FVector const &)const ;
//	class FCoords  operator/(class FRotator const &)const ;
//	class FCoords  operator/(class FScale const &)const ;
//	class FCoords  operator/(class FVector const &)const ;
//	class FCoords &  operator*=(class FCoords const &);
//	class FCoords &  operator*=(class FRotator const &);
//	class FCoords &  operator*=(class FScale const &);
//	class FCoords &  operator*=(class FVector const &);
//	class FCoords &  operator/=(class FRotator const &);
//	class FCoords &  operator/=(class FScale const &);
//	class FCoords &  operator/=(class FVector const &);
//	class FCoords  ApplyPivot(class FCoords const &)const ;
//	class FCoords  Inverse(void)const ;
//	class FMatrix  Matrix(void)const ;
//	class FCoords  MirrorByPlane(class FPlane const &)const ;
//	class FCoords  MirrorByVector(class FVector const &)const ;
//	class FRotator  OrthoRotation(void)const ;
//	class FCoords  PivotInverse(void)const ;
//	class FCoords  Transpose(void)const ;
//}; // Size: 0x0030
//
//// Struct Core.Object.Rotator
//class DLL_IMPORT FRotator
//{
//public:
//	int                                                Pitch;                                            		// 0x0000 ( 0x0004[ CPF_Edit | CPF_Config ]
//	int                                                Yaw;                                              		// 0x0004 ( 0x0004[ CPF_Edit | CPF_Config ]
//	int                                                Roll;                                             		// 0x0008 ( 0x0004[ CPF_Edit | CPF_Config ]
//
//	// Public Imports
//	FRotator(int,int,int);
//	FRotator(void);
//	class FRotator &  operator=(class FRotator const &);
//	int  operator==(class FRotator const &)const ;
//	int  operator!=(class FRotator const &)const ;
//	class FRotator  operator*(float)const ;
//	class FRotator  operator-(class FRotator const &)const ;
//	class FRotator  operator+(class FRotator const &)const ;
//	class FRotator  operator*=(float);
//	class FRotator  operator+=(class FRotator const &);
//	class FRotator  operator-=(class FRotator const &);
//	class FRotator  Add(int,int,int);
//	class FRotator  AddBounded(int,int,int);
//	class FRotator  Clamp(void);
//	class FRotator  ClampPos(void);
//	class FRotator  GridSnap(class FRotator const &);
//	int  IsZero(void)const ;
//	class FRotator  Reduce(void)const ;
//	class FVector  Vector(void);
//}; // Size: 0x000C
//
//// Struct Core.Object.Plane
//class DLL_IMPORT FPlane : FVector
//{
//public:
//	float                                              W;                                                		// 0x000C ( 0x0004[ CPF_Edit | CPF_Config ]
//
//	// Public Imports
//	FPlane(class FPlane const &);
//	FPlane(class FVector const &);
//	FPlane(float,float,float,float);
//	FPlane(class FVector,class FVector,class FVector);
//	FPlane(class FVector,class FVector const &);
//	FPlane(class FVector,float);
//	FPlane(void);
//	class FPlane &  operator=(class FPlane const &);
//	int  operator==(class FPlane const &)const ;
//	int  operator!=(class FPlane const &)const ;
//	class FPlane  operator*(class FPlane const &);
//	class FPlane  operator*(float)const ;
//	class FPlane  operator-(class FPlane const &)const ;
//	class FPlane  operator+(class FPlane const &)const ;
//	class FPlane  operator/(float)const ;
//	class FPlane  operator*=(class FPlane const &);
//	class FPlane  operator*=(float);
//	class FPlane  operator+=(class FPlane const &);
//	class FPlane  operator-=(class FPlane const &);
//	class FPlane  operator/=(float);
//	class FPlane  Flip(void)const ;
//	float  PlaneDot(class FVector const &)const ;
//	class FPlane  TransformBy(class FCoords const &)const ;
//	class FPlane  TransformBy(class FMatrix const &)const ;
//	class FPlane  TransformByUsingAdjointT(class FMatrix const &,float,class FMatrix const &)const ;
//	class FPlane  TransformPlaneByOrtho(class FCoords const &)const ;
//	class FPlane  TransformPlaneByOrtho(class FMatrix const &)const ;
//}; // Size: 0x0004

// Struct Core.Object.InterpCurvePoint
class DLL_IMPORT FInterpCurvePoint
{
public:
	float                                              InVal;                                            		// 0x0000 ( 0x0004[ CPF_Edit ]
	float                                              OutVal;                                           		// 0x0004 ( 0x0004[ CPF_Edit ]

	// Public Imports
	FInterpCurvePoint(float,float);
	FInterpCurvePoint(void);
	class FInterpCurvePoint &  operator=(class FInterpCurvePoint const &);
	int  operator==(class FInterpCurvePoint const &);
}; // Size: 0x0008

// Struct Core.Object.InterpCurve
class DLL_IMPORT FInterpCurve
{
public:
	class TArray< struct FInterpCurvePoint >           Points;                                           		// 0x0000 ( 0x000C[ CPF_Edit | CPF_NeedCtorLink ]

	// Public Imports
	FInterpCurve(class FInterpCurve const &);
	FInterpCurve(void);
	~FInterpCurve(void);
	void  operator=(class FInterpCurve const &);
	void  AddPoint(float,float);
	float  Eval(float);
}; // Size: 0x000C

// Struct Core.Object.Matrix
//class DLL_IMPORT FMatrix
//{
//public:
//	struct FPlane                                      XPlane;                                           		// 0x0000 ( 0x0010[ CPF_Edit ]
//	struct FPlane                                      YPlane;                                           		// 0x0010 ( 0x0010[ CPF_Edit ]
//	struct FPlane                                      ZPlane;                                           		// 0x0020 ( 0x0010[ CPF_Edit ]
//	struct FPlane                                      WPlane;                                           		// 0x0030 ( 0x0010[ CPF_Edit ]
//
//	// Public Imports
//	FMatrix(class FPlane,class FPlane,class FPlane,class FPlane);
//	FMatrix(void);
//	~FMatrix(void);
//	class FMatrix &  operator=(class FMatrix const &);
//	int  operator==(class FMatrix const &)const ;
//	int  operator!=(class FMatrix const &)const ;
//	class FMatrix  operator*(class FMatrix const &)const ;
//	void  operator*=(class FMatrix const &);
//	class FCoords  Coords(void);
//	float  Determinant(void)const ;
//	static class FMatrix Identity;
//	class FMatrix  Inverse(void)const ;
//	class FMatrix  RemoveScaling(void);
//	void  SetIdentity(void);
//	class FPlane  TransformFPlane(class FPlane const &)const ;
//	class FVector  TransformFVector(class FVector const &)const ;
//	class FPlane  TransformNormal(class FVector const &)const ;
//	class FMatrix  Transpose(void);
//	class FMatrix  TransposeAdjoint(void)const ;
//}; // Size: 0x0040

// Struct Core.Object.BtrDouble
class DLL_IMPORT FBtrDouble
{
public:
	int                                                dummy_1_DO_NOT_USE;                               		// 0x0000 ( 0x0004[ CPF_Edit | CPF_Config ]
	int                                                dummy_2_DO_NOT_USE;                               		// 0x0004 ( 0x0004[ CPF_Edit | CPF_Config ]

	// Public Imports
	FBtrDouble(class FBtrDouble const &);
	FBtrDouble(int);
	FBtrDouble(double);
	FBtrDouble(void);
	class FBtrDouble &  operator=(class FBtrDouble const &);
	class FBtrDouble &  operator=(int);
	class FBtrDouble &  operator=(double);
	int  operator==(class FBtrDouble const &)const ;
	int  operator!=(class FBtrDouble const &)const ;
	class FBtrDouble  operator*(class FBtrDouble const &)const ;
	class FBtrDouble  operator-(class FBtrDouble const &)const ;
	class FBtrDouble  operator+(class FBtrDouble const &)const ;
	class FBtrDouble  operator/(class FBtrDouble const &)const ;
	class FBtrDouble  operator*=(class FBtrDouble const &);
	class FBtrDouble  operator+=(class FBtrDouble const &);
	class FBtrDouble  operator-=(class FBtrDouble const &);
	class FBtrDouble  operator/=(class FBtrDouble const &);
	void  BtrTimeToBtrDouble(class FBtrTime);
	void  GetLocalTime(void);
	class FBtrDouble  Minus(class FBtrDouble);
	class FBtrDouble  Plus(class FBtrDouble);
}; // Size: 0x0008

// Struct Core.Object.BtrTime
class DLL_IMPORT FBtrTime
{
public:
	int                                                Year;                                             		// 0x0000 ( 0x0004
	int                                                Month;                                            		// 0x0004 ( 0x0004
	int                                                DayOfWeek;                                        		// 0x0008 ( 0x0004
	int                                                Day;                                              		// 0x000C ( 0x0004
	int                                                Hour;                                             		// 0x0010 ( 0x0004
	int                                                Minute;                                           		// 0x0014 ( 0x0004
	int                                                Second;                                           		// 0x0018 ( 0x0004
	int                                                Milliseconds;                                     		// 0x001C ( 0x0004

	// Public Imports
	class FBtrTime &  operator=(class FBtrTime const &);
	void  BtrDoubleToBtrTime(double);
	void  GetLocalTime(void);
}; // Size: 0x0020

// Struct Core.Object.IntArray
struct DLL_IMPORT FIntArray
{
	class TArray< int >                                Values;                                           		// 0x0000 ( 0x000C[ CPF_NeedCtorLink ]
}; // Size: 0x000C

// Struct Core.Object.GameModeInfo
struct DLL_IMPORT FGameModeInfo
{
	struct FString                                     ClassName;                                        		// 0x0000 ( 0x000C[ CPF_NeedCtorLink ]
	struct FString                                     UserFriendlyName;                                 		// 0x000C ( 0x000C[ CPF_NeedCtorLink ]
	struct FString                                     ModeDescription;                                  		// 0x0018 ( 0x000C[ CPF_NeedCtorLink ]
	class TArray< struct FString >                     TimeLimits;                                       		// 0x0024 ( 0x000C[ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Scores;                                           		// 0x0030 ( 0x000C[ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Scores_DefaultTimeLimits;                         		// 0x003C ( 0x000C[ CPF_NeedCtorLink ]
	struct FString                                     ScoreDefault;                                     		// 0x0048 ( 0x000C[ CPF_NeedCtorLink ]
	class TArray< int >                                UserCount;                                        		// 0x0054 ( 0x000C[ CPF_NeedCtorLink ]
	int                                                UserCount_Default;                                		// 0x0060 ( 0x0004
	unsigned long                                      bPlayWithBots:1;                                  		// 0x0064 ( 0x0004 [0x00000001]
	int                                                BotUserTeam_Default;                              		// 0x0068 ( 0x0004
	int                                                BotNum0_Default;                                  		// 0x006C ( 0x0004
	int                                                BotNum1_Default;                                  		// 0x0070 ( 0x0004
	int                                                BotDifficulty_Default;                            		// 0x0074 ( 0x0004
	int                                                ModeIndex;                                        		// 0x0078 ( 0x0004
}; // Size: 0x007C

// Struct Core.Object.Color
class DLL_IMPORT FColor
{
public:
	unsigned char                                      B;                                                		// 0x0000 ( 0x0001[ CPF_Edit | CPF_Config ]
	unsigned char                                      G;                                                		// 0x0001 ( 0x0001[ CPF_Edit | CPF_Config ]
	unsigned char                                      R;                                                		// 0x0002 ( 0x0001[ CPF_Edit | CPF_Config ]
	unsigned char                                      A;                                                		// 0x0003 ( 0x0001[ CPF_Edit | CPF_Config ]

	FColor();
	FColor( BYTE InR, BYTE InG, BYTE InB );
	FColor( BYTE InR, BYTE InG, BYTE InB, BYTE InA );
}; // Size: 0x0004

// Struct Core.Object.MessageItem
struct DLL_IMPORT FMessageItem
{
	struct FString                                     Text;                                             		// 0x0000 ( 0x000C[ CPF_NeedCtorLink ]
	unsigned char                                      Type;                                             		// 0x000C ( 0x0001
	float                                              TimeWritten;                                      		// 0x0010 ( 0x0004
	int                                                FontSize;                                         		// 0x0014 ( 0x0004
	class FColor                                       TextColor;                                        		// 0x0018 ( 0x0004
	float                                              TimeToRemove;                                     		// 0x001C ( 0x0004
}; // Size: 0x0020

// Struct Core.Object.CombatSituationSphere
struct DLL_IMPORT FCombatSituationSphere
{
	struct FVector                                     vCenterPos;                                       		// 0x0000 ( 0x000C
	float                                              fInRadius;                                        		// 0x000C ( 0x0004
	float                                              fOutRadius;                                       		// 0x0010 ( 0x0004
	class FColor                                       kColor;                                           		// 0x0014 ( 0x0004
}; // Size: 0x0018

// Struct Core.Object.CombatSituationArrow
struct DLL_IMPORT FCombatSituationArrow
{
	struct FVector                                     vPos;                                             		// 0x0000 ( 0x000C
	struct FRotator                                    rRayDir;                                          		// 0x000C ( 0x000C
	class FColor                                       ArrowColor;                                       		// 0x0018 ( 0x0004
}; // Size: 0x001C

// Struct Core.Object.CombatSituationNameTag
struct DLL_IMPORT FCombatSituationNameTag
{
	struct FVector                                     vPos;                                             		// 0x0000 ( 0x000C
	struct FString                                     szName;                                           		// 0x000C ( 0x000C[ CPF_NeedCtorLink ]
}; // Size: 0x0018

// Struct Core.Object.CombatSituationPoint
struct DLL_IMPORT FCombatSituationPoint
{
	struct FVector                                     vPos;                                             		// 0x0000 ( 0x000C
	class FColor                                       PointColor;                                       		// 0x000C ( 0x0004
}; // Size: 0x0010

// Struct Core.Object.CombatSituationLine
struct DLL_IMPORT FCombatSituationLine
{
	struct FVector                                     vStartPos;                                        		// 0x0000 ( 0x000C
	struct FVector                                     vEndPos;                                          		// 0x000C ( 0x000C
	class FColor                                       LineColor;                                        		// 0x0018 ( 0x0004
}; // Size: 0x001C

// Struct Core.Object.TMultiMap
struct DLL_IMPORT FTMultiMap
{
	void*                                              FArray_Data;                                      		// 0x0000 ( 0x0004[ CPF_Transient ]
	int                                                FArray_ArrayNum;                                  		// 0x0004 ( 0x0004
	int                                                FArray_ArrayMax;                                  		// 0x0008 ( 0x0004
	void*                                              TMapBase_Hash;                                    		// 0x000C ( 0x0004[ CPF_Transient ]
	int                                                TMapBase_HashCount;                               		// 0x0010 ( 0x0004
}; // Size: 0x0014

// Struct Core.Object.CompressedPosition
struct DLL_IMPORT FCompressedPosition
{
	struct FVector                                     Location;                                         		// 0x0000 ( 0x000C
	struct FRotator                                    Rotation;                                         		// 0x000C ( 0x000C
	struct FVector                                     Velocity;                                         		// 0x0018 ( 0x000C
}; // Size: 0x0024

// Struct Core.Object.Box
//class DLL_IMPORT FBox
//{
//public:
//	struct FVector                                     Min;                                              		// 0x0000 ( 0x000C
//	struct FVector                                     Max;                                              		// 0x000C ( 0x000C
//	unsigned char                                      IsValid;                                          		// 0x0018 ( 0x0001
//
//	// Public Imports
//	FBox(class FVector const &,class FVector const &);
//	FBox(int);
//	FBox(class FVector const *,int);
//	FBox(void);
//	class FBox &  operator=(class FBox const &);
//	class FVector &  operator[](int);
//	class FBox  operator+(class FBox const &)const ;
//	class FBox  operator+(class FVector const &)const ;
//	class FBox &  operator+=(class FBox const &);
//	class FBox &  operator+=(class FVector const &);
//	class FBox  ExpandBy(float)const ;
//	class FVector  GetCenter(void)const ;
//	void  GetCenterAndExtents(class FVector &,class FVector &)const ;
//	class FVector  GetExtent(void)const ;
//	class FVector &  GetExtrema(int);
//	class FVector const &  GetExtrema(int)const ;
//	void  Init(void);
//	bool  Intersect(class FBox const &)const ;
//	class FBox  TransformBy(class FCoords const &)const ;
//	class FBox  TransformBy(class FMatrix const &)const ;
//}; // Size: 0x001C

// Struct Core.Object.BoundingVolume
struct DLL_IMPORT FBoundingVolume : FBox
{
	struct FPlane                                      Sphere;                                           		// 0x001C ( 0x0010
}; // Size: 0x0010

// Struct Core.Object.FloatBoxWH
struct DLL_IMPORT FFloatBoxWH
{
	float                                              X;                                                		// 0x0000 ( 0x0004
	float                                              Y;                                                		// 0x0004 ( 0x0004
	float                                              W;                                                		// 0x0008 ( 0x0004
	float                                              H;                                                		// 0x000C ( 0x0004
}; // Size: 0x0010

// Struct Core.Object.FloatBox
struct DLL_IMPORT FFloatBox
{
	float                                              X1;                                               		// 0x0000 ( 0x0004
	float                                              Y1;                                               		// 0x0004 ( 0x0004
	float                                              X2;                                               		// 0x0008 ( 0x0004
	float                                              Y2;                                               		// 0x000C ( 0x0004
}; // Size: 0x0010

// Struct Core.Object.IntBoxWH
struct DLL_IMPORT FIntBoxWH
{
	int                                                X;                                                		// 0x0000 ( 0x0004
	int                                                Y;                                                		// 0x0004 ( 0x0004
	int                                                W;                                                		// 0x0008 ( 0x0004
	int                                                H;                                                		// 0x000C ( 0x0004
}; // Size: 0x0010

// Struct Core.Object.IntBox
struct DLL_IMPORT FIntBox
{
	int                                                X1;                                               		// 0x0000 ( 0x0004
	int                                                Y1;                                               		// 0x0004 ( 0x0004
	int                                                X2;                                               		// 0x0008 ( 0x0004
	int                                                Y2;                                               		// 0x000C ( 0x0004
}; // Size: 0x0010

// Struct Core.Object.Scale
//class DLL_IMPORT FScale
//{
//public:
//	struct FVector                                     Scale;                                            		// 0x0000 ( 0x000C[ CPF_Edit | CPF_Config ]
//	float                                              SheerRate;                                        		// 0x000C ( 0x0004[ CPF_Edit | CPF_Config ]
//	unsigned char                                      SheerAxis;                                        		// 0x0010 ( 0x0001[ CPF_Edit | CPF_Config ]
//
//	// Public Imports
//	FScale(class FVector const &,float,enum ESheerAxis);
//	FScale(void);
//	class FScale &  operator=(class FScale const &);
//	int  operator==(class FScale const &)const ;
//	float  Orientation(void);
//}; // Size: 0x0014

// Struct Core.Object.Range
class DLL_IMPORT FRange
{
public:
	float                                              Min;                                              		// 0x0000 ( 0x0004[ CPF_Edit | CPF_Config ]
	float                                              Max;                                              		// 0x0004 ( 0x0004[ CPF_Edit | CPF_Config ]

	// Public Imports
	FRange(float);
	FRange(float,float);
	FRange(void);
	class FRange &  operator=(class FRange const &);
	int  operator==(class FRange const &)const ;
	int  operator!=(class FRange const &)const ;
	class FRange  operator*(class FRange const &)const ;
	class FRange  operator*(float)const ;
	class FRange  operator-(class FRange const &)const ;
	class FRange  operator-(float)const ;
	class FRange  operator-(void)const ;
	class FRange  operator+(class FRange const &)const ;
	class FRange  operator+(float)const ;
	class FRange  operator/(float)const ;
	class FRange  operator*=(class FRange const &);
	class FRange  operator*=(float);
	class FRange  operator+=(class FRange const &);
	class FRange  operator+=(float);
	class FRange  operator-=(class FRange const &);
	class FRange  operator-=(float);
	class FRange  operator/=(class FRange const &);
	class FRange  operator/=(float);
	int  Booleanize(void);
	float &  Component(int);
	float  GetCenter(void)const ;
	float  GetMax(void)const ;
	float  GetMin(void)const ;
	float  GetRand(void)const ;
	float  GetSRand(void)const ;
	class FRange  GridSnap(class FRange const &);
	int  IsNearlyZero(void)const ;
	int  IsZero(void)const ;
	float  Size(void)const ;
}; // Size: 0x0008

// Struct Core.Object.RangeVector
class DLL_IMPORT FRangeVector
{
public:
	struct FRange                                      X;                                                		// 0x0000 ( 0x0008[ CPF_Edit | CPF_Config ]
	struct FRange                                      Y;                                                		// 0x0008 ( 0x0008[ CPF_Edit | CPF_Config ]
	struct FRange                                      Z;                                                		// 0x0010 ( 0x0008[ CPF_Edit | CPF_Config ]

	// Public Imports
	FRangeVector(class FRange,class FRange,class FRange);
	FRangeVector(class FVector);
	FRangeVector(void);
	class FRangeVector &  operator=(class FRangeVector const &);
	int  operator==(class FRangeVector const &)const ;
	int  operator!=(class FRangeVector const &)const ;
	class FRangeVector  operator*(class FRangeVector const &)const ;
	class FRangeVector  operator*(float)const ;
	class FRangeVector  operator-(class FRangeVector const &)const ;
	class FRangeVector  operator-(class FVector const &)const ;
	class FRangeVector  operator-(void)const ;
	class FRangeVector  operator+(class FRangeVector const &)const ;
	class FRangeVector  operator+(class FVector const &)const ;
	class FRangeVector  operator/(float)const ;
	class FRangeVector  operator*=(class FRangeVector const &);
	class FRangeVector  operator*=(float);
	class FRangeVector  operator+=(class FRangeVector const &);
	class FRangeVector  operator+=(class FVector const &);
	class FRangeVector  operator-=(class FRangeVector const &);
	class FRangeVector  operator-=(class FVector const &);
	class FRangeVector  operator/=(class FRangeVector const &);
	class FRangeVector  operator/=(float);
	class FRange &  Component(int);
	class FVector  GetCenter(void)const ;
	class FVector  GetMax(void)const ;
	class FVector  GetRand(void)const ;
	class FVector  GetSRand(void)const ;
	class FRangeVector  GridSnap(class FRangeVector const &);
	int  IsNearlyZero(void)const ;
	int  IsZero(void)const ;
}; // Size: 0x0018

#ifdef _MSC_VER
#pragma pack ( pop )
#endif

