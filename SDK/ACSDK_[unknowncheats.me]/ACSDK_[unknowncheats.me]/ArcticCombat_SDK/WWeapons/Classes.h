#pragma once
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : WWeapons
# >    File : Classes.h
# ======================================================================================== #
*/

#ifdef _MSC_VER
#pragma pack ( push, 4 )
#endif


/*
# ======================================================================================== #
# > Classes
# ======================================================================================== #
*/

// Class WWeapons.wAirStrikeProj
class DLL_IMPORT AwAirStrikeProj : public AwProjectile
{
public:
	class UwWeaponBaseParams*                          BaseParams_Bomb;                                  		// 0x0480 ( 0x0004 ) 
	class UClass*                                      ResParams_Bomb;                                   		// 0x0484 ( 0x0004 ) 
	int                                                iCurrBombCnt;                                     		// 0x0488 ( 0x0004 ) [ CPF_Net ]
	struct FRotator                                    rMasterRot;                                       		// 0x048C ( 0x000C ) 
	struct FVector                                     vInvFallingLine;                                  		// 0x0498 ( 0x000C ) 

	// UScript Functions
	 void                      wLoadOut ( int iID );                             		// [ FUNC_Simulated ] WWeapons.wAirStrikeProj.wLoadOut
	 void                      IncreaseBombCnt (  );                             		//  WWeapons.wAirStrikeProj.IncreaseBombCnt
	 void                      ForceBegin (  );                                  		//  WWeapons.wAirStrikeProj.ForceBegin
	 class AwProjectile*       SpawnProjectile ( struct FVector Start, struct FRotator Dir );		//  WWeapons.wAirStrikeProj.SpawnProjectile
	 void                      SpawnBomb (  );                                   		//  WWeapons.wAirStrikeProj.SpawnBomb
	 void                      eventDestroyed (  );                              		// [ FUNC_Event ] WWeapons.wAirStrikeProj.Destroyed
}; // Size: 0x0024

// Class WWeapons.wWeapon_Turret_FNM240
class DLL_IMPORT AwWeapon_Turret_FNM240 : public AwGun
{
public:
	float                                              fOverHeatMin;                                     		// 0x0864 ( 0x0004 ) [ CPF_Const ]
	float                                              fOverHeatMax;                                     		// 0x0868 ( 0x0004 ) [ CPF_Const ]
	float                                              fCallTime;                                        		// 0x086C ( 0x0004 ) 
	float                                              fLastFireTime;                                    		// 0x0870 ( 0x0004 ) 
	float                                              weaponID;                                         		// 0x0874 ( 0x0004 ) 

	// UScript Functions
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] WWeapons.wWeapon_Turret_FNM240.DisplayDebug
	 void                      eventRenderOverlays ( class UCanvas* Canvas );    		// [ FUNC_Simulated | FUNC_Event ] WWeapons.wWeapon_Turret_FNM240.RenderOverlays
	 void                      eventTimer (  );                                  		// [ FUNC_Event ] WWeapons.wWeapon_Turret_FNM240.Timer
	 void                      OverHeatDown (  );                                		//  WWeapons.wWeapon_Turret_FNM240.OverHeatDown
	 void                      OverHeatUp (  );                                  		//  WWeapons.wWeapon_Turret_FNM240.OverHeatUp
	 void                      BringUp ( class AwWeapon* PrevWeapon );           		// [ FUNC_Simulated ] WWeapons.wWeapon_Turret_FNM240.BringUp
	 bool                      HasAmmo (  );                                     		// [ FUNC_Simulated ] WWeapons.wWeapon_Turret_FNM240.HasAmmo
	 unsigned char             BestMode (  );                                    		//  WWeapons.wWeapon_Turret_FNM240.BestMode
	 void                      PawnUnpossessed (  );                             		// [ FUNC_Simulated ] WWeapons.wWeapon_Turret_FNM240.PawnUnpossessed
	 void                      AttachToPawn ( class APawn* P );                  		//  WWeapons.wWeapon_Turret_FNM240.AttachToPawn
	 void                      wLoadOut ( int iID, int iAddPartsID );            		// [ FUNC_Simulated ] WWeapons.wWeapon_Turret_FNM240.wLoadOut
	 void                      SetResParams ( class UClass* wRes );              		// [ FUNC_Simulated ] WWeapons.wWeapon_Turret_FNM240.SetResParams
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] WWeapons.wWeapon_Turret_FNM240.PostNetBeginPlay
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] WWeapons.wWeapon_Turret_FNM240.PostBeginPlay
}; // Size: 0x0014

// Class WWeapons.wRocketLauncher
class DLL_IMPORT AwRocketLauncher : public AwGun
{
public:
	class AwSkinShell*                                 wWarhead;                                         		// 0x0864 ( 0x0004 ) 
	float                                              fWaitingTime;                                     		// 0x0868 ( 0x0004 ) 

	// UScript Functions
	 bool                      IsCanUseWeapon (  );                              		// [ FUNC_Simulated ] WWeapons.wRocketLauncher.IsCanUseWeapon
	 bool                      IsATR (  );                                       		// [ FUNC_Simulated ] WWeapons.wRocketLauncher.IsATR
	 bool                      IsRPG (  );                                       		// [ FUNC_Simulated ] WWeapons.wRocketLauncher.IsRPG
	 void                      AnimEnd ( int Channel );                          		// [ FUNC_Simulated ] WWeapons.wRocketLauncher.AnimEnd
	 void                      ServerDoFire (  );                                		//  WWeapons.wRocketLauncher.ServerDoFire
	 void                      ServerDestroy (  );                               		//  WWeapons.wRocketLauncher.ServerDestroy
	 void                      eventStopFire ( int Mode );                       		// [ FUNC_Simulated | FUNC_Event ] WWeapons.wRocketLauncher.StopFire
	 void                      eventWeaponTick ( float dt );                     		// [ FUNC_Simulated | FUNC_Event ] WWeapons.wRocketLauncher.WeaponTick
	 bool                      HasAmmoRocket (  );                               		// [ FUNC_Simulated ] WWeapons.wRocketLauncher.HasAmmoRocket
	 void                      Destroyed (  );                                   		// [ FUNC_Simulated ] WWeapons.wRocketLauncher.Destroyed
	 bool                      PutDown (  );                                     		// [ FUNC_Simulated ] WWeapons.wRocketLauncher.PutDown
	 bool                      Reload (  );                                      		// [ FUNC_Simulated ] WWeapons.wRocketLauncher.Reload
	 void                      FireOne ( int iFireMode );                        		// [ FUNC_Simulated ] WWeapons.wRocketLauncher.FireOne
	 void                      AttWarhead ( bool bAttOrDtt );                    		// [ FUNC_Simulated ] WWeapons.wRocketLauncher.AttWarhead
	 void                      LoadWarhead ( class UStaticMesh* stProj );        		// [ FUNC_Simulated ] WWeapons.wRocketLauncher.LoadWarhead
	 void                      FillToInitialAmmo (  );                           		// [ FUNC_Simulated ] WWeapons.wRocketLauncher.FillToInitialAmmo
	 void                      SetResParams ( class UClass* wRes );              		// [ FUNC_Simulated ] WWeapons.wRocketLauncher.SetResParams
}; // Size: 0x0008

// Class WWeapons.wTurret_FNM240_Fire
class DLL_IMPORT UwTurret_FNM240_Fire : public UwInstantFire
{
public:
	unsigned long                                      bStartFireSound:1;                                		// 0x01E0 ( 0x0004 )  [0x00000001]
	class USound*                                      SoundNotReady;                                    		// 0x01E4 ( 0x0004 ) 
	unsigned long                                      bSoundNotReady:1;                                 		// 0x01E8 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      StopFiring (  );                                  		//  WWeapons.wTurret_FNM240_Fire.StopFiring
	 void                      StartFiring (  );                                 		//  WWeapons.wTurret_FNM240_Fire.StartFiring
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] WWeapons.wTurret_FNM240_Fire.DisplayDebug
	 void                      eventModeTick ( float dt );                       		// [ FUNC_Event ] WWeapons.wTurret_FNM240_Fire.ModeTick
	 void                      StartMuzzleSmoke (  );                            		//  WWeapons.wTurret_FNM240_Fire.StartMuzzleSmoke
	 void                      UpdateEmitter (  );                               		// [ FUNC_Simulated ] WWeapons.wTurret_FNM240_Fire.UpdateEmitter
	 void                      FlashMuzzleFlash (  );                            		//  WWeapons.wTurret_FNM240_Fire.FlashMuzzleFlash
	 void                      DrawMuzzleFlash ( class UCanvas* Canvas );        		//  WWeapons.wTurret_FNM240_Fire.DrawMuzzleFlash
	 void                      InitEffects (  );                                 		// [ FUNC_Simulated ] WWeapons.wTurret_FNM240_Fire.InitEffects
	 bool                      AllowFire (  );                                   		// [ FUNC_Simulated ] WWeapons.wTurret_FNM240_Fire.AllowFire
	 void                      PlayFiring (  );                                  		//  WWeapons.wTurret_FNM240_Fire.PlayFiring
	 void                      eventTimer (  );                                  		// [ FUNC_Event ] WWeapons.wTurret_FNM240_Fire.Timer
	 void                      DoFireEffectForClient (  );                       		//  WWeapons.wTurret_FNM240_Fire.DoFireEffectForClient
	 void                      DoFireEffect (  );                                		//  WWeapons.wTurret_FNM240_Fire.DoFireEffect
	 void                      eventModeDoFire (  );                             		// [ FUNC_Event ] WWeapons.wTurret_FNM240_Fire.ModeDoFire
}; // Size: 0x000C

// Class WWeapons.wGunAttachment
class DLL_IMPORT AwGunAttachment : public AwWeaponAttachment
{
public:
	class UClass*                                      mMuzFlashClass;                                   		// 0x10CC ( 0x0004 ) 
	class AwEmitter*                                   mMuzFlash3rd;                                     		// 0x10D0 ( 0x0004 ) 
	class UClass*                                      mMuzFlashEmitterClass;                            		// 0x10D4 ( 0x0004 ) 
	class UClass*                                      mSmokeClass;                                      		// 0x10D8 ( 0x0004 ) 
	class AwEmitter*                                   mSmoke3rd;                                        		// 0x10DC ( 0x0004 ) 
	class UClass*                                      mSmokeEmitterClass;                               		// 0x10E0 ( 0x0004 ) 
	class UClass*                                      mSilencerSmokeClass;                              		// 0x10E4 ( 0x0004 ) 
	class AwEmitter*                                   mSilencerSmoke3rd;                                		// 0x10E8 ( 0x0004 ) 
	class UClass*                                      mSilencerSmokeEmitterClass;                       		// 0x10EC ( 0x0004 ) 
	class UClass*                                      mShellCaseEmitterClass;                           		// 0x10F0 ( 0x0004 ) 
	class AwEmitter*                                   mShellCaseEmitter;                                		// 0x10F4 ( 0x0004 ) 
	class UClass*                                      mTracerClass;                                     		// 0x10F8 ( 0x0004 ) 
	class AEmitter*                                    mTracer;                                          		// 0x10FC ( 0x0004 ) [ CPF_Edit | CPF_EditInline ]
	class AEmitter*                                    marrTracer[ 0x0A ];                               		// 0x1100 ( 0x0028 ) [ CPF_Edit | CPF_EditInline ]
	float                                              mTracerPullback;                                  		// 0x1128 ( 0x0004 ) [ CPF_Edit ]
	float                                              mTracerMinDistance;                               		// 0x112C ( 0x0004 ) [ CPF_Edit ]
	float                                              mTracerSpeed;                                     		// 0x1130 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     mOldHitLocation;                                  		// 0x1134 ( 0x000C ) 
	class AwSkinShell*                                 wParts[ 0x03 ];                                   		// 0x1140 ( 0x000C ) 
	float                                              fPartsCullDistance;                               		// 0x114C ( 0x0004 ) 
	unsigned char                                      iSelfTraceCount;                                  		// 0x1150 ( 0x0001 ) 
	unsigned long                                      bAttachSilencer:1;                                		// 0x1154 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      ClearParts (  );                                  		// [ FUNC_Simulated ] WWeapons.wGunAttachment.ClearParts
	 void                      AddParts ( int iWeaponID, int iAddPartsID );      		// [ FUNC_Simulated ] WWeapons.wGunAttachment.AddParts
	 void                      eventwLoadOut ( int iID, int iAddPartsID );       		// [ FUNC_Simulated | FUNC_Event ] WWeapons.wGunAttachment.wLoadOut
	 void                      eventThirdPersonEffects (  );                     		// [ FUNC_Simulated | FUNC_Event ] WWeapons.wGunAttachment.ThirdPersonEffects
	 void                      FakeThirdPersonEffects ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, class UMaterial* HitMaterial );		// [ FUNC_Simulated ] WWeapons.wGunAttachment.FakeThirdPersonEffects
	 void                      FakeUpdateTracer ( struct FVector LastHitLocation );		// [ FUNC_Simulated ] WWeapons.wGunAttachment.FakeUpdateTracer
	 void                      MakeSmoke (  );                                   		// [ FUNC_Simulated ] WWeapons.wGunAttachment.MakeSmoke
	 struct FName              GetBoneNameSilencer (  );                         		// [ FUNC_Simulated ] WWeapons.wGunAttachment.GetBoneNameSilencer
	 struct FName              GetBoneNameRotation (  );                         		// [ FUNC_Simulated ] WWeapons.wGunAttachment.GetBoneNameRotation
	 struct FName              GetBoneNameTip (  );                              		// [ FUNC_Simulated ] WWeapons.wGunAttachment.GetBoneNameTip
	 void                      MakeSpawnShell ( bool bRechamber );               		// [ FUNC_Simulated ] WWeapons.wGunAttachment.MakeSpawnShell
	 void                      MakeMuzzleFlash (  );                             		// [ FUNC_Simulated ] WWeapons.wGunAttachment.MakeMuzzleFlash
	 void                      SpawnEmitter ( class UClass* EmitterClass );      		// [ FUNC_Simulated ] WWeapons.wGunAttachment.SpawnEmitter
	 void                      UpdateHit ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, class UMaterial* HitMaterial );		//  WWeapons.wGunAttachment.UpdateHit
	 void                      UpdatePenetrateHit ( class AActor** mHitActor, struct FVector* mHitLocation, struct FVector* mHitNormal, class UMaterial** mHitMaterial, int mLastHitIdx );		//  WWeapons.wGunAttachment.UpdatePenetrateHit
	 void                      UpdateTracer (  );                                		// [ FUNC_Simulated ] WWeapons.wGunAttachment.UpdateTracer
	 struct FVector            GetTracerStart (  );                              		// [ FUNC_Simulated ] WWeapons.wGunAttachment.GetTracerStart
	 void                      Destroyed (  );                                   		// [ FUNC_Simulated ] WWeapons.wGunAttachment.Destroyed
}; // Size: 0x008C

// Class WWeapons.wTurretAttachmet
class DLL_IMPORT AwTurretAttachmet : public AwGunAttachment
{
public:

	// UScript Functions
	 void                      MakeSmoke (  );                                   		// [ FUNC_Simulated ] WWeapons.wTurretAttachmet.MakeSmoke
	 void                      MakeMuzzleFlash (  );                             		// [ FUNC_Simulated ] WWeapons.wTurretAttachmet.MakeMuzzleFlash
	 struct FVector            GetTipLocation (  );                              		// [ FUNC_Simulated ] WWeapons.wTurretAttachmet.GetTipLocation
}; // Size: 0x0000

// Class WWeapons.wRocketFire
class DLL_IMPORT UwRocketFire : public UwProjectileFire
{
public:
	struct FName                                       Aim_FireAnim;                                     		// 0x019C ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       Aim_FireLoopAnim;                                 		// 0x01A0 ( 0x0004 ) [ CPF_Edit ]
	float                                              Aim_FireAnimRate;                                 		// 0x01A4 ( 0x0004 ) [ CPF_Edit ]
	float                                              Aim_FireLoopAnimRate;                             		// 0x01A8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fWaitingTime;                                     		// 0x01AC ( 0x0004 ) 

	// UScript Functions
	 void                      StartFiring (  );                                 		//  WWeapons.wRocketFire.StartFiring
	 void                      PlayFiring (  );                                  		//  WWeapons.wRocketFire.PlayFiring
	 void                      ResetInputFire (  );                              		// [ FUNC_Simulated ] WWeapons.wRocketFire.ResetInputFire
	 bool                      IsInputFire (  );                                 		// [ FUNC_Simulated ] WWeapons.wRocketFire.IsInputFire
	 bool                      CheckRPGAimMode (  );                             		// [ FUNC_Simulated ] WWeapons.wRocketFire.CheckRPGAimMode
	 void                      eventServerDoFire (  );                           		// [ FUNC_Event ] WWeapons.wRocketFire.ServerDoFire
	 void                      StartMuzzleSmoke (  );                            		//  WWeapons.wRocketFire.StartMuzzleSmoke
	 void                      FlashMuzzleFlash (  );                            		//  WWeapons.wRocketFire.FlashMuzzleFlash
	 void                      NewActiveStartFire (  );                          		// [ FUNC_Simulated ] WWeapons.wRocketFire.NewActiveStartFire
	 void                      eventModeDoFire (  );                             		// [ FUNC_Event ] WWeapons.wRocketFire.ModeDoFire
}; // Size: 0x0014

// Class WWeapons.wAirStrikeBomb
class DLL_IMPORT AwAirStrikeBomb : public AwRocket
{
public:

	// UScript Functions
	 void                      Explode ( struct FVector HitLocation, struct FVector HitNormal );		// [ FUNC_Simulated ] WWeapons.wAirStrikeBomb.Explode
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] WWeapons.wAirStrikeBomb.PostBeginPlay
}; // Size: 0x0000

// Class WWeapons.wThrowingWeapon
class DLL_IMPORT AwThrowingWeapon : public AwWeapon
{
public:
	float                                              fThrowStartTime;                                  		// 0x0758 ( 0x0004 ) 

	// UScript Functions
	 bool                      IsCanUseWeapon (  );                              		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.IsCanUseWeapon
	 void                      FillToInitialAmmo (  );                           		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.FillToInitialAmmo
	 void                      GetAmmoCount ( float* MaxAmmoPrimary, float* CurAmmoPrimary );		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.GetAmmoCount
	 void                      ServerThrowingWeapon (  );                        		//  WWeapons.wThrowingWeapon.ServerThrowingWeapon
	 void                      ClientThrowingWeapon (  );                        		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.ClientThrowingWeapon
	 bool                      SeverConsumeAmmo ( int Mode, float Load, bool bAmountNeededIsMax );		//  WWeapons.wThrowingWeapon.SeverConsumeAmmo
	 void                      CancelFire ( int Mode );                          		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.CancelFire
	 void                      ServerCancelFire ( unsigned char Mode );          		//  WWeapons.wThrowingWeapon.ServerCancelFire
	 void                      ClientCancelFire ( int Mode );                    		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.ClientCancelFire
	 bool                      StartFire ( int Mode );                           		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.StartFire
	 void                      BringUp ( class AwWeapon* PrevWeapon );           		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.BringUp
	 bool                      PutDown (  );                                     		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.PutDown
	 bool                      IsFiring (  );                                    		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.IsFiring
	 void                      PlayIdle (  );                                    		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.PlayIdle
	 void                      AnimEnd ( int Channel );                          		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.AnimEnd
	 void                      ServerDestroy (  );                               		//  WWeapons.wThrowingWeapon.ServerDestroy
	 void                      SetSprint ( bool bValue );                        		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.SetSprint
	 void                      eventWeaponTick ( float dt );                     		// [ FUNC_Simulated | FUNC_Event ] WWeapons.wThrowingWeapon.WeaponTick
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.DisplayDebug
	 void                      AciveFireDelay (  );                              		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.AciveFireDelay
	 void                      wLoadOut ( int iID, int iAddPartsID );            		// [ FUNC_Simulated ] WWeapons.wThrowingWeapon.wLoadOut
}; // Size: 0x0004

// Class WWeapons.wThrowingFire
class DLL_IMPORT UwThrowingFire : public UwProjectileFire
{
public:
	struct FName                                       RemovePinAnim;                                    		// 0x019C ( 0x0004 ) [ CPF_Edit ]
	float                                              RemovePinAnimRate;                                		// 0x01A0 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bCancelFire:1;                                    		// 0x01A4 ( 0x0004 )  [0x00000001]
	unsigned long                                      bApplyThrowingDelay:1;                            		// 0x01A4 ( 0x0004 )  [0x00000002]

	// UScript Functions
	 bool                      AllowFire (  );                                   		// [ FUNC_Simulated ] WWeapons.wThrowingFire.AllowFire
	 void                      PlayPreFire (  );                                 		//  WWeapons.wThrowingFire.PlayPreFire
	 void                      eventModeDoFire (  );                             		// [ FUNC_Event ] WWeapons.wThrowingFire.ModeDoFire
}; // Size: 0x000C

// Class WWeapons.wGrenade
class DLL_IMPORT AwGrenade : public AwProjectile
{
public:
	float                                              ExplodeTimer;                                     		// 0x0480 ( 0x0004 ) 
	unsigned long                                      bCanHitOwner:1;                                   		// 0x0484 ( 0x0004 )  [0x00000001]
	unsigned long                                      bHitWater:1;                                      		// 0x0484 ( 0x0004 )  [0x00000002]
	class AwEmitter*                                   Trail;                                            		// 0x0488 ( 0x0004 ) 
	float                                              DampenFactor;                                     		// 0x048C ( 0x0004 ) [ CPF_Edit ]
	float                                              DampenFactorParallel;                             		// 0x0490 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      HitEffectClass;                                   		// 0x0494 ( 0x0004 ) 
	float                                              LastSparkTime;                                    		// 0x0498 ( 0x0004 ) 
	unsigned long                                      bTimerSet:1;                                      		// 0x049C ( 0x0004 )  [0x00000001]
	unsigned long                                      bExploded:1;                                      		// 0x049C ( 0x0004 )  [0x00000002]
	float                                              fSpeedCorrectionF;                                		// 0x04A0 ( 0x0004 ) 
	float                                              fSpeedCorrectionB;                                		// 0x04A4 ( 0x0004 ) 
	struct FVector                                     LastHitNormal;                                    		// 0x04A8 ( 0x000C ) 
	class UClass*                                      TransTrailClass;                                  		// 0x04B4 ( 0x0004 ) 

	// UScript Functions
	 void                      SufferEffect ( class APawn* Victim, float fDist, float fReduceRate );		// [ FUNC_Simulated ] WWeapons.wGrenade.SufferEffect
	 void                      wLoadOut ( int iID );                             		// [ FUNC_Simulated ] WWeapons.wGrenade.wLoadOut
	 void                      LoadEmitters (  );                                		// [ FUNC_Simulated ] WWeapons.wGrenade.LoadEmitters
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		// [ FUNC_Simulated ] WWeapons.wGrenade.TakeDamage
	 void                      ExplodeSelf ( struct FVector HitLocation, struct FVector HitNormal );		// [ FUNC_Simulated ] WWeapons.wGrenade.ExplodeSelf
	 void                      SplashGrenades (  );                              		//  WWeapons.wGrenade.SplashGrenades
	 void                      Explode ( struct FVector HitLocation, struct FVector HitNormal );		// [ FUNC_Simulated ] WWeapons.wGrenade.Explode
	 void                      SpawnEmitter ( float timeFactor );                		// [ FUNC_Simulated ] WWeapons.wGrenade.SpawnEmitter
	 void                      HitWall ( struct FVector HitNormal, class AActor* Wall, class UMaterial* HitMaterial );		// [ FUNC_Simulated ] WWeapons.wGrenade.HitWall
	 void                      ProcessTouch ( class AActor* Other, struct FVector HitLocation );		// [ FUNC_Simulated ] WWeapons.wGrenade.ProcessTouch
	 void                      Landed ( struct FVector HitNormal );              		// [ FUNC_Simulated ] WWeapons.wGrenade.Landed
	 void                      Timer (  );                                       		// [ FUNC_Simulated ] WWeapons.wGrenade.Timer
	 void                      SetSpeed ( float fSpeed );                        		// [ FUNC_Simulated ] WWeapons.wGrenade.SetSpeed
	 bool                      AimUp (  );                                       		//  WWeapons.wGrenade.AimUp
	 void                      RecoverFromHostChange (  );                       		//  WWeapons.wGrenade.RecoverFromHostChange
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Event ] WWeapons.wGrenade.PostNetBeginPlay
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] WWeapons.wGrenade.PostBeginPlay
	 void                      Destroyed (  );                                   		// [ FUNC_Simulated ] WWeapons.wGrenade.Destroyed
}; // Size: 0x0038

#ifdef _MSC_VER
#pragma pack ( pop )
#endif

