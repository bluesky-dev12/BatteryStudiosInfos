#pragma once
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : GUIWarfare
# >    File : Classes.h
# ======================================================================================== #
*/

#ifdef _MSC_VER
#pragma pack ( push, 4 )
#endif


/*
# ======================================================================================== #
# > Constants
# ======================================================================================== #
*/

#define CONST_UserPingRefreshTime                                5
#define CONST_SendPingDelayTime                                  3

/*
# ======================================================================================== #
# > Enums
# ======================================================================================== #
*/

// Enum GUIWarfare.BTNetGUIPage.eUserState
enum eUserState
{
	eUState_waiting                                    = 0,
	eUState_ready                                      = 1,
	eUState_playing                                    = 2,
	eUState_shop                                       = 3,
	eUState_auction                                    = 4,
	eUState_inventory                                  = 5,
	eUState_mail                                       = 6,
	eUState_Tutorial                                   = 7,
	eUState_MyInfo                                     = 8
};

// Enum GUIWarfare.BTNetMainMenu.GameRoomType
enum GameRoomType
{
	GameRoomType_Normal                                = 0,
	GameRoomType_Permanent                             = 1,
	GameRoomType_ClanPermanent                         = 2,
	GameRoomType_Clan                                  = 3,
	GameRoomType_League                                = 4,
	GameRoomType_End                                   = 5
};

// Enum GUIWarfare.BTPageRoomLobby.E_MyAction
enum E_MyAction
{
	E_MY_ACTION_NONE                                   = 0,
	E_MY_ACTION_INTERVENTION                           = 1
};

// Enum GUIWarfare.BTWindowItemExpiredHK.eExpiredBuyType
enum eExpiredBuyType
{
	EBT_NONE                                           = 0,
	EBT_PCOIN                                          = 1,
	EBT_CCOIN                                          = 2,
	EBT_POINT                                          = 3
};


/*
# ======================================================================================== #
# > Classes
# ======================================================================================== #
*/

// Class GUIWarfare.BTConsole
class DLL_IMPORT UBTConsole : public UExtendedConsole
{
public:
	struct FString                                     strRecordRetCode[ 0x04 ];                         		// 0x0994 ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsNotEnableRecordOption;                          		// 0x09C4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bStopOutofSeat:1;                                 		// 0x09D0 ( 0x0004 )  [0x00000001]
	int                                                OutofSeatTime;                                    		// 0x09D4 ( 0x0004 ) 
	int                                                OwnerOutofSeatTime;                               		// 0x09D8 ( 0x0004 ) 
	int                                                UserReadyTime;                                    		// 0x09DC ( 0x0004 ) 
	int                                                UserReadyTimeCount;                               		// 0x09E0 ( 0x0004 ) 
	int                                                preLevelTime;                                     		// 0x09E4 ( 0x0004 ) 
	int                                                LevelTime;                                        		// 0x09E8 ( 0x0004 ) 
	float                                              LastKeySleepTime;                                 		// 0x09EC ( 0x0004 ) 
	unsigned long                                      bReqFontReset:1;                                  		// 0x09F0 ( 0x0004 )  [0x00000001]
	struct FString                                     strChangeQS;                                      		// 0x09F4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strCloseQSWindow;                                 		// 0x0A00 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strChatMode[ 0x07 ];                              		// 0x0A0C ( 0x0054 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strChattingHelpGFS;                               		// 0x0A60 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strChattingHelp;                                  		// 0x0A6C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strRegulateShot;                                  		// 0x0A78 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSaveShot;                                      		// 0x0A84 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbChatHistory[ 0x02 ];                            		// 0x0A90 ( 0x0020 ) 
	struct FFloatBox                                   fbButtonChatMode;                                 		// 0x0AB0 ( 0x0010 ) 
	struct FFloatBox                                   fbChatEditBox;                                    		// 0x0AC0 ( 0x0010 ) 
	struct FFloatBox                                   fbLabelEditBox;                                   		// 0x0AD0 ( 0x0010 ) 
	struct FString                                     strGhostChatModeTeam;                             		// 0x0AE0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGhostChatModeAll;                              		// 0x0AEC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     MessageType_PostString;                           		// 0x0AF8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class FColor >                       MessageType_Color;                                		// 0x0B04 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bChatEnabled:1;                                   		// 0x0B10 ( 0x0004 )  [0x00000001]
	class UBTChatEditBoxHK*                            ChatEditBox;                                      		// 0x0B14 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	float                                              CharEditBoxCursorHeightRatio;                     		// 0x0B18 ( 0x0004 ) 
	unsigned char                                      ChatMessageType;                                  		// 0x0B1C ( 0x0001 ) 
	unsigned long                                      bChatInGhostMode:1;                               		// 0x0B20 ( 0x0004 )  [0x00000001]
	class UMaterial*                                   ChatSelectImg;                                    		// 0x0B24 ( 0x0004 ) 
	class TArray< struct FMessageItem >                MessageItems;                                     		// 0x0B28 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              MessageItemsX;                                    		// 0x0B34 ( 0x0004 ) 
	float                                              MessageItemsYFromBottom;                          		// 0x0B38 ( 0x0004 ) 
	float                                              MessageItemsLineSpacing;                          		// 0x0B3C ( 0x0004 ) 
	int                                                MaxMessageItems;                                  		// 0x0B40 ( 0x0004 ) 
	unsigned char                                      byPressed_Shift;                                  		// 0x0B44 ( 0x0001 ) 
	unsigned long                                      ToggleIme:1;                                      		// 0x0B48 ( 0x0004 )  [0x00000001]
	unsigned long                                      ImeNative:1;                                      		// 0x0B48 ( 0x0004 )  [0x00000002]
	class UBTTcpLink_Channel*                          TcpHandler;                                       		// 0x0B4C ( 0x0004 ) 
	float                                              AccumDelta;                                       		// 0x0B50 ( 0x0004 ) 
	float                                              EventTimerDelta;                                  		// 0x0B54 ( 0x0004 ) 
	float                                              EventTimerNextStep;                               		// 0x0B58 ( 0x0004 ) 
	class UBTNetMainMenu*                              MainMenu;                                         		// 0x0B5C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class FColor                                       ShadowColor;                                      		// 0x0B60 ( 0x0004 ) 
	int                                                ResetImeCount;                                    		// 0x0B64 ( 0x0004 ) 
	unsigned long                                      bAltPressed:1;                                    		// 0x0B68 ( 0x0004 )  [0x00000001]
	int                                                currentBGM;                                       		// 0x0B6C ( 0x0004 ) 
	int                                                CurrentBGMHandle;                                 		// 0x0B70 ( 0x0004 ) 
	unsigned long                                      HasBGMDuration:1;                                 		// 0x0B74 ( 0x0004 )  [0x00000001]
	int                                                BGMStartTime;                                     		// 0x0B78 ( 0x0004 ) 
	int                                                BGMDuration;                                      		// 0x0B7C ( 0x0004 ) 
	float                                              BGMFadeInTime;                                    		// 0x0B80 ( 0x0004 ) 
	float                                              BGMFadeOutTime;                                   		// 0x0B84 ( 0x0004 ) 
	int                                                BGMTermBetween;                                   		// 0x0B88 ( 0x0004 ) 
	int                                                Term;                                             		// 0x0B8C ( 0x0004 ) 
	class TArray< struct FString >                     BGMs;                                             		// 0x0B90 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                BGMDurations;                                     		// 0x0B9C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FIntArray >                   BGMPartialPlayInitialSeeks;                       		// 0x0BA8 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      BGMPartialPlay:1;                                 		// 0x0BB4 ( 0x0004 )  [0x00000001]
	int                                                BGMPartialPlayDuration;                           		// 0x0BB8 ( 0x0004 ) 
	unsigned long                                      bGmPause:1;                                       		// 0x0BBC ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      execConsoleCMD ( struct FString Line );           		// [ FUNC_Exec ] GUIWarfare.BTConsole.ConsoleCMD
	 void                      execSendQuestUpdate (  );                         		// [ FUNC_Exec ] GUIWarfare.BTConsole.SendQuestUpdate
	 void                      execShowTutorialEndWindow (  );                   		// [ FUNC_Exec ] GUIWarfare.BTConsole.ShowTutorialEndWindow
	 bool                      CheckTurorial_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTConsole.CheckTurorial_OnOK
	 void                      execSetAdminSpec ( int B );                       		// [ FUNC_Exec ] GUIWarfare.BTConsole.SetAdminSpec
	 void                      execGetBot (  );                                  		// [ FUNC_Exec ] GUIWarfare.BTConsole.GetBot
	 void                      execSetBot ( int withBot, int num0, int num1, int Grade );		// [ FUNC_Exec ] GUIWarfare.BTConsole.SetBot
	 void                      execLogBot (  );                                  		// [ FUNC_Exec ] GUIWarfare.BTConsole.LogBot
	 void                      UpdateAAS (  );                                   		//  GUIWarfare.BTConsole.UpdateAAS
	 void                      UpdateGameNotice (  );                            		//  GUIWarfare.BTConsole.UpdateGameNotice
	 void                      UpdateConnection ( float Delta );                 		//  GUIWarfare.BTConsole.UpdateConnection
	 void                      ProcessChatBan ( float Delta );                   		//  GUIWarfare.BTConsole.ProcessChatBan
	 void                      ProcessOutOfSleep_InRoomLobby (  );               		//  GUIWarfare.BTConsole.ProcessOutOfSleep_InRoomLobby
	 void                      ProcessOutOfDoing_InRoomLobby (  );               		//  GUIWarfare.BTConsole.ProcessOutOfDoing_InRoomLobby
	 void                      ProcessOutOfCounting ( int MaxTime, int CountTime, int CountingMsgCode, int OutMsgCode );		//  GUIWarfare.BTConsole.ProcessOutOfCounting
	 bool                      IsInRoomLobby (  );                               		//  GUIWarfare.BTConsole.IsInRoomLobby
	 void                      ProcessOutOfSeat ( float Delta );                 		//  GUIWarfare.BTConsole.ProcessOutOfSeat
	 bool                      IsExceptionOutOfSeat (  );                        		//  GUIWarfare.BTConsole.IsExceptionOutOfSeat
	 void                      eventTick ( float Delta );                        		// [ FUNC_Simulated | FUNC_Event ] GUIWarfare.BTConsole.Tick
	 void                      SetTermBetweenBGM ( float val );                  		//  GUIWarfare.BTConsole.SetTermBetweenBGM
	 void                      UpdateBGM ( float dt );                           		//  GUIWarfare.BTConsole.UpdateBGM
	 bool                      IsBGMPlaying (  );                                		//  GUIWarfare.BTConsole.IsBGMPlaying
	 void                      StopBGM (  );                                     		//  GUIWarfare.BTConsole.StopBGM
	 void                      NextBGM (  );                                     		//  GUIWarfare.BTConsole.NextBGM
	 void                      SetBGMAdvanced ( class TArray< struct FString > List, bool partialPlay, int partialDuration, class TArray< struct FIntArray > initialSeeks );		//  GUIWarfare.BTConsole.SetBGMAdvanced
	 void                      SetBGM ( class TArray< struct FString > List );   		//  GUIWarfare.BTConsole.SetBGM
	 void                      SetOneBGM ( struct FString List );                		//  GUIWarfare.BTConsole.SetOneBGM
	 struct FString            GetCurrentBGM (  );                               		//  GUIWarfare.BTConsole.GetCurrentBGM
	 void                      SwitchChatMessageType ( unsigned char key );      		//  GUIWarfare.BTConsole.SwitchChatMessageType
	 void                      execCallChatWhisper (  );                         		// [ FUNC_Exec ] GUIWarfare.BTConsole.CallChatWhisper
	 void                      execCallChatClan (  );                            		// [ FUNC_Exec ] GUIWarfare.BTConsole.CallChatClan
	 void                      execCallChatTeam (  );                            		// [ FUNC_Exec ] GUIWarfare.BTConsole.CallChatTeam
	 void                      execCallChatAll (  );                             		// [ FUNC_Exec ] GUIWarfare.BTConsole.CallChatAll
	 void                      execCallChatMode (  );                            		// [ FUNC_Exec ] GUIWarfare.BTConsole.CallChatMode
	 void                      SetChatHelpString (  );                           		//  GUIWarfare.BTConsole.SetChatHelpString
	 bool                      eventOnIME_Notify ( int Type, int LangID, struct FString strText, int StartPos, int Size );		// [ FUNC_Event ] GUIWarfare.BTConsole.OnIME_Notify
	 bool                      eventNeedToOffIME (  );                           		// [ FUNC_Event ] GUIWarfare.BTConsole.NeedToOffIME
	 void                      execDownloadWebzenShop (  );                      		// [ FUNC_Exec ] GUIWarfare.BTConsole.DownloadWebzenShop
	 void                      execCompletedQuest (  );                          		// [ FUNC_Exec ] GUIWarfare.BTConsole.CompletedQuest
	 void                      SendMessage ( struct FMessageItem msgItem );      		//  GUIWarfare.BTConsole.SendMessage
	 void                      ClearMessageItems (  );                           		//  GUIWarfare.BTConsole.ClearMessageItems
	 void                      AddMessageItem ( struct FMessageItem Item );      		//  GUIWarfare.BTConsole.AddMessageItem
	 struct FMessageItem       ConstructMessageItem ( struct FString Text, unsigned char MessageType );		//  GUIWarfare.BTConsole.ConstructMessageItem
	 void                      execProhibitAltTab (  );                          		// [ FUNC_Exec ] GUIWarfare.BTConsole.ProhibitAltTab
	 void                      execAddSystemMessageSaveShot ( struct FString Text );		// [ FUNC_Exec ] GUIWarfare.BTConsole.AddSystemMessageSaveShot
	 void                      execAddSystemMessageRegulateShot (  );            		// [ FUNC_Exec ] GUIWarfare.BTConsole.AddSystemMessageRegulateShot
	 void                      DrawMessageItems ( class UCanvas* C );            		//  GUIWarfare.BTConsole.DrawMessageItems
	 void                      DrawTextChattingHelp ( class UCanvas* C );        		//  GUIWarfare.BTConsole.DrawTextChattingHelp
	 void                      DrawChatEditBox ( class UCanvas* C );             		//  GUIWarfare.BTConsole.DrawChatEditBox
	 void                      PostRender ( class UCanvas* C );                  		//  GUIWarfare.BTConsole.PostRender
	 void                      PreRender ( class UCanvas* Canvas );              		//  GUIWarfare.BTConsole.PreRender
	 void                      FontReset (  );                                   		//  GUIWarfare.BTConsole.FontReset
	 void                      CallBattleHelp (  );                              		//  GUIWarfare.BTConsole.CallBattleHelp
	 void                      CallSelectRadioMessage ( int iIndex );            		//  GUIWarfare.BTConsole.CallSelectRadioMessage
	 void                      CallSelectQuickSlot ( int iIndex );               		//  GUIWarfare.BTConsole.CallSelectQuickSlot
	 void                      execCallToggleQuickSlot (  );                     		// [ FUNC_Exec ] GUIWarfare.BTConsole.CallToggleQuickSlot
	 void                      execSetLoadingTime ( int L, int P );              		// [ FUNC_Exec ] GUIWarfare.BTConsole.SetLoadingTime
	 void                      execCMDHK ( int Index, struct FString Param1, struct FString Param2, struct FString param3 );		// [ FUNC_Exec ] GUIWarfare.BTConsole.CMDHK
	 void                      execStopQuestLog (  );                            		// [ FUNC_Exec ] GUIWarfare.BTConsole.StopQuestLog
	 void                      execCloseWindow ( int Count );                    		// [ FUNC_Exec ] GUIWarfare.BTConsole.CloseWindow
	 void                      RecordOn_Exception ( int retCode );               		//  GUIWarfare.BTConsole.RecordOn_Exception
	 void                      RecordOn_FnRun ( int Index );                     		//  GUIWarfare.BTConsole.RecordOn_FnRun
	 bool                      RecordOn_OnOK ( class UGUIComponent* Sender );    		//  GUIWarfare.BTConsole.RecordOn_OnOK
	 void                      execRecordOn (  );                                		// [ FUNC_Exec ] GUIWarfare.BTConsole.RecordOn
	 void                      execShowWindow ( struct FString windowclassname );		// [ FUNC_Exec ] GUIWarfare.BTConsole.ShowWindow
	 void                      execStartAutoMove ( int Server, int Channel, int gameroom );		// [ FUNC_Exec ] GUIWarfare.BTConsole.StartAutoMove
	 void                      execendTutorial (  );                             		// [ FUNC_Exec ] GUIWarfare.BTConsole.endTutorial
	 void                      exectutorial ( struct FString Map );              		// [ FUNC_Exec ] GUIWarfare.BTConsole.tutorial
	 void                      execstopoos (  );                                 		// [ FUNC_Exec ] GUIWarfare.BTConsole.stopoos
	 bool                      BlockChangeWeapon ( int nIndex );                 		//  GUIWarfare.BTConsole.BlockChangeWeapon
	 bool                      IsHaveMainWeapon ( int nIndex );                  		//  GUIWarfare.BTConsole.IsHaveMainWeapon
	 bool                      KeyEvent ( unsigned char key, unsigned char Action, float Delta );		//  GUIWarfare.BTConsole.KeyEvent
	 bool                      KeyType ( unsigned char key, struct FString Unicode );		//  GUIWarfare.BTConsole.KeyType
	 bool                      GetChatEnabled (  );                              		//  GUIWarfare.BTConsole.GetChatEnabled
	 void                      SetChatEnabled ( bool Value );                    		//  GUIWarfare.BTConsole.SetChatEnabled
	 void                      ChatEditBox_OnInputSpace ( class UGUIComponent* Sender, struct FString Text );		//  GUIWarfare.BTConsole.ChatEditBox_OnInputSpace
	 void                      ChatEditBox_OnInputTab ( class UGUIComponent* Sender, struct FString Text );		//  GUIWarfare.BTConsole.ChatEditBox_OnInputTab
}; // Size: 0x022C

// Class GUIWarfare.BTNetGUIPage
class DLL_IMPORT UBTNetGUIPage : public UGUIPage
{
public:
	class UBTNetMainMenu*                              page_Main;                                        		// 0x0354 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTTcpLink_Channel*                          TcpChannel;                                       		// 0x0358 ( 0x0004 ) 
	class UBTTcpLink_Login*                            TcpLogin;                                         		// 0x035C ( 0x0004 ) 
	class TArray< struct FString >                     BGMList;                                          		// 0x0360 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTNetGameData*                              NetGameData;                                      		// 0x036C ( 0x0004 ) 
	class UBTDataTransferClientLink*                   DataTransferLink;                                 		// 0x0370 ( 0x0004 ) 
	struct FString                                     strSystem;                                        		// 0x0374 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strClanGrade[ 0x05 ];                             		// 0x0380 ( 0x003C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSlashW;                                        		// 0x03BC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSlashN;                                        		// 0x03C8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSlashC;                                        		// 0x03D4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSlashT;                                        		// 0x03E0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strTo;                                            		// 0x03EC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strFrom;                                          		// 0x03F8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strLink;                                          		// 0x0404 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strExit;                                          		// 0x0410 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      OnCompleteOpened (  );                            		//  GUIWarfare.BTNetGUIPage.OnCompleteOpened
	 void                      OnBackToLastPage (  );                            		//  GUIWarfare.BTNetGUIPage.OnBackToLastPage
	 void                      ProcessNat (  );                                  		//  GUIWarfare.BTNetGUIPage.ProcessNat
	 bool                      InternalOnPreDraw ( class UCanvas* C );           		//  GUIWarfare.BTNetGUIPage.InternalOnPreDraw
	 bool                      MyCanClose ( bool bCanceled );                    		//  GUIWarfare.BTNetGUIPage.MyCanClose
	 void                      eventOpened ( class UGUIComponent* Sender );      		// [ FUNC_Event ] GUIWarfare.BTNetGUIPage.Opened
	 class UBTTcpLink_Login*   GetTcpLogin (  );                                 		//  GUIWarfare.BTNetGUIPage.GetTcpLogin
	 class UBTTcpLink_Channel* GetTcpChannel (  );                               		//  GUIWarfare.BTNetGUIPage.GetTcpChannel
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTNetGUIPage.InitComponent
	 struct FChatInfo          TextToChatInfo ( struct FString Text );           		//  GUIWarfare.BTNetGUIPage.TextToChatInfo
	 void                      RefreshPage (  );                                 		//  GUIWarfare.BTNetGUIPage.RefreshPage
}; // Size: 0x00C8

// Class GUIWarfare.BTNetMainMenu
class DLL_IMPORT UBTNetMainMenu : public UBTNetGUIPage
{
public:
	class UBTTPChatHK*                                 TPChat;                                           		// 0x041C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	int                                                CheckOneHour;                                     		// 0x0420 ( 0x0004 ) 
	unsigned char                                      eCurrPage;                                        		// 0x0424 ( 0x0001 ) 
	unsigned long                                      kClanWarUserCountIgnore:1;                        		// 0x0428 ( 0x0004 )  [0x00000001]
	class UPageOnWindowManager*                        pwm;                                              		// 0x042C ( 0x0004 ) 
	class UwMatchMaker*                                rMM;                                              		// 0x0430 ( 0x0004 ) [ CPF_Transient ]
	class UwMyPlayerStatus*                            rMyStatus;                                        		// 0x0434 ( 0x0004 ) [ CPF_Transient ]
	class UwGameManager*                               rGameMgr;                                         		// 0x0438 ( 0x0004 ) [ CPF_Transient ]
	struct FClanInfo                                   MyClanInfo;                                       		// 0x043C ( 0x00A8 ) [ CPF_NeedCtorLink ]
	struct FClanInfo                                   kRecvClanInfo;                                    		// 0x04E4 ( 0x00A8 ) [ CPF_NeedCtorLink ]
	struct FCharInfo                                   MyCharInfo;                                       		// 0x058C ( 0x00C0 ) 
	struct FString                                     MyClanName;                                       		// 0x064C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SaveClanName;                                     		// 0x0658 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      InTutorial:1;                                     		// 0x0664 ( 0x0004 )  [0x00000001]
	unsigned long                                      EnterBotMode:1;                                   		// 0x0664 ( 0x0004 )  [0x00000002]
	unsigned long                                      CreateBotMode:1;                                  		// 0x0664 ( 0x0004 )  [0x00000004]
	unsigned long                                      bRequestItemList:1;                               		// 0x0664 ( 0x0004 )  [0x00000008]
	struct FWZInvenListProcess                         WZILP;                                            		// 0x0668 ( 0x001C ) [ CPF_NeedCtorLink ]
	int                                                CommandType;                                      		// 0x0684 ( 0x0004 ) 
	int                                                CommandParameter_int;                             		// 0x0688 ( 0x0004 ) 
	struct FString                                     CommandParameter_string;                          		// 0x068C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bIsInPCBang:1;                                    		// 0x0698 ( 0x0004 )  [0x00000001]
	unsigned long                                      bFirstLogin:1;                                    		// 0x0698 ( 0x0004 )  [0x00000002]
	unsigned long                                      bAutoMove:1;                                      		// 0x0698 ( 0x0004 )  [0x00000004]
	unsigned char                                      AutoMoveState;                                    		// 0x069C ( 0x0001 ) 
	unsigned long                                      AutoMoveDirectionOut:1;                           		// 0x06A0 ( 0x0004 )  [0x00000001]
	int                                                AutoMoveClanWar;                                  		// 0x06A4 ( 0x0004 ) 
	int                                                AutoMoveServerID;                                 		// 0x06A8 ( 0x0004 ) 
	int                                                AutoMoveChannelID;                                		// 0x06AC ( 0x0004 ) 
	int                                                AutoMoveGameRoomNum;                              		// 0x06B0 ( 0x0004 ) 
	struct FString                                     AutoMoveGameRoomPassword;                         		// 0x06B4 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bPostBoxFull:1;                                   		// 0x06C0 ( 0x0004 )  [0x00000001]
	unsigned long                                      bNewMailArrived:1;                                		// 0x06C0 ( 0x0004 )  [0x00000002]
	int                                                NewMailCount;                                     		// 0x06C4 ( 0x0004 ) 
	class TArray< struct FServerConnectionInfo >       SCIList;                                          		// 0x06C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FMapNameInfo >                MapNameList;                                      		// 0x06D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AuthLogin_ClientIP;                               		// 0x06E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      AuthLogin_ChannelType;                            		// 0x06EC ( 0x0001 ) 
	unsigned char                                      AuthLogin_ConnectAlpha;                           		// 0x06ED ( 0x0001 ) 
	unsigned char                                      AuthLogin_AccountType;                            		// 0x06EE ( 0x0001 ) 
	struct FString                                     AuthLogin_GUID;                                   		// 0x06F0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AuthLogin_AccountID;                              		// 0x06FC ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                AuthLogin_ChannelingType;                         		// 0x0708 ( 0x0004 ) 
	struct FString                                     AuthLogin_AuthKey;                                		// 0x070C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AuthLogin_RegionKey;                              		// 0x0718 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     BirthDay;                                         		// 0x0724 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      Sex;                                              		// 0x0730 ( 0x0001 ) 
	struct FString                                     szLoginPassword;                                  		// 0x0734 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                LoginTimeStamp;                                   		// 0x0740 ( 0x0004 ) 
	int                                                LoginHash1;                                       		// 0x0744 ( 0x0004 ) 
	int                                                LoginHash2;                                       		// 0x0748 ( 0x0004 ) 
	int                                                LoginHash3;                                       		// 0x074C ( 0x0004 ) 
	int                                                LoginHash4;                                       		// 0x0750 ( 0x0004 ) 
	int                                                LoginHash5;                                       		// 0x0754 ( 0x0004 ) 
	unsigned long                                      bWarningDurabilityAndExpired:1;                   		// 0x0758 ( 0x0004 )  [0x00000001]
	struct FString                                     strGMList;                                        		// 0x075C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bChatBan:1;                                       		// 0x0768 ( 0x0004 )  [0x00000001]
	unsigned long                                      bSystemChatBlock:1;                               		// 0x0768 ( 0x0004 )  [0x00000002]
	float                                              ChatAccumTime[ 0x04 ];                            		// 0x076C ( 0x0010 ) 
	int                                                ChatLogTop;                                       		// 0x077C ( 0x0004 ) 
	class TArray< struct FChatHistory >                ChatLog;                                          		// 0x0780 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     LastRecvWhispherName;                             		// 0x078C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FChatInfo                                   PrevChatMode;                                     		// 0x0798 ( 0x001C ) [ CPF_NeedCtorLink ]
	struct FString                                     strNotice_All;                                    		// 0x07B4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNotice_Server;                                 		// 0x07C0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNotice_Channel;                                		// 0x07CC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNotice_Room;                                   		// 0x07D8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strKick;                                          		// 0x07E4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strChangeRoomTitle;                               		// 0x07F0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              NoticeUITimeSeconds;                              		// 0x07FC ( 0x0004 ) 
	float                                              NoticeUIPos;                                      		// 0x0800 ( 0x0004 ) 
	int                                                NoticeIndex;                                      		// 0x0804 ( 0x0004 ) 
	class TArray< struct FString >                     BatteryNotice;                                    		// 0x0808 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              AASUITimeSeconds;                                 		// 0x0814 ( 0x0004 ) 
	float                                              AASUIPos;                                         		// 0x0818 ( 0x0004 ) 
	class TArray< struct FAAS_Struct >                 BatteryAAS;                                       		// 0x081C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FAAS_Struct                                 AASTemp[ 0x02 ];                                  		// 0x0828 ( 0x0048 ) [ CPF_NeedCtorLink ]
	struct FString                                     strAASMessage[ 0x06 ];                            		// 0x0870 ( 0x0048 ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bNewAvailableQuest:1;                             		// 0x08B8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bNewAvailableEventQuest:1;                        		// 0x08B8 ( 0x0004 )  [0x00000002]
	struct FLevelUpInfoStruct                          LevelUpInfo;                                      		// 0x08BC ( 0x0024 ) [ CPF_NeedCtorLink ]
	struct FExpiredItemsStruct                         ExpiredItems;                                     		// 0x08E0 ( 0x0010 ) [ CPF_NeedCtorLink ]
	struct FDurabilityWarningItemsStruct               DurWarningItems;                                  		// 0x08F0 ( 0x0010 ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     DestroyedDurabilityXItems;                        		// 0x0900 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                iSendUpdateQuickSlotList;                         		// 0x090C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageLogo*                                 page_Logo;                                        		// 0x0918 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_Logo;                                    		// 0x091C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageLogin*                                page_Login;                                       		// 0x0928 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_Login;                                   		// 0x092C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageLobby*                                page_Lobby2;                                      		// 0x0938 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_Lobby2;                                  		// 0x093C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageCharacterCreation*                    page_CharacterCreation;                           		// 0x0948 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_CharacterCreation;                       		// 0x094C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageServerSelection*                      page_ServerSelection;                             		// 0x0958 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_ServerSelection;                         		// 0x095C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageRoomLobby*                            page_RoomLobby;                                   		// 0x0968 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_RoomLobby;                               		// 0x096C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageMatchResult*                          page_MatchResult2;                                		// 0x0978 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_MatchResult2;                            		// 0x097C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageAuction*                              page_Auction;                                     		// 0x0988 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_Auction;                                 		// 0x098C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageHelp*                                 page_Help;                                        		// 0x0998 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_Help;                                    		// 0x099C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageMail*                                 page_Mail;                                        		// 0x09A8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_Mail;                                    		// 0x09AC ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageStore*                                page_Store;                                       		// 0x09B8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_Store;                                   		// 0x09BC ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageInventory*                            page_Inventory;                                   		// 0x09C8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_Inventory;                               		// 0x09CC ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageMyInfo*                               page_MyInfo;                                      		// 0x09D8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_MyInfo;                                  		// 0x09DC ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageClan*                                 page_Clan;                                        		// 0x09E8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_Clan;                                    		// 0x09EC ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageCredit*                               page_Credit;                                      		// 0x09F8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_Credit;                                  		// 0x09FC ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTPageClanWar*                              page_ClanWar;                                     		// 0x0A08 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     pagename_ClanWar;                                 		// 0x0A0C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      PageOnOpen;                                       		// 0x0A18 ( 0x0001 ) 
	class UBTNetGUIPage*                               page_curr;                                        		// 0x0A1C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< class UBTNetGUIPage* >               Pages;                                            		// 0x0A20 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szAccountName;                                    		// 0x0A2C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szLoginServerIP;                                  		// 0x0A38 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                szLoginServerPort;                                		// 0x0A44 ( 0x0004 ) 
	int                                                GameRunningCount;                                 		// 0x0A48 ( 0x0004 ) 
	unsigned long                                      bConnectedLoginServer:1;                          		// 0x0A4C ( 0x0004 )  [0x00000001]
	unsigned long                                      bConnectedChannelServer:1;                        		// 0x0A4C ( 0x0004 )  [0x00000002]
	unsigned long                                      bAuthKeySuccess:1;                                		// 0x0A4C ( 0x0004 )  [0x00000004]
	struct FString                                     DefaultLobbyBGM;                                  		// 0x0A50 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     LastMainPageBGM;                                  		// 0x0A5C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                iUID;                                             		// 0x0A68 ( 0x0004 ) [ CPF_Transient ]
	int                                                iChannel;                                         		// 0x0A6C ( 0x0004 ) [ CPF_Transient ]
	struct FString                                     ServerName;                                       		// 0x0A70 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ServerShortName;                                  		// 0x0A7C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                ServerGroupID;                                    		// 0x0A88 ( 0x0004 ) 
	int                                                ServerID;                                         		// 0x0A8C ( 0x0004 ) 
	int                                                GameRoomID;                                       		// 0x0A90 ( 0x0004 ) 
	struct FString                                     ServerGroupName;                                  		// 0x0A94 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ChannelName;                                      		// 0x0AA0 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                iRoomNum;                                         		// 0x0AAC ( 0x0004 ) [ CPF_Transient ]
	int                                                NatType;                                          		// 0x0AB0 ( 0x0004 ) 
	class TArray< struct FString >                     NatAddrs;                                         		// 0x0AB4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                NatPorts;                                         		// 0x0AC0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTNatDiag*                                  NatDiag;                                          		// 0x0ACC ( 0x0004 ) 
	float                                              TimeNatDiagStarted;                               		// 0x0AD0 ( 0x0004 ) 
	int                                                NatCheckLoop;                                     		// 0x0AD4 ( 0x0004 ) 
	float                                              NatDiagInterval;                                  		// 0x0AD8 ( 0x0004 ) 
	struct FString                                     LocalLogStr[ 0x09 ];                              		// 0x0ADC ( 0x006C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNatType[ 0x04 ];                               		// 0x0B48 ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strCashCharge;                                    		// 0x0B78 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FScriptDelegate                             __delegateCheckNat__Delegate;                     		// 0x0B84 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateRecv_ClanInfo__Delegate;                  		// 0x0B8C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateExpiredItemList__Delegate;                		// 0x0B94 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateDurabilityWarningItemList__Delegate;      		// 0x0B9C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateWebzenInvenList__Delegate;                		// 0x0BA4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateWebzenInvenListEnd__Delegate;             		// 0x0BAC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __ClearChatLog__Delegate;                         		// 0x0BB4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __NormalChatLog__Delegate;                        		// 0x0BBC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __ClanChatLog__Delegate;                          		// 0x0BC4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __WhisperChatLog__Delegate;                       		// 0x0BCC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __SelfChatLog__Delegate;                          		// 0x0BD4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __SystemChatLog__Delegate;                        		// 0x0BDC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __TeamChatLog__Delegate;                          		// 0x0BE4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __BroadCastItemChatLog__Delegate;                 		// 0x0BEC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __ClearChatLog_Extra__Delegate;                   		// 0x0BF4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __NormalChatLog_Extra__Delegate;                  		// 0x0BFC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __ClanChatLog_Extra__Delegate;                    		// 0x0C04 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __WhisperChatLog_Extra__Delegate;                 		// 0x0C0C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __SelfChatLog_Extra__Delegate;                    		// 0x0C14 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __SystemChatLog_Extra__Delegate;                  		// 0x0C1C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __TeamChatLog_Extra__Delegate;                    		// 0x0C24 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __BroadCastItemChatLog_Extra__Delegate;           		// 0x0C2C ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      SendLogin (  );                                   		//  GUIWarfare.BTNetMainMenu.SendLogin
	 bool                      OnAppExit ( class UGUIComponent* Sender );        		//  GUIWarfare.BTNetMainMenu.OnAppExit
	 bool                      TcpLogin_rfAckLoginWithGlobal_Test ( int Result );		//  GUIWarfare.BTNetMainMenu.TcpLogin_rfAckLoginWithGlobal_Test
	 bool                      TcpLogin_rfAckLoginWithGlobal_Live ( int Result );		//  GUIWarfare.BTNetMainMenu.TcpLogin_rfAckLoginWithGlobal_Live
	 bool                      TcpLogin_rfAckLoginWithThailand_Test ( int Result );		//  GUIWarfare.BTNetMainMenu.TcpLogin_rfAckLoginWithThailand_Test
	 bool                      TcpLogin_rfAckLoginWithThailand_Live ( int Result );		//  GUIWarfare.BTNetMainMenu.TcpLogin_rfAckLoginWithThailand_Live
	 bool                      TcpLogin_rfAckLoginWithWZAuth_Test ( int Result, unsigned char wzp_AccountType, unsigned char wzp_IsBlock, unsigned char wzp_AuthKeySuccess, unsigned char ChannelType );		//  GUIWarfare.BTNetMainMenu.TcpLogin_rfAckLoginWithWZAuth_Test
	 bool                      TcpLogin_rfAckLoginWithWZAuth_Live ( int Result, unsigned char wzp_AccountType, unsigned char wzp_IsBlock, unsigned char wzp_AuthKeySuccess, unsigned char ChannelType );		//  GUIWarfare.BTNetMainMenu.TcpLogin_rfAckLoginWithWZAuth_Live
	 bool                      TcpLogin_rfAckLoginWithTencentAuth_Test ( int Result, unsigned char tc_AccountType, unsigned char tc_IsBlock );		//  GUIWarfare.BTNetMainMenu.TcpLogin_rfAckLoginWithTencentAuth_Test
	 bool                      TcpLogin_rfAckLoginWithTencentAuth_Live ( int Result, unsigned char tc_AccountType, unsigned char tc_IsBlock );		//  GUIWarfare.BTNetMainMenu.TcpLogin_rfAckLoginWithTencentAuth_Live
	 void                      RequestUpdateQuickSlot ( int iQuickSlotIdx );     		//  GUIWarfare.BTNetMainMenu.RequestUpdateQuickSlot
	 void                      UpdateSendQuickSlotIndex ( int iQuickSlotIndex ); 		//  GUIWarfare.BTNetMainMenu.UpdateSendQuickSlotIndex
	 bool                      CheckMoveToChannel ( int iServerIndex );          		//  GUIWarfare.BTNetMainMenu.CheckMoveToChannel
	 void                      CheckWebzenShopItemList (  );                     		//  GUIWarfare.BTNetMainMenu.CheckWebzenShopItemList
	 void                      UpdateWebzenShopItemList ( int Year, int YearId, int SalesZoneCode );		//  GUIWarfare.BTNetMainMenu.UpdateWebzenShopItemList
	 bool                      ShowHelpWindow_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTNetMainMenu.ShowHelpWindow_OnOK
	 void                      ShowHelpWindow (  );                              		//  GUIWarfare.BTNetMainMenu.ShowHelpWindow
	 bool                      ShowReqCashWindow_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTNetMainMenu.ShowReqCashWindow_OnOK
	 bool                      ShowCashChargeWindow_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTNetMainMenu.ShowCashChargeWindow_OnOK
	 void                      ShowCashChargeWindow (  );                        		//  GUIWarfare.BTNetMainMenu.ShowCashChargeWindow
	 bool                      Internal_OnFunctionKey ( class UGUIComponent* Sender, unsigned char FunctionKey, struct FString Text );		//  GUIWarfare.BTNetMainMenu.Internal_OnFunctionKey
	 void                      TPChat_ChangeTab_OnClickTemp ( int TabIndex );    		//  GUIWarfare.BTNetMainMenu.TPChat_ChangeTab_OnClickTemp
	 void                      TPChat_ChangeTab_OnClick ( int TabIndex );        		//  GUIWarfare.BTNetMainMenu.TPChat_ChangeTab_OnClick
	 void                      TPChat_OnChageChatMode ( int ChatMode );          		//  GUIWarfare.BTNetMainMenu.TPChat_OnChageChatMode
	 void                      TPChat_OnInputTab ( class UGUIComponent* Sender, struct FString Text );		//  GUIWarfare.BTNetMainMenu.TPChat_OnInputTab
	 void                      TPChat_OnInputSpace ( class UGUIComponent* Sender, struct FString Text );		//  GUIWarfare.BTNetMainMenu.TPChat_OnInputSpace
	 bool                      Internal_OnChat ( class UGUIComponent* Sender, struct FString Text );		//  GUIWarfare.BTNetMainMenu.Internal_OnChat
	 void                      ChatBanEnd_OnTimer ( int Index );                 		//  GUIWarfare.BTNetMainMenu.ChatBanEnd_OnTimer
	 bool                      CheckChatBan (  );                                		//  GUIWarfare.BTNetMainMenu.CheckChatBan
	 bool                      UpdateChatBan (  );                               		//  GUIWarfare.BTNetMainMenu.UpdateChatBan
	 int                       IsInClanChannel ( struct FString ServerIP, int serverPort, int ChannelID );		//  GUIWarfare.BTNetMainMenu.IsInClanChannel
	 bool                      IsInPageLobby (  );                               		//  GUIWarfare.BTNetMainMenu.IsInPageLobby
	 bool                      IsInPageServerSelection (  );                     		//  GUIWarfare.BTNetMainMenu.IsInPageServerSelection
	 bool                      IsGameReadyOrPlaying (  );                        		//  GUIWarfare.BTNetMainMenu.IsGameReadyOrPlaying
	 bool                      IsInRangeDate ( struct FBtrDouble ServerTime, int syear, int smonth, int sday, int shour, int smin, int eyear, int emonth, int eday, int ehour, int emin );		//  GUIWarfare.BTNetMainMenu.IsInRangeDate
	 bool                      Is18YearsOld ( struct FBtrDouble ServerTime, struct FString BirthDay );		//  GUIWarfare.BTNetMainMenu.Is18YearsOld
	 void                      UpdateTimeBatteryAAS (  );                        		//  GUIWarfare.BTNetMainMenu.UpdateTimeBatteryAAS
	 void                      PopAASQueue (  );                                 		//  GUIWarfare.BTNetMainMenu.PopAASQueue
	 float                     GetAASFirstTime (  );                             		//  GUIWarfare.BTNetMainMenu.GetAASFirstTime
	 struct FString            GetAASFirst (  );                                 		//  GUIWarfare.BTNetMainMenu.GetAASFirst
	 void                      PushAASQueue ( struct FString Text, float Time, unsigned char AASLevel );		//  GUIWarfare.BTNetMainMenu.PushAASQueue
	 float                     GetAASBeginTime ( unsigned char byLevel );        		//  GUIWarfare.BTNetMainMenu.GetAASBeginTime
	 unsigned char             GetAASLevel (  );                                 		//  GUIWarfare.BTNetMainMenu.GetAASLevel
	 void                      SetAASMessage ( unsigned char byType, int AccumTime );		//  GUIWarfare.BTNetMainMenu.SetAASMessage
	 void                      ResetBatteryAAS (  );                             		//  GUIWarfare.BTNetMainMenu.ResetBatteryAAS
	 void                      UpdateTimeBatteryNotice (  );                     		//  GUIWarfare.BTNetMainMenu.UpdateTimeBatteryNotice
	 void                      PopNoticeQueue (  );                              		//  GUIWarfare.BTNetMainMenu.PopNoticeQueue
	 struct FString            GetNoticeFirst (  );                              		//  GUIWarfare.BTNetMainMenu.GetNoticeFirst
	 void                      PushNoticeQueue ( struct FString Notice );        		//  GUIWarfare.BTNetMainMenu.PushNoticeQueue
	 void                      ResetBatteryNotice (  );                          		//  GUIWarfare.BTNetMainMenu.ResetBatteryNotice
	 bool                      TextToGMCommand ( struct FString Text );          		//  GUIWarfare.BTNetMainMenu.TextToGMCommand
	 bool                      TextToCommand ( struct FString Text );            		//  GUIWarfare.BTNetMainMenu.TextToCommand
	 void                      UpdateChatLog (  );                               		//  GUIWarfare.BTNetMainMenu.UpdateChatLog
	 void                      ResetChatLog (  );                                		//  GUIWarfare.BTNetMainMenu.ResetChatLog
	 bool                      SelectChatLog ( int ChatType, struct FString chatText );		//  GUIWarfare.BTNetMainMenu.SelectChatLog
	 void                      BroadCastItemChatLog_Extra ( struct FString cL ); 		//  GUIWarfare.BTNetMainMenu.BroadCastItemChatLog_Extra
	 void                      TeamChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTNetMainMenu.TeamChatLog_Extra
	 void                      SystemChatLog_Extra ( struct FString cL );        		//  GUIWarfare.BTNetMainMenu.SystemChatLog_Extra
	 void                      SelfChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTNetMainMenu.SelfChatLog_Extra
	 void                      WhisperChatLog_Extra ( struct FString cL );       		//  GUIWarfare.BTNetMainMenu.WhisperChatLog_Extra
	 void                      ClanChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTNetMainMenu.ClanChatLog_Extra
	 void                      NormalChatLog_Extra ( struct FString cL );        		//  GUIWarfare.BTNetMainMenu.NormalChatLog_Extra
	 void                      ClearChatLog_Extra (  );                          		//  GUIWarfare.BTNetMainMenu.ClearChatLog_Extra
	 void                      BroadCastItemChatLog ( struct FString cL );       		//  GUIWarfare.BTNetMainMenu.BroadCastItemChatLog
	 void                      TeamChatLog ( struct FString cL );                		//  GUIWarfare.BTNetMainMenu.TeamChatLog
	 void                      SystemChatLog ( struct FString cL );              		//  GUIWarfare.BTNetMainMenu.SystemChatLog
	 void                      SelfChatLog ( struct FString cL );                		//  GUIWarfare.BTNetMainMenu.SelfChatLog
	 void                      WhisperChatLog ( struct FString cL );             		//  GUIWarfare.BTNetMainMenu.WhisperChatLog
	 void                      ClanChatLog ( struct FString cL );                		//  GUIWarfare.BTNetMainMenu.ClanChatLog
	 void                      NormalChatLog ( struct FString cL );              		//  GUIWarfare.BTNetMainMenu.NormalChatLog
	 void                      ClearChatLog (  );                                		//  GUIWarfare.BTNetMainMenu.ClearChatLog
	 int                       GetChatLogTopIndex (  );                          		//  GUIWarfare.BTNetMainMenu.GetChatLogTopIndex
	 void                      AddChatLog ( struct FString chatText, int ChatType, bool bForceUpdateLast );		//  GUIWarfare.BTNetMainMenu.AddChatLog
	 bool                      Exit_OnOK ( class UGUIComponent* Sender );        		//  GUIWarfare.BTNetMainMenu.Exit_OnOK
	 bool                      TcpLogin_rfAckHash ( int Result, struct FString Error );		//  GUIWarfare.BTNetMainMenu.TcpLogin_rfAckHash
	 void                      TcpLogin_OnError ( int ErrCode );                 		//  GUIWarfare.BTNetMainMenu.TcpLogin_OnError
	 void                      TcpLogin_OnClose ( int ErrCode );                 		//  GUIWarfare.BTNetMainMenu.TcpLogin_OnClose
	 void                      TcpLogin_OnConnect ( int ErrCode );               		//  GUIWarfare.BTNetMainMenu.TcpLogin_OnConnect
	 void                      SetPage ( unsigned char PageType, bool closeLastMenu );		//  GUIWarfare.BTNetMainMenu.SetPage
	 void                      HaltNetwork (  );                                 		//  GUIWarfare.BTNetMainMenu.HaltNetwork
	 bool                      eventrfReqForceNatTypeSetting ( int NatType );    		// [ FUNC_Event ] GUIWarfare.BTNetMainMenu.rfReqForceNatTypeSetting
	 void                      CheckNatPhrase2HK (  );                           		//  GUIWarfare.BTNetMainMenu.CheckNatPhrase2HK
	 void                      CheckNatPhrase1HK (  );                           		//  GUIWarfare.BTNetMainMenu.CheckNatPhrase1HK
	 void                      CheckNatPhrase0HK (  );                           		//  GUIWarfare.BTNetMainMenu.CheckNatPhrase0HK
	 void                      StartNatCheck (  );                               		//  GUIWarfare.BTNetMainMenu.StartNatCheck
	 void                      eventrfReqStartNatDiag ( struct FString Server1Addr, int Server1Port, struct FString Server2Addr, int Server2Port );		// [ FUNC_Event ] GUIWarfare.BTNetMainMenu.rfReqStartNatDiag
	 void                      deleOnClose ( bool bCancelled );                  		//  GUIWarfare.BTNetMainMenu.deleOnClose
	 bool                      deleOnKeyEvent ( float Delta, unsigned char* key, unsigned char* State );		//  GUIWarfare.BTNetMainMenu.deleOnKeyEvent
	 void                      deleOnOpen (  );                                  		//  GUIWarfare.BTNetMainMenu.deleOnOpen
	 class UBTTcpLink_Login*   GetTcpLogin (  );                                 		//  GUIWarfare.BTNetMainMenu.GetTcpLogin
	 void                      InitializeTcpLogin ( struct FString IP, int Port );		//  GUIWarfare.BTNetMainMenu.InitializeTcpLogin
	 void                      InitializeTcpChannel ( struct FString IP, int Port, int DataPort );		//  GUIWarfare.BTNetMainMenu.InitializeTcpChannel
	 void                      ShowPlayTimePerHour_OnEventTimer ( int Index );   		//  GUIWarfare.BTNetMainMenu.ShowPlayTimePerHour_OnEventTimer
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTNetMainMenu.InitComponent
	 void                      KeepMoving (  );                                  		//  GUIWarfare.BTNetMainMenu.KeepMoving
	 void                      EndAutoMove (  );                                 		//  GUIWarfare.BTNetMainMenu.EndAutoMove
	 void                      StartAutoMove ( int Server, int Channel, int gameroom, struct FString Password, int ClanMatch_EnterState );		//  GUIWarfare.BTNetMainMenu.StartAutoMove
	 struct FString            FindChannelNickName ( int ServerID, int ChannelID );		//  GUIWarfare.BTNetMainMenu.FindChannelNickName
	 struct FString            FindServerShortName ( int ServerID, int ChannelID );		//  GUIWarfare.BTNetMainMenu.FindServerShortName
	 struct FString            FindServerName ( int ServerID );                  		//  GUIWarfare.BTNetMainMenu.FindServerName
	 int                       FindServerConnectionInfoIndex ( int ServerID, int ChannelID );		//  GUIWarfare.BTNetMainMenu.FindServerConnectionInfoIndex
	 int                       FindServerChannelInfoIndexByServerIP ( struct FString ServerIP, int serverPort, int ChannelID );		//  GUIWarfare.BTNetMainMenu.FindServerChannelInfoIndexByServerIP
	 void                      AddServerChannelList ( int ServerID, int ChannelID, struct FString ServerIP, int serverPort, int ServerDataPort, struct FString ServerName, struct FString ServerShortName, struct FString ChannelName, int ServerGroupID, struct FString ServerGroupName, int IsClanChannel, struct FString ChannelNickName, int ChannelType, bool IsDedicatedServer, int nCurUser, int nMaxUser );		//  GUIWarfare.BTNetMainMenu.AddServerChannelList
	 void                      ClearServerChannelList (  );                      		//  GUIWarfare.BTNetMainMenu.ClearServerChannelList
	 void                      CheckItemWarning (  );                            		//  GUIWarfare.BTNetMainMenu.CheckItemWarning
	 bool                      CheckDestroyedDurabilityXItemList (  );           		//  GUIWarfare.BTNetMainMenu.CheckDestroyedDurabilityXItemList
	 bool                      CheckDestroyedDurabilityXItemList_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTNetMainMenu.CheckDestroyedDurabilityXItemList_OnOK
	 bool                      CompleteDestroyedDurabilityXItemList (  );        		//  GUIWarfare.BTNetMainMenu.CompleteDestroyedDurabilityXItemList
	 bool                      CheckDurabilityWarningItemList (  );              		//  GUIWarfare.BTNetMainMenu.CheckDurabilityWarningItemList
	 bool                      CheckExpiredItemList (  );                        		//  GUIWarfare.BTNetMainMenu.CheckExpiredItemList
	 void                      CompleteExpiredItem (  );                         		//  GUIWarfare.BTNetMainMenu.CompleteExpiredItem
	 void                      AddExpiredSkillItem ( int ItemID, int UniqueID, int SlotPos );		//  GUIWarfare.BTNetMainMenu.AddExpiredSkillItem
	 void                      AddExpiredItem ( int ItemID, struct FBtrDouble UniqueID, int SlotPos, int PartID );		//  GUIWarfare.BTNetMainMenu.AddExpiredItem
	 void                      CompleteDurabilityWarningItem (  );               		//  GUIWarfare.BTNetMainMenu.CompleteDurabilityWarningItem
	 void                      AddDurabilityWarningItemRepairCost ( struct FBtrDouble UniqueID, int RepairCost );		//  GUIWarfare.BTNetMainMenu.AddDurabilityWarningItemRepairCost
	 void                      AddDurabilityWarningItem ( struct FBtrDouble UniqueID, int ItemID, int SlotPos, int PartID, int Durability );		//  GUIWarfare.BTNetMainMenu.AddDurabilityWarningItem
	 void                      LoginToChannel ( struct FString IP, int Port, int DataPort );		//  GUIWarfare.BTNetMainMenu.LoginToChannel
	 void                      ChannelToLogin2 ( struct FString IP, int Port );  		//  GUIWarfare.BTNetMainMenu.ChannelToLogin2
	 void                      ChannelToLogin ( struct FString IP, int Port );   		//  GUIWarfare.BTNetMainMenu.ChannelToLogin
	 void                      ChannelToLogin_OnEventTimer ( int Index );        		//  GUIWarfare.BTNetMainMenu.ChannelToLogin_OnEventTimer
	 void                      UpdateWebzenInvenListEnd ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTNetMainMenu.UpdateWebzenInvenListEnd
	 void                      UpdateWebzenInvenList ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTNetMainMenu.UpdateWebzenInvenList
	 void                      StopWebzenInvenList (  );                         		//  GUIWarfare.BTNetMainMenu.StopWebzenInvenList
	 bool                      sfReqWebzenInvenList ( struct FString StorageType );		//  GUIWarfare.BTNetMainMenu.sfReqWebzenInvenList
	 void                      SetNewMailArrived ( bool B );                     		//  GUIWarfare.BTNetMainMenu.SetNewMailArrived
	 void                      UpdateDurabilityWarningItemList ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTNetMainMenu.UpdateDurabilityWarningItemList
	 void                      UpdateExpiredItemList ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTNetMainMenu.UpdateExpiredItemList
	 void                      UpdateRecv_ClanInfo ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTNetMainMenu.UpdateRecv_ClanInfo
	 void                      delegateCheckNat (  );                            		//  GUIWarfare.BTNetMainMenu.delegateCheckNat
}; // Size: 0x0818

// Class GUIWarfare.BTNetGUIPageHK
class DLL_IMPORT UBTNetGUIPageHK : public UBTNetGUIPage
{
public:
	class UwMatchMaker*                                MM;                                               		// 0x041C ( 0x0004 ) 
	class UwGameManager*                               GameMgr;                                          		// 0x0420 ( 0x0004 ) 
	struct FString                                     currentBGM;                                       		// 0x0424 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FFloatBox                                   fbTPTopMenu;                                      		// 0x0430 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPTopMenuHK*                              TPTopMenu;                                        		// 0x0440 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelRoomName;                                  		// 0x0444 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawSourceClipImageHK*               LabelRoomName;                                    		// 0x0454 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelTitle;                                     		// 0x0458 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelTitle;                                       		// 0x0468 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelLeftTopRoll;                               		// 0x046C ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbLabelLeftTopRollSource;                         		// 0x047C ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawSourceClipImageHK*               LabelLeftTopRoll;                                 		// 0x048C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelTopLine;                                   		// 0x0490 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelTopLine;                                     		// 0x04A0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelBottomLine;                                		// 0x04A4 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTLabelNoticeHK*                            LabelBottomLine;                                  		// 0x04B4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelAAS;                                       		// 0x04B8 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPAASHK*                                  LabelAAS;                                         		// 0x04C8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned long                                      bSkipInitializeDefaultPage:1;                     		// 0x04CC ( 0x0004 )  [0x00000001]
	unsigned long                                      bFadeTimeTranslate:1;                             		// 0x04CC ( 0x0004 )  [0x00000002]
	unsigned long                                      bUseTranslate:1;                                  		// 0x04CC ( 0x0004 )  [0x00000004]
	unsigned long                                      bCallFadeIn:1;                                    		// 0x04CC ( 0x0004 )  [0x00000008]
	unsigned long                                      bFading:1;                                        		// 0x04CC ( 0x0004 )  [0x00000010]
	unsigned long                                      bClosing:1;                                       		// 0x04CC ( 0x0004 )  [0x00000020]
	float                                              FadeTime;                                         		// 0x04D0 ( 0x0004 ) 
	float                                              CurFadeTime;                                      		// 0x04D4 ( 0x0004 ) 
	unsigned char                                      CurFade;                                          		// 0x04D8 ( 0x0001 ) 
	unsigned char                                      DesiredFade;                                      		// 0x04D9 ( 0x0001 ) 
	unsigned char                                      StartFade;                                        		// 0x04DA ( 0x0001 ) 
	struct FFloatBox                                   fbNewBackground;                                  		// 0x04DC ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         NewBackground;                                    		// 0x04EC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         WeaponListBg;                                     		// 0x04F0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbWeaponListBg;                                   		// 0x04F4 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FString                                     strWeaponList[ 0x06 ];                            		// 0x0504 ( 0x0048 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< class UBTOwnerDrawCaptionButtonHK* > WeaponeTypeBtnList;                               		// 0x054C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bShowWeaponeTypeList:1;                           		// 0x0558 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      Default_FadedOut (  );                            		//  GUIWarfare.BTNetGUIPageHK.Default_FadedOut
	 void                      FadeOut ( bool bTranslate, bool bChangeAlpha );   		//  GUIWarfare.BTNetGUIPageHK.FadeOut
	 void                      FadeIn ( bool bTranslate, bool bChangeAlpha );    		//  GUIWarfare.BTNetGUIPageHK.FadeIn
	 bool                      Internal_OnPreDraw ( class UCanvas* C );          		//  GUIWarfare.BTNetGUIPageHK.Internal_OnPreDraw
	 class UBTOwnerDrawCaptionButtonHK* NewButtonComponent ( struct FFloatBox fbNewCompo, float RenderWeight );		//  GUIWarfare.BTNetGUIPageHK.NewButtonComponent
	 class UBTOwnerDrawImageHK* NewLabelComponent ( struct FFloatBox fbNewCompo, struct FImage bgImg, float RenderWeight );		//  GUIWarfare.BTNetGUIPageHK.NewLabelComponent
	 void                      ExitGame (  );                                    		//  GUIWarfare.BTNetGUIPageHK.ExitGame
	 void                      OpenTodayResultPage (  );                         		//  GUIWarfare.BTNetGUIPageHK.OpenTodayResultPage
	 bool                      BTWIndowTodayResultHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTNetGUIPageHK.BTWIndowTodayResultHK_OnOK
	 bool                      WeaponListClick ( class UGUIComponent* Sender );  		//  GUIWarfare.BTNetGUIPageHK.WeaponListClick
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTNetGUIPageHK.InitComponent
	 void                      LabelAAS_OnNextAAS ( struct FString NextAAS );    		//  GUIWarfare.BTNetGUIPageHK.LabelAAS_OnNextAAS
	 void                      LabelBottomLine_OnNextNotice ( struct FString NextNotice );		//  GUIWarfare.BTNetGUIPageHK.LabelBottomLine_OnNextNotice
	 bool                      ButtonTest_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTNetGUIPageHK.ButtonTest_OnClick
	 void                      InitializeDefaultPage (  );                       		//  GUIWarfare.BTNetGUIPageHK.InitializeDefaultPage
	 void                      SetDefaultWeapon ( int SlotIndex );               		//  GUIWarfare.BTNetGUIPageHK.SetDefaultWeapon
	 void                      RefreshPage (  );                                 		//  GUIWarfare.BTNetGUIPageHK.RefreshPage
	 void                      eventOpened ( class UGUIComponent* Sender );      		// [ FUNC_Event ] GUIWarfare.BTNetGUIPageHK.Opened
}; // Size: 0x0140

// Class GUIWarfare.BTNetQuestInfoPageHK
class DLL_IMPORT UBTNetQuestInfoPageHK : public UBTNetGUIPageHK
{
public:
	class UBTTPQuestInfoHK*                            QuestInfo;                                        		// 0x055C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      TPTopMenu_Quest_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTNetQuestInfoPageHK.TPTopMenu_Quest_OnClick
	 void                      NotifyDailyQuestReset (  );                       		//  GUIWarfare.BTNetQuestInfoPageHK.NotifyDailyQuestReset
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTNetQuestInfoPageHK.InternalOnOpen
	 void                      InternalOnReOpen (  );                            		//  GUIWarfare.BTNetQuestInfoPageHK.InternalOnReOpen
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTNetQuestInfoPageHK.InitComponent
}; // Size: 0x0004

// Class GUIWarfare.BTPageRoomLobby
class DLL_IMPORT UBTPageRoomLobby : public UBTNetQuestInfoPageHK
{
public:
	int                                                OutofSeatTime;                                    		// 0x0560 ( 0x0004 ) 
	int                                                OwnerOutofSeatTime;                               		// 0x0564 ( 0x0004 ) 
	float                                              LastKeySleepTime;                                 		// 0x0568 ( 0x0004 ) 
	unsigned long                                      bAllReady:1;                                      		// 0x056C ( 0x0004 )  [0x00000001]
	int                                                PrevGameMode;                                     		// 0x0570 ( 0x0004 ) 
	unsigned long                                      bPrevTeamBalance:1;                               		// 0x0574 ( 0x0004 )  [0x00000001]
	struct FString                                     strTeamBalance[ 0x03 ];                           		// 0x0578 ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strBotModeWarn[ 0x02 ];                           		// 0x059C ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNoviceMode;                                    		// 0x05B4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strBotMode;                                       		// 0x05C0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              TimeAutoStart;                                    		// 0x05CC ( 0x0004 ) 
	float                                              TPMessenger_ACLMsg0_OnHitBottom_LastTime;         		// 0x05D0 ( 0x0004 ) 
	unsigned long                                      bGoToClanPage:1;                                  		// 0x05D4 ( 0x0004 )  [0x00000001]
	float                                              LastRefreshTime[ 0x02 ];                          		// 0x05D8 ( 0x0008 ) 
	float                                              RefreshCycleTime[ 0x02 ];                         		// 0x05E0 ( 0x0008 ) 
	class UBTRefreshTime*                              rfFriendPosTime;                                  		// 0x05E8 ( 0x0004 ) 
	int                                                TotalChannelUserCount;                            		// 0x05EC ( 0x0004 ) 
	int                                                CurrentRoomState;                                 		// 0x05F0 ( 0x0004 ) 
	unsigned long                                      bJoinClanState:1;                                 		// 0x05F4 ( 0x0004 )  [0x00000001]
	unsigned long                                      bClanInviteState:1;                               		// 0x05F4 ( 0x0004 )  [0x00000002]
	unsigned long                                      bSafeLeaveRoom:1;                                 		// 0x05F4 ( 0x0004 )  [0x00000004]
	class UBTOwnerDrawImageHK*                         LabelTeamSelect;                                  		// 0x05F8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelTeam;                                      		// 0x05FC ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelTeam;                                        		// 0x060C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelTeamTopLine;                               		// 0x0610 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelTeamTopLine;                                 		// 0x0620 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbButtonTeam[ 0x02 ];                             		// 0x0624 ( 0x0020 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonTeam[ 0x02 ];                               		// 0x0644 ( 0x0008 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbTPTeamList[ 0x02 ];                             		// 0x064C ( 0x0020 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPTeamMemberList*                         TPTeamList[ 0x02 ];                               		// 0x066C ( 0x0008 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< class UBTAutoColumnListDataHK* >     UserListDB;                                       		// 0x0674 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UBTAutoColumnListDataHK* >     GMList;                                           		// 0x0680 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                GMNumAF;                                          		// 0x068C ( 0x0004 ) 
	int                                                GMNumRSA;                                         		// 0x0690 ( 0x0004 ) 
	struct FFloatBox                                   fbTPChat;                                         		// 0x0694 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPChatHK*                                 TPChat;                                           		// 0x06A4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbTPMessenger;                                    		// 0x06A8 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPMessengerHKCN*                          TPMessenger;                                      		// 0x06B8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbTPMyInfo;                                       		// 0x06BC ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPMyInfoHK*                               TPMyInfo;                                         		// 0x06CC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbTPRoomInfo;                                     		// 0x06D0 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPRoomInfoHK*                             TPRoomInfo;                                       		// 0x06E0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strButtonStart[ 0x03 ];                           		// 0x06E4 ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbButtonStart;                                    		// 0x0708 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonStart;                                      		// 0x0718 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbButtonTemp;                                     		// 0x071C ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonTemp;                                       		// 0x072C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UwMatchMaker*                                MatchMaker;                                       		// 0x0730 ( 0x0004 ) [ CPF_Transient ]
	class TArray< struct FGameModeInfo >               GameModes;                                        		// 0x0734 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bReadyToGame:1;                                   		// 0x0740 ( 0x0004 )  [0x00000001]
	unsigned long                                      bNoInitialRoomInfo:1;                             		// 0x0740 ( 0x0004 )  [0x00000002]
	unsigned long                                      bShowHostWarning:1;                               		// 0x0740 ( 0x0004 )  [0x00000004]
	struct FString                                     strExpiredItem;                                   		// 0x0744 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     CannotChangeHostTitle;                            		// 0x0750 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     CannotChangeHostMessage;                          		// 0x075C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WaitingMessage;                                   		// 0x0768 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MessageNewHost;                                   		// 0x0774 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MessageNewGuestPre;                               		// 0x0780 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MessageNewGuestPost;                              		// 0x078C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MessageHostChangeEnable[ 0x02 ];                  		// 0x0798 ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strLowHostScoreWarning[ 0x02 ];                   		// 0x07B0 ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                NewOwnerID;                                       		// 0x07C8 ( 0x0004 ) 
	int                                                MinHostPoint;                                     		// 0x07CC ( 0x0004 ) 
	int                                                MinWaringHostPoint;                               		// 0x07D0 ( 0x0004 ) 
	int                                                MaxWaringHostPoint;                               		// 0x07D4 ( 0x0004 ) 
	float                                              SendPingIntervalTime;                             		// 0x07D8 ( 0x0004 ) 
	unsigned char                                      MyAction;                                         		// 0x07DC ( 0x0001 ) 
	class UBTLabelTutorialQuestInfoHK*                 LabelPopupTutorial;                               		// 0x07E0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< int >                                ReceivedPingID;                                   		// 0x07E4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                ReceivedPingValue;                                		// 0x07F0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     DelFriendsList;                                   		// 0x07FC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FFloatBox                                   fbBGDeco;                                         		// 0x0808 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         BGDeco;                                           		// 0x0818 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 MyInfoBtn;                                        		// 0x081C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FScriptDelegate                             __CurrentButtonClickBehavior__Delegate;           		// 0x0820 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      CheckEnterRoom_InClanChannel ( struct FString szClanName );		//  GUIWarfare.BTPageRoomLobby.CheckEnterRoom_InClanChannel
	 class UBTAutoColumnListDataHK* MakeTeamMemberData ( int UID, int ClanMark, int ClanBG, int ClanBL, int Level, struct FString NickName, struct FString ClanName, int Status, int Host, int Ping, struct FString UserIP, unsigned char LookingFor, int ClanLevel, int LevelMarkID, int TitleMarkID, int TeamNum, int Reserved2, int Reserved3, bool bMe, bool bisGM );		//  GUIWarfare.BTPageRoomLobby.MakeTeamMemberData
	 void                      SaveUserData ( class UBTAutoColumnListDataHK* Item );		//  GUIWarfare.BTPageRoomLobby.SaveUserData
	 bool                      rfNotifyClanLevelup ( struct FString ClanName, int Levelup );		//  GUIWarfare.BTPageRoomLobby.rfNotifyClanLevelup
	 bool                      rfNotifyNewClanName ( struct FString New_NickName );		//  GUIWarfare.BTPageRoomLobby.rfNotifyNewClanName
	 bool                      rfNotifyNewNickName ( int Community_Type, struct FString Old_NickName, struct FString New_NickName );		//  GUIWarfare.BTPageRoomLobby.rfNotifyNewNickName
	 bool                      rfAckGetRankingInfoListEnd (  );                  		//  GUIWarfare.BTPageRoomLobby.rfAckGetRankingInfoListEnd
	 bool                      rfAckGetRankingInfoList ( int Result, unsigned char RankingType, unsigned char CommunityType, class TArray< struct FString > CharName, class TArray< int > CharLevel, class TArray< struct FString > ClanName, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Ranking_Accum, class TArray< int > Ranking_Accum_Prev, class TArray< int > Ranking_Accum_Exp, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageRoomLobby.rfAckGetRankingInfoList
	 bool                      rfAckGetRankingInfoListStart ( int Result, unsigned char RankingType, unsigned char CommunityType, int TotalCount );		//  GUIWarfare.BTPageRoomLobby.rfAckGetRankingInfoListStart
	 bool                      rfAckFriendPosition ( int Result, struct FString TargetCharName, unsigned char ServerType, struct FString fServername, struct FString fServerShortName, struct FString fServerIP, int fServerPort, unsigned char CurPos, unsigned char CurState, int ChannelNum, struct FString ChannelNickName, int GameRoomNum );		//  GUIWarfare.BTPageRoomLobby.rfAckFriendPosition
	 bool                      rfAckNotifyUpdateCharInfo_LevelMark ( struct FString CharName, int LevelMarkID );		//  GUIWarfare.BTPageRoomLobby.rfAckNotifyUpdateCharInfo_LevelMark
	 bool                      rfReqInGameRoomUserClanLevelChanged ( int UserID, int ClanLevel );		//  GUIWarfare.BTPageRoomLobby.rfReqInGameRoomUserClanLevelChanged
	 bool                      rfReqInGameRoomUserInfoChanged (  );              		//  GUIWarfare.BTPageRoomLobby.rfReqInGameRoomUserInfoChanged
	 bool                      rfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageRoomLobby.rfAckNotifyAdjustClanMemberGrade
	 void                      UserPingRefresh (  );                             		//  GUIWarfare.BTPageRoomLobby.UserPingRefresh
	 void                      SendPingToAll (  );                               		//  GUIWarfare.BTPageRoomLobby.SendPingToAll
	 void                      sfReqRoomUserPingInfo (  );                       		//  GUIWarfare.BTPageRoomLobby.sfReqRoomUserPingInfo
	 void                      OnReceivedPing ( class UwMatchMaker* MM, struct FString fromAddr, int msec );		//  GUIWarfare.BTPageRoomLobby.OnReceivedPing
	 bool                      rfAckRoomUserPingInfo ( class TArray< int > UnqueID, class TArray< int > Ping, int HostScore );		//  GUIWarfare.BTPageRoomLobby.rfAckRoomUserPingInfo
	 bool                      rfAckChangedRoomTitle_FromGM ( int Result, int RoomNumber, struct FString NewRoomTitle );		//  GUIWarfare.BTPageRoomLobby.rfAckChangedRoomTitle_FromGM
	 bool                      rfAckCheckEquipedWeaponDurability ( int Result, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemSlotNum );		//  GUIWarfare.BTPageRoomLobby.rfAckCheckEquipedWeaponDurability
	 bool                      ButtonTemp_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.ButtonTemp_OnClick
	 bool                      rfAckGetBotID ( int Result, unsigned char RequestedAFCount, unsigned char RequestedRSACount, class TArray< int > AFBotID, class TArray< int > RSABotID );		//  GUIWarfare.BTPageRoomLobby.rfAckGetBotID
	 bool                      rfAckAutoChangedTeamUserList ( class TArray< int > UserID, class TArray< int > TeamNum );		//  GUIWarfare.BTPageRoomLobby.rfAckAutoChangedTeamUserList
	 int                       FindTeamNumInArray ( class TArray< int > UserID, class TArray< int > TeamNum, int FindUserID );		//  GUIWarfare.BTPageRoomLobby.FindTeamNumInArray
	 bool                      rfReqRecvForceFailedClientLoading ( int ErrCode );		//  GUIWarfare.BTPageRoomLobby.rfReqRecvForceFailedClientLoading
	 bool                      rfAckStartHolePunching ( int Result, struct FString ErrMsg, int GameType, int ReqStartUserID );		//  GUIWarfare.BTPageRoomLobby.rfAckStartHolePunching
	 bool                      rfAckRegisterMyUdpInfo ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckRegisterMyUdpInfo
	 bool                      rfAckNotifyMyCharInfoToRoomUser ( int Result, struct FString ErrMsg, int UID, struct FString UserName, int Grade, int TeamNum, unsigned char Statue, unsigned char IsHost, struct FString UserIP, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, unsigned char IsLookFor );		//  GUIWarfare.BTPageRoomLobby.rfAckNotifyMyCharInfoToRoomUser
	 bool                      rfReqNotifyDisconnectHostInLoading ( int Result, struct FString ErrMsg, int HostID );		//  GUIWarfare.BTPageRoomLobby.rfReqNotifyDisconnectHostInLoading
	 bool                      rfReqRecvDeleteFriend ( int Result, struct FString FromCharName );		//  GUIWarfare.BTPageRoomLobby.rfReqRecvDeleteFriend
	 bool                      rfAckDeleteFriend ( int Result, class TArray< struct FString > FailedCharname );		//  GUIWarfare.BTPageRoomLobby.rfAckDeleteFriend
	 bool                      rfAckChannelUserListInGameRoom ( int Result, int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > CharName, class TArray< int > UserLevel, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< unsigned char > IsLookForClan, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageRoomLobby.rfAckChannelUserListInGameRoom
	 bool                      rfAckChatWispher ( int Result, struct FString ErrMsg, struct FString ToCharName );		//  GUIWarfare.BTPageRoomLobby.rfAckChatWispher
	 bool                      rfAckAcquirePromotionItems ( int UID, int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemIDs, class TArray< int > PartIDs );		//  GUIWarfare.BTPageRoomLobby.rfAckAcquirePromotionItems
	 bool                      rfReqNotifyLevelUp ( int LevelUpUserID, int Level, int Exp, class TArray< int > ItemID, class TArray< int > PartID );		//  GUIWarfare.BTPageRoomLobby.rfReqNotifyLevelUp
	 bool                      rfAckRecvJoinClanResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckRecvJoinClanResult
	 bool                      rfAckJoinClanResult ( struct FString CharName, unsigned char Permit, struct FString PermitCharName );		//  GUIWarfare.BTPageRoomLobby.rfAckJoinClanResult
	 bool                      BTWindowRequestApprovalClanHK_OnSuspend ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowRequestApprovalClanHK_OnSuspend
	 bool                      BTWindowRequestApprovalClanHK_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowRequestApprovalClanHK_OnCancel
	 bool                      BTWindowRequestApprovalClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowRequestApprovalClanHK_OnOK
	 bool                      rfReqRecvJoinClan ( int UserIdx, struct FString CharName, struct FString Message );		//  GUIWarfare.BTPageRoomLobby.rfReqRecvJoinClan
	 bool                      rfAckNotifyClanSecession ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageRoomLobby.rfAckNotifyClanSecession
	 bool                      rfAckNotifyNewClanMember ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageRoomLobby.rfAckNotifyNewClanMember
	 bool                      rfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel );		//  GUIWarfare.BTPageRoomLobby.rfAckSearchClan
	 bool                      rfAckRecvClanInviteResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckRecvClanInviteResult
	 bool                      IsGameReadyOrPlaying (  );                        		//  GUIWarfare.BTPageRoomLobby.IsGameReadyOrPlaying
	 bool                      rfAckInviteClanResult ( struct FString CharName, unsigned char Permit, struct FString ClanNm );		//  GUIWarfare.BTPageRoomLobby.rfAckInviteClanResult
	 bool                      BTWindowDefineSelectHK_23_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowDefineSelectHK_23_OnOK
	 bool                      rfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		//  GUIWarfare.BTPageRoomLobby.rfReqRecvClanInvite
	 bool                      rfAckJoinClan ( int Result, struct FString ErrMsg, struct FString SpecificCharName, struct FString RealRecvCharName, unsigned char RealRecvCharClanGrade );		//  GUIWarfare.BTPageRoomLobby.rfAckJoinClan
	 bool                      rfAckInviteClan ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckInviteClan
	 void                      UpdateRecv_ClanInfo ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTPageRoomLobby.UpdateRecv_ClanInfo
	 bool                      BTWindowUserPersonalInfo_OnClanInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowUserPersonalInfo_OnClanInfo
	 bool                      BTWindowUserDetailInfoHK_OnClanInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowUserDetailInfoHK_OnClanInfo
	 bool                      rfReqClanCharPersonelIntro ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageRoomLobby.rfReqClanCharPersonelIntro
	 bool                      rfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro );		//  GUIWarfare.BTPageRoomLobby.rfAckClanCharPersonelIntro
	 bool                      rfAckCharDetailInfo ( int MaxSerial, int MaxScore, int MaxKill, int MaxAssist, int Serial3, int Serial5, int Serial7, int Serial10, int Serial15, int AR, int SMG, int SR, int SW, int Melee, int Grenade, int FlashBang, int Foot, int AT4, int MG, int Fire, int RPG7, int TimeBomb, int IcendiaryBomb, int ClusterBomb, int ByChopper, int Artillery, int KillChopper, int FirstKill, int LastKill, int AllKill, int Dominate, int InstallBomb, int DefuseBomb );		//  GUIWarfare.BTPageRoomLobby.rfAckCharDetailInfo
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTPageRoomLobby.rfAckDBCharInfo
	 bool                      MoveToClanPage_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.MoveToClanPage_OnOK
	 bool                      rfAckCreateClan ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTPageRoomLobby.rfAckCreateClan
	 bool                      rfAckDupCheckClanName ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckDupCheckClanName
	 bool                      rfAckGetIsHostBlocking ( int Result, unsigned char Blocking );		//  GUIWarfare.BTPageRoomLobby.rfAckGetIsHostBlocking
	 bool                      rfAckNotifyHostBlocking ( int Result, unsigned char Blocking );		//  GUIWarfare.BTPageRoomLobby.rfAckNotifyHostBlocking
	 bool                      rfAckGetHolePunchingResult ( int Result, unsigned char Phrase, int InterventionUserID, unsigned char Intervention, class TArray< int > FailedUserIDs );		//  GUIWarfare.BTPageRoomLobby.rfAckGetHolePunchingResult
	 bool                      rfAckGetUserHostPriorityPoint ( int Result, int UserID, int HostPriorityPoint );		//  GUIWarfare.BTPageRoomLobby.rfAckGetUserHostPriorityPoint
	 bool                      BTWindowChangeHost_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowChangeHost_OnCancel
	 bool                      BTWindowChangeHost_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowChangeHost_OnOK
	 bool                      rfReqRecvForceDisconnectUDPFromHost ( int Result );		//  GUIWarfare.BTPageRoomLobby.rfReqRecvForceDisconnectUDPFromHost
	 bool                      rfAckForceDisconnectUDPFromHost ( int Result );   		//  GUIWarfare.BTPageRoomLobby.rfAckForceDisconnectUDPFromHost
	 bool                      rfReqNotifyChangeRoomState ( unsigned char RoomState );		//  GUIWarfare.BTPageRoomLobby.rfReqNotifyChangeRoomState
	 bool                      rfAckBanUser ( int GameNum, int UID, int BanUID, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckBanUser
	 void                      TPTeamList_OnPopupCheck ( class UBTACLTeamMemberListHK* acl, class UBTCMTeamMemberListHK* cm );		//  GUIWarfare.BTPageRoomLobby.TPTeamList_OnPopupCheck
	 void                      TPTeamList_OnPopup ( int ContextMenuIndex, class UBTACLTeamMemberListHK* acl );		//  GUIWarfare.BTPageRoomLobby.TPTeamList_OnPopup
	 void                      OnPopupBan ( int ContextMenuIndex, class UBTACLMessengerBanHK* acl );		//  GUIWarfare.BTPageRoomLobby.OnPopupBan
	 void                      OnPopupBanCheck ( class UBTACLMessengerBanHK* acl, class UBTCMMessengerBanHK* cm );		//  GUIWarfare.BTPageRoomLobby.OnPopupBanCheck
	 void                      OnPopupPCBang ( int ContextMenuIndex, class UBTACLMessengerPCBangHK* acl );		//  GUIWarfare.BTPageRoomLobby.OnPopupPCBang
	 void                      OnPopupPCBangCheck ( class UBTACLMessengerPCBangHK* acl, class UBTCMMessengerPCBangHK* cm );		//  GUIWarfare.BTPageRoomLobby.OnPopupPCBangCheck
	 void                      OnPopupClan ( int ContextMenuIndex, class UBTACLMessengerClanHK* acl );		//  GUIWarfare.BTPageRoomLobby.OnPopupClan
	 void                      OnPopupClanCheck ( class UBTACLMessengerClanHK* acl, class UBTCMMessengerClanHK* cm );		//  GUIWarfare.BTPageRoomLobby.OnPopupClanCheck
	 void                      OnPopupFriend ( int ContextMenuIndex, class UBTACLMessengerFriendHK* acl );		//  GUIWarfare.BTPageRoomLobby.OnPopupFriend
	 void                      OnPopupFriendCheck ( class UBTACLMessengerFriendHK* acl, class UBTCMMessengerFriendHK* cm );		//  GUIWarfare.BTPageRoomLobby.OnPopupFriendCheck
	 void                      OnPopupChannel ( int ContextMenuIndex, class UBTACLMessengerChannelHK* acl );		//  GUIWarfare.BTPageRoomLobby.OnPopupChannel
	 void                      OnPopupChannelCheck ( class UBTACLMessengerChannelHK* acl, class UBTCMMessengerChannelHK* cm );		//  GUIWarfare.BTPageRoomLobby.OnPopupChannelCheck
	 bool                      rfReqCompleteFriendInvite ( struct FString CharnameToBeInvited, unsigned char IsPermit );		//  GUIWarfare.BTPageRoomLobby.rfReqCompleteFriendInvite
	 bool                      rfAckConfirmFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckConfirmFriendInvite
	 bool                      rfReqRecvFriendInvite ( int ReqUserID, struct FString ReqCharname, struct FString InviteMsg );		//  GUIWarfare.BTPageRoomLobby.rfReqRecvFriendInvite
	 bool                      WindowRequestFriend_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.WindowRequestFriend_OnCancel
	 bool                      WindowRequestFriend_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.WindowRequestFriend_OnOK
	 bool                      rfAckSendFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckSendFriendInvite
	 bool                      rfAckRoomUserList ( class TArray< int > UID, class TArray< struct FString > UserName, class TArray< int > Grade, class TArray< int > TeamNum, class TArray< unsigned char > Statue, class TArray< unsigned char > IsHost, class TArray< struct FString > UserIP, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< unsigned char > IsLookingFor, class TArray< int > GMUID, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageRoomLobby.rfAckRoomUserList
	 void                      RefreshUserList (  );                             		//  GUIWarfare.BTPageRoomLobby.RefreshUserList
	 void                      RemoveInUserList ( int UID );                     		//  GUIWarfare.BTPageRoomLobby.RemoveInUserList
	 bool                      Exit_OnOK ( class UGUIComponent* Sender );        		//  GUIWarfare.BTPageRoomLobby.Exit_OnOK
	 bool                      rfAckProcessPreLoginUser ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckProcessPreLoginUser
	 bool                      rfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		//  GUIWarfare.BTPageRoomLobby.rfAckLoginInHouseTest
	 void                      TcpLogin_OnConnect ( int ErrCode );               		//  GUIWarfare.BTPageRoomLobby.TcpLogin_OnConnect
	 void                      RoomLobbyToServerSelection (  );                  		//  GUIWarfare.BTPageRoomLobby.RoomLobbyToServerSelection
	 bool                      RoomLobbyToServerSelection_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.RoomLobbyToServerSelection_OnOK
	 bool                      rfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageRoomLobby.rfAckEnterChannel
	 bool                      rfAckChangeRoomSetting ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		//  GUIWarfare.BTPageRoomLobby.rfAckChangeRoomSetting
	 bool                      rfAckChangeUserState ( int Result, struct FString ErrMsg, class TArray< int > UserIDs, class TArray< unsigned char > Positions, class TArray< int > Numbers, class TArray< unsigned char > OldStates, class TArray< unsigned char > NewStates );		//  GUIWarfare.BTPageRoomLobby.rfAckChangeUserState
	 bool                      rfAckNotifyLoadingState ( int Result, int UserID, unsigned char LoadingState );		//  GUIWarfare.BTPageRoomLobby.rfAckNotifyLoadingState
	 bool                      rfAckFailedStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, int FailedUserID, int LoadingStep );		//  GUIWarfare.BTPageRoomLobby.rfAckFailedStartGame
	 bool                      rfAckSuccessStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, struct FString HostIP, int HostPort, int LoadingStep );		//  GUIWarfare.BTPageRoomLobby.rfAckSuccessStartGame
	 bool                      rfReqRelayServerOff (  );                         		//  GUIWarfare.BTPageRoomLobby.rfReqRelayServerOff
	 bool                      rfAckUpdateWeaponDurability ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > Durability, class TArray< unsigned char > IsDestroy, class TArray< struct FBtrDouble > FailedWeaponUniqueID );		//  GUIWarfare.BTPageRoomLobby.rfAckUpdateWeaponDurability
	 bool                      rfAckEntryQSlotUniqueIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< struct FBtrDouble > TW2UniqueID );		//  GUIWarfare.BTPageRoomLobby.rfAckEntryQSlotUniqueIDList
	 bool                      rfAckEntryQSlotIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< int > TWItemID1, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID );		//  GUIWarfare.BTPageRoomLobby.rfAckEntryQSlotIDList
	 bool                      rfAckChangeNewGuest ( struct FString HostIP );    		//  GUIWarfare.BTPageRoomLobby.rfAckChangeNewGuest
	 bool                      rfAckChangeHost ( unsigned char ClientNum );      		//  GUIWarfare.BTPageRoomLobby.rfAckChangeHost
	 bool                      rfAckGetBootyChoose ( int Result, struct FString ErrMsg, unsigned char GiveType, struct FBtrDouble ItemUniqueNumber, int ItemID, int PartID, unsigned char ItemType, struct FBtrDouble UntilTime, int StackCount, int PaintID );		//  GUIWarfare.BTPageRoomLobby.rfAckGetBootyChoose
	 bool                      rfAckEntrySkillList ( class TArray< int > UserIDs, class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckEntrySkillList
	 bool                      rfAckGetBooty ( int Result, struct FString ErrMsg, class TArray< int > PrizeWinUserID, class TArray< int > BootyItemID, class TArray< int > BootyPartsID );		//  GUIWarfare.BTPageRoomLobby.rfAckGetBooty
	 bool                      rfAckForceGameOver ( int UserID, int GameRoomNumber, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckForceGameOver
	 bool                      rfAckChangeRoomOwner ( int GameNum, int OldOwner, int NewOwner, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckChangeRoomOwner
	 bool                      rfAckEntryItemList ( class TArray< int > UserIDs, class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< struct FBtrDouble > UniqueID, class TArray< int > PaintID, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckEntryItemList
	 bool                      rfAckUpdateScore ( class TArray< int > UserIDs, class TArray< struct FString > NickNames, class TArray< unsigned char > TeamIDs, class TArray< int > Scores, class TArray< int > Kills, class TArray< int > Assists, class TArray< int > Deaths, class TArray< int > EXPs, class TArray< int > EXPBonuses, class TArray< int > Points, class TArray< int > PointBonuses, class TArray< int > TeamScores, class TArray< int > BonusOwnerID, class TArray< int > BonusID );		//  GUIWarfare.BTPageRoomLobby.rfAckUpdateScore
	 bool                      rfAckConnectGame ( int UserID, int Result );      		//  GUIWarfare.BTPageRoomLobby.rfAckConnectGame
	 bool                      rfAckChangeTeam ( int GameNumber, struct FString UserID, int UID, int TeamNum, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckChangeTeam
	 bool                      rfAckLeaveRoom ( int Num, int UID, struct FString UserID, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckLeaveRoom
	 bool                      rfAckEnterRoom ( int GameNum, int OwnerID, int UID, struct FString UserID, int TeamNum, int Grade, struct FString UserIP, struct FString ClanName, int Clan_Mark_Pattern, int Clan_Mark_BG, int Clan_Mark_BL, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageRoomLobby.rfAckEnterRoom
	 bool                      rfAckGameOverEnd ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckGameOverEnd
	 bool                      rfAckGameOver ( int UID, int GameRoomNumber, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckGameOver
	 bool                      rfAckDisconnectGame ( int Result, int DisconnectUserID, struct FString DisconnectUserName );		//  GUIWarfare.BTPageRoomLobby.rfAckDisconnectGame
	 bool                      rfAckRegisterOtherUdpInfo ( int UID, struct FString IP, int Port, unsigned char NatType, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort );		//  GUIWarfare.BTPageRoomLobby.rfAckRegisterOtherUdpInfo
	 bool                      rfAckStartGame ( int GameNumber, int ClientsCount, int StartSeed, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckStartGame
	 bool                      rfAckChangeGameMode ( int GameNum, int UID, struct FString GameMode, unsigned char GameModeNum, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckChangeGameMode
	 bool                      rfAckSelectMap ( int GameNum, int UID, struct FString MapName, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckSelectMap
	 bool                      rfAckGameRoomInfo ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		//  GUIWarfare.BTPageRoomLobby.rfAckGameRoomInfo
	 bool                      rfAckIsGameRoomPlaying ( int GameRoomNum, unsigned char IsPlaying );		//  GUIWarfare.BTPageRoomLobby.rfAckIsGameRoomPlaying
	 bool                      rfAckGameHostInfo ( int GameNumber, struct FString UserID, struct FString IP, int Port, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby.rfAckGameHostInfo
	 void                      TeamChatLog ( struct FString cL );                		//  GUIWarfare.BTPageRoomLobby.TeamChatLog
	 void                      BroadCastItemChatLog ( struct FString cL );       		//  GUIWarfare.BTPageRoomLobby.BroadCastItemChatLog
	 void                      SystemChatLog ( struct FString cL );              		//  GUIWarfare.BTPageRoomLobby.SystemChatLog
	 void                      SelfChatLog ( struct FString cL );                		//  GUIWarfare.BTPageRoomLobby.SelfChatLog
	 void                      WhisperChatLog ( struct FString cL );             		//  GUIWarfare.BTPageRoomLobby.WhisperChatLog
	 void                      ClanChatLog ( struct FString cL );                		//  GUIWarfare.BTPageRoomLobby.ClanChatLog
	 void                      NormalChatLog ( struct FString cL );              		//  GUIWarfare.BTPageRoomLobby.NormalChatLog
	 void                      ClearChatLog (  );                                		//  GUIWarfare.BTPageRoomLobby.ClearChatLog
	 void                      SetMatchBGM (  );                                 		//  GUIWarfare.BTPageRoomLobby.SetMatchBGM
	 void                      GameOver (  );                                    		//  GUIWarfare.BTPageRoomLobby.GameOver
	 void                      StartGame ( struct FString IP, int Port );        		//  GUIWarfare.BTPageRoomLobby.StartGame
	 bool                      IsUserAllReady (  );                              		//  GUIWarfare.BTPageRoomLobby.IsUserAllReady
	 int                       GetReadyAllUserCount (  );                        		//  GUIWarfare.BTPageRoomLobby.GetReadyAllUserCount
	 int                       GetUserCount (  );                                		//  GUIWarfare.BTPageRoomLobby.GetUserCount
	 bool                      IsUserCountFull (  );                             		//  GUIWarfare.BTPageRoomLobby.IsUserCountFull
	 void                      UpdateRoomInfoByMatchMaker (  );                  		//  GUIWarfare.BTPageRoomLobby.UpdateRoomInfoByMatchMaker
	 struct FString            FindFriendlyGameModeByIndex ( int GameModeIndex );		//  GUIWarfare.BTPageRoomLobby.FindFriendlyGameModeByIndex
	 struct FString            FindFriendlyGameMode ( struct FString GameMode ); 		//  GUIWarfare.BTPageRoomLobby.FindFriendlyGameMode
	 void                      InitialRoomInfo (  );                             		//  GUIWarfare.BTPageRoomLobby.InitialRoomInfo
	 class UBTConsole*         GetConsole (  );                                  		//  GUIWarfare.BTPageRoomLobby.GetConsole
	 class UBTTcpLink_Login*   GetTcpLogin (  );                                 		//  GUIWarfare.BTPageRoomLobby.GetTcpLogin
	 class UBTTcpLink_Channel* GetTcpChannel (  );                               		//  GUIWarfare.BTPageRoomLobby.GetTcpChannel
	 bool                      internalKeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  GUIWarfare.BTPageRoomLobby.internalKeyEvent
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageRoomLobby.InternalOnClose
	 void                      SetCharacterInfo ( struct FString ClanName, struct FCharInfo btCharInfo );		//  GUIWarfare.BTPageRoomLobby.SetCharacterInfo
	 void                      QuestLog ( struct FString Msg );                  		//  GUIWarfare.BTPageRoomLobby.QuestLog
	 void                      RefreshPage (  );                                 		//  GUIWarfare.BTPageRoomLobby.RefreshPage
	 void                      UnInitializeDelegate (  );                        		//  GUIWarfare.BTPageRoomLobby.UnInitializeDelegate
	 void                      InitializeDelegate (  );                          		//  GUIWarfare.BTPageRoomLobby.InitializeDelegate
	 void                      UpdateDurabilityWarningItemList ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTPageRoomLobby.UpdateDurabilityWarningItemList
	 void                      UpdateExpiredItemList ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTPageRoomLobby.UpdateExpiredItemList
	 void                      UpdateWebzenItemList ( class UwGameManager* GameMgr );		//  GUIWarfare.BTPageRoomLobby.UpdateWebzenItemList
	 void                      UpdateItemList ( class UwGameManager* GameMgr );  		//  GUIWarfare.BTPageRoomLobby.UpdateItemList
	 void                      UpdateBlockList ( class UwMatchMaker* MM );       		//  GUIWarfare.BTPageRoomLobby.UpdateBlockList
	 void                      SetFriendlyUser ( class UBTAutoColumnListDataHK* ACLData, int UserListIdx );		//  GUIWarfare.BTPageRoomLobby.SetFriendlyUser
	 void                      UpdateFriendlyUser ( int UserListIdx );           		//  GUIWarfare.BTPageRoomLobby.UpdateFriendlyUser
	 void                      UpdatePCBangList ( class UwMatchMaker* MM );      		//  GUIWarfare.BTPageRoomLobby.UpdatePCBangList
	 void                      UpdateClanList ( class UwMatchMaker* MM );        		//  GUIWarfare.BTPageRoomLobby.UpdateClanList
	 void                      UpdateFriendList ( class UwMatchMaker* MM );      		//  GUIWarfare.BTPageRoomLobby.UpdateFriendList
	 void                      UpdateGameRoomInfo ( class UwMatchMaker* MM );    		//  GUIWarfare.BTPageRoomLobby.UpdateGameRoomInfo
	 void                      UpdateRecv_CharInfo ( class UwMatchMaker* MM );   		//  GUIWarfare.BTPageRoomLobby.UpdateRecv_CharInfo
	 void                      UpdateQuestList ( class UwMatchMaker* MM );       		//  GUIWarfare.BTPageRoomLobby.UpdateQuestList
	 void                      UpdatePositionInfo ( class UwMatchMaker* MM );    		//  GUIWarfare.BTPageRoomLobby.UpdatePositionInfo
	 void                      UpdatePCBangInfo ( class UwMatchMaker* MM );      		//  GUIWarfare.BTPageRoomLobby.UpdatePCBangInfo
	 void                      UpdateEquipItemInfo ( class UwMatchMaker* MM );   		//  GUIWarfare.BTPageRoomLobby.UpdateEquipItemInfo
	 void                      UpdateRankingInfo ( class UwMatchMaker* MM );     		//  GUIWarfare.BTPageRoomLobby.UpdateRankingInfo
	 void                      UpdateMoneyInfo ( class UwMatchMaker* MM );       		//  GUIWarfare.BTPageRoomLobby.UpdateMoneyInfo
	 void                      UpdateClanInfo ( class UwMatchMaker* MM );        		//  GUIWarfare.BTPageRoomLobby.UpdateClanInfo
	 void                      UpdateCharInfo ( class UwMatchMaker* MM );        		//  GUIWarfare.BTPageRoomLobby.UpdateCharInfo
	 void                      OnCompleteOpened (  );                            		//  GUIWarfare.BTPageRoomLobby.OnCompleteOpened
	 void                      OnBackToLastPage (  );                            		//  GUIWarfare.BTPageRoomLobby.OnBackToLastPage
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageRoomLobby.InternalOnOpen
	 void                      InternalOnReOpen (  );                            		//  GUIWarfare.BTPageRoomLobby.InternalOnReOpen
	 void                      CloseNetworkCheckingWindow ( bool bNotInitial );  		//  GUIWarfare.BTPageRoomLobby.CloseNetworkCheckingWindow
	 void                      OpenNetworkCheckingWindow (  );                   		//  GUIWarfare.BTPageRoomLobby.OpenNetworkCheckingWindow
	 void                      FailedNetworkChecking ( struct FString ErrMsg, int Code );		//  GUIWarfare.BTPageRoomLobby.FailedNetworkChecking
	 void                      StartNetworkChecking ( int ClientsCount, bool bConnectGame );		//  GUIWarfare.BTPageRoomLobby.StartNetworkChecking
	 bool                      ButtonStart_OnKeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  GUIWarfare.BTPageRoomLobby.ButtonStart_OnKeyEvent
	 void                      MessageHostUnsuitableness (  );                   		//  GUIWarfare.BTPageRoomLobby.MessageHostUnsuitableness
	 void                      SendPingAndSendHostPoint (  );                    		//  GUIWarfare.BTPageRoomLobby.SendPingAndSendHostPoint
	 bool                      InternalOnPreDraw ( class UCanvas* C );           		//  GUIWarfare.BTPageRoomLobby.InternalOnPreDraw
	 bool                      TPMessenger_ButtonMsg_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.TPMessenger_ButtonMsg_OnClick
	 void                      TPMessenger_ACLMsg0_OnHitBottom ( int Top, int Count, int itemperpage );		//  GUIWarfare.BTPageRoomLobby.TPMessenger_ACLMsg0_OnHitBottom
	 bool                      MyInfo_OnClick ( class UGUIComponent* Sender );   		//  GUIWarfare.BTPageRoomLobby.MyInfo_OnClick
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageRoomLobby.InitComponent
	 void                      InitializeTeamList (  );                          		//  GUIWarfare.BTPageRoomLobby.InitializeTeamList
	 bool                      BTWindowCreateClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowCreateClanHK_OnOK
	 bool                      BTWindowCreateClanNeedPointHK_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowCreateClanNeedPointHK_OnClick
	 bool                      ClanMenu_ButtonCreateClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.ClanMenu_ButtonCreateClan_OnClick
	 bool                      BTWindowFindClanHK_OnInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowFindClanHK_OnInfo
	 bool                      BTWindowFindClanHK_OnRequestJoin ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowFindClanHK_OnRequestJoin
	 bool                      ClanMenu_ButtonFindClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.ClanMenu_ButtonFindClan_OnClick
	 bool                      ClanMenu_ButtonLookingForClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.ClanMenu_ButtonLookingForClan_OnClick
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.HeaderButton_OnClick
	 void                      ChangeButtonStart (  );                           		//  GUIWarfare.BTPageRoomLobby.ChangeButtonStart
	 bool                      ChangeButtonTeam ( int Team );                    		//  GUIWarfare.BTPageRoomLobby.ChangeButtonTeam
	 void                      UpdateRoomOwner ( int UID );                      		//  GUIWarfare.BTPageRoomLobby.UpdateRoomOwner
	 bool                      CheckInviteUser ( int CurPos, int CurState, struct FString szNickName, struct FString szClanName );		//  GUIWarfare.BTPageRoomLobby.CheckInviteUser
	 bool                      CanInviteUser (  );                               		//  GUIWarfare.BTPageRoomLobby.CanInviteUser
	 bool                      ButtonTeam_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.ButtonTeam_OnClick
	 bool                      ButtonReady_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.ButtonReady_OnClick
	 bool                      ButtonStart_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.ButtonStart_OnClick
	 bool                      ButtonStart_OnClick_Before_CheckDurability ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.ButtonStart_OnClick_Before_CheckDurability
	 bool                      CurrentButtonClickBehavior ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.CurrentButtonClickBehavior
	 bool                      CheckPrimaryWeaponDurability (  );                		//  GUIWarfare.BTPageRoomLobby.CheckPrimaryWeaponDurability
	 bool                      GotoStartGame_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.GotoStartGame_OnOK
	 bool                      GotoInventory_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.GotoInventory_OnOK
	 bool                      ButtonRoomInfo_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.ButtonRoomInfo_OnClick
	 bool                      BTWindowJoinClan_OK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowJoinClan_OK
	 bool                      BTWindowInviteClan_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowInviteClan_OnOK
	 bool                      WindowInviteFriend_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.WindowInviteFriend_OnOK
	 bool                      BTWindowRoomInfoHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageRoomLobby.BTWindowRoomInfoHK_OnOK
}; // Size: 0x02C8

// Class GUIWarfare.BTTcpHandler
class DLL_IMPORT UBTTcpHandler : public UBTTcpLink_Channel
{
public:
	class UBTNetMainMenu*                              MainMenu;                                         		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	int                                                i;                                                		// 0x0030 ( 0x0004 ) 
	class UBTTcpHandlerMed*                            RealOne;                                          		// 0x0034 ( 0x0004 ) 
	struct FString                                     DisconnectedFromServerMsg;                        		// 0x0038 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DisconnectedFromServerQuit;                       		// 0x0044 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UwMatchMaker*                                MM;                                               		// 0x0050 ( 0x0004 ) 
	class UwGameManager*                               GameMgr;                                          		// 0x0054 ( 0x0004 ) 
	unsigned long                                      bTutorial:1;                                      		// 0x0058 ( 0x0004 )  [0x00000001]
	unsigned long                                      bTutorialEnteringRoom:1;                          		// 0x0058 ( 0x0004 )  [0x00000002]
	struct FGameRoomInfo                               TutorialRoomInfo;                                 		// 0x005C ( 0x0064 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      rfReqAhnNotifyDisconnct ( int Code );             		//  GUIWarfare.BTTcpHandler.rfReqAhnNotifyDisconnct
	 bool                      rfReqAhnHsObject ( class TArray< unsigned char > Data, int DataSize );		//  GUIWarfare.BTTcpHandler.rfReqAhnHsObject
	 bool                      rfNotifyCouponUseError ( int Time );              		//  GUIWarfare.BTTcpHandler.rfNotifyCouponUseError
	 bool                      rfReqNotifyShopItemDataEnd ( int Ver );           		//  GUIWarfare.BTTcpHandler.rfReqNotifyShopItemDataEnd
	 bool                      rfAckCouponUse ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckCouponUse
	 bool                      rfReqNotifyShopItemData ( class TArray< int > ProductNo, class TArray< struct FString > ProductRowGuid, class TArray< struct FString > ServiceCode, class TArray< struct FString > ProductName, class TArray< struct FString > ProductCode, class TArray< struct FString > ProductType, class TArray< unsigned char > SaleType, class TArray< struct FString > ItemSaleType, class TArray< unsigned char > ISIncludeBonus, class TArray< int > ProductCost, class TArray< int > ProductHour, class TArray< int > ProductQuantity, class TArray< int > TotalQuantity, class TArray< int > ReOrderTerms, class TArray< int > ReorderCount, class TArray< int > PurchaseAvailableQuantity, class TArray< int > AvailableMinLevel, class TArray< int > AvailableMaxLevel, class TArray< unsigned char > AvailableGender, class TArray< int > InventoryKeepDays, class TArray< int > SaleMasterFlag, class TArray< int > SaleStatus, class TArray< struct FString > Description, class TArray< struct FString > Property0, class TArray< struct FString > Property1, class TArray< struct FString > Property2, class TArray< struct FString > Property3, class TArray< struct FString > Property4, class TArray< int > IsGift );		//  GUIWarfare.BTTcpHandler.rfReqNotifyShopItemData
	 bool                      rfAckShopItemData (  );                           		//  GUIWarfare.BTTcpHandler.rfAckShopItemData
	 bool                      rfNotifyClanLevelup ( struct FString ClanName, int Levelup );		//  GUIWarfare.BTTcpHandler.rfNotifyClanLevelup
	 bool                      rfNotifyNewClanName ( struct FString New_NickName );		//  GUIWarfare.BTTcpHandler.rfNotifyNewClanName
	 bool                      rfNotifyNewNickName ( int Community_Type, struct FString Old_NickName, struct FString New_NickName );		//  GUIWarfare.BTTcpHandler.rfNotifyNewNickName
	 bool                      rfAckTencent_StartTenProtect ( int CharDBID );    		//  GUIWarfare.BTTcpHandler.rfAckTencent_StartTenProtect
	 bool                      rfAckMoveToLobby ( unsigned char MessageType );   		//  GUIWarfare.BTTcpHandler.rfAckMoveToLobby
	 bool                      rfAckPopUpMessage ( int MessageType );            		//  GUIWarfare.BTTcpHandler.rfAckPopUpMessage
	 bool                      rfUpdateWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		//  GUIWarfare.BTTcpHandler.rfUpdateWebzenShopScriptVersion
	 bool                      rfAckFriendPosition ( int Result, struct FString TargetCharName, unsigned char ServerType, struct FString fServername, struct FString fServerShortName, struct FString fServerIP, int fServerPort, unsigned char CurPos, unsigned char CurState, int ChannelNum, struct FString ChannelNickName, int GameRoomNum );		//  GUIWarfare.BTTcpHandler.rfAckFriendPosition
	 bool                      rfAckLogOut ( unsigned char Result, unsigned char Reason );		//  GUIWarfare.BTTcpHandler.rfAckLogOut
	 bool                      rfAckNotifyUpdateCharInfo_LevelMark ( struct FString CharName, int LevelMarkID );		//  GUIWarfare.BTTcpHandler.rfAckNotifyUpdateCharInfo_LevelMark
	 bool                      rfAckGetRankingInfoListEnd (  );                  		//  GUIWarfare.BTTcpHandler.rfAckGetRankingInfoListEnd
	 bool                      rfAckGetRankingInfoList ( int Result, unsigned char RankingType, unsigned char CommunityType, class TArray< struct FString > CharName, class TArray< int > CharLevel, class TArray< struct FString > ClanName, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Ranking_Accum, class TArray< int > Ranking_Accum_Prev, class TArray< int > Ranking_Accum_Exp, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTTcpHandler.rfAckGetRankingInfoList
	 bool                      rfAckGetRankingInfoListStart ( int Result, unsigned char RankingType, unsigned char CommunityType, int TotalCount );		//  GUIWarfare.BTTcpHandler.rfAckGetRankingInfoListStart
	 bool                      rfAckCharDetailInfo ( int MaxSerial, int MaxScore, int MaxKill, int MaxAssist, int Serial3, int Serial5, int Serial7, int Serial10, int Serial15, int AR, int SMG, int SR, int SW, int Melee, int Grenade, int FlashBang, int Foot, int AT4, int MG, int Fire, int RPG7, int TimeBomb, int IcendiaryBomb, int ClusterBomb, int ByChopper, int Artillery, int KillChopper, int FirstKill, int LastKill, int AllKill, int Dominate, int InstallBomb, int DefuseBomb );		//  GUIWarfare.BTTcpHandler.rfAckCharDetailInfo
	 bool                      rfReqInGameRoomUserClanLevelChanged ( int UserID, int ClanLevel );		//  GUIWarfare.BTTcpHandler.rfReqInGameRoomUserClanLevelChanged
	 bool                      rfAckClanMatchResultHistory ( class TArray< struct FBtrDouble > MatchDate, class TArray< unsigned char > IsWin, class TArray< struct FString > EnemyClanname );		//  GUIWarfare.BTTcpHandler.rfAckClanMatchResultHistory
	 bool                      rfReqInGameRoomUserInfoChanged (  );              		//  GUIWarfare.BTTcpHandler.rfReqInGameRoomUserInfoChanged
	 bool                      rfAckServerType ( unsigned char Type );           		//  GUIWarfare.BTTcpHandler.rfAckServerType
	 bool                      rfAckClanMatch_ChangeRoomSetting ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, unsigned char IsPublic );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_ChangeRoomSetting
	 bool                      rfAckClanMatch_PublicWaitRoomChanged ( int WaitRoomIdx, struct FString RoomName, int MapNum, int CurUserCount, int MaxUserCount, unsigned char Status, unsigned char IsPublic );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_PublicWaitRoomChanged
	 bool                      rfAckClanMatch_EndPublicWaitRoomList (  );        		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_EndPublicWaitRoomList
	 bool                      rfAckClanMatch_PublicWaitRoomList ( class TArray< int > WaitRoomIdx, class TArray< struct FString > LeaderName, class TArray< struct FString > RoomName, class TArray< int > MapNum, class TArray< int > CurUserCount, class TArray< int > MaxUserCount, class TArray< unsigned char > Status );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_PublicWaitRoomList
	 bool                      rfAckClanMatch_StartPublicWaitRoomList ( int Result, struct FString ErrMsg, int Count );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_StartPublicWaitRoomList
	 bool                      rfAckPaidItem_NotifyChangeClanname ( struct FString NewClanname );		//  GUIWarfare.BTTcpHandler.rfAckPaidItem_NotifyChangeClanname
	 bool                      rfAckPaidItem_ChangeClanname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewClanname );		//  GUIWarfare.BTTcpHandler.rfAckPaidItem_ChangeClanname
	 bool                      rfAckPaidItem_ChangeCharname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewCharname );		//  GUIWarfare.BTTcpHandler.rfAckPaidItem_ChangeCharname
	 bool                      rfAckNotifyEndTutorial ( int UserID, struct FString CharName, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTTcpHandler.rfAckNotifyEndTutorial
	 bool                      rfAckNotifyStartTutorial ( int Result, int UserID );		//  GUIWarfare.BTTcpHandler.rfAckNotifyStartTutorial
	 bool                      rfAckGetMyMailBoxState ( int Result, unsigned char IsFull, int NewMailCount );		//  GUIWarfare.BTTcpHandler.rfAckGetMyMailBoxState
	 bool                      rfAckRoomUserPingInfo ( class TArray< int > UnqueID, class TArray< int > Ping, int HostPriorityPoint );		//  GUIWarfare.BTTcpHandler.rfAckRoomUserPingInfo
	 bool                      rfAckSetLookForClan ( int Result, struct FString ErrMsg, unsigned char IsLookingFor );		//  GUIWarfare.BTTcpHandler.rfAckSetLookForClan
	 bool                      rfAckChangedRoomTitle_FromGM ( int Result, int RoomNumber, struct FString NewRoomTitle );		//  GUIWarfare.BTTcpHandler.rfAckChangedRoomTitle_FromGM
	 bool                      rfAckRecvSystemMsg ( unsigned char CommunityType, struct FSystemMsgParam MsgInfo );		//  GUIWarfare.BTTcpHandler.rfAckRecvSystemMsg
	 bool                      rfAckGMLeaveRoom ( int Result, int RoomNumber, int UserID );		//  GUIWarfare.BTTcpHandler.rfAckGMLeaveRoom
	 bool                      rfAckGMEnterRoom ( int Result, int RoomNumber, int UserID );		//  GUIWarfare.BTTcpHandler.rfAckGMEnterRoom
	 bool                      rfAckForceDisconnectUser_GM ( int Result, struct FString ErrMsg, struct FString CharName );		//  GUIWarfare.BTTcpHandler.rfAckForceDisconnectUser_GM
	 bool                      rfAckNotice_GM ( int Result, struct FString ErrMsg, unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg );		//  GUIWarfare.BTTcpHandler.rfAckNotice_GM
	 bool                      rfAckChangeRoomTitle_GM ( int Result, int RoomNumber, struct FString NewRoomTitle );		//  GUIWarfare.BTTcpHandler.rfAckChangeRoomTitle_GM
	 bool                      rfReqExteriorRoomOwnerInfo ( int RoomNum, struct FString OwnerName, struct FString OwnerIP );		//  GUIWarfare.BTTcpHandler.rfReqExteriorRoomOwnerInfo
	 bool                      rfAckCharBlockInfo ( int Result, struct FBtrDouble ChatBlockStartTime, struct FBtrDouble ChatBlockEndTime, class TArray< struct FBtrDouble > BlockedItemIdx );		//  GUIWarfare.BTTcpHandler.rfAckCharBlockInfo
	 bool                      rfAckQuestGetAvailableEventList ( int Result, struct FString ErrMsg, class TArray< int > QuestID );		//  GUIWarfare.BTTcpHandler.rfAckQuestGetAvailableEventList
	 bool                      rfAckPaidItem_NotifyChangeClanMark ( struct FString ClanName, int Pattern, int BG, int BL );		//  GUIWarfare.BTTcpHandler.rfAckPaidItem_NotifyChangeClanMark
	 bool                      rfAckPaidItem_ChangeClanMark ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTTcpHandler.rfAckPaidItem_ChangeClanMark
	 bool                      rfAckPaidItem_ClanMarkDupCheck ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckPaidItem_ClanMarkDupCheck
	 bool                      rfAckWebzenBillingUseStorageItem ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID, struct FBtrDouble ItemExtra );		//  GUIWarfare.BTTcpHandler.rfAckWebzenBillingUseStorageItem
	 bool                      rfAckPaidItem_RelayBroadcast ( struct FString CharName, struct FString Msg );		//  GUIWarfare.BTTcpHandler.rfAckPaidItem_RelayBroadcast
	 bool                      rfAckPaidItem_BroadCast ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTTcpHandler.rfAckPaidItem_BroadCast
	 bool                      rfAckPaidItem_EraseRecord ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int Command, int RemainCount );		//  GUIWarfare.BTTcpHandler.rfAckPaidItem_EraseRecord
	 bool                      rfAckWebzenBillingStorageListEnd (  );            		//  GUIWarfare.BTTcpHandler.rfAckWebzenBillingStorageListEnd
	 bool                      rfAckWebzenBillingStorageList ( class TArray< int > Seq, class TArray< int > ItemSeq, class TArray< int > GroupCode, class TArray< int > ShareFlag, class TArray< int > ProductSeq, class TArray< struct FString > CashName, class TArray< struct FBtrDouble > CashPoint, class TArray< struct FString > SendAccountID, class TArray< struct FString > SendMessage, class TArray< unsigned char > ItemType, class TArray< unsigned char > RelationType, class TArray< int > ProductType, class TArray< int > PriceSeq );		//  GUIWarfare.BTTcpHandler.rfAckWebzenBillingStorageList
	 bool                      rfAckWebzenBillingStorageListStart ( int Result, struct FString ErrMsg, int TotalCount, int TotalPage, int CurPage );		//  GUIWarfare.BTTcpHandler.rfAckWebzenBillingStorageListStart
	 bool                      rfAckRandomBox_Use ( int Result, struct FString ErrMsg, struct FBtrDouble RandomBoxItemIdx, int RandomBxoItemCount, class TArray< int > ItemIDChoose, class TArray< int > PartIDChoose, class TArray< int > PeriodOnChoosenItem, class TArray< int > StackCountOnChoosenItem, class TArray< unsigned char > bHave, class TArray< struct FBtrDouble > ItemIdx, class TArray< struct FBtrDouble > UntilTime, class TArray< int > StackCount );		//  GUIWarfare.BTTcpHandler.rfAckRandomBox_Use
	 bool                      rfAckRegisterMainPCBang ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckRegisterMainPCBang
	 bool                      rfReqIsPaidWebzenPCBang ( unsigned char IsPaid ); 		//  GUIWarfare.BTTcpHandler.rfReqIsPaidWebzenPCBang
	 bool                      rfAckPCBangUserListEnd (  );                      		//  GUIWarfare.BTTcpHandler.rfAckPCBangUserListEnd
	 bool                      rfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, class TArray< unsigned char > IsCombat, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTTcpHandler.rfAckPCBangUserList
	 bool                      rfAckPCBangUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTTcpHandler.rfAckPCBangUserListStart
	 bool                      rfAckGiftItemByWebzenCash ( int Result, struct FString ErrMsg, int LeftProductCount );		//  GUIWarfare.BTTcpHandler.rfAckGiftItemByWebzenCash
	 bool                      rfAckBuyItemByWebzenCash ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckBuyItemByWebzenCash
	 bool                      rfAckClanMatch_GetClanWaittingRoomInfo ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, struct FString WaitRoomName );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_GetClanWaittingRoomInfo
	 bool                      rfAckGetBotID ( int Result, unsigned char RequestedAFCount, unsigned char RequestedRSACount, class TArray< int > AFBotID, class TArray< int > RSABotID );		//  GUIWarfare.BTTcpHandler.rfAckGetBotID
	 bool                      rfAckRegisteredPCBangInfo ( int Result, struct FString ErrMsg, unsigned char IsRegisteredPCBang, unsigned char IsMainPCBang, struct FString PCBangName );		//  GUIWarfare.BTTcpHandler.rfAckRegisteredPCBangInfo
	 bool                      rfAckWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		//  GUIWarfare.BTTcpHandler.rfAckWebzenShopScriptVersion
	 bool                      rfAckWebzenCash ( int Result, struct FString ErrMsg, struct FBtrDouble PCoinCash, struct FBtrDouble CCoinCash );		//  GUIWarfare.BTTcpHandler.rfAckWebzenCash
	 bool                      rfAckCheckEquipedWeaponDurability ( int Result, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemSlotNum );		//  GUIWarfare.BTTcpHandler.rfAckCheckEquipedWeaponDurability
	 bool                      rfReqClanMatch_InviteCrewResult ( struct FString Invitee, int Result );		//  GUIWarfare.BTTcpHandler.rfReqClanMatch_InviteCrewResult
	 bool                      rfReqClanMatch_RecvInviteCrew ( struct FString Inviter, struct FString ServerIP, int Port, int WaittingID, struct FString Msg, int MapNum, int InviteUserChannelNum, struct FString LeaderName, struct FString RoomName );		//  GUIWarfare.BTTcpHandler.rfReqClanMatch_RecvInviteCrew
	 bool                      rfAckClanMatch_InviteCrew ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_InviteCrew
	 bool                      rfReqDailyQuestNewAvailable ( class TArray< int > ExpiredQuestID, class TArray< int > NewQuestID );		//  GUIWarfare.BTTcpHandler.rfReqDailyQuestNewAvailable
	 bool                      rfReqQuestNewAvailable ( class TArray< int > AchivedQuestID, class TArray< int > NewQuestID, class TArray< unsigned char > IsDailyQuest, class TArray< int > ExpiredQuest );		//  GUIWarfare.BTTcpHandler.rfReqQuestNewAvailable
	 bool                      rfAckQuestUpdate ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckQuestUpdate
	 bool                      rfAckQuestListEnd (  );                           		//  GUIWarfare.BTTcpHandler.rfAckQuestListEnd
	 bool                      rfAckQuestList ( class TArray< int > QuestID, class TArray< int > CountPrograss, class TArray< unsigned char > IsDailyQuest );		//  GUIWarfare.BTTcpHandler.rfAckQuestList
	 bool                      rfAckQuestListStart ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckQuestListStart
	 bool                      rfAckClanMatch_SetWaitRoomPublic ( int Result, struct FString ErrMsg, unsigned char Set );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_SetWaitRoomPublic
	 bool                      rfAckClanMatch_StopSearching (  );                		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_StopSearching
	 bool                      rfReqClanMatch_FoundMatch ( int ChannelID, int RoomNumber );		//  GUIWarfare.BTTcpHandler.rfReqClanMatch_FoundMatch
	 bool                      rfAckClanMatch_FoundMatch (  );                   		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_FoundMatch
	 bool                      rfAckClanMatch_NotifyStartSearching ( int ShouldWaitMore );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_NotifyStartSearching
	 bool                      rfAckClanMatch_StartSearching ( int Result, struct FString ErrMsg, int ShouldWaitMore );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_StartSearching
	 bool                      rfAckClanMatch_ChangeLeader ( int Result, struct FString ErrMsg, int NewLeader, struct FString NewLeaderName );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_ChangeLeader
	 bool                      rfAckClanMatch_WaittingTeamList ( int TtotlCount, class TArray< int > Grade, class TArray< int > Map, class TArray< int > Versus );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_WaittingTeamList
	 bool                      rfAckClanMatch_Chat ( int Result, struct FString ErrMsg, struct FString CharName, struct FString Msg );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_Chat
	 bool                      rfAckClanMatch_Leave ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_Leave
	 bool                      rfAckClanMatch_MemberList ( class TArray< unsigned char > IsLeader, class TArray< int > ClanMarkPA, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< struct FString > ClanName, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_MemberList
	 bool                      rfAckClanMatch_LeaveNotify ( struct FString CharName );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_LeaveNotify
	 bool                      rfAckClanMatch_JoinNotify ( unsigned char IsLeader, int ClanMarkPA, int ClanMarkBG, int ClanMarkBL, int Level, struct FString CharName, int ClanGrade, int ClanWin, int ClanLose, struct FString ClanName, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_JoinNotify
	 bool                      rfAckClanMatch_Join ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_Join
	 bool                      rfAckClanMatch_NotifiyStartCombat ( class TArray< int > MapNumArray, int VersusMode );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_NotifiyStartCombat
	 bool                      rfAckClanMatch_StartCombat ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_StartCombat
	 bool                      rfAckClanMatch_GetReady ( int Result, struct FString ErrMsg, int RoomIndex );		//  GUIWarfare.BTTcpHandler.rfAckClanMatch_GetReady
	 bool                      rfAckLimitedListInChannel ( int Result, class TArray< int > LimitedMapID, class TArray< int > LimitedModeID );		//  GUIWarfare.BTTcpHandler.rfAckLimitedListInChannel
	 bool                      rfAckRecvInviteGameRoomResult ( int Result );     		//  GUIWarfare.BTTcpHandler.rfAckRecvInviteGameRoomResult
	 bool                      rfReqRecvInviteGameRoom ( struct FString InviteUserServerName, int InviteUserServerID, int InviteUserChannelNumber, struct FString RoomUniqueID, int RoomNumber, struct FString RoomName, unsigned char RoomState, struct FString MapName, struct FString OwnerName, unsigned char GameMode, unsigned char WeaponLimit, unsigned char IsTeamBalance, struct FString Password, struct FString InviteCharName );		//  GUIWarfare.BTTcpHandler.rfReqRecvInviteGameRoom
	 bool                      rfAckInviteGameRoom ( int Result, unsigned char Answer, struct FString GuestCharName );		//  GUIWarfare.BTTcpHandler.rfAckInviteGameRoom
	 bool                      rfAckAutoChangedTeamUserList ( class TArray< int > UserID, class TArray< int > TeamNum );		//  GUIWarfare.BTTcpHandler.rfAckAutoChangedTeamUserList
	 bool                      rfAckGetItemFromItemBox ( int Result, struct FString ErrMsg, int ItemIDChoose, int PartIDChoose, struct FBtrDouble BoxItemIdx, int BxoItemCount, unsigned char bHave, struct FBtrDouble ItemIdx, struct FBtrDouble UntilTime, int StackCount );		//  GUIWarfare.BTTcpHandler.rfAckGetItemFromItemBox
	 bool                      rfAckItemListInItemBox ( int Result, struct FString ErrMsg, struct FBtrDouble ItemUniqueID, int BoxItemID, class TArray< int > ItemID, class TArray< int > PartID );		//  GUIWarfare.BTTcpHandler.rfAckItemListInItemBox
	 bool                      rfReqRecvForceFailedClientLoading ( int ErrCode );		//  GUIWarfare.BTTcpHandler.rfReqRecvForceFailedClientLoading
	 bool                      rfAckStartHolePunching ( int Result, struct FString ErrMsg, int GameType, int ReqStartUserID );		//  GUIWarfare.BTTcpHandler.rfAckStartHolePunching
	 bool                      eventrfAckRegisterMyUdpInfo ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] GUIWarfare.BTTcpHandler.rfAckRegisterMyUdpInfo
	 bool                      rfAckNotifyMyCharInfoToRoomUser ( int Result, struct FString ErrMsg, int UID, struct FString UserName, int Grade, int TeamNum, unsigned char Statue, unsigned char IsHost, struct FString UserIP, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, unsigned char IsLookFor );		//  GUIWarfare.BTTcpHandler.rfAckNotifyMyCharInfoToRoomUser
	 bool                      rfReqNotifyDisconnectHostInLoading ( int Result, struct FString ErrMsg, int HostID );		//  GUIWarfare.BTTcpHandler.rfReqNotifyDisconnectHostInLoading
	 bool                      rfReqRecvForceDisconnected_FromGM ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfReqRecvForceDisconnected_FromGM
	 bool                      rfReqRecvNotice_FromGM ( int Result, struct FString ErrMsg, class TArray< struct FString > NoticeMsg, unsigned char IsFromDB );		//  GUIWarfare.BTTcpHandler.rfReqRecvNotice_FromGM
	 bool                      rfAckJoinClan ( int Result, struct FString ErrMsg, struct FString SpecificCharName, struct FString RealRecvCharName, unsigned char RealRecvCharClanGrade );		//  GUIWarfare.BTTcpHandler.rfAckJoinClan
	 bool                      rfAckExceedMaxUser (  );                          		//  GUIWarfare.BTTcpHandler.rfAckExceedMaxUser
	 bool                      rfAckChannelUserListInGameRoom ( int Result, int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > CharName, class TArray< int > UserLevel, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< unsigned char > IsLookForClan, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTTcpHandler.rfAckChannelUserListInGameRoom
	 bool                      rfReqRecvDeleteFriend ( int Result, struct FString FromCharName );		//  GUIWarfare.BTTcpHandler.rfReqRecvDeleteFriend
	 bool                      rfAckDeleteFriend ( int Result, class TArray< struct FString > FailedCharname );		//  GUIWarfare.BTTcpHandler.rfAckDeleteFriend
	 bool                      rfAckChatWispher ( int Result, struct FString ErrMsg, struct FString ToCharName );		//  GUIWarfare.BTTcpHandler.rfAckChatWispher
	 bool                      rfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTTcpHandler.rfAckNotifyAdjustClanMemberGrade
	 bool                      rfReqNotifyDurabilityZeroItem ( int Result, struct FString ErrMsg, int UserID, class TArray< struct FBtrDouble > ItemUniqueIDs, class TArray< int > ItemIDs, class TArray< int > ItemPartIDs, class TArray< unsigned char > ItemSlotPos );		//  GUIWarfare.BTTcpHandler.rfReqNotifyDurabilityZeroItem
	 bool                      rfAckAcquirePromotionItems ( int UID, int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemIDs, class TArray< int > PartIDs );		//  GUIWarfare.BTTcpHandler.rfAckAcquirePromotionItems
	 bool                      rfReqNotifyLevelUp ( int LevelUpUserID, int Level, int Exp, class TArray< int > ItemID, class TArray< int > PartID );		//  GUIWarfare.BTTcpHandler.rfReqNotifyLevelUp
	 bool                      rfAckBlockUserList ( class TArray< struct FString > CharName );		//  GUIWarfare.BTTcpHandler.rfAckBlockUserList
	 bool                      rfAckRemoveBlockUserList ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckRemoveBlockUserList
	 bool                      rfAckBlockUserListEnd (  );                       		//  GUIWarfare.BTTcpHandler.rfAckBlockUserListEnd
	 bool                      rfAckAddBlockUserList ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckAddBlockUserList
	 bool                      rfAckBlockUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTTcpHandler.rfAckBlockUserListStart
	 bool                      rfAckAdjustClanMemberGrade ( int Result, struct FString ErrMsg, struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTTcpHandler.rfAckAdjustClanMemberGrade
	 bool                      rfReqClanCharPersonelIntro ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTTcpHandler.rfReqClanCharPersonelIntro
	 bool                      rfAckRecvJoinClanResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckRecvJoinClanResult
	 bool                      rfAckJoinClanResult ( struct FString ClanName, unsigned char Permit, struct FString PermitCharName );		//  GUIWarfare.BTTcpHandler.rfAckJoinClanResult
	 bool                      rfAckNotifyClanSecession ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTTcpHandler.rfAckNotifyClanSecession
	 bool                      rfAckNotifyNewClanMember ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTTcpHandler.rfAckNotifyNewClanMember
	 bool                      rfReqRecvJoinClan ( int UserIdx, struct FString CharName, struct FString Message );		//  GUIWarfare.BTTcpHandler.rfReqRecvJoinClan
	 bool                      rfAckRecvClanInviteResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckRecvClanInviteResult
	 bool                      rfAckInviteClanResult ( struct FString CharName, unsigned char Permit, struct FString ClanNm );		//  GUIWarfare.BTTcpHandler.rfAckInviteClanResult
	 bool                      rfAckInviteClan ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckInviteClan
	 bool                      rfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		//  GUIWarfare.BTTcpHandler.rfReqRecvClanInvite
	 bool                      rfAckGetIsHostBlocking ( int Result, unsigned char Blocking );		//  GUIWarfare.BTTcpHandler.rfAckGetIsHostBlocking
	 bool                      rfAckNotifyHostBlocking ( int Result, unsigned char Blocking );		//  GUIWarfare.BTTcpHandler.rfAckNotifyHostBlocking
	 bool                      rfAckGetHolePunchingResult ( int Result, unsigned char Phrase, int InterventionUserID, unsigned char Intervention, class TArray< int > FailedUserIDs );		//  GUIWarfare.BTTcpHandler.rfAckGetHolePunchingResult
	 bool                      rfAckGetUserHostPriorityPoint ( int Result, int UserID, int HostPriorityPoint );		//  GUIWarfare.BTTcpHandler.rfAckGetUserHostPriorityPoint
	 bool                      rfReqNotifyRelayServerAddr ( struct FString RelayIP, int RelayPort );		//  GUIWarfare.BTTcpHandler.rfReqNotifyRelayServerAddr
	 bool                      rfReqRecvForceDisconnectUDPFromHost ( int Result );		//  GUIWarfare.BTTcpHandler.rfReqRecvForceDisconnectUDPFromHost
	 bool                      rfAckForceDisconnectUDPFromHost ( int Result );   		//  GUIWarfare.BTTcpHandler.rfAckForceDisconnectUDPFromHost
	 bool                      rfReqNotifyChangeRoomState ( unsigned char RoomState );		//  GUIWarfare.BTTcpHandler.rfReqNotifyChangeRoomState
	 bool                      rfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro );		//  GUIWarfare.BTTcpHandler.rfAckClanCharPersonelIntro
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTTcpHandler.rfAckDBCharInfo
	 bool                      rfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel );		//  GUIWarfare.BTTcpHandler.rfAckSearchClan
	 bool                      rfAckClanPersonelIntro ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckClanPersonelIntro
	 bool                      rfAckClanChangeInfo ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckClanChangeInfo
	 bool                      rfAckClanSecession ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckClanSecession
	 bool                      rfAckClanClose ( int Result, struct FString ErrMsg, struct FString ClanName );		//  GUIWarfare.BTTcpHandler.rfAckClanClose
	 bool                      rfAckClanNews ( class TArray< struct FString > IssueDate, class TArray< unsigned char > IssueType, class TArray< struct FString > IssuedClanMember );		//  GUIWarfare.BTTcpHandler.rfAckClanNews
	 bool                      rfAckClanUserListEnd (  );                        		//  GUIWarfare.BTTcpHandler.rfAckClanUserListEnd
	 bool                      rfAckClanUserList ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< int > ClanWinCnt, class TArray< int > ClanLoseCnt, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > DudeId );		//  GUIWarfare.BTTcpHandler.rfAckClanUserList
	 bool                      rfAckClanUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTTcpHandler.rfAckClanUserListStart
	 bool                      rfAckClanInfo ( struct FClanInfo stClanInfo );    		//  GUIWarfare.BTTcpHandler.rfAckClanInfo
	 bool                      rfAckDupCheckClanName ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckDupCheckClanName
	 bool                      rfAckCreateClan ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTTcpHandler.rfAckCreateClan
	 bool                      rfAckGetServerTime ( struct FBtrDouble ServerTime, struct FString ClientIP );		//  GUIWarfare.BTTcpHandler.rfAckGetServerTime
	 bool                      rfAckMyMoney ( int Result, struct FString ErrMsg, int Point, int Cash );		//  GUIWarfare.BTTcpHandler.rfAckMyMoney
	 bool                      rfAckBanUser ( int GameNum, int UID, int BanUID, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckBanUser
	 bool                      rfAckNotifyExpiredSkillIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredSkillUniqueIDs, class TArray< int > ExpiredSkillIDs, int Result, struct FString ErrMsg, class TArray< unsigned char > ExpiredSkillSlotPositions );		//  GUIWarfare.BTTcpHandler.rfAckNotifyExpiredSkillIDs
	 bool                      rfAckNotifyExpiredItemIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredItemUniqueIDs, class TArray< int > ExpiredItemIDs, class TArray< int > ExpiredItemPartIDs, class TArray< unsigned char > ExpiredItemSlotPos, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckNotifyExpiredItemIDs
	 bool                      rfAckGetAttachedItemFromMemo ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID );		//  GUIWarfare.BTTcpHandler.rfAckGetAttachedItemFromMemo
	 bool                      eventrfAckDeleteMailAll ( int Result, unsigned char MailType, int Count );		// [ FUNC_Event ] GUIWarfare.BTTcpHandler.rfAckDeleteMailAll
	 bool                      eventrfAckDelMemo ( int Result, struct FString ErrMsg, class TArray< int > FailedMemoID );		// [ FUNC_Event ] GUIWarfare.BTTcpHandler.rfAckDelMemo
	 bool                      rfAckSendMemo ( class TArray< struct FString > CnamesToFail, class TArray< int > ResultArray );		//  GUIWarfare.BTTcpHandler.rfAckSendMemo
	 bool                      rfAckAuctionBidding ( int Result, struct FString ErrMsg, int PointRemain );		//  GUIWarfare.BTTcpHandler.rfAckAuctionBidding
	 bool                      rfAckAuctionTradeHistory ( int Result, struct FString ErrMsg, int ItemID, int PartID, class TArray< struct FString > SellerCharNm, class TArray< int > DamageDegree, class TArray< int > Price );		//  GUIWarfare.BTTcpHandler.rfAckAuctionTradeHistory
	 bool                      rfAckSendGift ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain );		//  GUIWarfare.BTTcpHandler.rfAckSendGift
	 bool                      rfAckRecvMemo ( struct FString cnameFrom, unsigned char MemoType );		//  GUIWarfare.BTTcpHandler.rfAckRecvMemo
	 bool                      rfAckReadMemo ( struct FString cnameFrom, struct FString Text, struct FString dateRecv, struct FBtrDouble ItemUID );		//  GUIWarfare.BTTcpHandler.rfAckReadMemo
	 bool                      rfAckEndMemoList (  );                            		//  GUIWarfare.BTTcpHandler.rfAckEndMemoList
	 bool                      rfAckTestDouble ( struct FBtrDouble vDouble, class TArray< struct FBtrDouble > vDoubles );		//  GUIWarfare.BTTcpHandler.rfAckTestDouble
	 bool                      rfAckMemoList ( class TArray< int > MemoIdx, class TArray< struct FString > cnameFrom, class TArray< struct FString > dateRecv, class TArray< struct FString > Text, class TArray< unsigned char > Status, class TArray< int > UntilExpire, class TArray< struct FBtrDouble > ItemUID, class TArray< int > ItemID, class TArray< unsigned char > MsgType, class TArray< int > ItemPartID );		//  GUIWarfare.BTTcpHandler.rfAckMemoList
	 bool                      rfAckStartMemoList ( int Result, struct FString ErrMsg, unsigned char Type, int TotalCount );		//  GUIWarfare.BTTcpHandler.rfAckStartMemoList
	 bool                      rfAckFriendListEnd (  );                          		//  GUIWarfare.BTTcpHandler.rfAckFriendListEnd
	 bool                      rfAckFriendList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > LevelMarkID, class TArray< int > ClanLevel, class TArray< int > Level, class TArray< unsigned char > IsLookForClan );		//  GUIWarfare.BTTcpHandler.rfAckFriendList
	 bool                      rfAckFriendListStart ( int Result, int TotalCount );		//  GUIWarfare.BTTcpHandler.rfAckFriendListStart
	 bool                      rfReqCompleteFriendInvite ( struct FString CharnameToBeInvited, unsigned char IsPermit );		//  GUIWarfare.BTTcpHandler.rfReqCompleteFriendInvite
	 bool                      rfAckConfirmFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckConfirmFriendInvite
	 bool                      rfReqRecvFriendInvite ( int ReqUserID, struct FString ReqCharname, struct FString InviteMsg );		//  GUIWarfare.BTTcpHandler.rfReqRecvFriendInvite
	 bool                      rfAckSendFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckSendFriendInvite
	 bool                      rfAckNotifyLoadingState ( int Result, int UserID, unsigned char LoadingState );		//  GUIWarfare.BTTcpHandler.rfAckNotifyLoadingState
	 bool                      rfAckFailedStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, int FailedUserID, int LoadingStep );		//  GUIWarfare.BTTcpHandler.rfAckFailedStartGame
	 bool                      rfAckSuccessStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, struct FString HostIP, int HostPort, int LoadingStep );		//  GUIWarfare.BTTcpHandler.rfAckSuccessStartGame
	 bool                      rfAckHash ( int Result, struct FString Error );   		//  GUIWarfare.BTTcpHandler.rfAckHash
	 bool                      rfReqForceLogoutByOwner (  );                     		//  GUIWarfare.BTTcpHandler.rfReqForceLogoutByOwner
	 bool                      ForceLogout_OnOK ( class UGUIComponent* Sender ); 		//  GUIWarfare.BTTcpHandler.ForceLogout_OnOK
	 bool                      rfAckSellShopItemInfo ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueItemID, int SellPoint, int CurPoint, int AfterPoint );		//  GUIWarfare.BTTcpHandler.rfAckSellShopItemInfo
	 bool                      rfReqRecvChatWispher ( struct FString CharnameFrom, struct FString Message );		//  GUIWarfare.BTTcpHandler.rfReqRecvChatWispher
	 bool                      rfAckServerTime ( int Time );                     		//  GUIWarfare.BTTcpHandler.rfAckServerTime
	 bool                      rfAckGameOverEnd ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckGameOverEnd
	 bool                      rfAckRepairItem ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, int RepairCost, class TArray< int > DamageDegree );		//  GUIWarfare.BTTcpHandler.rfAckRepairItem
	 bool                      rfAckRepairCost ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > RepairCost );		//  GUIWarfare.BTTcpHandler.rfAckRepairCost
	 bool                      eventrfAckUpdateWeaponDurability ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > Durability, class TArray< unsigned char > IsDestroy, class TArray< struct FBtrDouble > FailedWeaponUniqueID );		// [ FUNC_Event ] GUIWarfare.BTTcpHandler.rfAckUpdateWeaponDurability
	 bool                      rfAckEntryQSlotUniqueIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< struct FBtrDouble > TW2UniqueID );		//  GUIWarfare.BTTcpHandler.rfAckEntryQSlotUniqueIDList
	 bool                      rfAckEntryQSlotIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< int > TWItemID1, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID );		//  GUIWarfare.BTTcpHandler.rfAckEntryQSlotIDList
	 bool                      rfAckUpdateQSlot ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckUpdateQSlot
	 bool                      rfAckQSlotList ( int Result, struct FString ErrMsg, class TArray< int > QSlotID, class TArray< struct FString > QSlotName, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWItemID, class TArray< struct FBtrDouble > PistolItemID, class TArray< struct FBtrDouble > TWItemID1, class TArray< struct FBtrDouble > TWItemID2, class TArray< int > Skill1, class TArray< int > Skill2, class TArray< int > Skill3, class TArray< int > Skill4 );		//  GUIWarfare.BTTcpHandler.rfAckQSlotList
	 bool                      rfAckModifyWeapon ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueID, int AddPartID, int PaintID, int Point, int Cash );		//  GUIWarfare.BTTcpHandler.rfAckModifyWeapon
	 bool                      rfAckSellShopItem ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain, int Count );		//  GUIWarfare.BTTcpHandler.rfAckSellShopItem
	 bool                      rfAckBuyShopItem ( int ItemCount, class TArray< int > Result, class TArray< int > BoughtItemTypeID, class TArray< struct FBtrDouble > BoughtItemUniqueID, class TArray< int > BoughtPartID, class TArray< struct FBtrDouble > BoughtUntilTIme, class TArray< int > BoughtStackCnt, int PointRemain, int CashRemain );		//  GUIWarfare.BTTcpHandler.rfAckBuyShopItem
	 bool                      rfAckShopItemListEnd (  );                        		//  GUIWarfare.BTTcpHandler.rfAckShopItemListEnd
	 bool                      rfAckShopItemList ( class TArray< int > ItemID ); 		//  GUIWarfare.BTTcpHandler.rfAckShopItemList
	 bool                      rfAckShopItemListStart ( int Count );             		//  GUIWarfare.BTTcpHandler.rfAckShopItemListStart
	 bool                      rfReqConfirmSkillChanged (  );                    		//  GUIWarfare.BTTcpHandler.rfReqConfirmSkillChanged
	 bool                      rfAckEquipSkill ( int ChangedNewSkillID, int ChangedNewSkillUniqueID, unsigned char ChangedNewSlotPosition, int ChangedOldSkillID, int ChangedOldSkillUniqueID, unsigned char ChangedOldSlotPosition, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckEquipSkill
	 bool                      rfAckEntrySkillList ( class TArray< int > UserIDs, class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckEntrySkillList
	 bool                      rfAckUserSkillListEnd (  );                       		//  GUIWarfare.BTTcpHandler.rfAckUserSkillListEnd
	 bool                      rfAckUserSkillList ( class TArray< int > UniqueSkillID, class TArray< int > SkillID, class TArray< struct FBtrDouble > UntilTime, class TArray< unsigned char > SlotPosition );		//  GUIWarfare.BTTcpHandler.rfAckUserSkillList
	 bool                      rfAckUserSkillListStart ( int Count, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckUserSkillListStart
	 bool                      rfAckGetBootyChoose ( int Result, struct FString ErrMsg, unsigned char GiveType, struct FBtrDouble ItemUniqueNumber, int ItemID, int PartID, unsigned char ItemType, struct FBtrDouble UntilTime, int StackCount, int PaintID );		//  GUIWarfare.BTTcpHandler.rfAckGetBootyChoose
	 bool                      rfAckGetBooty ( int Result, struct FString ErrMsg, class TArray< int > PrizeWinUserID, class TArray< int > BootyItemID, class TArray< int > BootyPartsID );		//  GUIWarfare.BTTcpHandler.rfAckGetBooty
	 bool                      rfAckForceGameOver ( int UserID, int GameRoomNumber, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckForceGameOver
	 bool                      rfAckEntryItemList ( class TArray< int > UserIDs, class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< struct FBtrDouble > UniqueID, class TArray< int > PaintID, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckEntryItemList
	 bool                      rfAckRegisterOtherUdpInfo ( int UID, struct FString IP, int Port, unsigned char NatType, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort );		//  GUIWarfare.BTTcpHandler.rfAckRegisterOtherUdpInfo
	 bool                      rfReqForceNatTypeSetting ( int NatType );         		//  GUIWarfare.BTTcpHandler.rfReqForceNatTypeSetting
	 bool                      rfReqStartNatDiag ( struct FString Server1Addr, int Server1Port, struct FString Server2Addr, int Server2Port );		//  GUIWarfare.BTTcpHandler.rfReqStartNatDiag
	 bool                      rfAckChangeUserState ( int Result, struct FString ErrMsg, class TArray< int > UserIDs, class TArray< unsigned char > Positions, class TArray< int > Numbers, class TArray< unsigned char > OldStates, class TArray< unsigned char > NewStates );		//  GUIWarfare.BTTcpHandler.rfAckChangeUserState
	 bool                      rfReqExteriorRoomState ( int RoomNumber, unsigned char RoomState );		//  GUIWarfare.BTTcpHandler.rfReqExteriorRoomState
	 bool                      rfReqExteriorRoomUserCount ( int RoomNumber, int RoomUserCount );		//  GUIWarfare.BTTcpHandler.rfReqExteriorRoomUserCount
	 bool                      rfReqExteriorRoomInfo ( int SP, int RoomNumber, unsigned char IsPW, struct FString RoomName, struct FString MapName, struct FString ModeName, int MapNum, int ModeNum, unsigned char IsTeamBalance, int MaxUserCount, int RoomUserCount, unsigned char RoomState, unsigned char BotDifficult, unsigned char WeaponLimit, unsigned char BotModeUserTeamNum );		//  GUIWarfare.BTTcpHandler.rfReqExteriorRoomInfo
	 bool                      rfAckCharInfo ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FCharInfo stCharInfo, unsigned char InClanRank, int ClanLevel );		//  GUIWarfare.BTTcpHandler.rfAckCharInfo
	 bool                      rfAckConfirmItemChanged ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckConfirmItemChanged
	 bool                      rfAckEquipItem ( int ChangedNewItemID, struct FBtrDouble ChangedNewUniqueID, int ChangedNewSlotPosition, int ChangedOldItemID, struct FBtrDouble ChangedOldUniqueID, int ChangedOldSlotPosition, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckEquipItem
	 bool                      rfAckChangeRoomSetting ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		//  GUIWarfare.BTTcpHandler.rfAckChangeRoomSetting
	 bool                      rfAckUpdateScore ( class TArray< int > UserIDs, class TArray< struct FString > NickNames, class TArray< unsigned char > TeamIDs, class TArray< int > Scores, class TArray< int > Kills, class TArray< int > Assists, class TArray< int > Deaths, class TArray< int > EXPs, class TArray< int > EXPBonuses, class TArray< int > Points, class TArray< int > PointBonuses, class TArray< int > TeamScores, class TArray< int > BonusOwnerID, class TArray< int > BonusID );		//  GUIWarfare.BTTcpHandler.rfAckUpdateScore
	 bool                      rfAckConnectGame ( int UserID, int Result );      		//  GUIWarfare.BTTcpHandler.rfAckConnectGame
	 bool                      rfAckChangeNewGuest ( struct FString HostIP );    		//  GUIWarfare.BTTcpHandler.rfAckChangeNewGuest
	 bool                      rfAckChangeHost ( unsigned char ClientNum );      		//  GUIWarfare.BTTcpHandler.rfAckChangeHost
	 bool                      rfAckChangeRoomOwner ( int GameNum, int OldOwner, int NewOwner, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckChangeRoomOwner
	 bool                      rfAckDisconnectGame ( int Result, int DisconnectUserID, struct FString DisconnectUserName );		//  GUIWarfare.BTTcpHandler.rfAckDisconnectGame
	 bool                      rfReqRelayServerOff (  );                         		//  GUIWarfare.BTTcpHandler.rfReqRelayServerOff
	 bool                      rfReqRelayServerOn ( struct FString RelayServerIP, int RelayServerPortNum );		//  GUIWarfare.BTTcpHandler.rfReqRelayServerOn
	 bool                      rfAckGameRoomInfo ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		//  GUIWarfare.BTTcpHandler.rfAckGameRoomInfo
	 bool                      rfAckGameOver ( int UID, int GameRoomNumber, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckGameOver
	 bool                      rfAckChangeGameMode ( int GameNum, int UID, struct FString GameMode, unsigned char GameModeNum, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckChangeGameMode
	 bool                      rfAckSelectMap ( int GameNum, int UID, struct FString MapName, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckSelectMap
	 bool                      rfAckIsGameRoomPlaying ( int GameRoomNum, unsigned char IsPlaying );		//  GUIWarfare.BTTcpHandler.rfAckIsGameRoomPlaying
	 bool                      rfAckGameRoomDestroy ( int GameRoomNum );         		//  GUIWarfare.BTTcpHandler.rfAckGameRoomDestroy
	 bool                      rfAckStartGame ( int GameNumber, int ClientsCount, int StartSeed, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckStartGame
	 bool                      rfAckGameHostInfo ( int GameNumber, struct FString UserID, struct FString IP, int Port, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckGameHostInfo
	 bool                      rfAckChangeTeam ( int GameNumber, struct FString UserID, int UID, int TeamNum, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckChangeTeam
	 bool                      rfAckCreateGameRoom ( int Result, struct FString ErrMsg, int UserID, struct FString RoomOwnerIP, struct FGameRoomInfo NetRoomInfo );		//  GUIWarfare.BTTcpHandler.rfAckCreateGameRoom
	 bool                      rfAckLeaveRoom ( int Num, int UID, struct FString UserID, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckLeaveRoom
	 bool                      rfAckRoomUserList ( class TArray< int > UID, class TArray< struct FString > UserName, class TArray< int > Grade, class TArray< int > TeamNum, class TArray< unsigned char > Statue, class TArray< unsigned char > IsHost, class TArray< struct FString > UserIP, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< unsigned char > IsLookingFor, class TArray< int > GMUID, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTTcpHandler.rfAckRoomUserList
	 bool                      rfAckEnterRoom ( int GameNum, int OwnerID, int UID, struct FString UserID, int TeamNum, int Grade, struct FString UserIP, struct FString ClanName, int Clan_Mark_Pattern, int Clan_Mark_BG, int Clan_Mark_BL, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTTcpHandler.rfAckEnterRoom
	 bool                      rfAckChatClan ( struct FString CharName, struct FString Message, int Result );		//  GUIWarfare.BTTcpHandler.rfAckChatClan
	 bool                      rfAckChatNormal ( int id, struct FString Sender, struct FString Message, int Result );		//  GUIWarfare.BTTcpHandler.rfAckChatNormal
	 bool                      rfAckRoomListEnd (  );                            		//  GUIWarfare.BTTcpHandler.rfAckRoomListEnd
	 bool                      rfAckRoomList ( class TArray< int > GameNum, class TArray< struct FString > Title, class TArray< struct FString > MapName, class TArray< int > MapNum, class TArray< unsigned char > UserCount, class TArray< unsigned char > MaxCount, class TArray< struct FString > ModeName, class TArray< int > ModeNum, class TArray< unsigned char > WeaponLimit, class TArray< unsigned char > IsTeamBalance, class TArray< unsigned char > Status, class TArray< struct FString > RoomOwnerIP, class TArray< int > GameMinute, class TArray< struct FString > RoomOwnerName, class TArray< unsigned char > IsSpecial, class TArray< unsigned char > IsPassword, class TArray< unsigned char > BotDifficult, class TArray< unsigned char > BotModeUserTeamNum );		//  GUIWarfare.BTTcpHandler.rfAckRoomList
	 bool                      rfAckRoomListStart ( int Result, int TotalCount, int Count, int StartIndex );		//  GUIWarfare.BTTcpHandler.rfAckRoomListStart
	 bool                      rfAckChannelUserList ( int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > UserID, class TArray< int > UserLevels, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, int Result, struct FString ErrMsg, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTTcpHandler.rfAckChannelUserList
	 bool                      rfAckLogin2 ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FBtrDouble CurServerTime, int CharDBID, unsigned char IsGM );		//  GUIWarfare.BTTcpHandler.rfAckLogin2
	 bool                      rfAckLeaveChannel ( int Result, struct FString UserID, int UID );		//  GUIWarfare.BTTcpHandler.rfAckLeaveChannel
	 bool                      rfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTTcpHandler.rfAckEnterChannel
	 bool                      rfAckChannelList ( class TArray< int > id, class TArray< struct FString > Title, class TArray< int > CurUser, class TArray< int > MaxUser );		//  GUIWarfare.BTTcpHandler.rfAckChannelList
	 bool                      rfAckAuctionInstantlyBuying ( int Result, struct FString ErrMsg, int PointRemain );		//  GUIWarfare.BTTcpHandler.rfAckAuctionInstantlyBuying
	 bool                      rfAckAuctionMyItemCancel ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckAuctionMyItemCancel
	 bool                      rfAckAuctionItemListEnd ( unsigned char Section );		//  GUIWarfare.BTTcpHandler.rfAckAuctionItemListEnd
	 bool                      rfAckAuctionItemList ( unsigned char Section, class TArray< int > UniqueIDs, class TArray< int > ItemIDs, class TArray< int > AddPartsIDs, class TArray< struct FBtrDouble > UntilTimes, class TArray< int > BiddingPrices, class TArray< int > InstantlyByuingPrices, class TArray< int > ItemDamageds, class TArray< struct FString > HighestBidderNames, class TArray< struct FString > SellerNames, class TArray< int > ItemCount );		//  GUIWarfare.BTTcpHandler.rfAckAuctionItemList
	 bool                      rfAckAuctionItemListStart ( int Result, struct FString ErrMsg, unsigned char Section, int PageNum, int Count );		//  GUIWarfare.BTTcpHandler.rfAckAuctionItemListStart
	 bool                      rfAckAuctionItemListCount ( int Result, struct FString ErrMsg, unsigned char Section, unsigned char Classfy, int ItemType, int ItemGrade, int Count );		//  GUIWarfare.BTTcpHandler.rfAckAuctionItemListCount
	 bool                      rfAckAuctionMyItemRegister ( int Result, struct FString ErrMsg, int BeginPrice, int BuyPrice, int GuarantyPoint, int PointRemain );		//  GUIWarfare.BTTcpHandler.rfAckAuctionMyItemRegister
	 bool                      rfAckItemListEnd (  );                            		//  GUIWarfare.BTTcpHandler.rfAckItemListEnd
	 bool                      rfAckItemList ( class TArray< struct FBtrDouble > UniqueID, class TArray< int > ItemID, class TArray< int > ItemType, class TArray< int > Durability, class TArray< struct FBtrDouble > UntilTime, class TArray< int > SlotPosition, class TArray< int > AddPartsID, class TArray< int > DamageDegree, class TArray< unsigned char > ItemState, class TArray< int > StackCount, class TArray< int > PaintID, class TArray< int > TradeCount );		//  GUIWarfare.BTTcpHandler.rfAckItemList
	 bool                      rfAckItemListStart ( int Count, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.rfAckItemListStart
	 bool                      rfAckLogin ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, struct FCharInfo btCharInfo );		//  GUIWarfare.BTTcpHandler.rfAckLogin
	 bool                      sfAckClanMatch_RecvInviteCrew ( int Result, struct FString Inviter );		//  GUIWarfare.BTTcpHandler.sfAckClanMatch_RecvInviteCrew
	 bool                      sfAckRecvInviteGameRoom ( struct FString RoomUniqueID, int RoomNumber, unsigned char Answer, struct FString InviteCharName );		//  GUIWarfare.BTTcpHandler.sfAckRecvInviteGameRoom
	 bool                      sfAckRecvJoinClan ( int UserIdx, struct FString CharName, struct FString ReqMsg, unsigned char Permit );		//  GUIWarfare.BTTcpHandler.sfAckRecvJoinClan
	 bool                      sfAckRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString InviterMsg, struct FString ClanName, unsigned char Permit );		//  GUIWarfare.BTTcpHandler.sfAckRecvClanInvite
	 bool                      sfAckStartNatDiag ( int NatType );                		//  GUIWarfare.BTTcpHandler.sfAckStartNatDiag
	 bool                      sfReqMyEquipedQSlotList (  );                     		//  GUIWarfare.BTTcpHandler.sfReqMyEquipedQSlotList
	 bool                      sfReqMyEquipedSkillList (  );                     		//  GUIWarfare.BTTcpHandler.sfReqMyEquipedSkillList
	 bool                      sfReqMyEquipedItemList (  );                      		//  GUIWarfare.BTTcpHandler.sfReqMyEquipedItemList
	 bool                      sfReqGetMyMailBoxState (  );                      		//  GUIWarfare.BTTcpHandler.sfReqGetMyMailBoxState
	 bool                      sfReqSetLookForClan ( unsigned char IsLookingFor );		//  GUIWarfare.BTTcpHandler.sfReqSetLookForClan
	 bool                      sfReqExteriorRoomOwnerInfo ( int RoomNum, struct FString OwnerName, struct FString OwnerIP );		//  GUIWarfare.BTTcpHandler.sfReqExteriorRoomOwnerInfo
	 bool                      sfReqClanMatch_SetWaitRoomPublic ( unsigned char Set );		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_SetWaitRoomPublic
	 bool                      sfReqRemoveCheckTeamBalanceList (  );             		//  GUIWarfare.BTTcpHandler.sfReqRemoveCheckTeamBalanceList
	 bool                      sfReqPaidItem_ChangeClanMark ( struct FBtrDouble ItemIdx, unsigned char IsPaid, int Pattern, int BG, int BL );		//  GUIWarfare.BTTcpHandler.sfReqPaidItem_ChangeClanMark
	 bool                      sfReqPaidItem_ClanMarkDupCheck ( unsigned char IsPaid, int Pattern, int BG, int BL );		//  GUIWarfare.BTTcpHandler.sfReqPaidItem_ClanMarkDupCheck
	 bool                      sfReqPaidItem_BroadCast ( struct FBtrDouble ItemIdx, int Command, struct FString Message );		//  GUIWarfare.BTTcpHandler.sfReqPaidItem_BroadCast
	 bool                      sfReqPaidItem_EraseRecord ( struct FBtrDouble ItemIdx, int Command );		//  GUIWarfare.BTTcpHandler.sfReqPaidItem_EraseRecord
	 bool                      sfReqSendSystemMsg ( unsigned char RecvType, struct FString SendCharName, struct FString RecvCharname, struct FSystemMsgParam MsgInfo );		//  GUIWarfare.BTTcpHandler.sfReqSendSystemMsg
	 bool                      sfReqRandomBox_Use ( struct FBtrDouble ItemIdx ); 		//  GUIWarfare.BTTcpHandler.sfReqRandomBox_Use
	 bool                      sfReqChangeRoomTitle_GM ( int RoomNumber, struct FString NewRoomTitle );		//  GUIWarfare.BTTcpHandler.sfReqChangeRoomTitle_GM
	 bool                      sfReqQuestGetAvailableEventList (  );             		//  GUIWarfare.BTTcpHandler.sfReqQuestGetAvailableEventList
	 bool                      sfReqCharBlockInfo (  );                          		//  GUIWarfare.BTTcpHandler.sfReqCharBlockInfo
	 bool                      sfReqIsPaidWebzenPCBang ( unsigned char IsPaid ); 		//  GUIWarfare.BTTcpHandler.sfReqIsPaidWebzenPCBang
	 bool                      sfReqClanMatch_GetClanWaittingRoomInfo (  );      		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_GetClanWaittingRoomInfo
	 bool                      sfReqReturnBotID ( class TArray< int > BotID );   		//  GUIWarfare.BTTcpHandler.sfReqReturnBotID
	 bool                      sfReqGetBotID ( unsigned char AFCount, unsigned char RSACount );		//  GUIWarfare.BTTcpHandler.sfReqGetBotID
	 bool                      sfReqClanMatch_ChangeRoomSetting ( int WaitRoomIndex, class TArray< int > MapNumArray, int VersusMode, unsigned char IsPublic );		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_ChangeRoomSetting
	 bool                      sfReqParamCheckSum ( struct FString key, struct FString Value );		//  GUIWarfare.BTTcpHandler.sfReqParamCheckSum
	 bool                      sfReqWebzenBillingUseStorageItem ( int StorageSeq, int StorageItemSeq, unsigned char StorageItemType );		//  GUIWarfare.BTTcpHandler.sfReqWebzenBillingUseStorageItem
	 bool                      sfReqWebzenBillingStorageList ( int Page, int CountForPage, unsigned char Type );		//  GUIWarfare.BTTcpHandler.sfReqWebzenBillingStorageList
	 bool                      sfReqGiftItemByWebzenCash ( struct FString ReceiverCharName, struct FString Message, int PackageProductSeq, int PriceSeq, int ProductDisplaySeq );		//  GUIWarfare.BTTcpHandler.sfReqGiftItemByWebzenCash
	 bool                      sfReqBuyItemByWebzenCash ( int PackageProductSeq, int ProductDisplaySeq, int PriceSeq, class TArray< int > ItemIDs, struct FBtrDouble ItemUniqueID, unsigned char BuyOption1, unsigned char BuyOption2 );		//  GUIWarfare.BTTcpHandler.sfReqBuyItemByWebzenCash
	 bool                      sfReqWebzenShopScriptVersion (  );                		//  GUIWarfare.BTTcpHandler.sfReqWebzenShopScriptVersion
	 bool                      sfReqWebzenCash (  );                             		//  GUIWarfare.BTTcpHandler.sfReqWebzenCash
	 bool                      sfReqRegisteredPCBangInfo (  );                   		//  GUIWarfare.BTTcpHandler.sfReqRegisteredPCBangInfo
	 bool                      sfReqRegisterMainPCBang (  );                     		//  GUIWarfare.BTTcpHandler.sfReqRegisterMainPCBang
	 bool                      sfReqPCBangUserList (  );                         		//  GUIWarfare.BTTcpHandler.sfReqPCBangUserList
	 bool                      sfReqDailyQuestNewAvailable ( class TArray< int > ExpiredQuestID, class TArray< int > NewQuestID );		//  GUIWarfare.BTTcpHandler.sfReqDailyQuestNewAvailable
	 bool                      sfReqQuestNewAvailable ( class TArray< int > AchivedQuestID, class TArray< int > NewQuestID, class TArray< unsigned char > IsDailyQuest, class TArray< int > ExpiredQuest );		//  GUIWarfare.BTTcpHandler.sfReqQuestNewAvailable
	 bool                      sfReqQuestUpdate ( int UniqueID, int GameRoomNum, class TArray< int > QuestID, class TArray< int > CountPrograss );		//  GUIWarfare.BTTcpHandler.sfReqQuestUpdate
	 bool                      sfReqQuestList (  );                              		//  GUIWarfare.BTTcpHandler.sfReqQuestList
	 bool                      sfReqPermanentRoomInfo ( int RoomNum );           		//  GUIWarfare.BTTcpHandler.sfReqPermanentRoomInfo
	 bool                      sfReqClanMatch_FoundMatch ( int ChannelID, int RoomNumber );		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_FoundMatch
	 bool                      sfReqClanMatch_StartSearching ( int RequestCount );		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_StartSearching
	 bool                      sfReqLimitedListInChannel (  );                   		//  GUIWarfare.BTTcpHandler.sfReqLimitedListInChannel
	 bool                      sfReqRecvInviteGameRoom ( struct FString InviteUserServerName, int InviteUserServerID, int InviteUserChannelNumber, struct FString RoomUniqueID, int RoomNumber, struct FString RoomName, unsigned char RoomState, struct FString MapName, struct FString OwnerName, unsigned char GameMode, unsigned char WeaponLimit, unsigned char IsTeamBalance, struct FString Password, struct FString InviteCharName );		//  GUIWarfare.BTTcpHandler.sfReqRecvInviteGameRoom
	 bool                      sfReqInviteGameRoom ( struct FString GuestCharName );		//  GUIWarfare.BTTcpHandler.sfReqInviteGameRoom
	 bool                      sfReqClanMatch_StopSearching (  );                		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_StopSearching
	 bool                      sfReqClanMatch_ChangeLeader ( int WaitRoomIdx, int NewLeaderID, struct FString NewLeaderName );		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_ChangeLeader
	 bool                      sfReqClanMatch_WaittingTeamList ( int StartIndex, int ReturnCount );		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_WaittingTeamList
	 bool                      sfReqClanMatch_Chat ( struct FString Msg );       		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_Chat
	 bool                      sfReqClanMatch_Leave ( int WaittingID );          		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_Leave
	 bool                      sfReqClanMatch_MemberList (  );                   		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_MemberList
	 bool                      sfReqClanMatch_Join ( int WaittingID );           		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_Join
	 bool                      sfReqClanMatch_InviteCrewResult ( struct FString Invitee, int Result );		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_InviteCrewResult
	 bool                      sfReqClanMatch_RecvInviteCrew ( struct FString Inviter, struct FString ServerIP, int Port, int WaittingID, struct FString Msg, int MapNum, int InviteUserChannelNum, struct FString LeaderName, struct FString RoomName );		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_RecvInviteCrew
	 bool                      sfReqClanMatch_InviteCrew ( struct FString Invitee );		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_InviteCrew
	 bool                      sfReqClanMatch_StartCombat ( class TArray< int > MapNumArray, int VersusMode );		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_StartCombat
	 bool                      sfReqClanMatch_GetReady (  );                     		//  GUIWarfare.BTTcpHandler.sfReqClanMatch_GetReady
	 bool                      sfReqGetItemFromItemBox ( struct FBtrDouble ItemUniqueID, int ItemID, int ItemIDChoose, int PartIDChoose );		//  GUIWarfare.BTTcpHandler.sfReqGetItemFromItemBox
	 bool                      sfReqItemListInItemBox ( struct FBtrDouble ItemUniqueID, int BoxItemID );		//  GUIWarfare.BTTcpHandler.sfReqItemListInItemBox
	 bool                      sfReqRecvForceFailedClientLoading ( int ErrCode );		//  GUIWarfare.BTTcpHandler.sfReqRecvForceFailedClientLoading
	 bool                      sfReqForceFailedClientLoading ( int FailedUserID, int ErrCode );		//  GUIWarfare.BTTcpHandler.sfReqForceFailedClientLoading
	 bool                      sfReqStartHolePunching ( int GameType, int ReqStartUserID );		//  GUIWarfare.BTTcpHandler.sfReqStartHolePunching
	 bool                      sfReqNotifyMyCharInfoToRoomUser (  );             		//  GUIWarfare.BTTcpHandler.sfReqNotifyMyCharInfoToRoomUser
	 bool                      sfReqNotifyDurabilityZeroItem ( int Result, struct FString ErrMsg, int UserID, class TArray< struct FBtrDouble > ItemUniqueIDs, class TArray< int > ItemIDs, class TArray< int > ItemPartIDs, class TArray< unsigned char > ItemSlotPos );		//  GUIWarfare.BTTcpHandler.sfReqNotifyDurabilityZeroItem
	 bool                      sfReqChatWispherMyCommunity ( struct FString SourceCharName, struct FString SenderName, struct FString Msg );		//  GUIWarfare.BTTcpHandler.sfReqChatWispherMyCommunity
	 bool                      sfReqNotifyDisconnectHostInLoading ( int Result, struct FString ErrMsg, int HostID );		//  GUIWarfare.BTTcpHandler.sfReqNotifyDisconnectHostInLoading
	 bool                      sfReqRecvForceDisconnected_FromGM ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandler.sfReqRecvForceDisconnected_FromGM
	 bool                      sfReqForceDisconnectUser_GM ( struct FString CharName );		//  GUIWarfare.BTTcpHandler.sfReqForceDisconnectUser_GM
	 bool                      sfReqRecvNotice_FromGM ( int Result, struct FString ErrMsg, class TArray< struct FString > NoticeMsg, unsigned char IsFromDB );		//  GUIWarfare.BTTcpHandler.sfReqRecvNotice_FromGM
	 bool                      sfReqNotice_GM ( unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg );		//  GUIWarfare.BTTcpHandler.sfReqNotice_GM
	 bool                      sfReqSpecificChannelUserInfo ( int UserID );      		//  GUIWarfare.BTTcpHandler.sfReqSpecificChannelUserInfo
	 bool                      sfReqSpecificGameRoomInfo ( int RoomNum );        		//  GUIWarfare.BTTcpHandler.sfReqSpecificGameRoomInfo
	 bool                      sfReqChannelUserListInGameRoom ( int ChannelNum, int StartIndex, int Count );		//  GUIWarfare.BTTcpHandler.sfReqChannelUserListInGameRoom
	 bool                      sfReqRecvDeleteFriend ( int Result, struct FString FromCharName );		//  GUIWarfare.BTTcpHandler.sfReqRecvDeleteFriend
	 bool                      sfReqDeleteFriend ( class TArray< struct FString > DeleteCharName );		//  GUIWarfare.BTTcpHandler.sfReqDeleteFriend
	 bool                      sfReqGameGuardAuthData ( int AuthDataIndex, int AuthDataVal1, int AuthDataVal2, int AuthDataVal3 );		//  GUIWarfare.BTTcpHandler.sfReqGameGuardAuthData
	 bool                      sfReqCheckEquipedWeaponDurability (  );           		//  GUIWarfare.BTTcpHandler.sfReqCheckEquipedWeaponDurability
	 bool                      sfReqGamePlay_GetChopper ( int GetChopperUID, class TArray< int > GetChopperAssistUID, float KillXCoord, float KillYCoord, float KillZCoord, int KillPos, int KillWeaponID, int KillWeaponPartID, int KillRange, int KillDamage, int ChopperCallerID, struct FString ChopperCallerName, float ChopperXCoord, float ChopperYCoord, float ChopperZCoord );		//  GUIWarfare.BTTcpHandler.sfReqGamePlay_GetChopper
	 bool                      sfReqIsAvailClanURL ( struct FString ClanURL );   		//  GUIWarfare.BTTcpHandler.sfReqIsAvailClanURL
	 bool                      sfReqGetIsHostBlocking (  );                      		//  GUIWarfare.BTTcpHandler.sfReqGetIsHostBlocking
	 bool                      sfReqNotifyHostBlocking ( unsigned char Blocking );		//  GUIWarfare.BTTcpHandler.sfReqNotifyHostBlocking
	 bool                      sfReqGetHolePunchingResult (  );                  		//  GUIWarfare.BTTcpHandler.sfReqGetHolePunchingResult
	 bool                      sfReqNotifyRecvDummyForHolePunching ( int ClientUserID, unsigned char Phrase );		//  GUIWarfare.BTTcpHandler.sfReqNotifyRecvDummyForHolePunching
	 bool                      sfReqGamePlay_ChangeWeaponSet ( int UID, int SetNumber );		//  GUIWarfare.BTTcpHandler.sfReqGamePlay_ChangeWeaponSet
	 bool                      sfReqGamePlay_UpdateDomScore ( int AFScore, int RSAScore );		//  GUIWarfare.BTTcpHandler.sfReqGamePlay_UpdateDomScore
	 bool                      sfReqNotifyRelayServerAddr ( struct FString RelayIP, int RelayPort );		//  GUIWarfare.BTTcpHandler.sfReqNotifyRelayServerAddr
	 bool                      sfReqGetUserHostPriorityPoint ( int UserID );     		//  GUIWarfare.BTTcpHandler.sfReqGetUserHostPriorityPoint
	 bool                      sfReqUpdateMyHostPriorityPoint ( int HostPriorityPoint );		//  GUIWarfare.BTTcpHandler.sfReqUpdateMyHostPriorityPoint
	 bool                      sfReqWriteServerLog ( unsigned char Destination, struct FString LogMsg );		//  GUIWarfare.BTTcpHandler.sfReqWriteServerLog
	 bool                      sfReqGamePlay_SetRoundStartTime ( class TArray< int > UID );		//  GUIWarfare.BTTcpHandler.sfReqGamePlay_SetRoundStartTime
	 bool                      sfReqGamePlay_SetGameStartTime ( class TArray< int > UID );		//  GUIWarfare.BTTcpHandler.sfReqGamePlay_SetGameStartTime
	 bool                      sfReqRecvForceDisconnectUDPFromHost ( int Result );		//  GUIWarfare.BTTcpHandler.sfReqRecvForceDisconnectUDPFromHost
	 bool                      sfReqForceDisconnectUDPFromHost ( int UserID );   		//  GUIWarfare.BTTcpHandler.sfReqForceDisconnectUDPFromHost
	 bool                      sfReqGamePlay_TakeAPoint ( class TArray< int > TakerUID, unsigned char TakePos, class TArray< float > TakerXCoord, class TArray< float > TakerYCoord, class TArray< float > TakerZCoord, class TArray< int > TakerPos, class TArray< int > TakerWeaponID, class TArray< int > TakerWeaponPartID, class TArray< int > TakerRange );		//  GUIWarfare.BTTcpHandler.sfReqGamePlay_TakeAPoint
	 bool                      sfReqNotifyChangeRoomState ( unsigned char RoomState );		//  GUIWarfare.BTTcpHandler.sfReqNotifyChangeRoomState
	 bool                      sfReqGamePlay_DefuseBomb ( int DefuserUID, unsigned char DefusePos, float DefuserXCoord, float DefuserYCoord, float DefuserZCoord, int DefuserPos, int DefuserWeaponID, int DefuserWeaponPartID, int DefuserRange );		//  GUIWarfare.BTTcpHandler.sfReqGamePlay_DefuseBomb
	 bool                      sfReqGamePlay_InstallBomb ( int InstallerUID, unsigned char InstallPos, float InstallerXCoord, float InstallerYCoord, float InstallerZCoord, int InstallerPos, int InstallerWeaponID, int InstallerWeaponPartID, int InstallerRange );		//  GUIWarfare.BTTcpHandler.sfReqGamePlay_InstallBomb
	 bool                      sfReqDBCharInfo ( struct FString CharName );      		//  GUIWarfare.BTTcpHandler.sfReqDBCharInfo
	 bool                      sfReqForceNatTypeSetting ( int NatType );         		//  GUIWarfare.BTTcpHandler.sfReqForceNatTypeSetting
	 bool                      sfReqGetServerTime (  );                          		//  GUIWarfare.BTTcpHandler.sfReqGetServerTime
	 bool                      sfReqLogEndEachRound ( int StartCnt, int EndCnt, int RoundEndType, int RoundEndTime, unsigned char VTeam, unsigned char VTeamAD, int AFScore, int RSAScore, int Round );		//  GUIWarfare.BTTcpHandler.sfReqLogEndEachRound
	 bool                      sfReqLogGetScore ( struct FKillDeathLog KillDeathLogParam, class TArray< int > AssistUIDs, class TArray< unsigned char > AssistScores );		//  GUIWarfare.BTTcpHandler.sfReqLogGetScore
	 bool                      sfReqAuctionTradeHistory ( int ItemID, int PartID );		//  GUIWarfare.BTTcpHandler.sfReqAuctionTradeHistory
	 bool                      sfReqSendGift ( int ItemID, struct FString RecvCharname, struct FString RecvMessage, unsigned char BuyOption1, unsigned char BuyOption2 );		//  GUIWarfare.BTTcpHandler.sfReqSendGift
	 bool                      sfReqGetAttachedItemFromMemo ( int UserID, int MemoIdx, int ItemID );		//  GUIWarfare.BTTcpHandler.sfReqGetAttachedItemFromMemo
	 bool                      sfReqChatClan ( struct FString Message );         		//  GUIWarfare.BTTcpHandler.sfReqChatClan
	 bool                      sfReqTestDouble ( struct FBtrDouble vDouble, class TArray< struct FBtrDouble > vDoubles );		//  GUIWarfare.BTTcpHandler.sfReqTestDouble
	 bool                      sfReqNotifyLoadingState ( unsigned char LoadingState );		//  GUIWarfare.BTTcpHandler.sfReqNotifyLoadingState
	 bool                      sfReqFailedStartGame ( int LoadingStep );         		//  GUIWarfare.BTTcpHandler.sfReqFailedStartGame
	 bool                      sfReqSuccessStartGame ( int LoadingStep );        		//  GUIWarfare.BTTcpHandler.sfReqSuccessStartGame
	 bool                      sfReqClanCharPersonelIntro ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTTcpHandler.sfReqClanCharPersonelIntro
	 bool                      sfReqClanPersonelIntro ( struct FString ClanName, struct FString CharName, struct FString PersonelIntro );		//  GUIWarfare.BTTcpHandler.sfReqClanPersonelIntro
	 bool                      sfReqClanChangeInfo ( struct FString ClanName, unsigned char IsRecruit, unsigned char Region, struct FString Keyword, struct FString ClanIntro, struct FString Notice );		//  GUIWarfare.BTTcpHandler.sfReqClanChangeInfo
	 bool                      sfReqClanClose ( struct FString ClanName );       		//  GUIWarfare.BTTcpHandler.sfReqClanClose
	 bool                      sfReqClanSecession ( struct FString ClanName );   		//  GUIWarfare.BTTcpHandler.sfReqClanSecession
	 bool                      sfReqClanNews ( struct FString ClanName );        		//  GUIWarfare.BTTcpHandler.sfReqClanNews
	 bool                      sfReqAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTTcpHandler.sfReqAdjustClanMemberGrade
	 bool                      sfReqClanUserList ( struct FString ClanName );    		//  GUIWarfare.BTTcpHandler.sfReqClanUserList
	 bool                      sfReqSerachClan ( unsigned char SearchType, struct FString Keyword, unsigned char ClanStatus, unsigned char ClanRegion, int ReqPage );		//  GUIWarfare.BTTcpHandler.sfReqSerachClan
	 bool                      sfReqRecvJoinClan ( int UserIdx, struct FString CharName, struct FString Message );		//  GUIWarfare.BTTcpHandler.sfReqRecvJoinClan
	 bool                      sfReqJoinClan ( struct FString ClanName, struct FString ClanManagerName, struct FString Message );		//  GUIWarfare.BTTcpHandler.sfReqJoinClan
	 bool                      sfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		//  GUIWarfare.BTTcpHandler.sfReqRecvClanInvite
	 bool                      sfReqInviteClan ( struct FString CharName, struct FString InviteMsg );		//  GUIWarfare.BTTcpHandler.sfReqInviteClan
	 bool                      sfReqClanInfo ( struct FString ClanName );        		//  GUIWarfare.BTTcpHandler.sfReqClanInfo
	 bool                      sfReqCreateClan ( struct FString ClanName, struct FString ClanURL, struct FString ClanIntro, struct FString ClanKeyword, unsigned char ClanRegion );		//  GUIWarfare.BTTcpHandler.sfReqCreateClan
	 bool                      sfReqDupCheckClanName ( struct FString ClanNam ); 		//  GUIWarfare.BTTcpHandler.sfReqDupCheckClanName
	 bool                      sfReqSellShopItemInfo ( struct FBtrDouble UniqueItemID, int Count );		//  GUIWarfare.BTTcpHandler.sfReqSellShopItemInfo
	 bool                      sfReqGameOverEnd (  );                            		//  GUIWarfare.BTTcpHandler.sfReqGameOverEnd
	 bool                      sfReqAuctionItemListCount ( unsigned char Section, unsigned char Classfy, int ItemType, int ItemGrade );		//  GUIWarfare.BTTcpHandler.sfReqAuctionItemListCount
	 bool                      sfReqServerTime (  );                             		//  GUIWarfare.BTTcpHandler.sfReqServerTime
	 bool                      sfReqEntryQSlotIDList ( int UserNum );            		//  GUIWarfare.BTTcpHandler.sfReqEntryQSlotIDList
	 bool                      sfReqEntryQSlotUniqueIDList ( int UserNum );      		//  GUIWarfare.BTTcpHandler.sfReqEntryQSlotUniqueIDList
	 bool                      sfReqAuctionBidding ( int UniqueID, int BiddingPrice );		//  GUIWarfare.BTTcpHandler.sfReqAuctionBidding
	 bool                      sfReqAuctionInstantlyBuying ( int UniqueID );     		//  GUIWarfare.BTTcpHandler.sfReqAuctionInstantlyBuying
	 bool                      sfReqAuctionItemList ( unsigned char Section, struct FString Keyword, int ItemRank, unsigned char ItemClassfy, unsigned char IsAvailable, int PageNum, int Count, int SortOpt );		//  GUIWarfare.BTTcpHandler.sfReqAuctionItemList
	 bool                      sfReqAuctionMyItemCancel ( int UniqueID );        		//  GUIWarfare.BTTcpHandler.sfReqAuctionMyItemCancel
	 bool                      sfReqAuctionMyItemRegister ( struct FBtrDouble UniqueID, int ItemCount, int BeginPrice, int PeriodHour, int InstantlyBuyingPrice );		//  GUIWarfare.BTTcpHandler.sfReqAuctionMyItemRegister
	 bool                      sfReqMyMoney (  );                                		//  GUIWarfare.BTTcpHandler.sfReqMyMoney
	 bool                      sfReqUpdateQSlot ( int QSlotID, struct FString QSlotName, struct FBtrDouble MWItemID, struct FBtrDouble PistolItemID, struct FBtrDouble TWItemID1, struct FBtrDouble TWItemID2, int Skill1, int Skill2, int Skill3, int Skill4 );		//  GUIWarfare.BTTcpHandler.sfReqUpdateQSlot
	 bool                      sfReqQSlotList (  );                              		//  GUIWarfare.BTTcpHandler.sfReqQSlotList
	 bool                      sfReqRepairItem ( class TArray< struct FBtrDouble > UniqueItemcID );		//  GUIWarfare.BTTcpHandler.sfReqRepairItem
	 bool                      sfReqRepairCost ( class TArray< struct FBtrDouble > UniqueItemID );		//  GUIWarfare.BTTcpHandler.sfReqRepairCost
	 bool                      sfReqUpdateWeaponDurability ( int TotalPlayTime, class TArray< int > OwnerID, class TArray< int > Number, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > UsingSec, class TArray< int > UsingRoundInSD );		//  GUIWarfare.BTTcpHandler.sfReqUpdateWeaponDurability
	 bool                      sfReqModifyWeapon ( struct FBtrDouble UniqueID, int AddPartID, int PaintID );		//  GUIWarfare.BTTcpHandler.sfReqModifyWeapon
	 bool                      sfReqSellShopItem ( struct FBtrDouble ItemUniqueID, int Count );		//  GUIWarfare.BTTcpHandler.sfReqSellShopItem
	 bool                      sfReqBuyShopItem ( int ItemID, struct FBtrDouble ItemUniqueID, unsigned char BuyOption1, unsigned char BuyOption2 );		//  GUIWarfare.BTTcpHandler.sfReqBuyShopItem
	 bool                      sfReqShopItemList (  );                           		//  GUIWarfare.BTTcpHandler.sfReqShopItemList
	 bool                      sfReqForceGameOver (  );                          		//  GUIWarfare.BTTcpHandler.sfReqForceGameOver
	 bool                      sfReqGiveSkill (  );                              		//  GUIWarfare.BTTcpHandler.sfReqGiveSkill
	 bool                      sfReqNotifyExpiredItemIDs (  );                   		//  GUIWarfare.BTTcpHandler.sfReqNotifyExpiredItemIDs
	 bool                      sfReqNotifyExpiredSkillIDs (  );                  		//  GUIWarfare.BTTcpHandler.sfReqNotifyExpiredSkillIDs
	 bool                      sfReqNotifyChangedSkillState (  );                		//  GUIWarfare.BTTcpHandler.sfReqNotifyChangedSkillState
	 bool                      sfReqNotifyChangedItemState (  );                 		//  GUIWarfare.BTTcpHandler.sfReqNotifyChangedItemState
	 bool                      sfReqConfirmSkillChanged (  );                    		//  GUIWarfare.BTTcpHandler.sfReqConfirmSkillChanged
	 bool                      sfReqEquipSkill ( int SkillID, int SkillUniqueID, unsigned char NewSlotPosition );		//  GUIWarfare.BTTcpHandler.sfReqEquipSkill
	 bool                      sfReqUserSkillList ( int UserID );                		//  GUIWarfare.BTTcpHandler.sfReqUserSkillList
	 bool                      sfReqDelMemo ( class TArray< int > MemoIdx, unsigned char Type );		//  GUIWarfare.BTTcpHandler.sfReqDelMemo
	 bool                      sfReqReadMemo ( int MemoIdx );                    		//  GUIWarfare.BTTcpHandler.sfReqReadMemo
	 bool                      sfReqMemoList ( unsigned char Type, unsigned char MemoType );		//  GUIWarfare.BTTcpHandler.sfReqMemoList
	 bool                      sfReqRecvMemo ( struct FString cnameFrom, unsigned char MemoType );		//  GUIWarfare.BTTcpHandler.sfReqRecvMemo
	 bool                      sfReqSendMemo ( class TArray< struct FString > cnames, struct FString Msg, int ItemUID );		//  GUIWarfare.BTTcpHandler.sfReqSendMemo
	 bool                      sfReqRecvChatWispher ( struct FString CharnameFrom, struct FString Message );		//  GUIWarfare.BTTcpHandler.sfReqRecvChatWispher
	 bool                      sfReqChatWispher ( struct FString CharName, struct FString Message );		//  GUIWarfare.BTTcpHandler.sfReqChatWispher
	 bool                      sfReqRemoveBlockUserList ( struct FString CharName );		//  GUIWarfare.BTTcpHandler.sfReqRemoveBlockUserList
	 bool                      sfReqAddBlockUserList ( struct FString CharName );		//  GUIWarfare.BTTcpHandler.sfReqAddBlockUserList
	 bool                      sfReqBlockUserList (  );                          		//  GUIWarfare.BTTcpHandler.sfReqBlockUserList
	 bool                      sfReqCompleteFriendInvite ( struct FString CharnameToBeInvited, unsigned char IsPermit );		//  GUIWarfare.BTTcpHandler.sfReqCompleteFriendInvite
	 bool                      sfReqConfirmFriendInvite ( int ReqUserID, struct FString ReqedCharname, unsigned char IsPermit );		//  GUIWarfare.BTTcpHandler.sfReqConfirmFriendInvite
	 bool                      sfReqRecvFriendInvite ( int ReqUserID, struct FString ReqCharname, struct FString InviteMsg );		//  GUIWarfare.BTTcpHandler.sfReqRecvFriendInvite
	 bool                      sfReqSendFriendInvite ( int InviteUserID, struct FString InviteName, struct FString InviteMsg );		//  GUIWarfare.BTTcpHandler.sfReqSendFriendInvite
	 bool                      sfReqChatNormal ( struct FString Message );       		//  GUIWarfare.BTTcpHandler.sfReqChatNormal
	 bool                      sfReqDummy ( int DelayCheck );                    		//  GUIWarfare.BTTcpHandler.sfReqDummy
	 bool                      sfReqConfirmItemChanged (  );                     		//  GUIWarfare.BTTcpHandler.sfReqConfirmItemChanged
	 bool                      sfReqEquipItem ( int ItemID, struct FBtrDouble UniqueID, int SlotPosition );		//  GUIWarfare.BTTcpHandler.sfReqEquipItem
	 bool                      sfReqItemList ( int UID );                        		//  GUIWarfare.BTTcpHandler.sfReqItemList
	 bool                      sfReqEntrySkillList ( int UserID );               		//  GUIWarfare.BTTcpHandler.sfReqEntrySkillList
	 bool                      sfReqEntryItemList ( int UserID );                		//  GUIWarfare.BTTcpHandler.sfReqEntryItemList
	 bool                      sfReqChangeUserState ( unsigned char NewState, unsigned char CheckPlaying );		//  GUIWarfare.BTTcpHandler.sfReqChangeUserState
	 bool                      sfReqExteriorRoomState ( int RoomNumber, unsigned char RoomState );		//  GUIWarfare.BTTcpHandler.sfReqExteriorRoomState
	 bool                      sfReqExteriorRoomUserCount ( int RoomNumber, int RoomUserCount );		//  GUIWarfare.BTTcpHandler.sfReqExteriorRoomUserCount
	 bool                      sfReqExteriorRoomInfo ( int SP, int RoomNumber, unsigned char IsPW, struct FString RoomName, struct FString MapName, struct FString ModeName, int MapNum, int ModeNum, unsigned char IsTeamBalance, int MaxUserCount, int RoomUserCount, unsigned char RoomState, unsigned char BotDifficult, unsigned char WeaponLimit, unsigned char BotModeUserTeamNum );		//  GUIWarfare.BTTcpHandler.sfReqExteriorRoomInfo
	 bool                      sfReqGetBooty ( int RoomNumber );                 		//  GUIWarfare.BTTcpHandler.sfReqGetBooty
	 bool                      sfReqSetUserBootySeedValue ( int UserID, int SeedValue );		//  GUIWarfare.BTTcpHandler.sfReqSetUserBootySeedValue
	 bool                      sfReqChangeRoomSetting ( struct FGameRoomInfo RoomInfo );		//  GUIWarfare.BTTcpHandler.sfReqChangeRoomSetting
	 bool                      sfReqNotifyLevelUp ( int LevelUpUserID, int Level, int Exp, class TArray< int > ItemID, class TArray< int > PartID );		//  GUIWarfare.BTTcpHandler.sfReqNotifyLevelUp
	 bool                      sfReqClientUdpInfoList ( int GameNum );           		//  GUIWarfare.BTTcpHandler.sfReqClientUdpInfoList
	 bool                      sfReqRegisterMyUdpInfo ( unsigned char IsHost, struct FString IP, int Port, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort );		//  GUIWarfare.BTTcpHandler.sfReqRegisterMyUdpInfo
	 bool                      sfReqNotifyClientJoinTime ( int JoinedClientID ); 		//  GUIWarfare.BTTcpHandler.sfReqNotifyClientJoinTime
	 bool                      sfReqDisconnectGame (  );                         		//  GUIWarfare.BTTcpHandler.sfReqDisconnectGame
	 bool                      sfReqConnectGame (  );                            		//  GUIWarfare.BTTcpHandler.sfReqConnectGame
	 bool                      sfReqRelayServerOff (  );                         		//  GUIWarfare.BTTcpHandler.sfReqRelayServerOff
	 bool                      sfReqRelayServerOn ( struct FString RelayServerIP, int RelayServerPortNum );		//  GUIWarfare.BTTcpHandler.sfReqRelayServerOn
	 bool                      sfReqGameOver ( int UID, int GameRoomNumber );    		//  GUIWarfare.BTTcpHandler.sfReqGameOver
	 bool                      sfReqIsGameRoomPlaying ( int GameRoomNum );       		//  GUIWarfare.BTTcpHandler.sfReqIsGameRoomPlaying
	 bool                      sfReqChangeRoomMaxNum ( int GameNum, int UID, int Number, int TeamNum );		//  GUIWarfare.BTTcpHandler.sfReqChangeRoomMaxNum
	 bool                      sfReqUpdateScore ( int GameNumber, class TArray< int > UserIDs, class TArray< int > Kills, class TArray< int > Assists, class TArray< int > Deaths, class TArray< int > EXPs, class TArray< int > Points, class TArray< int > Scores, class TArray< int > TeamScores, class TArray< int > RoundJoin, class TArray< int > TimeJoin, int Playtime, unsigned char GameEndType, class TArray< struct FString > UserNames );		//  GUIWarfare.BTTcpHandler.sfReqUpdateScore
	 bool                      sfReqStartGame ( int GameNumber );                		//  GUIWarfare.BTTcpHandler.sfReqStartGame
	 bool                      sfReqGameHostInfo ( int GameNumber );             		//  GUIWarfare.BTTcpHandler.sfReqGameHostInfo
	 bool                      sfReqIsHostAvailable ( struct FString MyIp, int CPUGrade, int RamGrade, int VGAGrade, int VGARam );		//  GUIWarfare.BTTcpHandler.sfReqIsHostAvailable
	 bool                      sfReqChangeTeam ( int TeamNum );                  		//  GUIWarfare.BTTcpHandler.sfReqChangeTeam
	 bool                      sfReqChangeRoomOwner ( int GameNum, int UID, int NewOwner );		//  GUIWarfare.BTTcpHandler.sfReqChangeRoomOwner
	 bool                      sfReqChangeGameMode ( int GameNum, int UID, struct FString GameMode, unsigned char GameModeNum );		//  GUIWarfare.BTTcpHandler.sfReqChangeGameMode
	 bool                      sfReqBanUser ( int GameNum, int UID, int BanUID );		//  GUIWarfare.BTTcpHandler.sfReqBanUser
	 bool                      sfReqSelectMap ( int GameNum, int UID, struct FString MapName );		//  GUIWarfare.BTTcpHandler.sfReqSelectMap
	 bool                      sfReqGameRoomInfo ( int GameNum, int UID );       		//  GUIWarfare.BTTcpHandler.sfReqGameRoomInfo
	 bool                      sfReqCreateGameRoom ( struct FGameRoomInfo NetRoomInfo );		//  GUIWarfare.BTTcpHandler.sfReqCreateGameRoom
	 bool                      sfReqLeaveRoom ( int Num );                       		//  GUIWarfare.BTTcpHandler.sfReqLeaveRoom
	 bool                      sfReqRoomUserList ( int GameNum );                		//  GUIWarfare.BTTcpHandler.sfReqRoomUserList
	 bool                      sfReqEnterRoom ( int GameNum, struct FString Password, unsigned char RoomEnterType );		//  GUIWarfare.BTTcpHandler.sfReqEnterRoom
	 bool                      sfReqRoomList ( int id, int StartIndex, int Count );		//  GUIWarfare.BTTcpHandler.sfReqRoomList
	 bool                      sfReqChannelUserList ( int id, int StartIndex, int Count );		//  GUIWarfare.BTTcpHandler.sfReqChannelUserList
	 bool                      sfReqLeaveChannel ( int id );                     		//  GUIWarfare.BTTcpHandler.sfReqLeaveChannel
	 bool                      sfReqEnterChannel ( int id );                     		//  GUIWarfare.BTTcpHandler.sfReqEnterChannel
	 bool                      sfReqChannelList ( int bChannelType );            		//  GUIWarfare.BTTcpHandler.sfReqChannelList
	 bool                      sfReqFriendList (  );                             		//  GUIWarfare.BTTcpHandler.sfReqFriendList
	 bool                      sfReqCharInfo (  );                               		//  GUIWarfare.BTTcpHandler.sfReqCharInfo
	 bool                      sfReqLogin2 ( struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, struct FString Guid, int UserType );		//  GUIWarfare.BTTcpHandler.sfReqLogin2
	 bool                      sfReqStartNatDiag ( struct FString Server1Addr, int Server1Port, struct FString Server2Addr, int Server2Port );		//  GUIWarfare.BTTcpHandler.sfReqStartNatDiag
	 bool                      sfReqForceLogoutByOwner (  );                     		//  GUIWarfare.BTTcpHandler.sfReqForceLogoutByOwner
	 bool                      sfReqLogin ( struct FString id );                 		//  GUIWarfare.BTTcpHandler.sfReqLogin
	 bool                      sfReqHash ( int HashField0, int HashField1, int HashField2, int HashField3 );		//  GUIWarfare.BTTcpHandler.sfReqHash
	 bool                      rfAckMyEquipedQSlotList ( class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< int > TWItemID1, class TArray< struct FBtrDouble > TW2UniqueID, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID, int Result );		//  GUIWarfare.BTTcpHandler.rfAckMyEquipedQSlotList
	 bool                      rfAckMyEquipedSkillList ( class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result );		//  GUIWarfare.BTTcpHandler.rfAckMyEquipedSkillList
	 bool                      rfAckMyEquipedItemList ( class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< int > PaintID, class TArray< struct FBtrDouble > UniqueID, int Result );		//  GUIWarfare.BTTcpHandler.rfAckMyEquipedItemList
	 void                      endTutorial (  );                                 		//  GUIWarfare.BTTcpHandler.endTutorial
	 void                      OnPageRoomLobbyInited (  );                       		//  GUIWarfare.BTTcpHandler.OnPageRoomLobbyInited
	 void                      BeginTutorialCreateRoom (  );                     		//  GUIWarfare.BTTcpHandler.BeginTutorialCreateRoom
	 void                      SetupTutorialRoomInfo ( struct FString MapName ); 		//  GUIWarfare.BTTcpHandler.SetupTutorialRoomInfo
	 void                      BeginTutorial ( struct FString MapName );         		//  GUIWarfare.BTTcpHandler.BeginTutorial
	 void                      OnReqSuccessStartGame ( int Step );               		//  GUIWarfare.BTTcpHandler.OnReqSuccessStartGame
	 void                      OnError ( int ErrCode );                          		//  GUIWarfare.BTTcpHandler.OnError
	 void                      OnClose ( int ErrCode );                          		//  GUIWarfare.BTTcpHandler.OnClose
	 void                      OnConnect ( int ErrCode );                        		//  GUIWarfare.BTTcpHandler.OnConnect
	 void                      eventCreated (  );                                		// [ FUNC_Event ] GUIWarfare.BTTcpHandler.Created
	 bool                      Close (  );                                       		//  GUIWarfare.BTTcpHandler.Close
	 bool                      Connect ( struct FString sIpaddr, int nPort );    		//  GUIWarfare.BTTcpHandler.Connect
	 bool                      InitNetwork (  );                                 		//  GUIWarfare.BTTcpHandler.InitNetwork
}; // Size: 0x0094

// Class GUIWarfare.BTPageLogo
class DLL_IMPORT UBTPageLogo : public UBTNetGUIPage
{
public:
	unsigned long                                      bSaveConnectLoginServer:1;                        		// 0x041C ( 0x0004 )  [0x00000001]
	unsigned char                                      SaveNeedChar;                                     		// 0x0420 ( 0x0001 ) 
	int                                                LogoState;                                        		// 0x0424 ( 0x0004 ) 
	class TArray< struct FImage >                      LogoImg;                                          		// 0x0428 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTOwnerDrawImageHK*                         Background;                                       		// 0x0434 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelLogo;                                        		// 0x0438 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	float                                              Degree;                                           		// 0x043C ( 0x0004 ) 
	float                                              TimeFade;                                         		// 0x0440 ( 0x0004 ) 
	float                                              TimeDelay;                                        		// 0x0444 ( 0x0004 ) 
	unsigned long                                      bFirstRender:1;                                   		// 0x0448 ( 0x0004 )  [0x00000001]
	class ABTROModelNew*                               CharacterModel;                                   		// 0x044C ( 0x0004 ) 
	int                                                EventNotifyType;                                  		// 0x0450 ( 0x0004 ) 
	unsigned long                                      bShowNotice:1;                                    		// 0x0454 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      ShowNotify (  );                                  		//  GUIWarfare.BTPageLogo.ShowNotify
	 bool                      rfAckEventNotify ( int Type );                    		//  GUIWarfare.BTPageLogo.rfAckEventNotify
	 bool                      rfAckClientChecksum ( int Result );               		//  GUIWarfare.BTPageLogo.rfAckClientChecksum
	 bool                      rfAckClientChallenge ( struct FString Key1, struct FBtrDouble Key2 );		//  GUIWarfare.BTPageLogo.rfAckClientChallenge
	 bool                      Internal_OnPreDraw ( class UCanvas* C );          		//  GUIWarfare.BTPageLogo.Internal_OnPreDraw
	 bool                      rfAckProcessPreLoginUser ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLogo.rfAckProcessPreLoginUser
	 bool                      rfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		//  GUIWarfare.BTPageLogo.rfAckLoginInHouseTest
	 bool                      Exit_OnOK ( class UGUIComponent* Sender );        		//  GUIWarfare.BTPageLogo.Exit_OnOK
	 bool                      ForceDisconnect_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLogo.ForceDisconnect_OnOK
	 bool                      rfAckLoginWithGlobal ( int Result );              		//  GUIWarfare.BTPageLogo.rfAckLoginWithGlobal
	 bool                      rfAckLoginWithThailand ( int Result );            		//  GUIWarfare.BTPageLogo.rfAckLoginWithThailand
	 bool                      rfAckLoginWithWZAuth ( int Result, unsigned char wzp_AccountType, unsigned char wzp_IsBlock, unsigned char wzp_AuthKeySuccess, unsigned char ChannelType );		//  GUIWarfare.BTPageLogo.rfAckLoginWithWZAuth
	 bool                      rfAckLoginWithTencentAuth ( int Result, unsigned char tc_AccountType, unsigned char tc_IsBlock );		//  GUIWarfare.BTPageLogo.rfAckLoginWithTencentAuth
	 bool                      Exit_OnClick ( class UGUIComponent* Sender );     		//  GUIWarfare.BTPageLogo.Exit_OnClick
	 bool                      Internal_KeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  GUIWarfare.BTPageLogo.Internal_KeyEvent
	 void                      LabelLogo_Decrease_OnTimer ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLogo.LabelLogo_Decrease_OnTimer
	 void                      LabelLogo_Delay_OnTimer ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLogo.LabelLogo_Delay_OnTimer
	 void                      LabelLogo_Increase_OnTimer ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLogo.LabelLogo_Increase_OnTimer
	 void                      SupportResolution (  );                           		//  GUIWarfare.BTPageLogo.SupportResolution
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageLogo.InitComponent
	 void                      TcpLogin_OnConnect ( int ErrCode );               		//  GUIWarfare.BTPageLogo.TcpLogin_OnConnect
//	 float                     DegreeToRadian ( float Angle );                   		//  GUIWarfare.BTPageLogo.DegreeToRadian
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageLogo.InternalOnClose
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageLogo.InternalOnOpen
	 class UBTTcpLink_Login*   GetTcpLogin (  );                                 		//  GUIWarfare.BTPageLogo.GetTcpLogin
}; // Size: 0x003C

// Class GUIWarfare.BTPageLogin
class DLL_IMPORT UBTPageLogin : public UBTNetGUIPageHK
{
public:
	struct FFloatBox                                   fbButtonLogin;                                    		// 0x055C ( 0x0010 ) 
	class UBTOwnerDrawCaptionButtonHK*                 ButtonLogin;                                      		// 0x056C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbButtonBattery;                                  		// 0x0570 ( 0x0010 ) 
	class UBTOwnerDrawCaptionButtonHK*                 ButtonBattery;                                    		// 0x0580 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbButtonQuit;                                     		// 0x0584 ( 0x0010 ) 
	class UBTOwnerDrawCaptionButtonHK*                 ButtonQuit;                                       		// 0x0594 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbEditID;                                         		// 0x0598 ( 0x0010 ) 
	class UBTEditBoxHK*                                EditID;                                           		// 0x05A8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbEditPW;                                         		// 0x05AC ( 0x0010 ) 
	class UBTEditPWHK*                                 EditPW;                                           		// 0x05BC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbComboTest;                                      		// 0x05C0 ( 0x0010 ) 
	class UBTComboBoxHK*                               ComboTest;                                        		// 0x05D0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	int                                                RequestProcessPreLoginCount;                      		// 0x05D4 ( 0x0004 ) 
	int                                                MaxRequestProcessPreLogin;                        		// 0x05D8 ( 0x0004 ) 
	struct FString                                     MessageUserWithSameIDConnected;                   		// 0x05DC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MessageNoID;                                      		// 0x05E8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MessageWrongPWD;                                  		// 0x05F4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MessageTypedNoPWD;                                		// 0x0600 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     CaptionLogin;                                     		// 0x060C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     CaptionQuit;                                      		// 0x0618 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTLabelTestHK2*                             ClanMark;                                         		// 0x0624 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonFontTest;                                   		// 0x0628 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTSliderHK*                                 slider;                                           		// 0x062C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckLoginWithGlobal ( int Result );              		//  GUIWarfare.BTPageLogin.rfAckLoginWithGlobal
	 bool                      rfAckLoginWithThailand ( int Result );            		//  GUIWarfare.BTPageLogin.rfAckLoginWithThailand
	 bool                      rfAckLoginWithWZAuth ( int Result, unsigned char wzp_AccountType, unsigned char wzp_IsBlock, unsigned char wzp_AuthKeySuccess, unsigned char ChannelType );		//  GUIWarfare.BTPageLogin.rfAckLoginWithWZAuth
	 bool                      rfAckLoginWithTencentAuth ( int Result, unsigned char tc_AccountType, unsigned char tc_IsBlock );		//  GUIWarfare.BTPageLogin.rfAckLoginWithTencentAuth
	 bool                      rfAckCreateChar ( int Success, struct FString ErrMsg );		//  GUIWarfare.BTPageLogin.rfAckCreateChar
	 bool                      Disconnect_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLogin.Disconnect_OnCancel
	 bool                      Disconnect_OnOK ( class UGUIComponent* Sender );  		//  GUIWarfare.BTPageLogin.Disconnect_OnOK
	 void                      RequestProcessPreLoginUser (  );                  		//  GUIWarfare.BTPageLogin.RequestProcessPreLoginUser
	 bool                      rfAckProcessPreLoginUser ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLogin.rfAckProcessPreLoginUser
	 bool                      rfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		//  GUIWarfare.BTPageLogin.rfAckLoginInHouseTest
	 bool                      rfAckLogin ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg );		//  GUIWarfare.BTPageLogin.rfAckLogin
	 bool                      ButtionSettings_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLogin.ButtionSettings_OnClick
	 bool                      ButtonQuit_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLogin.ButtonQuit_OnClick
	 bool                      ButtonLogin_Ver1_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLogin.ButtonLogin_Ver1_OnClick
	 bool                      ButtonLogin_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLogin.ButtonLogin_OnClick
	 bool                      SendLogin_Ver1 (  );                              		//  GUIWarfare.BTPageLogin.SendLogin_Ver1
	 void                      Quit (  );                                        		//  GUIWarfare.BTPageLogin.Quit
	 bool                      internalKeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  GUIWarfare.BTPageLogin.internalKeyEvent
	 void                      eventOpened ( class UGUIComponent* Sender );      		// [ FUNC_Event ] GUIWarfare.BTPageLogin.Opened
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageLogin.InternalOnClose
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageLogin.InternalOnOpen
	 class UBTTcpLink_Login*   GetTcpLogin (  );                                 		//  GUIWarfare.BTPageLogin.GetTcpLogin
	 bool                      Edit_OnEnter ( class UGUIComponent* Sender, struct FString txt );		//  GUIWarfare.BTPageLogin.Edit_OnEnter
	 bool                      ButtonFontTest_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLogin.ButtonFontTest_OnClick
	 void                      Internal_OnRendered ( class UCanvas* C );         		//  GUIWarfare.BTPageLogin.Internal_OnRendered
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageLogin.InitComponent
}; // Size: 0x00D4

// Class GUIWarfare.BTPageCharacterCreation
class DLL_IMPORT UBTPageCharacterCreation : public UBTNetGUIPageHK
{
public:
	class UBTTPTopMenuSCHK*                            TPTopMenu;                                        		// 0x055C ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTModelHK*                                  UIModel;                                          		// 0x0560 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class ABTROModelNew*                               CharacterModel;                                   		// 0x0564 ( 0x0004 ) 
	struct FFloatBox                                   fbModelBG;                                        		// 0x0568 ( 0x0010 ) 
	struct FFloatBox                                   fbUIModel;                                        		// 0x0578 ( 0x0010 ) 
	struct FFloatBox                                   fbButtonLR;                                       		// 0x0588 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbButtonRR;                                       		// 0x0598 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonLR;                                         		// 0x05A8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonRR;                                         		// 0x05AC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned long                                      bRRMousePressed:1;                                		// 0x05B0 ( 0x0004 )  [0x00000001]
	unsigned long                                      bLRMousePressed:1;                                		// 0x05B0 ( 0x0004 )  [0x00000002]
	class UBTOwnerDrawImageHK*                         BackgroundDeco;                                   		// 0x05B4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FImage                                      CharacterCreationBgDeco;                          		// 0x05B8 ( 0x0020 ) 
	struct FFloatBox                                   fbBGDeco;                                         		// 0x05D8 ( 0x0010 ) 
	struct FFloatBox                                   fbButtonConfirm;                                  		// 0x05E8 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FString                                     strButtonConfirm;                                 		// 0x05F8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonConfirm;                                    		// 0x0604 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strEditNickName;                                  		// 0x0608 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strLabelNickName;                                 		// 0x0614 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbEditNickName;                                   		// 0x0620 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbLabelNickName;                                  		// 0x0630 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTEditBoxHK*                                EditNickName;                                     		// 0x0640 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelNickName;                                    		// 0x0644 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbAFTeamBtn;                                      		// 0x0648 ( 0x0010 ) 
	struct FFloatBox                                   fbRSATeamBtn;                                     		// 0x0658 ( 0x0010 ) 
	struct FString                                     strAF;                                            		// 0x0668 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strRSA;                                           		// 0x0674 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonAF;                                         		// 0x0680 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonRSA;                                        		// 0x0684 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FImage                                      NickNameDeco;                                     		// 0x0688 ( 0x0020 ) 
	class UBTRODecorateStringHK*                       NickNameToolTip;                                  		// 0x06A8 ( 0x0004 ) 
	struct FFloatBox                                   fbToolTip;                                        		// 0x06AC ( 0x0010 ) 
	struct FString                                     strNickNameToolTip;                               		// 0x06BC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UwGameManager*                               GameMgr;                                          		// 0x06C8 ( 0x0004 ) 
	struct FString                                     strErrorList[ 0x03 ];                             		// 0x06CC ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bVisibleAFModel:1;                                		// 0x06F0 ( 0x0004 )  [0x00000001]
	int                                                nOldMouseX;                                       		// 0x06F4 ( 0x0004 ) 
	int                                                nOffsetMouseDis;                                  		// 0x06F8 ( 0x0004 ) 

	// UScript Functions
	 void                      Internal_OnRendered ( class UCanvas* Canvas );    		//  GUIWarfare.BTPageCharacterCreation.Internal_OnRendered
	 bool                      rfAckProcessPreLoginUser ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageCharacterCreation.rfAckProcessPreLoginUser
	 bool                      rfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		//  GUIWarfare.BTPageCharacterCreation.rfAckLoginInHouseTest
	 bool                      Exit_OnOK ( class UGUIComponent* Sender );        		//  GUIWarfare.BTPageCharacterCreation.Exit_OnOK
	 bool                      ForceDisconnect_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageCharacterCreation.ForceDisconnect_OnOK
	 void                      rfAckCreateChar ( int Success, struct FString ErrMsg );		//  GUIWarfare.BTPageCharacterCreation.rfAckCreateChar
	 bool                      ButtonConfirm_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageCharacterCreation.ButtonConfirm_OnClick
	 bool                      ButtonRSA_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageCharacterCreation.ButtonRSA_OnClick
	 bool                      ButtonAF_OnClick ( class UGUIComponent* Sender ); 		//  GUIWarfare.BTPageCharacterCreation.ButtonAF_OnClick
	 void                      ButtonRR_OnRelease ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageCharacterCreation.ButtonRR_OnRelease
	 void                      ButtonRR_OnPressed ( class UGUIComponent* Sender, bool bRepeat );		//  GUIWarfare.BTPageCharacterCreation.ButtonRR_OnPressed
	 void                      ButtonLR_OnRelease ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageCharacterCreation.ButtonLR_OnRelease
	 void                      ButtonLR_OnPressed ( class UGUIComponent* Sender, bool bRepeat );		//  GUIWarfare.BTPageCharacterCreation.ButtonLR_OnPressed
	 void                      CharRotByDrag (  );                               		//  GUIWarfare.BTPageCharacterCreation.CharRotByDrag
	 bool                      Internal_OnPreDraw ( class UCanvas* C );          		//  GUIWarfare.BTPageCharacterCreation.Internal_OnPreDraw
	 int                       GetStringCount ( struct FString Text );           		//  GUIWarfare.BTPageCharacterCreation.GetStringCount
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageCharacterCreation.InternalOnClose
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageCharacterCreation.InternalOnOpen
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageCharacterCreation.InitComponent
	 class UBTTcpLink_Login*   GetTcpLogin (  );                                 		//  GUIWarfare.BTPageCharacterCreation.GetTcpLogin
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageCharacterCreation.HeaderButton_OnClick
}; // Size: 0x01A0

// Class GUIWarfare.BTPageLobby
class DLL_IMPORT UBTPageLobby : public UBTNetQuestInfoPageHK
{
public:
	float                                              ACLLobby_OnHitBottom_LastTime;                    		// 0x0560 ( 0x0004 ) 
	float                                              TPMessenger_ACLMsg0_OnHitBottom_LastTime;         		// 0x0564 ( 0x0004 ) 
	struct FString                                     strEnterRoomMessage;                              		// 0x0568 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strConnectingLogin;                               		// 0x0574 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bStopRefresh:1;                                   		// 0x0580 ( 0x0004 )  [0x00000001]
	float                                              LastRefreshTime[ 0x02 ];                          		// 0x0584 ( 0x0008 ) 
	float                                              RefreshCycleTime[ 0x02 ];                         		// 0x058C ( 0x0008 ) 
	class UBTRefreshTime*                              rfFriendPosTime;                                  		// 0x0594 ( 0x0004 ) 
	int                                                TotalChannelUserCount;                            		// 0x0598 ( 0x0004 ) 
	int                                                TotalRoomCount;                                   		// 0x059C ( 0x0004 ) 
	int                                                RoomStartIndex;                                   		// 0x05A0 ( 0x0004 ) 
	int                                                RoomPingIndex;                                    		// 0x05A4 ( 0x0004 ) 
	unsigned long                                      bJoinClanState:1;                                 		// 0x05A8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bClanInviteState:1;                               		// 0x05A8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bGoBack:1;                                        		// 0x05A8 ( 0x0004 )  [0x00000004]
	unsigned long                                      bGoTutorial:1;                                    		// 0x05A8 ( 0x0004 )  [0x00000008]
	struct FString                                     SaveRoomPassword;                                 		// 0x05AC ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTOwnerDrawImageHK*                         BGRoomList;                                       		// 0x05B8 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         BGImageAD2;                                       		// 0x05BC ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UTabControlMocker*                           TabControl;                                       		// 0x05C0 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTACLLobbyHK*                               ACLLobby;                                         		// 0x05C4 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTACLLobbyHK*                               ACLLobbyEnterable;                                		// 0x05C8 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	unsigned long                                      bAllRoomList:1;                                   		// 0x05CC ( 0x0004 )  [0x00000001]
	class UBTTPChatHK*                                 TPChat;                                           		// 0x05D0 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPMessengerHK*                            TPMessenger;                                      		// 0x05D4 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPMyInfoHK*                               TPMyInfo;                                         		// 0x05D8 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	struct FString                                     strDisconnectedChannel;                           		// 0x05DC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strListTop[ 0x0A ];                               		// 0x05E8 ( 0x0078 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strListBottom[ 0x05 ];                            		// 0x0660 ( 0x003C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllRoomList;                                   		// 0x069C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawCaptionButtonHK*                 ListTopButton[ 0x0A ];                            		// 0x06A8 ( 0x0028 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 ListBottomButton[ 0x05 ];                         		// 0x06D0 ( 0x0014 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         ListTopImage[ 0x0A ];                             		// 0x06E4 ( 0x0028 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   ListTopButtonPosition[ 0x0A ];                    		// 0x070C ( 0x00A0 ) 
	struct FFloatBox                                   ListBottomButtonPosition[ 0x05 ];                 		// 0x07AC ( 0x0050 ) 
	class UBTOwnerDrawCaptionButtonHK*                 ButtonAD;                                         		// 0x07FC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strMakeClanWarRoom;                               		// 0x0800 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strRegularClanWar;                                		// 0x080C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strFriendlyClanWar;                               		// 0x0818 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strButtonRegularClanWar;                          		// 0x0824 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strButtonFriendlyClanWar;                         		// 0x0830 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbButtonRegularClanWar;                           		// 0x083C ( 0x0010 ) 
	struct FFloatBox                                   fbButtonFriendlyClanWar;                          		// 0x084C ( 0x0010 ) 
	class UBTOwnerDrawCaptionButtonHK*                 ButtonRegularClanWar;                             		// 0x085C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonFriendlyClanWar;                            		// 0x0860 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UwMatchMaker*                                MatchMaker;                                       		// 0x0864 ( 0x0004 ) [ CPF_Transient ]
	struct FFloatBox                                   fbTestButton;                                     		// 0x0868 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTNuclearButtonHK*                          TestButton;                                       		// 0x0878 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< struct FString >                     DelFriendsList;                                   		// 0x087C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      bQuickJoin;                                       		// 0x0888 ( 0x0001 ) 
	int                                                MapIndex;                                         		// 0x088C ( 0x0004 ) 
	int                                                GameMode;                                         		// 0x0890 ( 0x0004 ) 
	int                                                WRestrict;                                        		// 0x0894 ( 0x0004 ) 
	struct FScriptDelegate                             __delegateAckEnterRoom__Delegate;                 		// 0x0898 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      rfNotifyClanLevelup ( struct FString ClanName, int Levelup );		//  GUIWarfare.BTPageLobby.rfNotifyClanLevelup
	 bool                      rfNotifyNewClanName ( struct FString New_NickName );		//  GUIWarfare.BTPageLobby.rfNotifyNewClanName
	 bool                      rfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		//  GUIWarfare.BTPageLobby.rfReqRecvClanInvite
	 bool                      rfNotifyNewNickName ( int Community_Type, struct FString Old_NickName, struct FString New_NickName );		//  GUIWarfare.BTPageLobby.rfNotifyNewNickName
	 bool                      rfAckGetRankingInfoListEnd (  );                  		//  GUIWarfare.BTPageLobby.rfAckGetRankingInfoListEnd
	 bool                      rfAckGetRankingInfoList ( int Result, unsigned char RankingType, unsigned char CommunityType, class TArray< struct FString > CharName, class TArray< int > CharLevel, class TArray< struct FString > ClanName, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Ranking_Accum, class TArray< int > Ranking_Accum_Prev, class TArray< int > Ranking_Accum_Exp, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageLobby.rfAckGetRankingInfoList
	 bool                      rfAckGetRankingInfoListStart ( int Result, unsigned char RankingType, unsigned char CommunityType, int TotalCount );		//  GUIWarfare.BTPageLobby.rfAckGetRankingInfoListStart
	 bool                      rfAckCharDetailInfo ( int MaxSerial, int MaxScore, int MaxKill, int MaxAssist, int Serial3, int Serial5, int Serial7, int Serial10, int Serial15, int AR, int SMG, int SR, int SW, int Melee, int Grenade, int FlashBang, int Foot, int AT4, int MG, int Fire, int RPG7, int TimeBomb, int IcendiaryBomb, int ClusterBomb, int ByChopper, int Artillery, int KillChopper, int FirstKill, int LastKill, int AllKill, int Dominate, int InstallBomb, int DefuseBomb );		//  GUIWarfare.BTPageLobby.rfAckCharDetailInfo
	 bool                      rfAckFriendPosition ( int Result, struct FString TargetCharName, unsigned char ServerType, struct FString fServername, struct FString fServerShortName, struct FString fServerIP, int fServerPort, unsigned char CurPos, unsigned char CurState, int ChannelNum, struct FString ChannelNickName, int GameRoomNum );		//  GUIWarfare.BTPageLobby.rfAckFriendPosition
	 bool                      rfAckMoveToLobby ( unsigned char MessageType );   		//  GUIWarfare.BTPageLobby.rfAckMoveToLobby
	 bool                      rfAckLogOut ( unsigned char Result, unsigned char Reason );		//  GUIWarfare.BTPageLobby.rfAckLogOut
	 bool                      rfAckClanMatch_PublicWaitRoomChanged ( int WaitRoomIdx, struct FString RoomName, int MapNum, int CurUserCount, int MaxUserCount, unsigned char Status, unsigned char IsPublic );		//  GUIWarfare.BTPageLobby.rfAckClanMatch_PublicWaitRoomChanged
	 bool                      rfAckClanMatch_EndPublicWaitRoomList (  );        		//  GUIWarfare.BTPageLobby.rfAckClanMatch_EndPublicWaitRoomList
	 bool                      rfAckClanMatch_PublicWaitRoomList ( class TArray< int > WaitRoomIdx, class TArray< struct FString > LeaderName, class TArray< struct FString > RoomName, class TArray< int > MapNum, class TArray< int > CurUserCount, class TArray< int > MaxUserCount, class TArray< unsigned char > Status );		//  GUIWarfare.BTPageLobby.rfAckClanMatch_PublicWaitRoomList
	 bool                      rfAckClanMatch_StartPublicWaitRoomList ( int Result, struct FString ErrMsg, int Count );		//  GUIWarfare.BTPageLobby.rfAckClanMatch_StartPublicWaitRoomList
	 bool                      rfAckNotifyEndTutorial ( int UserID, struct FString CharName, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageLobby.rfAckNotifyEndTutorial
	 bool                      rfAckNotifyStartTutorial ( int Result, int UserID );		//  GUIWarfare.BTPageLobby.rfAckNotifyStartTutorial
	 void                      RoomPingRefresh (  );                             		//  GUIWarfare.BTPageLobby.RoomPingRefresh
	 bool                      rfAckChangedRoomTitle_FromGM ( int Result, int RoomNumber, struct FString NewRoomTitle );		//  GUIWarfare.BTPageLobby.rfAckChangedRoomTitle_FromGM
	 bool                      IsEnterableRoom ( bool bPass, int nUser, int nMaxUser );		//  GUIWarfare.BTPageLobby.IsEnterableRoom
	 bool                      rfAckQuestGetAvailableEventList ( int Result, struct FString ErrMsg, class TArray< int > QuestID );		//  GUIWarfare.BTPageLobby.rfAckQuestGetAvailableEventList
	 void                      UpdateRecv_ClanInfo ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTPageLobby.UpdateRecv_ClanInfo
	 bool                      rfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageLobby.rfAckNotifyAdjustClanMemberGrade
	 bool                      rfAckAdjustClanMemberGrade ( int Result, struct FString ErrMsg, struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageLobby.rfAckAdjustClanMemberGrade
	 bool                      rfReqRecvDeleteFriend ( int Result, struct FString FromCharName );		//  GUIWarfare.BTPageLobby.rfReqRecvDeleteFriend
	 bool                      rfAckDeleteFriend ( int Result, class TArray< struct FString > FailedCharname );		//  GUIWarfare.BTPageLobby.rfAckDeleteFriend
	 bool                      rfAckChatWispher ( int Result, struct FString ErrMsg, struct FString ToCharName );		//  GUIWarfare.BTPageLobby.rfAckChatWispher
	 bool                      rfAckRecvJoinClanResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby.rfAckRecvJoinClanResult
	 bool                      rfAckJoinClanResult ( struct FString ClanName, unsigned char Permit, struct FString PermitCharName );		//  GUIWarfare.BTPageLobby.rfAckJoinClanResult
	 bool                      RefreshPage_OnOK ( class UGUIComponent* Sender ); 		//  GUIWarfare.BTPageLobby.RefreshPage_OnOK
	 bool                      BTWindowRequestApprovalClanHK_OnSuspend ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowRequestApprovalClanHK_OnSuspend
	 bool                      BTWindowRequestApprovalClanHK_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowRequestApprovalClanHK_OnCancel
	 bool                      BTWindowRequestApprovalClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowRequestApprovalClanHK_OnOK
	 bool                      rfReqRecvJoinClan ( int UserIdx, struct FString CharName, struct FString Message );		//  GUIWarfare.BTPageLobby.rfReqRecvJoinClan
	 bool                      rfAckNotifyClanSecession ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageLobby.rfAckNotifyClanSecession
	 bool                      rfAckNotifyNewClanMember ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageLobby.rfAckNotifyNewClanMember
	 bool                      rfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel );		//  GUIWarfare.BTPageLobby.rfAckSearchClan
	 bool                      rfAckInviteClanResult ( struct FString CharName, unsigned char Permit, struct FString ClanNm );		//  GUIWarfare.BTPageLobby.rfAckInviteClanResult
	 bool                      rfAckJoinClan ( int Result, struct FString ErrMsg, struct FString SpecificCharName, struct FString RealRecvCharName, unsigned char RealRecvCharClanGrade );		//  GUIWarfare.BTPageLobby.rfAckJoinClan
	 bool                      rfAckInviteClan ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby.rfAckInviteClan
	 bool                      BTWindowUserPersonalInfo_OnClanInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowUserPersonalInfo_OnClanInfo
	 bool                      BTWindowUserDetailInfoHK_OnClanInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowUserDetailInfoHK_OnClanInfo
	 bool                      rfReqClanCharPersonelIntro ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageLobby.rfReqClanCharPersonelIntro
	 bool                      rfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro );		//  GUIWarfare.BTPageLobby.rfAckClanCharPersonelIntro
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTPageLobby.rfAckDBCharInfo
	 bool                      MoveToClanPage_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.MoveToClanPage_OnOK
	 bool                      rfAckCreateClan ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTPageLobby.rfAckCreateClan
	 bool                      rfAckDupCheckClanName ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby.rfAckDupCheckClanName
	 bool                      rfAckGameRoomInfo ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		//  GUIWarfare.BTPageLobby.rfAckGameRoomInfo
	 bool                      rfReqCompleteFriendInvite ( struct FString CharnameToBeInvited, unsigned char IsPermit );		//  GUIWarfare.BTPageLobby.rfReqCompleteFriendInvite
	 bool                      rfAckConfirmFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby.rfAckConfirmFriendInvite
	 bool                      rfReqRecvFriendInvite ( int ReqUserID, struct FString ReqCharname, struct FString InviteMsg );		//  GUIWarfare.BTPageLobby.rfReqRecvFriendInvite
	 bool                      rfAckSendFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby.rfAckSendFriendInvite
	 bool                      rfReqExteriorRoomOwnerInfo ( int RoomNum, struct FString OwnerName, struct FString OwnerIP );		//  GUIWarfare.BTPageLobby.rfReqExteriorRoomOwnerInfo
	 bool                      rfReqExteriorRoomState ( int RoomNumber, unsigned char RoomState );		//  GUIWarfare.BTPageLobby.rfReqExteriorRoomState
	 bool                      rfReqExteriorRoomUserCount ( int RoomNumber, int RoomUserCount );		//  GUIWarfare.BTPageLobby.rfReqExteriorRoomUserCount
	 bool                      rfReqExteriorRoomInfo ( int SP, int RoomNumber, unsigned char IsPW, struct FString RoomName, struct FString MapName, struct FString ModeName, int MapNum, int ModeNum, unsigned char IsTeamBalance, int MaxUserCount, int RoomUserCount, unsigned char RoomState, unsigned char BotDifficult, unsigned char WeaponLimit, unsigned char BotModeUserTeamNum );		//  GUIWarfare.BTPageLobby.rfReqExteriorRoomInfo
	 void                      SetCharacterInfo ( struct FString ClanName, struct FCharInfo btCharInfo );		//  GUIWarfare.BTPageLobby.SetCharacterInfo
	 bool                      rfAckGameRoomDestroy ( int GameRoomNum );         		//  GUIWarfare.BTPageLobby.rfAckGameRoomDestroy
	 bool                      rfAckChannelUserList ( int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > UserID, class TArray< int > UserLevels, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, int Result, struct FString ErrMsg, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageLobby.rfAckChannelUserList
	 void                      TryEnterBotMode (  );                             		//  GUIWarfare.BTPageLobby.TryEnterBotMode
	 bool                      rfAckRoomList ( class TArray< int > GameNum, class TArray< struct FString > Title, class TArray< struct FString > MapName, class TArray< int > MapNum, class TArray< unsigned char > UserCount, class TArray< unsigned char > MaxCount, class TArray< struct FString > ModeName, class TArray< int > ModeNum, class TArray< unsigned char > WeaponLimit, class TArray< unsigned char > IsTeamBalance, class TArray< unsigned char > Status, class TArray< struct FString > RoomOwnerIP, class TArray< int > GameMinute, class TArray< struct FString > RoomOwnerName, class TArray< unsigned char > IsSpecial, class TArray< unsigned char > IsPassword, class TArray< unsigned char > BotDifficult, class TArray< unsigned char > BotModeUserTeamNum );		//  GUIWarfare.BTPageLobby.rfAckRoomList
	 bool                      rfAckRoomListStart ( int Result, int TotalCount, int Count, int StartIndex );		//  GUIWarfare.BTPageLobby.rfAckRoomListStart
	 bool                      rfAckEnterRoom ( int GameNum, int OwnerID, int UID, struct FString UserID, int TeamNum, int Grade, struct FString UserIP, struct FString ClanName, int Clan_Mark_Pattern, int Clan_Mark_BG, int Clan_Mark_BL, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageLobby.rfAckEnterRoom
	 bool                      rfAckLeaveChannel ( int Result, struct FString UserID, int UID );		//  GUIWarfare.BTPageLobby.rfAckLeaveChannel
	 bool                      LobbyToServerSelection (  );                      		//  GUIWarfare.BTPageLobby.LobbyToServerSelection
	 bool                      LobbyToServerSelection_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.LobbyToServerSelection_OnOK
	 bool                      rfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageLobby.rfAckEnterChannel
	 bool                      rfAckCreateGameRoom ( int Result, struct FString ErrMsg, int UserID, struct FString RoomOwnerIP, struct FGameRoomInfo NetRoomInfo );		//  GUIWarfare.BTPageLobby.rfAckCreateGameRoom
	 void                      TeamChatLog ( struct FString cL );                		//  GUIWarfare.BTPageLobby.TeamChatLog
	 void                      BroadCastItemChatLog ( struct FString cL );       		//  GUIWarfare.BTPageLobby.BroadCastItemChatLog
	 void                      SystemChatLog ( struct FString cL );              		//  GUIWarfare.BTPageLobby.SystemChatLog
	 void                      SelfChatLog ( struct FString cL );                		//  GUIWarfare.BTPageLobby.SelfChatLog
	 void                      WhisperChatLog ( struct FString cL );             		//  GUIWarfare.BTPageLobby.WhisperChatLog
	 void                      ClanChatLog ( struct FString cL );                		//  GUIWarfare.BTPageLobby.ClanChatLog
	 void                      NormalChatLog ( struct FString cL );              		//  GUIWarfare.BTPageLobby.NormalChatLog
	 void                      ClearChatLog (  );                                		//  GUIWarfare.BTPageLobby.ClearChatLog
	 void                      OnVisibleChannelListChanged ( int Index );        		//  GUIWarfare.BTPageLobby.OnVisibleChannelListChanged
	 bool                      InternalKeyType ( struct FString Unicode, unsigned char* key );		//  GUIWarfare.BTPageLobby.InternalKeyType
	 bool                      internalKeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  GUIWarfare.BTPageLobby.internalKeyEvent
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageLobby.InternalOnClose
	 void                      BTPageLobby_OnReceivedPing ( class UwMatchMaker* MM, struct FString fromAddr, int msec );		//  GUIWarfare.BTPageLobby.BTPageLobby_OnReceivedPing
	 void                      RefreshPage (  );                                 		//  GUIWarfare.BTPageLobby.RefreshPage
	 void                      UnInitializeDelegate (  );                        		//  GUIWarfare.BTPageLobby.UnInitializeDelegate
	 void                      InitializeDelegate (  );                          		//  GUIWarfare.BTPageLobby.InitializeDelegate
	 void                      UpdateWebzenItemList ( class UwGameManager* GameMgr );		//  GUIWarfare.BTPageLobby.UpdateWebzenItemList
	 void                      UpdateItemList ( class UwGameManager* GameMgr );  		//  GUIWarfare.BTPageLobby.UpdateItemList
	 void                      UpdateBlockList ( class UwMatchMaker* MM );       		//  GUIWarfare.BTPageLobby.UpdateBlockList
	 void                      UpdatePCBangList ( class UwMatchMaker* MM );      		//  GUIWarfare.BTPageLobby.UpdatePCBangList
	 void                      UpdateClanList ( class UwMatchMaker* MM );        		//  GUIWarfare.BTPageLobby.UpdateClanList
	 void                      UpdateFriendList ( class UwMatchMaker* MM );      		//  GUIWarfare.BTPageLobby.UpdateFriendList
	 void                      UpdateQuestList ( class UwMatchMaker* MM );       		//  GUIWarfare.BTPageLobby.UpdateQuestList
	 void                      UpdatePositionInfo ( class UwMatchMaker* MM );    		//  GUIWarfare.BTPageLobby.UpdatePositionInfo
	 void                      UpdatePCBangInfo ( class UwMatchMaker* MM );      		//  GUIWarfare.BTPageLobby.UpdatePCBangInfo
	 void                      UpdateRecv_CharInfo ( class UwMatchMaker* MM );   		//  GUIWarfare.BTPageLobby.UpdateRecv_CharInfo
	 void                      UpdateMoneyInfo ( class UwMatchMaker* MM );       		//  GUIWarfare.BTPageLobby.UpdateMoneyInfo
	 void                      UpdateEquipItemInfo ( class UwMatchMaker* MM );   		//  GUIWarfare.BTPageLobby.UpdateEquipItemInfo
	 void                      UpdateRankingInfo ( class UwMatchMaker* MM );     		//  GUIWarfare.BTPageLobby.UpdateRankingInfo
	 void                      UpdateClanInfo ( class UwMatchMaker* MM );        		//  GUIWarfare.BTPageLobby.UpdateClanInfo
	 void                      UpdateCharInfo ( class UwMatchMaker* MM );        		//  GUIWarfare.BTPageLobby.UpdateCharInfo
	 void                      OnCompleteOpened (  );                            		//  GUIWarfare.BTPageLobby.OnCompleteOpened
	 void                      OnBackToLastPage (  );                            		//  GUIWarfare.BTPageLobby.OnBackToLastPage
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageLobby.InternalOnOpen
	 bool                      BTWindowDefineARHK_46_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowDefineARHK_46_OnCancel
	 bool                      BTWindowDefineARHK_46_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowDefineARHK_46_OnOK
	 bool                      BTWindowDefineARHK_45_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowDefineARHK_45_OnCancel
	 bool                      BTWindowDefineARHK_45_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowDefineARHK_45_OnOK
	 bool                      BTWindowDefineARHK_22_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowDefineARHK_22_OnCancel
	 bool                      BTWindowDefineARHK_22_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowDefineARHK_22_OnOK
	 void                      StartTutorial ( struct FString Map );             		//  GUIWarfare.BTPageLobby.StartTutorial
	 bool                      BTWindowDefineARHK_43 ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowDefineARHK_43
	 void                      ShowTutorialWindow (  );                          		//  GUIWarfare.BTPageLobby.ShowTutorialWindow
	 void                      InternalOnReOpen (  );                            		//  GUIWarfare.BTPageLobby.InternalOnReOpen
	 bool                      rfAckProcessPreLoginUser ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby.rfAckProcessPreLoginUser
	 bool                      rfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		//  GUIWarfare.BTPageLobby.rfAckLoginInHouseTest
	 bool                      Exit_OnOK ( class UGUIComponent* Sender );        		//  GUIWarfare.BTPageLobby.Exit_OnOK
	 bool                      ForceDisconnect_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.ForceDisconnect_OnOK
	 void                      TcpLogin_OnConnect ( int ErrCode );               		//  GUIWarfare.BTPageLobby.TcpLogin_OnConnect
	 class UBTTcpLink_Login*   GetTcpLogin (  );                                 		//  GUIWarfare.BTPageLobby.GetTcpLogin
	 class UBTTcpLink_Channel* GetTcpChannel (  );                               		//  GUIWarfare.BTPageLobby.GetTcpChannel
	 bool                      Internal_OnPreDraw ( class UCanvas* C );          		//  GUIWarfare.BTPageLobby.Internal_OnPreDraw
	 bool                      TPMessenger_ButtonMsg_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.TPMessenger_ButtonMsg_OnClick
	 void                      TPMessenger_ACLMsg0_OnHitBottom ( int Top, int Count, int itemperpage );		//  GUIWarfare.BTPageLobby.TPMessenger_ACLMsg0_OnHitBottom
	 void                      ACLLobby_OnHitBottom ( int Top, int Count, int itemperpage );		//  GUIWarfare.BTPageLobby.ACLLobby_OnHitBottom
	 bool                      TestButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.TestButton_OnClick
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageLobby.InitComponent
	 bool                      MoveToRoom ( int Index );                         		//  GUIWarfare.BTPageLobby.MoveToRoom
	 bool                      AutoMoveReturnClanReadyRoom ( int RoomNum, struct FString Password );		//  GUIWarfare.BTPageLobby.AutoMoveReturnClanReadyRoom
	 bool                      AutoMoveToClanReadyRoom ( int RoomNum, struct FString Password );		//  GUIWarfare.BTPageLobby.AutoMoveToClanReadyRoom
	 bool                      AutoMoveToRoom ( int RoomNum, struct FString Password );		//  GUIWarfare.BTPageLobby.AutoMoveToRoom
	 bool                      OnLobby_DblClick ( class UGUIComponent* Sender ); 		//  GUIWarfare.BTPageLobby.OnLobby_DblClick
	 bool                      BTWindowPasswordHK_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowPasswordHK_OnCancel
	 bool                      BTWindowPasswordHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowPasswordHK_OnOK
	 bool                      rfAckEnterRoom_AfterJoinRoom ( int GameNum, int OwnerID, int UID, struct FString UserID, int TeamNum, int Grade, struct FString UserIP, struct FString ClanName, int Clan_Mark_Pattern, int Clan_Mark_BG, int Clan_Mark_BL, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageLobby.rfAckEnterRoom_AfterJoinRoom
	 bool                      rfAckEnterRoom_AfterCreateRoom ( int GameNum, int OwnerID, int UID, struct FString UserID, int TeamNum, int Grade, struct FString UserIP, struct FString ClanName, int Clan_Mark_Pattern, int Clan_Mark_BG, int Clan_Mark_BL, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageLobby.rfAckEnterRoom_AfterCreateRoom
	 bool                      rfAckClanMatch_Join ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby.rfAckClanMatch_Join
	 bool                      rfAckClanMatch_GetReady ( int Result, struct FString ErrMsg, int RoomIndex );		//  GUIWarfare.BTPageLobby.rfAckClanMatch_GetReady
	 bool                      BTWindowDefineSelectHK_23_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowDefineSelectHK_23_OnOK
	 bool                      ButtonRegularClanWar_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.ButtonRegularClanWar_OnClick
	 bool                      ButtonFriendlyClanWar_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.ButtonFriendlyClanWar_OnClick
	 void                      OpenBTWindowCreateRoom (  );                      		//  GUIWarfare.BTPageLobby.OpenBTWindowCreateRoom
	 bool                      OnBottomButton_Click ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.OnBottomButton_Click
	 void                      OnPopupPCBang ( int ContextMenuIndex, class UBTACLMessengerPCBangHK* acl );		//  GUIWarfare.BTPageLobby.OnPopupPCBang
	 void                      OnPopupPCBangCheck ( class UBTACLMessengerPCBangHK* acl, class UBTCMMessengerPCBangHK* cm );		//  GUIWarfare.BTPageLobby.OnPopupPCBangCheck
	 void                      OnPopupBan ( int ContextMenuIndex, class UBTACLMessengerBanHK* acl );		//  GUIWarfare.BTPageLobby.OnPopupBan
	 void                      OnPopupBanCheck ( class UBTACLMessengerBanHK* acl, class UBTCMMessengerBanHK* cm );		//  GUIWarfare.BTPageLobby.OnPopupBanCheck
	 void                      OnPopupClan ( int ContextMenuIndex, class UBTACLMessengerClanHK* acl );		//  GUIWarfare.BTPageLobby.OnPopupClan
	 void                      OnPopupClanCheck ( class UBTACLMessengerClanHK* acl, class UBTCMMessengerClanHK* cm );		//  GUIWarfare.BTPageLobby.OnPopupClanCheck
	 void                      OnPopupFriend ( int ContextMenuIndex, class UBTACLMessengerFriendHK* acl );		//  GUIWarfare.BTPageLobby.OnPopupFriend
	 void                      OnPopupFriendCheck ( class UBTACLMessengerFriendHK* acl, class UBTCMMessengerFriendHK* cm );		//  GUIWarfare.BTPageLobby.OnPopupFriendCheck
	 void                      OnPopupChannel ( int ContextMenuIndex, class UBTACLMessengerChannelHK* acl );		//  GUIWarfare.BTPageLobby.OnPopupChannel
	 void                      OnPopupChannelCheck ( class UBTACLMessengerChannelHK* acl, class UBTCMMessengerChannelHK* cm );		//  GUIWarfare.BTPageLobby.OnPopupChannelCheck
	 bool                      ProcessQuickEnter ( int MapIndex, int GameMode, int WRestrict, int botLevel );		//  GUIWarfare.BTPageLobby.ProcessQuickEnter
	 bool                      QuickEnter_OnOK (  );                             		//  GUIWarfare.BTPageLobby.QuickEnter_OnOK
	 bool                      BTWindowInviteClan_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowInviteClan_OnOK
	 bool                      WindowRequestFriend_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.WindowRequestFriend_OnCancel
	 bool                      WindowRequestFriend_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.WindowRequestFriend_OnOK
	 bool                      WindowInviteFriend_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.WindowInviteFriend_OnOK
	 bool                      BTWindowCreateRoom_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowCreateRoom_OnOK
	 bool                      BTWindowJoinClan_OK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowJoinClan_OK
	 bool                      BTWindowCreateClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowCreateClanHK_OnOK
	 bool                      BTWindowCreateClanNeedPointHK_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowCreateClanNeedPointHK_OnClick
	 bool                      ClanMenu_ButtonCreateClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.ClanMenu_ButtonCreateClan_OnClick
	 bool                      BTWindowFindClanHK_OnInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowFindClanHK_OnInfo
	 bool                      BTWindowFindClanHK_OnRequestJoin ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.BTWindowFindClanHK_OnRequestJoin
	 bool                      ClanMenu_ButtonFindClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.ClanMenu_ButtonFindClan_OnClick
	 bool                      ClanMenu_ButtonLookingForClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.ClanMenu_ButtonLookingForClan_OnClick
	 class UBTWindowCreateRoom* GetWindowCreateRoom (  );                         		//  GUIWarfare.BTPageLobby.GetWindowCreateRoom
	 bool                      TopButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.TopButton_OnClick
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobby.HeaderButton_OnClick
	 bool                      delegateAckEnterRoom ( int GameNum, int OwnerID, int UID, struct FString UserID, int TeamNum, int Grade, struct FString UserIP, struct FString ClanName, int Clan_Mark_Pattern, int Clan_Mark_BG, int Clan_Mark_BL, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageLobby.delegateAckEnterRoom
}; // Size: 0x0340

// Class GUIWarfare.BTPageServerSelection
class DLL_IMPORT UBTPageServerSelection : public UBTNetGUIPageHK
{
public:
	class TArray< class UClanNameAndMark* >            ClanMarkList;                                     		// 0x055C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UGUIPage*                                    SavePg;                                           		// 0x0568 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UCanvas*                                     SaveCanvas;                                       		// 0x056C ( 0x0004 ) 
	unsigned long                                      bButtonRefresh:1;                                 		// 0x0570 ( 0x0004 )  [0x00000001]
	int                                                SaveServerListIndex;                              		// 0x0574 ( 0x0004 ) 
	int                                                ToggleButCredit;                                  		// 0x0578 ( 0x0004 ) 
	float                                              CurrentTime;                                      		// 0x057C ( 0x0004 ) 
	float                                              LastRefreshTime;                                  		// 0x0580 ( 0x0004 ) 
	float                                              RefreshCycleTime;                                 		// 0x0584 ( 0x0004 ) 
	struct FString                                     currentBGM;                                       		// 0x0588 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FConnectingInfo                             ConnectingChannel;                                		// 0x0594 ( 0x001C ) [ CPF_NeedCtorLink ]
	struct FFloatBox                                   fbLabelBackground;                                		// 0x05B0 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelBackground;                                  		// 0x05C0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelBackgrounddeco;                            		// 0x05C4 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelBackgrounddeco;                              		// 0x05D4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelTopLine;                                   		// 0x05D8 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelTopLine;                                     		// 0x05E8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelLeftTopRoll;                               		// 0x05EC ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbLabelLeftTopRollSource;                         		// 0x05FC ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawSourceClipImageHK*               LabelLeftTopRoll;                                 		// 0x060C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelBottomLine;                                		// 0x0610 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTLabelNoticeHK*                            LabelBottomLine;                                  		// 0x0620 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonServerList[ 0x07 ];                         		// 0x0624 ( 0x001C ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTACLServerSelectionHK*                     ACLServerList[ 0x07 ];                            		// 0x0640 ( 0x001C ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UTabControlMocker*                           TabControl;                                       		// 0x065C ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPTopMenuSCHK*                            TPTopMenu;                                        		// 0x0660 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	struct FString                                     strButtonCredit;                                  		// 0x0664 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonCredit;                                     		// 0x0670 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 ChannelADSmall;                                   		// 0x0674 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 ChannelADLarge;                                   		// 0x0678 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonTemp;                                       		// 0x067C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonTemp2;                                      		// 0x0680 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         BGImageTotalServer;                               		// 0x0684 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FCheckToReceivedPacket                      CTRP;                                             		// 0x0688 ( 0x0004 ) 
	struct FString                                     strPCBangFriend;                                  		// 0x068C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     HashMessage;                                      		// 0x0698 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strCW_GameMode;                                   		// 0x06A4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonEnterCh;                                    		// 0x06B0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTACLGroutSelection*                        ServerList;                                       		// 0x06B4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTACLServerSelectionHK*                     ChannelList;                                      		// 0x06B8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned long                                      bDefaultServnChannel:1;                           		// 0x06BC ( 0x0004 )  [0x00000001]
	class UBTOwnerDrawImageHK*                         ChannelBg;                                        		// 0x06C0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbChannelBg;                                      		// 0x06C4 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	int                                                nIndexDefSrv;                                     		// 0x06D4 ( 0x0004 ) 
	int                                                nIndexDefCh;                                      		// 0x06D8 ( 0x0004 ) 
	unsigned char                                      iProcessExpiredStep;                              		// 0x06DC ( 0x0001 ) 

	// UScript Functions
	 bool                      rfNotifyCouponUseError ( int Time );              		//  GUIWarfare.BTPageServerSelection.rfNotifyCouponUseError
	 bool                      rfAckRecvClanInviteResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckRecvClanInviteResult
	 bool                      BTWindowRequestClanHK_OnSuspend ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BTWindowRequestClanHK_OnSuspend
	 bool                      BTWindowRequestClanHK_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BTWindowRequestClanHK_OnCancel
	 bool                      BTWindowRequestClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BTWindowRequestClanHK_OnOK
	 bool                      rfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		//  GUIWarfare.BTPageServerSelection.rfReqRecvClanInvite
	 bool                      rfReqNotifyShopItemDataEnd ( int Ver );           		//  GUIWarfare.BTPageServerSelection.rfReqNotifyShopItemDataEnd
	 bool                      rfReqNotifyShopItemData ( class TArray< int > ProductNo, class TArray< struct FString > ProductRowGuid, class TArray< struct FString > ServiceCode, class TArray< struct FString > ProductName, class TArray< struct FString > ProductCode, class TArray< struct FString > ProductType, class TArray< unsigned char > SaleType, class TArray< struct FString > ItemSaleType, class TArray< unsigned char > ISIncludeBonus, class TArray< int > ProductCost, class TArray< int > ProductHour, class TArray< int > ProductQuantity, class TArray< int > TotalQuantity, class TArray< int > ReOrderTerms, class TArray< int > ReorderCount, class TArray< int > PurchaseAvailableQuantity, class TArray< int > AvailableMinLevel, class TArray< int > AvailableMaxLevel, class TArray< unsigned char > AvailableGender, class TArray< int > InventoryKeepDays, class TArray< int > SaleMasterFlag, class TArray< int > SaleStatus, class TArray< struct FString > Description, class TArray< struct FString > Property0, class TArray< struct FString > Property1, class TArray< struct FString > Property2, class TArray< struct FString > Property3, class TArray< struct FString > Property4, class TArray< int > IsGift );		//  GUIWarfare.BTPageServerSelection.rfReqNotifyShopItemData
	 bool                      rfAckShopItemData (  );                           		//  GUIWarfare.BTPageServerSelection.rfAckShopItemData
	 bool                      rfAckLoginWithGlobal ( int Result );              		//  GUIWarfare.BTPageServerSelection.rfAckLoginWithGlobal
	 bool                      rfAckLoginWithThailand ( int Result );            		//  GUIWarfare.BTPageServerSelection.rfAckLoginWithThailand
	 bool                      rfAckLoginWithWZAuth ( int Result, unsigned char wzp_AccountType, unsigned char wzp_IsBlock, unsigned char wzp_AuthKeySuccess, unsigned char ChannelType );		//  GUIWarfare.BTPageServerSelection.rfAckLoginWithWZAuth
	 bool                      rfAckLoginWithTencentAuth ( int Result, unsigned char tc_AccountType, unsigned char tc_IsBlock );		//  GUIWarfare.BTPageServerSelection.rfAckLoginWithTencentAuth
	 bool                      rfAckEquipSkill ( int ChangedNewSkillID, int ChangedNewSkillUniqueID, unsigned char ChangedNewSlotPosition, int ChangedOldSkillID, int ChangedOldSkillUniqueID, unsigned char ChangedOldSlotPosition, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckEquipSkill
	 bool                      rfAckTencent_StartTenProtect ( int CharDBID );    		//  GUIWarfare.BTPageServerSelection.rfAckTencent_StartTenProtect
	 bool                      rfAckMoveToLobby ( unsigned char MessageType );   		//  GUIWarfare.BTPageServerSelection.rfAckMoveToLobby
	 bool                      eventrfAckPopUpMessage ( int MessageType );       		// [ FUNC_Event ] GUIWarfare.BTPageServerSelection.rfAckPopUpMessage
	 bool                      rfUpdateWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		//  GUIWarfare.BTPageServerSelection.rfUpdateWebzenShopScriptVersion
	 bool                      rfAckLogOut ( unsigned char Result, unsigned char Reason );		//  GUIWarfare.BTPageServerSelection.rfAckLogOut
	 bool                      rfAckServerType ( unsigned char Type );           		//  GUIWarfare.BTPageServerSelection.rfAckServerType
	 void                      Receive_EventGift ( int Index );                  		//  GUIWarfare.BTPageServerSelection.Receive_EventGift
	 bool                      rfAckRecvSystemMsg ( unsigned char CommunityType, struct FSystemMsgParam MsgInfo );		//  GUIWarfare.BTPageServerSelection.rfAckRecvSystemMsg
	 bool                      rfAckPaidItem_RelayBroadcast ( struct FString CharName, struct FString Msg );		//  GUIWarfare.BTPageServerSelection.rfAckPaidItem_RelayBroadcast
	 bool                      rfAckChatClan ( struct FString CharName, struct FString Message, int Result );		//  GUIWarfare.BTPageServerSelection.rfAckChatClan
	 bool                      rfReqRecvChatWispher ( struct FString CharnameFrom, struct FString Message );		//  GUIWarfare.BTPageServerSelection.rfReqRecvChatWispher
	 bool                      rfAckChatNormal ( int id, struct FString Sender, struct FString Message, int Result );		//  GUIWarfare.BTPageServerSelection.rfAckChatNormal
	 bool                      rfAckSetLookForClan ( int Result, struct FString ErrMsg, unsigned char IsLookingFor );		//  GUIWarfare.BTPageServerSelection.rfAckSetLookForClan
	 bool                      rfAckGetMyMailBoxState ( int Result, unsigned char IsFull, int NewMailCount );		//  GUIWarfare.BTPageServerSelection.rfAckGetMyMailBoxState
	 bool                      BTWindowDefineARHK_40_41_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BTWindowDefineARHK_40_41_OnOK
	 bool                      rfAckClientChecksum ( int Result );               		//  GUIWarfare.BTPageServerSelection.rfAckClientChecksum
	 bool                      rfAckClientChallenge ( struct FString Key1, struct FBtrDouble Key2 );		//  GUIWarfare.BTPageServerSelection.rfAckClientChallenge
	 void                      ChatBlockEndTime_OnEventTimer ( int Index );      		//  GUIWarfare.BTPageServerSelection.ChatBlockEndTime_OnEventTimer
	 void                      ChatBlockStartTime_OnEventTimer ( int Index );    		//  GUIWarfare.BTPageServerSelection.ChatBlockStartTime_OnEventTimer
	 bool                      rfAckCharBlockInfo ( int Result, struct FBtrDouble ChatBlockStartTime, struct FBtrDouble ChatBlockEndTime, class TArray< struct FBtrDouble > BlockedItemIdx );		//  GUIWarfare.BTPageServerSelection.rfAckCharBlockInfo
	 bool                      rfAckGMLeaveRoom ( int Result, int RoomNumber, int UserID );		//  GUIWarfare.BTPageServerSelection.rfAckGMLeaveRoom
	 bool                      rfAckGMEnterRoom ( int Result, int RoomNumber, int UserID );		//  GUIWarfare.BTPageServerSelection.rfAckGMEnterRoom
	 bool                      rfAckForceDisconnectUser_GM ( int Result, struct FString ErrMsg, struct FString CharName );		//  GUIWarfare.BTPageServerSelection.rfAckForceDisconnectUser_GM
	 bool                      rfAckNotice_GM ( int Result, struct FString ErrMsg, unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg );		//  GUIWarfare.BTPageServerSelection.rfAckNotice_GM
	 bool                      rfAckChangeRoomTitle_GM ( int Result, int RoomNumber, struct FString NewRoomTitle );		//  GUIWarfare.BTPageServerSelection.rfAckChangeRoomTitle_GM
	 bool                      rfAckPaidItem_NotifyChangeClanMark ( struct FString ClanName, int Pattern, int BG, int BL );		//  GUIWarfare.BTPageServerSelection.rfAckPaidItem_NotifyChangeClanMark
	 bool                      rfAckPaidItem_ChangeClanMark ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTPageServerSelection.rfAckPaidItem_ChangeClanMark
	 bool                      rfAckPaidItem_ClanMarkDupCheck ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckPaidItem_ClanMarkDupCheck
	 bool                      rfAckPaidItem_NotifyChangeClanname ( struct FString NewClanname );		//  GUIWarfare.BTPageServerSelection.rfAckPaidItem_NotifyChangeClanname
	 bool                      rfAckPaidItem_ChangeClanname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewClanname );		//  GUIWarfare.BTPageServerSelection.rfAckPaidItem_ChangeClanname
	 bool                      rfAckPaidItem_ChangeCharname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewCharname );		//  GUIWarfare.BTPageServerSelection.rfAckPaidItem_ChangeCharname
	 bool                      rfAckPaidItem_BroadCast ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTPageServerSelection.rfAckPaidItem_BroadCast
	 bool                      rfAckPaidItem_EraseRecord ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int Command, int RemainCount );		//  GUIWarfare.BTPageServerSelection.rfAckPaidItem_EraseRecord
	 bool                      rfAckWebzenBillingUseStorageItem ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID, struct FBtrDouble ItemExtra );		//  GUIWarfare.BTPageServerSelection.rfAckWebzenBillingUseStorageItem
	 bool                      rfAckWebzenBillingStorageListEnd (  );            		//  GUIWarfare.BTPageServerSelection.rfAckWebzenBillingStorageListEnd
	 bool                      rfAckWebzenBillingStorageList ( class TArray< int > Seq, class TArray< int > ItemSeq, class TArray< int > GroupCode, class TArray< int > ShareFlag, class TArray< int > ProductSeq, class TArray< struct FString > CashName, class TArray< struct FBtrDouble > CashPoint, class TArray< struct FString > SendAccountID, class TArray< struct FString > SendMessage, class TArray< unsigned char > ItemType, class TArray< unsigned char > RelationType, class TArray< int > ProductType, class TArray< int > PriceSeq );		//  GUIWarfare.BTPageServerSelection.rfAckWebzenBillingStorageList
	 bool                      rfAckWebzenBillingStorageListStart ( int Result, struct FString ErrMsg, int TotalCount, int TotalPage, int CurPage );		//  GUIWarfare.BTPageServerSelection.rfAckWebzenBillingStorageListStart
	 bool                      rfAckRemoveBlockUserList ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckRemoveBlockUserList
	 bool                      rfAckAddBlockUserList ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckAddBlockUserList
	 bool                      rfAckEquipItem ( int ChangedNewItemID, struct FBtrDouble ChangedNewUniqueID, int ChangedNewSlotPosition, int ChangedOldItemID, struct FBtrDouble ChangedOldUniqueID, int ChangedOldSlotPosition, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckEquipItem
	 bool                      rfAckRandomBox_Use ( int Result, struct FString ErrMsg, struct FBtrDouble RandomBoxItemIdx, int RandomBxoItemCount, class TArray< int > ItemIDChoose, class TArray< int > PartIDChoose, class TArray< int > PeriodOnChoosenItem, class TArray< int > StackCountOnChoosenItem, class TArray< unsigned char > bHave, class TArray< struct FBtrDouble > ItemIdx, class TArray< struct FBtrDouble > UntilTime, class TArray< int > StackCount );		//  GUIWarfare.BTPageServerSelection.rfAckRandomBox_Use
	 bool                      BTWindowRandBoxHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BTWindowRandBoxHK_OnOK
	 bool                      rfAckBlockUserList ( class TArray< struct FString > CharName );		//  GUIWarfare.BTPageServerSelection.rfAckBlockUserList
	 bool                      rfAckBlockUserListEnd (  );                       		//  GUIWarfare.BTPageServerSelection.rfAckBlockUserListEnd
	 bool                      rfAckBlockUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageServerSelection.rfAckBlockUserListStart
	 bool                      rfAckPCBangUserListEnd (  );                      		//  GUIWarfare.BTPageServerSelection.rfAckPCBangUserListEnd
	 bool                      rfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, class TArray< unsigned char > IsCombat, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageServerSelection.rfAckPCBangUserList
	 bool                      rfAckPCBangUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageServerSelection.rfAckPCBangUserListStart
	 bool                      rfAckFriendListEnd (  );                          		//  GUIWarfare.BTPageServerSelection.rfAckFriendListEnd
	 bool                      rfAckFriendList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > LevelMarkID, class TArray< int > ClanLevel, class TArray< int > Level, class TArray< unsigned char > IsLookForClan );		//  GUIWarfare.BTPageServerSelection.rfAckFriendList
	 bool                      rfAckFriendListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageServerSelection.rfAckFriendListStart
	 bool                      rfAckClanUserListEnd (  );                        		//  GUIWarfare.BTPageServerSelection.rfAckClanUserListEnd
	 bool                      rfAckClanUserList ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< int > ClanWinCnt, class TArray< int > ClanLoseCnt, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > DudeId );		//  GUIWarfare.BTPageServerSelection.rfAckClanUserList
	 bool                      rfAckClanUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageServerSelection.rfAckClanUserListStart
	 bool                      rfAckRegisterMainPCBang ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckRegisterMainPCBang
	 bool                      rfReqIsPaidWebzenPCBang ( unsigned char IsPaid ); 		//  GUIWarfare.BTPageServerSelection.rfReqIsPaidWebzenPCBang
	 bool                      rfAckClanInfo ( struct FClanInfo stClanInfo );    		//  GUIWarfare.BTPageServerSelection.rfAckClanInfo
	 bool                      rfAckCharInfo ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FCharInfo stCharInfo, unsigned char InClanRank, int ClanLevel );		//  GUIWarfare.BTPageServerSelection.rfAckCharInfo
	 bool                      rfAckRegisteredPCBangInfo ( int Result, struct FString ErrMsg, unsigned char IsRegisteredPCBang, unsigned char IsMainPCBang, struct FString PCBangName );		//  GUIWarfare.BTPageServerSelection.rfAckRegisteredPCBangInfo
	 bool                      rfAckWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		//  GUIWarfare.BTPageServerSelection.rfAckWebzenShopScriptVersion
	 bool                      rfAckMyMoney ( int Result, struct FString ErrMsg, int Point, int Cash );		//  GUIWarfare.BTPageServerSelection.rfAckMyMoney
	 bool                      rfAckBuyItemByWebzenCash ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckBuyItemByWebzenCash
	 bool                      rfAckWebzenCash ( int Result, struct FString ErrMsg, struct FBtrDouble PCoinCash, struct FBtrDouble CCoinCash );		//  GUIWarfare.BTPageServerSelection.rfAckWebzenCash
	 bool                      rfReqDailyQuestNewAvailable ( class TArray< int > ExpiredQuestID, class TArray< int > NewQuestID );		//  GUIWarfare.BTPageServerSelection.rfReqDailyQuestNewAvailable
	 bool                      rfReqQuestNewAvailable ( class TArray< int > AchivedQuestID, class TArray< int > NewQuestID, class TArray< unsigned char > IsDailyQuest, class TArray< int > ExpiredQuest );		//  GUIWarfare.BTPageServerSelection.rfReqQuestNewAvailable
	 bool                      rfAckQuestUpdate ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckQuestUpdate
	 bool                      rfAckQuestListEnd (  );                           		//  GUIWarfare.BTPageServerSelection.rfAckQuestListEnd
	 bool                      rfAckQuestList ( class TArray< int > QuestID, class TArray< int > CountPrograss, class TArray< unsigned char > IsDailyQuest );		//  GUIWarfare.BTPageServerSelection.rfAckQuestList
	 bool                      rfAckQuestListStart ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckQuestListStart
	 bool                      rfAckLimitedListInChannel ( int Result, class TArray< int > LimitedMapID, class TArray< int > LimitedModeID );		//  GUIWarfare.BTPageServerSelection.rfAckLimitedListInChannel
	 bool                      rfReqClanMatch_InviteCrewResult ( struct FString Invitee, int Result );		//  GUIWarfare.BTPageServerSelection.rfReqClanMatch_InviteCrewResult
	 bool                      BTWindowInviteClanWarGameHK_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BTWindowInviteClanWarGameHK_OnCancel
	 bool                      BTWindowInviteClanWarGameHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BTWindowInviteClanWarGameHK_OnOK
	 bool                      rfReqClanMatch_RecvInviteCrew ( struct FString Inviter, struct FString ServerIP, int Port, int WaittingID, struct FString Msg, int MapNum, int InviteUserChannelNum, struct FString LeaderName, struct FString RoomName );		//  GUIWarfare.BTPageServerSelection.rfReqClanMatch_RecvInviteCrew
	 bool                      rfAckClanMatch_InviteCrew ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckClanMatch_InviteCrew
	 bool                      rfAckRecvInviteGameRoomResult ( int Result );     		//  GUIWarfare.BTPageServerSelection.rfAckRecvInviteGameRoomResult
	 bool                      BTWindowInviteGameHK_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BTWindowInviteGameHK_OnCancel
	 bool                      BTWindowInviteGameHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BTWindowInviteGameHK_OnOK
	 bool                      rfReqRecvInviteGameRoom ( struct FString InviteUserServerName, int InviteUserServerID, int InviteUserChannelNumber, struct FString RoomUniqueID, int RoomNumber, struct FString RoomName, unsigned char RoomState, struct FString MapName, struct FString OwnerName, unsigned char GameMode, unsigned char WeaponLimit, unsigned char IsTeamBalance, struct FString Password, struct FString InviteCharName );		//  GUIWarfare.BTPageServerSelection.rfReqRecvInviteGameRoom
	 bool                      rfAckInviteGameRoom ( int Result, unsigned char Answer, struct FString GuestCharName );		//  GUIWarfare.BTPageServerSelection.rfAckInviteGameRoom
	 bool                      rfAckCharInfoFromLoginServer ( int Result, struct FString CharName, int Level, int Exp, struct FString ClanName );		//  GUIWarfare.BTPageServerSelection.rfAckCharInfoFromLoginServer
	 bool                      BTWindowItemBoxHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BTWindowItemBoxHK_OnOK
	 bool                      rfAckItemListInItemBox ( int Result, struct FString ErrMsg, struct FBtrDouble ItemUniqueID, int BoxItemID, class TArray< int > ItemID, class TArray< int > PartID );		//  GUIWarfare.BTPageServerSelection.rfAckItemListInItemBox
	 bool                      Internal_OnPreDraw ( class UCanvas* C );          		//  GUIWarfare.BTPageServerSelection.Internal_OnPreDraw
	 bool                      rfAckGetServerTime ( struct FBtrDouble ServerTime, struct FString ClientIP );		//  GUIWarfare.BTPageServerSelection.rfAckGetServerTime
	 bool                      rfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		//  GUIWarfare.BTPageServerSelection.rfAckLoginInHouseTest
	 bool                      rfAckExceedMaxUser (  );                          		//  GUIWarfare.BTPageServerSelection.rfAckExceedMaxUser
	 bool                      BackToServerSelection_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BackToServerSelection_OnClick
	 bool                      rfReqRecvForceDisconnected_FromGM ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfReqRecvForceDisconnected_FromGM
	 bool                      rfReqRecvNotice_FromGM ( int Result, struct FString ErrMsg, class TArray< struct FString > NoticeMsg, unsigned char IsFromDB );		//  GUIWarfare.BTPageServerSelection.rfReqRecvNotice_FromGM
	 bool                      rfAckRepairItem ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, int RepairCost, class TArray< int > DamageDegree );		//  GUIWarfare.BTPageServerSelection.rfAckRepairItem
	 bool                      rfAckRepairCost ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > RepairCost );		//  GUIWarfare.BTPageServerSelection.rfAckRepairCost
	 bool                      rfReqNotifyDurabilityZeroItem ( int Result, struct FString ErrMsg, int UserID, class TArray< struct FBtrDouble > ItemUniqueIDs, class TArray< int > ItemIDs, class TArray< int > ItemPartIDs, class TArray< unsigned char > ItemSlotPos );		//  GUIWarfare.BTPageServerSelection.rfReqNotifyDurabilityZeroItem
	 bool                      BTWindowBuyShopItem_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BTWindowBuyShopItem_OnOK
	 bool                      rfAckUpdateQSlot ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckUpdateQSlot
	 bool                      rfAckBuyShopItem ( int ItemCount, class TArray< int > Result, class TArray< int > BoughtItemTypeID, class TArray< struct FBtrDouble > BoughtItemUniqueID, class TArray< int > BoughtPartID, class TArray< struct FBtrDouble > BoughtUntilTIme, class TArray< int > BoughtStackCnt, int PointRemain, int CashRemain );		//  GUIWarfare.BTPageServerSelection.rfAckBuyShopItem
	 bool                      BTWindowItemExpiredHK_OnOK_CheckDurX ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BTWindowItemExpiredHK_OnOK_CheckDurX
	 bool                      rfAckNotifyExpiredSkillIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredSkillUniqueIDs, class TArray< int > ExpiredSkillIDs, int Result, struct FString ErrMsg, class TArray< unsigned char > ExpiredSkillSlotPositions );		//  GUIWarfare.BTPageServerSelection.rfAckNotifyExpiredSkillIDs
	 bool                      rfAckNotifyExpiredItemIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredItemUniqueIDs, class TArray< int > ExpiredItemIDs, class TArray< int > ExpiredItemPartIDs, class TArray< unsigned char > ExpiredItemSlotPos, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckNotifyExpiredItemIDs
	 bool                      rfReqNotifyRelayServerAddr ( struct FString RelayIP, int RelayPort );		//  GUIWarfare.BTPageServerSelection.rfReqNotifyRelayServerAddr
	 bool                      rfAckHash_BTWindowErrorDefineHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.rfAckHash_BTWindowErrorDefineHK_OnOK
	 bool                      rfAckHash ( int Result, struct FString Error );   		//  GUIWarfare.BTPageServerSelection.rfAckHash
	 void                      CheckToSetPageLobby (  );                         		//  GUIWarfare.BTPageServerSelection.CheckToSetPageLobby
	 bool                      rfAckServerTime ( int Time );                     		//  GUIWarfare.BTPageServerSelection.rfAckServerTime
	 bool                      rfAckQSlotList ( int Result, struct FString ErrMsg, class TArray< int > QSlotID, class TArray< struct FString > QSlotName, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWItemID, class TArray< struct FBtrDouble > PistolItemID, class TArray< struct FBtrDouble > TWItemID1, class TArray< struct FBtrDouble > TWItemID2, class TArray< int > Skill1, class TArray< int > Skill2, class TArray< int > Skill3, class TArray< int > Skill4 );		//  GUIWarfare.BTPageServerSelection.rfAckQSlotList
	 bool                      rfAckUserSkillListEnd (  );                       		//  GUIWarfare.BTPageServerSelection.rfAckUserSkillListEnd
	 bool                      rfAckUserSkillList ( class TArray< int > UniqueSkillID, class TArray< int > SkillID, class TArray< struct FBtrDouble > UntilTime, class TArray< unsigned char > SlotPosition );		//  GUIWarfare.BTPageServerSelection.rfAckUserSkillList
	 bool                      rfAckUserSkillListStart ( int Count, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckUserSkillListStart
	 bool                      rfAckItemListEnd (  );                            		//  GUIWarfare.BTPageServerSelection.rfAckItemListEnd
	 bool                      rfAckItemList ( class TArray< struct FBtrDouble > UniqueID, class TArray< int > ItemID, class TArray< int > ItemType, class TArray< int > Durability, class TArray< struct FBtrDouble > UntilTime, class TArray< int > SlotPosition, class TArray< int > AddPartsID, class TArray< int > DamageDegree, class TArray< unsigned char > ItemState, class TArray< int > StackCount, class TArray< int > PaintID, class TArray< int > TradeCount );		//  GUIWarfare.BTPageServerSelection.rfAckItemList
	 bool                      rfAckItemListStart ( int Count, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection.rfAckItemListStart
	 bool                      rfAckLogin2 ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FBtrDouble CurServerTime, int CharDBID, unsigned char IsGM );		//  GUIWarfare.BTPageServerSelection.rfAckLogin2
	 bool                      rfAckLeaveChannel ( int Result, struct FString UserID, int UID );		//  GUIWarfare.BTPageServerSelection.rfAckLeaveChannel
	 bool                      rfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageServerSelection.rfAckEnterChannel
	 bool                      Exit_OnOK ( class UGUIComponent* Sender );        		//  GUIWarfare.BTPageServerSelection.Exit_OnOK
	 void                      TcpChannel_OnError ( int ErrCode );               		//  GUIWarfare.BTPageServerSelection.TcpChannel_OnError
	 void                      TcpChannel_OnClose ( int ErrCode );               		//  GUIWarfare.BTPageServerSelection.TcpChannel_OnClose
	 void                      TcpChannel_OnConnect ( int ErrCode );             		//  GUIWarfare.BTPageServerSelection.TcpChannel_OnConnect
	 void                      TcpLogin_OnConnect ( int ErrCode );               		//  GUIWarfare.BTPageServerSelection.TcpLogin_OnConnect
	 void                      NewDrawServerSelection ( class TArray< struct FString > CServername, class TArray< struct FString > CServerShortName, class TArray< struct FString > ServerIP, class TArray< int > serverPort, class TArray< struct FString > ChannelName, class TArray< struct FString > ChannelNickName, class TArray< int > ChannelNum, class TArray< int > chMaxUser, class TArray< int > chCurUser, class TArray< struct FString > ServerGroupName, class TArray< int > ServerGroupID, class TArray< int > ServerDispOrder, class TArray< int > DataPort, class TArray< unsigned char > OptionCount_byte, class TArray< unsigned char > OptionKey_byte, class TArray< unsigned char > OptionValue_byte, class TArray< unsigned char > OptionCount_int, class TArray< unsigned char > OptionKey_int, class TArray< int > OptionValue_int, class TArray< unsigned char > OptionCount_float, class TArray< unsigned char > OptionKey_float, class TArray< float > OptionValue_float, class TArray< unsigned char > IsClanChannel, class TArray< unsigned char > IsUseDedicateHost );		//  GUIWarfare.BTPageServerSelection.NewDrawServerSelection
	 bool                      rfAckServerListFromLoginServer ( class TArray< struct FString > CServername, class TArray< struct FString > CServerShortName, class TArray< struct FString > ServerIP, class TArray< int > serverPort, class TArray< struct FString > ChannelName, class TArray< struct FString > ChannelNickName, class TArray< int > ChannelNum, class TArray< int > chMaxUser, class TArray< int > chCurUser, class TArray< struct FString > ServerGroupName, class TArray< int > ServerGroupID, class TArray< int > ServerDispOrder, class TArray< int > DataPort, class TArray< unsigned char > OptionCount_byte, class TArray< unsigned char > OptionKey_byte, class TArray< unsigned char > OptionValue_byte, class TArray< unsigned char > OptionCount_int, class TArray< unsigned char > OptionKey_int, class TArray< int > OptionValue_int, class TArray< unsigned char > OptionCount_float, class TArray< unsigned char > OptionKey_float, class TArray< float > OptionValue_float, class TArray< unsigned char > IsClanChannel, class TArray< unsigned char > IsUseDedicateHost );		//  GUIWarfare.BTPageServerSelection.rfAckServerListFromLoginServer
	 void                      MoveToChannel ( class UBTACLServerSelectionHK* serverACL );		//  GUIWarfare.BTPageServerSelection.MoveToChannel
	 void                      FirstShowChannelList (  );                        		//  GUIWarfare.BTPageServerSelection.FirstShowChannelList
	 void                      ShowChannelList ( class UBTACLGroutSelection* serverACL );		//  GUIWarfare.BTPageServerSelection.ShowChannelList
	 void                      NewMoveToChannel ( class UBTACLServerSelectionHK* serverACL );		//  GUIWarfare.BTPageServerSelection.NewMoveToChannel
	 void                      AutoMoveTochannel ( int ServerID, int ChannelID );		//  GUIWarfare.BTPageServerSelection.AutoMoveTochannel
	 void                      AutoMoveAtFirstLogin (  );                        		//  GUIWarfare.BTPageServerSelection.AutoMoveAtFirstLogin
	 void                      OnVisibleChannelListChanged ( int Index );        		//  GUIWarfare.BTPageServerSelection.OnVisibleChannelListChanged
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageServerSelection.InternalOnClose
	 void                      RefreshVisibleSet (  );                           		//  GUIWarfare.BTPageServerSelection.RefreshVisibleSet
	 void                      RefreshPage (  );                                 		//  GUIWarfare.BTPageServerSelection.RefreshPage
	 void                      UnInitializeDelegate (  );                        		//  GUIWarfare.BTPageServerSelection.UnInitializeDelegate
	 void                      InitializeDelegate (  );                          		//  GUIWarfare.BTPageServerSelection.InitializeDelegate
	 void                      TestTestTest (  );                                		//  GUIWarfare.BTPageServerSelection.TestTestTest
	 void                      CMDHK ( int Index, struct FString Param1, struct FString Param2, struct FString param3 );		//  GUIWarfare.BTPageServerSelection.CMDHK
	 void                      LogControllerInfo (  );                           		//  GUIWarfare.BTPageServerSelection.LogControllerInfo
	 void                      LogMenuStack (  );                                		//  GUIWarfare.BTPageServerSelection.LogMenuStack
	 void                      OnBackToLastPage (  );                            		//  GUIWarfare.BTPageServerSelection.OnBackToLastPage
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageServerSelection.InternalOnOpen
	 void                      InternalOnReOpen (  );                            		//  GUIWarfare.BTPageServerSelection.InternalOnReOpen
	 void                      DefaultSvrnChSelect (  );                         		//  GUIWarfare.BTPageServerSelection.DefaultSvrnChSelect
	 void                      ApplyLocalizedString (  );                        		//  GUIWarfare.BTPageServerSelection.ApplyLocalizedString
	 bool                      BTWIndowTodayResultHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.BTWIndowTodayResultHK_OnOK
	 bool                      ButtonTemp2_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.ButtonTemp2_OnClick
	 bool                      ButtonTemp_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.ButtonTemp_OnClick
	 void                      Event3_Timer ( int Index );                       		//  GUIWarfare.BTPageServerSelection.Event3_Timer
	 void                      Event0_Timer ( int Index );                       		//  GUIWarfare.BTPageServerSelection.Event0_Timer
	 void                      gameMgr_UpdateEventTimer ( int EventType, struct FBtrDouble EventTime );		//  GUIWarfare.BTPageServerSelection.gameMgr_UpdateEventTimer
	 bool                      ButtonCredit_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.ButtonCredit_OnClick
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageServerSelection.InitComponent
	 class UBTOwnerDrawCaptionButtonHK* NewButtonComponent ( struct FFloatBox fbNewCompo, float RenderWeight );		//  GUIWarfare.BTPageServerSelection.NewButtonComponent
	 class UBTOwnerDrawImageHK* NewLabelComponent ( struct FFloatBox fbNewCompo, struct FImage bgImg, float RenderWeight );		//  GUIWarfare.BTPageServerSelection.NewLabelComponent
	 void                      ExitGame (  );                                    		//  GUIWarfare.BTPageServerSelection.ExitGame
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelection.HeaderButton_OnClick
	 class UBTTcpLink_Login*   GetTcpLogin (  );                                 		//  GUIWarfare.BTPageServerSelection.GetTcpLogin
	 class UBTTcpLink_Channel* GetTcpChannel (  );                               		//  GUIWarfare.BTPageServerSelection.GetTcpChannel
}; // Size: 0x0184

// Class GUIWarfare.BTPageMatchResult
class DLL_IMPORT UBTPageMatchResult : public UBTNetGUIPageHK
{
public:
	unsigned long                                      bPrecachingRender:1;                              		// 0x055C ( 0x0004 )  [0x00000001]
	class ABTROModelWeapon*                            romodelweapon1;                                   		// 0x0560 ( 0x0004 ) 
	class ABTROModelWeapon*                            romodelweapon2;                                   		// 0x0564 ( 0x0004 ) 
	class ABTROModelNew*                               romodelnew;                                       		// 0x0568 ( 0x0004 ) 
	float                                              ButtonCloseEnableTime;                            		// 0x056C ( 0x0004 ) 
	float                                              DefaultButtonCloseEnableTime;                     		// 0x0570 ( 0x0004 ) 
	struct FString                                     strButtonClose;                                   		// 0x0574 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bCanClose:1;                                      		// 0x0580 ( 0x0004 )  [0x00000001]
	class AGameInfo*                                   GI;                                               		// 0x0584 ( 0x0004 ) [ CPF_Transient ]
	class UwMatchMaker*                                MM;                                               		// 0x0588 ( 0x0004 ) [ CPF_Transient ]
	struct FFloatBox                                   fbLabelBottomLine;                                		// 0x058C ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelBottomLine;                                  		// 0x059C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbButtonClose;                                    		// 0x05A0 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonClose;                                      		// 0x05B0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbTPResult;                                       		// 0x05B4 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPMatchResultCommonHK*                    TPResultCommon;                                   		// 0x05C4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTTPMatchResultPrivateHK*                   TPResultPrivate;                                  		// 0x05C8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbBGDeco;                                         		// 0x05CC ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         BGDeco;                                           		// 0x05DC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbTopBg;                                          		// 0x05E0 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         TopBg;                                            		// 0x05F0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 class UBTTcpLink_Channel* GetTcpChannel (  );                               		//  GUIWarfare.BTPageMatchResult.GetTcpChannel
	 bool                      InternalOnPreDraw ( class UCanvas* C );           		//  GUIWarfare.BTPageMatchResult.InternalOnPreDraw
	 bool                      internalKeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  GUIWarfare.BTPageMatchResult.internalKeyEvent
	 bool                      InternalOnCanClose ( bool bCancelled );           		//  GUIWarfare.BTPageMatchResult.InternalOnCanClose
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageMatchResult.InternalOnClose
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageMatchResult.InternalOnOpen
	 void                      UnInitializeDelegate (  );                        		//  GUIWarfare.BTPageMatchResult.UnInitializeDelegate
	 void                      InitializeDelegate (  );                          		//  GUIWarfare.BTPageMatchResult.InitializeDelegate
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.HeaderButton_OnClick
	 void                      UpdateRecv_CharInfo ( class UwMatchMaker* MM );   		//  GUIWarfare.BTPageMatchResult.UpdateRecv_CharInfo
	 void                      UpdateItemList ( class UwGameManager* GameMgr );  		//  GUIWarfare.BTPageMatchResult.UpdateItemList
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageMatchResult.InitComponent
	 bool                      ButtonClose_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.ButtonClose_OnClick
	 bool                      BTWindowTrophyHK_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.BTWindowTrophyHK_OnCancel
	 bool                      BTWindowTrophyHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.BTWindowTrophyHK_OnOK
	 bool                      BTWindowAlreadyGotTrophyHK_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.BTWindowAlreadyGotTrophyHK_OnCancel
	 bool                      BTWindowAlreadyGotTrophyHK_OnMail ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.BTWindowAlreadyGotTrophyHK_OnMail
	 bool                      BTWindowAlreadyGotTrophyHK_OnInventory ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.BTWindowAlreadyGotTrophyHK_OnInventory
	 bool                      SameWeaponAddTime_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.SameWeaponAddTime_OnCancel
	 bool                      SameWeaponAddTime_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.SameWeaponAddTime_OnOK
	 bool                      SameWeaponAddCount_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.SameWeaponAddCount_OnCancel
	 bool                      SameWeaponAddCount_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.SameWeaponAddCount_OnOK
	 bool                      SameWeapon_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.SameWeapon_OnCancel
	 bool                      SameWeapon_OnOK ( class UGUIComponent* Sender );  		//  GUIWarfare.BTPageMatchResult.SameWeapon_OnOK
	 void                      NeedUpdate (  );                                  		//  GUIWarfare.BTPageMatchResult.NeedUpdate
	 bool                      BTWindowTrophyHK_OpenMenu ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.BTWindowTrophyHK_OpenMenu
	 bool                      BTWindowPromotionToTrophy_OpenMenu ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.BTWindowPromotionToTrophy_OpenMenu
	 bool                      BTWindowQuestInfoToTrophy_OpenMenu ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.BTWindowQuestInfoToTrophy_OpenMenu
	 bool                      BTWindowQuestInfoHK_OpenMenu ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.BTWindowQuestInfoHK_OpenMenu
	 bool                      BTWindowPromotionToQuestInfo_OpenMenu ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.BTWindowPromotionToQuestInfo_OpenMenu
	 bool                      BTWindowNoUpdateQuestHK_OpenMenu ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.BTWindowNoUpdateQuestHK_OpenMenu
	 bool                      BTWindowPromotionToNoUpdateQuestHK_OpenMenu ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMatchResult.BTWindowPromotionToNoUpdateQuestHK_OpenMenu
	 void                      MatchReultPostStep (  );                          		//  GUIWarfare.BTPageMatchResult.MatchReultPostStep
}; // Size: 0x0098

// Class GUIWarfare.BTPageAuction
class DLL_IMPORT UBTPageAuction : public UBTNetGUIPageHK
{
public:
	unsigned long                                      bChangePage:1;                                    		// 0x055C ( 0x0004 )  [0x00000001]
	float                                              LastRefreshTime[ 0x02 ];                          		// 0x0560 ( 0x0008 ) 
	float                                              RefreshCycleTime[ 0x02 ];                         		// 0x0568 ( 0x0008 ) 
	struct FString                                     strSuccessAuctionCancel;                          		// 0x0570 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FBtrDouble >                  MyAuctionItemUniqueID;                            		// 0x057C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strSuccessBidding[ 0x02 ];                        		// 0x0588 ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                SavePageNum;                                      		// 0x05A0 ( 0x0004 ) 
	class UwGameManager*                               GameMgr;                                          		// 0x05A4 ( 0x0004 ) 
	class UwMyPlayerStatus*                            MyStatus;                                         		// 0x05A8 ( 0x0004 ) 
	struct FFloatBox                                   fbLabelPoint;                                     		// 0x05AC ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbLabelCash;                                      		// 0x05BC ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelPoint;                                       		// 0x05CC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelCash;                                        		// 0x05D0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelP;                                         		// 0x05D4 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbLabelC;                                         		// 0x05E4 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelP;                                           		// 0x05F4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelC;                                           		// 0x05F8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTItemCommonInfoHK*                         MyData;                                           		// 0x05FC ( 0x0004 ) 
	class UBTTPAuctionHK*                              TPAuction;                                        		// 0x0600 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	struct FSearchAuctionItem                          SAItem;                                           		// 0x0604 ( 0x0028 ) [ CPF_NeedCtorLink ]
	unsigned long                                      bToggleTest:1;                                    		// 0x062C ( 0x0004 )  [0x00000001]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonTest;                                       		// 0x0630 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	int                                                LastReqRepairMode;                                		// 0x0634 ( 0x0004 ) 
	int                                                RepairAllButtonID;                                		// 0x0638 ( 0x0004 ) 
	struct FBtrDouble                                  SellShopItemInfo_UniqueItemID;                    		// 0x063C ( 0x0008 ) 
	struct FBtrDouble                                  Repair_UniqueItemID;                              		// 0x0644 ( 0x0008 ) 

	// UScript Functions
	 bool                      rfAckRepairItem ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, int RepairCost, class TArray< int > DamageDegree );		//  GUIWarfare.BTPageAuction.rfAckRepairItem
	 bool                      rfAckRepairCost ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > RepairCost );		//  GUIWarfare.BTPageAuction.rfAckRepairCost
	 bool                      RepairAllItem_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.RepairAllItem_OnOK
	 bool                      BTWindowItemRepairAllHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.BTWindowItemRepairAllHK_OnOK
	 bool                      RepairItem_OnOK ( class UGUIComponent* Sender );  		//  GUIWarfare.BTPageAuction.RepairItem_OnOK
	 bool                      BTWindowItemRepairHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.BTWindowItemRepairHK_OnOK
	 bool                      Internal_OnPreDraw ( class UCanvas* C );          		//  GUIWarfare.BTPageAuction.Internal_OnPreDraw
	 bool                      rfAckAuctionInstantlyBuying ( int Result, struct FString ErrMsg, int PointRemain );		//  GUIWarfare.BTPageAuction.rfAckAuctionInstantlyBuying
	 bool                      rfAckAuctionBidding ( int Result, struct FString ErrMsg, int PointRemain );		//  GUIWarfare.BTPageAuction.rfAckAuctionBidding
	 void                      UpdateAuctionList (  );                           		//  GUIWarfare.BTPageAuction.UpdateAuctionList
	 bool                      rfAckAuctionTradeHistory ( int Result, struct FString ErrMsg, int ItemID, int PartID, class TArray< struct FString > SellerCharNm, class TArray< int > DamageDegree, class TArray< int > Price );		//  GUIWarfare.BTPageAuction.rfAckAuctionTradeHistory
	 bool                      rfAckAuctionMyItemCancel ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageAuction.rfAckAuctionMyItemCancel
	 bool                      rfAckAuctionMyItemRegister ( int Result, struct FString ErrMsg, int BeginPrice, int BuyPrice, int GuarantyPoint, int PointRemain );		//  GUIWarfare.BTPageAuction.rfAckAuctionMyItemRegister
	 bool                      rfAckAuctionItemListEnd ( unsigned char Section );		//  GUIWarfare.BTPageAuction.rfAckAuctionItemListEnd
	 bool                      rfAckAuctionItemList ( unsigned char Section, class TArray< int > UniqueIDs, class TArray< int > ItemIDs, class TArray< int > AddPartsIDs, class TArray< struct FBtrDouble > UntilTimes, class TArray< int > BiddingPrices, class TArray< int > InstantlyByuingPrices, class TArray< int > ItemDamageds, class TArray< struct FString > HighestBidderNames, class TArray< struct FString > SellerNames, class TArray< int > ItemCount );		//  GUIWarfare.BTPageAuction.rfAckAuctionItemList
	 bool                      rfAckAuctionItemListStart ( int Result, struct FString ErrMsg, unsigned char Section, int PageNum, int Count );		//  GUIWarfare.BTPageAuction.rfAckAuctionItemListStart
	 bool                      rfAckAuctionItemListCount ( int Result, struct FString ErrMsg, unsigned char Section, unsigned char Classfy, int ItemType, int ItemGrade, int Count );		//  GUIWarfare.BTPageAuction.rfAckAuctionItemListCount
	 void                      SortAuctionItemList ( int SortType );             		//  GUIWarfare.BTPageAuction.SortAuctionItemList
	 bool                      sfReqAuctionItemList ( int Section, struct FString Keyword, int ItemRank, unsigned char ItemClassify, unsigned char IsAvailable, int PageNum, int Count, int SortType );		//  GUIWarfare.BTPageAuction.sfReqAuctionItemList
	 void                      RefreshAuction ( bool bStopLoop );                		//  GUIWarfare.BTPageAuction.RefreshAuction
	 void                      RefreshCashNPoint (  );                           		//  GUIWarfare.BTPageAuction.RefreshCashNPoint
	 bool                      BTWindowJoinClan_OK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.BTWindowJoinClan_OK
	 bool                      BTWindowCreateClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.BTWindowCreateClanHK_OnOK
	 bool                      BTWindowCreateClanNeedPointHK_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.BTWindowCreateClanNeedPointHK_OnClick
	 bool                      ClanMenu_ButtonCreateClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.ClanMenu_ButtonCreateClan_OnClick
	 bool                      BTWindowFindClanHK_OnInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.BTWindowFindClanHK_OnInfo
	 bool                      BTWindowFindClanHK_OnRequestJoin ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.BTWindowFindClanHK_OnRequestJoin
	 bool                      ClanMenu_ButtonFindClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.ClanMenu_ButtonFindClan_OnClick
	 bool                      ClanMenu_ButtonLookingForClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.ClanMenu_ButtonLookingForClan_OnClick
	 class UBTTcpLink_Channel* GetTcpChannel (  );                               		//  GUIWarfare.BTPageAuction.GetTcpChannel
	 bool                      internalKeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  GUIWarfare.BTPageAuction.internalKeyEvent
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageAuction.InternalOnClose
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageAuction.InternalOnOpen
	 void                      UnInitializeDelegate (  );                        		//  GUIWarfare.BTPageAuction.UnInitializeDelegate
	 void                      InitializeDelegate (  );                          		//  GUIWarfare.BTPageAuction.InitializeDelegate
	 void                      UpdateServerTime ( class UwGameManager* GameMgr );		//  GUIWarfare.BTPageAuction.UpdateServerTime
	 void                      UpdateItemList ( class UwGameManager* GameMgr );  		//  GUIWarfare.BTPageAuction.UpdateItemList
	 void                      UpdateMoneyInfo ( class UwMatchMaker* MM );       		//  GUIWarfare.BTPageAuction.UpdateMoneyInfo
	 void                      InitializeCashNPoint (  );                        		//  GUIWarfare.BTPageAuction.InitializeCashNPoint
	 bool                      ButtonTest_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.ButtonTest_OnClick
	 void                      TeamChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTPageAuction.TeamChatLog_Extra
	 void                      BroadCastItemChatLog_Extra ( struct FString cL ); 		//  GUIWarfare.BTPageAuction.BroadCastItemChatLog_Extra
	 void                      SystemChatLog_Extra ( struct FString cL );        		//  GUIWarfare.BTPageAuction.SystemChatLog_Extra
	 void                      SelfChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTPageAuction.SelfChatLog_Extra
	 void                      WhisperChatLog_Extra ( struct FString cL );       		//  GUIWarfare.BTPageAuction.WhisperChatLog_Extra
	 void                      ClanChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTPageAuction.ClanChatLog_Extra
	 void                      NormalChatLog_Extra ( struct FString cL );        		//  GUIWarfare.BTPageAuction.NormalChatLog_Extra
	 void                      ClearChatLog_Extra (  );                          		//  GUIWarfare.BTPageAuction.ClearChatLog_Extra
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageAuction.InitComponent
	 void                      TPMyAuction_PageButton_OnClick ( int pageIndex ); 		//  GUIWarfare.BTPageAuction.TPMyAuction_PageButton_OnClick
	 void                      TPBuying_PageButton_OnClick ( int pageIndex );    		//  GUIWarfare.BTPageAuction.TPBuying_PageButton_OnClick
	 bool                      TPAuction_TabButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.TPAuction_TabButton_OnClick
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageAuction.HeaderButton_OnClick
}; // Size: 0x00F0

// Class GUIWarfare.BTPageHelp
class DLL_IMPORT UBTPageHelp : public UBTNetGUIPageHK
{
public:
	class UBTOwnerDrawImageHK*                         HelpImage;                                        		// 0x055C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 class UBTTcpLink_Channel* GetTcpChannel (  );                               		//  GUIWarfare.BTPageHelp.GetTcpChannel
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageHelp.InitComponent
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageHelp.HeaderButton_OnClick
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageHelp.InternalOnClose
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageHelp.InternalOnOpen
}; // Size: 0x0004

// Class GUIWarfare.BTPageMail
class DLL_IMPORT UBTPageMail : public UBTNetGUIPageHK
{
public:
	struct FString                                     strDeleteWindow[ 0x04 ];                          		// 0x055C ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTTPMailHK*                                 TPMail;                                           		// 0x058C ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPMailReadHK*                             TPMailRead;                                       		// 0x0590 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPMailWriteHK*                            TPMailWrite;                                      		// 0x0594 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbBGImageLeft;                                    		// 0x0598 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbBGImageRight;                                   		// 0x05A8 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         BGImageLeft;                                      		// 0x05B8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         BGImageRight;                                     		// 0x05BC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonWrite;                                      		// 0x05C0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 BtnDeleteAll;                                     		// 0x05C4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strButtonWrite;                                   		// 0x05C8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strBtnDeleteAll;                                  		// 0x05D4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbButtonWrite;                                    		// 0x05E0 ( 0x0010 ) 
	struct FFloatBox                                   fbBtnDeleteAll;                                   		// 0x05F0 ( 0x0010 ) 
	class UBTOwnerDrawImageHK*                         LabelWarning;                                     		// 0x0600 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strLabelWarning;                                  		// 0x0604 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbLabelWarning;                                   		// 0x0610 ( 0x0010 ) 
	struct FString                                     strSendMemoCompleteTitle;                         		// 0x0620 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSendMemoCompleteMsg;                           		// 0x062C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FReceiveMode                                RMode;                                            		// 0x0638 ( 0x0010 ) 

	// UScript Functions
	 bool                      BTWindowUserDetailInfoHK_OnClanInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowUserDetailInfoHK_OnClanInfo
	 void                      UpdateRecv_ClanInfo ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTPageMail.UpdateRecv_ClanInfo
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTPageMail.rfAckDBCharInfo
	 bool                      rfAckGetAttachedItemFromMemo ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID );		//  GUIWarfare.BTPageMail.rfAckGetAttachedItemFromMemo
	 bool                      rfAckDeleteMailAll ( int Result, unsigned char MailType, int Count );		//  GUIWarfare.BTPageMail.rfAckDeleteMailAll
	 bool                      rfAckDelMemo ( int Result, struct FString ErrMsg, class TArray< int > FailedMemoID );		//  GUIWarfare.BTPageMail.rfAckDelMemo
	 bool                      rfAckSendMemo ( class TArray< struct FString > CnamesToFail, class TArray< int > ResultArray );		//  GUIWarfare.BTPageMail.rfAckSendMemo
	 bool                      rfReqRecvMemo ( struct FString cnameFrom, unsigned char MemoType );		//  GUIWarfare.BTPageMail.rfReqRecvMemo
	 bool                      rfAckReadMemo ( struct FString cnameFrom, struct FString Text, struct FString dateRecv, struct FBtrDouble ItemUID );		//  GUIWarfare.BTPageMail.rfAckReadMemo
	 bool                      rfAckEndMemoList (  );                            		//  GUIWarfare.BTPageMail.rfAckEndMemoList
	 bool                      rfAckMemoList ( class TArray< int > MemoIdx, class TArray< struct FString > cnameFrom, class TArray< struct FString > dateRecv, class TArray< struct FString > Text, class TArray< unsigned char > Status, class TArray< int > UntilExpire, class TArray< struct FBtrDouble > ItemUID, class TArray< int > ItemID, class TArray< unsigned char > MsgType, class TArray< int > ItemPartID );		//  GUIWarfare.BTPageMail.rfAckMemoList
	 bool                      rfAckStartMemoList ( int Result, struct FString ErrMsg, unsigned char Type, int TotalCount );		//  GUIWarfare.BTPageMail.rfAckStartMemoList
	 bool                      BTWindowJoinClan_OK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowJoinClan_OK
	 bool                      BTWindowCreateClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowCreateClanHK_OnOK
	 bool                      BTWindowCreateClanNeedPointHK_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowCreateClanNeedPointHK_OnClick
	 bool                      ClanMenu_ButtonCreateClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.ClanMenu_ButtonCreateClan_OnClick
	 bool                      BTWindowFindClanHK_OnInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowFindClanHK_OnInfo
	 bool                      BTWindowFindClanHK_OnRequestJoin ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowFindClanHK_OnRequestJoin
	 bool                      ClanMenu_ButtonFindClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.ClanMenu_ButtonFindClan_OnClick
	 bool                      ClanMenu_ButtonLookingForClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.ClanMenu_ButtonLookingForClan_OnClick
	 class UBTTcpLink_Channel* GetTcpChannel (  );                               		//  GUIWarfare.BTPageMail.GetTcpChannel
	 bool                      internalKeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  GUIWarfare.BTPageMail.internalKeyEvent
	 bool                      sfReqMemoList ( int RequestMailType, int RequestItemType );		//  GUIWarfare.BTPageMail.sfReqMemoList
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageMail.InternalOnClose
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageMail.InternalOnOpen
	 void                      UpdateClanInfo ( class UwMatchMaker* MM );        		//  GUIWarfare.BTPageMail.UpdateClanInfo
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageMail.InitComponent
	 void                      UnInitializeDelegate (  );                        		//  GUIWarfare.BTPageMail.UnInitializeDelegate
	 void                      InitializeDelegate (  );                          		//  GUIWarfare.BTPageMail.InitializeDelegate
	 void                      UpdateItemList ( class UwGameManager* MM );       		//  GUIWarfare.BTPageMail.UpdateItemList
	 void                      UpdateWebzenInvenListEnd ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTPageMail.UpdateWebzenInvenListEnd
	 bool                      BTWindowRequestApprovalClanHK_OnSuspend ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowRequestApprovalClanHK_OnSuspend
	 bool                      BTWindowRequestApprovalClanHK_OnSuspend2 ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowRequestApprovalClanHK_OnSuspend2
	 bool                      BTWindowRequestApprovalClanHK_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowRequestApprovalClanHK_OnCancel
	 bool                      BTWindowRequestApprovalClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowRequestApprovalClanHK_OnOK
	 bool                      BTWindowRequestClanHK_OnSuspend ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowRequestClanHK_OnSuspend
	 bool                      BTWindowRequestClanHK_OnSuspend2 ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowRequestClanHK_OnSuspend2
	 bool                      BTWindowRequestClanHK_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowRequestClanHK_OnCancel
	 bool                      BTWindowRequestClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowRequestClanHK_OnOK
	 bool                      ReceiveACL_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.ReceiveACL_OnClick
	 bool                      ButtonReceiveItem_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.ButtonReceiveItem_OnClick
	 bool                      BTWindowDefineARHK_ReceiveCashItem_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BTWindowDefineARHK_ReceiveCashItem_OnOK
	 bool                      ButtonReply_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.ButtonReply_OnClick
	 bool                      ButtonDelete_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.ButtonDelete_OnClick
	 bool                      ButtonDelete_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.ButtonDelete_OnOK
	 bool                      ButtonCancel_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.ButtonCancel_OnClick
	 bool                      BtnDeleteAll_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BtnDeleteAll_OnOK
	 bool                      BtnDeleteAll_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.BtnDeleteAll_OnClick
	 bool                      ButtonWrite_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.ButtonWrite_OnClick
	 bool                      ButtonSendMail_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.ButtonSendMail_OnClick
	 bool                      TabButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.TabButton_OnClick
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMail.HeaderButton_OnClick
}; // Size: 0x00EC

// Class GUIWarfare.BTPageStore
class DLL_IMPORT UBTPageStore : public UBTNetGUIPageHK
{
public:
	struct FFloatBox                                   fbTPStore;                                        		// 0x055C ( 0x0010 ) 
	class UBTTPStoreHK*                                TPStore;                                          		// 0x056C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelPoint;                                     		// 0x0570 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbLabelCash;                                      		// 0x0580 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelPoint;                                       		// 0x0590 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelCash;                                        		// 0x0594 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelP;                                         		// 0x0598 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbLabelC;                                         		// 0x05A8 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelP;                                           		// 0x05B8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelC;                                           		// 0x05BC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelCCoinCash;                                 		// 0x05C0 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelCCoinCash;                                   		// 0x05D0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbRedeemCodesBtn;                                 		// 0x05D4 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawCaptionButtonHK*                 RedeemCodesBtn;                                   		// 0x05E4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strRedeemCodesBtn;                                		// 0x05E8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bGoToClanPage:1;                                  		// 0x05F4 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 bool                      rfAckCouponUse ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageStore.rfAckCouponUse
	 bool                      rfAckGiftItemByWebzenCash ( int Result, struct FString ErrMsg, int LeftProductCount );		//  GUIWarfare.BTPageStore.rfAckGiftItemByWebzenCash
	 bool                      BTWindowDefineInfoHK_BuyGiftByWebzenCash_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageStore.BTWindowDefineInfoHK_BuyGiftByWebzenCash_OnOK
	 void                      BTWindowDefineInfoHK_ButtonOK_OnTimeOut ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageStore.BTWindowDefineInfoHK_ButtonOK_OnTimeOut
	 bool                      rfAckBuyItemByWebzenCash ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageStore.rfAckBuyItemByWebzenCash
	 bool                      rfAckSendGift ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain );		//  GUIWarfare.BTPageStore.rfAckSendGift
	 void                      BoughtItemMark ( int BoughtItemID );              		//  GUIWarfare.BTPageStore.BoughtItemMark
	 bool                      rfAckShopItemListEnd (  );                        		//  GUIWarfare.BTPageStore.rfAckShopItemListEnd
	 bool                      rfAckShopItemList ( class TArray< int > ItemID ); 		//  GUIWarfare.BTPageStore.rfAckShopItemList
	 bool                      rfAckShopItemListStart ( int Count );             		//  GUIWarfare.BTPageStore.rfAckShopItemListStart
	 bool                      BTWindowJoinClan_OK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageStore.BTWindowJoinClan_OK
	 bool                      BTWindowCreateClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageStore.BTWindowCreateClanHK_OnOK
	 bool                      BTWindowCreateClanNeedPointHK_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageStore.BTWindowCreateClanNeedPointHK_OnClick
	 bool                      ClanMenu_ButtonCreateClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageStore.ClanMenu_ButtonCreateClan_OnClick
	 bool                      BTWindowFindClanHK_OnInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageStore.BTWindowFindClanHK_OnInfo
	 bool                      BTWindowFindClanHK_OnRequestJoin ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageStore.BTWindowFindClanHK_OnRequestJoin
	 bool                      ClanMenu_ButtonFindClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageStore.ClanMenu_ButtonFindClan_OnClick
	 bool                      ClanMenu_ButtonLookingForClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageStore.ClanMenu_ButtonLookingForClan_OnClick
	 class UBTTcpLink_Channel* GetTcpChannel (  );                               		//  GUIWarfare.BTPageStore.GetTcpChannel
	 void                      RefreshShop (  );                                 		//  GUIWarfare.BTPageStore.RefreshShop
	 void                      RefreshCashNPoint (  );                           		//  GUIWarfare.BTPageStore.RefreshCashNPoint
	 bool                      internalKeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  GUIWarfare.BTPageStore.internalKeyEvent
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageStore.InternalOnClose
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageStore.InternalOnOpen
	 void                      InternalOnReOpen (  );                            		//  GUIWarfare.BTPageStore.InternalOnReOpen
	 void                      UnInitializeDelegate (  );                        		//  GUIWarfare.BTPageStore.UnInitializeDelegate
	 void                      InitializeDelegate (  );                          		//  GUIWarfare.BTPageStore.InitializeDelegate
	 bool                      BTWindowDefineARHK_24_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageStore.BTWindowDefineARHK_24_OnOK
	 void                      UpdateWebzenItemList ( class UwGameManager* GameMgr );		//  GUIWarfare.BTPageStore.UpdateWebzenItemList
	 void                      UpdateItemList ( class UwGameManager* MM );       		//  GUIWarfare.BTPageStore.UpdateItemList
	 void                      UpdateServerTime ( class UwGameManager* GameMgr );		//  GUIWarfare.BTPageStore.UpdateServerTime
	 void                      UpdateMoneyInfo ( class UwMatchMaker* MM );       		//  GUIWarfare.BTPageStore.UpdateMoneyInfo
	 void                      InitializeCashNPoint (  );                        		//  GUIWarfare.BTPageStore.InitializeCashNPoint
	 void                      TeamChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTPageStore.TeamChatLog_Extra
	 void                      BroadCastItemChatLog_Extra ( struct FString cL ); 		//  GUIWarfare.BTPageStore.BroadCastItemChatLog_Extra
	 void                      SystemChatLog_Extra ( struct FString cL );        		//  GUIWarfare.BTPageStore.SystemChatLog_Extra
	 void                      SelfChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTPageStore.SelfChatLog_Extra
	 void                      WhisperChatLog_Extra ( struct FString cL );       		//  GUIWarfare.BTPageStore.WhisperChatLog_Extra
	 void                      ClanChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTPageStore.ClanChatLog_Extra
	 void                      NormalChatLog_Extra ( struct FString cL );        		//  GUIWarfare.BTPageStore.NormalChatLog_Extra
	 void                      ClearChatLog_Extra (  );                          		//  GUIWarfare.BTPageStore.ClearChatLog_Extra
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageStore.InitComponent
	 bool                      TPStore_TabButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageStore.TPStore_TabButton_OnClick
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageStore.HeaderButton_OnClick
}; // Size: 0x009C

// Class GUIWarfare.BTPageInventory
class DLL_IMPORT UBTPageInventory : public UBTNetGUIPageHK
{
public:
	int                                                MoveHeaderButtonID;                               		// 0x055C ( 0x0004 ) 
	int                                                LastReqRepairMode;                                		// 0x0560 ( 0x0004 ) 
	int                                                RepairAllButtonID;                                		// 0x0564 ( 0x0004 ) 
	struct FBtrDouble                                  SellShopItemInfo_UniqueItemID;                    		// 0x0568 ( 0x0008 ) 
	struct FBtrDouble                                  Repair_UniqueItemID;                              		// 0x0570 ( 0x0008 ) 
	struct FString                                     strSellingSuccess[ 0x03 ];                        		// 0x0578 ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class FColor                                       CashColor;                                        		// 0x059C ( 0x0004 ) 
	class FColor                                       PointColor;                                       		// 0x05A0 ( 0x0004 ) 
	struct FFloatBox                                   fbLabelPoint;                                     		// 0x05A4 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbLabelCash;                                      		// 0x05B4 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelPoint;                                       		// 0x05C4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelCash;                                        		// 0x05C8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelP;                                         		// 0x05CC ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbLabelC;                                         		// 0x05DC ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelP;                                           		// 0x05EC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelC;                                           		// 0x05F0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelCCoinCash;                                 		// 0x05F4 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelCCoinCash;                                   		// 0x0604 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbRedeemCodesBtn;                                 		// 0x0608 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawCaptionButtonHK*                 RedeemCodesBtn;                                   		// 0x0618 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strRedeemCodesBtn;                                		// 0x061C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTTPInventoryHK*                            TPInventory;                                      		// 0x0628 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTRefreshTime*                              rfEquipItemTime;                                  		// 0x062C ( 0x0004 ) 
	int                                                nCurQuickSlot;                                    		// 0x0630 ( 0x0004 ) 
	class UBTOwnerDrawImageHK*                         LabelBackgrounddeco;                              		// 0x0634 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelBackgrounddeco;                            		// 0x0638 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	int                                                LastSelectIndex;                                  		// 0x0648 ( 0x0004 ) 
	class UBTOwnerDrawCaptionButtonHK*                 ChargeCashBtn;                                    		// 0x064C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strChargeCash;                                    		// 0x0650 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawImageHK*                         LabelSlot;                                        		// 0x065C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strLabelSlot;                                     		// 0x0660 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      rfAckCouponUse ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageInventory.rfAckCouponUse
	 bool                      Internal_KeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  GUIWarfare.BTPageInventory.Internal_KeyEvent
	 void                      RefreshSlotNum (  );                              		//  GUIWarfare.BTPageInventory.RefreshSlotNum
	 bool                      rfAckGetItemFromItemBox ( int Result, struct FString ErrMsg, int ItemIDChoose, int PartIDChoose, struct FBtrDouble BoxItemIdx, int BxoItemCount, unsigned char bHave, struct FBtrDouble ItemIdx, struct FBtrDouble UntilTime, int StackCount );		//  GUIWarfare.BTPageInventory.rfAckGetItemFromItemBox
	 bool                      rfAckUpdateQSlot ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageInventory.rfAckUpdateQSlot
	 bool                      rfAckModifyWeapon ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueID, int AddPartID, int PaintID, int Point, int Cash );		//  GUIWarfare.BTPageInventory.rfAckModifyWeapon
	 bool                      rfAckSellShopItem ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain, int Count );		//  GUIWarfare.BTPageInventory.rfAckSellShopItem
	 bool                      rfAckSellShopItemInfo ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueItemID, int SellPoint, int CurPoint, int AfterPoint );		//  GUIWarfare.BTPageInventory.rfAckSellShopItemInfo
	 bool                      BTWindowItemSellHK_OnSellOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.BTWindowItemSellHK_OnSellOK
	 bool                      rfAckRepairItem ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, int RepairCost, class TArray< int > DamageDegree );		//  GUIWarfare.BTPageInventory.rfAckRepairItem
	 bool                      rfAckRepairCost ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > RepairCost );		//  GUIWarfare.BTPageInventory.rfAckRepairCost
	 bool                      RepairAllItem_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.RepairAllItem_OnOK
	 bool                      BTWindowItemRepairAllHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.BTWindowItemRepairAllHK_OnOK
	 bool                      RepairItem_OnOK ( class UGUIComponent* Sender );  		//  GUIWarfare.BTPageInventory.RepairItem_OnOK
	 bool                      BTWindowItemRepairHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.BTWindowItemRepairHK_OnOK
	 bool                      rfReqConfirmSkillChanged (  );                    		//  GUIWarfare.BTPageInventory.rfReqConfirmSkillChanged
	 bool                      rfAckEquipSkill ( int ChangedNewSkillID, int ChangedNewSkillUniqueID, unsigned char ChangedNewSlotPosition, int ChangedOldSkillID, int ChangedOldSkillUniqueID, unsigned char ChangedOldSlotPosition, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageInventory.rfAckEquipSkill
	 bool                      rfAckConfirmItemChanged ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageInventory.rfAckConfirmItemChanged
	 bool                      rfAckEquipItem ( int ChangedNewItemID, struct FBtrDouble ChangedNewUniqueID, int ChangedNewSlotPosition, int ChangedOldItemID, struct FBtrDouble ChangedOldUniqueID, int ChangedOldSlotPosition, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageInventory.rfAckEquipItem
	 bool                      BTWindowJoinClan_OK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.BTWindowJoinClan_OK
	 bool                      BTWindowCreateClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.BTWindowCreateClanHK_OnOK
	 bool                      BTWindowCreateClanNeedPointHK_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.BTWindowCreateClanNeedPointHK_OnClick
	 bool                      ClanMenu_ButtonCreateClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.ClanMenu_ButtonCreateClan_OnClick
	 bool                      BTWindowFindClanHK_OnInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.BTWindowFindClanHK_OnInfo
	 bool                      BTWindowFindClanHK_OnRequestJoin ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.BTWindowFindClanHK_OnRequestJoin
	 bool                      ClanMenu_ButtonFindClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.ClanMenu_ButtonFindClan_OnClick
	 bool                      ClanMenu_ButtonLookingForClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.ClanMenu_ButtonLookingForClan_OnClick
	 void                      UpdateQuickSlot ( int i );                        		//  GUIWarfare.BTPageInventory.UpdateQuickSlot
	 void                      UnequipQuickSlot ( int ButtonID );                		//  GUIWarfare.BTPageInventory.UnequipQuickSlot
	 void                      EquipMainQuickSlot (  );                          		//  GUIWarfare.BTPageInventory.EquipMainQuickSlot
	 bool                      MainButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.MainButton_OnClick
	 void                      RefreshWarehouse ( bool isSkipAddQSNum );         		//  GUIWarfare.BTPageInventory.RefreshWarehouse
	 void                      FillQuickSlotInventories (  );                    		//  GUIWarfare.BTPageInventory.FillQuickSlotInventories
	 void                      RefreshCashNPoint (  );                           		//  GUIWarfare.BTPageInventory.RefreshCashNPoint
	 void                      RefreshQuickSlot (  );                            		//  GUIWarfare.BTPageInventory.RefreshQuickSlot
	 void                      RefreshEquipSkill (  );                           		//  GUIWarfare.BTPageInventory.RefreshEquipSkill
	 class UBTTcpLink_Channel* GetTcpChannel (  );                               		//  GUIWarfare.BTPageInventory.GetTcpChannel
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageInventory.InternalOnClose
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageInventory.InternalOnOpen
	 void                      InternalOnReOpen (  );                            		//  GUIWarfare.BTPageInventory.InternalOnReOpen
	 bool                      Internal_OnPreDraw ( class UCanvas* C );          		//  GUIWarfare.BTPageInventory.Internal_OnPreDraw
	 void                      UnInitializeDelegate (  );                        		//  GUIWarfare.BTPageInventory.UnInitializeDelegate
	 void                      InitializeDelegate (  );                          		//  GUIWarfare.BTPageInventory.InitializeDelegate
	 bool                      BTWindowDefineARHK_25_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.BTWindowDefineARHK_25_OnOK
	 void                      UpdateServerTime ( class UwGameManager* GameMgr );		//  GUIWarfare.BTPageInventory.UpdateServerTime
	 void                      UpdateWebzenItemList ( class UwGameManager* MM ); 		//  GUIWarfare.BTPageInventory.UpdateWebzenItemList
	 void                      UpdateItemList ( class UwGameManager* MM );       		//  GUIWarfare.BTPageInventory.UpdateItemList
	 void                      UpdateMoneyInfo ( class UwMatchMaker* MM );       		//  GUIWarfare.BTPageInventory.UpdateMoneyInfo
	 void                      InitializeCashNPoint (  );                        		//  GUIWarfare.BTPageInventory.InitializeCashNPoint
	 void                      TeamChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTPageInventory.TeamChatLog_Extra
	 void                      BroadCastItemChatLog_Extra ( struct FString cL ); 		//  GUIWarfare.BTPageInventory.BroadCastItemChatLog_Extra
	 void                      SystemChatLog_Extra ( struct FString cL );        		//  GUIWarfare.BTPageInventory.SystemChatLog_Extra
	 void                      SelfChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTPageInventory.SelfChatLog_Extra
	 void                      WhisperChatLog_Extra ( struct FString cL );       		//  GUIWarfare.BTPageInventory.WhisperChatLog_Extra
	 void                      ClanChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTPageInventory.ClanChatLog_Extra
	 void                      NormalChatLog_Extra ( struct FString cL );        		//  GUIWarfare.BTPageInventory.NormalChatLog_Extra
	 void                      ClearChatLog_Extra (  );                          		//  GUIWarfare.BTPageInventory.ClearChatLog_Extra
	 bool                      WeaponListClick ( class UGUIComponent* Sender );  		//  GUIWarfare.BTPageInventory.WeaponListClick
	 bool                      ImageListBox_OnHover ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.ImageListBox_OnHover
	 bool                      SubButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.SubButton_OnClick
	 bool                      SubButton_OnHover ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.SubButton_OnHover
	 bool                      TPQSClick ( class UGUIComponent* Sender );        		//  GUIWarfare.BTPageInventory.TPQSClick
	 bool                      ImageListBox_OnlClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.ImageListBox_OnlClick
	 void                      SendCodes ( struct FString codes );               		//  GUIWarfare.BTPageInventory.SendCodes
	 bool                      ClickRedeemCodes ( class UGUIComponent* Sender ); 		//  GUIWarfare.BTPageInventory.ClickRedeemCodes
	 bool                      ClickChargeCash ( class UGUIComponent* Sender );  		//  GUIWarfare.BTPageInventory.ClickChargeCash
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageInventory.InitComponent
	 void                      UpdateWebzenInvenListEnd ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTPageInventory.UpdateWebzenInvenListEnd
	 void                      UnequipItem ( int ButtonID );                     		//  GUIWarfare.BTPageInventory.UnequipItem
	 bool                      TPInventoryQS_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.TPInventoryQS_OnClick
	 bool                      BTWindowModifyHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.BTWindowModifyHK_OnOK
	 void                      EquipQuickSlot (  );                              		//  GUIWarfare.BTPageInventory.EquipQuickSlot
	 void                      EquipItem (  );                                   		//  GUIWarfare.BTPageInventory.EquipItem
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageInventory.HeaderButton_OnClick
	 bool                      rfAckShopItemListEnd (  );                        		//  GUIWarfare.BTPageInventory.rfAckShopItemListEnd
	 bool                      rfAckShopItemList ( class TArray< int > ItemID ); 		//  GUIWarfare.BTPageInventory.rfAckShopItemList
	 bool                      rfAckShopItemListStart ( int Count );             		//  GUIWarfare.BTPageInventory.rfAckShopItemListStart
}; // Size: 0x0110

// Class GUIWarfare.BTPageMyInfo
class DLL_IMPORT UBTPageMyInfo : public UBTNetGUIPageHK
{
public:
	class UBTTPMyInfoAllHK*                            TPMyInfoAll;                                      		// 0x055C ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]

	// UScript Functions
	 bool                      rfAckGetRankingInfoListEnd (  );                  		//  GUIWarfare.BTPageMyInfo.rfAckGetRankingInfoListEnd
	 bool                      rfAckGetRankingInfoList ( int Result, unsigned char RankingType, unsigned char CommunityType, class TArray< struct FString > CharName, class TArray< int > CharLevel, class TArray< struct FString > ClanName, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Ranking_Accum, class TArray< int > Ranking_Accum_Prev, class TArray< int > Ranking_Accum_Exp, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageMyInfo.rfAckGetRankingInfoList
	 bool                      rfAckGetRankingInfoListStart ( int Result, unsigned char RankingType, unsigned char CommunityType, int TotalCount );		//  GUIWarfare.BTPageMyInfo.rfAckGetRankingInfoListStart
	 bool                      rfAckCharDetailInfo ( int MaxSerial, int MaxScore, int MaxKill, int MaxAssist, int Serial3, int Serial5, int Serial7, int Serial10, int Serial15, int AR, int SMG, int SR, int SW, int Melee, int Grenade, int FlashBang, int Foot, int AT4, int MG, int Fire, int RPG7, int TimeBomb, int IcendiaryBomb, int ClusterBomb, int ByChopper, int Artillery, int KillChopper, int FirstKill, int LastKill, int AllKill, int Dominate, int InstallBomb, int DefuseBomb );		//  GUIWarfare.BTPageMyInfo.rfAckCharDetailInfo
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTPageMyInfo.rfAckDBCharInfo
	 bool                      BTWindowJoinClan_OK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMyInfo.BTWindowJoinClan_OK
	 bool                      BTWindowCreateClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMyInfo.BTWindowCreateClanHK_OnOK
	 bool                      BTWindowCreateClanNeedPointHK_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMyInfo.BTWindowCreateClanNeedPointHK_OnClick
	 bool                      ClanMenu_ButtonCreateClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMyInfo.ClanMenu_ButtonCreateClan_OnClick
	 bool                      BTWindowFindClanHK_OnInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMyInfo.BTWindowFindClanHK_OnInfo
	 bool                      BTWindowFindClanHK_OnRequestJoin ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMyInfo.BTWindowFindClanHK_OnRequestJoin
	 bool                      ClanMenu_ButtonFindClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMyInfo.ClanMenu_ButtonFindClan_OnClick
	 bool                      ClanMenu_ButtonLookingForClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMyInfo.ClanMenu_ButtonLookingForClan_OnClick
	 class UBTTcpLink_Channel* GetTcpChannel (  );                               		//  GUIWarfare.BTPageMyInfo.GetTcpChannel
	 bool                      InternalOnKeyEvent ( float Delta, unsigned char* key, unsigned char* KeyState );		//  GUIWarfare.BTPageMyInfo.InternalOnKeyEvent
	 void                      InternalOnHideComboBoxList (  );                  		//  GUIWarfare.BTPageMyInfo.InternalOnHideComboBoxList
	 void                      InternalOnChangeRankingComboBox (  );             		//  GUIWarfare.BTPageMyInfo.InternalOnChangeRankingComboBox
	 void                      InternalOnChangeFriendlyUser (  );                		//  GUIWarfare.BTPageMyInfo.InternalOnChangeFriendlyUser
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageMyInfo.InternalOnClose
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageMyInfo.InternalOnOpen
	 void                      TeamChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTPageMyInfo.TeamChatLog_Extra
	 void                      BroadCastItemChatLog_Extra ( struct FString cL ); 		//  GUIWarfare.BTPageMyInfo.BroadCastItemChatLog_Extra
	 void                      SystemChatLog_Extra ( struct FString cL );        		//  GUIWarfare.BTPageMyInfo.SystemChatLog_Extra
	 void                      SelfChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTPageMyInfo.SelfChatLog_Extra
	 void                      WhisperChatLog_Extra ( struct FString cL );       		//  GUIWarfare.BTPageMyInfo.WhisperChatLog_Extra
	 void                      ClanChatLog_Extra ( struct FString cL );          		//  GUIWarfare.BTPageMyInfo.ClanChatLog_Extra
	 void                      NormalChatLog_Extra ( struct FString cL );        		//  GUIWarfare.BTPageMyInfo.NormalChatLog_Extra
	 void                      ClearChatLog_Extra (  );                          		//  GUIWarfare.BTPageMyInfo.ClearChatLog_Extra
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageMyInfo.InitComponent
	 void                      UnInitializeDelegate (  );                        		//  GUIWarfare.BTPageMyInfo.UnInitializeDelegate
	 void                      InitializeDelegate (  );                          		//  GUIWarfare.BTPageMyInfo.InitializeDelegate
	 void                      UpdateCharInfo ( class UwMatchMaker* MM );        		//  GUIWarfare.BTPageMyInfo.UpdateCharInfo
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageMyInfo.HeaderButton_OnClick
}; // Size: 0x0004

// Class GUIWarfare.BTPageClan
class DLL_IMPORT UBTPageClan : public UBTNetGUIPageHK
{
public:
	unsigned long                                      bReqClanInfo:1;                                   		// 0x055C ( 0x0004 )  [0x00000001]
	unsigned long                                      bDelayClanInvite:1;                               		// 0x055C ( 0x0004 )  [0x00000002]
	unsigned long                                      bClanInviteState:1;                               		// 0x055C ( 0x0004 )  [0x00000004]
	struct FString                                     DelayClanName;                                    		// 0x0560 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTRefreshTime*                              rfFriendPosTime;                                  		// 0x056C ( 0x0004 ) 
	struct FClanInfo                                   ClanInfo;                                         		// 0x0570 ( 0x00A8 ) [ CPF_NeedCtorLink ]
	struct FString                                     strRecord;                                        		// 0x0618 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbPanelBackground[ 0x02 ];                        		// 0x0624 ( 0x0020 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         PanelBackground[ 0x02 ];                          		// 0x0644 ( 0x0008 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strClanSecession[ 0x03 ];                         		// 0x064C ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strClanClose[ 0x03 ];                             		// 0x0670 ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UwMatchMaker*                                MatchMaker;                                       		// 0x0694 ( 0x0004 ) [ CPF_Transient ]
	float                                              LastRefreshTime;                                  		// 0x0698 ( 0x0004 ) 
	float                                              RefreshCycleTime;                                 		// 0x069C ( 0x0004 ) 
	struct FFloatBox                                   fbLabelClanMark;                                  		// 0x06A0 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTLabelClanMarkHK*                          LabelClanMark;                                    		// 0x06B0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelClanName;                                  		// 0x06B4 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelClanName;                                    		// 0x06C4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strLabel[ 0x0F ];                                 		// 0x06C8 ( 0x00B4 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbLabel[ 0x0F ];                                  		// 0x077C ( 0x00F0 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         Label[ 0x0F ];                                    		// 0x086C ( 0x003C ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strNoRankState;                                   		// 0x08A8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbEdit[ 0x0F ];                                   		// 0x08B4 ( 0x00F0 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FString                                     strEdit[ 0x0F ];                                  		// 0x09A4 ( 0x00B4 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawTextArrayHK*                     Edit[ 0x0F ];                                     		// 0x0A58 ( 0x003C ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTMultiLineEditBoxHK*                       ClanIntroduction;                                 		// 0x0A94 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTMultiLineEditBoxHK*                       ClanNotice;                                       		// 0x0A98 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strClanNotice;                                    		// 0x0A9C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTAutoScrollListHK*                         ClanIntroduction2;                                		// 0x0AA8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTAutoScrollListHK*                         ClanNotice2;                                      		// 0x0AAC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelTop[ 0x04 ];                                 		// 0x0AB0 ( 0x0010 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbButtonTop[ 0x04 ];                              		// 0x0AC0 ( 0x0040 ) 
	struct FString                                     strButtonTop[ 0x04 ];                             		// 0x0B00 ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonTop[ 0x04 ];                                		// 0x0B30 ( 0x0010 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbACLMember;                                      		// 0x0B40 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTACLClanMemberHK*                          ACLMember;                                        		// 0x0B50 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTCMClanUserListHK*                         CMClanUserList;                                   		// 0x0B54 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelClanNews;                                  		// 0x0B58 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FString                                     strLabelClanNews;                                 		// 0x0B68 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawImageHK*                         LabelClanNews;                                    		// 0x0B74 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbACLClanNews;                                    		// 0x0B78 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTACLClanNewsHK*                            ACLClanNews;                                      		// 0x0B88 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelClanWarResult;                             		// 0x0B8C ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FString                                     strLabelClanWarResult;                            		// 0x0B9C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawImageHK*                         LabelClanWarResult;                               		// 0x0BA8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbACLClanWarResult;                               		// 0x0BAC ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTACLClanWarResultHK*                       ACLClanWarResult;                                 		// 0x0BBC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbListBottomButton[ 0x06 ];                       		// 0x0BC0 ( 0x0060 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FString                                     strListBottomButton[ 0x06 ];                      		// 0x0C20 ( 0x0048 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawCaptionButtonHK*                 ListBottomButton[ 0x06 ];                         		// 0x0C68 ( 0x0018 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbTPChat;                                         		// 0x0C80 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPChatHK*                                 TPChat;                                           		// 0x0C90 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckFriendPosition ( int Result, struct FString TargetCharName, unsigned char ServerType, struct FString fServername, struct FString fServerShortName, struct FString fServerIP, int fServerPort, unsigned char CurPos, unsigned char CurState, int ChannelNum, struct FString ChannelNickName, int GameRoomNum );		//  GUIWarfare.BTPageClan.rfAckFriendPosition
	 void                      UpdateRecv_ClanInfo ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTPageClan.UpdateRecv_ClanInfo
	 bool                      rfAckNotifyUpdateCharInfo_LevelMark ( struct FString CharName, int LevelMarkID );		//  GUIWarfare.BTPageClan.rfAckNotifyUpdateCharInfo_LevelMark
	 bool                      rfAckChatWispher ( int Result, struct FString ErrMsg, struct FString ToCharName );		//  GUIWarfare.BTPageClan.rfAckChatWispher
	 bool                      rfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		//  GUIWarfare.BTPageClan.rfReqRecvClanInvite
	 bool                      rfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageClan.rfAckNotifyAdjustClanMemberGrade
	 bool                      rfAckAdjustClanMemberGrade ( int Result, struct FString ErrMsg, struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageClan.rfAckAdjustClanMemberGrade
	 bool                      rfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro );		//  GUIWarfare.BTPageClan.rfAckClanCharPersonelIntro
	 bool                      BTWindowUserDetailInfoHK_OnClanInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClan.BTWindowUserDetailInfoHK_OnClanInfo
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTPageClan.rfAckDBCharInfo
	 bool                      rfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel );		//  GUIWarfare.BTPageClan.rfAckSearchClan
	 bool                      rfAckClanPersonelIntro ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClan.rfAckClanPersonelIntro
	 bool                      rfAckClanChangeInfo ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClan.rfAckClanChangeInfo
	 bool                      rfAckClanSecession ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClan.rfAckClanSecession
	 bool                      rfAckClanClose ( int Result, struct FString ErrMsg, struct FString ClanName );		//  GUIWarfare.BTPageClan.rfAckClanClose
	 bool                      rfAckClanMatchResultHistory ( class TArray< struct FBtrDouble > MatchDate, class TArray< unsigned char > IsWin, class TArray< struct FString > EnemyClanname );		//  GUIWarfare.BTPageClan.rfAckClanMatchResultHistory
	 bool                      rfAckClanNews ( class TArray< struct FString > IssueDate, class TArray< unsigned char > IssueType, class TArray< struct FString > IssuedClanMember );		//  GUIWarfare.BTPageClan.rfAckClanNews
	 bool                      rfAckClanUserListEnd (  );                        		//  GUIWarfare.BTPageClan.rfAckClanUserListEnd
	 bool                      rfAckClanUserList ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< int > ClanWinCnt, class TArray< int > ClanLoseCnt, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > DudeId );		//  GUIWarfare.BTPageClan.rfAckClanUserList
	 bool                      rfAckClanUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageClan.rfAckClanUserListStart
	 void                      TeamChatLog ( struct FString cL );                		//  GUIWarfare.BTPageClan.TeamChatLog
	 void                      BroadCastItemChatLog ( struct FString cL );       		//  GUIWarfare.BTPageClan.BroadCastItemChatLog
	 void                      SystemChatLog ( struct FString cL );              		//  GUIWarfare.BTPageClan.SystemChatLog
	 void                      SelfChatLog ( struct FString cL );                		//  GUIWarfare.BTPageClan.SelfChatLog
	 void                      WhisperChatLog ( struct FString cL );             		//  GUIWarfare.BTPageClan.WhisperChatLog
	 void                      ClanChatLog ( struct FString cL );                		//  GUIWarfare.BTPageClan.ClanChatLog
	 void                      NormalChatLog ( struct FString cL );              		//  GUIWarfare.BTPageClan.NormalChatLog
	 void                      ClearChatLog (  );                                		//  GUIWarfare.BTPageClan.ClearChatLog
	 class UBTTcpLink_Channel* GetTcpChannel (  );                               		//  GUIWarfare.BTPageClan.GetTcpChannel
	 bool                      Internal_OnPreDraw ( class UCanvas* C );          		//  GUIWarfare.BTPageClan.Internal_OnPreDraw
	 bool                      internalKeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  GUIWarfare.BTPageClan.internalKeyEvent
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageClan.InternalOnClose
	 bool                      CheckInviteUser ( int CurPos, int CurState, struct FString szNickName );		//  GUIWarfare.BTPageClan.CheckInviteUser
	 void                      ContextMenu_OnSelected ( int ContextMenuIndex );  		//  GUIWarfare.BTPageClan.ContextMenu_OnSelected
	 bool                      ContextMenu_OnClose ( class UGUIContextMenu* Sender );		//  GUIWarfare.BTPageClan.ContextMenu_OnClose
	 void                      OnPopupCheck (  );                                		//  GUIWarfare.BTPageClan.OnPopupCheck
	 bool                      ContextMenu_OnOpen ( class UGUIContextMenu* Sender );		//  GUIWarfare.BTPageClan.ContextMenu_OnOpen
	 void                      RefreshPage (  );                                 		//  GUIWarfare.BTPageClan.RefreshPage
	 void                      UnInitializeDelegate (  );                        		//  GUIWarfare.BTPageClan.UnInitializeDelegate
	 void                      InitializeDelegate (  );                          		//  GUIWarfare.BTPageClan.InitializeDelegate
	 void                      UpdateClanInfo ( class UwMatchMaker* MM );        		//  GUIWarfare.BTPageClan.UpdateClanInfo
	 void                      OnCompleteOpened (  );                            		//  GUIWarfare.BTPageClan.OnCompleteOpened
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageClan.InternalOnOpen
	 void                      InternalOnReOpen (  );                            		//  GUIWarfare.BTPageClan.InternalOnReOpen
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageClan.InitComponent
	 bool                      BTWindowAdjustClanMasterOnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClan.BTWindowAdjustClanMasterOnOK
	 bool                      BTWindowBackToLastPage_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClan.BTWindowBackToLastPage_OnOK
	 bool                      BTWindowClanClose_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClan.BTWindowClanClose_OnOK
	 bool                      BTWindowClanSecession_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClan.BTWindowClanSecession_OnOK
	 bool                      BTWindowClanInfoChangeHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClan.BTWindowClanInfoChangeHK_OnOK
	 bool                      BTWindowSelfIntroductionChangeHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClan.BTWindowSelfIntroductionChangeHK_OnOK
	 bool                      BTWindowFindClanHK_OnInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClan.BTWindowFindClanHK_OnInfo
	 bool                      BTWindowFindClanHK_OnRequestJoin ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClan.BTWindowFindClanHK_OnRequestJoin
	 bool                      ListBottomButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClan.ListBottomButton_OnClick
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClan.HeaderButton_OnClick
}; // Size: 0x0738

// Class GUIWarfare.BTPageCredit
class DLL_IMPORT UBTPageCredit : public UBTNetGUIPageHK
{
public:
	struct FFloatBox                                   fbLabelCredit;                                    		// 0x055C ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTLabelCreditAnimationHK*                   LabelCredit;                                      		// 0x056C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageCredit.InternalOnClose
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageCredit.InternalOnOpen
	 bool                      Internal_KeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  GUIWarfare.BTPageCredit.Internal_KeyEvent
	 void                      LabelCredit_OnEndCredit (  );                     		//  GUIWarfare.BTPageCredit.LabelCredit_OnEndCredit
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageCredit.InitComponent
}; // Size: 0x0014

// Class GUIWarfare.BTPageClanWar
class DLL_IMPORT UBTPageClanWar : public UBTNetQuestInfoPageHK
{
public:
	unsigned long                                      bSend_sfReqClanMatchStartSearching:1;             		// 0x0560 ( 0x0004 )  [0x00000001]
	int                                                StartSearchingCheckTime;                          		// 0x0564 ( 0x0004 ) 
	int                                                StartRequestCount;                                		// 0x0568 ( 0x0004 ) 
	int                                                savedhour;                                        		// 0x056C ( 0x0004 ) 
	int                                                savedmin;                                         		// 0x0570 ( 0x0004 ) 
	unsigned long                                      bJoinClanState:1;                                 		// 0x0574 ( 0x0004 )  [0x00000001]
	unsigned long                                      bClanInviteState:1;                               		// 0x0574 ( 0x0004 )  [0x00000002]
	int                                                TotalChannelUserCount;                            		// 0x0578 ( 0x0004 ) 
	struct FFloatBox                                   fbPanelBackground[ 0x02 ];                        		// 0x057C ( 0x0020 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         PanelBackground[ 0x02 ];                          		// 0x059C ( 0x0008 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelLPanelName;                                		// 0x05A4 ( 0x0010 ) 
	struct FString                                     strLabelLPanelName;                               		// 0x05B4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawImageHK*                         LabelLPanelName;                                  		// 0x05C0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelTop[ 0x03 ];                                 		// 0x05C4 ( 0x000C ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbButtonTop[ 0x03 ];                              		// 0x05D0 ( 0x0030 ) 
	struct FString                                     strButtonTop[ 0x03 ];                             		// 0x0600 ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonTop[ 0x03 ];                                		// 0x0624 ( 0x000C ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbACLWaitingClan;                                 		// 0x0630 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTACLWaitingClanHK*                         ACLWaitingClan;                                   		// 0x0640 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelSeparator;                                 		// 0x0644 ( 0x0010 ) 
	class UBTOwnerDrawImageHK*                         LabelSeparator;                                   		// 0x0654 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelMPanelName;                                		// 0x0658 ( 0x0010 ) 
	struct FString                                     strLabelMPanelName;                               		// 0x0668 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawImageHK*                         LabelMPanelName;                                  		// 0x0674 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelMPanel[ 0x05 ];                              		// 0x0678 ( 0x0014 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelMPanel[ 0x05 ];                            		// 0x068C ( 0x0050 ) 
	struct FString                                     strLabelMPanel[ 0x05 ];                           		// 0x06DC ( 0x003C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTComboBoxHK*                               ComboMPanel[ 0x04 ];                              		// 0x0718 ( 0x0010 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbComboMPanel[ 0x04 ];                            		// 0x0728 ( 0x0040 ) 
	struct FFloatBox                                   fbSlideShowMap;                                   		// 0x0768 ( 0x0010 ) 
	class UBTSlideShowImageHK*                         SlideShowMap;                                     		// 0x0778 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelMemberList;                                		// 0x077C ( 0x0010 ) 
	class UBTOwnerDrawImageHK*                         LabelMemberList;                                  		// 0x078C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbACLMemberList;                                  		// 0x0790 ( 0x0010 ) 
	class UBTACLCWTeamMemberListHK*                    ACLMemberList;                                    		// 0x07A0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTCMCWMessengerTeamHK*                      CMMemberList;                                     		// 0x07A4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbTPMessenger;                                    		// 0x07A8 ( 0x0010 ) 
	class UBTTPCWMessengerHK*                          TPMessenger;                                      		// 0x07B8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbListBottomButton[ 0x05 ];                       		// 0x07BC ( 0x0050 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FString                                     strListBottomButton[ 0x06 ];                      		// 0x080C ( 0x0048 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawCaptionButtonHK*                 ListBottomButton[ 0x05 ];                         		// 0x0854 ( 0x0014 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbTPChat;                                         		// 0x0868 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPChatHK*                                 TPChat;                                           		// 0x0878 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfNotifyClanLevelup ( struct FString ClanName, int Levelup );		//  GUIWarfare.BTPageClanWar.rfNotifyClanLevelup
	 bool                      rfAckClanMatch_NotifiyStartCombat ( class TArray< int > MapNumArray, int VersusMode );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_NotifiyStartCombat
	 bool                      rfAckClanMatch_StartCombat ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_StartCombat
	 bool                      rfReqClanMatch_FoundMatch ( int ChannelID, int RoomNumber );		//  GUIWarfare.BTPageClanWar.rfReqClanMatch_FoundMatch
	 bool                      rfAckClanMatch_StopSearching (  );                		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_StopSearching
	 bool                      rfAckClanMatch_NotifyStartSearching ( int ShouldWaitMore );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_NotifyStartSearching
	 bool                      rfAckClanMatch_StartSearching ( int Result, struct FString ErrMsg, int ShouldWaitMore );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_StartSearching
	 void                      BTWindowDefineARHK_OnTimeTick ( float LeftTime ); 		//  GUIWarfare.BTPageClanWar.BTWindowDefineARHK_OnTimeTick
	 void                      BTWindowDefineARHK_ButtonOK_OnTimeOut ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.BTWindowDefineARHK_ButtonOK_OnTimeOut
	 bool                      BTWindowDefineARHK_ClanMatch_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.BTWindowDefineARHK_ClanMatch_OnOK
	 bool                      rfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageClanWar.rfAckEnterChannel
	 bool                      rfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageClanWar.rfAckNotifyAdjustClanMemberGrade
	 bool                      rfAckAdjustClanMemberGrade ( int Result, struct FString ErrMsg, struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageClanWar.rfAckAdjustClanMemberGrade
	 bool                      rfReqRecvDeleteFriend ( int Result, struct FString FromCharName );		//  GUIWarfare.BTPageClanWar.rfReqRecvDeleteFriend
	 bool                      rfAckDeleteFriend ( int Result, class TArray< struct FString > FailedCharname );		//  GUIWarfare.BTPageClanWar.rfAckDeleteFriend
	 bool                      rfAckRecvJoinClanResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar.rfAckRecvJoinClanResult
	 bool                      rfAckJoinClanResult ( struct FString ClanName, unsigned char Permit, struct FString PermitCharName );		//  GUIWarfare.BTPageClanWar.rfAckJoinClanResult
	 bool                      RefreshPage_OnOK ( class UGUIComponent* Sender ); 		//  GUIWarfare.BTPageClanWar.RefreshPage_OnOK
	 bool                      BTWindowRequestApprovalClanHK_OnSuspend ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.BTWindowRequestApprovalClanHK_OnSuspend
	 bool                      BTWindowRequestApprovalClanHK_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.BTWindowRequestApprovalClanHK_OnCancel
	 bool                      BTWindowRequestApprovalClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.BTWindowRequestApprovalClanHK_OnOK
	 bool                      rfReqRecvJoinClan ( int UserIdx, struct FString CharName, struct FString Message );		//  GUIWarfare.BTPageClanWar.rfReqRecvJoinClan
	 bool                      rfAckNotifyClanSecession ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageClanWar.rfAckNotifyClanSecession
	 bool                      rfAckNotifyNewClanMember ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageClanWar.rfAckNotifyNewClanMember
	 bool                      rfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel );		//  GUIWarfare.BTPageClanWar.rfAckSearchClan
	 bool                      rfAckInviteClanResult ( struct FString CharName, unsigned char Permit, struct FString ClanNm );		//  GUIWarfare.BTPageClanWar.rfAckInviteClanResult
	 bool                      rfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		//  GUIWarfare.BTPageClanWar.rfReqRecvClanInvite
	 bool                      rfAckJoinClan ( int Result, struct FString ErrMsg, struct FString SpecificCharName, struct FString RealRecvCharName, unsigned char RealRecvCharClanGrade );		//  GUIWarfare.BTPageClanWar.rfAckJoinClan
	 bool                      rfAckInviteClan ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar.rfAckInviteClan
	 bool                      BTWindowUserDetailInfoHK_OnClanInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.BTWindowUserDetailInfoHK_OnClanInfo
	 bool                      rfReqClanCharPersonelIntro ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageClanWar.rfReqClanCharPersonelIntro
	 bool                      rfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro );		//  GUIWarfare.BTPageClanWar.rfAckClanCharPersonelIntro
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTPageClanWar.rfAckDBCharInfo
	 bool                      MoveToClanPage_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.MoveToClanPage_OnOK
	 bool                      rfAckCreateClan ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTPageClanWar.rfAckCreateClan
	 bool                      rfAckDupCheckClanName ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar.rfAckDupCheckClanName
	 bool                      WindowRequestFriend_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.WindowRequestFriend_OnCancel
	 bool                      WindowRequestFriend_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.WindowRequestFriend_OnOK
	 bool                      WindowInviteFriend_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.WindowInviteFriend_OnOK
	 bool                      rfReqCompleteFriendInvite ( struct FString CharnameToBeInvited, unsigned char IsPermit );		//  GUIWarfare.BTPageClanWar.rfReqCompleteFriendInvite
	 bool                      rfAckConfirmFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar.rfAckConfirmFriendInvite
	 bool                      rfReqRecvFriendInvite ( int ReqUserID, struct FString ReqCharname, struct FString InviteMsg );		//  GUIWarfare.BTPageClanWar.rfReqRecvFriendInvite
	 bool                      rfAckSendFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar.rfAckSendFriendInvite
	 bool                      rfAckChannelUserList ( int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > UserID, class TArray< int > UserLevels, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, int Result, struct FString ErrMsg, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageClanWar.rfAckChannelUserList
	 bool                      rfAckClanUserListEnd (  );                        		//  GUIWarfare.BTPageClanWar.rfAckClanUserListEnd
	 bool                      rfAckClanUserList ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< int > ClanWinCnt, class TArray< int > ClanLoseCnt, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > DudeId );		//  GUIWarfare.BTPageClanWar.rfAckClanUserList
	 bool                      rfAckClanUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageClanWar.rfAckClanUserListStart
	 bool                      rfAckFriendListEnd (  );                          		//  GUIWarfare.BTPageClanWar.rfAckFriendListEnd
	 bool                      rfAckFriendList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > LevelMarkID, class TArray< int > ClanLevel, class TArray< int > Level, class TArray< unsigned char > IsLookForClan );		//  GUIWarfare.BTPageClanWar.rfAckFriendList
	 bool                      rfAckFriendListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageClanWar.rfAckFriendListStart
	 bool                      rfAckClanMatch_SetWaitRoomPublic ( int Result, struct FString ErrMsg, unsigned char Set );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_SetWaitRoomPublic
	 bool                      rfAckClanMatch_GetClanWaittingRoomInfo ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, struct FString WaitRoomName );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_GetClanWaittingRoomInfo
	 void                      SelectMapIndex ( int MPanelIndex, int MapID );    		//  GUIWarfare.BTPageClanWar.SelectMapIndex
	 bool                      rfAckClanMatch_ChangeRoomSetting ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, unsigned char IsPublic );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_ChangeRoomSetting
	 bool                      rfAckClanMatch_ChangeLeader ( int Result, struct FString ErrMsg, int NewLeader, struct FString NewLeaderName );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_ChangeLeader
	 bool                      rfAckClanMatch_Leave ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_Leave
	 bool                      rfAckClanMatch_LeaveNotify ( struct FString CharName );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_LeaveNotify
	 bool                      rfAckClanMatch_JoinNotify ( unsigned char IsLeader, int ClanMarkPA, int ClanMarkBG, int ClanMarkBL, int Level, struct FString CharName, int ClanGrade, int ClanWin, int ClanLose, struct FString ClanName, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_JoinNotify
	 bool                      rfAckClanMatch_Chat ( int Result, struct FString ErrMsg, struct FString Sender, struct FString Message );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_Chat
	 bool                      rfAckClanMatch_Join ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_Join
	 bool                      rfAckClanMatch_GetReady ( int Result, struct FString ErrMsg, int RoomIndex );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_GetReady
	 void                      ChangeReadyRoomLeader ( bool bLeader );           		//  GUIWarfare.BTPageClanWar.ChangeReadyRoomLeader
	 bool                      rfAckClanMatch_MemberList ( class TArray< unsigned char > IsLeader, class TArray< int > ClanMarkPA, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< struct FString > ClanName, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_MemberList
	 bool                      rfAckClanMatch_WaittingTeamList ( int TtotlCount, class TArray< int > Grade, class TArray< int > Map, class TArray< int > Versus );		//  GUIWarfare.BTPageClanWar.rfAckClanMatch_WaittingTeamList
	 bool                      BTWindowJoinClan_OK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.BTWindowJoinClan_OK
	 bool                      BTWindowInviteClan_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.BTWindowInviteClan_OnOK
	 bool                      BTWindowCreateClanHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.BTWindowCreateClanHK_OnOK
	 bool                      BTWindowCreateClanNeedPointHK_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.BTWindowCreateClanNeedPointHK_OnClick
	 bool                      ClanMenu_ButtonCreateClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.ClanMenu_ButtonCreateClan_OnClick
	 bool                      BTWindowFindClanHK_OnInfo ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.BTWindowFindClanHK_OnInfo
	 bool                      BTWindowFindClanHK_OnRequestJoin ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.BTWindowFindClanHK_OnRequestJoin
	 bool                      ClanMenu_ButtonFindClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.ClanMenu_ButtonFindClan_OnClick
	 bool                      ClanMenu_ButtonLookingForClan_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.ClanMenu_ButtonLookingForClan_OnClick
	 void                      OnPopupPCBang ( int ContextMenuIndex, class UBTACLMessengerPCBangHK* acl );		//  GUIWarfare.BTPageClanWar.OnPopupPCBang
	 void                      OnPopupPCBangCheck ( class UBTACLMessengerPCBangHK* acl, class UBTCMMessengerPCBangHK* cm );		//  GUIWarfare.BTPageClanWar.OnPopupPCBangCheck
	 void                      OnPopupBan ( int ContextMenuIndex, class UBTACLMessengerBanHK* acl );		//  GUIWarfare.BTPageClanWar.OnPopupBan
	 void                      OnPopupBanCheck ( class UBTACLMessengerBanHK* acl, class UBTCMMessengerBanHK* cm );		//  GUIWarfare.BTPageClanWar.OnPopupBanCheck
	 void                      OnPopupClan ( int ContextMenuIndex, class UBTACLCWMessengerClanHK* acl );		//  GUIWarfare.BTPageClanWar.OnPopupClan
	 void                      OnPopupClanCheck ( class UBTACLCWMessengerClanHK* acl, class UBTCMMessengerClanHK* cm );		//  GUIWarfare.BTPageClanWar.OnPopupClanCheck
	 void                      OnPopupFriend ( int ContextMenuIndex, class UBTACLCWMessengerFriendHK* acl );		//  GUIWarfare.BTPageClanWar.OnPopupFriend
	 void                      OnPopupFriendCheck ( class UBTACLCWMessengerFriendHK* acl, class UBTCMMessengerFriendHK* cm );		//  GUIWarfare.BTPageClanWar.OnPopupFriendCheck
	 void                      OnPopupChannel ( int ContextMenuIndex, class UBTACLCWMessengerChannelHK* acl );		//  GUIWarfare.BTPageClanWar.OnPopupChannel
	 void                      OnPopupChannelCheck ( class UBTACLCWMessengerChannelHK* acl, class UBTCMMessengerChannelHK* cm );		//  GUIWarfare.BTPageClanWar.OnPopupChannelCheck
	 void                      TeamChatLog ( struct FString cL );                		//  GUIWarfare.BTPageClanWar.TeamChatLog
	 void                      SystemChatLog ( struct FString cL );              		//  GUIWarfare.BTPageClanWar.SystemChatLog
	 void                      SelfChatLog ( struct FString cL );                		//  GUIWarfare.BTPageClanWar.SelfChatLog
	 void                      WhisperChatLog ( struct FString cL );             		//  GUIWarfare.BTPageClanWar.WhisperChatLog
	 void                      ClanChatLog ( struct FString cL );                		//  GUIWarfare.BTPageClanWar.ClanChatLog
	 void                      NormalChatLog ( struct FString cL );              		//  GUIWarfare.BTPageClanWar.NormalChatLog
	 void                      ClearChatLog (  );                                		//  GUIWarfare.BTPageClanWar.ClearChatLog
	 class UBTTcpLink_Channel* GetTcpChannel (  );                               		//  GUIWarfare.BTPageClanWar.GetTcpChannel
	 bool                      internalKeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  GUIWarfare.BTPageClanWar.internalKeyEvent
	 void                      InternalOnClose ( bool bCanceled );               		//  GUIWarfare.BTPageClanWar.InternalOnClose
	 void                      RefreshPage (  );                                 		//  GUIWarfare.BTPageClanWar.RefreshPage
	 void                      UpdateItemList ( class UwGameManager* GameMgr );  		//  GUIWarfare.BTPageClanWar.UpdateItemList
	 void                      UpdateBlockList ( class UwMatchMaker* MM );       		//  GUIWarfare.BTPageClanWar.UpdateBlockList
	 void                      UpdatePCBangList ( class UwMatchMaker* MM );      		//  GUIWarfare.BTPageClanWar.UpdatePCBangList
	 void                      UpdateClanList ( class UwMatchMaker* MM );        		//  GUIWarfare.BTPageClanWar.UpdateClanList
	 void                      UpdateFriendList ( class UwMatchMaker* MM );      		//  GUIWarfare.BTPageClanWar.UpdateFriendList
	 void                      UpdateQuestList ( class UwMatchMaker* MM );       		//  GUIWarfare.BTPageClanWar.UpdateQuestList
	 void                      UpdatePositionInfo ( class UwMatchMaker* MM );    		//  GUIWarfare.BTPageClanWar.UpdatePositionInfo
	 void                      UpdatePCBangInfo ( class UwMatchMaker* MM );      		//  GUIWarfare.BTPageClanWar.UpdatePCBangInfo
	 void                      UpdateRecv_CharInfo ( class UwMatchMaker* MM );   		//  GUIWarfare.BTPageClanWar.UpdateRecv_CharInfo
	 void                      UpdateMoneyInfo ( class UwMatchMaker* MM );       		//  GUIWarfare.BTPageClanWar.UpdateMoneyInfo
	 void                      UpdateEquipItemInfo ( class UwMatchMaker* MM );   		//  GUIWarfare.BTPageClanWar.UpdateEquipItemInfo
	 void                      UpdateRankingInfo ( class UwMatchMaker* MM );     		//  GUIWarfare.BTPageClanWar.UpdateRankingInfo
	 void                      UpdateRecv_ClanInfo ( class UBTNetMainMenu* MainMenu );		//  GUIWarfare.BTPageClanWar.UpdateRecv_ClanInfo
	 void                      UpdateClanInfo ( class UwMatchMaker* MM );        		//  GUIWarfare.BTPageClanWar.UpdateClanInfo
	 void                      UpdateCharInfo ( class UwMatchMaker* MM );        		//  GUIWarfare.BTPageClanWar.UpdateCharInfo
	 void                      OnCompleteOpened (  );                            		//  GUIWarfare.BTPageClanWar.OnCompleteOpened
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTPageClanWar.InternalOnOpen
	 void                      InternalOnReOpen (  );                            		//  GUIWarfare.BTPageClanWar.InternalOnReOpen
	 void                      ContextMenu_OnSelected ( int ContextMenuIndex );  		//  GUIWarfare.BTPageClanWar.ContextMenu_OnSelected
	 bool                      ContextMenu_OnClose ( class UGUIContextMenu* Sender );		//  GUIWarfare.BTPageClanWar.ContextMenu_OnClose
	 bool                      ContextMenu_OnOpen ( class UGUIContextMenu* Sender );		//  GUIWarfare.BTPageClanWar.ContextMenu_OnOpen
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageClanWar.InitComponent
	 void                      FillCapacityList (  );                            		//  GUIWarfare.BTPageClanWar.FillCapacityList
	 void                      FillMapList (  );                                 		//  GUIWarfare.BTPageClanWar.FillMapList
	 void                      ComboMap3_OnChange ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.ComboMap3_OnChange
	 void                      ComboMap2_OnChange ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.ComboMap2_OnChange
	 void                      ComboMap1_OnChange ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.ComboMap1_OnChange
	 void                      ComboMap0_OnChange ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.ComboMap0_OnChange
	 void                      RefreshSlideShowMap (  );                         		//  GUIWarfare.BTPageClanWar.RefreshSlideShowMap
	 bool                      ListBottomButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.ListBottomButton_OnClick
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageClanWar.HeaderButton_OnClick
}; // Size: 0x031C

// Class GUIWarfare.BTTcpLoginHandler
class DLL_IMPORT UBTTcpLoginHandler : public UBTTcpLink_Login
{
public:
	class UBTNetMainMenu*                              MainMenu;                                         		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckLogOut ( unsigned char Result, unsigned char Reason );		//  GUIWarfare.BTTcpLoginHandler.rfAckLogOut
	 bool                      rfAckPCBangUserListEnd (  );                      		//  GUIWarfare.BTTcpLoginHandler.rfAckPCBangUserListEnd
	 bool                      rfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose );		//  GUIWarfare.BTTcpLoginHandler.rfAckPCBangUserList
	 bool                      rfAckPCBangUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTTcpLoginHandler.rfAckPCBangUserListStart
	 bool                      rfAckEventNotify ( int Type );                    		//  GUIWarfare.BTTcpLoginHandler.rfAckEventNotify
	 bool                      rfAckErrorReportServerAddr ( struct FString Addr, int Port );		//  GUIWarfare.BTTcpLoginHandler.rfAckErrorReportServerAddr
	 bool                      rfAckClientChecksum ( int Result );               		//  GUIWarfare.BTTcpLoginHandler.rfAckClientChecksum
	 bool                      rfAckClientChallenge ( struct FString Key1, struct FBtrDouble Key2 );		//  GUIWarfare.BTTcpLoginHandler.rfAckClientChallenge
	 bool                      rfAckCharInfo ( int Result, struct FString CharName, int Level, int Exp, struct FString ClanName );		//  GUIWarfare.BTTcpLoginHandler.rfAckCharInfo
	 bool                      rfAckFriendsListEnd (  );                         		//  GUIWarfare.BTTcpLoginHandler.rfAckFriendsListEnd
	 bool                      rfAckFriendsListStart ( int Result, int TotalCount );		//  GUIWarfare.BTTcpLoginHandler.rfAckFriendsListStart
	 bool                      rfAckClanMemberListFromClientEnd (  );            		//  GUIWarfare.BTTcpLoginHandler.rfAckClanMemberListFromClientEnd
	 bool                      rfAckClanMemberListFromClientStart ( int Result, int TotalCount );		//  GUIWarfare.BTTcpLoginHandler.rfAckClanMemberListFromClientStart
	 bool                      rfReqForceLogoutByOwner (  );                     		//  GUIWarfare.BTTcpLoginHandler.rfReqForceLogoutByOwner
	 bool                      rfAckMaxUserExceed (  );                          		//  GUIWarfare.BTTcpLoginHandler.rfAckMaxUserExceed
	 bool                      Exit_OnOK ( class UGUIComponent* Sender );        		//  GUIWarfare.BTTcpLoginHandler.Exit_OnOK
	 bool                      rfAckLoginWithGlobal ( int Result );              		//  GUIWarfare.BTTcpLoginHandler.rfAckLoginWithGlobal
	 bool                      rfAckLoginWithWZAuth ( int Result, unsigned char wzp_AccountType, unsigned char wzp_IsBlock, unsigned char wzp_AuthKeySuccess, unsigned char ChannelType );		//  GUIWarfare.BTTcpLoginHandler.rfAckLoginWithWZAuth
	 bool                      rfAckClanMemberListFromClient ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< struct FString > ServerName, class TArray< struct FString > ServerShortName, class TArray< struct FString > ServerIP, class TArray< int > serverPort, class TArray< unsigned char > CurPos, class TArray< int > ChannelNum, class TArray< struct FString > ChannelNickName, class TArray< int > GameRoomNum );		//  GUIWarfare.BTTcpLoginHandler.rfAckClanMemberListFromClient
	 bool                      rfAckFriendsList ( unsigned char ListType, class TArray< struct FString > UserName, class TArray< unsigned char > IsLogOn, class TArray< int > CMarkPattern, class TArray< int > CMarkBG, class TArray< int > CMarkBL, class TArray< struct FString > ClanName, class TArray< int > Level );		//  GUIWarfare.BTTcpLoginHandler.rfAckFriendsList
	 bool                      rfReqFriendsList (  );                            		//  GUIWarfare.BTTcpLoginHandler.rfReqFriendsList
	 bool                      rfAckProcessPreLoginUser ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpLoginHandler.rfAckProcessPreLoginUser
	 bool                      rfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		//  GUIWarfare.BTTcpLoginHandler.rfAckLoginInHouseTest
	 bool                      rfAckCreateChar ( int Success, struct FString ErrMsg );		//  GUIWarfare.BTTcpLoginHandler.rfAckCreateChar
	 bool                      rfAckServerList ( class TArray< struct FString > CServername, class TArray< struct FString > CServerShortName, class TArray< struct FString > ServerIP, class TArray< int > serverPort, class TArray< struct FString > ChannelName, class TArray< struct FString > ChannelNickName, class TArray< int > ChannelNum, class TArray< int > chMaxUser, class TArray< int > chCurUser, class TArray< struct FString > ServerGroupName, class TArray< int > ServerGroupID, class TArray< int > ServerDispOrder, class TArray< int > DataPort, class TArray< unsigned char > OptionCount_byte, class TArray< unsigned char > OptionKey_byte, class TArray< unsigned char > OptionValue_byte, class TArray< unsigned char > OptionCount_int, class TArray< unsigned char > OptionKey_int, class TArray< int > OptionValue_int, class TArray< unsigned char > OptionCount_float, class TArray< unsigned char > OptionKey_float, class TArray< float > OptionValue_float, class TArray< unsigned char > IsClanChannel, class TArray< unsigned char > IsUseDedicateHost );		//  GUIWarfare.BTTcpLoginHandler.rfAckServerList
	 bool                      rfAckLogin ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg );		//  GUIWarfare.BTTcpLoginHandler.rfAckLogin
	 bool                      rfAckHash ( int Result, struct FString Error );   		//  GUIWarfare.BTTcpLoginHandler.rfAckHash
	 void                      OnError ( int ErrCode );                          		//  GUIWarfare.BTTcpLoginHandler.OnError
	 void                      OnClose ( int ErrCode );                          		//  GUIWarfare.BTTcpLoginHandler.OnClose
	 void                      OnConnect ( int ErrCode );                        		//  GUIWarfare.BTTcpLoginHandler.OnConnect
}; // Size: 0x0004

// Class GUIWarfare.BTWindowItemExpiredHK
class DLL_IMPORT UBTWindowItemExpiredHK : public UBTWindowHK
{
public:
	int                                                SavePoint;                                        		// 0x04AC ( 0x0004 ) 
	int                                                saveLevel;                                        		// 0x04B0 ( 0x0004 ) 
	int                                                saveCash;                                         		// 0x04B4 ( 0x0004 ) 
	int                                                saveCCoin;                                        		// 0x04B8 ( 0x0004 ) 
	class UBTNetMainMenu*                              MainMenu;                                         		// 0x04BC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTTcpLink_Channel*                          TcpChannel;                                       		// 0x04C0 ( 0x0004 ) 
	int                                                MyPoint;                                          		// 0x04C4 ( 0x0004 ) 
	int                                                myLevel;                                          		// 0x04C8 ( 0x0004 ) 
	int                                                MyCash;                                           		// 0x04CC ( 0x0004 ) 
	int                                                MyCCoin;                                          		// 0x04D0 ( 0x0004 ) 
	int                                                RepairSumCost;                                    		// 0x04D4 ( 0x0004 ) 
	int                                                RepairSumCash;                                    		// 0x04D8 ( 0x0004 ) 
	int                                                RepairSumCCoin;                                   		// 0x04DC ( 0x0004 ) 
	struct FFloatBox                                   fbTPItemList;                                     		// 0x04E0 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPItemListHK*                             TPItemList;                                       		// 0x04F0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelDivider[ 0x02 ];                           		// 0x04F4 ( 0x0020 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelDivider[ 0x02 ];                             		// 0x0514 ( 0x0008 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strLabel[ 0x05 ];                                 		// 0x051C ( 0x003C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strPoint;                                         		// 0x0558 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strCash;                                          		// 0x0564 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strCCoin;                                         		// 0x0570 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbLabel[ 0x05 ];                                  		// 0x057C ( 0x0050 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbLabelEdit[ 0x09 ];                              		// 0x05CC ( 0x0090 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         Label[ 0x05 ];                                    		// 0x065C ( 0x0014 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelEdit[ 0x09 ];                                		// 0x0670 ( 0x0024 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strButtonSelectAll[ 0x02 ];                       		// 0x0694 ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbButtonSelectAll;                                		// 0x06AC ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonSelectAll;                                  		// 0x06BC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbNEditBox[ 0x09 ];                               		// 0x06C0 ( 0x0090 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTNumericEditBoxHK*                         NEditBox[ 0x09 ];                                 		// 0x0750 ( 0x0024 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< int >                                BuyExpiredItemList;                               		// 0x0774 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                BuyExpiredSlotPosList;                            		// 0x0780 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FBuyExpriedCashInfo                         BuyExpiredCashInfoList[ 0x04 ];                   		// 0x078C ( 0x0030 ) [ CPF_NeedCtorLink ]
	class TArray< struct FBtrDouble >                  BuyExpiredUniqueList;                             		// 0x07BC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                selectCashType;                                   		// 0x07C8 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      CalculateCashSelect ( int ListIndex, class UBTROItemBoxHK* ro, int cashType );		//  GUIWarfare.BTWindowItemExpiredHK.CalculateCashSelect
	 void                      PopAndBuy ( int ReservedItemID );                 		//  GUIWarfare.BTWindowItemExpiredHK.PopAndBuy
	 void                      CheckSubBtn (  );                                 		//  GUIWarfare.BTWindowItemExpiredHK.CheckSubBtn
	 bool                      Internal_OnPreDraw ( class UCanvas* C );          		//  GUIWarfare.BTWindowItemExpiredHK.Internal_OnPreDraw
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTWindowItemExpiredHK.InternalOnOpen
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTWindowItemExpiredHK.InitComponent
	 void                      AddSubMenuBtn (  );                               		//  GUIWarfare.BTWindowItemExpiredHK.AddSubMenuBtn
	 void                      AddItem ( int ItemID, struct FBtrDouble UniqueItemID, int UniqueSkillID, int PartID, int SlotPosition );		//  GUIWarfare.BTWindowItemExpiredHK.AddItem
	 void                      SetCurrentCCoin ( int MyCCoin );                  		//  GUIWarfare.BTWindowItemExpiredHK.SetCurrentCCoin
	 void                      SetCurrentLevel ( int myLevel );                  		//  GUIWarfare.BTWindowItemExpiredHK.SetCurrentLevel
	 void                      SetCurrentCash ( int MyCash );                    		//  GUIWarfare.BTWindowItemExpiredHK.SetCurrentCash
	 void                      SetCurrentPoint ( int MyPoint );                  		//  GUIWarfare.BTWindowItemExpiredHK.SetCurrentPoint
	 void                      UpdateNEditBox (  );                              		//  GUIWarfare.BTWindowItemExpiredHK.UpdateNEditBox
	 bool                      ImageListBox_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTWindowItemExpiredHK.ImageListBox_OnClick
	 bool                      ButtonCancel_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTWindowItemExpiredHK.ButtonCancel_OnClick
	 void                      RemoveAllItem (  );                               		//  GUIWarfare.BTWindowItemExpiredHK.RemoveAllItem
	 void                      RemoveAllExpiredItem (  );                        		//  GUIWarfare.BTWindowItemExpiredHK.RemoveAllExpiredItem
	 bool                      ButtonOK_OnClick ( class UGUIComponent* Sender ); 		//  GUIWarfare.BTWindowItemExpiredHK.ButtonOK_OnClick
	 bool                      ButtonNonSelectAll_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTWindowItemExpiredHK.ButtonNonSelectAll_OnClick
	 bool                      ButtonSelectAll_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTWindowItemExpiredHK.ButtonSelectAll_OnClick
	 int                       PopExpiredSlotPos (  );                           		//  GUIWarfare.BTWindowItemExpiredHK.PopExpiredSlotPos
	 void                      PopExpiredCashInfo ( int* iCategoryID, int* iPackageID, int* iPriceID, int* cashType );		//  GUIWarfare.BTWindowItemExpiredHK.PopExpiredCashInfo
	 struct FBtrDouble         PopExpiredUniqueID (  );                          		//  GUIWarfare.BTWindowItemExpiredHK.PopExpiredUniqueID
	 int                       PopExpiredItemID (  );                            		//  GUIWarfare.BTWindowItemExpiredHK.PopExpiredItemID
	 void                      PushExpiredItemID ( int ItemID, struct FBtrDouble UniqueID, int CategoryID, int PackageID, int PriceID, int SlotPos, int cashType );		//  GUIWarfare.BTWindowItemExpiredHK.PushExpiredItemID
}; // Size: 0x0328

// Class GUIWarfare.BTTcpHandlerMed
class DLL_IMPORT UBTTcpHandlerMed : public UBTTcpLink_Channel
{
public:
	class UBTTcpHandler*                               Owner;                                            		// 0x002C ( 0x0004 ) 

	// UScript Functions
	 bool                      rfReqAhnNotifyDisconnct ( int Code );             		//  GUIWarfare.BTTcpHandlerMed.rfReqAhnNotifyDisconnct
	 bool                      rfReqAhnHsObject ( class TArray< unsigned char > Data, int DataSize );		//  GUIWarfare.BTTcpHandlerMed.rfReqAhnHsObject
	 bool                      rfNotifyCouponUseError ( int Time );              		//  GUIWarfare.BTTcpHandlerMed.rfNotifyCouponUseError
	 bool                      rfReqNotifyShopItemDataEnd ( int Ver );           		//  GUIWarfare.BTTcpHandlerMed.rfReqNotifyShopItemDataEnd
	 bool                      rfAckCouponUse ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckCouponUse
	 bool                      rfReqNotifyShopItemData ( class TArray< int > ProductNo, class TArray< struct FString > ProductRowGuid, class TArray< struct FString > ServiceCode, class TArray< struct FString > ProductName, class TArray< struct FString > ProductCode, class TArray< struct FString > ProductType, class TArray< unsigned char > SaleType, class TArray< struct FString > ItemSaleType, class TArray< unsigned char > ISIncludeBonus, class TArray< int > ProductCost, class TArray< int > ProductHour, class TArray< int > ProductQuantity, class TArray< int > TotalQuantity, class TArray< int > ReOrderTerms, class TArray< int > ReorderCount, class TArray< int > PurchaseAvailableQuantity, class TArray< int > AvailableMinLevel, class TArray< int > AvailableMaxLevel, class TArray< unsigned char > AvailableGender, class TArray< int > InventoryKeepDays, class TArray< int > SaleMasterFlag, class TArray< int > SaleStatus, class TArray< struct FString > Description, class TArray< struct FString > Property0, class TArray< struct FString > Property1, class TArray< struct FString > Property2, class TArray< struct FString > Property3, class TArray< struct FString > Property4, class TArray< int > IsGift );		//  GUIWarfare.BTTcpHandlerMed.rfReqNotifyShopItemData
	 bool                      rfAckShopItemData (  );                           		//  GUIWarfare.BTTcpHandlerMed.rfAckShopItemData
	 bool                      rfNotifyClanLevelup ( struct FString ClanName, int Levelup );		//  GUIWarfare.BTTcpHandlerMed.rfNotifyClanLevelup
	 bool                      rfNotifyNewClanName ( struct FString New_NickName );		//  GUIWarfare.BTTcpHandlerMed.rfNotifyNewClanName
	 bool                      rfNotifyNewNickName ( int Community_Type, struct FString Old_NickName, struct FString New_NickName );		//  GUIWarfare.BTTcpHandlerMed.rfNotifyNewNickName
	 bool                      rfAckTencent_StartTenProtect ( int CharDBID );    		//  GUIWarfare.BTTcpHandlerMed.rfAckTencent_StartTenProtect
	 bool                      rfAckMoveToLobby ( unsigned char MessageType );   		//  GUIWarfare.BTTcpHandlerMed.rfAckMoveToLobby
	 bool                      rfAckPopUpMessage ( int MessageType );            		//  GUIWarfare.BTTcpHandlerMed.rfAckPopUpMessage
	 bool                      rfUpdateWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		//  GUIWarfare.BTTcpHandlerMed.rfUpdateWebzenShopScriptVersion
	 bool                      rfAckFriendPosition ( int Result, struct FString TargetCharName, unsigned char ServerType, struct FString fServername, struct FString fServerShortName, struct FString fServerIP, int fServerPort, unsigned char CurPos, unsigned char CurState, int ChannelNum, struct FString ChannelNickName, int GameRoomNum );		//  GUIWarfare.BTTcpHandlerMed.rfAckFriendPosition
	 bool                      rfAckLogOut ( unsigned char Result, unsigned char Reason );		//  GUIWarfare.BTTcpHandlerMed.rfAckLogOut
	 bool                      rfAckNotifyUpdateCharInfo_LevelMark ( struct FString CharName, int LevelMarkID );		//  GUIWarfare.BTTcpHandlerMed.rfAckNotifyUpdateCharInfo_LevelMark
	 bool                      rfAckGetRankingInfoListEnd (  );                  		//  GUIWarfare.BTTcpHandlerMed.rfAckGetRankingInfoListEnd
	 bool                      rfAckGetRankingInfoList ( int Result, unsigned char RankingType, unsigned char CommunityType, class TArray< struct FString > CharName, class TArray< int > CharLevel, class TArray< struct FString > ClanName, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Ranking_Accum, class TArray< int > Ranking_Accum_Prev, class TArray< int > Ranking_Accum_Exp, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTTcpHandlerMed.rfAckGetRankingInfoList
	 bool                      rfAckGetRankingInfoListStart ( int Result, unsigned char RankingType, unsigned char CommunityType, int TotalCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckGetRankingInfoListStart
	 bool                      rfAckCharDetailInfo ( int MaxSerial, int MaxScore, int MaxKill, int MaxAssist, int Serial3, int Serial5, int Serial7, int Serial10, int Serial15, int AR, int SMG, int SR, int SW, int Melee, int Grenade, int FlashBang, int Foot, int AT4, int MG, int Fire, int RPG7, int TimeBomb, int IcendiaryBomb, int ClusterBomb, int ByChopper, int Artillery, int KillChopper, int FirstKill, int LastKill, int AllKill, int Dominate, int InstallBomb, int DefuseBomb );		//  GUIWarfare.BTTcpHandlerMed.rfAckCharDetailInfo
	 bool                      rfAckClanMatchResultHistory ( class TArray< struct FBtrDouble > MatchDate, class TArray< unsigned char > IsWin, class TArray< struct FString > EnemyClanname );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatchResultHistory
	 bool                      rfReqInGameRoomUserInfoChanged (  );              		//  GUIWarfare.BTTcpHandlerMed.rfReqInGameRoomUserInfoChanged
	 bool                      rfAckServerType ( unsigned char Type );           		//  GUIWarfare.BTTcpHandlerMed.rfAckServerType
	 bool                      rfAckClanMatch_ChangeRoomSetting ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, unsigned char IsPublic );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_ChangeRoomSetting
	 bool                      rfAckClanMatch_PublicWaitRoomChanged ( int WaitRoomIdx, struct FString RoomName, int MapNum, int CurUserCount, int MaxUserCount, unsigned char Status, unsigned char IsPublic );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_PublicWaitRoomChanged
	 bool                      rfAckClanMatch_EndPublicWaitRoomList (  );        		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_EndPublicWaitRoomList
	 bool                      rfAckClanMatch_PublicWaitRoomList ( class TArray< int > WaitRoomIdx, class TArray< struct FString > LeaderName, class TArray< struct FString > RoomName, class TArray< int > MapNum, class TArray< int > CurUserCount, class TArray< int > MaxUserCount, class TArray< unsigned char > Status );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_PublicWaitRoomList
	 bool                      rfAckClanMatch_StartPublicWaitRoomList ( int Result, struct FString ErrMsg, int Count );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_StartPublicWaitRoomList
	 bool                      rfAckPaidItem_NotifyChangeClanname ( struct FString NewClanname );		//  GUIWarfare.BTTcpHandlerMed.rfAckPaidItem_NotifyChangeClanname
	 bool                      rfAckPaidItem_ChangeClanname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewCharname );		//  GUIWarfare.BTTcpHandlerMed.rfAckPaidItem_ChangeClanname
	 bool                      rfAckPaidItem_ChangeCharname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewCharname );		//  GUIWarfare.BTTcpHandlerMed.rfAckPaidItem_ChangeCharname
	 bool                      rfAckNotifyEndTutorial ( int UserID, struct FString CharName, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTTcpHandlerMed.rfAckNotifyEndTutorial
	 bool                      rfAckNotifyStartTutorial ( int Result, int UserID );		//  GUIWarfare.BTTcpHandlerMed.rfAckNotifyStartTutorial
	 bool                      rfAckGetMyMailBoxState ( int Result, unsigned char IsFull, int NewMailCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckGetMyMailBoxState
	 bool                      rfAckSetLookForClan ( int Result, struct FString ErrMsg, unsigned char IsLookingFor );		//  GUIWarfare.BTTcpHandlerMed.rfAckSetLookForClan
	 bool                      rfAckRoomUserPingInfo ( class TArray< int > UnqueID, class TArray< int > Ping, int HostPriorityPoint );		//  GUIWarfare.BTTcpHandlerMed.rfAckRoomUserPingInfo
	 bool                      rfAckRecvSystemMsg ( unsigned char CommunityType, struct FSystemMsgParam MsgInfo );		//  GUIWarfare.BTTcpHandlerMed.rfAckRecvSystemMsg
	 bool                      rfAckGMLeaveRoom ( int Result, int RoomNumber, int UserID );		//  GUIWarfare.BTTcpHandlerMed.rfAckGMLeaveRoom
	 bool                      rfAckGMEnterRoom ( int Result, int RoomNumber, int UserID );		//  GUIWarfare.BTTcpHandlerMed.rfAckGMEnterRoom
	 bool                      rfAckForceDisconnectUser_GM ( int Result, struct FString ErrMsg, struct FString CharName );		//  GUIWarfare.BTTcpHandlerMed.rfAckForceDisconnectUser_GM
	 bool                      rfAckNotice_GM ( int Result, struct FString ErrMsg, unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg );		//  GUIWarfare.BTTcpHandlerMed.rfAckNotice_GM
	 bool                      rfAckChangeRoomTitle_GM ( int Result, int RoomNumber, struct FString NewRoomTitle );		//  GUIWarfare.BTTcpHandlerMed.rfAckChangeRoomTitle_GM
	 bool                      rfReqExteriorRoomOwnerInfo ( int RoomNum, struct FString OwnerName, struct FString OwnerIP );		//  GUIWarfare.BTTcpHandlerMed.rfReqExteriorRoomOwnerInfo
	 bool                      rfAckCharBlockInfo ( int Result, struct FBtrDouble ChatBlockStartTime, struct FBtrDouble ChatBlockEndTime, class TArray< struct FBtrDouble > BlockedItemIdx );		//  GUIWarfare.BTTcpHandlerMed.rfAckCharBlockInfo
	 bool                      rfAckQuestGetAvailableEventList ( int Result, struct FString ErrMsg, class TArray< int > QuestID );		//  GUIWarfare.BTTcpHandlerMed.rfAckQuestGetAvailableEventList
	 bool                      rfAckPaidItem_NotifyChangeClanMark ( struct FString ClanName, int Pattern, int BG, int BL );		//  GUIWarfare.BTTcpHandlerMed.rfAckPaidItem_NotifyChangeClanMark
	 bool                      rfAckPaidItem_ChangeClanMark ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckPaidItem_ChangeClanMark
	 bool                      rfAckPaidItem_ClanMarkDupCheck ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckPaidItem_ClanMarkDupCheck
	 bool                      rfAckWebzenBillingUseStorageItem ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID, struct FBtrDouble ItemExtra );		//  GUIWarfare.BTTcpHandlerMed.rfAckWebzenBillingUseStorageItem
	 bool                      rfAckPaidItem_RelayBroadcast ( struct FString CharName, struct FString Msg );		//  GUIWarfare.BTTcpHandlerMed.rfAckPaidItem_RelayBroadcast
	 bool                      rfAckPaidItem_BroadCast ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckPaidItem_BroadCast
	 bool                      rfAckPaidItem_EraseRecord ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int Command, int RemainCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckPaidItem_EraseRecord
	 bool                      rfAckWebzenBillingStorageListEnd (  );            		//  GUIWarfare.BTTcpHandlerMed.rfAckWebzenBillingStorageListEnd
	 bool                      rfAckWebzenBillingStorageList ( class TArray< int > Seq, class TArray< int > ItemSeq, class TArray< int > GroupCode, class TArray< int > ShareFlag, class TArray< int > ProductSeq, class TArray< struct FString > CashName, class TArray< struct FBtrDouble > CashPoint, class TArray< struct FString > SendAccountID, class TArray< struct FString > SendMessage, class TArray< unsigned char > ItemType, class TArray< unsigned char > RelationType, class TArray< int > ProductType, class TArray< int > PriceSeq );		//  GUIWarfare.BTTcpHandlerMed.rfAckWebzenBillingStorageList
	 bool                      rfAckWebzenBillingStorageListStart ( int Result, struct FString ErrMsg, int TotalCount, int TotalPage, int CurPage );		//  GUIWarfare.BTTcpHandlerMed.rfAckWebzenBillingStorageListStart
	 bool                      rfAckRandomBox_Use ( int Result, struct FString ErrMsg, struct FBtrDouble RandomBoxItemIdx, int RandomBxoItemCount, class TArray< int > ItemIDChoose, class TArray< int > PartIDChoose, class TArray< int > PeriodOnChoosenItem, class TArray< int > StackCountOnChoosenItem, class TArray< unsigned char > bHave, class TArray< struct FBtrDouble > ItemIdx, class TArray< struct FBtrDouble > UntilTime, class TArray< int > StackCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckRandomBox_Use
	 bool                      rfAckRegisterMainPCBang ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckRegisterMainPCBang
	 bool                      rfReqIsPaidWebzenPCBang ( unsigned char IsPaid ); 		//  GUIWarfare.BTTcpHandlerMed.rfReqIsPaidWebzenPCBang
	 bool                      rfAckPCBangUserListEnd (  );                      		//  GUIWarfare.BTTcpHandlerMed.rfAckPCBangUserListEnd
	 bool                      rfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, class TArray< unsigned char > IsCombat, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTTcpHandlerMed.rfAckPCBangUserList
	 bool                      rfAckPCBangUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckPCBangUserListStart
	 bool                      rfAckGiftItemByWebzenCash ( int Result, struct FString ErrMsg, int LeftProductCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckGiftItemByWebzenCash
	 bool                      rfAckBuyItemByWebzenCash ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckBuyItemByWebzenCash
	 bool                      rfAckClanMatch_GetClanWaittingRoomInfo ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, struct FString WaitRoomName );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_GetClanWaittingRoomInfo
	 bool                      rfAckGetBotID ( int Result, unsigned char RequestedAFCount, unsigned char RequestedRSACount, class TArray< int > AFBotID, class TArray< int > RSABotID );		//  GUIWarfare.BTTcpHandlerMed.rfAckGetBotID
	 bool                      rfAckRegisteredPCBangInfo ( int Result, struct FString ErrMsg, unsigned char IsRegisteredPCBang, unsigned char IsMainPCBang, struct FString PCBangName );		//  GUIWarfare.BTTcpHandlerMed.rfAckRegisteredPCBangInfo
	 bool                      rfAckWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		//  GUIWarfare.BTTcpHandlerMed.rfAckWebzenShopScriptVersion
	 bool                      rfAckWebzenCash ( int Result, struct FString ErrMsg, struct FBtrDouble PCoinCash, struct FBtrDouble CCoinCash );		//  GUIWarfare.BTTcpHandlerMed.rfAckWebzenCash
	 bool                      rfAckCheckEquipedWeaponDurability ( int Result, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemSlotNum );		//  GUIWarfare.BTTcpHandlerMed.rfAckCheckEquipedWeaponDurability
	 bool                      rfReqClanMatch_InviteCrewResult ( struct FString Invitee, int Result );		//  GUIWarfare.BTTcpHandlerMed.rfReqClanMatch_InviteCrewResult
	 bool                      rfReqClanMatch_RecvInviteCrew ( struct FString Inviter, struct FString ServerIP, int Port, int WaittingID, struct FString Msg, int MapNum, int InviteUserChannelNum, struct FString LeaderName, struct FString RoomName );		//  GUIWarfare.BTTcpHandlerMed.rfReqClanMatch_RecvInviteCrew
	 bool                      rfAckClanMatch_InviteCrew ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_InviteCrew
	 bool                      rfReqDailyQuestNewAvailable ( class TArray< int > ExpiredQuestID, class TArray< int > NewQuestID );		//  GUIWarfare.BTTcpHandlerMed.rfReqDailyQuestNewAvailable
	 bool                      rfReqQuestNewAvailable ( class TArray< int > AchivedQuestID, class TArray< int > NewQuestID, class TArray< unsigned char > IsDailyQuest, class TArray< int > ExpiredQuest );		//  GUIWarfare.BTTcpHandlerMed.rfReqQuestNewAvailable
	 bool                      rfAckQuestUpdate ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckQuestUpdate
	 bool                      rfAckQuestListEnd (  );                           		//  GUIWarfare.BTTcpHandlerMed.rfAckQuestListEnd
	 bool                      rfAckQuestList ( class TArray< int > QuestID, class TArray< int > CountPrograss, class TArray< unsigned char > IsDailyQuest );		//  GUIWarfare.BTTcpHandlerMed.rfAckQuestList
	 bool                      rfAckQuestListStart ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckQuestListStart
	 bool                      rfAckClanMatch_SetWaitRoomPublic ( int Result, struct FString ErrMsg, unsigned char Set );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_SetWaitRoomPublic
	 bool                      rfAckClanMatch_StopSearching (  );                		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_StopSearching
	 bool                      rfReqClanMatch_FoundMatch ( int ChannelID, int RoomNumber );		//  GUIWarfare.BTTcpHandlerMed.rfReqClanMatch_FoundMatch
	 bool                      rfAckClanMatch_FoundMatch (  );                   		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_FoundMatch
	 bool                      rfAckClanMatch_NotifyStartSearching ( int ShouldWaitMore );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_NotifyStartSearching
	 bool                      rfAckClanMatch_StartSearching ( int Result, struct FString ErrMsg, int ShouldWaitMore );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_StartSearching
	 bool                      rfAckClanMatch_ChangeLeader ( int Result, struct FString ErrMsg, int NewLeader, struct FString NewLeaderName );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_ChangeLeader
	 bool                      rfAckClanMatch_WaittingTeamList ( int TtotlCount, class TArray< int > Grade, class TArray< int > Map, class TArray< int > Versus );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_WaittingTeamList
	 bool                      rfAckClanMatch_Chat ( int Result, struct FString ErrMsg, struct FString CharName, struct FString Msg );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_Chat
	 bool                      rfAckClanMatch_Leave ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_Leave
	 bool                      rfAckClanMatch_MemberList ( class TArray< unsigned char > IsLeader, class TArray< int > ClanMarkPA, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< struct FString > ClanName, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_MemberList
	 bool                      rfAckClanMatch_LeaveNotify ( struct FString CharName );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_LeaveNotify
	 bool                      rfAckClanMatch_JoinNotify ( unsigned char IsLeader, int ClanMarkPA, int ClanMarkBG, int ClanMarkBL, int Level, struct FString CharName, int ClanGrade, int ClanWin, int ClanLose, struct FString ClanName, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_JoinNotify
	 bool                      rfAckClanMatch_Join ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_Join
	 bool                      rfAckClanMatch_NotifiyStartCombat ( class TArray< int > MapNumArray, int VersusMode );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_NotifiyStartCombat
	 bool                      rfAckClanMatch_StartCombat ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_StartCombat
	 bool                      rfAckClanMatch_GetReady ( int Result, struct FString ErrMsg, int RoomIndex );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanMatch_GetReady
	 bool                      rfAckLimitedListInChannel ( int Result, class TArray< int > LimitedMapID, class TArray< int > LimitedModeID );		//  GUIWarfare.BTTcpHandlerMed.rfAckLimitedListInChannel
	 bool                      rfAckRecvInviteGameRoomResult ( int Result );     		//  GUIWarfare.BTTcpHandlerMed.rfAckRecvInviteGameRoomResult
	 bool                      rfReqRecvInviteGameRoom ( struct FString InviteUserServerName, int InviteUserServerID, int InviteUserChannelNumber, struct FString RoomUniqueID, int RoomNumber, struct FString RoomName, unsigned char RoomState, struct FString MapName, struct FString OwnerName, unsigned char GameMode, unsigned char WeaponLimit, unsigned char IsTeamBalance, struct FString Password, struct FString InviteCharName );		//  GUIWarfare.BTTcpHandlerMed.rfReqRecvInviteGameRoom
	 bool                      rfAckInviteGameRoom ( int Result, unsigned char Answer, struct FString GuestCharName );		//  GUIWarfare.BTTcpHandlerMed.rfAckInviteGameRoom
	 bool                      rfAckAutoChangedTeamUserList ( class TArray< int > UserID, class TArray< int > TeamNum );		//  GUIWarfare.BTTcpHandlerMed.rfAckAutoChangedTeamUserList
	 bool                      rfAckGetItemFromItemBox ( int Result, struct FString ErrMsg, int ItemIDChoose, int PartIDChoose, struct FBtrDouble BoxItemIdx, int BxoItemCount, unsigned char bHave, struct FBtrDouble ItemIdx, struct FBtrDouble UntilTime, int StackCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckGetItemFromItemBox
	 bool                      rfAckItemListInItemBox ( int Result, struct FString ErrMsg, struct FBtrDouble ItemUniqueID, int BoxItemID, class TArray< int > ItemID, class TArray< int > PartID );		//  GUIWarfare.BTTcpHandlerMed.rfAckItemListInItemBox
	 bool                      rfReqRecvForceFailedClientLoading ( int ErrCode );		//  GUIWarfare.BTTcpHandlerMed.rfReqRecvForceFailedClientLoading
	 bool                      rfAckStartHolePunching ( int Result, struct FString ErrMsg, int GameType, int ReqStartUserID );		//  GUIWarfare.BTTcpHandlerMed.rfAckStartHolePunching
	 bool                      eventrfAckRegisterMyUdpInfo ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] GUIWarfare.BTTcpHandlerMed.rfAckRegisterMyUdpInfo
	 bool                      rfAckNotifyMyCharInfoToRoomUser ( int Result, struct FString ErrMsg, int UID, struct FString UserName, int Grade, int TeamNum, unsigned char Statue, unsigned char IsHost, struct FString UserIP, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, unsigned char IsLookFor );		//  GUIWarfare.BTTcpHandlerMed.rfAckNotifyMyCharInfoToRoomUser
	 bool                      rfReqNotifyDisconnectHostInLoading ( int Result, struct FString ErrMsg, int HostID );		//  GUIWarfare.BTTcpHandlerMed.rfReqNotifyDisconnectHostInLoading
	 bool                      rfReqRecvForceDisconnected_FromGM ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfReqRecvForceDisconnected_FromGM
	 bool                      rfReqRecvNotice_FromGM ( int Result, struct FString ErrMsg, class TArray< struct FString > NoticeMsg, unsigned char IsFromDB );		//  GUIWarfare.BTTcpHandlerMed.rfReqRecvNotice_FromGM
	 bool                      rfAckJoinClan ( int Result, struct FString ErrMsg, struct FString SpecificCharName, struct FString RealRecvCharName, unsigned char RealRecvCharClanGrade );		//  GUIWarfare.BTTcpHandlerMed.rfAckJoinClan
	 bool                      rfAckExceedMaxUser (  );                          		//  GUIWarfare.BTTcpHandlerMed.rfAckExceedMaxUser
	 bool                      rfAckChannelUserListInGameRoom ( int Result, int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > CharName, class TArray< int > UserLevel, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< unsigned char > IsLookForClan, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTTcpHandlerMed.rfAckChannelUserListInGameRoom
	 bool                      rfReqRecvDeleteFriend ( int Result, struct FString FromCharName );		//  GUIWarfare.BTTcpHandlerMed.rfReqRecvDeleteFriend
	 bool                      rfAckDeleteFriend ( int Result, class TArray< struct FString > FailedCharname );		//  GUIWarfare.BTTcpHandlerMed.rfAckDeleteFriend
	 bool                      rfAckChatWispher ( int Result, struct FString ErrMsg, struct FString ToCharName );		//  GUIWarfare.BTTcpHandlerMed.rfAckChatWispher
	 bool                      rfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTTcpHandlerMed.rfAckNotifyAdjustClanMemberGrade
	 bool                      rfReqNotifyDurabilityZeroItem ( int Result, struct FString ErrMsg, int UserID, class TArray< struct FBtrDouble > ItemUniqueIDs, class TArray< int > ItemIDs, class TArray< int > ItemPartIDs, class TArray< unsigned char > ItemSlotPos );		//  GUIWarfare.BTTcpHandlerMed.rfReqNotifyDurabilityZeroItem
	 bool                      rfAckAcquirePromotionItems ( int UID, int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemIDs, class TArray< int > PartIDs );		//  GUIWarfare.BTTcpHandlerMed.rfAckAcquirePromotionItems
	 bool                      rfReqNotifyLevelUp ( int LevelUpUserID, int Level, int Exp, class TArray< int > ItemID, class TArray< int > PartID );		//  GUIWarfare.BTTcpHandlerMed.rfReqNotifyLevelUp
	 bool                      rfAckBlockUserList ( class TArray< struct FString > CharName );		//  GUIWarfare.BTTcpHandlerMed.rfAckBlockUserList
	 bool                      rfAckRemoveBlockUserList ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckRemoveBlockUserList
	 bool                      rfAckBlockUserListEnd (  );                       		//  GUIWarfare.BTTcpHandlerMed.rfAckBlockUserListEnd
	 bool                      rfAckAddBlockUserList ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckAddBlockUserList
	 bool                      rfAckBlockUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckBlockUserListStart
	 bool                      rfAckAdjustClanMemberGrade ( int Result, struct FString ErrMsg, struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTTcpHandlerMed.rfAckAdjustClanMemberGrade
	 bool                      rfReqClanCharPersonelIntro ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTTcpHandlerMed.rfReqClanCharPersonelIntro
	 bool                      rfAckRecvJoinClanResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckRecvJoinClanResult
	 bool                      rfAckJoinClanResult ( struct FString ClanName, unsigned char Permit, struct FString PermitCharName );		//  GUIWarfare.BTTcpHandlerMed.rfAckJoinClanResult
	 bool                      rfAckNotifyClanSecession ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTTcpHandlerMed.rfAckNotifyClanSecession
	 bool                      rfAckNotifyNewClanMember ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTTcpHandlerMed.rfAckNotifyNewClanMember
	 bool                      rfReqRecvJoinClan ( int UserIdx, struct FString CharName, struct FString Message );		//  GUIWarfare.BTTcpHandlerMed.rfReqRecvJoinClan
	 bool                      rfAckRecvClanInviteResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckRecvClanInviteResult
	 bool                      rfAckInviteClanResult ( struct FString CharName, unsigned char Permit, struct FString ClanNm );		//  GUIWarfare.BTTcpHandlerMed.rfAckInviteClanResult
	 bool                      rfAckInviteClan ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckInviteClan
	 bool                      rfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		//  GUIWarfare.BTTcpHandlerMed.rfReqRecvClanInvite
	 bool                      rfAckGetIsHostBlocking ( int Result, unsigned char Blocking );		//  GUIWarfare.BTTcpHandlerMed.rfAckGetIsHostBlocking
	 bool                      rfAckNotifyHostBlocking ( int Result, unsigned char Blocking );		//  GUIWarfare.BTTcpHandlerMed.rfAckNotifyHostBlocking
	 bool                      rfAckGetHolePunchingResult ( int Result, unsigned char Phrase, int InterventionUserID, unsigned char Intervention, class TArray< int > FailedUserIDs );		//  GUIWarfare.BTTcpHandlerMed.rfAckGetHolePunchingResult
	 bool                      rfAckGetUserHostPriorityPoint ( int Result, int UserID, int HostPriorityPoint );		//  GUIWarfare.BTTcpHandlerMed.rfAckGetUserHostPriorityPoint
	 bool                      rfReqNotifyRelayServerAddr ( struct FString RelayIP, int RelayPort );		//  GUIWarfare.BTTcpHandlerMed.rfReqNotifyRelayServerAddr
	 bool                      rfReqRecvForceDisconnectUDPFromHost ( int Result );		//  GUIWarfare.BTTcpHandlerMed.rfReqRecvForceDisconnectUDPFromHost
	 bool                      rfAckForceDisconnectUDPFromHost ( int Result );   		//  GUIWarfare.BTTcpHandlerMed.rfAckForceDisconnectUDPFromHost
	 bool                      rfReqNotifyChangeRoomState ( unsigned char RoomState );		//  GUIWarfare.BTTcpHandlerMed.rfReqNotifyChangeRoomState
	 bool                      rfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanCharPersonelIntro
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTTcpHandlerMed.rfAckDBCharInfo
	 bool                      rfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel );		//  GUIWarfare.BTTcpHandlerMed.rfAckSearchClan
	 bool                      rfAckClanPersonelIntro ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanPersonelIntro
	 bool                      rfAckClanChangeInfo ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanChangeInfo
	 bool                      rfAckClanSecession ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanSecession
	 bool                      rfAckClanClose ( int Result, struct FString ErrMsg, struct FString ClanName );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanClose
	 bool                      rfAckClanNews ( class TArray< struct FString > IssueDate, class TArray< unsigned char > IssueType, class TArray< struct FString > IssuedClanMember );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanNews
	 bool                      rfAckClanUserListEnd (  );                        		//  GUIWarfare.BTTcpHandlerMed.rfAckClanUserListEnd
	 bool                      rfAckClanUserList ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< int > ClanWinCnt, class TArray< int > ClanLoseCnt, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > DudeId );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanUserList
	 bool                      rfAckClanUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckClanUserListStart
	 bool                      rfAckClanInfo ( struct FClanInfo stClanInfo );    		//  GUIWarfare.BTTcpHandlerMed.rfAckClanInfo
	 bool                      rfAckDupCheckClanName ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckDupCheckClanName
	 bool                      rfAckCreateClan ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckCreateClan
	 bool                      rfAckGetServerTime ( struct FBtrDouble ServerTime, struct FString ClientIP );		//  GUIWarfare.BTTcpHandlerMed.rfAckGetServerTime
	 bool                      rfAckMyMoney ( int Result, struct FString ErrMsg, int Point, int Cash );		//  GUIWarfare.BTTcpHandlerMed.rfAckMyMoney
	 bool                      rfAckBanUser ( int GameNum, int UID, int BanUID, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckBanUser
	 bool                      rfAckNotifyExpiredSkillIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredSkillUniqueIDs, class TArray< int > ExpiredSkillIDs, int Result, struct FString ErrMsg, class TArray< unsigned char > ExpiredSkillSlotPositions );		//  GUIWarfare.BTTcpHandlerMed.rfAckNotifyExpiredSkillIDs
	 bool                      rfAckNotifyExpiredItemIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredItemUniqueIDs, class TArray< int > ExpiredItemIDs, class TArray< int > ExpiredItemPartIDs, class TArray< unsigned char > ExpiredItemSlotPos, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckNotifyExpiredItemIDs
	 bool                      rfAckGetAttachedItemFromMemo ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID );		//  GUIWarfare.BTTcpHandlerMed.rfAckGetAttachedItemFromMemo
	 bool                      eventrfAckDeleteMailAll ( int Result, unsigned char MailType, int Count );		// [ FUNC_Event ] GUIWarfare.BTTcpHandlerMed.rfAckDeleteMailAll
	 bool                      eventrfAckDelMemo ( int Result, struct FString ErrMsg, class TArray< int > FailedMemoID );		// [ FUNC_Event ] GUIWarfare.BTTcpHandlerMed.rfAckDelMemo
	 bool                      rfAckSendMemo ( class TArray< struct FString > CnamesToFail, class TArray< int > ResultArray );		//  GUIWarfare.BTTcpHandlerMed.rfAckSendMemo
	 bool                      rfAckAuctionBidding ( int Result, struct FString ErrMsg, int PointRemain );		//  GUIWarfare.BTTcpHandlerMed.rfAckAuctionBidding
	 bool                      rfAckAuctionTradeHistory ( int Result, struct FString ErrMsg, int ItemID, int PartID, class TArray< struct FString > SellerCharNm, class TArray< int > DamageDegree, class TArray< int > Price );		//  GUIWarfare.BTTcpHandlerMed.rfAckAuctionTradeHistory
	 bool                      rfAckSendGift ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain );		//  GUIWarfare.BTTcpHandlerMed.rfAckSendGift
	 bool                      rfAckRecvMemo ( struct FString cnameFrom, unsigned char MemoType );		//  GUIWarfare.BTTcpHandlerMed.rfAckRecvMemo
	 bool                      rfAckReadMemo ( struct FString cnameFrom, struct FString Text, struct FString dateRecv, struct FBtrDouble ItemUID );		//  GUIWarfare.BTTcpHandlerMed.rfAckReadMemo
	 bool                      rfAckEndMemoList (  );                            		//  GUIWarfare.BTTcpHandlerMed.rfAckEndMemoList
	 bool                      rfAckTestDouble ( struct FBtrDouble vDouble, class TArray< struct FBtrDouble > vDoubles );		//  GUIWarfare.BTTcpHandlerMed.rfAckTestDouble
	 bool                      rfAckMemoList ( class TArray< int > MemoIdx, class TArray< struct FString > cnameFrom, class TArray< struct FString > dateRecv, class TArray< struct FString > Text, class TArray< unsigned char > Status, class TArray< int > UntilExpire, class TArray< struct FBtrDouble > ItemUID, class TArray< int > ItemID, class TArray< unsigned char > MsgType, class TArray< int > ItemPartID );		//  GUIWarfare.BTTcpHandlerMed.rfAckMemoList
	 bool                      rfAckStartMemoList ( int Result, struct FString ErrMsg, unsigned char Type, int TotalCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckStartMemoList
	 bool                      rfAckFriendListEnd (  );                          		//  GUIWarfare.BTTcpHandlerMed.rfAckFriendListEnd
	 bool                      rfAckFriendList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > LevelMarkID, class TArray< int > ClanLevel, class TArray< int > Level, class TArray< unsigned char > IsLookForClan );		//  GUIWarfare.BTTcpHandlerMed.rfAckFriendList
	 bool                      rfAckFriendListStart ( int Result, int TotalCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckFriendListStart
	 bool                      rfReqCompleteFriendInvite ( struct FString CharnameToBeInvited, unsigned char IsPermit );		//  GUIWarfare.BTTcpHandlerMed.rfReqCompleteFriendInvite
	 bool                      rfAckConfirmFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckConfirmFriendInvite
	 bool                      rfReqRecvFriendInvite ( int ReqUserID, struct FString ReqCharname, struct FString InviteMsg );		//  GUIWarfare.BTTcpHandlerMed.rfReqRecvFriendInvite
	 bool                      rfAckSendFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckSendFriendInvite
	 bool                      rfAckNotifyLoadingState ( int Result, int UserID, unsigned char LoadingState );		//  GUIWarfare.BTTcpHandlerMed.rfAckNotifyLoadingState
	 bool                      rfAckFailedStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, int FailedUserID, int LoadingStep );		//  GUIWarfare.BTTcpHandlerMed.rfAckFailedStartGame
	 bool                      rfAckSuccessStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, struct FString HostIP, int HostPort, int LoadingStep );		//  GUIWarfare.BTTcpHandlerMed.rfAckSuccessStartGame
	 bool                      rfAckHash ( int Result, struct FString Error );   		//  GUIWarfare.BTTcpHandlerMed.rfAckHash
	 bool                      rfReqForceLogoutByOwner (  );                     		//  GUIWarfare.BTTcpHandlerMed.rfReqForceLogoutByOwner
	 bool                      ForceLogout_OnOK ( class UGUIComponent* Sender ); 		//  GUIWarfare.BTTcpHandlerMed.ForceLogout_OnOK
	 bool                      rfAckSellShopItemInfo ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueItemID, int SellPoint, int CurPoint, int AfterPoint );		//  GUIWarfare.BTTcpHandlerMed.rfAckSellShopItemInfo
	 bool                      rfReqRecvChatWispher ( struct FString CharnameFrom, struct FString Message );		//  GUIWarfare.BTTcpHandlerMed.rfReqRecvChatWispher
	 bool                      rfAckServerTime ( int Time );                     		//  GUIWarfare.BTTcpHandlerMed.rfAckServerTime
	 bool                      rfAckGameOverEnd ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckGameOverEnd
	 bool                      rfAckRepairItem ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, int RepairCost, class TArray< int > DamageDegree );		//  GUIWarfare.BTTcpHandlerMed.rfAckRepairItem
	 bool                      rfAckRepairCost ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > RepairCost );		//  GUIWarfare.BTTcpHandlerMed.rfAckRepairCost
	 bool                      eventrfAckUpdateWeaponDurability ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > Durability, class TArray< unsigned char > IsDestroy, class TArray< struct FBtrDouble > FailedWeaponUniqueID );		// [ FUNC_Event ] GUIWarfare.BTTcpHandlerMed.rfAckUpdateWeaponDurability
	 bool                      rfAckEntryQSlotUniqueIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< struct FBtrDouble > TW2UniqueID );		//  GUIWarfare.BTTcpHandlerMed.rfAckEntryQSlotUniqueIDList
	 bool                      rfAckEntryQSlotIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< int > TWItemID1, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID );		//  GUIWarfare.BTTcpHandlerMed.rfAckEntryQSlotIDList
	 bool                      rfAckUpdateQSlot ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckUpdateQSlot
	 bool                      rfAckQSlotList ( int Result, struct FString ErrMsg, class TArray< int > QSlotID, class TArray< struct FString > QSlotName, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWItemID, class TArray< struct FBtrDouble > PistolItemID, class TArray< struct FBtrDouble > TWItemID1, class TArray< struct FBtrDouble > TWItemID2, class TArray< int > Skill1, class TArray< int > Skill2, class TArray< int > Skill3, class TArray< int > Skill4 );		//  GUIWarfare.BTTcpHandlerMed.rfAckQSlotList
	 bool                      rfAckModifyWeapon ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueID, int AddPartID, int PaintID, int Point, int Cash );		//  GUIWarfare.BTTcpHandlerMed.rfAckModifyWeapon
	 bool                      rfAckSellShopItem ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain, int Count );		//  GUIWarfare.BTTcpHandlerMed.rfAckSellShopItem
	 bool                      rfAckBuyShopItem ( int ItemCount, class TArray< int > Result, class TArray< int > BoughtItemTypeID, class TArray< struct FBtrDouble > BoughtItemUniqueID, class TArray< int > BoughtPartID, class TArray< struct FBtrDouble > BoughtUntilTIme, class TArray< int > BoughtStackCnt, int PointRemain, int CashRemain );		//  GUIWarfare.BTTcpHandlerMed.rfAckBuyShopItem
	 bool                      rfAckShopItemListEnd (  );                        		//  GUIWarfare.BTTcpHandlerMed.rfAckShopItemListEnd
	 bool                      rfAckShopItemList ( class TArray< int > ItemID ); 		//  GUIWarfare.BTTcpHandlerMed.rfAckShopItemList
	 bool                      rfAckShopItemListStart ( int Count );             		//  GUIWarfare.BTTcpHandlerMed.rfAckShopItemListStart
	 bool                      rfReqConfirmSkillChanged (  );                    		//  GUIWarfare.BTTcpHandlerMed.rfReqConfirmSkillChanged
	 bool                      rfAckEquipSkill ( int ChangedNewSkillID, int ChangedNewSkillUniqueID, unsigned char ChangedNewSlotPosition, int ChangedOldSkillID, int ChangedOldSkillUniqueID, unsigned char ChangedOldSlotPosition, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckEquipSkill
	 bool                      rfAckEntrySkillList ( class TArray< int > UserIDs, class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckEntrySkillList
	 bool                      rfAckUserSkillListEnd (  );                       		//  GUIWarfare.BTTcpHandlerMed.rfAckUserSkillListEnd
	 bool                      rfAckUserSkillList ( class TArray< int > UniqueSkillID, class TArray< int > SkillID, class TArray< struct FBtrDouble > UntilTime, class TArray< unsigned char > SlotPosition );		//  GUIWarfare.BTTcpHandlerMed.rfAckUserSkillList
	 bool                      rfAckUserSkillListStart ( int Count, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckUserSkillListStart
	 bool                      rfAckGetBootyChoose ( int Result, struct FString ErrMsg, unsigned char GiveType, struct FBtrDouble ItemUniqueNumber, int ItemID, int PartID, unsigned char ItemType, struct FBtrDouble UntilTime, int StackCount, int PaintID );		//  GUIWarfare.BTTcpHandlerMed.rfAckGetBootyChoose
	 bool                      rfAckGetBooty ( int Result, struct FString ErrMsg, class TArray< int > PrizeWinUserID, class TArray< int > BootyItemID, class TArray< int > BootyPartsID );		//  GUIWarfare.BTTcpHandlerMed.rfAckGetBooty
	 bool                      rfAckForceGameOver ( int UserID, int GameRoomNumber, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckForceGameOver
	 bool                      rfAckEntryItemList ( class TArray< int > UserIDs, class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< struct FBtrDouble > UniqueID, class TArray< int > PaintID, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckEntryItemList
	 bool                      rfAckRegisterOtherUdpInfo ( int UID, struct FString IP, int Port, unsigned char NatType, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort );		//  GUIWarfare.BTTcpHandlerMed.rfAckRegisterOtherUdpInfo
	 bool                      rfReqForceNatTypeSetting ( int NatType );         		//  GUIWarfare.BTTcpHandlerMed.rfReqForceNatTypeSetting
	 bool                      rfReqStartNatDiag ( struct FString Server1Addr, int Server1Port, struct FString Server2Addr, int Server2Port );		//  GUIWarfare.BTTcpHandlerMed.rfReqStartNatDiag
	 bool                      rfAckChangeUserState ( int Result, struct FString ErrMsg, class TArray< int > UserIDs, class TArray< unsigned char > Positions, class TArray< int > Numbers, class TArray< unsigned char > OldStates, class TArray< unsigned char > NewStates );		//  GUIWarfare.BTTcpHandlerMed.rfAckChangeUserState
	 bool                      rfReqExteriorRoomState ( int RoomNumber, unsigned char RoomState );		//  GUIWarfare.BTTcpHandlerMed.rfReqExteriorRoomState
	 bool                      rfReqExteriorRoomUserCount ( int RoomNumber, int RoomUserCount );		//  GUIWarfare.BTTcpHandlerMed.rfReqExteriorRoomUserCount
	 bool                      rfReqExteriorRoomInfo ( int SP, int RoomNumber, unsigned char IsPW, struct FString RoomName, struct FString MapName, struct FString ModeName, int MapNum, int ModeNum, unsigned char IsTeamBalance, int MaxUserCount, int RoomUserCount, unsigned char RoomState, unsigned char BotDifficult, unsigned char WeaponLimit, unsigned char BotModeUserTeamNum );		//  GUIWarfare.BTTcpHandlerMed.rfReqExteriorRoomInfo
	 bool                      rfAckCharInfo ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FCharInfo stCharInfo, unsigned char InClanRank, int ClanLevel );		//  GUIWarfare.BTTcpHandlerMed.rfAckCharInfo
	 bool                      rfAckConfirmItemChanged ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckConfirmItemChanged
	 bool                      rfAckEquipItem ( int ChangedNewItemID, struct FBtrDouble ChangedNewUniqueID, int ChangedNewSlotPosition, int ChangedOldItemID, struct FBtrDouble ChangedOldUniqueID, int ChangedOldSlotPosition, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckEquipItem
	 bool                      rfAckChangeRoomSetting ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		//  GUIWarfare.BTTcpHandlerMed.rfAckChangeRoomSetting
	 bool                      rfAckUpdateScore ( class TArray< int > UserIDs, class TArray< struct FString > NickNames, class TArray< unsigned char > TeamIDs, class TArray< int > Scores, class TArray< int > Kills, class TArray< int > Assists, class TArray< int > Deaths, class TArray< int > EXPs, class TArray< int > EXPBonuses, class TArray< int > Points, class TArray< int > PointBonuses, class TArray< int > TeamScores, class TArray< int > BonusOwnerID, class TArray< int > BonusID );		//  GUIWarfare.BTTcpHandlerMed.rfAckUpdateScore
	 bool                      rfAckConnectGame ( int UserID, int Result );      		//  GUIWarfare.BTTcpHandlerMed.rfAckConnectGame
	 bool                      rfAckMyEquipedQSlotList ( class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< int > TWItemID1, class TArray< struct FBtrDouble > TW2UniqueID, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID, int Result );		//  GUIWarfare.BTTcpHandlerMed.rfAckMyEquipedQSlotList
	 bool                      rfAckMyEquipedSkillList ( class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result );		//  GUIWarfare.BTTcpHandlerMed.rfAckMyEquipedSkillList
	 bool                      rfAckMyEquipedItemList ( class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< int > PaintID, class TArray< struct FBtrDouble > UniqueID, int Result );		//  GUIWarfare.BTTcpHandlerMed.rfAckMyEquipedItemList
	 bool                      rfAckChangeNewGuest ( struct FString HostIP );    		//  GUIWarfare.BTTcpHandlerMed.rfAckChangeNewGuest
	 bool                      rfAckChangeHost ( unsigned char ClientNum );      		//  GUIWarfare.BTTcpHandlerMed.rfAckChangeHost
	 bool                      rfAckChangeRoomOwner ( int GameNum, int OldOwner, int NewOwner, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckChangeRoomOwner
	 bool                      rfAckDisconnectGame ( int Result, int DisconnectUserID, struct FString DisconnectUserName );		//  GUIWarfare.BTTcpHandlerMed.rfAckDisconnectGame
	 bool                      rfReqRelayServerOff (  );                         		//  GUIWarfare.BTTcpHandlerMed.rfReqRelayServerOff
	 bool                      rfReqRelayServerOn ( struct FString RelayServerIP, int RelayServerPortNum );		//  GUIWarfare.BTTcpHandlerMed.rfReqRelayServerOn
	 bool                      rfAckGameRoomInfo ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		//  GUIWarfare.BTTcpHandlerMed.rfAckGameRoomInfo
	 bool                      rfAckGameOver ( int UID, int GameRoomNumber, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckGameOver
	 bool                      rfAckChangeGameMode ( int GameNum, int UID, struct FString GameMode, unsigned char GameModeNum, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckChangeGameMode
	 bool                      rfAckSelectMap ( int GameNum, int UID, struct FString MapName, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckSelectMap
	 bool                      rfAckIsGameRoomPlaying ( int GameRoomNum, unsigned char IsPlaying );		//  GUIWarfare.BTTcpHandlerMed.rfAckIsGameRoomPlaying
	 bool                      rfAckGameRoomDestroy ( int GameRoomNum );         		//  GUIWarfare.BTTcpHandlerMed.rfAckGameRoomDestroy
	 bool                      rfAckStartGame ( int GameNumber, int ClientsCount, int StartSeed, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckStartGame
	 bool                      rfAckGameHostInfo ( int GameNumber, struct FString UserID, struct FString IP, int Port, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckGameHostInfo
	 bool                      rfAckChangeTeam ( int GameNumber, struct FString UserID, int UID, int TeamNum, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckChangeTeam
	 bool                      rfAckCreateGameRoom ( int Result, struct FString ErrMsg, int UserID, struct FString RoomOwnerIP, struct FGameRoomInfo NetRoomInfo );		//  GUIWarfare.BTTcpHandlerMed.rfAckCreateGameRoom
	 bool                      rfAckLeaveRoom ( int Num, int UID, struct FString UserID, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckLeaveRoom
	 bool                      rfAckRoomUserList ( class TArray< int > UID, class TArray< struct FString > UserName, class TArray< int > Grade, class TArray< int > TeamNum, class TArray< unsigned char > Statue, class TArray< unsigned char > IsHost, class TArray< struct FString > UserIP, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< unsigned char > IsLookingFor, class TArray< int > GMUID, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTTcpHandlerMed.rfAckRoomUserList
	 bool                      rfAckEnterRoom ( int GameNum, int OwnerID, int UID, struct FString UserID, int TeamNum, int Grade, struct FString UserIP, struct FString ClanName, int Clan_Mark_Pattern, int Clan_Mark_BG, int Clan_Mark_BL, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTTcpHandlerMed.rfAckEnterRoom
	 bool                      rfAckChatClan ( struct FString CharName, struct FString Message, int Result );		//  GUIWarfare.BTTcpHandlerMed.rfAckChatClan
	 bool                      rfAckChatNormal ( int id, struct FString Sender, struct FString Message, int Result );		//  GUIWarfare.BTTcpHandlerMed.rfAckChatNormal
	 bool                      rfAckRoomListEnd (  );                            		//  GUIWarfare.BTTcpHandlerMed.rfAckRoomListEnd
	 bool                      rfAckRoomList ( class TArray< int > GameNum, class TArray< struct FString > Title, class TArray< struct FString > MapName, class TArray< int > MapNum, class TArray< unsigned char > UserCount, class TArray< unsigned char > MaxCount, class TArray< struct FString > ModeName, class TArray< int > ModeNum, class TArray< unsigned char > WeaponLimit, class TArray< unsigned char > IsHardCore, class TArray< unsigned char > Status, class TArray< struct FString > RoomOwnerIP, class TArray< int > GameMinute, class TArray< struct FString > RoomOwnerName, class TArray< unsigned char > IsSpecial, class TArray< unsigned char > IsPassword, class TArray< unsigned char > BotDifficult, class TArray< unsigned char > BotModeUserTeamNum );		//  GUIWarfare.BTTcpHandlerMed.rfAckRoomList
	 bool                      rfAckRoomListStart ( int Result, int TotalCount, int Count, int StartIndex );		//  GUIWarfare.BTTcpHandlerMed.rfAckRoomListStart
	 bool                      rfAckChannelUserList ( int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > UserID, class TArray< int > UserLevels, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, int Result, struct FString ErrMsg, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTTcpHandlerMed.rfAckChannelUserList
	 bool                      rfAckLogin2 ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FBtrDouble CurServerTime, int CharDBID, unsigned char IsGM );		//  GUIWarfare.BTTcpHandlerMed.rfAckLogin2
	 bool                      rfAckLeaveChannel ( int Result, struct FString UserID, int UID );		//  GUIWarfare.BTTcpHandlerMed.rfAckLeaveChannel
	 bool                      rfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTTcpHandlerMed.rfAckEnterChannel
	 bool                      rfAckChannelList ( class TArray< int > id, class TArray< struct FString > Title, class TArray< int > CurUser, class TArray< int > MaxUser );		//  GUIWarfare.BTTcpHandlerMed.rfAckChannelList
	 bool                      rfAckAuctionInstantlyBuying ( int Result, struct FString ErrMsg, int PointRemain );		//  GUIWarfare.BTTcpHandlerMed.rfAckAuctionInstantlyBuying
	 bool                      rfAckAuctionMyItemCancel ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckAuctionMyItemCancel
	 bool                      rfAckAuctionItemListEnd ( unsigned char Section );		//  GUIWarfare.BTTcpHandlerMed.rfAckAuctionItemListEnd
	 bool                      rfAckAuctionItemList ( unsigned char Section, class TArray< int > UniqueIDs, class TArray< int > ItemIDs, class TArray< int > AddPartsIDs, class TArray< struct FBtrDouble > UntilTimes, class TArray< int > BiddingPrices, class TArray< int > InstantlyByuingPrices, class TArray< int > ItemDamageds, class TArray< struct FString > HighestBidderNames, class TArray< struct FString > SellerNames, class TArray< int > ItemCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckAuctionItemList
	 bool                      rfAckAuctionItemListStart ( int Result, struct FString ErrMsg, unsigned char Section, int PageNum, int Count );		//  GUIWarfare.BTTcpHandlerMed.rfAckAuctionItemListStart
	 bool                      rfAckAuctionItemListCount ( int Result, struct FString ErrMsg, unsigned char Section, unsigned char Classfy, int ItemType, int ItemGrade, int Count );		//  GUIWarfare.BTTcpHandlerMed.rfAckAuctionItemListCount
	 bool                      rfAckAuctionMyItemRegister ( int Result, struct FString ErrMsg, int BeginPrice, int BuyPrice, int GuarantyPoint, int PointRemain );		//  GUIWarfare.BTTcpHandlerMed.rfAckAuctionMyItemRegister
	 bool                      rfAckItemListEnd (  );                            		//  GUIWarfare.BTTcpHandlerMed.rfAckItemListEnd
	 bool                      rfAckItemList ( class TArray< struct FBtrDouble > UniqueID, class TArray< int > ItemID, class TArray< int > ItemType, class TArray< int > Durability, class TArray< struct FBtrDouble > UntilTime, class TArray< int > SlotPosition, class TArray< int > AddPartsID, class TArray< int > DamageDegree, class TArray< unsigned char > ItemState, class TArray< int > StackCount, class TArray< int > PaintID, class TArray< int > TradeCount );		//  GUIWarfare.BTTcpHandlerMed.rfAckItemList
	 bool                      rfAckItemListStart ( int Count, int Result, struct FString ErrMsg );		//  GUIWarfare.BTTcpHandlerMed.rfAckItemListStart
	 bool                      rfAckLogin ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, struct FCharInfo btCharInfo );		//  GUIWarfare.BTTcpHandlerMed.rfAckLogin
	 void                      OnError ( int ErrCode );                          		//  GUIWarfare.BTTcpHandlerMed.OnError
	 void                      OnClose ( int ErrCode );                          		//  GUIWarfare.BTTcpHandlerMed.OnClose
	 void                      OnConnect ( int ErrCode );                        		//  GUIWarfare.BTTcpHandlerMed.OnConnect
}; // Size: 0x0004

// Class GUIWarfare.BTLabelNoticeHK
class DLL_IMPORT UBTLabelNoticeHK : public UBTOwnerDrawImageHK
{
public:
	struct FString                                     strNotice;                                        		// 0x03B4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTNetMainMenu*                              MainMenu;                                         		// 0x03C0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	float                                              DeltaMultiplier;                                  		// 0x03C4 ( 0x0004 ) 
	struct FScriptDelegate                             __OnNextNotice__Delegate;                         		// 0x03C8 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      Internal_OnRendered ( class UCanvas* C );         		//  GUIWarfare.BTLabelNoticeHK.Internal_OnRendered
	 void                      SetMainMenu ( class UBTNetMainMenu* MM );         		//  GUIWarfare.BTLabelNoticeHK.SetMainMenu
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTLabelNoticeHK.InitComponent
	 void                      OnNextNotice ( struct FString NextNotice );       		//  GUIWarfare.BTLabelNoticeHK.OnNextNotice
}; // Size: 0x001C

// Class GUIWarfare.BTTPAASHK
class DLL_IMPORT UBTTPAASHK : public UBTTabPanelHK
{
public:
	class UBTNetMainMenu*                              MainMenu;                                         		// 0x0338 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTMultiLineEditBoxHK*                       AAS;                                              		// 0x033C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	float                                              NextAAS;                                          		// 0x0340 ( 0x0004 ) 
	float                                              LastTime;                                         		// 0x0344 ( 0x0004 ) 
	unsigned long                                      bSelfTopMenuOwner:1;                              		// 0x0348 ( 0x0004 )  [0x00000001]
	unsigned long                                      bSlidingTabPanel:1;                               		// 0x0348 ( 0x0004 )  [0x00000002]
	unsigned long                                      bShowing:1;                                       		// 0x0348 ( 0x0004 )  [0x00000004]
	float                                              SlideTime;                                        		// 0x034C ( 0x0004 ) 
	float                                              SlideMultiplier;                                  		// 0x0350 ( 0x0004 ) 
	struct FFloatBox                                   ShowAWinFrame;                                    		// 0x0354 ( 0x0010 ) 
	struct FFloatBox                                   HideAWinFrame;                                    		// 0x0364 ( 0x0010 ) 
	struct FScriptDelegate                             __OnNextAAS__Delegate;                            		// 0x0374 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTTPAASHK.InitComponent
	 void                      SetMainMenu ( class UBTNetMainMenu* MM );         		//  GUIWarfare.BTTPAASHK.SetMainMenu
	 bool                      Internal_OnPreDraw ( class UCanvas* C );          		//  GUIWarfare.BTTPAASHK.Internal_OnPreDraw
	 void                      OnNextAAS ( struct FString NextAAS );             		//  GUIWarfare.BTTPAASHK.OnNextAAS
}; // Size: 0x0044

// Class GUIWarfare.BTPageRoomLobby_TcpLogin
class DLL_IMPORT UBTPageRoomLobby_TcpLogin : public UBTTcpLink_Login
{
public:
	class UBTPageRoomLobby*                            Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckProcessPreLoginUser ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TcpLogin.rfAckProcessPreLoginUser
	 bool                      rfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		//  GUIWarfare.BTPageRoomLobby_TcpLogin.rfAckLoginInHouseTest
	 void                      OnConnect ( int ErrCode );                        		//  GUIWarfare.BTPageRoomLobby_TcpLogin.OnConnect
}; // Size: 0x0004

// Class GUIWarfare.BTPageRoomLobby_TCP
class DLL_IMPORT UBTPageRoomLobby_TCP : public UBTTcpLink_Channel
{
public:
	class UBTPageRoomLobby*                            Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfNotifyClanLevelup ( struct FString ClanName, int Levelup );		//  GUIWarfare.BTPageRoomLobby_TCP.rfNotifyClanLevelup
	 bool                      rfNotifyNewClanName ( struct FString New_NickName );		//  GUIWarfare.BTPageRoomLobby_TCP.rfNotifyNewClanName
	 bool                      rfNotifyNewNickName ( int Community_Type, struct FString Old_NickName, struct FString New_NickName );		//  GUIWarfare.BTPageRoomLobby_TCP.rfNotifyNewNickName
	 bool                      rfAckGetRankingInfoListEnd (  );                  		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckGetRankingInfoListEnd
	 bool                      rfAckGetRankingInfoList ( int Result, unsigned char RankingType, unsigned char CommunityType, class TArray< struct FString > CharName, class TArray< int > CharLevel, class TArray< struct FString > ClanName, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Ranking_Accum, class TArray< int > Ranking_Accum_Prev, class TArray< int > Ranking_Accum_Exp, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckGetRankingInfoList
	 bool                      rfAckGetRankingInfoListStart ( int Result, unsigned char RankingType, unsigned char CommunityType, int TotalCount );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckGetRankingInfoListStart
	 bool                      rfAckCharDetailInfo ( int MaxSerial, int MaxScore, int MaxKill, int MaxAssist, int Serial3, int Serial5, int Serial7, int Serial10, int Serial15, int AR, int SMG, int SR, int SW, int Melee, int Grenade, int FlashBang, int Foot, int AT4, int MG, int Fire, int RPG7, int TimeBomb, int IcendiaryBomb, int ClusterBomb, int ByChopper, int Artillery, int KillChopper, int FirstKill, int LastKill, int AllKill, int Dominate, int InstallBomb, int DefuseBomb );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckCharDetailInfo
	 bool                      rfAckFriendPosition ( int Result, struct FString TargetCharName, unsigned char ServerType, struct FString fServername, struct FString fServerShortName, struct FString fServerIP, int fServerPort, unsigned char CurPos, unsigned char CurState, int ChannelNum, struct FString ChannelNickName, int GameRoomNum );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckFriendPosition
	 bool                      rfAckNotifyUpdateCharInfo_LevelMark ( struct FString CharName, int LevelMarkID );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckNotifyUpdateCharInfo_LevelMark
	 bool                      rfReqInGameRoomUserClanLevelChanged ( int UserID, int ClanLevel );		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqInGameRoomUserClanLevelChanged
	 bool                      rfReqInGameRoomUserInfoChanged (  );              		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqInGameRoomUserInfoChanged
	 bool                      rfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckNotifyAdjustClanMemberGrade
	 bool                      rfAckRoomUserPingInfo ( class TArray< int > UnqueID, class TArray< int > Ping, int HostPriorityPoint );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckRoomUserPingInfo
	 bool                      rfAckChangedRoomTitle_FromGM ( int Result, int RoomNumber, struct FString NewRoomTitle );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckChangedRoomTitle_FromGM
	 bool                      rfAckCheckEquipedWeaponDurability ( int Result, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemSlotNum );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckCheckEquipedWeaponDurability
	 bool                      rfAckGetBotID ( int Result, unsigned char RequestedAFCount, unsigned char RequestedRSACount, class TArray< int > AFBotID, class TArray< int > RSABotID );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckGetBotID
	 bool                      rfAckAutoChangedTeamUserList ( class TArray< int > UserID, class TArray< int > TeamNum );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckAutoChangedTeamUserList
	 bool                      rfReqRecvForceFailedClientLoading ( int ErrCode );		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqRecvForceFailedClientLoading
	 bool                      rfAckStartHolePunching ( int Result, struct FString ErrMsg, int GameType, int ReqStartUserID );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckStartHolePunching
	 bool                      rfAckRegisterMyUdpInfo ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckRegisterMyUdpInfo
	 bool                      rfAckNotifyMyCharInfoToRoomUser ( int Result, struct FString ErrMsg, int UID, struct FString UserName, int Grade, int TeamNum, unsigned char Statue, unsigned char IsHost, struct FString UserIP, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, unsigned char IsLookFor );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckNotifyMyCharInfoToRoomUser
	 bool                      rfReqNotifyDisconnectHostInLoading ( int Result, struct FString ErrMsg, int HostID );		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqNotifyDisconnectHostInLoading
	 bool                      rfReqRecvDeleteFriend ( int Result, struct FString FromCharName );		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqRecvDeleteFriend
	 bool                      rfAckDeleteFriend ( int Result, class TArray< struct FString > FailedCharname );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckDeleteFriend
	 bool                      rfAckChannelUserListInGameRoom ( int Result, int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > CharName, class TArray< int > UserLevel, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< unsigned char > IsLookForClan, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckChannelUserListInGameRoom
	 bool                      rfAckChatWispher ( int Result, struct FString ErrMsg, struct FString ToCharName );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckChatWispher
	 bool                      rfAckAcquirePromotionItems ( int UID, int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemIDs, class TArray< int > PartIDs );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckAcquirePromotionItems
	 bool                      rfReqNotifyLevelUp ( int LevelUpUserID, int Level, int Exp, class TArray< int > ItemID, class TArray< int > PartID );		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqNotifyLevelUp
	 bool                      rfReqClanCharPersonelIntro ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqClanCharPersonelIntro
	 bool                      rfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckClanCharPersonelIntro
	 bool                      rfAckRecvJoinClanResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckRecvJoinClanResult
	 bool                      rfAckJoinClanResult ( struct FString ClanName, unsigned char Permit, struct FString PermitCharName );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckJoinClanResult
	 bool                      rfAckNotifyClanSecession ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckNotifyClanSecession
	 bool                      rfAckNotifyNewClanMember ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckNotifyNewClanMember
	 bool                      rfReqRecvJoinClan ( int UserIdx, struct FString CharName, struct FString Message );		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqRecvJoinClan
	 bool                      rfAckRecvClanInviteResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckRecvClanInviteResult
	 bool                      rfAckInviteClanResult ( struct FString CharName, unsigned char Permit, struct FString ClanNm );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckInviteClanResult
	 bool                      rfAckJoinClan ( int Result, struct FString ErrMsg, struct FString SpecificCharName, struct FString RealRecvCharName, unsigned char RealRecvCharClanGrade );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckJoinClan
	 bool                      rfAckInviteClan ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckInviteClan
	 bool                      rfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqRecvClanInvite
	 bool                      rfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckSearchClan
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckDBCharInfo
	 bool                      rfAckDupCheckClanName ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckDupCheckClanName
	 bool                      rfAckCreateClan ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckCreateClan
	 bool                      rfAckGetIsHostBlocking ( int Result, unsigned char Blocking );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckGetIsHostBlocking
	 bool                      rfAckNotifyHostBlocking ( int Result, unsigned char Blocking );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckNotifyHostBlocking
	 bool                      rfAckGetHolePunchingResult ( int Result, unsigned char Phrase, int InterventionUserID, unsigned char Intervention, class TArray< int > FailedUserIDs );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckGetHolePunchingResult
	 bool                      rfAckGetUserHostPriorityPoint ( int Result, int UserID, int HostPriorityPoint );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckGetUserHostPriorityPoint
	 bool                      rfReqRecvForceDisconnectUDPFromHost ( int Result );		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqRecvForceDisconnectUDPFromHost
	 bool                      rfAckForceDisconnectUDPFromHost ( int Result );   		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckForceDisconnectUDPFromHost
	 bool                      rfReqNotifyChangeRoomState ( unsigned char RoomState );		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqNotifyChangeRoomState
	 bool                      rfAckBanUser ( int GameNum, int UID, int BanUID, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckBanUser
	 bool                      rfReqCompleteFriendInvite ( struct FString CharnameToBeInvited, unsigned char IsPermit );		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqCompleteFriendInvite
	 bool                      rfAckConfirmFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckConfirmFriendInvite
	 bool                      rfReqRecvFriendInvite ( int ReqUserID, struct FString ReqCharname, struct FString InviteMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqRecvFriendInvite
	 bool                      rfAckSendFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckSendFriendInvite
	 bool                      rfAckNotifyLoadingState ( int Result, int UserID, unsigned char LoadingState );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckNotifyLoadingState
	 bool                      rfAckFailedStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, int FailedUserID, int LoadingStep );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckFailedStartGame
	 bool                      rfAckSuccessStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, struct FString HostIP, int HostPort, int LoadingStep );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckSuccessStartGame
	 bool                      rfReqRelayServerOff (  );                         		//  GUIWarfare.BTPageRoomLobby_TCP.rfReqRelayServerOff
	 bool                      rfAckGameOverEnd ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckGameOverEnd
	 bool                      rfAckUpdateWeaponDurability ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > Durability, class TArray< unsigned char > IsDestroy, class TArray< struct FBtrDouble > FailedWeaponUniqueID );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckUpdateWeaponDurability
	 bool                      rfAckEntryQSlotUniqueIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< struct FBtrDouble > TW2UniqueID );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckEntryQSlotUniqueIDList
	 bool                      rfAckEntryQSlotIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< int > TWItemID1, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckEntryQSlotIDList
	 bool                      rfAckChangeNewGuest ( struct FString HostIP );    		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckChangeNewGuest
	 bool                      rfAckChangeHost ( unsigned char ClientNum );      		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckChangeHost
	 bool                      rfAckGetBootyChoose ( int Result, struct FString ErrMsg, unsigned char GiveType, struct FBtrDouble ItemUniqueNumber, int ItemID, int PartID, unsigned char ItemType, struct FBtrDouble UntilTime, int StackCount, int PaintID );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckGetBootyChoose
	 bool                      rfAckEntrySkillList ( class TArray< int > UserIDs, class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckEntrySkillList
	 bool                      rfAckGetBooty ( int Result, struct FString ErrMsg, class TArray< int > PrizeWinUserID, class TArray< int > BootyItemID, class TArray< int > BootyPartsID );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckGetBooty
	 bool                      rfAckForceGameOver ( int UserID, int GameRoomNumber, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckForceGameOver
	 bool                      rfAckChangeRoomOwner ( int GameNum, int OldOwner, int NewOwner, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckChangeRoomOwner
	 bool                      rfAckEntryItemList ( class TArray< int > UserIDs, class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< struct FBtrDouble > UniqueID, class TArray< int > PaintID, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckEntryItemList
	 bool                      rfAckChangeUserState ( int Result, struct FString ErrMsg, class TArray< int > UserIDs, class TArray< unsigned char > Positions, class TArray< int > Numbers, class TArray< unsigned char > OldStates, class TArray< unsigned char > NewStates );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckChangeUserState
	 bool                      rfAckChangeRoomSetting ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckChangeRoomSetting
	 bool                      rfAckUpdateScore ( class TArray< int > UserIDs, class TArray< struct FString > NickNames, class TArray< unsigned char > TeamIDs, class TArray< int > Scores, class TArray< int > Kills, class TArray< int > Assists, class TArray< int > Deaths, class TArray< int > EXPs, class TArray< int > EXPBonuses, class TArray< int > Points, class TArray< int > PointBonuses, class TArray< int > TeamScores, class TArray< int > BonusOwnerID, class TArray< int > BonusID );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckUpdateScore
	 bool                      rfAckRegisterOtherUdpInfo ( int UID, struct FString IP, int Port, unsigned char NatType, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckRegisterOtherUdpInfo
	 bool                      rfAckDisconnectGame ( int Result, int DisconnectUserID, struct FString DisconnectUserName );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckDisconnectGame
	 bool                      rfAckGameOver ( int UID, int GameRoomNumber, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckGameOver
	 bool                      rfAckGameRoomInfo ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckGameRoomInfo
	 bool                      rfAckChangeGameMode ( int GameNum, int UID, struct FString GameMode, unsigned char GameModeNum, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckChangeGameMode
	 bool                      rfAckSelectMap ( int GameNum, int UID, struct FString MapName, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckSelectMap
	 bool                      rfAckChangeTeam ( int GameNumber, struct FString UserID, int UID, int TeamNum, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckChangeTeam
	 bool                      rfAckRoomUserList ( class TArray< int > UID, class TArray< struct FString > UserName, class TArray< int > Grade, class TArray< int > TeamNum, class TArray< unsigned char > Statue, class TArray< unsigned char > IsHost, class TArray< struct FString > UserIP, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< unsigned char > IsLookingFor, class TArray< int > GMUID, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckRoomUserList
	 bool                      rfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckEnterChannel
	 bool                      rfAckLeaveRoom ( int Num, int UID, struct FString UserID, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckLeaveRoom
	 bool                      rfAckEnterRoom ( int GameNum, int OwnerID, int UID, struct FString UserID, int TeamNum, int Grade, struct FString UserIP, struct FString ClanName, int Clan_Mark_Pattern, int Clan_Mark_BG, int Clan_Mark_BL, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckEnterRoom
	 bool                      rfAckStartGame ( int GameNumber, int ClientsCount, int StartSeed, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckStartGame
	 bool                      rfAckIsGameRoomPlaying ( int GameRoomNum, unsigned char IsPlaying );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckIsGameRoomPlaying
	 bool                      rfAckGameHostInfo ( int GameNumber, struct FString UserID, struct FString IP, int Port, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckGameHostInfo
	 bool                      rfAckConnectGame ( int UserID, int Result );      		//  GUIWarfare.BTPageRoomLobby_TCP.rfAckConnectGame
}; // Size: 0x0004

// Class GUIWarfare.BTRefreshTime
class DLL_IMPORT UBTRefreshTime : public UObject
{
public:
	float                                              fCurTime;                                         		// 0x002C ( 0x0004 ) 
	float                                              fMaxTime;                                         		// 0x0030 ( 0x0004 ) 

	// UScript Functions
	 void                      SetMaxTime ( float fMaxTime );                    		//  GUIWarfare.BTRefreshTime.SetMaxTime
	 void                      Update ( float fAppDelta );                       		//  GUIWarfare.BTRefreshTime.Update
	 void                      ResetTime (  );                                   		//  GUIWarfare.BTRefreshTime.ResetTime
	 bool                      CheckCondition (  );                              		//  GUIWarfare.BTRefreshTime.CheckCondition
}; // Size: 0x0008

// Class GUIWarfare.BTWindowItemDurabilityWarningHK
class DLL_IMPORT UBTWindowItemDurabilityWarningHK : public UBTWindowHK
{
public:
	int                                                SavePoint;                                        		// 0x04AC ( 0x0004 ) 
	class UBTNetMainMenu*                              MainMenu;                                         		// 0x04B0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	int                                                MyPoint;                                          		// 0x04B4 ( 0x0004 ) 
	int                                                RepairSumCost;                                    		// 0x04B8 ( 0x0004 ) 
	struct FFloatBox                                   fbTPItemList;                                     		// 0x04BC ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTTPItemListHK*                             TPItemList;                                       		// 0x04CC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelDivider[ 0x02 ];                           		// 0x04D0 ( 0x0020 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelDivider[ 0x02 ];                             		// 0x04F0 ( 0x0008 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strLabel[ 0x05 ];                                 		// 0x04F8 ( 0x003C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strPoint;                                         		// 0x0534 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbLabel[ 0x05 ];                                  		// 0x0540 ( 0x0050 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   fbLabelEdit[ 0x03 ];                              		// 0x0590 ( 0x0030 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         Label[ 0x05 ];                                    		// 0x05C0 ( 0x0014 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelEdit[ 0x03 ];                                		// 0x05D4 ( 0x000C ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strButtonSelectAll[ 0x02 ];                       		// 0x05E0 ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbButtonSelectAll;                                		// 0x05F8 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawCaptionButtonHK*                 ButtonSelectAll;                                  		// 0x0608 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbNEditBox[ 0x03 ];                               		// 0x060C ( 0x0030 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTNumericEditBoxHK*                         NEditBox[ 0x03 ];                                 		// 0x063C ( 0x000C ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< struct FBtrDouble >                  selectlist;                                       		// 0x0648 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      Internal_OnPreDraw ( class UCanvas* C );          		//  GUIWarfare.BTWindowItemDurabilityWarningHK.Internal_OnPreDraw
	 void                      InternalOnOpen (  );                              		//  GUIWarfare.BTWindowItemDurabilityWarningHK.InternalOnOpen
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTWindowItemDurabilityWarningHK.InitComponent
	 void                      AddItem ( struct FBtrDouble UniqueID, int ItemID, int PartID, int Durability, int RepairCost );		//  GUIWarfare.BTWindowItemDurabilityWarningHK.AddItem
	 void                      SetCurrentPoint ( int MyPoint );                  		//  GUIWarfare.BTWindowItemDurabilityWarningHK.SetCurrentPoint
	 void                      UpdateNEditBox (  );                              		//  GUIWarfare.BTWindowItemDurabilityWarningHK.UpdateNEditBox
	 bool                      ImageListBox_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTWindowItemDurabilityWarningHK.ImageListBox_OnClick
	 bool                      ButtonNonSelectAll_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTWindowItemDurabilityWarningHK.ButtonNonSelectAll_OnClick
	 bool                      ButtonSelectAll_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTWindowItemDurabilityWarningHK.ButtonSelectAll_OnClick
	 bool                      ButtonCancel_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTWindowItemDurabilityWarningHK.ButtonCancel_OnClick
	 bool                      RepairItem_OnOK ( class UGUIComponent* Sender );  		//  GUIWarfare.BTWindowItemDurabilityWarningHK.RepairItem_OnOK
	 bool                      ButtonOK_OnClick ( class UGUIComponent* Sender ); 		//  GUIWarfare.BTWindowItemDurabilityWarningHK.ButtonOK_OnClick
}; // Size: 0x01A8

// Class GUIWarfare.BTPageServerSelection_TcpLogin
class DLL_IMPORT UBTPageServerSelection_TcpLogin : public UBTTcpLink_Login
{
public:
	class UBTPageServerSelection*                      Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckLogOut ( unsigned char Result, unsigned char Reason );		//  GUIWarfare.BTPageServerSelection_TcpLogin.rfAckLogOut
	 bool                      rfAckClientChecksum ( int Result );               		//  GUIWarfare.BTPageServerSelection_TcpLogin.rfAckClientChecksum
	 bool                      rfAckClientChallenge ( struct FString Key1, struct FBtrDouble Key2 );		//  GUIWarfare.BTPageServerSelection_TcpLogin.rfAckClientChallenge
	 bool                      rfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		//  GUIWarfare.BTPageServerSelection_TcpLogin.rfAckLoginInHouseTest
	 bool                      rfAckCharInfo ( int Result, struct FString CharName, int Level, int Exp, struct FString ClanName );		//  GUIWarfare.BTPageServerSelection_TcpLogin.rfAckCharInfo
	 bool                      rfAckServerList ( class TArray< struct FString > CServername, class TArray< struct FString > CServerShortName, class TArray< struct FString > ServerIP, class TArray< int > serverPort, class TArray< struct FString > ChannelName, class TArray< struct FString > ChannelNickName, class TArray< int > ChannelNum, class TArray< int > chMaxUser, class TArray< int > chCurUser, class TArray< struct FString > ServerGroupName, class TArray< int > ServerGroupID, class TArray< int > ServerDispOrder, class TArray< int > DataPort, class TArray< unsigned char > OptionCount_byte, class TArray< unsigned char > OptionKey_byte, class TArray< unsigned char > OptionValue_byte, class TArray< unsigned char > OptionCount_int, class TArray< unsigned char > OptionKey_int, class TArray< int > OptionValue_int, class TArray< unsigned char > OptionCount_float, class TArray< unsigned char > OptionKey_float, class TArray< float > OptionValue_float, class TArray< unsigned char > IsClanChannel, class TArray< unsigned char > IsUseDedicateHost );		//  GUIWarfare.BTPageServerSelection_TcpLogin.rfAckServerList
}; // Size: 0x0004

// Class GUIWarfare.BTPageServerSelection_TCP
class DLL_IMPORT UBTPageServerSelection_TCP : public UBTTcpLink_Channel
{
public:
	class UBTPageServerSelection*                      Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckBuyItemByWebzenCash ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckBuyItemByWebzenCash
	 bool                      rfNotifyCouponUseError ( int Time );              		//  GUIWarfare.BTPageServerSelection_TCP.rfNotifyCouponUseError
	 bool                      rfAckRecvClanInviteResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckRecvClanInviteResult
	 bool                      rfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfReqRecvClanInvite
	 bool                      rfReqNotifyShopItemDataEnd ( int Ver );           		//  GUIWarfare.BTPageServerSelection_TCP.rfReqNotifyShopItemDataEnd
	 bool                      rfReqNotifyShopItemData ( class TArray< int > ProductNo, class TArray< struct FString > ProductRowGuid, class TArray< struct FString > ServiceCode, class TArray< struct FString > ProductName, class TArray< struct FString > ProductCode, class TArray< struct FString > ProductType, class TArray< unsigned char > SaleType, class TArray< struct FString > ItemSaleType, class TArray< unsigned char > ISIncludeBonus, class TArray< int > ProductCost, class TArray< int > ProductHour, class TArray< int > ProductQuantity, class TArray< int > TotalQuantity, class TArray< int > ReOrderTerms, class TArray< int > ReorderCount, class TArray< int > PurchaseAvailableQuantity, class TArray< int > AvailableMinLevel, class TArray< int > AvailableMaxLevel, class TArray< unsigned char > AvailableGender, class TArray< int > InventoryKeepDays, class TArray< int > SaleMasterFlag, class TArray< int > SaleStatus, class TArray< struct FString > Description, class TArray< struct FString > Property0, class TArray< struct FString > Property1, class TArray< struct FString > Property2, class TArray< struct FString > Property3, class TArray< struct FString > Property4, class TArray< int > IsGift );		//  GUIWarfare.BTPageServerSelection_TCP.rfReqNotifyShopItemData
	 bool                      rfAckShopItemData (  );                           		//  GUIWarfare.BTPageServerSelection_TCP.rfAckShopItemData
	 bool                      rfAckTencent_StartTenProtect ( int CharDBID );    		//  GUIWarfare.BTPageServerSelection_TCP.rfAckTencent_StartTenProtect
	 bool                      rfAckMoveToLobby ( unsigned char MessageType );   		//  GUIWarfare.BTPageServerSelection_TCP.rfAckMoveToLobby
	 bool                      rfAckPopUpMessage ( int MessageType );            		//  GUIWarfare.BTPageServerSelection_TCP.rfAckPopUpMessage
	 bool                      rfUpdateWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		//  GUIWarfare.BTPageServerSelection_TCP.rfUpdateWebzenShopScriptVersion
	 bool                      rfAckLogOut ( unsigned char Result, unsigned char Reason );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckLogOut
	 bool                      rfAckServerType ( unsigned char Type );           		//  GUIWarfare.BTPageServerSelection_TCP.rfAckServerType
	 bool                      rfAckPaidItem_NotifyChangeClanname ( struct FString NewClanname );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckPaidItem_NotifyChangeClanname
	 bool                      rfAckPaidItem_ChangeClanname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewClanname );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckPaidItem_ChangeClanname
	 bool                      rfAckPaidItem_ChangeCharname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewCharname );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckPaidItem_ChangeCharname
	 bool                      rfAckGetMyMailBoxState ( int Result, unsigned char IsFull, int NewMailCount );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckGetMyMailBoxState
	 bool                      rfAckSetLookForClan ( int Result, struct FString ErrMsg, unsigned char IsLookingFor );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckSetLookForClan
	 bool                      rfAckPaidItem_RelayBroadcast ( struct FString CharName, struct FString Msg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckPaidItem_RelayBroadcast
	 bool                      rfAckRecvSystemMsg ( unsigned char CommunityType, struct FSystemMsgParam MsgInfo );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckRecvSystemMsg
	 bool                      rfReqRecvChatWispher ( struct FString CharnameFrom, struct FString Message );		//  GUIWarfare.BTPageServerSelection_TCP.rfReqRecvChatWispher
	 bool                      rfAckChatClan ( struct FString CharName, struct FString Message, int Result );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckChatClan
	 bool                      rfAckChatNormal ( int id, struct FString Sender, struct FString Message, int Result );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckChatNormal
	 bool                      rfAckGMLeaveRoom ( int Result, int RoomNumber, int UserID );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckGMLeaveRoom
	 bool                      rfAckGMEnterRoom ( int Result, int RoomNumber, int UserID );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckGMEnterRoom
	 bool                      rfAckForceDisconnectUser_GM ( int Result, struct FString ErrMsg, struct FString CharName );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckForceDisconnectUser_GM
	 bool                      rfAckNotice_GM ( int Result, struct FString ErrMsg, unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckNotice_GM
	 bool                      rfAckChangeRoomTitle_GM ( int Result, int RoomNumber, struct FString NewRoomTitle );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckChangeRoomTitle_GM
	 bool                      rfAckCharBlockInfo ( int Result, struct FBtrDouble ChatBlockStartTime, struct FBtrDouble ChatBlockEndTime, class TArray< struct FBtrDouble > BlockedItemIdx );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckCharBlockInfo
	 bool                      rfAckPaidItem_NotifyChangeClanMark ( struct FString ClanName, int Pattern, int BG, int BL );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckPaidItem_NotifyChangeClanMark
	 bool                      rfAckPaidItem_ChangeClanMark ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckPaidItem_ChangeClanMark
	 bool                      rfAckPaidItem_ClanMarkDupCheck ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckPaidItem_ClanMarkDupCheck
	 bool                      rfAckPaidItem_BroadCast ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckPaidItem_BroadCast
	 bool                      rfAckPaidItem_EraseRecord ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int Command, int RemainCount );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckPaidItem_EraseRecord
	 bool                      rfAckWebzenBillingUseStorageItem ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID, struct FBtrDouble ItemExtra );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckWebzenBillingUseStorageItem
	 bool                      rfAckWebzenBillingStorageListEnd (  );            		//  GUIWarfare.BTPageServerSelection_TCP.rfAckWebzenBillingStorageListEnd
	 bool                      rfAckWebzenBillingStorageList ( class TArray< int > Seq, class TArray< int > ItemSeq, class TArray< int > GroupCode, class TArray< int > ShareFlag, class TArray< int > ProductSeq, class TArray< struct FString > CashName, class TArray< struct FBtrDouble > CashPoint, class TArray< struct FString > SendAccountID, class TArray< struct FString > SendMessage, class TArray< unsigned char > ItemType, class TArray< unsigned char > RelationType, class TArray< int > ProductType, class TArray< int > PriceSeq );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckWebzenBillingStorageList
	 bool                      rfAckWebzenBillingStorageListStart ( int Result, struct FString ErrMsg, int TotalCount, int TotalPage, int CurPage );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckWebzenBillingStorageListStart
	 bool                      rfAckEquipSkill ( int ChangedNewSkillID, int ChangedNewSkillUniqueID, unsigned char ChangedNewSlotPosition, int ChangedOldSkillID, int ChangedOldSkillUniqueID, unsigned char ChangedOldSlotPosition, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckEquipSkill
	 bool                      rfAckEquipItem ( int ChangedNewItemID, struct FBtrDouble ChangedNewUniqueID, int ChangedNewSlotPosition, int ChangedOldItemID, struct FBtrDouble ChangedOldUniqueID, int ChangedOldSlotPosition, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckEquipItem
	 bool                      rfAckRandomBox_Use ( int Result, struct FString ErrMsg, struct FBtrDouble RandomBoxItemIdx, int RandomBxoItemCount, class TArray< int > ItemIDChoose, class TArray< int > PartIDChoose, class TArray< int > PeriodOnChoosenItem, class TArray< int > StackCountOnChoosenItem, class TArray< unsigned char > bHave, class TArray< struct FBtrDouble > ItemIdx, class TArray< struct FBtrDouble > UntilTime, class TArray< int > StackCount );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckRandomBox_Use
	 bool                      rfAckRemoveBlockUserList ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckRemoveBlockUserList
	 bool                      rfAckAddBlockUserList ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckAddBlockUserList
	 bool                      rfAckPCBangUserListEnd (  );                      		//  GUIWarfare.BTPageServerSelection_TCP.rfAckPCBangUserListEnd
	 bool                      rfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, class TArray< unsigned char > IsCombat, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckPCBangUserList
	 bool                      rfAckPCBangUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckPCBangUserListStart
	 bool                      rfAckClanUserList ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< int > ClanWinCnt, class TArray< int > ClanLoseCnt, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > DudeId );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckClanUserList
	 bool                      rfAckClanUserListEnd (  );                        		//  GUIWarfare.BTPageServerSelection_TCP.rfAckClanUserListEnd
	 bool                      rfAckClanUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckClanUserListStart
	 bool                      rfAckBlockUserList ( class TArray< struct FString > CharName );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckBlockUserList
	 bool                      rfAckBlockUserListEnd (  );                       		//  GUIWarfare.BTPageServerSelection_TCP.rfAckBlockUserListEnd
	 bool                      rfAckBlockUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckBlockUserListStart
	 bool                      rfAckFriendListEnd (  );                          		//  GUIWarfare.BTPageServerSelection_TCP.rfAckFriendListEnd
	 bool                      rfAckFriendList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > LevelMarkID, class TArray< int > ClanLevel, class TArray< int > Level, class TArray< unsigned char > IsLookForClan );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckFriendList
	 bool                      rfAckFriendListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckFriendListStart
	 bool                      rfAckRegisterMainPCBang ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckRegisterMainPCBang
	 bool                      rfReqIsPaidWebzenPCBang ( unsigned char IsPaid ); 		//  GUIWarfare.BTPageServerSelection_TCP.rfReqIsPaidWebzenPCBang
	 bool                      rfAckClanInfo ( struct FClanInfo stClanInfo );    		//  GUIWarfare.BTPageServerSelection_TCP.rfAckClanInfo
	 bool                      rfAckCharInfo ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FCharInfo stCharInfo, unsigned char InClanRank, int ClanLevel );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckCharInfo
	 bool                      rfAckRegisteredPCBangInfo ( int Result, struct FString ErrMsg, unsigned char IsRegisteredPCBang, unsigned char IsMainPCBang, struct FString PCBangName );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckRegisteredPCBangInfo
	 bool                      rfAckWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckWebzenShopScriptVersion
	 bool                      rfAckMyMoney ( int Result, struct FString ErrMsg, int Point, int Cash );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckMyMoney
	 bool                      rfAckWebzenCash ( int Result, struct FString ErrMsg, struct FBtrDouble PCoinCash, struct FBtrDouble CCoinCash );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckWebzenCash
	 bool                      rfReqClanMatch_InviteCrewResult ( struct FString Invitee, int Result );		//  GUIWarfare.BTPageServerSelection_TCP.rfReqClanMatch_InviteCrewResult
	 bool                      rfReqClanMatch_RecvInviteCrew ( struct FString Inviter, struct FString ServerIP, int Port, int WaittingID, struct FString Msg, int MapNum, int InviteUserChannelNum, struct FString LeaderName, struct FString RoomName );		//  GUIWarfare.BTPageServerSelection_TCP.rfReqClanMatch_RecvInviteCrew
	 bool                      rfAckClanMatch_InviteCrew ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckClanMatch_InviteCrew
	 bool                      rfAckLimitedListInChannel ( int Result, class TArray< int > LimitedMapID, class TArray< int > LimitedModeID );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckLimitedListInChannel
	 bool                      rfReqDailyQuestNewAvailable ( class TArray< int > ExpiredQuestID, class TArray< int > NewQuestID );		//  GUIWarfare.BTPageServerSelection_TCP.rfReqDailyQuestNewAvailable
	 bool                      rfReqQuestNewAvailable ( class TArray< int > AchivedQuestID, class TArray< int > NewQuestID, class TArray< unsigned char > IsDailyQuest, class TArray< int > ExpiredQuest );		//  GUIWarfare.BTPageServerSelection_TCP.rfReqQuestNewAvailable
	 bool                      rfAckQuestUpdate ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckQuestUpdate
	 bool                      rfAckQuestListEnd (  );                           		//  GUIWarfare.BTPageServerSelection_TCP.rfAckQuestListEnd
	 bool                      rfAckQuestList ( class TArray< int > QuestID, class TArray< int > CountPrograss, class TArray< unsigned char > IsDailyQuest );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckQuestList
	 bool                      rfAckQuestListStart ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckQuestListStart
	 bool                      rfAckRecvInviteGameRoomResult ( int Result );     		//  GUIWarfare.BTPageServerSelection_TCP.rfAckRecvInviteGameRoomResult
	 bool                      rfReqRecvInviteGameRoom ( struct FString InviteUserServerName, int InviteUserServerID, int InviteUserChannelNumber, struct FString RoomUniqueID, int RoomNumber, struct FString RoomName, unsigned char RoomState, struct FString MapName, struct FString OwnerName, unsigned char GameMode, unsigned char WeaponLimit, unsigned char IsTeamBalance, struct FString Password, struct FString InviteCharName );		//  GUIWarfare.BTPageServerSelection_TCP.rfReqRecvInviteGameRoom
	 bool                      rfAckInviteGameRoom ( int Result, unsigned char Answer, struct FString GuestCharName );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckInviteGameRoom
	 bool                      rfAckItemListInItemBox ( int Result, struct FString ErrMsg, struct FBtrDouble ItemUniqueID, int BoxItemID, class TArray< int > ItemID, class TArray< int > PartID );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckItemListInItemBox
	 bool                      rfAckGetServerTime ( struct FBtrDouble ServerTime, struct FString ClientIP );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckGetServerTime
	 bool                      rfAckExceedMaxUser (  );                          		//  GUIWarfare.BTPageServerSelection_TCP.rfAckExceedMaxUser
	 bool                      rfAckBuyShopItem ( int ItemCount, class TArray< int > Result, class TArray< int > BoughtItemTypeID, class TArray< struct FBtrDouble > BoughtItemUniqueID, class TArray< int > BoughtPartID, class TArray< struct FBtrDouble > BoughtUntilTIme, class TArray< int > BoughtStackCnt, int PointRemain, int CashRemain );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckBuyShopItem
	 bool                      rfReqRecvForceDisconnected_FromGM ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfReqRecvForceDisconnected_FromGM
	 bool                      rfReqRecvNotice_FromGM ( int Result, struct FString ErrMsg, class TArray< struct FString > NoticeMsg, unsigned char IsFromDB );		//  GUIWarfare.BTPageServerSelection_TCP.rfReqRecvNotice_FromGM
	 bool                      rfAckUpdateQSlot ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckUpdateQSlot
	 bool                      rfAckRepairItem ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, int RepairCost, class TArray< int > DamageDegree );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckRepairItem
	 bool                      rfAckRepairCost ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > RepairCost );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckRepairCost
	 bool                      rfReqNotifyDurabilityZeroItem ( int Result, struct FString ErrMsg, int UserID, class TArray< struct FBtrDouble > ItemUniqueIDs, class TArray< int > ItemIDs, class TArray< int > ItemPartIDs, class TArray< unsigned char > ItemSlotPos );		//  GUIWarfare.BTPageServerSelection_TCP.rfReqNotifyDurabilityZeroItem
	 bool                      rfAckNotifyExpiredSkillIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredSkillUniqueIDs, class TArray< int > ExpiredSkillIDs, int Result, struct FString ErrMsg, class TArray< unsigned char > ExpiredSkillSlotPositions );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckNotifyExpiredSkillIDs
	 bool                      rfAckNotifyExpiredItemIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredItemUniqueIDs, class TArray< int > ExpiredItemIDs, class TArray< int > ExpiredItemPartIDs, class TArray< unsigned char > ExpiredItemSlotPos, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckNotifyExpiredItemIDs
	 bool                      rfReqNotifyRelayServerAddr ( struct FString RelayIP, int RelayPort );		//  GUIWarfare.BTPageServerSelection_TCP.rfReqNotifyRelayServerAddr
	 bool                      rfAckHash ( int Result, struct FString Error );   		//  GUIWarfare.BTPageServerSelection_TCP.rfAckHash
	 bool                      rfAckServerTime ( int Time );                     		//  GUIWarfare.BTPageServerSelection_TCP.rfAckServerTime
	 bool                      rfAckQSlotList ( int Result, struct FString ErrMsg, class TArray< int > QSlotID, class TArray< struct FString > QSlotName, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWItemID, class TArray< struct FBtrDouble > PistolItemID, class TArray< struct FBtrDouble > TWItemID1, class TArray< struct FBtrDouble > TWItemID2, class TArray< int > Skill1, class TArray< int > Skill2, class TArray< int > Skill3, class TArray< int > Skill4 );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckQSlotList
	 bool                      rfAckUserSkillListEnd (  );                       		//  GUIWarfare.BTPageServerSelection_TCP.rfAckUserSkillListEnd
	 bool                      rfAckUserSkillList ( class TArray< int > UniqueSkillID, class TArray< int > SkillID, class TArray< struct FBtrDouble > UntilTime, class TArray< unsigned char > SlotPosition );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckUserSkillList
	 bool                      rfAckUserSkillListStart ( int Count, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckUserSkillListStart
	 bool                      rfAckItemListEnd (  );                            		//  GUIWarfare.BTPageServerSelection_TCP.rfAckItemListEnd
	 bool                      rfAckItemList ( class TArray< struct FBtrDouble > UniqueID, class TArray< int > ItemID, class TArray< int > ItemType, class TArray< int > Durability, class TArray< struct FBtrDouble > UntilTime, class TArray< int > SlotPosition, class TArray< int > AddPartsID, class TArray< int > DamageDegree, class TArray< unsigned char > ItemState, class TArray< int > StackCount, class TArray< int > PaintID, class TArray< int > TradeCount );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckItemList
	 bool                      rfAckItemListStart ( int Count, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckItemListStart
	 bool                      rfAckLogin2 ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FBtrDouble CurServerTime, int CharDBID, unsigned char IsGM );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckLogin2
	 bool                      rfAckLeaveChannel ( int Result, struct FString UserID, int UID );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckLeaveChannel
	 bool                      rfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageServerSelection_TCP.rfAckEnterChannel
}; // Size: 0x0004

// Class GUIWarfare.BTPageLobby_TcpLogin
class DLL_IMPORT UBTPageLobby_TcpLogin : public UBTTcpLink_Login
{
public:
	class UBTPageLobby*                                Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckProcessPreLoginUser ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby_TcpLogin.rfAckProcessPreLoginUser
	 bool                      rfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		//  GUIWarfare.BTPageLobby_TcpLogin.rfAckLoginInHouseTest
	 void                      OnConnect ( int ErrCode );                        		//  GUIWarfare.BTPageLobby_TcpLogin.OnConnect
}; // Size: 0x0004

// Class GUIWarfare.BTPageLobby_TCP
class DLL_IMPORT UBTPageLobby_TCP : public UBTTcpLink_Channel
{
public:
	class UBTPageLobby*                                Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfNotifyClanLevelup ( struct FString ClanName, int Levelup );		//  GUIWarfare.BTPageLobby_TCP.rfNotifyClanLevelup
	 bool                      rfNotifyNewClanName ( struct FString New_NickName );		//  GUIWarfare.BTPageLobby_TCP.rfNotifyNewClanName
	 bool                      rfNotifyNewNickName ( int Community_Type, struct FString Old_NickName, struct FString New_NickName );		//  GUIWarfare.BTPageLobby_TCP.rfNotifyNewNickName
	 bool                      rfAckGetRankingInfoListEnd (  );                  		//  GUIWarfare.BTPageLobby_TCP.rfAckGetRankingInfoListEnd
	 bool                      rfAckGetRankingInfoList ( int Result, unsigned char RankingType, unsigned char CommunityType, class TArray< struct FString > CharName, class TArray< int > CharLevel, class TArray< struct FString > ClanName, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Ranking_Accum, class TArray< int > Ranking_Accum_Prev, class TArray< int > Ranking_Accum_Exp, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageLobby_TCP.rfAckGetRankingInfoList
	 bool                      rfAckGetRankingInfoListStart ( int Result, unsigned char RankingType, unsigned char CommunityType, int TotalCount );		//  GUIWarfare.BTPageLobby_TCP.rfAckGetRankingInfoListStart
	 bool                      rfAckCharDetailInfo ( int MaxSerial, int MaxScore, int MaxKill, int MaxAssist, int Serial3, int Serial5, int Serial7, int Serial10, int Serial15, int AR, int SMG, int SR, int SW, int Melee, int Grenade, int FlashBang, int Foot, int AT4, int MG, int Fire, int RPG7, int TimeBomb, int IcendiaryBomb, int ClusterBomb, int ByChopper, int Artillery, int KillChopper, int FirstKill, int LastKill, int AllKill, int Dominate, int InstallBomb, int DefuseBomb );		//  GUIWarfare.BTPageLobby_TCP.rfAckCharDetailInfo
	 bool                      rfAckFriendPosition ( int Result, struct FString TargetCharName, unsigned char ServerType, struct FString fServername, struct FString fServerShortName, struct FString fServerIP, int fServerPort, unsigned char CurPos, unsigned char CurState, int ChannelNum, struct FString ChannelNickName, int GameRoomNum );		//  GUIWarfare.BTPageLobby_TCP.rfAckFriendPosition
	 bool                      rfAckMoveToLobby ( unsigned char MessageType );   		//  GUIWarfare.BTPageLobby_TCP.rfAckMoveToLobby
	 bool                      rfAckLogOut ( unsigned char Result, unsigned char Reason );		//  GUIWarfare.BTPageLobby_TCP.rfAckLogOut
	 bool                      rfAckClanMatch_PublicWaitRoomChanged ( int WaitRoomIdx, struct FString RoomName, int MapNum, int CurUserCount, int MaxUserCount, unsigned char Status, unsigned char IsPublic );		//  GUIWarfare.BTPageLobby_TCP.rfAckClanMatch_PublicWaitRoomChanged
	 bool                      rfAckNotifyEndTutorial ( int UserID, struct FString CharName, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageLobby_TCP.rfAckNotifyEndTutorial
	 bool                      rfAckNotifyStartTutorial ( int Result, int UserID );		//  GUIWarfare.BTPageLobby_TCP.rfAckNotifyStartTutorial
	 bool                      rfAckChangedRoomTitle_FromGM ( int Result, int RoomNumber, struct FString NewRoomTitle );		//  GUIWarfare.BTPageLobby_TCP.rfAckChangedRoomTitle_FromGM
	 bool                      rfAckClanMatch_EndPublicWaitRoomList (  );        		//  GUIWarfare.BTPageLobby_TCP.rfAckClanMatch_EndPublicWaitRoomList
	 bool                      rfAckClanMatch_PublicWaitRoomList ( class TArray< int > WaitRoomIdx, class TArray< struct FString > LeaderName, class TArray< struct FString > RoomName, class TArray< int > MapNum, class TArray< int > CurUserCount, class TArray< int > MaxUserCount, class TArray< unsigned char > Status );		//  GUIWarfare.BTPageLobby_TCP.rfAckClanMatch_PublicWaitRoomList
	 bool                      rfAckClanMatch_StartPublicWaitRoomList ( int Result, struct FString ErrMsg, int Count );		//  GUIWarfare.BTPageLobby_TCP.rfAckClanMatch_StartPublicWaitRoomList
	 bool                      rfReqExteriorRoomOwnerInfo ( int RoomNum, struct FString OwnerName, struct FString OwnerIP );		//  GUIWarfare.BTPageLobby_TCP.rfReqExteriorRoomOwnerInfo
	 bool                      rfAckQuestGetAvailableEventList ( int Result, struct FString ErrMsg, class TArray< int > QuestID );		//  GUIWarfare.BTPageLobby_TCP.rfAckQuestGetAvailableEventList
	 bool                      rfAckClanMatch_GetReady ( int Result, struct FString ErrMsg, int RoomIndex );		//  GUIWarfare.BTPageLobby_TCP.rfAckClanMatch_GetReady
	 bool                      rfAckClanMatch_Join ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby_TCP.rfAckClanMatch_Join
	 bool                      rfAckAdjustClanMemberGrade ( int Result, struct FString ErrMsg, struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageLobby_TCP.rfAckAdjustClanMemberGrade
	 bool                      rfReqRecvDeleteFriend ( int Result, struct FString FromCharName );		//  GUIWarfare.BTPageLobby_TCP.rfReqRecvDeleteFriend
	 bool                      rfAckDeleteFriend ( int Result, class TArray< struct FString > FailedCharname );		//  GUIWarfare.BTPageLobby_TCP.rfAckDeleteFriend
	 bool                      rfAckChatWispher ( int Result, struct FString ErrMsg, struct FString ToCharName );		//  GUIWarfare.BTPageLobby_TCP.rfAckChatWispher
	 bool                      rfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageLobby_TCP.rfAckNotifyAdjustClanMemberGrade
	 bool                      rfReqClanCharPersonelIntro ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageLobby_TCP.rfReqClanCharPersonelIntro
	 bool                      rfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro );		//  GUIWarfare.BTPageLobby_TCP.rfAckClanCharPersonelIntro
	 bool                      rfAckRecvJoinClanResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby_TCP.rfAckRecvJoinClanResult
	 bool                      rfAckJoinClanResult ( struct FString ClanName, unsigned char Permit, struct FString PermitCharName );		//  GUIWarfare.BTPageLobby_TCP.rfAckJoinClanResult
	 bool                      rfAckNotifyClanSecession ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageLobby_TCP.rfAckNotifyClanSecession
	 bool                      rfAckNotifyNewClanMember ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageLobby_TCP.rfAckNotifyNewClanMember
	 bool                      rfReqRecvJoinClan ( int UserIdx, struct FString CharName, struct FString Message );		//  GUIWarfare.BTPageLobby_TCP.rfReqRecvJoinClan
	 bool                      rfAckInviteClanResult ( struct FString CharName, unsigned char Permit, struct FString ClanNm );		//  GUIWarfare.BTPageLobby_TCP.rfAckInviteClanResult
	 bool                      rfAckJoinClan ( int Result, struct FString ErrMsg, struct FString SpecificCharName, struct FString RealRecvCharName, unsigned char RealRecvCharClanGrade );		//  GUIWarfare.BTPageLobby_TCP.rfAckJoinClan
	 bool                      rfAckInviteClan ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby_TCP.rfAckInviteClan
	 bool                      rfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		//  GUIWarfare.BTPageLobby_TCP.rfReqRecvClanInvite
	 bool                      rfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel );		//  GUIWarfare.BTPageLobby_TCP.rfAckSearchClan
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTPageLobby_TCP.rfAckDBCharInfo
	 bool                      rfAckDupCheckClanName ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby_TCP.rfAckDupCheckClanName
	 bool                      rfAckCreateClan ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTPageLobby_TCP.rfAckCreateClan
	 bool                      rfAckGameRoomInfo ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		//  GUIWarfare.BTPageLobby_TCP.rfAckGameRoomInfo
	 bool                      rfReqCompleteFriendInvite ( struct FString CharnameToBeInvited, unsigned char IsPermit );		//  GUIWarfare.BTPageLobby_TCP.rfReqCompleteFriendInvite
	 bool                      rfAckConfirmFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby_TCP.rfAckConfirmFriendInvite
	 bool                      rfReqRecvFriendInvite ( int ReqUserID, struct FString ReqCharname, struct FString InviteMsg );		//  GUIWarfare.BTPageLobby_TCP.rfReqRecvFriendInvite
	 bool                      rfAckSendFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLobby_TCP.rfAckSendFriendInvite
	 bool                      rfReqExteriorRoomState ( int RoomNumber, unsigned char RoomState );		//  GUIWarfare.BTPageLobby_TCP.rfReqExteriorRoomState
	 bool                      rfReqExteriorRoomUserCount ( int RoomNumber, int RoomUserCount );		//  GUIWarfare.BTPageLobby_TCP.rfReqExteriorRoomUserCount
	 bool                      rfReqExteriorRoomInfo ( int SP, int RoomNumber, unsigned char IsPW, struct FString RoomName, struct FString MapName, struct FString ModeName, int MapNum, int ModeNum, unsigned char IsTeamBalance, int MaxUserCount, int RoomUserCount, unsigned char RoomState, unsigned char BotDifficult, unsigned char WeaponLimit, unsigned char BotModeUserTeamNum );		//  GUIWarfare.BTPageLobby_TCP.rfReqExteriorRoomInfo
	 bool                      rfAckGameRoomDestroy ( int GameRoomNum );         		//  GUIWarfare.BTPageLobby_TCP.rfAckGameRoomDestroy
	 bool                      rfAckChannelUserList ( int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > UserID, class TArray< int > UserLevels, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, int Result, struct FString ErrMsg, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageLobby_TCP.rfAckChannelUserList
	 bool                      rfAckRoomList ( class TArray< int > GameNum, class TArray< struct FString > Title, class TArray< struct FString > MapName, class TArray< int > MapNum, class TArray< unsigned char > UserCount, class TArray< unsigned char > MaxCount, class TArray< struct FString > ModeName, class TArray< int > ModeNum, class TArray< unsigned char > WeaponLimit, class TArray< unsigned char > IsTeamBalance, class TArray< unsigned char > Status, class TArray< struct FString > RoomOwnerIP, class TArray< int > GameMinute, class TArray< struct FString > RoomOwnerName, class TArray< unsigned char > IsSpecial, class TArray< unsigned char > IsPassword, class TArray< unsigned char > BotDifficult, class TArray< unsigned char > BotModeUserTeamNum );		//  GUIWarfare.BTPageLobby_TCP.rfAckRoomList
	 bool                      rfAckRoomListStart ( int Result, int TotalCount, int Count, int StartIndex );		//  GUIWarfare.BTPageLobby_TCP.rfAckRoomListStart
	 bool                      rfAckEnterRoom ( int GameNum, int OwnerID, int UID, struct FString UserID, int TeamNum, int Grade, struct FString UserIP, struct FString ClanName, int Clan_Mark_Pattern, int Clan_Mark_BG, int Clan_Mark_BL, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageLobby_TCP.rfAckEnterRoom
	 bool                      rfAckLeaveChannel ( int Result, struct FString UserID, int UID );		//  GUIWarfare.BTPageLobby_TCP.rfAckLeaveChannel
	 bool                      rfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageLobby_TCP.rfAckEnterChannel
	 bool                      rfAckCreateGameRoom ( int Result, struct FString ErrMsg, int UserID, struct FString RoomOwnerIP, struct FGameRoomInfo NetRoomInfo );		//  GUIWarfare.BTPageLobby_TCP.rfAckCreateGameRoom
}; // Size: 0x0004

// Class GUIWarfare.BTNuclearButtonHK
class DLL_IMPORT UBTNuclearButtonHK : public UBTOwnerDrawCaptionButtonHK
{
public:
	struct FString                                     strDonotPress;                                    		// 0x04C4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bNuclearActive:1;                                 		// 0x04D0 ( 0x0004 )  [0x00000001]
	struct FFloatBox                                   CoreBox;                                          		// 0x04D4 ( 0x0010 ) 
	struct FImage                                      CoreImg;                                          		// 0x04E4 ( 0x0020 ) 
	float                                              MaxPhaseTransformTime;                            		// 0x0504 ( 0x0004 ) 
	float                                              PhaseTransformTime;                               		// 0x0508 ( 0x0004 ) 
	int                                                NuclearButtonPhase;                               		// 0x050C ( 0x0004 ) 
	struct FScriptDelegate                             __OnCoreClick__Delegate;                          		// 0x0510 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      OnClick ( class UGUIComponent* Sender );          		//  GUIWarfare.BTNuclearButtonHK.OnClick
	 bool                      OnCoreClick ( class UGUIComponent* Sender );      		//  GUIWarfare.BTNuclearButtonHK.OnCoreClick
	 void                      OnRendered ( class UCanvas* C );                  		//  GUIWarfare.BTNuclearButtonHK.OnRendered
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTNuclearButtonHK.InitComponent
}; // Size: 0x0054

// Class GUIWarfare.BTPageInventory_TCP
class DLL_IMPORT UBTPageInventory_TCP : public UBTTcpLink_Channel
{
public:
	class UBTPageInventory*                            Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckCouponUse ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageInventory_TCP.rfAckCouponUse
	 bool                      rfAckGetItemFromItemBox ( int Result, struct FString ErrMsg, int ItemIDChoose, int PartIDChoose, struct FBtrDouble BoxItemIdx, int BxoItemCount, unsigned char bHave, struct FBtrDouble ItemIdx, struct FBtrDouble UntilTime, int StackCount );		//  GUIWarfare.BTPageInventory_TCP.rfAckGetItemFromItemBox
	 bool                      rfAckRepairItem ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, int RepairCost, class TArray< int > DamageDegree );		//  GUIWarfare.BTPageInventory_TCP.rfAckRepairItem
	 bool                      rfAckRepairCost ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > RepairCost );		//  GUIWarfare.BTPageInventory_TCP.rfAckRepairCost
	 bool                      rfAckUpdateQSlot ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageInventory_TCP.rfAckUpdateQSlot
	 bool                      rfAckModifyWeapon ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueID, int AddPartID, int PaintID, int Point, int Cash );		//  GUIWarfare.BTPageInventory_TCP.rfAckModifyWeapon
	 bool                      rfAckSellShopItem ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain, int Count );		//  GUIWarfare.BTPageInventory_TCP.rfAckSellShopItem
	 bool                      rfAckSellShopItemInfo ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueItemID, int SellPoint, int CurPoint, int AfterPoint );		//  GUIWarfare.BTPageInventory_TCP.rfAckSellShopItemInfo
	 bool                      rfReqConfirmSkillChanged (  );                    		//  GUIWarfare.BTPageInventory_TCP.rfReqConfirmSkillChanged
	 bool                      rfAckEquipSkill ( int ChangedNewSkillID, int ChangedNewSkillUniqueID, unsigned char ChangedNewSlotPosition, int ChangedOldSkillID, int ChangedOldSkillUniqueID, unsigned char ChangedOldSlotPosition, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageInventory_TCP.rfAckEquipSkill
	 bool                      rfAckConfirmItemChanged ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageInventory_TCP.rfAckConfirmItemChanged
	 bool                      rfAckEquipItem ( int ChangedNewItemID, struct FBtrDouble ChangedNewUniqueID, int ChangedNewSlotPosition, int ChangedOldItemID, struct FBtrDouble ChangedOldUniqueID, int ChangedOldSlotPosition, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageInventory_TCP.rfAckEquipItem
	 bool                      rfAckShopItemListEnd (  );                        		//  GUIWarfare.BTPageInventory_TCP.rfAckShopItemListEnd
	 bool                      rfAckShopItemList ( class TArray< int > ItemID ); 		//  GUIWarfare.BTPageInventory_TCP.rfAckShopItemList
	 bool                      rfAckShopItemListStart ( int Count );             		//  GUIWarfare.BTPageInventory_TCP.rfAckShopItemListStart
}; // Size: 0x0004

// Class GUIWarfare.BTPageClanWar_TCP
class DLL_IMPORT UBTPageClanWar_TCP : public UBTTcpLink_Channel
{
public:
	class UBTPageClanWar*                              Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfNotifyClanLevelup ( struct FString ClanName, int Levelup );		//  GUIWarfare.BTPageClanWar_TCP.rfNotifyClanLevelup
	 bool                      rfAckClanMatch_ChangeRoomSetting ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, unsigned char IsPublic );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_ChangeRoomSetting
	 bool                      rfAckClanMatch_GetClanWaittingRoomInfo ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, struct FString WaitRoomName );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_GetClanWaittingRoomInfo
	 bool                      rfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageClanWar_TCP.rfAckEnterChannel
	 bool                      rfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageClanWar_TCP.rfAckNotifyAdjustClanMemberGrade
	 bool                      rfAckAdjustClanMemberGrade ( int Result, struct FString ErrMsg, struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageClanWar_TCP.rfAckAdjustClanMemberGrade
	 bool                      rfReqRecvDeleteFriend ( int Result, struct FString FromCharName );		//  GUIWarfare.BTPageClanWar_TCP.rfReqRecvDeleteFriend
	 bool                      rfAckDeleteFriend ( int Result, class TArray< struct FString > FailedCharname );		//  GUIWarfare.BTPageClanWar_TCP.rfAckDeleteFriend
	 bool                      rfAckRecvJoinClanResult ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar_TCP.rfAckRecvJoinClanResult
	 bool                      rfAckJoinClanResult ( struct FString ClanName, unsigned char Permit, struct FString PermitCharName );		//  GUIWarfare.BTPageClanWar_TCP.rfAckJoinClanResult
	 bool                      rfAckNotifyClanSecession ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageClanWar_TCP.rfAckNotifyClanSecession
	 bool                      rfAckNotifyNewClanMember ( struct FString ClanName, struct FString CharName );		//  GUIWarfare.BTPageClanWar_TCP.rfAckNotifyNewClanMember
	 bool                      rfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel );		//  GUIWarfare.BTPageClanWar_TCP.rfAckSearchClan
	 bool                      rfAckInviteClanResult ( struct FString CharName, unsigned char Permit, struct FString ClanNm );		//  GUIWarfare.BTPageClanWar_TCP.rfAckInviteClanResult
	 bool                      rfAckJoinClan ( int Result, struct FString ErrMsg, struct FString SpecificCharName, struct FString RealRecvCharName, unsigned char RealRecvCharClanGrade );		//  GUIWarfare.BTPageClanWar_TCP.rfAckJoinClan
	 bool                      rfAckInviteClan ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar_TCP.rfAckInviteClan
	 bool                      rfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanCharPersonelIntro
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTPageClanWar_TCP.rfAckDBCharInfo
	 bool                      rfAckCreateClan ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTPageClanWar_TCP.rfAckCreateClan
	 bool                      rfAckDupCheckClanName ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar_TCP.rfAckDupCheckClanName
	 bool                      rfAckChannelUserList ( int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > UserID, class TArray< int > UserLevels, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, int Result, struct FString ErrMsg, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageClanWar_TCP.rfAckChannelUserList
	 bool                      rfAckClanUserList ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< int > ClanWinCnt, class TArray< int > ClanLoseCnt, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > DudeId );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanUserList
	 bool                      rfAckClanUserListEnd (  );                        		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanUserListEnd
	 bool                      rfAckClanUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanUserListStart
	 bool                      rfAckFriendListEnd (  );                          		//  GUIWarfare.BTPageClanWar_TCP.rfAckFriendListEnd
	 bool                      rfAckFriendList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > LevelMarkID, class TArray< int > ClanLevel, class TArray< int > Level, class TArray< unsigned char > IsLookForClan );		//  GUIWarfare.BTPageClanWar_TCP.rfAckFriendList
	 bool                      rfAckFriendListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageClanWar_TCP.rfAckFriendListStart
	 bool                      rfReqCompleteFriendInvite ( struct FString CharnameToBeInvited, unsigned char IsPermit );		//  GUIWarfare.BTPageClanWar_TCP.rfReqCompleteFriendInvite
	 bool                      rfAckConfirmFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar_TCP.rfAckConfirmFriendInvite
	 bool                      rfReqRecvFriendInvite ( int ReqUserID, struct FString ReqCharname, struct FString InviteMsg );		//  GUIWarfare.BTPageClanWar_TCP.rfReqRecvFriendInvite
	 bool                      rfAckSendFriendInvite ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar_TCP.rfAckSendFriendInvite
	 bool                      rfAckClanMatch_SetWaitRoomPublic ( int Result, struct FString ErrMsg, unsigned char Set );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_SetWaitRoomPublic
	 bool                      rfAckClanMatch_StopSearching (  );                		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_StopSearching
	 bool                      rfReqClanMatch_FoundMatch ( int ChannelID, int RoomNumber );		//  GUIWarfare.BTPageClanWar_TCP.rfReqClanMatch_FoundMatch
	 bool                      rfAckClanMatch_NotifyStartSearching ( int ShouldWaitMore );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_NotifyStartSearching
	 bool                      rfAckClanMatch_StartSearching ( int Result, struct FString ErrMsg, int ShouldWaitMore );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_StartSearching
	 bool                      rfAckClanMatch_ChangeLeader ( int Result, struct FString ErrMsg, int NewLeader, struct FString NewLeaderName );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_ChangeLeader
	 bool                      rfAckClanMatch_WaittingTeamList ( int TtotlCount, class TArray< int > Grade, class TArray< int > Map, class TArray< int > Versus );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_WaittingTeamList
	 bool                      rfAckClanMatch_Chat ( int Result, struct FString ErrMsg, struct FString CharName, struct FString Msg );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_Chat
	 bool                      rfAckClanMatch_Leave ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_Leave
	 bool                      rfAckClanMatch_MemberList ( class TArray< unsigned char > IsLeader, class TArray< int > ClanMarkPA, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< struct FString > ClanName, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_MemberList
	 bool                      rfAckClanMatch_LeaveNotify ( struct FString CharName );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_LeaveNotify
	 bool                      rfAckClanMatch_JoinNotify ( unsigned char IsLeader, int ClanMarkPA, int ClanMarkBG, int ClanMarkBL, int Level, struct FString CharName, int ClanGrade, int ClanWin, int ClanLose, struct FString ClanName, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_JoinNotify
	 bool                      rfAckClanMatch_Join ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_Join
	 bool                      rfAckClanMatch_NotifiyStartCombat ( class TArray< int > MapNumArray, int VersusMode );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_NotifiyStartCombat
	 bool                      rfAckClanMatch_StartCombat ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_StartCombat
	 bool                      rfAckClanMatch_GetReady ( int Result, struct FString ErrMsg, int RoomIndex );		//  GUIWarfare.BTPageClanWar_TCP.rfAckClanMatch_GetReady
}; // Size: 0x0004

// Class GUIWarfare.BTPageClan_TCP
class DLL_IMPORT UBTPageClan_TCP : public UBTTcpLink_Channel
{
public:
	class UBTPageClan*                                 Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTPageClan_TCP.rfAckDBCharInfo
	 bool                      rfAckFriendPosition ( int Result, struct FString TargetCharName, unsigned char ServerType, struct FString fServername, struct FString fServerShortName, struct FString fServerIP, int fServerPort, unsigned char CurPos, unsigned char CurState, int ChannelNum, struct FString ChannelNickName, int GameRoomNum );		//  GUIWarfare.BTPageClan_TCP.rfAckFriendPosition
	 bool                      rfAckNotifyUpdateCharInfo_LevelMark ( struct FString CharName, int LevelMarkID );		//  GUIWarfare.BTPageClan_TCP.rfAckNotifyUpdateCharInfo_LevelMark
	 bool                      rfAckClanMatchResultHistory ( class TArray< struct FBtrDouble > MatchDate, class TArray< unsigned char > IsWin, class TArray< struct FString > EnemyClanname );		//  GUIWarfare.BTPageClan_TCP.rfAckClanMatchResultHistory
	 bool                      rfAckChatWispher ( int Result, struct FString ErrMsg, struct FString ToCharName );		//  GUIWarfare.BTPageClan_TCP.rfAckChatWispher
	 bool                      rfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageClan_TCP.rfAckNotifyAdjustClanMemberGrade
	 bool                      rfAckAdjustClanMemberGrade ( int Result, struct FString ErrMsg, struct FString ClanName, struct FString CharName, unsigned char CharGrade );		//  GUIWarfare.BTPageClan_TCP.rfAckAdjustClanMemberGrade
	 bool                      rfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro );		//  GUIWarfare.BTPageClan_TCP.rfAckClanCharPersonelIntro
	 bool                      rfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel );		//  GUIWarfare.BTPageClan_TCP.rfAckSearchClan
	 bool                      rfAckClanPersonelIntro ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClan_TCP.rfAckClanPersonelIntro
	 bool                      rfAckClanChangeInfo ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClan_TCP.rfAckClanChangeInfo
	 bool                      rfAckClanSecession ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageClan_TCP.rfAckClanSecession
	 bool                      rfAckClanClose ( int Result, struct FString ErrMsg, struct FString ClanName );		//  GUIWarfare.BTPageClan_TCP.rfAckClanClose
	 bool                      rfAckClanNews ( class TArray< struct FString > IssueDate, class TArray< unsigned char > IssueType, class TArray< struct FString > IssuedClanMember );		//  GUIWarfare.BTPageClan_TCP.rfAckClanNews
	 bool                      rfAckClanUserListEnd (  );                        		//  GUIWarfare.BTPageClan_TCP.rfAckClanUserListEnd
	 bool                      rfAckClanUserList ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< int > ClanWinCnt, class TArray< int > ClanLoseCnt, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > DudeId );		//  GUIWarfare.BTPageClan_TCP.rfAckClanUserList
	 bool                      rfAckClanUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageClan_TCP.rfAckClanUserListStart
	 bool                      rfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		//  GUIWarfare.BTPageClan_TCP.rfReqRecvClanInvite
}; // Size: 0x0004

// Class GUIWarfare.BTPageAuction_TCP
class DLL_IMPORT UBTPageAuction_TCP : public UBTTcpLink_Channel
{
public:
	class UBTPageAuction*                              Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckRepairItem ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, int RepairCost, class TArray< int > DamageDegree );		//  GUIWarfare.BTPageAuction_TCP.rfAckRepairItem
	 bool                      rfAckRepairCost ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > RepairCost );		//  GUIWarfare.BTPageAuction_TCP.rfAckRepairCost
	 bool                      rfAckAuctionInstantlyBuying ( int Result, struct FString ErrMsg, int PointRemain );		//  GUIWarfare.BTPageAuction_TCP.rfAckAuctionInstantlyBuying
	 bool                      rfAckAuctionBidding ( int Result, struct FString ErrMsg, int PointRemain );		//  GUIWarfare.BTPageAuction_TCP.rfAckAuctionBidding
	 bool                      rfAckAuctionTradeHistory ( int Result, struct FString ErrMsg, int ItemID, int PartID, class TArray< struct FString > SellerCharNm, class TArray< int > DamageDegree, class TArray< int > Price );		//  GUIWarfare.BTPageAuction_TCP.rfAckAuctionTradeHistory
	 bool                      rfAckAuctionItemListEnd ( unsigned char Section );		//  GUIWarfare.BTPageAuction_TCP.rfAckAuctionItemListEnd
	 bool                      rfAckAuctionItemList ( unsigned char Section, class TArray< int > UniqueIDs, class TArray< int > ItemIDs, class TArray< int > AddPartsIDs, class TArray< struct FBtrDouble > UntilTimes, class TArray< int > BiddingPrices, class TArray< int > InstantlyByuingPrices, class TArray< int > ItemDamageds, class TArray< struct FString > HighestBidderNames, class TArray< struct FString > SellerNames, class TArray< int > ItemCount );		//  GUIWarfare.BTPageAuction_TCP.rfAckAuctionItemList
	 bool                      rfAckAuctionItemListStart ( int Result, struct FString ErrMsg, unsigned char Section, int PageNum, int Count );		//  GUIWarfare.BTPageAuction_TCP.rfAckAuctionItemListStart
	 bool                      rfAckAuctionMyItemCancel ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageAuction_TCP.rfAckAuctionMyItemCancel
	 bool                      rfAckAuctionMyItemRegister ( int Result, struct FString ErrMsg, int BeginPrice, int BuyPrice, int GuarantyPoint, int PointRemain );		//  GUIWarfare.BTPageAuction_TCP.rfAckAuctionMyItemRegister
	 bool                      rfAckAuctionItemListCount ( int Result, struct FString ErrMsg, unsigned char Section, unsigned char Classfy, int ItemType, int ItemGrade, int Count );		//  GUIWarfare.BTPageAuction_TCP.rfAckAuctionItemListCount
}; // Size: 0x0004

// Class GUIWarfare.BTPageMail_TCP
class DLL_IMPORT UBTPageMail_TCP : public UBTTcpLink_Channel
{
public:
	class UBTPageMail*                                 Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTPageMail_TCP.rfAckDBCharInfo
	 bool                      rfAckGetAttachedItemFromMemo ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID );		//  GUIWarfare.BTPageMail_TCP.rfAckGetAttachedItemFromMemo
	 bool                      rfAckDeleteMailAll ( int Result, unsigned char MailType, int Count );		//  GUIWarfare.BTPageMail_TCP.rfAckDeleteMailAll
	 bool                      rfAckDelMemo ( int Result, struct FString ErrMsg, class TArray< int > FailedMemoID );		//  GUIWarfare.BTPageMail_TCP.rfAckDelMemo
	 bool                      rfAckReadMemo ( struct FString cnameFrom, struct FString Text, struct FString dateRecv, struct FBtrDouble ItemUID );		//  GUIWarfare.BTPageMail_TCP.rfAckReadMemo
	 bool                      rfAckEndMemoList (  );                            		//  GUIWarfare.BTPageMail_TCP.rfAckEndMemoList
	 bool                      rfAckMemoList ( class TArray< int > MemoIdx, class TArray< struct FString > cnameFrom, class TArray< struct FString > dateRecv, class TArray< struct FString > Text, class TArray< unsigned char > Status, class TArray< int > UntilExpire, class TArray< struct FBtrDouble > ItemUID, class TArray< int > ItemID, class TArray< unsigned char > MsgType, class TArray< int > ItemPartID );		//  GUIWarfare.BTPageMail_TCP.rfAckMemoList
	 bool                      rfAckStartMemoList ( int Result, struct FString ErrMsg, unsigned char Type, int TotalCount );		//  GUIWarfare.BTPageMail_TCP.rfAckStartMemoList
	 bool                      rfReqRecvMemo ( struct FString cnameFrom, unsigned char MemoType );		//  GUIWarfare.BTPageMail_TCP.rfReqRecvMemo
	 bool                      rfAckSendMemo ( class TArray< struct FString > CnamesToFail, class TArray< int > ResultArray );		//  GUIWarfare.BTPageMail_TCP.rfAckSendMemo
}; // Size: 0x0004

// Class GUIWarfare.BTPageLogo_TcpLogin
class DLL_IMPORT UBTPageLogo_TcpLogin : public UBTTcpLink_Login
{
public:
	class UBTPageLogo*                                 Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckLoginWithGlobal ( int Result );              		//  GUIWarfare.BTPageLogo_TcpLogin.rfAckLoginWithGlobal
	 bool                      rfAckLoginWithThailand ( int Result );            		//  GUIWarfare.BTPageLogo_TcpLogin.rfAckLoginWithThailand
	 bool                      rfAckLoginWithTencentAuth ( int Result, unsigned char tc_AccountType, unsigned char tc_IsBlock );		//  GUIWarfare.BTPageLogo_TcpLogin.rfAckLoginWithTencentAuth
	 bool                      rfAckEventNotify ( int Type );                    		//  GUIWarfare.BTPageLogo_TcpLogin.rfAckEventNotify
	 bool                      rfAckClientChecksum ( int Result );               		//  GUIWarfare.BTPageLogo_TcpLogin.rfAckClientChecksum
	 bool                      rfAckClientChallenge ( struct FString Key1, struct FBtrDouble Key2 );		//  GUIWarfare.BTPageLogo_TcpLogin.rfAckClientChallenge
	 bool                      rfAckProcessPreLoginUser ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLogo_TcpLogin.rfAckProcessPreLoginUser
	 bool                      rfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		//  GUIWarfare.BTPageLogo_TcpLogin.rfAckLoginInHouseTest
	 bool                      rfAckLoginWithWZAuth ( int Result, unsigned char wzp_AccountType, unsigned char wzp_IsBlock, unsigned char wzp_AuthKeySuccess, unsigned char ChannelType );		//  GUIWarfare.BTPageLogo_TcpLogin.rfAckLoginWithWZAuth
}; // Size: 0x0004

// Class GUIWarfare.BTPageLogin_TcpLogin
class DLL_IMPORT UBTPageLogin_TcpLogin : public UBTTcpLink_Login
{
public:
	class UBTPageLogin*                                Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckLoginWithGlobal ( int Result );              		//  GUIWarfare.BTPageLogin_TcpLogin.rfAckLoginWithGlobal
	 bool                      rfAckLoginWithThailand ( int Result );            		//  GUIWarfare.BTPageLogin_TcpLogin.rfAckLoginWithThailand
	 bool                      rfAckLoginWithTencentAuth ( int Result, unsigned char tc_AccountType, unsigned char tc_IsBlock );		//  GUIWarfare.BTPageLogin_TcpLogin.rfAckLoginWithTencentAuth
	 bool                      rfAckLoginWithWZAuth ( int Result, unsigned char wzp_AccountType, unsigned char wzp_IsBlock, unsigned char wzp_AuthKeySuccess, unsigned char ChannelType );		//  GUIWarfare.BTPageLogin_TcpLogin.rfAckLoginWithWZAuth
	 bool                      rfAckProcessPreLoginUser ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageLogin_TcpLogin.rfAckProcessPreLoginUser
	 bool                      rfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		//  GUIWarfare.BTPageLogin_TcpLogin.rfAckLoginInHouseTest
	 bool                      rfAckCreateChar ( int Success, struct FString ErrMsg );		//  GUIWarfare.BTPageLogin_TcpLogin.rfAckCreateChar
	 bool                      rfAckLogin ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg );		//  GUIWarfare.BTPageLogin_TcpLogin.rfAckLogin
}; // Size: 0x0004

// Class GUIWarfare.BTPageStore_TCP
class DLL_IMPORT UBTPageStore_TCP : public UBTTcpLink_Channel
{
public:
	class UBTPageStore*                                Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckCouponUse ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageStore_TCP.rfAckCouponUse
	 bool                      rfAckGiftItemByWebzenCash ( int Result, struct FString ErrMsg, int LeftProductCount );		//  GUIWarfare.BTPageStore_TCP.rfAckGiftItemByWebzenCash
	 bool                      rfAckBuyItemByWebzenCash ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageStore_TCP.rfAckBuyItemByWebzenCash
	 bool                      rfAckSendGift ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain );		//  GUIWarfare.BTPageStore_TCP.rfAckSendGift
	 bool                      rfAckShopItemListEnd (  );                        		//  GUIWarfare.BTPageStore_TCP.rfAckShopItemListEnd
	 bool                      rfAckShopItemList ( class TArray< int > ItemID ); 		//  GUIWarfare.BTPageStore_TCP.rfAckShopItemList
	 bool                      rfAckShopItemListStart ( int Count );             		//  GUIWarfare.BTPageStore_TCP.rfAckShopItemListStart
}; // Size: 0x0004

// Class GUIWarfare.BTPageMyInfo_TCP
class DLL_IMPORT UBTPageMyInfo_TCP : public UBTTcpLink_Channel
{
public:
	class UBTPageMyInfo*                               Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckGetRankingInfoListEnd (  );                  		//  GUIWarfare.BTPageMyInfo_TCP.rfAckGetRankingInfoListEnd
	 bool                      rfAckGetRankingInfoList ( int Result, unsigned char RankingType, unsigned char CommunityType, class TArray< struct FString > CharName, class TArray< int > CharLevel, class TArray< struct FString > ClanName, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Ranking_Accum, class TArray< int > Ranking_Accum_Prev, class TArray< int > Ranking_Accum_Exp, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageMyInfo_TCP.rfAckGetRankingInfoList
	 bool                      rfAckGetRankingInfoListStart ( int Result, unsigned char RankingType, unsigned char CommunityType, int TotalCount );		//  GUIWarfare.BTPageMyInfo_TCP.rfAckGetRankingInfoListStart
	 bool                      rfAckCharDetailInfo ( int MaxSerial, int MaxScore, int MaxKill, int MaxAssist, int Serial3, int Serial5, int Serial7, int Serial10, int Serial15, int AR, int SMG, int SR, int SW, int Melee, int Grenade, int FlashBang, int Foot, int AT4, int MG, int Fire, int RPG7, int TimeBomb, int IcendiaryBomb, int ClusterBomb, int ByChopper, int Artillery, int KillChopper, int FirstKill, int LastKill, int AllKill, int Dominate, int InstallBomb, int DefuseBomb );		//  GUIWarfare.BTPageMyInfo_TCP.rfAckCharDetailInfo
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTPageMyInfo_TCP.rfAckDBCharInfo
}; // Size: 0x0004

// Class GUIWarfare.BTPageCharacterCreation_TcpLogin
class DLL_IMPORT UBTPageCharacterCreation_TcpLogin : public UBTTcpLink_Login
{
public:
	class UBTPageCharacterCreation*                    Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      rfAckProcessPreLoginUser ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageCharacterCreation_TcpLogin.rfAckProcessPreLoginUser
	 bool                      rfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		//  GUIWarfare.BTPageCharacterCreation_TcpLogin.rfAckLoginInHouseTest
	 bool                      rfAckCreateChar ( int Success, struct FString ErrMsg );		//  GUIWarfare.BTPageCharacterCreation_TcpLogin.rfAckCreateChar
}; // Size: 0x0004

// Class GUIWarfare.BTPageMatchResult_TCP
class DLL_IMPORT UBTPageMatchResult_TCP : public UBTTcpLink_Channel
{
public:
	class UBTPageMatchResult*                          Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
}; // Size: 0x0004

// Class GUIWarfare.BTPageHelp_TCP
class DLL_IMPORT UBTPageHelp_TCP : public UBTTcpLink_Channel
{
public:
	class UBTPageHelp*                                 Owner;                                            		// 0x002C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
}; // Size: 0x0004

// Class GUIWarfare.BTPageServerSelectionCN
class DLL_IMPORT UBTPageServerSelectionCN : public UBTPageServerSelection
{
public:
	struct FFloatBox                                   fbLabelBackgrounddeco;                            		// 0x06E0 ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UBTOwnerDrawImageHK*                         LabelBackgrounddeco;                              		// 0x06F0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         BGImageTotalServer;                               		// 0x06F4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         CategorySvrChr[ 0x06 ];                           		// 0x06F8 ( 0x0018 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     strCategory[ 0x06 ];                              		// 0x0710 ( 0x0048 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbCategoryPos[ 0x06 ];                            		// 0x0758 ( 0x0060 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FString                                     strEnterCh;                                       		// 0x07B8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      AD_Large_OnClick ( class UGUIComponent* Sender ); 		//  GUIWarfare.BTPageServerSelectionCN.AD_Large_OnClick
	 bool                      AD_Small_OnClick ( class UGUIComponent* Sender ); 		//  GUIWarfare.BTPageServerSelectionCN.AD_Small_OnClick
	 bool                      rfAckTencent_StartTenProtect ( int CharDBID );    		//  GUIWarfare.BTPageServerSelectionCN.rfAckTencent_StartTenProtect
	 bool                      rfAckMoveToLobby ( unsigned char MessageType );   		//  GUIWarfare.BTPageServerSelectionCN.rfAckMoveToLobby
	 bool                      rfAckQSlotList ( int Result, struct FString ErrMsg, class TArray< int > QSlotID, class TArray< struct FString > QSlotName, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWItemID, class TArray< struct FBtrDouble > PistolItemID, class TArray< struct FBtrDouble > TWItemID1, class TArray< struct FBtrDouble > TWItemID2, class TArray< int > Skill1, class TArray< int > Skill2, class TArray< int > Skill3, class TArray< int > Skill4 );		//  GUIWarfare.BTPageServerSelectionCN.rfAckQSlotList
	 bool                      rfAckItemListEnd (  );                            		//  GUIWarfare.BTPageServerSelectionCN.rfAckItemListEnd
	 bool                      rfAckServerType ( unsigned char Type );           		//  GUIWarfare.BTPageServerSelectionCN.rfAckServerType
	 void                      Receive_EventGift ( int Index );                  		//  GUIWarfare.BTPageServerSelectionCN.Receive_EventGift
	 bool                      rfAckRecvSystemMsg ( unsigned char CommunityType, struct FSystemMsgParam MsgInfo );		//  GUIWarfare.BTPageServerSelectionCN.rfAckRecvSystemMsg
	 bool                      rfAckPaidItem_RelayBroadcast ( struct FString CharName, struct FString Msg );		//  GUIWarfare.BTPageServerSelectionCN.rfAckPaidItem_RelayBroadcast
	 bool                      rfAckChatClan ( struct FString CharName, struct FString Message, int Result );		//  GUIWarfare.BTPageServerSelectionCN.rfAckChatClan
	 bool                      rfReqRecvChatWispher ( struct FString CharnameFrom, struct FString Message );		//  GUIWarfare.BTPageServerSelectionCN.rfReqRecvChatWispher
	 bool                      rfAckChatNormal ( int id, struct FString Sender, struct FString Message, int Result );		//  GUIWarfare.BTPageServerSelectionCN.rfAckChatNormal
	 bool                      rfAckSetLookForClan ( int Result, struct FString ErrMsg, unsigned char IsLookingFor );		//  GUIWarfare.BTPageServerSelectionCN.rfAckSetLookForClan
	 bool                      rfAckGetMyMailBoxState ( int Result, unsigned char IsFull, int NewMailCount );		//  GUIWarfare.BTPageServerSelectionCN.rfAckGetMyMailBoxState
	 bool                      BTWindowDefineARHK_40_41_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelectionCN.BTWindowDefineARHK_40_41_OnOK
	 bool                      rfAckClientChecksum ( int Result );               		//  GUIWarfare.BTPageServerSelectionCN.rfAckClientChecksum
	 bool                      rfAckClientChallenge ( struct FString Key1, struct FBtrDouble Key2 );		//  GUIWarfare.BTPageServerSelectionCN.rfAckClientChallenge
	 void                      ChatBlockEndTime_OnEventTimer ( int Index );      		//  GUIWarfare.BTPageServerSelectionCN.ChatBlockEndTime_OnEventTimer
	 void                      ChatBlockStartTime_OnEventTimer ( int Index );    		//  GUIWarfare.BTPageServerSelectionCN.ChatBlockStartTime_OnEventTimer
	 bool                      rfAckCharBlockInfo ( int Result, struct FBtrDouble ChatBlockStartTime, struct FBtrDouble ChatBlockEndTime, class TArray< struct FBtrDouble > BlockedItemIdx );		//  GUIWarfare.BTPageServerSelectionCN.rfAckCharBlockInfo
	 bool                      rfAckGMLeaveRoom ( int Result, int RoomNumber, int UserID );		//  GUIWarfare.BTPageServerSelectionCN.rfAckGMLeaveRoom
	 bool                      rfAckGMEnterRoom ( int Result, int RoomNumber, int UserID );		//  GUIWarfare.BTPageServerSelectionCN.rfAckGMEnterRoom
	 bool                      rfAckForceDisconnectUser_GM ( int Result, struct FString ErrMsg, struct FString CharName );		//  GUIWarfare.BTPageServerSelectionCN.rfAckForceDisconnectUser_GM
	 bool                      rfAckNotice_GM ( int Result, struct FString ErrMsg, unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg );		//  GUIWarfare.BTPageServerSelectionCN.rfAckNotice_GM
	 bool                      rfAckChangeRoomTitle_GM ( int Result, int RoomNumber, struct FString NewRoomTitle );		//  GUIWarfare.BTPageServerSelectionCN.rfAckChangeRoomTitle_GM
	 bool                      rfAckPaidItem_ChangeClanMark ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTPageServerSelectionCN.rfAckPaidItem_ChangeClanMark
	 bool                      rfAckPaidItem_ClanMarkDupCheck ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelectionCN.rfAckPaidItem_ClanMarkDupCheck
	 bool                      rfAckPaidItem_NotifyChangeClanname ( struct FString NewClanname );		//  GUIWarfare.BTPageServerSelectionCN.rfAckPaidItem_NotifyChangeClanname
	 bool                      rfAckPaidItem_BroadCast ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		//  GUIWarfare.BTPageServerSelectionCN.rfAckPaidItem_BroadCast
	 bool                      rfAckPaidItem_EraseRecord ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int Command, int RemainCount );		//  GUIWarfare.BTPageServerSelectionCN.rfAckPaidItem_EraseRecord
	 bool                      rfAckWebzenBillingUseStorageItem ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID, struct FBtrDouble ItemExtra );		//  GUIWarfare.BTPageServerSelectionCN.rfAckWebzenBillingUseStorageItem
	 bool                      rfAckWebzenBillingStorageListEnd (  );            		//  GUIWarfare.BTPageServerSelectionCN.rfAckWebzenBillingStorageListEnd
	 bool                      rfAckWebzenBillingStorageList ( class TArray< int > Seq, class TArray< int > ItemSeq, class TArray< int > GroupCode, class TArray< int > ShareFlag, class TArray< int > ProductSeq, class TArray< struct FString > CashName, class TArray< struct FBtrDouble > CashPoint, class TArray< struct FString > SendAccountID, class TArray< struct FString > SendMessage, class TArray< unsigned char > ItemType, class TArray< unsigned char > RelationType, class TArray< int > ProductType, class TArray< int > PriceSeq );		//  GUIWarfare.BTPageServerSelectionCN.rfAckWebzenBillingStorageList
	 bool                      rfAckWebzenBillingStorageListStart ( int Result, struct FString ErrMsg, int TotalCount, int TotalPage, int CurPage );		//  GUIWarfare.BTPageServerSelectionCN.rfAckWebzenBillingStorageListStart
	 bool                      rfAckRemoveBlockUserList ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelectionCN.rfAckRemoveBlockUserList
	 bool                      rfAckAddBlockUserList ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelectionCN.rfAckAddBlockUserList
	 bool                      rfAckEquipItem ( int ChangedNewItemID, struct FBtrDouble ChangedNewUniqueID, int ChangedNewSlotPosition, int ChangedOldItemID, struct FBtrDouble ChangedOldUniqueID, int ChangedOldSlotPosition, int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelectionCN.rfAckEquipItem
	 bool                      rfAckRandomBox_Use ( int Result, struct FString ErrMsg, struct FBtrDouble RandomBoxItemIdx, int RandomBxoItemCount, class TArray< int > ItemIDChoose, class TArray< int > PartIDChoose, class TArray< int > PeriodOnChoosenItem, class TArray< int > StackCountOnChoosenItem, class TArray< unsigned char > bHave, class TArray< struct FBtrDouble > ItemIdx, class TArray< struct FBtrDouble > UntilTime, class TArray< int > StackCount );		//  GUIWarfare.BTPageServerSelectionCN.rfAckRandomBox_Use
	 bool                      BTWindowRandBoxHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelectionCN.BTWindowRandBoxHK_OnOK
	 bool                      rfAckBlockUserList ( class TArray< struct FString > CharName );		//  GUIWarfare.BTPageServerSelectionCN.rfAckBlockUserList
	 bool                      rfAckPCBangUserListEnd (  );                      		//  GUIWarfare.BTPageServerSelectionCN.rfAckPCBangUserListEnd
	 bool                      rfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, class TArray< unsigned char > IsCombat, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		//  GUIWarfare.BTPageServerSelectionCN.rfAckPCBangUserList
	 bool                      rfAckPCBangUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageServerSelectionCN.rfAckPCBangUserListStart
	 bool                      rfAckFriendList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > LevelMarkID, class TArray< int > ClanLevel, class TArray< int > Level, class TArray< unsigned char > IsLookForClan );		//  GUIWarfare.BTPageServerSelectionCN.rfAckFriendList
	 bool                      rfAckFriendListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageServerSelectionCN.rfAckFriendListStart
	 bool                      rfAckClanUserListEnd (  );                        		//  GUIWarfare.BTPageServerSelectionCN.rfAckClanUserListEnd
	 bool                      rfAckClanUserList ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< int > ClanWinCnt, class TArray< int > ClanLoseCnt, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > DudeId );		//  GUIWarfare.BTPageServerSelectionCN.rfAckClanUserList
	 bool                      rfAckClanUserListStart ( int Result, int TotalCount );		//  GUIWarfare.BTPageServerSelectionCN.rfAckClanUserListStart
	 bool                      rfAckRegisterMainPCBang ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelectionCN.rfAckRegisterMainPCBang
	 bool                      rfReqIsPaidWebzenPCBang ( unsigned char IsPaid ); 		//  GUIWarfare.BTPageServerSelectionCN.rfReqIsPaidWebzenPCBang
	 bool                      rfAckClanInfo ( struct FClanInfo stClanInfo );    		//  GUIWarfare.BTPageServerSelectionCN.rfAckClanInfo
	 bool                      rfAckCharInfo ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FCharInfo stCharInfo, unsigned char InClanRank, int ClanLevel );		//  GUIWarfare.BTPageServerSelectionCN.rfAckCharInfo
	 bool                      rfAckRegisteredPCBangInfo ( int Result, struct FString ErrMsg, unsigned char IsRegisteredPCBang, unsigned char IsMainPCBang, struct FString PCBangName );		//  GUIWarfare.BTPageServerSelectionCN.rfAckRegisteredPCBangInfo
	 bool                      rfUpdateWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		//  GUIWarfare.BTPageServerSelectionCN.rfUpdateWebzenShopScriptVersion
	 bool                      rfAckWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		//  GUIWarfare.BTPageServerSelectionCN.rfAckWebzenShopScriptVersion
	 bool                      rfAckMyMoney ( int Result, struct FString ErrMsg, int Point, int Cash );		//  GUIWarfare.BTPageServerSelectionCN.rfAckMyMoney
	 bool                      rfReqDailyQuestNewAvailable ( class TArray< int > ExpiredQuestID, class TArray< int > NewQuestID );		//  GUIWarfare.BTPageServerSelectionCN.rfReqDailyQuestNewAvailable
	 bool                      rfReqQuestNewAvailable ( class TArray< int > AchivedQuestID, class TArray< int > NewQuestID, class TArray< unsigned char > IsDailyQuest, class TArray< int > ExpiredQuest );		//  GUIWarfare.BTPageServerSelectionCN.rfReqQuestNewAvailable
	 bool                      rfAckQuestUpdate ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelectionCN.rfAckQuestUpdate
	 bool                      rfAckQuestListEnd (  );                           		//  GUIWarfare.BTPageServerSelectionCN.rfAckQuestListEnd
	 bool                      rfAckQuestList ( class TArray< int > QuestID, class TArray< int > CountPrograss, class TArray< unsigned char > IsDailyQuest );		//  GUIWarfare.BTPageServerSelectionCN.rfAckQuestList
	 bool                      rfAckQuestListStart ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelectionCN.rfAckQuestListStart
	 bool                      rfAckLimitedListInChannel ( int Result, class TArray< int > LimitedMapID, class TArray< int > LimitedModeID );		//  GUIWarfare.BTPageServerSelectionCN.rfAckLimitedListInChannel
	 bool                      rfReqClanMatch_InviteCrewResult ( struct FString Invitee, int Result );		//  GUIWarfare.BTPageServerSelectionCN.rfReqClanMatch_InviteCrewResult
	 bool                      BTWindowInviteClanWarGameHK_OnCancel ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelectionCN.BTWindowInviteClanWarGameHK_OnCancel
	 bool                      BTWindowInviteClanWarGameHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelectionCN.BTWindowInviteClanWarGameHK_OnOK
	 bool                      rfReqClanMatch_RecvInviteCrew ( struct FString Inviter, struct FString ServerIP, int Port, int WaittingID, struct FString Msg, int MapNum, int InviteUserChannelNum, struct FString LeaderName, struct FString RoomName );		//  GUIWarfare.BTPageServerSelectionCN.rfReqClanMatch_RecvInviteCrew
	 bool                      rfAckClanMatch_InviteCrew ( int Result, struct FString ErrMsg );		//  GUIWarfare.BTPageServerSelectionCN.rfAckClanMatch_InviteCrew
	 bool                      rfReqAnswerInviteGameRoom ( unsigned char Answer, struct FString GuestCharName );		//  GUIWarfare.BTPageServerSelectionCN.rfReqAnswerInviteGameRoom
	 bool                      rfAckRecvInviteGameRoomResult ( int Result );     		//  GUIWarfare.BTPageServerSelectionCN.rfAckRecvInviteGameRoomResult
	 bool                      rfReqRecvInviteGameRoom ( struct FString InviteUserServerName, int InviteUserServerID, int InviteUserChannelNumber, struct FString RoomUniqueID, int RoomNumber, struct FString RoomName, unsigned char RoomState, struct FString MapName, struct FString OwnerName, unsigned char GameMode, unsigned char WeaponLimit, unsigned char IsTeamBalance, struct FString Password, struct FString InviteCharName );		//  GUIWarfare.BTPageServerSelectionCN.rfReqRecvInviteGameRoom
	 bool                      rfAckGetServerTime ( struct FBtrDouble ServerTime, struct FString ClientIP );		//  GUIWarfare.BTPageServerSelectionCN.rfAckGetServerTime
	 bool                      rfAckTencent_AASInfo ( int UserID, unsigned char IsAdult, unsigned char IsQQAuth, int AccumTimeSec );		//  GUIWarfare.BTPageServerSelectionCN.rfAckTencent_AASInfo
	 void                      TcpLogin_OnConnect ( int ErrCode );               		//  GUIWarfare.BTPageServerSelectionCN.TcpLogin_OnConnect
	 void                      MoveToChannel ( class UBTACLServerSelectionHK* serverACL );		//  GUIWarfare.BTPageServerSelectionCN.MoveToChannel
	 void                      NewMoveToChannelByClick ( class UBTACLServerSelectionHK* serverACL );		//  GUIWarfare.BTPageServerSelectionCN.NewMoveToChannelByClick
	 void                      NewMoveToChannel ( class UBTACLServerSelectionHK* serverACL );		//  GUIWarfare.BTPageServerSelectionCN.NewMoveToChannel
	 bool                      NoClanEnter_OnOK ( class UGUIComponent* Sender ); 		//  GUIWarfare.BTPageServerSelectionCN.NoClanEnter_OnOK
	 void                      AutoMoveTochannel ( int ServerID, int ChannelID );		//  GUIWarfare.BTPageServerSelectionCN.AutoMoveTochannel
	 void                      OnCompleteOpened (  );                            		//  GUIWarfare.BTPageServerSelectionCN.OnCompleteOpened
	 bool                      ButtonEnterCh_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelectionCN.ButtonEnterCh_OnClick
	 bool                      BTWIndowTodayResultHK_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelectionCN.BTWIndowTodayResultHK_OnOK
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageServerSelectionCN.InitComponent
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageServerSelectionCN.HeaderButton_OnClick
}; // Size: 0x00E4

// Class GUIWarfare.BTPageLobbyCN
class DLL_IMPORT UBTPageLobbyCN : public UBTPageLobby
{
public:
	struct FString                                     strTooltip[ 0x05 ];                               		// 0x08A0 ( 0x003C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strListTop[ 0x0A ];                               		// 0x08DC ( 0x0078 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strListBottom[ 0x05 ];                            		// 0x0954 ( 0x003C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UBTOwnerDrawCaptionButtonHK*                 MyInfoBtn;                                        		// 0x0990 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawCaptionButtonHK*                 MyTutorialBtn;                                    		// 0x0994 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UBTOwnerDrawImageHK*                         LabelBackgrounddeco;                              		// 0x0998 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelBackgrounddeco;                            		// 0x099C ( 0x0010 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FString                                     szSerVerInfo;                                     		// 0x09AC ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTOwnerDrawImageHK*                         LabelSvrInfo;                                     		// 0x09B8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FFloatBox                                   fbLabelInfo;                                      		// 0x09BC ( 0x0010 ) 

	// UScript Functions
	 void                      OnCompleteOpened (  );                            		//  GUIWarfare.BTPageLobbyCN.OnCompleteOpened
	 bool                      Internal_OnPreDraw ( class UCanvas* C );          		//  GUIWarfare.BTPageLobbyCN.Internal_OnPreDraw
	 bool                      rfReqExteriorRoomInfo ( int SP, int RoomNumber, unsigned char IsPW, struct FString RoomName, struct FString MapName, struct FString ModeName, int MapNum, int ModeNum, unsigned char IsTeamBalance, int MaxUserCount, int RoomUserCount, unsigned char RoomState, unsigned char BotDifficult, unsigned char WeaponLimit, unsigned char BotModeUserTeamNum );		//  GUIWarfare.BTPageLobbyCN.rfReqExteriorRoomInfo
	 bool                      rfAckCharDetailInfo ( int MaxSerial, int MaxScore, int MaxKill, int MaxAssist, int Serial3, int Serial5, int Serial7, int Serial10, int Serial15, int AR, int SMG, int SR, int SW, int Melee, int Grenade, int FlashBang, int Foot, int AT4, int MG, int Fire, int RPG7, int TimeBomb, int IcendiaryBomb, int ClusterBomb, int ByChopper, int Artillery, int KillChopper, int FirstKill, int LastKill, int AllKill, int Dominate, int InstallBomb, int DefuseBomb );		//  GUIWarfare.BTPageLobbyCN.rfAckCharDetailInfo
	 bool                      rfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		//  GUIWarfare.BTPageLobbyCN.rfAckDBCharInfo
	 bool                      BTWindowDefineSelectHK_24_OnOK ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobbyCN.BTWindowDefineSelectHK_24_OnOK
	 bool                      StartTutorial_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobbyCN.StartTutorial_OnClick
	 bool                      MyInfo_OnClick ( class UGUIComponent* Sender );   		//  GUIWarfare.BTPageLobbyCN.MyInfo_OnClick
	 bool                      rfAckRoomList ( class TArray< int > GameNum, class TArray< struct FString > Title, class TArray< struct FString > MapName, class TArray< int > MapNum, class TArray< unsigned char > UserCount, class TArray< unsigned char > MaxCount, class TArray< struct FString > ModeName, class TArray< int > ModeNum, class TArray< unsigned char > WeaponLimit, class TArray< unsigned char > IsTeamBalance, class TArray< unsigned char > Status, class TArray< struct FString > RoomOwnerIP, class TArray< int > GameMinute, class TArray< struct FString > RoomOwnerName, class TArray< unsigned char > IsSpecial, class TArray< unsigned char > IsPassword, class TArray< unsigned char > BotDifficult, class TArray< unsigned char > BotModeUserTeamNum );		//  GUIWarfare.BTPageLobbyCN.rfAckRoomList
	 bool                      MoveToRoom ( int Index );                         		//  GUIWarfare.BTPageLobbyCN.MoveToRoom
	 class UBTWindowQuickEnterRoomHK* GetWindowQuickEnter (  );                         		//  GUIWarfare.BTPageLobbyCN.GetWindowQuickEnter
	 bool                      OnBottomButton_Click ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobbyCN.OnBottomButton_Click
	 bool                      HeaderButton_OnClick ( class UGUIComponent* Sender );		//  GUIWarfare.BTPageLobbyCN.HeaderButton_OnClick
	 bool                      AD_OnClick ( class UGUIComponent* Sender );       		//  GUIWarfare.BTPageLobbyCN.AD_OnClick
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  GUIWarfare.BTPageLobbyCN.InitComponent
}; // Size: 0x012C

#ifdef _MSC_VER
#pragma pack ( pop )
#endif

