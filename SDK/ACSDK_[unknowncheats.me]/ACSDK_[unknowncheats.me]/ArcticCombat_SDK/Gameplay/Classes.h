#pragma once
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : Gameplay
# >    File : Classes.h
# ======================================================================================== #
*/

#ifdef _MSC_VER
#pragma pack ( push, 4 )
#endif


/*
# ======================================================================================== #
# > Classes
# ======================================================================================== #
*/

// Class Gameplay.AnimNotify_EjectShell
class DLL_IMPORT UAnimNotify_EjectShell : public UAnimNotify_Scripted
{
public:

	// UScript Functions
	 void                      eventNotify ( class AActor* Owner );              		// [ FUNC_Simulated | FUNC_Event ] Gameplay.AnimNotify_EjectShell.Notify
}; // Size: 0x0000

// Class Gameplay.AnimNotify_ReloadWeapon
class DLL_IMPORT UAnimNotify_ReloadWeapon : public UAnimNotify_Scripted
{
public:

	// UScript Functions
	 void                      eventNotify ( class AActor* Owner );              		// [ FUNC_Simulated | FUNC_Event ] Gameplay.AnimNotify_ReloadWeapon.Notify
}; // Size: 0x0000

// Class Gameplay.AnimNotify_EjectShell_3rd
class DLL_IMPORT UAnimNotify_EjectShell_3rd : public UAnimNotify_Scripted
{
public:

	// UScript Functions
	 void                      eventNotify ( class AActor* Owner );              		// [ FUNC_Simulated | FUNC_Event ] Gameplay.AnimNotify_EjectShell_3rd.Notify
}; // Size: 0x0000

// Class Gameplay.AnimNotify_EjectShell_Recham
class DLL_IMPORT UAnimNotify_EjectShell_Recham : public UAnimNotify_Scripted
{
public:

	// UScript Functions
	 void                      eventNotify ( class AActor* Owner );              		// [ FUNC_Simulated | FUNC_Event ] Gameplay.AnimNotify_EjectShell_Recham.Notify
}; // Size: 0x0000

// Class Gameplay.CriticalEventPlus
class DLL_IMPORT ACriticalEventPlus : public ALocalMessage
{
public:
}; // Size: 0x0000

// Class Gameplay.ScriptedController
class DLL_IMPORT AScriptedController : public AAIController
{
public:
	class AController*                                 PendingController;                                		// 0x0608 ( 0x0004 ) 
	int                                                ActionNum;                                        		// 0x060C ( 0x0004 ) 
	int                                                AnimsRemaining;                                   		// 0x0610 ( 0x0004 ) 
	class AScriptedSequence*                           SequenceScript;                                   		// 0x0614 ( 0x0004 ) 
	class ULatentScriptedAction*                       CurrentAction;                                    		// 0x0618 ( 0x0004 ) 
	class UAction_PLAYANIM*                            CurrentAnimation;                                 		// 0x061C ( 0x0004 ) 
	unsigned long                                      bBroken:1;                                        		// 0x0620 ( 0x0004 )  [0x00000001]
	unsigned long                                      bShootTarget:1;                                   		// 0x0620 ( 0x0004 )  [0x00000002]
	unsigned long                                      bShootSpray:1;                                    		// 0x0620 ( 0x0004 )  [0x00000004]
	unsigned long                                      bPendingShoot:1;                                  		// 0x0620 ( 0x0004 )  [0x00000008]
	unsigned long                                      bFakeShot:1;                                      		// 0x0620 ( 0x0004 )  [0x00000010]
	unsigned long                                      bUseScriptFacing:1;                               		// 0x0620 ( 0x0004 )  [0x00000020]
	unsigned long                                      bPendingDoubleJump:1;                             		// 0x0620 ( 0x0004 )  [0x00000040]
	unsigned long                                      bFineWeaponControl:1;                             		// 0x0620 ( 0x0004 )  [0x00000080]
	unsigned long                                      bChangingPawns:1;                                 		// 0x0620 ( 0x0004 )  [0x00000100]
	class AActor*                                      ScriptedFocus;                                    		// 0x0624 ( 0x0004 ) 
	class APlayerController*                           MyPlayerController;                               		// 0x0628 ( 0x0004 ) 
	int                                                NumShots;                                         		// 0x062C ( 0x0004 ) 
	struct FName                                       FiringMode;                                       		// 0x0630 ( 0x0004 ) 
	int                                                IterationCounter;                                 		// 0x0634 ( 0x0004 ) 
	int                                                IterationSectionStart;                            		// 0x0638 ( 0x0004 ) 

	// UScript Functions
	 void                      LeaveScripting (  );                              		//  Gameplay.ScriptedController.LeaveScripting
	 struct FRotator           AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError );		//  Gameplay.ScriptedController.AdjustAim
	 int                       SetFireYaw ( int FireYaw );                       		//  Gameplay.ScriptedController.SetFireYaw
	 void                      ClearAnimation (  );                              		//  Gameplay.ScriptedController.ClearAnimation
	 void                      SetNewScript ( class AScriptedSequence* NewScript );		//  Gameplay.ScriptedController.SetNewScript
	 void                      ClearScript (  );                                 		//  Gameplay.ScriptedController.ClearScript
	 bool                      CheckIfNearPlayer ( float Distance );             		//  Gameplay.ScriptedController.CheckIfNearPlayer
	 class AActor*             GetSoundSource (  );                              		//  Gameplay.ScriptedController.GetSoundSource
	 class APawn*              GetInstigator (  );                               		//  Gameplay.ScriptedController.GetInstigator
	 class APawn*              GetMyPlayer (  );                                 		//  Gameplay.ScriptedController.GetMyPlayer
	 void                      DestroyPawn (  );                                 		//  Gameplay.ScriptedController.DestroyPawn
	 void                      SetEnemyReaction ( int AlertnessLevel );          		//  Gameplay.ScriptedController.SetEnemyReaction
	 void                      TakeControlOf ( class APawn* aPawn );             		//  Gameplay.ScriptedController.TakeControlOf
	 void                      eventNotifyJumpApex (  );                         		// [ FUNC_Event ] Gameplay.ScriptedController.NotifyJumpApex
	 void                      SetDoubleJump (  );                               		//  Gameplay.ScriptedController.SetDoubleJump
	 bool                      WeaponFireAgain ( float RefireRate, bool bFinishedFire );		//  Gameplay.ScriptedController.WeaponFireAgain
}; // Size: 0x0034

// Class Gameplay.ScriptedSequence
class DLL_IMPORT AScriptedSequence : public AAIScript
{
public:
	class TArray< class UScriptedAction* >             Actions;                                          		// 0x03D4 ( 0x000C ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UClass*                                      ScriptControllerClass;                            		// 0x03E0 ( 0x0004 ) 

	// UScript Functions
	 void                      SetActions ( class AScriptedController* C );      		//  Gameplay.ScriptedSequence.SetActions
	 bool                      ValidAction ( int N );                            		//  Gameplay.ScriptedSequence.ValidAction
	 void                      TakeOver ( class APawn* P );                      		//  Gameplay.ScriptedSequence.TakeOver
	 bool                      CheckForErrors (  );                              		//  Gameplay.ScriptedSequence.CheckForErrors
	 void                      SpawnControllerFor ( class APawn* P );            		//  Gameplay.ScriptedSequence.SpawnControllerFor
	 void                      eventReset (  );                                  		// [ FUNC_Event ] Gameplay.ScriptedSequence.Reset
	 void                      PostBeginPlay (  );                               		//  Gameplay.ScriptedSequence.PostBeginPlay
}; // Size: 0x0010

// Class Gameplay.ScriptedAction
class DLL_IMPORT UScriptedAction : public UObject
{
public:
	struct FString                                     ActionString;                                     		// 0x002C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bValidForTrigger:1;                               		// 0x0038 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 struct FString            GetActionString (  );                             		//  Gameplay.ScriptedAction.GetActionString
	 void                      ProceedToSectionEnd ( class AScriptedController* C );		//  Gameplay.ScriptedAction.ProceedToSectionEnd
	 void                      ProceedToNextAction ( class AScriptedController* C );		//  Gameplay.ScriptedAction.ProceedToNextAction
	 class AScriptedSequence*  GetScript ( class AScriptedSequence* S );         		//  Gameplay.ScriptedAction.GetScript
	 bool                      StartsSection (  );                               		//  Gameplay.ScriptedAction.StartsSection
	 bool                      EndsSection (  );                                 		//  Gameplay.ScriptedAction.EndsSection
	 bool                      InitActionFor ( class AScriptedController* C );   		//  Gameplay.ScriptedAction.InitActionFor
	 void                      eventReset (  );                                  		// [ FUNC_Event ] Gameplay.ScriptedAction.Reset
	 void                      eventPostBeginPlay ( class AScriptedSequence* ss );		// [ FUNC_Event ] Gameplay.ScriptedAction.PostBeginPlay
	 void                      eventActionCompleted (  );                        		// [ FUNC_Event ] Gameplay.ScriptedAction.ActionCompleted
}; // Size: 0x0010

// Class Gameplay.LatentScriptedAction
class DLL_IMPORT ULatentScriptedAction : public UScriptedAction
{
public:

	// UScript Functions
	 float                     GetDistance (  );                                 		//  Gameplay.LatentScriptedAction.GetDistance
	 class AActor*             GetMoveTargetFor ( class AScriptedController* C );		//  Gameplay.LatentScriptedAction.GetMoveTargetFor
	 bool                      TurnToGoal (  );                                  		//  Gameplay.LatentScriptedAction.TurnToGoal
	 bool                      MoveToGoal (  );                                  		//  Gameplay.LatentScriptedAction.MoveToGoal
	 bool                      StillTicking ( class AScriptedController* C, float DeltaTime );		//  Gameplay.LatentScriptedAction.StillTicking
	 bool                      TickedAction (  );                                		//  Gameplay.LatentScriptedAction.TickedAction
	 bool                      WaitForPlayer (  );                               		//  Gameplay.LatentScriptedAction.WaitForPlayer
	 bool                      CompleteWhenTimer (  );                           		//  Gameplay.LatentScriptedAction.CompleteWhenTimer
	 bool                      CompleteOnLIPSincAnim (  );                       		//  Gameplay.LatentScriptedAction.CompleteOnLIPSincAnim
	 bool                      CompleteOnAnim ( int Channel );                   		//  Gameplay.LatentScriptedAction.CompleteOnAnim
	 bool                      CompleteWhenTriggered (  );                       		//  Gameplay.LatentScriptedAction.CompleteWhenTriggered
	 bool                      InitActionFor ( class AScriptedController* C );   		//  Gameplay.LatentScriptedAction.InitActionFor
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		//  Gameplay.LatentScriptedAction.DisplayDebug
}; // Size: 0x0000

// Class Gameplay.Action_PLAYANIM
class DLL_IMPORT UAction_PLAYANIM : public UScriptedAction
{
public:
	struct FName                                       BaseAnim;                                         		// 0x003C ( 0x0004 ) [ CPF_Edit ]
	float                                              BlendInTime;                                      		// 0x0040 ( 0x0004 ) [ CPF_Edit ]
	float                                              BlendOutTime;                                     		// 0x0044 ( 0x0004 ) [ CPF_Edit ]
	float                                              AnimRate;                                         		// 0x0048 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      AnimIterations;                                   		// 0x004C ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      bLoopAnim:1;                                      		// 0x0050 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              StartFrame;                                       		// 0x0054 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 struct FString            GetActionString (  );                             		//  Gameplay.Action_PLAYANIM.GetActionString
	 bool                      PawnPlayBaseAnim ( class AScriptedController* C, bool bFirstPlay );		//  Gameplay.Action_PLAYANIM.PawnPlayBaseAnim
	 void                      SetCurrentAnimationFor ( class AScriptedController* C );		//  Gameplay.Action_PLAYANIM.SetCurrentAnimationFor
	 bool                      InitActionFor ( class AScriptedController* C );   		//  Gameplay.Action_PLAYANIM.InitActionFor
}; // Size: 0x001C

// Class Gameplay.Drowned
class DLL_IMPORT ADrowned : public ADamageType
{
public:

	// UScript Functions
	 class UClass*             GetPawnDamageEffect ( struct FVector HitLocation, float Damage, struct FVector Momentum, class APawn* Victim, bool bLowDetail );		//  Gameplay.Drowned.GetPawnDamageEffect
}; // Size: 0x0000

// Class Gameplay.Action_MOVETOPOINT
class DLL_IMPORT UAction_MOVETOPOINT : public ULatentScriptedAction
{
public:
	struct FName                                       DestinationTag;                                   		// 0x003C ( 0x0004 ) [ CPF_Edit ]
	class AActor*                                      MoveTarget;                                       		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 struct FString            GetActionString (  );                             		//  Gameplay.Action_MOVETOPOINT.GetActionString
	 class AActor*             GetMoveTargetFor ( class AScriptedController* C );		//  Gameplay.Action_MOVETOPOINT.GetMoveTargetFor
	 bool                      MoveToGoal (  );                                  		//  Gameplay.Action_MOVETOPOINT.MoveToGoal
}; // Size: 0x0008

// Class Gameplay.Action_WAITFORTIMER
class DLL_IMPORT UAction_WAITFORTIMER : public ULatentScriptedAction
{
public:
	float                                              PauseTime;                                        		// 0x003C ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 struct FString            GetActionString (  );                             		//  Gameplay.Action_WAITFORTIMER.GetActionString
	 bool                      CompleteWhenTimer (  );                           		//  Gameplay.Action_WAITFORTIMER.CompleteWhenTimer
	 bool                      CompleteWhenTriggered (  );                       		//  Gameplay.Action_WAITFORTIMER.CompleteWhenTriggered
	 bool                      InitActionFor ( class AScriptedController* C );   		//  Gameplay.Action_WAITFORTIMER.InitActionFor
}; // Size: 0x0004

// Class Gameplay.ActionMessage
class DLL_IMPORT AActionMessage : public ACriticalEventPlus
{
public:
	struct FString                                     Messages[ 0x20 ];                                 		// 0x0440 ( 0x0180 ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Gameplay.ActionMessage.GetString
}; // Size: 0x0180

// Class Gameplay.Sunlight
class DLL_IMPORT ASunlight : public ALight
{
public:
}; // Size: 0x0000

// Class Gameplay.EFFECT_ICEPALACE_CUPBOARD
class DLL_IMPORT UEFFECT_ICEPALACE_CUPBOARD : public UI3DL2Listener
{
public:
}; // Size: 0x0000

// Class Gameplay.EFFECT_CASTLE_MEDIUMROOM
class DLL_IMPORT UEFFECT_CASTLE_MEDIUMROOM : public UI3DL2Listener
{
public:
}; // Size: 0x0000

#ifdef _MSC_VER
#pragma pack ( pop )
#endif

