#include "stdafx.h"
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : Gameplay
# >    File : Code.cpp
# ======================================================================================== #
*/

/*void UAnimNotify_EjectShell::eventNotify ( class AActor* Owner )
{
	static UFunction* pNotify = 0;
	UAnimNotify_EjectShell_eventNotify_Parms parms;

	if ( !pNotify )
		pNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.AnimNotify_EjectShell.Notify" );

	parms.Owner = Owner;
	this->ProcessEvent ( pNotify, &parms, NULL );

}*/

/*void UAnimNotify_ReloadWeapon::eventNotify ( class AActor* Owner )
{
	static UFunction* pNotify = 0;
	UAnimNotify_ReloadWeapon_eventNotify_Parms parms;

	if ( !pNotify )
		pNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.AnimNotify_ReloadWeapon.Notify" );

	parms.Owner = Owner;
	this->ProcessEvent ( pNotify, &parms, NULL );

}*/

/*void UAnimNotify_EjectShell_3rd::eventNotify ( class AActor* Owner )
{
	static UFunction* pNotify = 0;
	UAnimNotify_EjectShell_3rd_eventNotify_Parms parms;

	if ( !pNotify )
		pNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.AnimNotify_EjectShell_3rd.Notify" );

	parms.Owner = Owner;
	this->ProcessEvent ( pNotify, &parms, NULL );

}*/

/*void UAnimNotify_EjectShell_Recham::eventNotify ( class AActor* Owner )
{
	static UFunction* pNotify = 0;
	UAnimNotify_EjectShell_Recham_eventNotify_Parms parms;

	if ( !pNotify )
		pNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.AnimNotify_EjectShell_Recham.Notify" );

	parms.Owner = Owner;
	this->ProcessEvent ( pNotify, &parms, NULL );

}*/

/*void AScriptedController::LeaveScripting (  )
{
	static UFunction* pLeaveScripting = 0;
	AScriptedController_execLeaveScripting_Parms parms;

	if ( !pLeaveScripting )
		pLeaveScripting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.LeaveScripting" );

	this->ProcessEvent ( pLeaveScripting, &parms, NULL );

}*/

/*struct FRotator AScriptedController::AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError )
{
	static UFunction* pAdjustAim = 0;
	AScriptedController_execAdjustAim_Parms parms;

	if ( !pAdjustAim )
		pAdjustAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.AdjustAim" );

	parms.FiredAmmunition = FiredAmmunition;
	parms.projStart = projStart;
	parms.AimError = AimError;
	this->ProcessEvent ( pAdjustAim, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AScriptedController::SetFireYaw ( int FireYaw )
{
	static UFunction* pSetFireYaw = 0;
	AScriptedController_execSetFireYaw_Parms parms;

	if ( !pSetFireYaw )
		pSetFireYaw = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.SetFireYaw" );

	parms.FireYaw = FireYaw;
	this->ProcessEvent ( pSetFireYaw, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AScriptedController::ClearAnimation (  )
{
	static UFunction* pClearAnimation = 0;
	AScriptedController_execClearAnimation_Parms parms;

	if ( !pClearAnimation )
		pClearAnimation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.ClearAnimation" );

	this->ProcessEvent ( pClearAnimation, &parms, NULL );

}*/

/*void AScriptedController::SetNewScript ( class AScriptedSequence* NewScript )
{
	static UFunction* pSetNewScript = 0;
	AScriptedController_execSetNewScript_Parms parms;

	if ( !pSetNewScript )
		pSetNewScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.SetNewScript" );

	parms.NewScript = NewScript;
	this->ProcessEvent ( pSetNewScript, &parms, NULL );

}*/

/*void AScriptedController::ClearScript (  )
{
	static UFunction* pClearScript = 0;
	AScriptedController_execClearScript_Parms parms;

	if ( !pClearScript )
		pClearScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.ClearScript" );

	this->ProcessEvent ( pClearScript, &parms, NULL );

}*/

/*bool AScriptedController::CheckIfNearPlayer ( float Distance )
{
	static UFunction* pCheckIfNearPlayer = 0;
	AScriptedController_execCheckIfNearPlayer_Parms parms;

	if ( !pCheckIfNearPlayer )
		pCheckIfNearPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.CheckIfNearPlayer" );

	parms.Distance = Distance;
	this->ProcessEvent ( pCheckIfNearPlayer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AActor* AScriptedController::GetSoundSource (  )
{
	static UFunction* pGetSoundSource = 0;
	AScriptedController_execGetSoundSource_Parms parms;

	if ( !pGetSoundSource )
		pGetSoundSource = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.GetSoundSource" );

	this->ProcessEvent ( pGetSoundSource, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class APawn* AScriptedController::GetInstigator (  )
{
	static UFunction* pGetInstigator = 0;
	AScriptedController_execGetInstigator_Parms parms;

	if ( !pGetInstigator )
		pGetInstigator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.GetInstigator" );

	this->ProcessEvent ( pGetInstigator, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class APawn* AScriptedController::GetMyPlayer (  )
{
	static UFunction* pGetMyPlayer = 0;
	AScriptedController_execGetMyPlayer_Parms parms;

	if ( !pGetMyPlayer )
		pGetMyPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.GetMyPlayer" );

	this->ProcessEvent ( pGetMyPlayer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AScriptedController::DestroyPawn (  )
{
	static UFunction* pDestroyPawn = 0;
	AScriptedController_execDestroyPawn_Parms parms;

	if ( !pDestroyPawn )
		pDestroyPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.DestroyPawn" );

	this->ProcessEvent ( pDestroyPawn, &parms, NULL );

}*/

/*void AScriptedController::SetEnemyReaction ( int AlertnessLevel )
{
	static UFunction* pSetEnemyReaction = 0;
	AScriptedController_execSetEnemyReaction_Parms parms;

	if ( !pSetEnemyReaction )
		pSetEnemyReaction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.SetEnemyReaction" );

	parms.AlertnessLevel = AlertnessLevel;
	this->ProcessEvent ( pSetEnemyReaction, &parms, NULL );

}*/

/*void AScriptedController::TakeControlOf ( class APawn* aPawn )
{
	static UFunction* pTakeControlOf = 0;
	AScriptedController_execTakeControlOf_Parms parms;

	if ( !pTakeControlOf )
		pTakeControlOf = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.TakeControlOf" );

	parms.aPawn = aPawn;
	this->ProcessEvent ( pTakeControlOf, &parms, NULL );

}*/

/*void AScriptedController::eventNotifyJumpApex (  )
{
	static UFunction* pNotifyJumpApex = 0;
	AScriptedController_eventNotifyJumpApex_Parms parms;

	if ( !pNotifyJumpApex )
		pNotifyJumpApex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.NotifyJumpApex" );

	this->ProcessEvent ( pNotifyJumpApex, &parms, NULL );

}*/

/*void AScriptedController::SetDoubleJump (  )
{
	static UFunction* pSetDoubleJump = 0;
	AScriptedController_execSetDoubleJump_Parms parms;

	if ( !pSetDoubleJump )
		pSetDoubleJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.SetDoubleJump" );

	this->ProcessEvent ( pSetDoubleJump, &parms, NULL );

}*/

/*bool AScriptedController::WeaponFireAgain ( float RefireRate, bool bFinishedFire )
{
	static UFunction* pWeaponFireAgain = 0;
	AScriptedController_execWeaponFireAgain_Parms parms;

	if ( !pWeaponFireAgain )
		pWeaponFireAgain = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedController.WeaponFireAgain" );

	parms.RefireRate = RefireRate;
	parms.bFinishedFire = bFinishedFire;
	this->ProcessEvent ( pWeaponFireAgain, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AScriptedSequence::SetActions ( class AScriptedController* C )
{
	static UFunction* pSetActions = 0;
	AScriptedSequence_execSetActions_Parms parms;

	if ( !pSetActions )
		pSetActions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedSequence.SetActions" );

	parms.C = C;
	this->ProcessEvent ( pSetActions, &parms, NULL );

}*/

/*bool AScriptedSequence::ValidAction ( int N )
{
	static UFunction* pValidAction = 0;
	AScriptedSequence_execValidAction_Parms parms;

	if ( !pValidAction )
		pValidAction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedSequence.ValidAction" );

	parms.N = N;
	this->ProcessEvent ( pValidAction, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AScriptedSequence::TakeOver ( class APawn* P )
{
	static UFunction* pTakeOver = 0;
	AScriptedSequence_execTakeOver_Parms parms;

	if ( !pTakeOver )
		pTakeOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedSequence.TakeOver" );

	parms.P = P;
	this->ProcessEvent ( pTakeOver, &parms, NULL );

}*/

/*bool AScriptedSequence::CheckForErrors (  )
{
	static UFunction* pCheckForErrors = 0;
	AScriptedSequence_execCheckForErrors_Parms parms;

	if ( !pCheckForErrors )
		pCheckForErrors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedSequence.CheckForErrors" );

	this->ProcessEvent ( pCheckForErrors, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AScriptedSequence::SpawnControllerFor ( class APawn* P )
{
	static UFunction* pSpawnControllerFor = 0;
	AScriptedSequence_execSpawnControllerFor_Parms parms;

	if ( !pSpawnControllerFor )
		pSpawnControllerFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedSequence.SpawnControllerFor" );

	parms.P = P;
	this->ProcessEvent ( pSpawnControllerFor, &parms, NULL );

}*/

/*void AScriptedSequence::eventReset (  )
{
	static UFunction* pReset = 0;
	AScriptedSequence_eventReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedSequence.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AScriptedSequence::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AScriptedSequence_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedSequence.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*struct FString UScriptedAction::GetActionString (  )
{
	static UFunction* pGetActionString = 0;
	UScriptedAction_execGetActionString_Parms parms;

	if ( !pGetActionString )
		pGetActionString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedAction.GetActionString" );

	this->ProcessEvent ( pGetActionString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UScriptedAction::ProceedToSectionEnd ( class AScriptedController* C )
{
	static UFunction* pProceedToSectionEnd = 0;
	UScriptedAction_execProceedToSectionEnd_Parms parms;

	if ( !pProceedToSectionEnd )
		pProceedToSectionEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedAction.ProceedToSectionEnd" );

	parms.C = C;
	this->ProcessEvent ( pProceedToSectionEnd, &parms, NULL );

}*/

/*void UScriptedAction::ProceedToNextAction ( class AScriptedController* C )
{
	static UFunction* pProceedToNextAction = 0;
	UScriptedAction_execProceedToNextAction_Parms parms;

	if ( !pProceedToNextAction )
		pProceedToNextAction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedAction.ProceedToNextAction" );

	parms.C = C;
	this->ProcessEvent ( pProceedToNextAction, &parms, NULL );

}*/

/*class AScriptedSequence* UScriptedAction::GetScript ( class AScriptedSequence* S )
{
	static UFunction* pGetScript = 0;
	UScriptedAction_execGetScript_Parms parms;

	if ( !pGetScript )
		pGetScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedAction.GetScript" );

	parms.S = S;
	this->ProcessEvent ( pGetScript, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UScriptedAction::StartsSection (  )
{
	static UFunction* pStartsSection = 0;
	UScriptedAction_execStartsSection_Parms parms;

	if ( !pStartsSection )
		pStartsSection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedAction.StartsSection" );

	this->ProcessEvent ( pStartsSection, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UScriptedAction::EndsSection (  )
{
	static UFunction* pEndsSection = 0;
	UScriptedAction_execEndsSection_Parms parms;

	if ( !pEndsSection )
		pEndsSection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedAction.EndsSection" );

	this->ProcessEvent ( pEndsSection, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UScriptedAction::InitActionFor ( class AScriptedController* C )
{
	static UFunction* pInitActionFor = 0;
	UScriptedAction_execInitActionFor_Parms parms;

	if ( !pInitActionFor )
		pInitActionFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedAction.InitActionFor" );

	parms.C = C;
	this->ProcessEvent ( pInitActionFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UScriptedAction::eventReset (  )
{
	static UFunction* pReset = 0;
	UScriptedAction_eventReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedAction.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void UScriptedAction::eventPostBeginPlay ( class AScriptedSequence* ss )
{
	static UFunction* pPostBeginPlay = 0;
	UScriptedAction_eventPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedAction.PostBeginPlay" );

	parms.ss = ss;
	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void UScriptedAction::eventActionCompleted (  )
{
	static UFunction* pActionCompleted = 0;
	UScriptedAction_eventActionCompleted_Parms parms;

	if ( !pActionCompleted )
		pActionCompleted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ScriptedAction.ActionCompleted" );

	this->ProcessEvent ( pActionCompleted, &parms, NULL );

}*/

/*float ULatentScriptedAction::GetDistance (  )
{
	static UFunction* pGetDistance = 0;
	ULatentScriptedAction_execGetDistance_Parms parms;

	if ( !pGetDistance )
		pGetDistance = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.LatentScriptedAction.GetDistance" );

	this->ProcessEvent ( pGetDistance, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AActor* ULatentScriptedAction::GetMoveTargetFor ( class AScriptedController* C )
{
	static UFunction* pGetMoveTargetFor = 0;
	ULatentScriptedAction_execGetMoveTargetFor_Parms parms;

	if ( !pGetMoveTargetFor )
		pGetMoveTargetFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.LatentScriptedAction.GetMoveTargetFor" );

	parms.C = C;
	this->ProcessEvent ( pGetMoveTargetFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ULatentScriptedAction::TurnToGoal (  )
{
	static UFunction* pTurnToGoal = 0;
	ULatentScriptedAction_execTurnToGoal_Parms parms;

	if ( !pTurnToGoal )
		pTurnToGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.LatentScriptedAction.TurnToGoal" );

	this->ProcessEvent ( pTurnToGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ULatentScriptedAction::MoveToGoal (  )
{
	static UFunction* pMoveToGoal = 0;
	ULatentScriptedAction_execMoveToGoal_Parms parms;

	if ( !pMoveToGoal )
		pMoveToGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.LatentScriptedAction.MoveToGoal" );

	this->ProcessEvent ( pMoveToGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ULatentScriptedAction::StillTicking ( class AScriptedController* C, float DeltaTime )
{
	static UFunction* pStillTicking = 0;
	ULatentScriptedAction_execStillTicking_Parms parms;

	if ( !pStillTicking )
		pStillTicking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.LatentScriptedAction.StillTicking" );

	parms.C = C;
	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pStillTicking, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ULatentScriptedAction::TickedAction (  )
{
	static UFunction* pTickedAction = 0;
	ULatentScriptedAction_execTickedAction_Parms parms;

	if ( !pTickedAction )
		pTickedAction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.LatentScriptedAction.TickedAction" );

	this->ProcessEvent ( pTickedAction, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ULatentScriptedAction::WaitForPlayer (  )
{
	static UFunction* pWaitForPlayer = 0;
	ULatentScriptedAction_execWaitForPlayer_Parms parms;

	if ( !pWaitForPlayer )
		pWaitForPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.LatentScriptedAction.WaitForPlayer" );

	this->ProcessEvent ( pWaitForPlayer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ULatentScriptedAction::CompleteWhenTimer (  )
{
	static UFunction* pCompleteWhenTimer = 0;
	ULatentScriptedAction_execCompleteWhenTimer_Parms parms;

	if ( !pCompleteWhenTimer )
		pCompleteWhenTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.LatentScriptedAction.CompleteWhenTimer" );

	this->ProcessEvent ( pCompleteWhenTimer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ULatentScriptedAction::CompleteOnLIPSincAnim (  )
{
	static UFunction* pCompleteOnLIPSincAnim = 0;
	ULatentScriptedAction_execCompleteOnLIPSincAnim_Parms parms;

	if ( !pCompleteOnLIPSincAnim )
		pCompleteOnLIPSincAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.LatentScriptedAction.CompleteOnLIPSincAnim" );

	this->ProcessEvent ( pCompleteOnLIPSincAnim, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ULatentScriptedAction::CompleteOnAnim ( int Channel )
{
	static UFunction* pCompleteOnAnim = 0;
	ULatentScriptedAction_execCompleteOnAnim_Parms parms;

	if ( !pCompleteOnAnim )
		pCompleteOnAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.LatentScriptedAction.CompleteOnAnim" );

	parms.Channel = Channel;
	this->ProcessEvent ( pCompleteOnAnim, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ULatentScriptedAction::CompleteWhenTriggered (  )
{
	static UFunction* pCompleteWhenTriggered = 0;
	ULatentScriptedAction_execCompleteWhenTriggered_Parms parms;

	if ( !pCompleteWhenTriggered )
		pCompleteWhenTriggered = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.LatentScriptedAction.CompleteWhenTriggered" );

	this->ProcessEvent ( pCompleteWhenTriggered, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool ULatentScriptedAction::InitActionFor ( class AScriptedController* C )
{
	static UFunction* pInitActionFor = 0;
	ULatentScriptedAction_execInitActionFor_Parms parms;

	if ( !pInitActionFor )
		pInitActionFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.LatentScriptedAction.InitActionFor" );

	parms.C = C;
	this->ProcessEvent ( pInitActionFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void ULatentScriptedAction::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	ULatentScriptedAction_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.LatentScriptedAction.DisplayDebug" );

	parms.Canvas = Canvas;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*struct FString UAction_PLAYANIM::GetActionString (  )
{
	static UFunction* pGetActionString = 0;
	UAction_PLAYANIM_execGetActionString_Parms parms;

	if ( !pGetActionString )
		pGetActionString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.Action_PLAYANIM.GetActionString" );

	this->ProcessEvent ( pGetActionString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UAction_PLAYANIM::PawnPlayBaseAnim ( class AScriptedController* C, bool bFirstPlay )
{
	static UFunction* pPawnPlayBaseAnim = 0;
	UAction_PLAYANIM_execPawnPlayBaseAnim_Parms parms;

	if ( !pPawnPlayBaseAnim )
		pPawnPlayBaseAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.Action_PLAYANIM.PawnPlayBaseAnim" );

	parms.C = C;
	parms.bFirstPlay = bFirstPlay;
	this->ProcessEvent ( pPawnPlayBaseAnim, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UAction_PLAYANIM::SetCurrentAnimationFor ( class AScriptedController* C )
{
	static UFunction* pSetCurrentAnimationFor = 0;
	UAction_PLAYANIM_execSetCurrentAnimationFor_Parms parms;

	if ( !pSetCurrentAnimationFor )
		pSetCurrentAnimationFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.Action_PLAYANIM.SetCurrentAnimationFor" );

	parms.C = C;
	this->ProcessEvent ( pSetCurrentAnimationFor, &parms, NULL );

}*/

/*bool UAction_PLAYANIM::InitActionFor ( class AScriptedController* C )
{
	static UFunction* pInitActionFor = 0;
	UAction_PLAYANIM_execInitActionFor_Parms parms;

	if ( !pInitActionFor )
		pInitActionFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.Action_PLAYANIM.InitActionFor" );

	parms.C = C;
	this->ProcessEvent ( pInitActionFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UClass* ADrowned::GetPawnDamageEffect ( struct FVector HitLocation, float Damage, struct FVector Momentum, class APawn* Victim, bool bLowDetail )
{
	static UFunction* pGetPawnDamageEffect = 0;
	ADrowned_execGetPawnDamageEffect_Parms parms;

	if ( !pGetPawnDamageEffect )
		pGetPawnDamageEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.Drowned.GetPawnDamageEffect" );

	parms.HitLocation = HitLocation;
	parms.Damage = Damage;
	parms.Momentum = Momentum;
	parms.Victim = Victim;
	parms.bLowDetail = bLowDetail;
	this->ProcessEvent ( pGetPawnDamageEffect, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UAction_MOVETOPOINT::GetActionString (  )
{
	static UFunction* pGetActionString = 0;
	UAction_MOVETOPOINT_execGetActionString_Parms parms;

	if ( !pGetActionString )
		pGetActionString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.Action_MOVETOPOINT.GetActionString" );

	this->ProcessEvent ( pGetActionString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AActor* UAction_MOVETOPOINT::GetMoveTargetFor ( class AScriptedController* C )
{
	static UFunction* pGetMoveTargetFor = 0;
	UAction_MOVETOPOINT_execGetMoveTargetFor_Parms parms;

	if ( !pGetMoveTargetFor )
		pGetMoveTargetFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.Action_MOVETOPOINT.GetMoveTargetFor" );

	parms.C = C;
	this->ProcessEvent ( pGetMoveTargetFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UAction_MOVETOPOINT::MoveToGoal (  )
{
	static UFunction* pMoveToGoal = 0;
	UAction_MOVETOPOINT_execMoveToGoal_Parms parms;

	if ( !pMoveToGoal )
		pMoveToGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.Action_MOVETOPOINT.MoveToGoal" );

	this->ProcessEvent ( pMoveToGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UAction_WAITFORTIMER::GetActionString (  )
{
	static UFunction* pGetActionString = 0;
	UAction_WAITFORTIMER_execGetActionString_Parms parms;

	if ( !pGetActionString )
		pGetActionString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.Action_WAITFORTIMER.GetActionString" );

	this->ProcessEvent ( pGetActionString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UAction_WAITFORTIMER::CompleteWhenTimer (  )
{
	static UFunction* pCompleteWhenTimer = 0;
	UAction_WAITFORTIMER_execCompleteWhenTimer_Parms parms;

	if ( !pCompleteWhenTimer )
		pCompleteWhenTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.Action_WAITFORTIMER.CompleteWhenTimer" );

	this->ProcessEvent ( pCompleteWhenTimer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UAction_WAITFORTIMER::CompleteWhenTriggered (  )
{
	static UFunction* pCompleteWhenTriggered = 0;
	UAction_WAITFORTIMER_execCompleteWhenTriggered_Parms parms;

	if ( !pCompleteWhenTriggered )
		pCompleteWhenTriggered = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.Action_WAITFORTIMER.CompleteWhenTriggered" );

	this->ProcessEvent ( pCompleteWhenTriggered, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UAction_WAITFORTIMER::InitActionFor ( class AScriptedController* C )
{
	static UFunction* pInitActionFor = 0;
	UAction_WAITFORTIMER_execInitActionFor_Parms parms;

	if ( !pInitActionFor )
		pInitActionFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.Action_WAITFORTIMER.InitActionFor" );

	parms.C = C;
	this->ProcessEvent ( pInitActionFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AActionMessage::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pGetString = 0;
	AActionMessage_execGetString_Parms parms;

	if ( !pGetString )
		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"Gameplay.ActionMessage.GetString" );

	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pGetString, &parms, NULL );

	return parms.ReturnValue;
}*/

