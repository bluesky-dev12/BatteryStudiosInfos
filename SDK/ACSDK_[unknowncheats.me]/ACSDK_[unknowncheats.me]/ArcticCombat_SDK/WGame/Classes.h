#pragma once
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : WGame
# >    File : Classes.h
# ======================================================================================== #
*/

#ifdef _MSC_VER
#pragma pack ( push, 4 )
#endif


/*
# ======================================================================================== #
# > Constants
# ======================================================================================== #
*/

#define CONST_InvenSkillStartIndex                               12
#define CONST_MaxComboKeyTime                                    0.35
#define CONST_MinComboKeyTime                                    0.05
#define CONST_MINVIEWDIST                                        200
#define CONST_MINSTRAFEDIST                                      200
#define CONST_TACTICALHEIGHTADVANTAGE                            320
#define CONST_ENEMYLOCATIONFUZZ                                  1200
#define CONST_MAXSTAKEOUTDIST                                    2000

/*
# ======================================================================================== #
# > Enums
# ======================================================================================== #
*/

// Enum WGame.wPawnSoundGroup.ESoundType
enum ESoundType
{
	EST_Land                                           = 0,
	EST_CorpseLanded                                   = 1,
	EST_HitUnderWater                                  = 2,
	EST_Jump                                           = 3,
	EST_LandGrunt                                      = 4,
	EST_Gasp                                           = 5,
	EST_Drown                                          = 6,
	EST_BreatheAgain                                   = 7,
	EST_Dodge                                          = 8,
	EST_DoubleJump                                     = 9
};

// Enum WGame.wPawn.eSpecialState
enum eSpecialState
{
	SState_Planting                                    = 0,
	SState_Diffusing                                   = 1
};

// Enum WGame.wPawn.EFireAnimState
enum EFireAnimState
{
	FS_None                                            = 0,
	FS_PlayOnce                                        = 1,
	FS_Looping                                         = 2,
	FS_Ready                                           = 3
};

// Enum WGame.Goal.EGoalStatus
enum EGoalStatus
{
	GS_NONE                                            = 0,
	GS_WORKING                                         = 1,
	GS_FAILED                                          = 2,
	GS_COMPLETED                                       = 3
};

// Enum WGame.wBTR_ArrangeTurret.EASVF_TriggeredFunction
enum EASVF_TriggeredFunction
{
	EAVSF_ToggleEnabled                                = 0,
	EAVSF_TriggeredSpawn                               = 1,
	EAVSF_SpawnProgress                                = 2
};


/*
# ======================================================================================== #
# > Classes
# ======================================================================================== #
*/

// Class WGame.wAILevel
class DLL_IMPORT AwAILevel : public AwAILevelBase
{
public:
	class UwMatchMaker*                                MM;                                               		// 0x03C8 ( 0x0004 ) 
	class TArray< class ANavigationPoint* >            FrontLineTeam0;                                   		// 0x03CC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class ANavigationPoint* >            FrontLineTeam1;                                   		// 0x03D8 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Influence0Length;                                 		// 0x03E4 ( 0x0004 ) 
	int                                                Influence1Length;                                 		// 0x03E8 ( 0x0004 ) 
	int                                                InfluenceNLength;                                 		// 0x03EC ( 0x0004 ) 
	int                                                AllNavsLength;                                    		// 0x03F0 ( 0x0004 ) 
	class TArray< class ANavigationPoint* >            Influence0;                                       		// 0x03F4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class ANavigationPoint* >            Influence1;                                       		// 0x0400 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class ANavigationPoint* >            InfluenceN;                                       		// 0x040C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class ANavigationPoint* >            AllNavs;                                          		// 0x0418 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                NumTypeAR;                                        		// 0x0424 ( 0x0004 ) 
	int                                                NumTypeSMG;                                       		// 0x0428 ( 0x0004 ) 
	class TArray< class AwAIBotBase* >                 Bots;                                             		// 0x042C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UObjectPool*                                 PoolAction;                                       		// 0x0438 ( 0x0004 ) 
	class UObjectPool*                                 PoolActionContainer;                              		// 0x043C ( 0x0004 ) 
	class UObjectPool*                                 PoolActionLayer;                                  		// 0x0440 ( 0x0004 ) 
	class UObjectPool*                                 PoolGoal;                                         		// 0x0444 ( 0x0004 ) 
	class UwPlanMaster*                                PlanMaster;                                       		// 0x0448 ( 0x0004 ) 
	unsigned long                                      bInitialized:1;                                   		// 0x044C ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      ClearReferences (  );                             		//  WGame.wAILevel.ClearReferences
	 void                      BotsLovePeace (  );                               		//  WGame.wAILevel.BotsLovePeace
	 void                      execResetNames (  );                              		// [ FUNC_Exec ] WGame.wAILevel.ResetNames
	 class UwNPCItemGroupParam* GetItemParamByGroupID ( int GroupID );            		//  WGame.wAILevel.GetItemParamByGroupID
	 struct FString            GetName ( int NameGroupID );                      		//  WGame.wAILevel.GetName
	 void                      KillBot ( class AAIController* Bot );             		//  WGame.wAILevel.KillBot
	 void                      KillBots ( int Num );                             		//  WGame.wAILevel.KillBots
	 void                      KillBotsTeam ( int Num, int inTeam );             		//  WGame.wAILevel.KillBotsTeam
	 void                      RegisterBot ( class AwAIBotBase* Bot );           		//  WGame.wAILevel.RegisterBot
	 class UwNPCActions*       GetNPCAction ( int ActionGroupID );               		//  WGame.wAILevel.GetNPCAction
	 bool                      ActionExists ( int ActionGroupID, struct FString Action );		//  WGame.wAILevel.ActionExists
	 class UwNPCParam*         GetNPCParam ( int Grade );                        		//  WGame.wAILevel.GetNPCParam
	 class UwNPCParam*         GetNPCParamByNPCID ( int NPCID );                 		//  WGame.wAILevel.GetNPCParamByNPCID
	 void                      UpdateInfluenceListScript (  );                   		//  WGame.wAILevel.UpdateInfluenceListScript
	 void                      UpdateInfluenceList (  );                         		//  WGame.wAILevel.UpdateInfluenceList
	 void                      UpdateInfluenceListNative (  );                   		// [ FUNC_Native ] WGame.wAILevel.UpdateInfluenceListNative
	 void                      UpdateAllNavs (  );                               		//  WGame.wAILevel.UpdateAllNavs
	 class ANavigationPoint*   GetRandomDestFromInfluence ( unsigned char inTeam );		//  WGame.wAILevel.GetRandomDestFromInfluence
	 class ANavigationPoint*   GetRandomDestFromFrontLine ( unsigned char inTeam );		//  WGame.wAILevel.GetRandomDestFromFrontLine
	 void                      InitFrontLine (  );                               		//  WGame.wAILevel.InitFrontLine
	 void                      eventTick ( float dt );                           		// [ FUNC_Event ] WGame.wAILevel.Tick
	 void                      InitInfluenceList (  );                           		//  WGame.wAILevel.InitInfluenceList
	 void                      Initialize (  );                                  		//  WGame.wAILevel.Initialize
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Event ] WGame.wAILevel.PreBeginPlay

	// Public Imports
	AwAILevel(class AwAILevel const &);
	class AwAILevel &  operator=(class AwAILevel const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0088

// Class WGame.wState
class DLL_IMPORT UwState : public UObject
{
public:
	class AwAIBotBase*                                 Owner;                                            		// 0x002C ( 0x0004 ) 
	int                                                Ammo;                                             		// 0x0030 ( 0x0004 ) 
	int                                                MaxAmmo;                                          		// 0x0034 ( 0x0004 ) 
	int                                                Magazine;                                         		// 0x0038 ( 0x0004 ) 
	int                                                NumFragGrenade;                                   		// 0x003C ( 0x0004 ) 
	int                                                NumStunGrenade;                                   		// 0x0040 ( 0x0004 ) 
	int                                                NumSmokeGrenade;                                  		// 0x0044 ( 0x0004 ) 
	class UwWeaponBaseParams*                          CurrentWeapon;                                    		// 0x0048 ( 0x0004 ) 
	class TArray< class UwWeaponBaseParams* >          Weapons;                                          		// 0x004C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                SwitchWeaponCount;                                		// 0x0058 ( 0x0004 ) 
	unsigned long                                      IsFlashed:1;                                      		// 0x005C ( 0x0004 )  [0x00000001]
	unsigned long                                      IsCrouch:1;                                       		// 0x005C ( 0x0004 )  [0x00000002]
	unsigned long                                      IsStand:1;                                        		// 0x005C ( 0x0004 )  [0x00000004]
	unsigned long                                      IsProne:1;                                        		// 0x005C ( 0x0004 )  [0x00000008]
	unsigned long                                      FreeHead:1;                                       		// 0x005C ( 0x0004 )  [0x00000010]
	unsigned long                                      FreeHands:1;                                      		// 0x005C ( 0x0004 )  [0x00000020]
	unsigned long                                      FreeLegs:1;                                       		// 0x005C ( 0x0004 )  [0x00000040]
	unsigned long                                      CannotFindPath:1;                                 		// 0x005C ( 0x0004 )  [0x00000080]
	int                                                Health;                                           		// 0x0060 ( 0x0004 ) 
	int                                                PropsectDealtDamage;                              		// 0x0064 ( 0x0004 ) 
	int                                                ProspectTakenDamage;                              		// 0x0068 ( 0x0004 ) 
	unsigned long                                      HasSupplyHelicopter:1;                            		// 0x006C ( 0x0004 )  [0x00000001]
	unsigned long                                      HasSupplyUAV:1;                                   		// 0x006C ( 0x0004 )  [0x00000002]
	unsigned long                                      HasSupplyAirstrike:1;                             		// 0x006C ( 0x0004 )  [0x00000004]
	struct FVector                                     Location;                                         		// 0x0070 ( 0x000C ) 
	class UMemoryItem*                                 Target;                                           		// 0x007C ( 0x0004 ) 
	unsigned long                                      TargetVisible:1;                                  		// 0x0080 ( 0x0004 )  [0x00000001]
	unsigned long                                      TargetReachable:1;                                		// 0x0080 ( 0x0004 )  [0x00000002]
	int                                                TargetChangeCount;                                		// 0x0084 ( 0x0004 ) 
	unsigned long                                      CanMeleeTarget:1;                                 		// 0x0088 ( 0x0004 )  [0x00000001]
	float                                              MeetNewEnemyProbabilty;                           		// 0x008C ( 0x0004 ) 
	float                                              Time;                                             		// 0x0090 ( 0x0004 ) 
	int                                                NumCapturedFlags;                                 		// 0x0094 ( 0x0004 ) 
	class AwFlagObjectiveBase*                         FlagIamOn;                                        		// 0x0098 ( 0x0004 ) 
	int                                                World_NumAllies;                                  		// 0x009C ( 0x0004 ) 
	int                                                World_NumEnemies;                                 		// 0x00A0 ( 0x0004 ) 
	unsigned long                                      World_IsSDRespawnTime:1;                          		// 0x00A4 ( 0x0004 )  [0x00000001]
	unsigned long                                      World_TeamGame:1;                                 		// 0x00A4 ( 0x0004 )  [0x00000002]
	unsigned long                                      World_Helicopter:1;                               		// 0x00A4 ( 0x0004 )  [0x00000004]
	unsigned long                                      World_Airstrike:1;                                		// 0x00A4 ( 0x0004 )  [0x00000008]

	// UScript Functions
	 class UwState*            Create (  );                                      		//  WGame.wState.Create

	// Public Imports
	UwState(class UwState const &);
	class UwState &  operator=(class UwState const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x007C

// Class WGame.ShortMemory
class DLL_IMPORT UShortMemory : public UObject
{
public:
	class AwAIBotBase*                                 Owner;                                            		// 0x002C ( 0x0004 ) 
	class ALevelInfo*                                  Level;                                            		// 0x0030 ( 0x0004 ) 
	class TArray< class UMemoryItem* >                 Memories;                                         		// 0x0034 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                NumVisibleMemories;                               		// 0x0040 ( 0x0004 ) 
	float                                              RetentionTIme;                                    		// 0x0044 ( 0x0004 ) 
	float                                              ResponseTime;                                     		// 0x0048 ( 0x0004 ) 
	float                                              MemoryItemUpdateInterval;                         		// 0x004C ( 0x0004 ) 
	int                                                ResponseQueueHead;                                		// 0x0050 ( 0x0004 ) 
	class TArray< float >                              ResponseQueueTime;                                		// 0x0054 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class APawn* >                       ResponseQueuePawn;                                		// 0x0060 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      DisplayDebug ( class UCanvas* C, float* YL, float* YPos );		//  WGame.ShortMemory.DisplayDebug
	 class UMemoryItem*        eventGetByPawn ( class APawn* P, bool createIfNotFound );		// [ FUNC_Event ] WGame.ShortMemory.GetByPawn
	 class UMemoryItem*        eventGetByPawn2 ( class APawn* P );               		// [ FUNC_Event ] WGame.ShortMemory.GetByPawn2
	 void                      RemoveByPawn ( class APawn* P );                  		//  WGame.ShortMemory.RemoveByPawn
	 void                      RemoveAll (  );                                   		//  WGame.ShortMemory.RemoveAll
	 void                      ClearReferences (  );                             		//  WGame.ShortMemory.ClearReferences
	 void                      RemoveMemoriesOverRetentionTime (  );             		//  WGame.ShortMemory.RemoveMemoriesOverRetentionTime
	 bool                      ByVision2 ( class APawn* P, class AController* C );		//  WGame.ShortMemory.ByVision2
	 bool                      ByVision ( class APawn* P );                      		//  WGame.ShortMemory.ByVision
	 bool                      BySound ( class APawn* P, float Loudness );       		//  WGame.ShortMemory.BySound
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.ShortMemory.NotifyDestroyed
	 void                      Update ( float dt );                              		//  WGame.ShortMemory.Update
	 class UShortMemory*       Create ( class AwAIBotBase* inOwner, float inResponseTime );		//  WGame.ShortMemory.Create

	// Public Imports
	UShortMemory(class UShortMemory const &);
	class UShortMemory &  operator=(class UShortMemory const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0040

// Class WGame.MemoryItem
class DLL_IMPORT UMemoryItem : public UObject
{
public:
	class AwAIBotBase*                                 Owner;                                            		// 0x002C ( 0x0004 ) 
	float                                              LastTime;                                         		// 0x0030 ( 0x0004 ) 
	struct FVector                                     LastPosition;                                     		// 0x0034 ( 0x000C ) 
	float                                              LastTargetedTime;                                 		// 0x0040 ( 0x0004 ) 
	class APawn*                                       Pawn;                                             		// 0x0044 ( 0x0004 ) 
	class APlayerReplicationInfo*                      PRI;                                              		// 0x0048 ( 0x0004 ) 
	int                                                MaxPositions;                                     		// 0x004C ( 0x0004 ) 
	unsigned long                                      IsVisible:1;                                      		// 0x0050 ( 0x0004 )  [0x00000001]
	unsigned long                                      IsVisibleOld:1;                                   		// 0x0050 ( 0x0004 )  [0x00000002]
	unsigned long                                      InSight:1;                                        		// 0x0050 ( 0x0004 )  [0x00000004]
	unsigned long                                      InSightOld:1;                                     		// 0x0050 ( 0x0004 )  [0x00000008]
	struct FVector                                     OffsetStandHeight;                                		// 0x0054 ( 0x000C ) 
	struct FVector                                     OffsetCrouchHeight;                               		// 0x0060 ( 0x000C ) 

	// UScript Functions
	 void                      ClearReferences (  );                             		//  WGame.MemoryItem.ClearReferences
	 void                      Update (  );                                      		//  WGame.MemoryItem.Update
	 void                      AddKnownPosition ( struct FVector V, float t );   		//  WGame.MemoryItem.AddKnownPosition
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.MemoryItem.NotifyDestroyed
	 class UMemoryItem*        Create ( class AwAIBotBase* inOwner, class APawn* P );		//  WGame.MemoryItem.Create

	// Public Imports
	UMemoryItem(class UMemoryItem const &);
	class UMemoryItem &  operator=(class UMemoryItem const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0040

// Class WGame.wAIBotBase
class DLL_IMPORT AwAIBotBase : public AAIController
{
public:
	class UGoal*                                       Goal;                                             		// 0x0608 ( 0x0004 ) 
	class UwFutureState*                               FutureState;                                      		// 0x060C ( 0x0004 ) 
	class UShortMemory*                                Memory;                                           		// 0x0610 ( 0x0004 ) 
	class UTargetingSystem*                            TargetSystem;                                     		// 0x0614 ( 0x0004 ) 
	class UwActionPlanner*                             Planner;                                          		// 0x0618 ( 0x0004 ) 
	class UwPlanMaster*                                PlanMaster;                                       		// 0x061C ( 0x0004 ) 
	class AwAILevel*                                   AILevel;                                          		// 0x0620 ( 0x0004 ) 
	class UwNPCParam*                                  NPCParam;                                         		// 0x0624 ( 0x0004 ) 
	class UwNPCActions*                                npcActions;                                       		// 0x0628 ( 0x0004 ) 
	float                                              UpdateElapsed;                                    		// 0x062C ( 0x0004 ) 
	float                                              UpdateInterval;                                   		// 0x0630 ( 0x0004 ) 
	unsigned long                                      TrySprint:1;                                      		// 0x0634 ( 0x0004 )  [0x00000001]
	float                                              DeadTime;                                         		// 0x0638 ( 0x0004 ) 
	float                                              LastRestartRequestTime;                           		// 0x063C ( 0x0004 ) 
	unsigned long                                      bDrawPath:1;                                      		// 0x0640 ( 0x0004 )  [0x00000001]
	class TArray< float >                              NavExtraCosts;                                    		// 0x0644 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              NavDetourExtraCosts;                              		// 0x0650 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              NavExtraCostFactor_VisCount;                      		// 0x065C ( 0x0004 ) 
	float                                              NavExtraCostFactor_DetourScore;                   		// 0x0660 ( 0x0004 ) 
	float                                              NavExtraCostFactor_DetourMaxDistFactor;           		// 0x0664 ( 0x0004 ) 
	class AwFlagObjectiveBase*                         LastTargetFlag;                                   		// 0x0668 ( 0x0004 ) 
	struct FName                                       StateOnPossess;                                   		// 0x066C ( 0x0004 ) 
	struct FVector                                     UpVector;                                         		// 0x0670 ( 0x000C ) 

	// UScript Functions
	 void                      DisplayDebug_Path ( class UCanvas* C, float* YL, float* YPos );		//  WGame.wAIBotBase.DisplayDebug_Path
	 void                      DisplayDebug ( class UCanvas* C, float* YL, float* YPos );		//  WGame.wAIBotBase.DisplayDebug
	 int                       SetFireYaw ( int FireYaw );                       		//  WGame.wAIBotBase.SetFireYaw
	 struct FRotator           AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError );		//  WGame.wAIBotBase.AdjustAim
	 bool                      CallHelicopter ( bool ignoreSupply );             		//  WGame.wAIBotBase.CallHelicopter
	 void                      NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );		//  WGame.wAIBotBase.NotifyKilled
	 void                      HearNoise ( float Loudness, class AActor* NoiseMaker );		//  WGame.wAIBotBase.HearNoise
	 void                      eventSeePlayer ( class APawn* SeenPlayer );       		// [ FUNC_Event ] WGame.wAIBotBase.SeePlayer
	 void                      NotifyVehicle ( class AVehicle* V );              		//  WGame.wAIBotBase.NotifyVehicle
	 void                      OnMemoryVisibleChanged (  );                      		//  WGame.wAIBotBase.OnMemoryVisibleChanged
	 void                      HandleMessage ( struct FString Msg );             		//  WGame.wAIBotBase.HandleMessage
	 void                      wClientFlash ( float fTime );                     		//  WGame.wAIBotBase.wClientFlash
	 bool                      IsProning (  );                                   		//  WGame.wAIBotBase.IsProning
	 void                      TryProne (  );                                    		//  WGame.wAIBotBase.TryProne
	 bool                      IsCrouching (  );                                 		//  WGame.wAIBotBase.IsCrouching
	 void                      TryCrouch (  );                                   		//  WGame.wAIBotBase.TryCrouch
	 bool                      IsStandingUp (  );                                		//  WGame.wAIBotBase.IsStandingUp
	 void                      TryStandUp (  );                                  		//  WGame.wAIBotBase.TryStandUp
	 bool                      IsSprinting (  );                                 		//  WGame.wAIBotBase.IsSprinting
	 void                      SetSprint ( bool Value );                         		//  WGame.wAIBotBase.SetSprint
	 void                      PawnDied ( class APawn* P );                      		//  WGame.wAIBotBase.PawnDied
	 void                      ClientOnEndWaitingForStart (  );                  		//  WGame.wAIBotBase.ClientOnEndWaitingForStart
	 void                      ZeroExtraCost (  );                               		//  WGame.wAIBotBase.ZeroExtraCost
	 void                      CopyNavExtraCost (  );                            		//  WGame.wAIBotBase.CopyNavExtraCost
	 void                      UpdateNavDetourExtraCostScript ( struct FVector S, struct FVector E );		//  WGame.wAIBotBase.UpdateNavDetourExtraCostScript
	 void                      UpdateNavDetourExtraCost ( struct FVector S, struct FVector E );		//  WGame.wAIBotBase.UpdateNavDetourExtraCost
	 void                      UpdateNavDetourExtraCostNative ( struct FVector S, struct FVector E );		// [ FUNC_Native ] WGame.wAIBotBase.UpdateNavDetourExtraCostNative
	 void                      InitNavExtraCost (  );                            		//  WGame.wAIBotBase.InitNavExtraCost
	 void                      execCmd ( struct FString P1, struct FString P2, struct FString p3, struct FString p4, struct FString p5 );		// [ FUNC_Exec ] WGame.wAIBotBase.Cmd
	 float                     EvaluateState ( class UwState* S );               		//  WGame.wAIBotBase.EvaluateState
	 void                      SetupWStateScript ( class UwState** S );          		//  WGame.wAIBotBase.SetupWStateScript
	 void                      SetupWState ( class UwState** S );                		//  WGame.wAIBotBase.SetupWState
	 void                      SetupWStateNative ( class UwState** S );          		// [ FUNC_Native ] WGame.wAIBotBase.SetupWStateNative
	 void                      NotifyAddDefaultInventory (  );                   		//  WGame.wAIBotBase.NotifyAddDefaultInventory
	 void                      NotifyAddInventory ( class AInventory* NewItem ); 		//  WGame.wAIBotBase.NotifyAddInventory
	 void                      SetupWeapons ( class APawn* aPawn );              		//  WGame.wAIBotBase.SetupWeapons
	 void                      SetPawnClass ( struct FString inClass, struct FString InCharacter );		//  WGame.wAIBotBase.SetPawnClass
	 void                      SetName ( class UwNPCParam* Param );              		//  WGame.wAIBotBase.SetName
	 void                      InitBot ( int Grade );                            		//  WGame.wAIBotBase.InitBot
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] WGame.wAIBotBase.PostBeginPlay
	 void                      ClearReferences (  );                             		//  WGame.wAIBotBase.ClearReferences
	 bool                      WeaponFireAgain ( float RefireRate, bool bFinishedFire );		//  WGame.wAIBotBase.WeaponFireAgain

	// Public Imports
	AwAIBotBase(class AwAIBotBase const &);
	class AwAIBotBase &  operator=(class AwAIBotBase const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0074

// Class WGame.wPlayerInfo
class DLL_IMPORT UwPlayerInfo : public UObject
{
public:

	// UScript Functions
	 bool                      Setup ( class AwPawn* P, struct FPlayerRecord Rec );		//  WGame.wPlayerInfo.Setup
	 bool                      SetupPawn ( class AwPawn* P, int iBodyItemID, int iHeadItemID, int iHelmetItemID, int iAcceItemID, int iTeamIndex );		//  WGame.wPlayerInfo.SetupPawn

	// Public Imports
	UwPlayerInfo(class UwPlayerInfo const &);
	class UwPlayerInfo &  operator=(class UwPlayerInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class WGame.SpeciesType
class DLL_IMPORT USpeciesType : public UObject
{
public:
	struct FString                                     MaleVoice;                                        		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     FemaleVoice;                                      		// 0x0038 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     GibGroup;                                         		// 0x0044 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MaleRagSkelName;                                  		// 0x0050 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     FemaleRagSkelName;                                		// 0x005C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     FemaleSkeleton;                                   		// 0x0068 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MaleSkeleton;                                     		// 0x0074 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MaleSoundGroup;                                   		// 0x0080 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     FemaleSoundGroup;                                 		// 0x008C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     PawnClassName;                                    		// 0x0098 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SpeciesName;                                      		// 0x00A4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                RaceNum;                                          		// 0x00B0 ( 0x0004 ) 
	int                                                DMTeam;                                           		// 0x00B4 ( 0x0004 ) 
	struct FName                                       TauntAnims[ 0x10 ];                               		// 0x00B8 ( 0x0040 ) 
	struct FString                                     TauntAnimNames[ 0x10 ];                           		// 0x00F8 ( 0x00C0 ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              AirControl;                                       		// 0x01B8 ( 0x0004 ) 
	float                                              GroundSpeed;                                      		// 0x01BC ( 0x0004 ) 
	float                                              WaterSpeed;                                       		// 0x01C0 ( 0x0004 ) 
	float                                              JumpZ;                                            		// 0x01C4 ( 0x0004 ) 
	float                                              ReceivedDamageScaling;                            		// 0x01C8 ( 0x0004 ) 
	float                                              DamageScaling;                                    		// 0x01CC ( 0x0004 ) 
	float                                              AccelRate;                                        		// 0x01D0 ( 0x0004 ) 
	float                                              DodgeSpeedFactor;                                 		// 0x01D4 ( 0x0004 ) 
	float                                              DodgeSpeedZ;                                      		// 0x01D8 ( 0x0004 ) 

	// UScript Functions
	 int                       GetOffsetForSequence ( struct FName Sequence );   		//  WGame.SpeciesType.GetOffsetForSequence
	 bool                      Setup ( class AwPawn* P, struct FPlayerRecord Rec );		//  WGame.SpeciesType.Setup
	 void                      SetTeamSkin ( class AwPawn* P, struct FPlayerRecord Rec, int TeamNum );		//  WGame.SpeciesType.SetTeamSkin
	 struct FString            GetRagSkelName ( struct FString MeshName );       		//  WGame.SpeciesType.GetRagSkelName
	 void                      ModifyPawn ( class APawn* P );                    		//  WGame.SpeciesType.ModifyPawn
	 int                       ModifyImpartedDamage ( int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType );		//  WGame.SpeciesType.ModifyImpartedDamage
	 int                       ModifyReceivedDamage ( int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType );		//  WGame.SpeciesType.ModifyReceivedDamage
	 void                      LoadResources ( struct FPlayerRecord Rec, class ALevelInfo* Level, class APlayerReplicationInfo* PRI, int TeamNum );		//  WGame.SpeciesType.LoadResources
	 struct FString            GetVoiceType ( bool bIsFemale, class ALevelInfo* Level );		//  WGame.SpeciesType.GetVoiceType

	// Public Imports
	USpeciesType(class USpeciesType const &);
	class USpeciesType &  operator=(class USpeciesType const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x01B0

// Class WGame.AimedAttachment
class DLL_IMPORT AAimedAttachment : public AActor
{
public:
	unsigned char                                      _0x03C8[ 0x1C ];                                  		// 0x03C8 ( 0x001C )

	// Public Imports
	AAimedAttachment(class AAimedAttachment const &);
	AAimedAttachment(void);
	class AAimedAttachment &  operator=(class AAimedAttachment const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class WGame.wUtil
class DLL_IMPORT UwUtil : public UObject
{
public:
	struct FString                                     SectionName;                                      		// 0x002C ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	struct FString                                     FileExtension;                                    		// 0x0038 ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	class UCachePlayers*                               CachedPlayerList;                                 		// 0x0044 ( 0x0004 ) [ CPF_Edit | CPF_Const | CPF_Transient ]
	struct FString                                     NoPreference;                                     		// 0x0048 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     FavoriteWeapon;                                   		// 0x0054 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     AgilityString;                                    		// 0x0060 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     TacticsString;                                    		// 0x006C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     AccuracyString;                                   		// 0x0078 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     AggressivenessString;                             		// 0x0084 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 class TArray< class UClass* > GetMutatorClasses ( class TArray< struct FString > MutClassNames );		// [ FUNC_Simulated ] WGame.wUtil.GetMutatorClasses
	 int                       GetTeamInfoSalaryFor ( class AUnrealTeamInfo* UT, int lineupsize );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.GetTeamInfoSalaryFor
	 int                       GetTeamSalaryFor ( class UGameProfile* GP, int lineupsize );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.GetTeamSalaryFor
	 int                       TeamArrayTacticsRating ( class TArray< struct FString > Players );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.TeamArrayTacticsRating
	 int                       TeamInfoTacticsRating ( class AUnrealTeamInfo* UT, int lineupsize );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.TeamInfoTacticsRating
	 int                       TeamTacticsRating ( class UGameProfile* GP, int lineupsize );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.TeamTacticsRating
	 int                       TeamArrayAgilityRating ( class TArray< struct FString > Players );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.TeamArrayAgilityRating
	 int                       TeamInfoAgilityRating ( class AUnrealTeamInfo* UT, int lineupsize );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.TeamInfoAgilityRating
	 int                       TeamAgilityRating ( class UGameProfile* GP, int lineupsize );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.TeamAgilityRating
	 int                       TeamArrayAggressivenessRating ( class TArray< struct FString > Players );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.TeamArrayAggressivenessRating
	 int                       TeamInfoAggressivenessRating ( class AUnrealTeamInfo* UT, int lineupsize );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.TeamInfoAggressivenessRating
	 int                       TeamAggressivenessRating ( class UGameProfile* GP, int lineupsize );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.TeamAggressivenessRating
	 int                       TeamArrayAccuracyRating ( class TArray< struct FString > Players );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.TeamArrayAccuracyRating
	 int                       TeamInfoAccuracyRating ( class AUnrealTeamInfo* UT, int lineupsize );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.TeamInfoAccuracyRating
	 int                       TeamAccuracyRating ( class UGameProfile* GP, int lineupsize );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.TeamAccuracyRating
	 int                       AggressivenessRating ( struct FPlayerRecord PRE );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.AggressivenessRating
	 int                       TacticsRating ( struct FPlayerRecord PRE );       		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.TacticsRating
	 int                       AgilityRating ( struct FPlayerRecord PRE );       		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.AgilityRating
	 int                       AccuracyRating ( struct FPlayerRecord PRE );      		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.AccuracyRating
	 int                       RatingModifier ( struct FString CharacterName );  		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.RatingModifier
	 struct FString            GetFavoriteWeaponFor ( struct FPlayerRecord PRE );		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.GetFavoriteWeaponFor
	 int                       GetSalaryFor ( struct FPlayerRecord PRE );        		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.GetSalaryFor
	 struct FPlayerRecord      FindPlayerRecord ( struct FString CharName );     		// [ FUNC_Final | FUNC_Simulated ] WGame.wUtil.FindPlayerRecord
	 void                      GetMutatorList ( class TArray< struct FMutatorRecord > MutatorRecords );		// [ FUNC_Final ] WGame.wUtil.GetMutatorList
	 class UDecoText*          LoadDecoText ( struct FString PackageName, struct FString DecoTextName, int ColumnCount );		// [ FUNC_Final | FUNC_Native ] WGame.wUtil.LoadDecoText
	 struct FPlayerRecord      FindUPLPlayerRecord ( struct FString CharName );  		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0234 ] WGame.wUtil.FindUPLPlayerRecord
	 struct FPlayerRecord      GetPlayerRecord ( int Index );                    		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0233 ] WGame.wUtil.GetPlayerRecord
	 void                      GetPlayerList ( class TArray< struct FPlayerRecord >* PlayerRecords );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0232 ] WGame.wUtil.GetPlayerList

	// Public Imports
	UwUtil(class UwUtil const &);
	UwUtil(void);
	class UwUtil &  operator=(class UwUtil const &);
	void  GetPlayerList(void);
	static void  InternalConstructor(void *);
	static class UDecoText *  LoadDecoText(unsigned short const *,int);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0064

// Class WGame.CachePlayers
class DLL_IMPORT UCachePlayers : public UwUtil
{
public:
	class TArray< struct FPlayerRecord >               Records;                                          		// 0x0090 ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	UCachePlayers(class UCachePlayers const &);
	class UCachePlayers &  operator=(class UCachePlayers const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class WGame.DecoText
class DLL_IMPORT UDecoText : public UObject
{
public:
	struct FString                                     TextName;                                         		// 0x002C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FString >                     Rows;                                             		// 0x0038 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// Public Imports
	UDecoText(class UDecoText const &);
	class UDecoText &  operator=(class UDecoText const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class WGame.wEntryGameInfo
class DLL_IMPORT AwEntryGameInfo : public AGameInfo
{
public:
	unsigned long                                      bLoadedGameTextures:1;                            		// 0x09A8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bLoadedGameStaticMeshes:1;                        		// 0x09A8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bLoadedGameSkeletalMeshes:1;                      		// 0x09A8 ( 0x0004 )  [0x00000004]

	// UScript Functions
	 void                      PrecacheGameSkeletalMeshes ( class ALevelInfo* myLevel );		//  WGame.wEntryGameInfo.PrecacheGameSkeletalMeshes
	 void                      PrecacheGameStaticMeshes ( class ALevelInfo* myLevel );		//  WGame.wEntryGameInfo.PrecacheGameStaticMeshes
	 void                      PrecacheGameTextures ( class ALevelInfo* myLevel );		//  WGame.wEntryGameInfo.PrecacheGameTextures
	 void                      eventPostLogin ( class APlayerController* NewPlayer );		// [ FUNC_Event ] WGame.wEntryGameInfo.PostLogin
}; // Size: 0x0004

// Class WGame.PlayerRecordClass
class DLL_IMPORT UPlayerRecordClass : public UObject
{
public:
	class UClass*                                      Species;                                          		// 0x002C ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     MeshName;                                         		// 0x0030 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     BodySkinName;                                     		// 0x003C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     FaceSkinName;                                     		// 0x0048 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UMaterial*                                   Portrait;                                         		// 0x0054 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     TextName;                                         		// 0x0058 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     VoiceClassName;                                   		// 0x0064 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Sex;                                              		// 0x0070 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Menu;                                             		// 0x007C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Skeleton;                                         		// 0x0088 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Ragdoll;                                          		// 0x0094 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UClass*                                      PlayerInfo;                                       		// 0x00A0 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 struct FPlayerRecord      FillPlayerRecord (  );                            		// [ FUNC_Simulated ] WGame.PlayerRecordClass.FillPlayerRecord
}; // Size: 0x0078

// Class WGame.wPawn
class DLL_IMPORT AwPawn : public AUnrealPawn
{
public:
	int                                                RepeaterDeathCount;                               		// 0x118C ( 0x0004 ) 
	class ACombo*                                      CurrentCombo;                                     		// 0x1190 ( 0x0004 ) 
	unsigned long                                      bBerserk:1;                                       		// 0x1194 ( 0x0004 )  [0x00000001]
	unsigned long                                      bInvis:1;                                         		// 0x1194 ( 0x0004 )  [0x00000002]
	unsigned long                                      bOldInvis:1;                                      		// 0x1194 ( 0x0004 )  [0x00000004]
	unsigned long                                      bGibbed:1;                                        		// 0x1194 ( 0x0004 )  [0x00000008]
	unsigned long                                      bCanDodgeDoubleJump:1;                            		// 0x1194 ( 0x0004 )  [0x00000010]
	unsigned long                                      bCanBoostDodge:1;                                 		// 0x1194 ( 0x0004 )  [0x00000020]
	unsigned long                                      bAlreadySetup:1;                                  		// 0x1194 ( 0x0004 )  [0x00000040]
	unsigned long                                      bSpawnIn:1;                                       		// 0x1194 ( 0x0004 )  [0x00000080]
	unsigned long                                      bSpawnDone:1;                                     		// 0x1194 ( 0x0004 )  [0x00000100]
	unsigned long                                      bFrozenBody:1;                                    		// 0x1194 ( 0x0004 )  [0x00000200]
	unsigned long                                      bFlaming:1;                                       		// 0x1194 ( 0x0004 )  [0x00000400]
	unsigned long                                      bRubbery:1;                                       		// 0x1194 ( 0x0004 )  [0x00000800]
	unsigned long                                      bClearWeaponOffsets:1;                            		// 0x1194 ( 0x0004 )  [0x00001000]
	float                                              ShieldStrengthMax;                                		// 0x1198 ( 0x0004 ) [ CPF_Edit ]
	float                                              SmallShieldStrength;                              		// 0x119C ( 0x0004 ) 
	class UClass*                                      Species;                                          		// 0x11A0 ( 0x0004 ) 
	float                                              GruntVolume;                                      		// 0x11A4 ( 0x0004 ) [ CPF_Edit ]
	float                                              FootstepVolume;                                   		// 0x11A8 ( 0x0004 ) [ CPF_Edit ]
	int                                                SimHitFxTicker;                                   		// 0x11AC ( 0x0004 ) [ CPF_Transient ]
	class UClass*                                      GibGroupClass;                                    		// 0x11B0 ( 0x0004 ) [ CPF_Edit ]
	int                                                GibCountCalf;                                     		// 0x11B4 ( 0x0004 ) [ CPF_Edit ]
	int                                                GibCountForearm;                                  		// 0x11B8 ( 0x0004 ) [ CPF_Edit ]
	int                                                GibCountHead;                                     		// 0x11BC ( 0x0004 ) [ CPF_Edit ]
	int                                                GibCountTorso;                                    		// 0x11C0 ( 0x0004 ) [ CPF_Edit ]
	int                                                GibCountUpperArm;                                 		// 0x11C4 ( 0x0004 ) [ CPF_Edit ]
	float                                              MinTimeBetweenPainSounds;                         		// 0x11C8 ( 0x0004 ) 
	struct FString                                     HeadShotMessage;                                  		// 0x11CC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class USound*                                      SoundFootsteps[ 0x1E ];                           		// 0x11D8 ( 0x0078 ) [ CPF_Edit ]
	class USound*                                      SoundFootsteps_3rd[ 0x1E ];                       		// 0x1250 ( 0x0078 ) [ CPF_Edit ]
	class UClass*                                      SoundGroupClass;                                  		// 0x12C8 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      sndScream;                                        		// 0x12CC ( 0x0004 ) 
	class USound*                                      sndDie;                                           		// 0x12D0 ( 0x0004 ) 
	class AwWeaponAttachment*                          WeaponAttachment;                                 		// 0x12D4 ( 0x0004 ) 
	class AwFPWeaponAttachment*                        FPWeaponAttachment;                               		// 0x12D8 ( 0x0004 ) 
	class AShadowProjector*                            PlayerShadow;                                     		// 0x12DC ( 0x0004 ) 
	class AEffect_ShadowController*                    RealtimeShadow;                                   		// 0x12E0 ( 0x0004 ) 
	unsigned long                                      bRealtimeShadows:1;                               		// 0x12E4 ( 0x0004 )  [0x00000001]
	int                                                iShadowType;                                      		// 0x12E8 ( 0x0004 ) 
	int                                                MultiJumpRemaining;                               		// 0x12EC ( 0x0004 ) 
	int                                                MaxMultiJump;                                     		// 0x12F0 ( 0x0004 ) 
	int                                                MultiJumpBoost;                                   		// 0x12F4 ( 0x0004 ) 
	struct FName                                       WallDodgeAnims[ 0x04 ];                           		// 0x12F8 ( 0x0010 ) 
	struct FName                                       IdleHeavyAnim;                                    		// 0x1308 ( 0x0004 ) 
	struct FName                                       FireHeavyRapidAnim;                               		// 0x130C ( 0x0004 ) 
	struct FName                                       FireHeavyBurstAnim;                               		// 0x1310 ( 0x0004 ) 
	struct FName                                       FireRootBone;                                     		// 0x1314 ( 0x0004 ) 
	struct FName                                       Pistol_FireRifleRapidAnim;                        		// 0x1318 ( 0x0004 ) 
	struct FName                                       TelegraphPack_PutdownAnim;                        		// 0x131C ( 0x0004 ) 
	struct FName                                       TelegraphPack_SelectAnim;                         		// 0x1320 ( 0x0004 ) 
	struct FName                                       Pistol_FireAimCrouchRifleRapidAnim;               		// 0x1324 ( 0x0004 ) 
	unsigned char                                      FireState;                                        		// 0x1328 ( 0x0001 ) 
	class UMesh*                                       SkeletonMesh;                                     		// 0x132C ( 0x0004 ) 
	unsigned long                                      bSkeletized:1;                                    		// 0x1330 ( 0x0004 )  [0x00000001]
	unsigned long                                      bDeRes:1;                                         		// 0x1330 ( 0x0004 )  [0x00000002]
	float                                              DeResTime;                                        		// 0x1334 ( 0x0004 ) 
	class AEmitter*                                    DeResFX;                                          		// 0x1338 ( 0x0004 ) 
	struct FInterpCurve                                DeResLiftVel;                                     		// 0x133C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FInterpCurve                                DeResLiftSoftness;                                		// 0x1348 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              DeResGravScale;                                   		// 0x1354 ( 0x0004 ) [ CPF_Edit ]
	float                                              DeResLateralFriction;                             		// 0x1358 ( 0x0004 ) [ CPF_Edit ]
	float                                              RagdollLifeSpan;                                  		// 0x135C ( 0x0004 ) [ CPF_Edit ]
	float                                              RagInvInertia;                                    		// 0x1360 ( 0x0004 ) [ CPF_Edit ]
	float                                              RagDeathVel;                                      		// 0x1364 ( 0x0004 ) [ CPF_Edit ]
	float                                              RagShootStrength;                                 		// 0x1368 ( 0x0004 ) [ CPF_Edit ]
	float                                              RagSpinScale;                                     		// 0x136C ( 0x0004 ) [ CPF_Edit ]
	float                                              RagDeathUpKick;                                   		// 0x1370 ( 0x0004 ) [ CPF_Edit ]
	float                                              RagGravScale;                                     		// 0x1374 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   RagConvulseMaterial;                              		// 0x1378 ( 0x0004 ) [ CPF_Edit ]
	class TArray< class USound* >                      RagImpactSounds;                                  		// 0x137C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              RagImpactSoundInterval;                           		// 0x1388 ( 0x0004 ) [ CPF_Edit ]
	float                                              RagImpactVolume;                                  		// 0x138C ( 0x0004 ) [ CPF_Edit ]
	float                                              RagLastSoundTime;                                 		// 0x1390 ( 0x0004 ) [ CPF_Transient ]
	struct FString                                     RagdollOverride;                                  		// 0x1394 ( 0x000C ) [ CPF_NeedCtorLink ]
	class AController*                                 OldController;                                    		// 0x13A0 ( 0x0004 ) 
	class UMaterial*                                   RealSkins[ 0x04 ];                                		// 0x13A4 ( 0x0010 ) 
	struct FString                                     PlacedCharacterName;                              		// 0x13B4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     PlacedFemaleCharacterName;                        		// 0x13C0 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      TeamSkin;                                         		// 0x13CC ( 0x0001 ) 
	class AwSkinShell*                                 wParts[ 0x03 ];                                   		// 0x13D0 ( 0x000C ) 
	class AwSkinShell*                                 wGoreParts[ 0x05 ];                               		// 0x13DC ( 0x0014 ) 
	float                                              BreathVolume;                                     		// 0x13F0 ( 0x0004 ) 
	float                                              EquipHitVolume;                                   		// 0x13F4 ( 0x0004 ) 
	int                                                iDiedCollisionPart;                               		// 0x13F8 ( 0x0004 ) 
	int                                                iBackupTeamNum;                                   		// 0x13FC ( 0x0004 ) 
	int                                                iWarpCount;                                       		// 0x1400 ( 0x0004 ) 
	struct FString                                     strGoreMeshName;                                  		// 0x1404 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strGoreStaticMeshName;                            		// 0x1410 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                AddedSkillList[ 0x16 ];                           		// 0x141C ( 0x0058 ) 
	int                                                iStartQSlotIndex;                                 		// 0x1474 ( 0x0004 ) 
	unsigned long                                      bBurning:1;                                       		// 0x1478 ( 0x0004 )  [0x00000001]
	float                                              fLastBurningTime;                                 		// 0x147C ( 0x0004 ) 
	class AwProjectile*                                BurningProj;                                      		// 0x1480 ( 0x0004 ) 
	class AEmitter*                                    mIFFEffect;                                       		// 0x1484 ( 0x0004 ) 
	struct FName                                       Hit_Stun;                                         		// 0x1488 ( 0x0004 ) 
	struct FName                                       Hit_Stun_Cr;                                      		// 0x148C ( 0x0004 ) 
	struct FName                                       Hit_Stun_Pr;                                      		// 0x1490 ( 0x0004 ) 
	struct FName                                       Hit_PS[ 0x04 ];                                   		// 0x1494 ( 0x0010 ) 
	struct FName                                       Hit_PS_Head;                                      		// 0x14A4 ( 0x0004 ) 
	struct FName                                       Hit_PS_Cr[ 0x04 ];                                		// 0x14A8 ( 0x0010 ) 
	struct FName                                       Hit_PS_Pr;                                        		// 0x14B8 ( 0x0004 ) 
	struct FName                                       Hit_PS_Stun;                                      		// 0x14BC ( 0x0004 ) 
	struct FName                                       Hit_PS_Stun_Cr;                                   		// 0x14C0 ( 0x0004 ) 
	struct FName                                       Hit_PS_Stun_Pr;                                   		// 0x14C4 ( 0x0004 ) 
	struct FName                                       Hit_FR[ 0x04 ];                                   		// 0x14C8 ( 0x0010 ) 
	struct FName                                       Hit_FR_Head;                                      		// 0x14D8 ( 0x0004 ) 
	struct FName                                       Hit_FR_Cr[ 0x04 ];                                		// 0x14DC ( 0x0010 ) 
	struct FName                                       Hit_FR_Pr;                                        		// 0x14EC ( 0x0004 ) 
	struct FName                                       Hit_FR_Stun;                                      		// 0x14F0 ( 0x0004 ) 
	struct FName                                       Hit_FR_Stun_Cr;                                   		// 0x14F4 ( 0x0004 ) 
	struct FName                                       Hit_FR_Stun_Pr;                                   		// 0x14F8 ( 0x0004 ) 
	struct FName                                       Hit_RPG[ 0x04 ];                                  		// 0x14FC ( 0x0010 ) 
	struct FName                                       Hit_RPG_Head;                                     		// 0x150C ( 0x0004 ) 
	struct FName                                       Hit_RPG_Cr[ 0x04 ];                               		// 0x1510 ( 0x0010 ) 
	struct FName                                       Hit_RPG_Pr;                                       		// 0x1520 ( 0x0004 ) 
	struct FName                                       Hit_RPG_Stun;                                     		// 0x1524 ( 0x0004 ) 
	struct FName                                       Hit_RPG_Stun_Cr;                                  		// 0x1528 ( 0x0004 ) 
	struct FName                                       Hit_RPG_Stun_Pr;                                  		// 0x152C ( 0x0004 ) 
	struct FName                                       Meele_Rifle_Fail;                                 		// 0x1530 ( 0x0004 ) 
	struct FName                                       Meele_Rifle_Cr_Fail;                              		// 0x1534 ( 0x0004 ) 
	struct FName                                       Meele_Rifle_Pr_Fail;                              		// 0x1538 ( 0x0004 ) 
	struct FName                                       Meele_Knife_Fail;                                 		// 0x153C ( 0x0004 ) 
	struct FName                                       Meele_Knife_Cr_Fail;                              		// 0x1540 ( 0x0004 ) 
	struct FName                                       Meele_Knife_Pr_Fail;                              		// 0x1544 ( 0x0004 ) 
	struct FName                                       Knife_Fire;                                       		// 0x1548 ( 0x0004 ) 
	struct FName                                       Knife_Fire_Cr;                                    		// 0x154C ( 0x0004 ) 
	struct FName                                       Knife_Fire_Pr;                                    		// 0x1550 ( 0x0004 ) 
	struct FName                                       Rifle_Crouch_BoltLeverAnim;                       		// 0x1554 ( 0x0004 ) 
	struct FName                                       Reload_Rifle_2nd_Anim;                            		// 0x1558 ( 0x0004 ) 
	struct FName                                       Reload_Crouch_Rifle_Anim;                         		// 0x155C ( 0x0004 ) 
	struct FName                                       Reload_Crouch_Rifle_2nd_Anim;                     		// 0x1560 ( 0x0004 ) 
	struct FName                                       Reload_Prone_Rifle_2nd_Anim;                      		// 0x1564 ( 0x0004 ) 
	struct FName                                       Pistol_Reload_Rifle_2nd_Anim;                     		// 0x1568 ( 0x0004 ) 
	struct FName                                       Pistol_CrouchReload;                              		// 0x156C ( 0x0004 ) 
	struct FName                                       Pistol_CrouchReload_2nd;                          		// 0x1570 ( 0x0004 ) 
	struct FName                                       Pistol_ProneReload_2nd;                           		// 0x1574 ( 0x0004 ) 
	struct FName                                       Rpg_Reload_2nd_Anim;                              		// 0x1578 ( 0x0004 ) 
	struct FName                                       Rpg_CrouchReload;                                 		// 0x157C ( 0x0004 ) 
	struct FName                                       Rpg_CrouchReload_2nd;                             		// 0x1580 ( 0x0004 ) 
	struct FName                                       Rpg_ProneReload_2nd;                              		// 0x1584 ( 0x0004 ) 
	struct FName                                       Putdown_Crouch_Rifle_Anim;                        		// 0x1588 ( 0x0004 ) 
	struct FName                                       PutdownQuick_Crouch_Rifle_Anim;                   		// 0x158C ( 0x0004 ) 
	struct FName                                       Pistol_CrouchPutdown;                             		// 0x1590 ( 0x0004 ) 
	struct FName                                       Pistol_CrouchPutdownQuick;                        		// 0x1594 ( 0x0004 ) 
	struct FName                                       Frag_CrouchPutdown;                               		// 0x1598 ( 0x0004 ) 
	struct FName                                       Frag_CrouchPutdownQuick;                          		// 0x159C ( 0x0004 ) 
	struct FName                                       Rpg_CrouchPutdown;                                		// 0x15A0 ( 0x0004 ) 
	struct FName                                       Rpg_CrouchPutdownQuick;                           		// 0x15A4 ( 0x0004 ) 
	struct FName                                       Select_Crouch_Rifle_Anim;                         		// 0x15A8 ( 0x0004 ) 
	struct FName                                       SelectNew_Crouch_Rifle_Anim;                      		// 0x15AC ( 0x0004 ) 
	struct FName                                       Pistol_CrouchSelect;                              		// 0x15B0 ( 0x0004 ) 
	struct FName                                       Frag_CrouchSelect;                                		// 0x15B4 ( 0x0004 ) 
	struct FName                                       Rpg_CrouchSelect;                                 		// 0x15B8 ( 0x0004 ) 
	unsigned long                                      bEndProned:1;                                     		// 0x15BC ( 0x0004 )  [0x00000001]
	unsigned long                                      bEndCrouched:1;                                   		// 0x15BC ( 0x0004 )  [0x00000002]
	class TArray< int >                                wRequiredEquipment;                               		// 0x15C0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< int >                                wRequiredParts;                                   		// 0x15CC ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bAimed:1;                                         		// 0x15D8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bIsMeleeAttacking:1;                              		// 0x15D8 ( 0x0004 )  [0x00000002]
	struct FVector                                     GrenadeFireLocation;                              		// 0x15DC ( 0x000C ) 
	struct FRotator                                    GrenadeFireRotation;                              		// 0x15E8 ( 0x000C ) 
	struct FVector                                     GrenadeExplodeLocation;                           		// 0x15F4 ( 0x000C ) 
	class UBTNetEnums*                                 BTNetEnums;                                       		// 0x1600 ( 0x0004 ) 

	// UScript Functions
	 void                      AddIdentificationFriend (  );                     		// [ FUNC_Simulated ] WGame.wPawn.AddIdentificationFriend
	 void                      execreset_weapon (  );                            		// [ FUNC_Exec ] WGame.wPawn.reset_weapon
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] WGame.wPawn.DisplayDebug
	 void                      SetBurning ( bool bBurn, class AwProjectile* proj );		//  WGame.wPawn.SetBurning
	 void                      GetWeaponAttachmentInfo ( unsigned char* byFlashCount, unsigned char* byFiringMode );		// [ FUNC_Simulated ] WGame.wPawn.GetWeaponAttachmentInfo
	 void                      SetWeaponQuickChange ( bool bOn );                		//  WGame.wPawn.SetWeaponQuickChange
	 void                      SetWeaponQuickReload ( bool bOn );                		//  WGame.wPawn.SetWeaponQuickReload
	 void                      SetWeaponQuickAimZoom ( bool bOn );               		//  WGame.wPawn.SetWeaponQuickAimZoom
	 void                      AddWeaponMagazine (  );                           		//  WGame.wPawn.AddWeaponMagazine
	 void                      SetRemoveWeaponSkill ( class AwWeapon* W );       		//  WGame.wPawn.SetRemoveWeaponSkill
	 void                      SetAddWeaponSkill ( class AwWeapon* W, int iaWeaponID, int iPartsID );		//  WGame.wPawn.SetAddWeaponSkill
	 void                      RenderFPWeaponAttachment ( class UCanvas* C );    		// [ FUNC_Simulated ] WGame.wPawn.RenderFPWeaponAttachment
	 void                      MakeShellEffect_Rechamber (  );                   		// [ FUNC_Simulated ] WGame.wPawn.MakeShellEffect_Rechamber
	 void                      MakeShellEffect (  );                             		// [ FUNC_Simulated ] WGame.wPawn.MakeShellEffect
	 void                      ServerCallNoWeaponMessage ( unsigned char bySlot );		//  WGame.wPawn.ServerCallNoWeaponMessage
	 void                      AddNoWeaponChangeMessage ( unsigned char bySlot );		// [ FUNC_Simulated ] WGame.wPawn.AddNoWeaponChangeMessage
	 void                      HandlePickup ( class APickup* pick );             		//  WGame.wPawn.HandlePickup
	 void                      PlayReload (  );                                  		// [ FUNC_Simulated ] WGame.wPawn.PlayReload
	 void                      PlayRechamber (  );                               		// [ FUNC_Simulated ] WGame.wPawn.PlayRechamber
	 void                      PlayMelee ( bool bMeleeKnifeOrButt );             		// [ FUNC_Simulated ] WGame.wPawn.PlayMelee
	 void                      eventPostRender2D ( class UCanvas* C, float ScreenLocX, float ScreenLocY );		// [ FUNC_Simulated | FUNC_Event ] WGame.wPawn.PostRender2D
	 int                       SpawnSupplyItem (  );                             		//  WGame.wPawn.SpawnSupplyItem
	 void                      SpawnMedals (  );                                 		//  WGame.wPawn.SpawnMedals
	 void                      ClientSwitchToLastWeapon ( unsigned char defuseSwitch );		// [ FUNC_Simulated ] WGame.wPawn.ClientSwitchToLastWeapon
	 void                      SetSpecialState ( unsigned char byState );        		//  WGame.wPawn.SetSpecialState
	 void                      ServerQSlotChangeCheck (  );                      		//  WGame.wPawn.ServerQSlotChangeCheck
	 void                      ClientQSlotChangeCheck (  );                      		// [ FUNC_Simulated ] WGame.wPawn.ClientQSlotChangeCheck
	 void                      AddBaseInvenWeapon ( class UwMatchUserInfo* kUser, int iPos );		//  WGame.wPawn.AddBaseInvenWeapon
	 void                      SetSelectedQuickSlotInventory ( class UwMatchUserInfo* kUser, bool bQuickslotChange );		//  WGame.wPawn.SetSelectedQuickSlotInventory
	 void                      AddWeaponByWeaponLimited ( int iWeaponID, int iPartsID, struct FBtrDouble UniqueID );		//  WGame.wPawn.AddWeaponByWeaponLimited
	 void                      SetInfiniteAmmoTutorial ( bool bDeleteGranade, int iGranadeCount );		//  WGame.wPawn.SetInfiniteAmmoTutorial
	 void                      SetInfiniteAmmo ( int ammoCount );                		//  WGame.wPawn.SetInfiniteAmmo
	 void                      DoSortEquipedItems ( class UwMatchUserInfo* kUserInfo );		//  WGame.wPawn.DoSortEquipedItems
	 bool                      CheckWeaponBySubGameMode ( class UwMatchUserInfo* kUser );		//  WGame.wPawn.CheckWeaponBySubGameMode
	 void                      AddDefaultInventoryDOA ( bool bQuickslotChange ); 		//  WGame.wPawn.AddDefaultInventoryDOA
	 void                      SetGrenadlInvenByWeaponLimited ( int i, class UwMatchMaker* kMM, class UwMatchUserInfo* kUser, bool IsQuick );		//  WGame.wPawn.SetGrenadlInvenByWeaponLimited
	 void                      SetFlameThrowerlInvenByWeaponLimited ( int i, class UwMatchMaker* kMM, class UwMatchUserInfo* kUser, bool IsQuick );		//  WGame.wPawn.SetFlameThrowerlInvenByWeaponLimited
	 void                      SetMGlInvenByWeaponLimited ( int i, class UwMatchMaker* kMM, class UwMatchUserInfo* kUser, bool IsQuick );		//  WGame.wPawn.SetMGlInvenByWeaponLimited
	 void                      SetShotGunlInvenByWeaponLimited ( int i, class UwMatchMaker* kMM, class UwMatchUserInfo* kUser, bool IsQuick );		//  WGame.wPawn.SetShotGunlInvenByWeaponLimited
	 void                      SetPistolInvenByWeaponLimited ( int i, class UwMatchMaker* kMM, class UwMatchUserInfo* kUser, bool IsQuick );		//  WGame.wPawn.SetPistolInvenByWeaponLimited
	 void                      AddDefaultInventory ( bool bQuickslotChange );    		//  WGame.wPawn.AddDefaultInventory
	 void                      RemoveAllInventory (  );                          		//  WGame.wPawn.RemoveAllInventory
	 void                      ChangeInventoryByQSlot (  );                      		//  WGame.wPawn.ChangeInventoryByQSlot
	 int                       GetSlotPosbySkillID ( class UwMatchUserInfo* kUser, int iSkillID );		//  WGame.wPawn.GetSlotPosbySkillID
	 int                       GetInvenSkillIDbyPos ( class UwMatchUserInfo* kUser, int iPos );		//  WGame.wPawn.GetInvenSkillIDbyPos
	 void                      AddBaseInvenSkill ( class UwMatchUserInfo* kUser, int iPos );		//  WGame.wPawn.AddBaseInvenSkill
	 void                      SetSelectedQuickSlotSkills ( class UwMatchUserInfo* kUser );		//  WGame.wPawn.SetSelectedQuickSlotSkills
	 void                      AddWeaponFromSkill ( struct FBtrDouble iUniqueID, int iaWeaponID );		//  WGame.wPawn.AddWeaponFromSkill
	 void                      AddSkillByInventory ( class UwMatchUserInfo* kUser );		//  WGame.wPawn.AddSkillByInventory
	 void                      AddDefaultSkills ( bool bQuickslotChange );       		//  WGame.wPawn.AddDefaultSkills
	 unsigned char             GetGibParts ( int iCollisionPart );               		// [ FUNC_Simulated ] WGame.wPawn.GetGibParts
	 void                      SpawnGoreGiblet ( int iIndex );                   		// [ FUNC_Simulated ] WGame.wPawn.SpawnGoreGiblet
	 void                      MakeGorePawn ( int iPart );                       		// [ FUNC_Simulated ] WGame.wPawn.MakeGorePawn
	 void                      eventEndCrouch ( float HeightAdjust );            		// [ FUNC_Event ] WGame.wPawn.EndCrouch
	 void                      eventEndProne ( float HeightAdjust );             		// [ FUNC_Event ] WGame.wPawn.EndProne
	 void                      SetParts ( unsigned char iPartsIndex, class UMesh* resMesh, class UStaticMesh* resStaticMesh );		// [ FUNC_Simulated ] WGame.wPawn.SetParts
	 void                      ResetAllParts (  );                               		// [ FUNC_Simulated ] WGame.wPawn.ResetAllParts
	 void                      Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int CollisionPart, int WeaponType, bool bWallShot );		//  WGame.wPawn.Died
	 void                      DoDerezEffect (  );                               		// [ FUNC_Simulated ] WGame.wPawn.DoDerezEffect
	 class UClass*             GetGibClass ( unsigned char gibType );            		//  WGame.wPawn.GetGibClass
	 class USound*             GetSound ( unsigned char soundType );             		//  WGame.wPawn.GetSound
	 void                      ResetPhysicsBasedAnim (  );                       		// [ FUNC_Simulated ] WGame.wPawn.ResetPhysicsBasedAnim
	 void                      Setup ( struct FPlayerRecord Rec, bool bLoadNow );		// [ FUNC_Simulated ] WGame.wPawn.Setup
	 struct FString            GetDefaultCharacter (  );                         		// [ FUNC_Simulated ] WGame.wPawn.GetDefaultCharacter
	 bool                      ForceDefaultCharacter (  );                       		// [ FUNC_Simulated ] WGame.wPawn.ForceDefaultCharacter
	 bool                      CheckValidMaleDefault (  );                       		// [ FUNC_Simulated ] WGame.wPawn.CheckValidMaleDefault
	 bool                      CheckValidFemaleDefault (  );                     		// [ FUNC_Simulated ] WGame.wPawn.CheckValidFemaleDefault
	 void                      ClientReStart (  );                               		// [ FUNC_Simulated ] WGame.wPawn.ClientReStart
	 void                      eventPostNetReceive (  );                         		// [ FUNC_Simulated | FUNC_Event ] WGame.wPawn.PostNetReceive
	 void                      NotifyTeamChanged (  );                           		// [ FUNC_Simulated ] WGame.wPawn.NotifyTeamChanged
	 bool                      DoJump ( bool bUpdating );                        		//  WGame.wPawn.DoJump
	 bool                      CanMultiJump (  );                                		//  WGame.wPawn.CanMultiJump
	 bool                      CanDoubleJump (  );                               		//  WGame.wPawn.CanDoubleJump
	 void                      DoDoubleJump ( bool bUpdating );                  		//  WGame.wPawn.DoDoubleJump
	 bool                      PerformDodge ( unsigned char DoubleClickMove, struct FVector Dir, struct FVector Cross );		//  WGame.wPawn.PerformDodge
	 bool                      Dodge ( unsigned char DoubleClickMove );          		//  WGame.wPawn.Dodge
	 struct FVector            BotDodge ( struct FVector Dir );                  		//  WGame.wPawn.BotDodge
	 void                      SetInvisibility ( float Time );                   		//  WGame.wPawn.SetInvisibility
	 void                      ServerChangedWeapon ( class AwWeapon* OldWeapon, class AwWeapon* newWeapon );		//  WGame.wPawn.ServerChangedWeapon
	 void                      ChangedWeapon (  );                               		//  WGame.wPawn.ChangedWeapon
	 void                      SetWeaponOverlay ( class UMaterial* mat, float Time, bool override );		//  WGame.wPawn.SetWeaponOverlay
	 void                      DisableUDamage (  );                              		//  WGame.wPawn.DisableUDamage
	 void                      EnableUDamage ( float Amount );                   		//  WGame.wPawn.EnableUDamage
	 bool                      HasUDamage (  );                                  		// [ FUNC_Simulated ] WGame.wPawn.HasUDamage
	 void                      DoCombo ( class UClass* ComboClass );             		//  WGame.wPawn.DoCombo
	 void                      DoComboName ( struct FString ComboClassName );    		//  WGame.wPawn.DoComboName
	 bool                      InCurrentCombo (  );                              		//  WGame.wPawn.InCurrentCombo
	 bool                      AddShieldStrength ( int ShieldAmount );           		//  WGame.wPawn.AddShieldStrength
	 int                       CanUseShield ( int ShieldAmount );                		//  WGame.wPawn.CanUseShield
	 float                     GetShieldStrength (  );                           		//  WGame.wPawn.GetShieldStrength
	 float                     GetShieldStrengthMax (  );                        		//  WGame.wPawn.GetShieldStrengthMax
	 void                      TakeDamageSound ( int LeftHealth, int ActualDamage, struct FVector HitLocation, class UClass* DamageType, int CollisionPart, int WeaponType, class AController* Killer );		//  WGame.wPawn.TakeDamageSound
	 void                      PlayFootStepRight (  );                           		// [ FUNC_Simulated ] WGame.wPawn.PlayFootStepRight
	 void                      PlayFootStepLeft (  );                            		// [ FUNC_Simulated ] WGame.wPawn.PlayFootStepLeft
	 void                      FootStepping ( int side );                        		// [ FUNC_Simulated ] WGame.wPawn.FootStepping
	 void                      PlayEquipHitSound (  );                           		// [ FUNC_Simulated ] WGame.wPawn.PlayEquipHitSound
	 void                      PlayBreathSound (  );                             		// [ FUNC_Simulated ] WGame.wPawn.PlayBreathSound
	 void                      PlayDirectionalHit ( struct FVector HitLoc, bool bUseHitStun, bool bGoreChange );		// [ FUNC_Simulated ] WGame.wPawn.PlayDirectionalHit
	 void                      PlayDirectionalDeath ( struct FVector HitLoc );   		// [ FUNC_Simulated ] WGame.wPawn.PlayDirectionalDeath
	 void                      eventKImpact ( class AActor* Other, struct FVector pos, struct FVector impactVel, struct FVector impactNorm );		// [ FUNC_Event ] WGame.wPawn.KImpact
	 void                      PlayTakeHit ( struct FVector HitLocation, int Damage, class UClass* DamageType );		//  WGame.wPawn.PlayTakeHit
	 void                      ClientDying ( class UClass* DamageType, struct FVector HitLocation );		//  WGame.wPawn.ClientDying
	 void                      SpawnGibs ( struct FRotator HitRotation, float ChunkPerterbation );		// [ FUNC_Simulated ] WGame.wPawn.SpawnGibs
	 void                      PlayDyingAnimation ( class UClass* DamageType, struct FVector HitLoc );		//  WGame.wPawn.PlayDyingAnimation
	 void                      PlayDying ( class UClass* DamageType, struct FVector HitLoc, int CollisionPart );		// [ FUNC_Simulated ] WGame.wPawn.PlayDying
	 void                      RandSpin ( float spinRate );                      		// [ FUNC_Final | FUNC_Simulated ] WGame.wPawn.RandSpin
	 void                      eventKSkelConvulse (  );                          		// [ FUNC_Event ] WGame.wPawn.KSkelConvulse
	 void                      SetWeaponAttachment ( class AwWeaponAttachment* NewAtt );		// [ FUNC_Simulated ] WGame.wPawn.SetWeaponAttachment
	 void                      PlayVictoryAnimation (  );                        		//  WGame.wPawn.PlayVictoryAnimation
	 void                      eventCheckProneAni ( bool bGoProne );             		// [ FUNC_Simulated | FUNC_Event ] WGame.wPawn.CheckProneAni
	 void                      ServerThrowsWeaponAnim ( bool bQuick );           		//  WGame.wPawn.ServerThrowsWeaponAnim
	 void                      ServerPlayPutdownWeaponAnim ( bool bQuick );      		//  WGame.wPawn.ServerPlayPutdownWeaponAnim
	 void                      PlayWeaponSwitch ( class AwWeapon* newWeapon );   		//  WGame.wPawn.PlayWeaponSwitch
	 void                      eventAnimEnd ( int Channel );                     		// [ FUNC_Simulated | FUNC_Event ] WGame.wPawn.AnimEnd
	 void                      ScriptPlayIdle ( int Channel );                   		// [ FUNC_Simulated ] WGame.wPawn.ScriptPlayIdle
	 void                      eventInitialPlayer (  );                          		// [ FUNC_Simulated | FUNC_Event ] WGame.wPawn.InitialPlayer
	 bool                      GetIsFiring (  );                                 		// [ FUNC_Simulated ] WGame.wPawn.GetIsFiring
	 void                      StopFiring (  );                                  		// [ FUNC_Simulated ] WGame.wPawn.StopFiring
	 void                      StartFiring ( bool bHeavy, bool bRapid );         		// [ FUNC_Simulated ] WGame.wPawn.StartFiring
	 void                      eventSetAnimAction ( struct FName NewAction );    		// [ FUNC_Simulated | FUNC_Event ] WGame.wPawn.SetAnimAction
	 bool                      FindValidTaunt ( struct FName* Sequence );        		// [ FUNC_Simulated ] WGame.wPawn.FindValidTaunt
	 void                      PlayDoubleJump (  );                              		// [ FUNC_Simulated ] WGame.wPawn.PlayDoubleJump
	 struct FName              GetAnimSequence (  );                             		// [ FUNC_Simulated ] WGame.wPawn.GetAnimSequence
	 void                      eventLanded ( struct FVector HitNormal );         		// [ FUNC_Event ] WGame.wPawn.Landed
	 void                      eventPlayLandedSound ( int SurfType );            		// [ FUNC_Event ] WGame.wPawn.PlayLandedSound
	 struct FName              GetOffhandBoneFor ( class AInventory* i );        		//  WGame.wPawn.GetOffhandBoneFor
	 struct FName              GetWeaponBoneFor ( class AInventory* i );         		//  WGame.wPawn.GetWeaponBoneFor
	 bool                      CheckReflect ( struct FVector HitLocation, int Damage, struct FVector* RefNormal );		//  WGame.wPawn.CheckReflect
	 void                      PlayHit ( float Damage, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, int CollisionPart );		//  WGame.wPawn.PlayHit
	 void                      PostNetBeginPlay (  );                            		// [ FUNC_Simulated ] WGame.wPawn.PostNetBeginPlay
	 void                      InitMyParam (  );                                 		// [ FUNC_Simulated ] WGame.wPawn.InitMyParam
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] WGame.wPawn.PostBeginPlay
	 void                      eventTick ( float DeltaTime );                    		// [ FUNC_Simulated | FUNC_Event ] WGame.wPawn.Tick
	 void                      TestVersion_SetParameters (  );                   		// [ FUNC_Simulated ] WGame.wPawn.TestVersion_SetParameters
	 void                      TickDeRes ( float DeltaTime );                    		// [ FUNC_Simulated ] WGame.wPawn.TickDeRes
	 void                      SetOverlayMaterial ( class UMaterial* mat, float Time, bool bOverride );		// [ FUNC_Simulated ] WGame.wPawn.SetOverlayMaterial
	 void                      StartDeRes (  );                                  		// [ FUNC_Simulated ] WGame.wPawn.StartDeRes
	 void                      DoDamageFX ( struct FName BoneName, int Damage, class UClass* DamageType, struct FRotator R, struct FVector HitLoc, int CollisionPart );		//  WGame.wPawn.DoDamageFX
	 void                      GetBoneNameByCollisionID ( int CollisionID, struct FName* BoneName );		//  WGame.wPawn.GetBoneNameByCollisionID
	 void                      CalcHitLoc ( struct FVector HitLoc, struct FVector hitRay, struct FName* BoneName, float* dist );		//  WGame.wPawn.CalcHitLoc
	 void                      HideBone ( struct FName BoneName );               		// [ FUNC_Simulated ] WGame.wPawn.HideBone
	 class UClass*             GetBloodHitClass ( bool bHeadShot );              		// [ FUNC_Simulated ] WGame.wPawn.GetBloodHitClass
	 void                      ProcessHitFX (  );                                		// [ FUNC_Simulated ] WGame.wPawn.ProcessHitFX
	 void                      SpawnGiblet ( class UClass* GibClass, struct FVector Location, struct FRotator Rotation, float GibPerterbation, struct FVector GibVelocity );		// [ FUNC_Simulated ] WGame.wPawn.SpawnGiblet
	 void                      eventSetHeadScale ( float NewScale );             		// [ FUNC_Simulated | FUNC_Event ] WGame.wPawn.SetHeadScale
	 void                      AttachEffect ( class UClass* EmitterClass, struct FName BoneName, struct FVector Location, struct FRotator Rotation );		// [ FUNC_Simulated ] WGame.wPawn.AttachEffect
	 void                      StopDriving ( class AVehicle* V );                		// [ FUNC_Simulated ] WGame.wPawn.StopDriving
	 void                      StartDriving ( class AVehicle* V );               		// [ FUNC_Simulated ] WGame.wPawn.StartDriving
	 void                      TickDamage ( float DeltaTime );                   		// [ FUNC_Simulated ] WGame.wPawn.TickDamage
	 void                      TickFX ( float DeltaTime );                       		// [ FUNC_Simulated ] WGame.wPawn.TickFX
	 void                      RemovePowerups (  );                              		//  WGame.wPawn.RemovePowerups
	 class ATeamInfo*          GetTeam (  );                                     		//  WGame.wPawn.GetTeam
	 int                       GetTeamNum (  );                                  		// [ FUNC_Simulated ] WGame.wPawn.GetTeamNum
	 class AController*        GetKillerController (  );                         		//  WGame.wPawn.GetKillerController
	 void                      Gasp (  );                                        		//  WGame.wPawn.Gasp
	 void                      PlayDyingSound (  );                              		//  WGame.wPawn.PlayDyingSound
	 void                      PlayMoverHitSound (  );                           		//  WGame.wPawn.PlayMoverHitSound
	 void                      PlayTeleportEffect ( bool bOut, bool bSound );    		//  WGame.wPawn.PlayTeleportEffect
	 void                      DeactivateSpawnProtection (  );                   		//  WGame.wPawn.DeactivateSpawnProtection
	 float                     AdjustedStrength (  );                            		//  WGame.wPawn.AdjustedStrength
	 void                      eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );		// [ FUNC_Simulated | FUNC_Event ] WGame.wPawn.PhysicsVolumeChange
	 void                      RemoveFlamingEffects (  );                        		// [ FUNC_Simulated ] WGame.wPawn.RemoveFlamingEffects
	 void                      Destroyed (  );                                   		// [ FUNC_Simulated ] WGame.wPawn.Destroyed
	 void                      AssignInitialPose (  );                           		// [ FUNC_Simulated ] WGame.wPawn.AssignInitialPose
	 void                      DoTranslocateOut ( struct FVector PrevLocation ); 		//  WGame.wPawn.DoTranslocateOut
	 bool                      WasPlayerPawn (  );                               		// [ FUNC_Simulated ] WGame.wPawn.WasPlayerPawn
	 void                      UnPossessed (  );                                 		//  WGame.wPawn.UnPossessed
	 void                      PossessedBy ( class AController* C );             		//  WGame.wPawn.PossessedBy
	 class URosterEntry*       GetPlacedRoster (  );                             		//  WGame.wPawn.GetPlacedRoster
	 void                      PlayWaiting (  );                                 		// [ FUNC_Simulated ] WGame.wPawn.PlayWaiting
	 void                      AltFire ( float f );                              		// [ FUNC_Simulated ] WGame.wPawn.AltFire
	 void                      Fire ( float f );                                 		// [ FUNC_Simulated ] WGame.wPawn.Fire
	 void                      ClientWeaponReset (  );                           		// [ FUNC_Simulated ] WGame.wPawn.ClientWeaponReset
	 void                      SimulatedSetRotation ( struct FRotator R );       		// [ FUNC_Simulated ] WGame.wPawn.SimulatedSetRotation
	 void                      PlayTurretIdleAnim ( bool UpDown );               		// [ FUNC_Simulated ] WGame.wPawn.PlayTurretIdleAnim
}; // Size: 0x0478

// Class WGame.wPawnSoundGroup
class DLL_IMPORT UwPawnSoundGroup : public UObject
{
public:
	class TArray< class USound* >                      Sounds;                                           		// 0x002C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< class USound* >                      DeathSounds;                                      		// 0x0038 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< class USound* >                      PainSounds;                                       		// 0x0044 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class USound*                                      BreathSound;                                      		// 0x0050 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      EquipHitSound;                                    		// 0x0054 ( 0x0004 ) [ CPF_Edit ]
	class TArray< class USound* >                      LandedSounds;                                     		// 0x0058 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< class USound* >                      LandedSounds_3rd;                                 		// 0x0064 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// UScript Functions
	 class USound*             GetEquipHitSound (  );                            		//  WGame.wPawnSoundGroup.GetEquipHitSound
	 class USound*             GetBreathSound (  );                              		//  WGame.wPawnSoundGroup.GetBreathSound
	 class USound*             GetSound ( unsigned char soundType );             		//  WGame.wPawnSoundGroup.GetSound
	 class USound*             GetLanedSound ( int SurfType, bool bFirstPerson );		//  WGame.wPawnSoundGroup.GetLanedSound
	 class USound*             GetDeathSound (  );                               		//  WGame.wPawnSoundGroup.GetDeathSound
	 class USound*             GetHitSound (  );                                 		//  WGame.wPawnSoundGroup.GetHitSound
}; // Size: 0x0044

// Class WGame.wPlayer
class DLL_IMPORT AwPlayer : public AUnrealPlayer
{
public:
	class AAttractCamera*                              camlist[ 0x14 ];                                  		// 0x0E20 ( 0x0050 ) 
	int                                                numcams;                                          		// 0x0E70 ( 0x0004 ) 
	int                                                curcam;                                           		// 0x0E74 ( 0x0004 ) 
	class APawn*                                       attracttarget;                                    		// 0x0E78 ( 0x0004 ) 
	class APawn*                                       attracttarget2;                                   		// 0x0E7C ( 0x0004 ) 
	float                                              camtime;                                          		// 0x0E80 ( 0x0004 ) 
	float                                              targettime;                                       		// 0x0E84 ( 0x0004 ) 
	float                                              gibwatchtime;                                     		// 0x0E88 ( 0x0004 ) 
	struct FVector                                     focuspoint;                                       		// 0x0E8C ( 0x000C ) 
	int                                                InputHistory[ 0x04 ];                             		// 0x0E98 ( 0x0010 ) [ CPF_Transient ]
	float                                              LastKeyTime;                                      		// 0x0EA8 ( 0x0004 ) [ CPF_Transient ]
	int                                                OldKey;                                           		// 0x0EAC ( 0x0004 ) [ CPF_Transient ]
	float                                              MinAdrenalineCost;                                		// 0x0EB0 ( 0x0004 ) 
	struct FString                                     ComboNameList[ 0x10 ];                            		// 0x0EB4 ( 0x00C0 ) [ CPF_NeedCtorLink ]
	class UClass*                                      ComboList[ 0x10 ];                                		// 0x0F74 ( 0x0040 ) 
	struct FPlayerRecord                               PawnSetupRecord;                                  		// 0x0FB4 ( 0x00FC ) [ CPF_NeedCtorLink ]
	float                                              LastRulesRequestTime;                             		// 0x10B0 ( 0x0004 ) 
	float                                              LastMapListRequestTime;                           		// 0x10B4 ( 0x0004 ) 
	unsigned long                                      autozoom:1;                                       		// 0x10B8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bClassicTrans:1;                                  		// 0x10B8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bHighBeaconTrajectory:1;                          		// 0x10B8 ( 0x0004 )  [0x00000004]
	unsigned long                                      bWaitingForPRI:1;                                 		// 0x10B8 ( 0x0004 )  [0x00000008]
	unsigned long                                      bWaitingForVRI:1;                                 		// 0x10B8 ( 0x0004 )  [0x00000010]
	unsigned long                                      bDebuggingVoiceChat:1;                            		// 0x10B8 ( 0x0004 )  [0x00000020]
	unsigned long                                      bAutoDemoRec:1;                                   		// 0x10B8 ( 0x0004 )  [0x00000040]
	unsigned long                                      bIsFirstTick:1;                                   		// 0x10B8 ( 0x0004 )  [0x00000080]
	unsigned long                                      bMusicStarted:1;                                  		// 0x10B8 ( 0x0004 )  [0x00000100]
	float                                              bPrevDeltaTime;                                   		// 0x10BC ( 0x0004 ) 
	int                                                nRandomSound;                                     		// 0x10C0 ( 0x0004 ) 
	unsigned char                                      bOldQuickGrenade;                                 		// 0x10C4 ( 0x0001 ) 
	unsigned char                                      bOldQuickSubGrenade;                              		// 0x10C5 ( 0x0001 ) 
	struct FString                                     ResultMenuClass;                                  		// 0x10C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                wPawnCounts;                                      		// 0x10D4 ( 0x0004 ) 
	class TArray< class AwWeapon* >                    InventoryRebuildSkipList;                         		// 0x10D8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class AController*                                 CmdTarget;                                        		// 0x10E4 ( 0x0004 ) 
	float                                              fShakeFovSpeed;                                   		// 0x10E8 ( 0x0004 ) 
	class AwFPWeaponAttachment*                        FPTest;                                           		// 0x10EC ( 0x0004 ) 
	class AActor*                                      OldViewTarget;                                    		// 0x10F0 ( 0x0004 ) 
	float                                              BombSettingDelayTime;                             		// 0x10F4 ( 0x0004 ) 
	struct FScriptDelegate                             __ProcessRule__Delegate;                          		// 0x10F8 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __ProcessMapName__Delegate;                       		// 0x1100 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      execAnimRate ( float fAnimRate );                 		// [ FUNC_Exec ] WGame.wPlayer.AnimRate
	 void                      execUseRagdoll ( bool bUse );                     		// [ FUNC_Exec ] WGame.wPlayer.UseRagdoll
	 void                      execBodyRot_BR ( float fR );                      		// [ FUNC_Exec ] WGame.wPlayer.BodyRot_BR
	 void                      execBodyRot_BL ( float fR );                      		// [ FUNC_Exec ] WGame.wPlayer.BodyRot_BL
	 void                      execBodyRot_FR ( float fR );                      		// [ FUNC_Exec ] WGame.wPlayer.BodyRot_FR
	 void                      execBodyRot_FL ( float fR );                      		// [ FUNC_Exec ] WGame.wPlayer.BodyRot_FL
	 void                      execRot_CBR ( struct FString fX, struct FString fY, struct FString fZ );		// [ FUNC_Exec ] WGame.wPlayer.Rot_CBR
	 void                      execRot_CBL ( struct FString fX, struct FString fY, struct FString fZ );		// [ FUNC_Exec ] WGame.wPlayer.Rot_CBL
	 void                      execRot_CFR ( struct FString fX, struct FString fY, struct FString fZ );		// [ FUNC_Exec ] WGame.wPlayer.Rot_CFR
	 void                      execRot_CFL ( struct FString fX, struct FString fY, struct FString fZ );		// [ FUNC_Exec ] WGame.wPlayer.Rot_CFL
	 void                      execRot_BR ( struct FString fX, struct FString fY, struct FString fZ );		// [ FUNC_Exec ] WGame.wPlayer.Rot_BR
	 void                      execRot_BL ( struct FString fX, struct FString fY, struct FString fZ );		// [ FUNC_Exec ] WGame.wPlayer.Rot_BL
	 void                      execRot_FR ( struct FString fX, struct FString fY, struct FString fZ );		// [ FUNC_Exec ] WGame.wPlayer.Rot_FR
	 void                      execRot_FL ( struct FString fX, struct FString fY, struct FString fZ );		// [ FUNC_Exec ] WGame.wPlayer.Rot_FL
	 void                      execShowRot (  );                                 		// [ FUNC_Exec ] WGame.wPlayer.ShowRot
	 void                      RenderSpectatorFPWeapon ( class UCanvas* Canvas, bool bClearedZBuffer );		// [ FUNC_Simulated ] WGame.wPlayer.RenderSpectatorFPWeapon
	 void                      ChangeMouseSenseAim ( float dt );                 		// [ FUNC_Simulated ] WGame.wPlayer.ChangeMouseSenseAim
	 void                      ChangeMouseSense ( float dt );                    		// [ FUNC_Simulated ] WGame.wPlayer.ChangeMouseSense
	 void                      execMouseSenseDownAim (  );                       		// [ FUNC_Exec ] WGame.wPlayer.MouseSenseDownAim
	 void                      execMouseSenseUpAim (  );                         		// [ FUNC_Exec ] WGame.wPlayer.MouseSenseUpAim
	 void                      execMouseSenseDown (  );                          		// [ FUNC_Exec ] WGame.wPlayer.MouseSenseDown
	 void                      execMouseSenseUp (  );                            		// [ FUNC_Exec ] WGame.wPlayer.MouseSenseUp
	 void                      RemoveSkill_Client ( int iSkillID );              		// [ FUNC_Simulated ] WGame.wPlayer.RemoveSkill_Client
	 void                      RemoveSkill ( int iSkillID );                     		//  WGame.wPlayer.RemoveSkill
	 void                      ClientReStart ( class APawn* NewPawn );           		//  WGame.wPlayer.ClientReStart
	 void                      ServerSkillUsedByWeapon ( int iWeaponID );        		//  WGame.wPlayer.ServerSkillUsedByWeapon
	 void                      SkillUsedByWeapon ( int iWeaponID );              		// [ FUNC_Simulated ] WGame.wPlayer.SkillUsedByWeapon
	 void                      ApplySkill_Client ( int iSkillID );               		//  WGame.wPlayer.ApplySkill_Client
	 void                      AddSkill_Client ( int iSkillID );                 		// [ FUNC_Simulated ] WGame.wPlayer.AddSkill_Client
	 void                      SkillInit_Server ( bool bQuickslotChange );       		//  WGame.wPlayer.SkillInit_Server
	 void                      AddSkill ( int iSkillID );                        		//  WGame.wPlayer.AddSkill
	 void                      ShowResultMenu (  );                              		// [ FUNC_Simulated ] WGame.wPlayer.ShowResultMenu
	 void                      execHIJTest00 (  );                               		// [ FUNC_Exec ] WGame.wPlayer.HIJTest00
	 void                      execPartsTest (  );                               		// [ FUNC_Exec ] WGame.wPlayer.PartsTest
	 void                      exectT ( float fRate );                           		// [ FUNC_Exec ] WGame.wPlayer.tT
	 void                      execTTT (  );                                     		// [ FUNC_Exec ] WGame.wPlayer.TTT
	 void                      execHIJ2 (  );                                    		// [ FUNC_Exec ] WGame.wPlayer.HIJ2
	 void                      execHIJ (  );                                     		// [ FUNC_Exec ] WGame.wPlayer.HIJ
	 void                      ServerWarp (  );                                  		//  WGame.wPlayer.ServerWarp
	 void                      execWarp (  );                                    		// [ FUNC_Exec ] WGame.wPlayer.Warp
	 bool                      CallUAV (  );                                     		//  WGame.wPlayer.CallUAV
	 void                      execUAV (  );                                     		// [ FUNC_Exec ] WGame.wPlayer.UAV
	 bool                      CallAirFire (  );                                 		//  WGame.wPlayer.CallAirFire
	 struct FVector            ClipAirStrikeLocation ( class TArray< struct FVector > vLocation, struct FVector* vMin, struct FVector* vMax );		//  WGame.wPlayer.ClipAirStrikeLocation
	 void                      DoAirStrikeFire ( struct FVector HitLocation );   		//  WGame.wPlayer.DoAirStrikeFire
	 bool                      IsActiveUAV (  );                                 		//  WGame.wPlayer.IsActiveUAV
	 bool                      IsActiveHelicopter (  );                          		//  WGame.wPlayer.IsActiveHelicopter
	 bool                      IsActiveAirFire (  );                             		//  WGame.wPlayer.IsActiveAirFire
	 bool                      CallHelicopter ( bool ignoreSupply );             		//  WGame.wPlayer.CallHelicopter
	 void                      execheli (  );                                    		// [ FUNC_Exec ] WGame.wPlayer.heli
	 void                      execc4 (  );                                      		// [ FUNC_Exec ] WGame.wPlayer.c4
	 void                      execart (  );                                     		// [ FUNC_Exec ] WGame.wPlayer.art
	 void                      ServerCallAirStrike ( class AController* Caller );		//  WGame.wPlayer.ServerCallAirStrike
	 struct FVector            CalcAirStrikeLocation ( float fMaxDist );         		//  WGame.wPlayer.CalcAirStrikeLocation
	 void                      ServerCallHelicopter ( class APawn* lastHeliPawn, class AController* Caller );		//  WGame.wPlayer.ServerCallHelicopter
	 void                      execCheck (  );                                   		// [ FUNC_Exec ] WGame.wPlayer.Check
	 void                      execShowBindings (  );                            		// [ FUNC_Simulated | FUNC_Exec ] WGame.wPlayer.ShowBindings
	 void                      execShowAliases (  );                             		// [ FUNC_Simulated | FUNC_Exec ] WGame.wPlayer.ShowAliases
	 void                      InitializeVoiceChat (  );                         		// [ FUNC_Simulated ] WGame.wPlayer.InitializeVoiceChat
	 void                      ClientReceiveBan ( struct FString BanInfo );      		//  WGame.wPlayer.ClientReceiveBan
	 void                      ServerRequestBanInfo ( int PlayerID );            		//  WGame.wPlayer.ServerRequestBanInfo
	 void                      ServerSpecViewGoal (  );                          		//  WGame.wPlayer.ServerSpecViewGoal
	 void                      execSpecViewGoal (  );                            		// [ FUNC_Exec ] WGame.wPlayer.SpecViewGoal
	 void                      ServerRequestPlayerInfo (  );                     		//  WGame.wPlayer.ServerRequestPlayerInfo
	 void                      execAdminMenu ( struct FString CommandLine );     		// [ FUNC_Exec ] WGame.wPlayer.AdminMenu
	 void                      eventPostNetReceive (  );                         		// [ FUNC_Simulated | FUNC_Event ] WGame.wPlayer.PostNetReceive
	 bool                      NeedNetNotify (  );                               		// [ FUNC_Simulated ] WGame.wPlayer.NeedNetNotify
	 void                      execChangeCharacter ( struct FString newCharacter );		// [ FUNC_Exec ] WGame.wPlayer.ChangeCharacter
	 void                      Possess ( class APawn* aPawn );                   		//  WGame.wPlayer.Possess
	 void                      SetPawnFemale (  );                               		//  WGame.wPlayer.SetPawnFemale
	 void                      SetPlayerEquipInfo (  );                          		//  WGame.wPlayer.SetPlayerEquipInfo
	 void                      SetPawnClass ( struct FString inClass, struct FString InCharacter );		//  WGame.wPlayer.SetPawnClass
	 void                      PawnDied ( class APawn* P );                      		//  WGame.wPlayer.PawnDied
	 struct FRotator           CameraTrack ( class APawn* Target, float DeltaTime );		//  WGame.wPlayer.CameraTrack
	 bool                      LineOfSight ( int C, class APawn* Target );       		//  WGame.wPlayer.LineOfSight
	 class APawn*              PickNextBot ( class APawn* Current );             		//  WGame.wPlayer.PickNextBot
	 struct FVector            FindFloatingCam ( class APawn* Target );          		//  WGame.wPlayer.FindFloatingCam
	 bool                      FindFixedCam ( class APawn* Target, int* newcam );		//  WGame.wPlayer.FindFixedCam
	 void                      FillCameraList (  );                              		//  WGame.wPlayer.FillCameraList
	 void                      ServerDoCombo ( class UClass* ComboClass );       		//  WGame.wPlayer.ServerDoCombo
	 void                      DoCombo ( class UClass* ComboClass );             		//  WGame.wPlayer.DoCombo
	 void                      ServerPlayWeaponNullSound ( class AwWeapon* Wpn, unsigned char Slot, bool UseStereo );		//  WGame.wPlayer.ServerPlayWeaponNullSound
	 void                      ProcessQuickGrenadeKey2 (  );                     		//  WGame.wPlayer.ProcessQuickGrenadeKey2
	 void                      ProcessQuickGrenadeKey (  );                      		//  WGame.wPlayer.ProcessQuickGrenadeKey
	 void                      ProcessSwitchDemoPack ( bool hasBomb, bool bSettingBomb, unsigned char* byUsed );		//  WGame.wPlayer.ProcessSwitchDemoPack
	 void                      ProcessSetObjective (  );                         		//  WGame.wPlayer.ProcessSetObjective
	 void                      ProcessUseKey (  );                               		//  WGame.wPlayer.ProcessUseKey
	 void                      eventPlayerTick ( float DeltaTime );              		// [ FUNC_Event ] WGame.wPlayer.PlayerTick
	 void                      NotifyTakeHit ( class APawn* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, int CollisionPart );		//  WGame.wPlayer.NotifyTakeHit
	 void                      ClientReceiveCombo ( struct FString NewCombo );   		// [ FUNC_Simulated ] WGame.wPlayer.ClientReceiveCombo
	 void                      ServerSetClassicTrans ( bool B );                 		//  WGame.wPlayer.ServerSetClassicTrans
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] WGame.wPlayer.PostNetBeginPlay
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Simulated | FUNC_Event ] WGame.wPlayer.PostBeginPlay
	 void                      execMakeItemBox ( struct FString t );             		// [ FUNC_Exec ] WGame.wPlayer.MakeItemBox
	 void                      execL33TPhrase ( int PhraseNum );                 		// [ FUNC_Exec ] WGame.wPlayer.L33TPhrase
	 float                     RateWeapon ( class AwWeapon* W );                 		// [ FUNC_Simulated ] WGame.wPlayer.RateWeapon
	 void                      PlayBeepSound (  );                               		// [ FUNC_Simulated ] WGame.wPlayer.PlayBeepSound
	 void                      StopFiring (  );                                  		//  WGame.wPlayer.StopFiring
	 void                      ClientReceiveMapName ( struct FString NewMap );   		//  WGame.wPlayer.ClientReceiveMapName
	 void                      ServerRequestMapList (  );                        		//  WGame.wPlayer.ServerRequestMapList
	 void                      ClientReceiveResultMenu ( struct FString MenuClass );		// [ FUNC_Simulated ] WGame.wPlayer.ClientReceiveResultMenu
	 void                      ClientReceiveRule ( struct FString NewRule );     		//  WGame.wPlayer.ClientReceiveRule
	 void                      ServerRequestRules (  );                          		//  WGame.wPlayer.ServerRequestRules
	 struct FString            GetPhysicsString (  );                            		// [ FUNC_Simulated ] WGame.wPlayer.GetPhysicsString
	 struct FString            GetRoleString (  );                               		// [ FUNC_Simulated ] WGame.wPlayer.GetRoleString
	 void                      DebugMessage ( struct FString DebugString, struct FName Type );		// [ FUNC_Simulated ] WGame.wPlayer.DebugMessage
	 void                      execCheckPriority (  );                           		// [ FUNC_Exec ] WGame.wPlayer.CheckPriority
	 bool                      InInventoryRebuildSkipList ( class AwWeapon* W ); 		//  WGame.wPlayer.InInventoryRebuildSkipList
	 void                      ServerRequestWeapon ( int iWeaponID );            		//  WGame.wPlayer.ServerRequestWeapon
	 void                      execSetSpeed ( float factor );                    		// [ FUNC_Exec ] WGame.wPlayer.SetSpeed
	 void                      execResetNames (  );                              		// [ FUNC_Exec ] WGame.wPlayer.ResetNames
	 void                      execsetcmd ( struct FString targetName );         		// [ FUNC_Exec ] WGame.wPlayer.setcmd
	 void                      execCmd ( struct FString P1, struct FString P2, struct FString p3, struct FString p4, struct FString p5 );		// [ FUNC_Exec ] WGame.wPlayer.Cmd
	 void                      execSetDoTraceNativeInstant ( bool val );         		// [ FUNC_Exec ] WGame.wPlayer.SetDoTraceNativeInstant
	 void                      execSetFovSpeed ( float V );                      		// [ FUNC_Exec ] WGame.wPlayer.SetFovSpeed
	 float                     GetFovSpeed (  );                                 		//  WGame.wPlayer.GetFovSpeed
	 void                      ShowPathToActor ( class AActor* A );              		// [ FUNC_Simulated ] WGame.wPlayer.ShowPathToActor
	 void                      ProcessMapName ( struct FString NewMap );         		//  WGame.wPlayer.ProcessMapName
	 void                      ProcessRule ( struct FString NewRule );           		//  WGame.wPlayer.ProcessRule
}; // Size: 0x02E8

// Class WGame.wSupplyPack
class DLL_IMPORT AwSupplyPack : public APickup
{
public:

	// UScript Functions
	 void                      eventLanded ( struct FVector HitNormal );         		// [ FUNC_Event ] WGame.wSupplyPack.Landed
}; // Size: 0x0000

// Class WGame.wHealthPack
class DLL_IMPORT AwHealthPack : public AwSupplyPack
{
public:
	int                                                HealingAmount;                                    		// 0x0424 ( 0x0004 ) 
	float                                              fStayTime;                                        		// 0x0428 ( 0x0004 ) 

	// UScript Functions
	 int                       GetHealMax ( class APawn* P );                    		//  WGame.wHealthPack.GetHealMax
	 void                      Reset (  );                                       		//  WGame.wHealthPack.Reset
	 void                      DisplayEvent ( class APawn* P );                  		//  WGame.wHealthPack.DisplayEvent
	 void                      DeleteSuppliesPositions (  );                     		//  WGame.wHealthPack.DeleteSuppliesPositions
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] WGame.wHealthPack.PostNetBeginPlay
	 void                      UpdateHUD ( class AHUD* H );                      		// [ FUNC_Simulated ] WGame.wHealthPack.UpdateHUD
}; // Size: 0x0008

// Class WGame.wUAVPack
class DLL_IMPORT AwUAVPack : public AwSupplyPack
{
public:
	float                                              fStayTime;                                        		// 0x0424 ( 0x0004 ) 
	class USound*                                      SoundPickUP;                                      		// 0x0428 ( 0x0004 ) 
	struct FString                                     StrSoundPickup;                                   		// 0x042C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strSoundStandby;                                  		// 0x0438 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                weaponID;                                         		// 0x0444 ( 0x0004 ) 

	// UScript Functions
	 bool                      CanAdUAVpack ( class APawn* P );                  		//  WGame.wUAVPack.CanAdUAVpack
	 void                      AnnouncePickup ( class APawn* Receiver );         		//  WGame.wUAVPack.AnnouncePickup
	 void                      Reset (  );                                       		//  WGame.wUAVPack.Reset
	 void                      DeleteSuppliesPositions (  );                     		//  WGame.wUAVPack.DeleteSuppliesPositions
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] WGame.wUAVPack.PostNetBeginPlay
	 void                      DisplayEvent ( class APawn* P );                  		//  WGame.wUAVPack.DisplayEvent
	 void                      UpdateHUD ( class AHUD* H );                      		// [ FUNC_Simulated ] WGame.wUAVPack.UpdateHUD
}; // Size: 0x0024

// Class WGame.wHeliPack
class DLL_IMPORT AwHeliPack : public AwSupplyPack
{
public:
	float                                              fStayTime;                                        		// 0x0424 ( 0x0004 ) 
	class USound*                                      SoundPickUP;                                      		// 0x0428 ( 0x0004 ) 
	struct FString                                     StrSoundPickup;                                   		// 0x042C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strSoundStandby;                                  		// 0x0438 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                weaponID;                                         		// 0x0444 ( 0x0004 ) 

	// UScript Functions
	 bool                      CanAddHelipack ( class APawn* P );                		//  WGame.wHeliPack.CanAddHelipack
	 void                      AnnouncePickup ( class APawn* Receiver );         		//  WGame.wHeliPack.AnnouncePickup
	 void                      Reset (  );                                       		//  WGame.wHeliPack.Reset
	 void                      DeleteSuppliesPositions (  );                     		//  WGame.wHeliPack.DeleteSuppliesPositions
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] WGame.wHeliPack.PostNetBeginPlay
	 void                      DisplayEvent ( class APawn* P );                  		//  WGame.wHeliPack.DisplayEvent
	 void                      UpdateHUD ( class AHUD* H );                      		// [ FUNC_Simulated ] WGame.wHeliPack.UpdateHUD
}; // Size: 0x0024

// Class WGame.wArtilleryPack
class DLL_IMPORT AwArtilleryPack : public AwSupplyPack
{
public:
	float                                              fStayTime;                                        		// 0x0424 ( 0x0004 ) 
	int                                                iAddWeaponID;                                     		// 0x0428 ( 0x0004 ) 
	class USound*                                      SoundPickUP;                                      		// 0x042C ( 0x0004 ) 
	struct FString                                     strSoundStandby;                                  		// 0x0430 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      CanAddArtilleryPack ( class APawn* P );           		//  WGame.wArtilleryPack.CanAddArtilleryPack
	 void                      AnnouncePickup ( class APawn* Receiver );         		//  WGame.wArtilleryPack.AnnouncePickup
	 void                      Reset (  );                                       		//  WGame.wArtilleryPack.Reset
	 void                      DeleteSuppliesPositions (  );                     		//  WGame.wArtilleryPack.DeleteSuppliesPositions
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] WGame.wArtilleryPack.PostNetBeginPlay
	 void                      UpdateHUD ( class AHUD* H );                      		// [ FUNC_Simulated ] WGame.wArtilleryPack.UpdateHUD
}; // Size: 0x0018

// Class WGame.wMedalPack
class DLL_IMPORT AwMedalPack : public AwSupplyPack
{
public:

	// UScript Functions
	 void                      Reset (  );                                       		//  WGame.wMedalPack.Reset
	 void                      DisplayEvent ( class APawn* P );                  		//  WGame.wMedalPack.DisplayEvent
	 void                      DeleteSuppliesPositions (  );                     		//  WGame.wMedalPack.DeleteSuppliesPositions
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] WGame.wMedalPack.PostNetBeginPlay
	 void                      UpdateHUD ( class AHUD* H );                      		// [ FUNC_Simulated ] WGame.wMedalPack.UpdateHUD
}; // Size: 0x0000

// Class WGame.wBotVehicleController
class DLL_IMPORT AwBotVehicleController : public AScriptedController
{
public:
	unsigned long                                      bCanFire:1;                                       		// 0x063C ( 0x0004 )  [0x00000001]
	unsigned long                                      bStrafeDir:1;                                     		// 0x063C ( 0x0004 )  [0x00000002]
	unsigned long                                      bLeadTarget:1;                                    		// 0x063C ( 0x0004 )  [0x00000004]
	unsigned long                                      bChangeDir:1;                                     		// 0x063C ( 0x0004 )  [0x00000008]
	unsigned long                                      bEnemyIsVisible:1;                                		// 0x063C ( 0x0004 )  [0x00000010]
	unsigned long                                      bMustCharge:1;                                    		// 0x063C ( 0x0004 )  [0x00000020]
	unsigned long                                      bJustLanded:1;                                    		// 0x063C ( 0x0004 )  [0x00000040]
	unsigned long                                      bRecommendFastMove:1;                             		// 0x063C ( 0x0004 )  [0x00000080]
	unsigned long                                      bHasFired:1;                                      		// 0x063C ( 0x0004 )  [0x00000100]
	unsigned long                                      bForcedDirection:1;                               		// 0x063C ( 0x0004 )  [0x00000200]
	float                                              AcquireTime;                                      		// 0x0640 ( 0x0004 ) 
	float                                              LoseEnemyCheckTime;                               		// 0x0644 ( 0x0004 ) 
	float                                              StartTacticalTime;                                		// 0x0648 ( 0x0004 ) 
	struct FVector                                     HidingSpot;                                       		// 0x064C ( 0x000C ) 
	float                                              ChallengeTime;                                    		// 0x0658 ( 0x0004 ) 
	float                                              Accuracy;                                         		// 0x065C ( 0x0004 ) 
	float                                              StrafingAbility;                                  		// 0x0660 ( 0x0004 ) 
	float                                              CombatStyle;                                      		// 0x0664 ( 0x0004 ) 
	float                                              ReactionTime;                                     		// 0x0668 ( 0x0004 ) 
	struct FString                                     GoalString;                                       		// 0x066C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoakString;                                       		// 0x0678 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                ChoosingAttackLevel;                              		// 0x0684 ( 0x0004 ) 
	float                                              ChooseAttackTime;                                 		// 0x0688 ( 0x0004 ) 
	int                                                ChooseAttackCounter;                              		// 0x068C ( 0x0004 ) 
	float                                              EnemyVisibilityTime;                              		// 0x0690 ( 0x0004 ) 
	class APawn*                                       VisibleEnemy;                                     		// 0x0694 ( 0x0004 ) 
	class APawn*                                       OldEnemy;                                         		// 0x0698 ( 0x0004 ) 
	float                                              StopStartTime;                                    		// 0x069C ( 0x0004 ) 
	float                                              LastRespawnTime;                                  		// 0x06A0 ( 0x0004 ) 
	float                                              FailedHuntTime;                                   		// 0x06A4 ( 0x0004 ) 
	class APawn*                                       FailedHuntEnemy;                                  		// 0x06A8 ( 0x0004 ) 
	int                                                NumRandomJumps;                                   		// 0x06AC ( 0x0004 ) 
	int                                                iAttackerTeam;                                    		// 0x06B0 ( 0x0004 ) 

	// UScript Functions
	 void                      GameHasEnded (  );                                		//  WGame.wBotVehicleController.GameHasEnded
	 bool                      Stopped (  );                                     		//  WGame.wBotVehicleController.Stopped
	 bool                      IsHunting (  );                                   		//  WGame.wBotVehicleController.IsHunting
	 bool                      IsStrafing (  );                                  		//  WGame.wBotVehicleController.IsStrafing
	 bool                      DefendMelee ( float dist );                       		//  WGame.wBotVehicleController.DefendMelee
	 void                      DoTacticalMove (  );                              		//  WGame.wBotVehicleController.DoTacticalMove
	 void                      DoCharge (  );                                    		//  WGame.wBotVehicleController.DoCharge
	 void                      DoStakeOut (  );                                  		//  WGame.wBotVehicleController.DoStakeOut
	 void                      Celebrate (  );                                   		//  WGame.wBotVehicleController.Celebrate
	 bool                      Formation (  );                                   		//  WGame.wBotVehicleController.Formation
	 void                      NotifyTakeHit ( class APawn* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, int CollisionPart );		//  WGame.wBotVehicleController.NotifyTakeHit
	 int                       GetTeamNum (  );                                  		// [ FUNC_Simulated ] WGame.wBotVehicleController.GetTeamNum
	 void                      GetNextPathForMoveTarget (  );                    		//  WGame.wBotVehicleController.GetNextPathForMoveTarget
	 class AwHelicopter*       GetHeli (  );                                     		//  WGame.wBotVehicleController.GetHeli
	 void                      damageAttitudeTo ( class APawn* Other, float Damage );		//  WGame.wBotVehicleController.damageAttitudeTo
	 float                     eventDesireability ( class APickup* P );          		// [ FUNC_Event ] WGame.wBotVehicleController.Desireability
	 class AActor*             FaceActor ( float StrafingModifier );             		//  WGame.wBotVehicleController.FaceActor
	 bool                      ShouldStrafeTo ( class AActor* WayPoint );        		//  WGame.wBotVehicleController.ShouldStrafeTo
	 class AActor*             FaceMoveTarget (  );                              		//  WGame.wBotVehicleController.FaceMoveTarget
	 void                      NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );		//  WGame.wBotVehicleController.NotifyKilled
	 bool                      TryToDuck ( struct FVector duckDir, bool bReversed );		//  WGame.wBotVehicleController.TryToDuck
	 void                      ReceiveWarning ( class APawn* shooter, float projSpeed, struct FVector FireDir );		//  WGame.wBotVehicleController.ReceiveWarning
	 struct FRotator           AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError );		//  WGame.wBotVehicleController.AdjustAim
	 float                     AdjustAimError ( float AimError, float TargetDist, bool bDefendMelee, bool bInstantProj, bool bLeadTargetNow );		//  WGame.wBotVehicleController.AdjustAimError
	 bool                      CheckFutureSight ( float DeltaTime );             		//  WGame.wBotVehicleController.CheckFutureSight
	 bool                      NearWall ( float walldist );                      		//  WGame.wBotVehicleController.NearWall
	 bool                      NeedToTurn ( struct FVector targ );               		//  WGame.wBotVehicleController.NeedToTurn
	 bool                      FindBestPathToward ( class AActor* A, bool bCheckedReach, bool bAllowDetour );		//  WGame.wBotVehicleController.FindBestPathToward
	 bool                      NotifyLanded ( struct FVector HitNormal );        		//  WGame.wBotVehicleController.NotifyLanded
	 void                      SetFall (  );                                     		//  WGame.wBotVehicleController.SetFall
	 bool                      eventNotifyBump ( class AActor* Other );          		// [ FUNC_Event ] WGame.wBotVehicleController.NotifyBump
	 bool                      AdjustAround ( class APawn* Other );              		//  WGame.wBotVehicleController.AdjustAround
	 void                      CancelCampFor ( class AController* C );           		//  WGame.wBotVehicleController.CancelCampFor
	 void                      Restart (  );                                     		//  WGame.wBotVehicleController.Restart
	 bool                      TestDirection ( struct FVector Dir, struct FVector* pick );		//  WGame.wBotVehicleController.TestDirection
	 bool                      FindRoamDest (  );                                		//  WGame.wBotVehicleController.FindRoamDest
	 void                      eventSoakStop ( struct FString problem );         		// [ FUNC_Event ] WGame.wBotVehicleController.SoakStop
	 void                      DoRangedAttackOn ( class AActor* A );             		//  WGame.wBotVehicleController.DoRangedAttackOn
	 bool                      EnemyVisible (  );                                		//  WGame.wBotVehicleController.EnemyVisible
	 bool                      DoWaitForLanding (  );                            		//  WGame.wBotVehicleController.DoWaitForLanding
	 void                      ExecuteWhatToDoNext (  );                         		//  WGame.wBotVehicleController.ExecuteWhatToDoNext
	 struct FString            GetEnemyName (  );                                		//  WGame.wBotVehicleController.GetEnemyName
	 struct FString            GetOldEnemyName (  );                             		//  WGame.wBotVehicleController.GetOldEnemyName
	 void                      TryToWalk (  );                                   		//  WGame.wBotVehicleController.TryToWalk
	 void                      WhatToDoNext ( unsigned char CallingByte );       		//  WGame.wBotVehicleController.WhatToDoNext
	 void                      SetPeripheralVision (  );                         		//  WGame.wBotVehicleController.SetPeripheralVision
	 void                      SetMaxDesiredSpeed (  );                          		//  WGame.wBotVehicleController.SetMaxDesiredSpeed
	 void                      ResetSkill (  );                                  		//  WGame.wBotVehicleController.ResetSkill
	 void                      InitializeSkill ( float InSkill );                		//  WGame.wBotVehicleController.InitializeSkill
	 void                      Possess ( class APawn* aPawn );                   		//  WGame.wBotVehicleController.Possess
	 void                      eventNotifyMissedJump (  );                       		// [ FUNC_Event ] WGame.wBotVehicleController.NotifyMissedJump
	 bool                      NotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume );		//  WGame.wBotVehicleController.NotifyPhysicsVolumeChange
	 bool                      StrafeFromDamage ( float Damage, class UClass* DamageType, bool bFindDest );		//  WGame.wBotVehicleController.StrafeFromDamage
	 void                      EnemyChanged ( bool bNewEnemyVisible );           		//  WGame.wBotVehicleController.EnemyChanged
	 void                      SetEnemyInfo ( bool bNewEnemyVisible );           		//  WGame.wBotVehicleController.SetEnemyInfo
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  WGame.wBotVehicleController.Trigger
	 void                      CheckIfShouldCrouch ( struct FVector StartPosition, struct FVector TargetPosition, float Probability );		//  WGame.wBotVehicleController.CheckIfShouldCrouch
	 bool                      ClearShot ( struct FVector TargetLoc, bool bImmediateFire );		//  WGame.wBotVehicleController.ClearShot
	 void                      eventSeePlayer ( class APawn* SeenPlayer );       		// [ FUNC_Event ] WGame.wBotVehicleController.SeePlayer
	 void                      HearNoise ( float Loudness, class AActor* NoiseMaker );		//  WGame.wBotVehicleController.HearNoise
	 bool                      SetEnemy ( class APawn* NewEnemy, bool bHateMonster );		//  WGame.wBotVehicleController.SetEnemy
	 void                      ChangeEnemy ( class APawn* NewEnemy, bool bCanSeeNewEnemy );		//  WGame.wBotVehicleController.ChangeEnemy
	 bool                      FindNewEnemy (  );                                		//  WGame.wBotVehicleController.FindNewEnemy
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		//  WGame.wBotVehicleController.DisplayDebug
	 void                      StopFiring (  );                                  		//  WGame.wBotVehicleController.StopFiring
	 bool                      CanAttack ( class AActor* Other );                		//  WGame.wBotVehicleController.CanAttack
	 bool                      FireWeaponAt ( class AActor* A );                 		//  WGame.wBotVehicleController.FireWeaponAt
	 void                      TimedFireWeaponAtEnemy (  );                      		//  WGame.wBotVehicleController.TimedFireWeaponAtEnemy
	 void                      WaitForMover ( class AMover* M );                 		//  WGame.wBotVehicleController.WaitForMover
	 void                      SetCombatTimer (  );                              		//  WGame.wBotVehicleController.SetCombatTimer
	 void                      FearThisSpot ( class AAvoidMarker* aSpot );       		//  WGame.wBotVehicleController.FearThisSpot
	 void                      PostBeginPlay (  );                               		//  WGame.wBotVehicleController.PostBeginPlay
}; // Size: 0x0078

// Class WGame.Combo
class DLL_IMPORT ACombo : public AInfo
{
public:
	struct FString                                     ExecMessage;                                      		// 0x041C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              AdrenalineCost;                                   		// 0x0428 ( 0x0004 ) 
	float                                              Duration;                                         		// 0x042C ( 0x0004 ) 
	class USound*                                      ActivateSound;                                    		// 0x0430 ( 0x0004 ) 
	class UMaterial*                                   Icon;                                             		// 0x0434 ( 0x0004 ) 
	class USound*                                      ComboAnnouncement;                                		// 0x0438 ( 0x0004 ) 
	struct FName                                       ComboAnnouncementName;                            		// 0x043C ( 0x0004 ) 
	int                                                keys[ 0x04 ];                                     		// 0x0440 ( 0x0010 ) 
	class UClass*                                      Species;                                          		// 0x0450 ( 0x0004 ) 

	// UScript Functions
	 void                      Tick ( float DeltaTime );                         		// [ FUNC_Simulated ] WGame.Combo.Tick
	 void                      StopEffect ( class AwPawn* P );                   		//  WGame.Combo.StopEffect
	 void                      StartEffect ( class AwPawn* P );                  		//  WGame.Combo.StartEffect
	 void                      Destroyed (  );                                   		//  WGame.Combo.Destroyed
	 void                      AdrenalineEmpty (  );                             		//  WGame.Combo.AdrenalineEmpty
	 void                      PostBeginPlay (  );                               		//  WGame.Combo.PostBeginPlay
}; // Size: 0x0038

// Class WGame.wWeaponAttachment
class DLL_IMPORT AwWeaponAttachment : public AWeaponAttachment
{
public:
	unsigned long                                      bHeavy:1;                                         		// 0x10C0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bRapidFire:1;                                     		// 0x10C0 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bAltRapidFire:1;                                  		// 0x10C0 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	class AwWeapon*                                    LitWeapon;                                        		// 0x10C4 ( 0x0004 ) 
	unsigned char                                      OldSpawnHitCount;                                 		// 0x10C8 ( 0x0001 ) 

	// UScript Functions
	 void                      Timer (  );                                       		// [ FUNC_Simulated ] WGame.wWeaponAttachment.Timer
	 void                      InitFor ( class AInventory* i );                  		//  WGame.wWeaponAttachment.InitFor
	 void                      WeaponLight (  );                                 		// [ FUNC_Simulated ] WGame.wWeaponAttachment.WeaponLight
	 struct FVector            GetTipLocation (  );                              		// [ FUNC_Simulated ] WGame.wWeaponAttachment.GetTipLocation
	 void                      PostNetBeginPlay (  );                            		// [ FUNC_Simulated ] WGame.wWeaponAttachment.PostNetBeginPlay
	 void                      eventThirdPersonEffects (  );                     		// [ FUNC_Simulated | FUNC_Event ] WGame.wWeaponAttachment.ThirdPersonEffects
	 void                      UpdateHit ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, class UMaterial* HitMaterial );		//  WGame.wWeaponAttachment.UpdateHit
	 void                      UpdatePenetrateHit ( class AActor** mHitActor, struct FVector* mHitLocation, struct FVector* mHitNormal, class UMaterial** mHitMaterial, int mLastHitIdx );		//  WGame.wWeaponAttachment.UpdatePenetrateHit
	 void                      Hide ( bool NewbHidden );                         		// [ FUNC_Simulated ] WGame.wWeaponAttachment.Hide
	 void                      GetHitInfo ( int nIndex, int i );                 		// [ FUNC_Simulated ] WGame.wWeaponAttachment.GetHitInfo
	 void                      MakeSpawnShell ( bool bRechamber );               		// [ FUNC_Simulated ] WGame.wWeaponAttachment.MakeSpawnShell
}; // Size: 0x000C

// Class WGame.wRosterEntry
class DLL_IMPORT UwRosterEntry : public URosterEntry
{
public:
	struct FPlayerRecord                               PlrProfile;                                       		// 0x008C ( 0x00FC ) [ CPF_Edit | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      InitBot ( class ABot* B );                        		//  WGame.wRosterEntry.InitBot
	 void                      PrecacheRosterFor ( class AUnrealTeamInfo* t );   		//  WGame.wRosterEntry.PrecacheRosterFor
	 class UwRosterEntry*      CreateRosterEntryCharacter ( struct FString CharName );		//  WGame.wRosterEntry.CreateRosterEntryCharacter
	 class UwRosterEntry*      CreateRosterEntry ( int prIdx );                  		//  WGame.wRosterEntry.CreateRosterEntry
}; // Size: 0x00FC

// Class WGame.SPECIES_Human
class DLL_IMPORT USPECIES_Human : public USpeciesType
{
public:
}; // Size: 0x0000

// Class WGame.SPECIES_Merc
class DLL_IMPORT USPECIES_Merc : public USPECIES_Human
{
public:

	// UScript Functions
	 struct FString            GetRagSkelName ( struct FString MeshName );       		//  WGame.SPECIES_Merc.GetRagSkelName
}; // Size: 0x0000

// Class WGame.wMercMaleSoundGroup
class DLL_IMPORT UwMercMaleSoundGroup : public UwPawnSoundGroup
{
public:
}; // Size: 0x0000

// Class WGame.wBot
class DLL_IMPORT AwBot : public ABot
{
public:
	struct FPlayerRecord                               PawnSetupRecord;                                  		// 0x07CC ( 0x00FC ) [ CPF_Edit | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      Possess ( class APawn* aPawn );                   		//  WGame.wBot.Possess
	 void                      SetPawnClass ( struct FString inClass, struct FString InCharacter );		//  WGame.wBot.SetPawnClass
}; // Size: 0x00FC

// Class WGame.wBotVehicle
class DLL_IMPORT AwBotVehicle : public AwPawn
{
public:
	unsigned long                                      bMeleeFighter:1;                                  		// 0x1604 ( 0x0004 )  [0x00000001]
	unsigned long                                      bShotAnim:1;                                      		// 0x1604 ( 0x0004 )  [0x00000002]
	unsigned long                                      bCanDodge:1;                                      		// 0x1604 ( 0x0004 )  [0x00000004]
	unsigned long                                      bVictoryNext:1;                                   		// 0x1604 ( 0x0004 )  [0x00000008]
	unsigned long                                      bTryToWalk:1;                                     		// 0x1604 ( 0x0004 )  [0x00000010]
	unsigned long                                      bBoss:1;                                          		// 0x1604 ( 0x0004 )  [0x00000020]
	unsigned long                                      bAlwaysStrafe:1;                                  		// 0x1604 ( 0x0004 )  [0x00000040]
	float                                              DodgeSkillAdjust;                                 		// 0x1608 ( 0x0004 ) 
	class USound*                                      HitSound[ 0x04 ];                                 		// 0x160C ( 0x0010 ) 
	class USound*                                      DeathSound[ 0x04 ];                               		// 0x161C ( 0x0010 ) 
	class USound*                                      ChallengeSound[ 0x04 ];                           		// 0x162C ( 0x0010 ) 
	class USound*                                      FireSound;                                        		// 0x163C ( 0x0004 ) 
	class UClass*                                      AmmunitionClass;                                  		// 0x1640 ( 0x0004 ) 
	class AwAmmunition*                                MyAmmo;                                           		// 0x1644 ( 0x0004 ) 
	class UClass*                                      ProjectileClass;                                  		// 0x1648 ( 0x0004 ) 
	class AwProjectile*                                MyProj;                                           		// 0x164C ( 0x0004 ) 
	int                                                ScoringValue;                                     		// 0x1650 ( 0x0004 ) 
	struct FFireProperties                             SavedFireProperties;                              		// 0x1654 ( 0x0014 ) 
	class USound*                                      StaySound;                                        		// 0x1668 ( 0x0004 ) 
	class USound*                                      MoveSound;                                        		// 0x166C ( 0x0004 ) 
	class USound*                                      MoveDamagedSound;                                 		// 0x1670 ( 0x0004 ) 
	class USound*                                      SpindownSound;                                    		// 0x1674 ( 0x0004 ) 
	class USound*                                      NullSound;                                        		// 0x1678 ( 0x0004 ) 
	unsigned long                                      bTestCheck:1;                                     		// 0x167C ( 0x0004 )  [0x00000001]
	float                                              CONFIG_SPINDOWN_SOUND_VOLUME;                     		// 0x1680 ( 0x0004 ) 
	float                                              CONFIG_SPINDOWN_SOUND_RADIUS;                     		// 0x1684 ( 0x0004 ) 

	// UScript Functions
	 void                      StartDeRes (  );                                  		// [ FUNC_Simulated ] WGame.wBotVehicle.StartDeRes
	 void                      SetCaller ( class AController* C );               		//  WGame.wBotVehicle.SetCaller
	 void                      CreateGib ( struct FName BoneName, class UClass* DamageType, struct FRotator R );		//  WGame.wBotVehicle.CreateGib
	 void                      eventSetAnimAction ( struct FName NewAction );    		// [ FUNC_Simulated | FUNC_Event ] WGame.wBotVehicle.SetAnimAction
	 void                      PlayVictoryAnimation (  );                        		//  WGame.wBotVehicle.PlayVictoryAnimation
	 bool                      MeleeDamageTarget ( int hitdamage, struct FVector pushdir );		//  WGame.wBotVehicle.MeleeDamageTarget
	 void                      PlayDyingSound (  );                              		//  WGame.wBotVehicle.PlayDyingSound
	 void                      PlayDying ( class UClass* DamageType, struct FVector HitLoc, int CollisionPart );		// [ FUNC_Simulated ] WGame.wBotVehicle.PlayDying
	 void                      PlayTakeHit ( struct FVector HitLocation, int Damage, class UClass* DamageType );		//  WGame.wBotVehicle.PlayTakeHit
	 bool                      IsPlayerPawn (  );                                		//  WGame.wBotVehicle.IsPlayerPawn
	 void                      SetMovementPhysics (  );                          		//  WGame.wBotVehicle.SetMovementPhysics
	 void                      AnimEnd ( int Channel );                          		// [ FUNC_Simulated ] WGame.wBotVehicle.AnimEnd
	 void                      PlayVictory (  );                                 		//  WGame.wBotVehicle.PlayVictory
	 void                      Destroyed (  );                                   		//  WGame.wBotVehicle.Destroyed
	 void                      PlayChallengeSound (  );                          		//  WGame.wBotVehicle.PlayChallengeSound
	 void                      AssignInitialPose (  );                           		// [ FUNC_Simulated ] WGame.wBotVehicle.AssignInitialPose
	 bool                      SameSpeciesAs ( class APawn* P );                 		//  WGame.wBotVehicle.SameSpeciesAs
	 void                      LandThump (  );                                   		//  WGame.wBotVehicle.LandThump
	 void                      SpawnGiblet ( class UClass* GibClass, struct FVector Location, struct FRotator Rotation, float GibPerterbation, struct FVector GibVelocity );		// [ FUNC_Simulated ] WGame.wBotVehicle.SpawnGiblet
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] WGame.wBotVehicle.PostBeginPlay
	 void                      FireProjectile (  );                              		//  WGame.wBotVehicle.FireProjectile
	 struct FVector            GetFireStart ( struct FVector X, struct FVector Y, struct FVector Z );		//  WGame.wBotVehicle.GetFireStart
	 float                     RangedAttackTime (  );                            		//  WGame.wBotVehicle.RangedAttackTime
	 bool                      HasRangedAttack (  );                             		//  WGame.wBotVehicle.HasRangedAttack
	 bool                      PreferMelee (  );                                 		//  WGame.wBotVehicle.PreferMelee
	 void                      Fire ( float f );                                 		//  WGame.wBotVehicle.Fire
	 bool                      IsHeadShot ( struct FVector loc, struct FVector ray, float AdditionalScale );		//  WGame.wBotVehicle.IsHeadShot
	 bool                      ForceDefaultCharacter (  );                       		// [ FUNC_Simulated ] WGame.wBotVehicle.ForceDefaultCharacter
	 void                      TurnOff (  );                                     		// [ FUNC_Simulated ] WGame.wBotVehicle.TurnOff
	 bool                      RecommendSplashDamage (  );                       		//  WGame.wBotVehicle.RecommendSplashDamage
	 float                     GetDamageRadius (  );                             		//  WGame.wBotVehicle.GetDamageRadius
	 bool                      SplashDamage (  );                                		//  WGame.wBotVehicle.SplashDamage
	 void                      StopFiring (  );                                  		//  WGame.wBotVehicle.StopFiring
	 bool                      CanAttack ( class AActor* A );                    		//  WGame.wBotVehicle.CanAttack
	 void                      RangedAttack ( class AActor* A );                 		//  WGame.wBotVehicle.RangedAttack
}; // Size: 0x0084

// Class WGame.wHelicopter
class DLL_IMPORT AwHelicopter : public AwBotVehicle
{
public:
	int                                                BehaviorState;                                    		// 0x1688 ( 0x0004 ) [ CPF_Net ]
	int                                                iCurrentPoint;                                    		// 0x168C ( 0x0004 ) [ CPF_Net ]
	float                                              HelicopterDestinationFactor;                      		// 0x1690 ( 0x0004 ) 
	float                                              CumulatedDyingTime;                               		// 0x1694 ( 0x0004 ) 
	float                                              CONFIG_DyingLifeSpan;                             		// 0x1698 ( 0x0004 ) 
	float                                              CONFIG_DyingRotationFactor;                       		// 0x169C ( 0x0004 ) 
	float                                              CONFIG_DyingRotationRate;                         		// 0x16A0 ( 0x0004 ) 
	float                                              CONFIG_DyingEffectInterval;                       		// 0x16A4 ( 0x0004 ) 
	float                                              CONFIG_DyingImpluse;                              		// 0x16A8 ( 0x0004 ) 
	float                                              CONFIG_DyingImpluseFactor;                        		// 0x16AC ( 0x0004 ) 
	class USound*                                      CONFIG_FinalExplosionSoundExplosion;              		// 0x16B0 ( 0x0004 ) 
	float                                              CONFIG_FinalExlosionSoundRadius;                  		// 0x16B4 ( 0x0004 ) 
	unsigned long                                      bBombExplosion:1;                                 		// 0x16B8 ( 0x0004 )  [0x00000001]
	struct FSpriteWidget                               MinimapIconAlly;                                  		// 0x16BC ( 0x0040 ) 
	struct FSpriteWidget                               MinimapIconEnemy;                                 		// 0x16FC ( 0x0040 ) 

	// UScript Functions
	 bool                      Call ( class ALevelInfo* Level, class AwHelicopter* lastHeli, class AController* Caller );		//  WGame.wHelicopter.Call
	 class ANavigationPoint*   GetFlyingPathNode ( class ALevelInfo* Level, int idx, int RegenLoc );		//  WGame.wHelicopter.GetFlyingPathNode
	 void                      TossWeapon ( struct FVector TossVel );            		//  WGame.wHelicopter.TossWeapon
	 class UClass*             GetBloodHitClass ( bool bHeadShot );              		// [ FUNC_Simulated ] WGame.wHelicopter.GetBloodHitClass
	 bool                      deleOnReachedDestination ( struct FVector Dir, class AActor* GoalActor );		//  WGame.wHelicopter.deleOnReachedDestination
	 struct FName              GetWeaponBoneFor ( class AInventory* i );         		//  WGame.wHelicopter.GetWeaponBoneFor
	 void                      PoundDamageTarget (  );                           		//  WGame.wHelicopter.PoundDamageTarget
	 void                      PunchDamageTarget (  );                           		//  WGame.wHelicopter.PunchDamageTarget
	 struct FVector            GetFireStart ( struct FVector X, struct FVector Y, struct FVector Z );		//  WGame.wHelicopter.GetFireStart
	 void                      SpawnBelch (  );                                  		//  WGame.wHelicopter.SpawnBelch
	 void                      PlayVictory (  );                                 		//  WGame.wHelicopter.PlayVictory
	 void                      PlayDirectionalHit ( struct FVector HitLoc, bool bUseHitStun, bool bGoreChange );		// [ FUNC_Simulated ] WGame.wHelicopter.PlayDirectionalHit
	 void                      PlayDirectionalDeath ( struct FVector HitLoc );   		// [ FUNC_Simulated ] WGame.wHelicopter.PlayDirectionalDeath
	 void                      Falling (  );                                     		//  WGame.wHelicopter.Falling
	 void                      SetMovementPhysics (  );                          		//  WGame.wHelicopter.SetMovementPhysics
	 bool                      Dodge ( unsigned char DoubleClickMove );          		//  WGame.wHelicopter.Dodge
	 void                      RangedAttack ( class AActor* A );                 		//  WGame.wHelicopter.RangedAttack
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Simulated | FUNC_Event ] WGame.wHelicopter.PostBeginPlay
	 void                      ClientPlayStaySound (  );                         		// [ FUNC_Simulated ] WGame.wHelicopter.ClientPlayStaySound
	 void                      ClientPlayMoveSound (  );                         		// [ FUNC_Simulated ] WGame.wHelicopter.ClientPlayMoveSound
	 void                      ClientStopAllHeliSound (  );                      		// [ FUNC_Simulated ] WGame.wHelicopter.ClientStopAllHeliSound
	 void                      StopAllHeliSound (  );                            		// [ FUNC_Simulated ] WGame.wHelicopter.StopAllHeliSound
	 void                      eventDestroyed (  );                              		// [ FUNC_Event ] WGame.wHelicopter.Destroyed
	 void                      RemoveLevelHelicopter (  );                       		// [ FUNC_Simulated ] WGame.wHelicopter.RemoveLevelHelicopter
}; // Size: 0x00B4

// Class WGame.AttractCamera
class DLL_IMPORT AAttractCamera : public AKeypoint
{
public:
	float                                              ViewAngle;                                        		// 0x03C8 ( 0x0004 ) [ CPF_Edit ]
	float                                              MinZoomDist;                                      		// 0x03CC ( 0x0004 ) [ CPF_Edit ]
	float                                              MaxZoomDist;                                      		// 0x03D0 ( 0x0004 ) [ CPF_Edit ]
}; // Size: 0x000C

// Class WGame.ComboMessage
class DLL_IMPORT AComboMessage : public ALocalMessage
{
public:

	// UScript Functions
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] WGame.ComboMessage.ClientReceive
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  WGame.ComboMessage.GetString
}; // Size: 0x0000

// Class WGame.wPlayerReplicationInfo
class DLL_IMPORT AwPlayerReplicationInfo : public ATeamPlayerReplicationInfo
{
public:
	struct FPlayerRecord                               Rec;                                              		// 0x0608 ( 0x00FC ) [ CPF_NeedCtorLink ]
	unsigned long                                      bForceNoPlayerLights:1;                           		// 0x0704 ( 0x0004 )  [0x00000001]
	unsigned long                                      bNoTeamSkins:1;                                   		// 0x0704 ( 0x0004 )  [0x00000002]

	// UScript Functions
	 class UMaterial*          GetPortrait (  );                                 		// [ FUNC_Simulated ] WGame.wPlayerReplicationInfo.GetPortrait
	 void                      eventUpdateCharacter (  );                        		// [ FUNC_Simulated | FUNC_Event ] WGame.wPlayerReplicationInfo.UpdateCharacter
	 void                      SetCharacterName ( struct FString S );            		// [ FUNC_Simulated ] WGame.wPlayerReplicationInfo.SetCharacterName
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] WGame.wPlayerReplicationInfo.UpdatePrecacheMaterials
}; // Size: 0x0100

// Class WGame.Goal
class DLL_IMPORT UGoal : public UObject
{
public:
	class AwAIBotBase*                                 Owner;                                            		// 0x002C ( 0x0004 ) 
	struct FString                                     GoalName;                                         		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UGoal* >                       Subgoals;                                         		// 0x003C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      GoalStatus;                                       		// 0x0048 ( 0x0001 ) 
	struct FString                                     MessageNotifyKilled;                              		// 0x004C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MessageMemoryVisibleChanged;                      		// 0x0058 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MessageFlashed;                                   		// 0x0064 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MessageBePeaceful;                                		// 0x0070 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MessageNotifyDied;                                		// 0x007C ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      SetFocus (  );                                    		//  WGame.Goal.SetFocus
	 bool                      SetFocusValue (  );                               		//  WGame.Goal.SetFocusValue
	 bool                      SetFocusValueToTarget (  );                       		//  WGame.Goal.SetFocusValueToTarget
	 struct FString            ToString (  );                                    		//  WGame.Goal.ToString
	 void                      DisplayDebug ( class UCanvas* C, int Level, float* YL, float* YPos );		//  WGame.Goal.DisplayDebug
	 void                      HandleMessage ( struct FString Msg );             		//  WGame.Goal.HandleMessage
	 void                      End (  );                                         		//  WGame.Goal.End
	 unsigned char             ProcessSubGoals ( float dt );                     		//  WGame.Goal.ProcessSubGoals
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal.ActualWork
	 unsigned char             Process ( float dt );                             		//  WGame.Goal.Process
	 void                      StartIfNotStarted (  );                           		//  WGame.Goal.StartIfNotStarted
	 void                      Start (  );                                       		//  WGame.Goal.Start
	 void                      ClearSubgoals ( bool free );                      		//  WGame.Goal.ClearSubgoals
	 void                      AddSubgoal ( class UGoal* inGoal );               		//  WGame.Goal.AddSubgoal
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.Goal.NotifyDestroyed
	 void                      ClearReferences (  );                             		//  WGame.Goal.ClearReferences
	 void                      InitBase ( class AwAIBotBase* inOwner );          		//  WGame.Goal.InitBase
}; // Size: 0x005C

// Class WGame.Goal_PlanAndExec
class DLL_IMPORT UGoal_PlanAndExec : public UGoal
{
public:
	class TArray< class UwPurpose* >                   purposes;                                         		// 0x0088 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UwPurpose*                                   CurrentPurpose;                                   		// 0x0094 ( 0x0004 ) 
	class UwActionPlanner*                             Planner;                                          		// 0x0098 ( 0x0004 ) 
	unsigned long                                      NeedReplaning:1;                                  		// 0x009C ( 0x0004 )  [0x00000001]
	float                                              CurrentPlanScore;                                 		// 0x00A0 ( 0x0004 ) 
	int                                                CheckReplanCount;                                 		// 0x00A4 ( 0x0004 ) 
	struct FString                                     targetName;                                       		// 0x00A8 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_PlanAndExec.ToString
	 void                      HandleMessage ( struct FString Msg );             		//  WGame.Goal_PlanAndExec.HandleMessage
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_PlanAndExec.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_PlanAndExec.Start
	 void                      LogFlag (  );                                     		//  WGame.Goal_PlanAndExec.LogFlag
	 void                      LogPlan ( int tries, float planScore, class UwActionContainer** Plan );		//  WGame.Goal_PlanAndExec.LogPlan
	 void                      LookForBetterPlan ( int tries );                  		//  WGame.Goal_PlanAndExec.LookForBetterPlan
	 void                      Replan (  );                                      		//  WGame.Goal_PlanAndExec.Replan
	 void                      DecidePurposeToActivate (  );                     		//  WGame.Goal_PlanAndExec.DecidePurposeToActivate
	 void                      InitPurposes (  );                                		//  WGame.Goal_PlanAndExec.InitPurposes
	 void                      ClearReferences (  );                             		//  WGame.Goal_PlanAndExec.ClearReferences
	 class UGoal_PlanAndExec*  Init ( class AwAIBotBase* inOwner, class UwActionPlanner* inPlaner );		//  WGame.Goal_PlanAndExec.Init
}; // Size: 0x002C

// Class WGame.Goal_Fire
class DLL_IMPORT UGoal_Fire : public UGoal
{
public:
	class AActor*                                      Target;                                           		// 0x0088 ( 0x0004 ) 
	float                                              FireCheckInterval;                                		// 0x008C ( 0x0004 ) 
	float                                              elapsed;                                          		// 0x0090 ( 0x0004 ) 
	unsigned long                                      StartStopSwitch:1;                                		// 0x0094 ( 0x0004 )  [0x00000001]
	float                                              LastAmmo;                                         		// 0x0098 ( 0x0004 ) 
	float                                              LastAmmoMax;                                      		// 0x009C ( 0x0004 ) 
	float                                              Ammo;                                             		// 0x00A0 ( 0x0004 ) 
	float                                              StartAmmo;                                        		// 0x00A4 ( 0x0004 ) 
	float                                              StartAmmoMax;                                     		// 0x00A8 ( 0x0004 ) 
	float                                              CurrentAmmo;                                      		// 0x00AC ( 0x0004 ) 
	float                                              CurrentAmmoMax;                                   		// 0x00B0 ( 0x0004 ) 
	int                                                FireCount;                                        		// 0x00B4 ( 0x0004 ) 
	unsigned long                                      DoAim:1;                                          		// 0x00B8 ( 0x0004 )  [0x00000001]
	unsigned long                                      AimAvailable:1;                                   		// 0x00B8 ( 0x0004 )  [0x00000002]
	unsigned long                                      WeaponFireModeSingle:1;                           		// 0x00B8 ( 0x0004 )  [0x00000004]
	float                                              FailTime;                                         		// 0x00BC ( 0x0004 ) 
	struct FString                                     StartWeaponName;                                  		// 0x00C0 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      StartedWithTarget:1;                              		// 0x00CC ( 0x0004 )  [0x00000001]

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_Fire.ToString
	 void                      End (  );                                         		//  WGame.Goal_Fire.End
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_Fire.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_Fire.Start
	 bool                      SetFocusValue (  );                               		//  WGame.Goal_Fire.SetFocusValue
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.Goal_Fire.NotifyDestroyed
	 void                      ClearReferences (  );                             		//  WGame.Goal_Fire.ClearReferences
	 class UGoal_Fire*         Init ( class AwAIBotBase* inOwner, class AActor* inTarget, bool inDoAim, int inFireCount );		//  WGame.Goal_Fire.Init
}; // Size: 0x0048

// Class WGame.Goal_MovePathToward
class DLL_IMPORT UGoal_MovePathToward : public UGoal
{
public:
	class AActor*                                      Destination;                                      		// 0x0088 ( 0x0004 ) 
	int                                                RouteCacheIdx;                                    		// 0x008C ( 0x0004 ) 
	float                                              ReachRadius;                                      		// 0x0090 ( 0x0004 ) 
	unsigned long                                      Sprint:1;                                         		// 0x0094 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.Goal_MovePathToward.NotifyDestroyed
	 struct FString            ToString (  );                                    		//  WGame.Goal_MovePathToward.ToString
	 bool                      AddGoalMoveToward ( int stackLevel );             		//  WGame.Goal_MovePathToward.AddGoalMoveToward
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_MovePathToward.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_MovePathToward.Start
	 void                      ClearReferences (  );                             		//  WGame.Goal_MovePathToward.ClearReferences
	 class UGoal_MovePathToward* Init ( class AwAIBotBase* inOwner, class AActor* inDestination, float inReachRadius );		//  WGame.Goal_MovePathToward.Init
}; // Size: 0x0010

// Class WGame.Goal_Roam
class DLL_IMPORT UGoal_Roam : public UGoal
{
public:

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_Roam.ToString
	 void                      AddGoalMovePathToward (  );                       		//  WGame.Goal_Roam.AddGoalMovePathToward
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_Roam.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_Roam.Start
	 class UGoal_Roam*         Init ( class AwAIBotBase* inOwner );              		//  WGame.Goal_Roam.Init
}; // Size: 0x0000

// Class WGame.Goal_Shoot
class DLL_IMPORT UGoal_Shoot : public UGoal
{
public:
	class AActor*                                      Target;                                           		// 0x0088 ( 0x0004 ) 
	float                                              FireCheckInterval;                                		// 0x008C ( 0x0004 ) 
	float                                              elapsed;                                          		// 0x0090 ( 0x0004 ) 
	unsigned long                                      StartStopSwitch:1;                                		// 0x0094 ( 0x0004 )  [0x00000001]
	float                                              LastAmmo;                                         		// 0x0098 ( 0x0004 ) 
	float                                              LastAmmoMax;                                      		// 0x009C ( 0x0004 ) 
	float                                              Ammo;                                             		// 0x00A0 ( 0x0004 ) 
	unsigned long                                      DoAim:1;                                          		// 0x00A4 ( 0x0004 )  [0x00000001]
	unsigned long                                      AimAvailable:1;                                   		// 0x00A4 ( 0x0004 )  [0x00000002]
	unsigned long                                      WeaponFireModeSingle:1;                           		// 0x00A4 ( 0x0004 )  [0x00000004]

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_Shoot.ToString
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_Shoot.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_Shoot.Start
	 void                      ClearReferences (  );                             		//  WGame.Goal_Shoot.ClearReferences
	 class UGoal_Shoot*        Init ( class AwAIBotBase* inOwner, class AActor* inTarget, bool inDoAim );		//  WGame.Goal_Shoot.Init
}; // Size: 0x0020

// Class WGame.Goal_Test
class DLL_IMPORT UGoal_Test : public UGoal
{
public:

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_Test.ToString
	 void                      AddGoal (  );                                     		//  WGame.Goal_Test.AddGoal
	 class ANavigationPoint*   GetReachableRandomTarget (  );                    		//  WGame.Goal_Test.GetReachableRandomTarget
	 void                      End (  );                                         		//  WGame.Goal_Test.End
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_Test.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_Test.Start
	 class UGoal_Test*         Init ( class AwAIBotBase* inOwner );              		//  WGame.Goal_Test.Init
}; // Size: 0x0000

// Class WGame.wPurpose
class DLL_IMPORT UwPurpose : public UObject
{
public:
	class AwAIBotBase*                                 Owner;                                            		// 0x002C ( 0x0004 ) 
	struct FString                                     PlanName;                                         		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              ActionMinTime;                                    		// 0x003C ( 0x0004 ) 
	float                                              ActionMaxTime;                                    		// 0x0040 ( 0x0004 ) 
	float                                              PlanLength;                                       		// 0x0044 ( 0x0004 ) 
	float                                              _TEMP_SCORE;                                      		// 0x0048 ( 0x0004 ) 
	float                                              _TEMP_COUNT;                                      		// 0x004C ( 0x0004 ) 

	// UScript Functions
	 float                     GetActivationScore (  );                          		//  WGame.wPurpose.GetActivationScore
	 float                     Evaluate ( class UwState** S );                   		//  WGame.wPurpose.Evaluate
	 class UwPurpose*          Create ( class AwAIBotBase* inOwner );            		//  WGame.wPurpose.Create
}; // Size: 0x0024

// Class WGame.wPurposeExplore
class DLL_IMPORT UwPurposeExplore : public UwPurpose
{
public:

	// UScript Functions
	 float                     GetActivationScore (  );                          		//  WGame.wPurposeExplore.GetActivationScore
	 float                     Evaluate ( class UwState** S );                   		//  WGame.wPurposeExplore.Evaluate
}; // Size: 0x0000

// Class WGame.wActionContainer
class DLL_IMPORT UwActionContainer : public UObject
{
public:
	class AwAIBotBase*                                 Owner;                                            		// 0x002C ( 0x0004 ) 
	class UwAction*                                    Action;                                           		// 0x0030 ( 0x0004 ) 
	class TArray< class UwActionContainer* >           SubActionContainers;                              		// 0x0034 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                SubActionContainersLength;                        		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.wActionContainer.ToString
	 void                      FreeActionContainers (  );                        		//  WGame.wActionContainer.FreeActionContainers
	 void                      FreeActions (  );                                 		//  WGame.wActionContainer.FreeActions
	 void                      FreeAll (  );                                     		//  WGame.wActionContainer.FreeAll
	 void                      WriteFutureState ( class UwFutureState** fs );    		//  WGame.wActionContainer.WriteFutureState
	 bool                      Includes ( class UwAction* testAction );          		//  WGame.wActionContainer.Includes
	 class UwActionContainer*  AddSubContainer ( class UwAction* inAction );     		//  WGame.wActionContainer.AddSubContainer
	 void                      ClearReferences (  );                             		//  WGame.wActionContainer.ClearReferences
	 class UwActionContainer*  Init ( class AwAIBotBase* inOwner );              		//  WGame.wActionContainer.Init
}; // Size: 0x0018

// Class WGame.wAIPawn
class DLL_IMPORT AwAIPawn : public AwPawn
{
public:

	// UScript Functions
	 void                      CheckEntryVehicle (  );                           		//  WGame.wAIPawn.CheckEntryVehicle
	 void                      eventTick ( float dt );                           		// [ FUNC_Simulated | FUNC_Event ] WGame.wAIPawn.Tick
	 void                      UpdateCannotFindPath (  );                        		//  WGame.wAIPawn.UpdateCannotFindPath
	 void                      LogCannotFindPath ( class AActor* Dest );         		//  WGame.wAIPawn.LogCannotFindPath
	 void                      SetCannotFIndPath ( class AActor* Dest );         		//  WGame.wAIPawn.SetCannotFIndPath
	 void                      AddDefaultInventory ( bool bQuickslotChange );    		//  WGame.wAIPawn.AddDefaultInventory
}; // Size: 0x0000

// Class WGame.wActionPlanner
class DLL_IMPORT UwActionPlanner : public UObject
{
public:
	class AwAIBotBase*                                 Owner;                                            		// 0x002C ( 0x0004 ) 
	unsigned long                                      Peaceful:1;                                       		// 0x0030 ( 0x0004 )  [0x00000001]
	int                                                MaxActionLayers;                                  		// 0x0034 ( 0x0004 ) 
	class UwState*                                     WorkingState;                                     		// 0x0038 ( 0x0004 ) 
	class UwState*                                     WorkingState2;                                    		// 0x003C ( 0x0004 ) 
	class UwNPCActions*                                npcActions;                                       		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 class UwActionContainer*  Plan ( class UwPurpose* purpose, int tries, float* bestPlanScore );		//  WGame.wActionPlanner.Plan
	 void                      SubPlan ( int Layer, class UwPurpose* purpose, float parentActionTime, class UwActionContainer** acon, class UwState** S, class TArray< class UwActionLayer* >* Actions );		//  WGame.wActionPlanner.SubPlan
	 void                      GetActionCandidatesByLayer ( class TArray< class UwAction* >* rawActions, class TArray< class UwActionLayer* >* actionsByLayer );		//  WGame.wActionPlanner.GetActionCandidatesByLayer
	 void                      GetActionCandidates ( class TArray< class UwAction* >* Actions );		//  WGame.wActionPlanner.GetActionCandidates
	 void                      GetActionCandidates_Pick ( class TArray< class UwAction* >* Actions );		//  WGame.wActionPlanner.GetActionCandidates_Pick
	 void                      GetActionCandidates_SwitchWeapon ( class TArray< class UwAction* >* Actions );		//  WGame.wActionPlanner.GetActionCandidates_SwitchWeapon
	 void                      ClearReferences (  );                             		//  WGame.wActionPlanner.ClearReferences
	 class UwActionPlanner*    Create ( class AwAIBotBase* inOwner, class UwNPCActions* Actions );		//  WGame.wActionPlanner.Create
}; // Size: 0x0018

// Class WGame.wFutureState
class DLL_IMPORT UwFutureState : public UObject
{
public:
	class AwFlagObjectiveBase*                         FlagDest;                                         		// 0x002C ( 0x0004 ) 
	class AwFlagObjectiveBase*                         FlagCapturing;                                    		// 0x0030 ( 0x0004 ) 

	// UScript Functions
	 void                      Init (  );                                        		//  WGame.wFutureState.Init
	 class UwFutureState*      Create (  );                                      		//  WGame.wFutureState.Create
}; // Size: 0x0008

// Class WGame.TargetingSystem
class DLL_IMPORT UTargetingSystem : public UObject
{
public:
	class AwAIBotBase*                                 Owner;                                            		// 0x002C ( 0x0004 ) 
	class ALevelInfo*                                  Level;                                            		// 0x0030 ( 0x0004 ) 
	class UDAE_Multiple*                               Evaluator;                                        		// 0x0034 ( 0x0004 ) 
	class UMemoryItem*                                 Target;                                           		// 0x0038 ( 0x0004 ) 

	// UScript Functions
	 void                      ClearReferences (  );                             		//  WGame.TargetingSystem.ClearReferences
	 void                      DisplayDebug ( class UCanvas* C, float* YL, float* YPos );		//  WGame.TargetingSystem.DisplayDebug
	 void                      Update ( float dt );                              		//  WGame.TargetingSystem.Update
	 class UMemoryItem*        GetTarget (  );                                   		//  WGame.TargetingSystem.GetTarget
	 void                      InitEvaluator (  );                               		//  WGame.TargetingSystem.InitEvaluator
	 class UTargetingSystem*   Create ( class AwAIBotBase* inOwner );            		//  WGame.TargetingSystem.Create
}; // Size: 0x0010

// Class WGame.wPlanMaster
class DLL_IMPORT UwPlanMaster : public UObject
{
public:
	int                                                MaxItr;                                           		// 0x002C ( 0x0004 ) 
	int                                                ItrPerFrame;                                      		// 0x0030 ( 0x0004 ) 
	int                                                CurItr;                                           		// 0x0034 ( 0x0004 ) 
	int                                                Planner_MinItr;                                   		// 0x0038 ( 0x0004 ) 
	int                                                Planner_MaxItr;                                   		// 0x003C ( 0x0004 ) 
	int                                                Planner_UpdateItr;                                		// 0x0040 ( 0x0004 ) 
	class AwAILevel*                                   AILevel;                                          		// 0x0044 ( 0x0004 ) 

	// UScript Functions
	 int                       _request ( int i );                               		//  WGame.wPlanMaster._request
	 int                       RequestItr (  );                                  		//  WGame.wPlanMaster.RequestItr
	 int                       RequestUpdateItr (  );                            		//  WGame.wPlanMaster.RequestUpdateItr
	 void                      Update ( float dt );                              		//  WGame.wPlanMaster.Update
	 class UwPlanMaster*       Create ( class AwAILevel* inLevel );              		//  WGame.wPlanMaster.Create
}; // Size: 0x001C

// Class WGame.wAction
class DLL_IMPORT UwAction : public UObject
{
public:
	int                                                Layer;                                            		// 0x002C ( 0x0004 ) 
	float                                              MinTimeSegment;                                   		// 0x0030 ( 0x0004 ) 
	struct FString                                     ActionName;                                       		// 0x0034 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      ClearReferences (  );                             		//  WGame.wAction.ClearReferences
	 void                      WriteFutureState ( class UwFutureState** fs );    		//  WGame.wAction.WriteFutureState
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction.CheckRequirement
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction.GetGoal
}; // Size: 0x0014

// Class WGame.wHelicopterController
class DLL_IMPORT AwHelicopterController : public AScriptedController
{
public:
	class AActor*                                      CurrentPathNode;                                  		// 0x063C ( 0x0004 ) 
	unsigned long                                      bFirstFollowPath:1;                               		// 0x0640 ( 0x0004 )  [0x00000001]
	unsigned long                                      bAttacking:1;                                     		// 0x0640 ( 0x0004 )  [0x00000002]
	float                                              AttackStartTime;                                  		// 0x0644 ( 0x0004 ) 
	int                                                AttackPhase;                                      		// 0x0648 ( 0x0004 ) 
	int                                                LastAttackPhase;                                  		// 0x064C ( 0x0004 ) 
	float                                              FireCheckInterval;                                		// 0x0650 ( 0x0004 ) 
	int                                                AttackPendingWeaponID;                            		// 0x0654 ( 0x0004 ) 
	float                                              AttackPendingWeaponAmmo;                          		// 0x0658 ( 0x0004 ) 
	float                                              TempAmmo;                                         		// 0x065C ( 0x0004 ) 
	float                                              TempAmmoMax;                                      		// 0x0660 ( 0x0004 ) 
	float                                              CONFIG_MinSpeed;                                  		// 0x0664 ( 0x0004 ) 
	float                                              CONFIG_MaxSpeed;                                  		// 0x0668 ( 0x0004 ) 
	float                                              CONFIG_Acceleration;                              		// 0x066C ( 0x0004 ) 
	float                                              CONFIG_Deceleration;                              		// 0x0670 ( 0x0004 ) 
	class TArray< int >                                CONFIG_AttackSlot;                                		// 0x0674 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              CONFIG_AttackTime;                                		// 0x0680 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                CONFIG_AttackAimMinError;                         		// 0x068C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                CONFIG_AttackAimMaxError;                         		// 0x0698 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              CONFIG_AttackMoveMomentumFactor;                  		// 0x06A4 ( 0x0004 ) 
	float                                              CONFIG_AttackOneMoveFactor;                       		// 0x06A8 ( 0x0004 ) 
	float                                              CONFIG_FireStartAngleInDot;                       		// 0x06AC ( 0x0004 ) 
	float                                              CONFIG_MinAngleAgainstGround;                     		// 0x06B0 ( 0x0004 ) 
	float                                              CONFIG_MoveMaxSlope;                              		// 0x06B4 ( 0x0004 ) 
	float                                              CONFIG_SoundVolume;                               		// 0x06B8 ( 0x0004 ) 
	float                                              CONFIG_SoundRadius;                               		// 0x06BC ( 0x0004 ) 

	// UScript Functions
	 void                      OnEndRound (  );                                  		//  WGame.wHelicopterController.OnEndRound
	 void                      PawnDied ( class APawn* P );                      		//  WGame.wHelicopterController.PawnDied
	 void                      ClientOnEndWaitingForStart (  );                  		//  WGame.wHelicopterController.ClientOnEndWaitingForStart
	 void                      Disappear (  );                                   		//  WGame.wHelicopterController.Disappear
	 void                      ServerStopAllSoundByHeliHK ( class APawn* P );    		//  WGame.wHelicopterController.ServerStopAllSoundByHeliHK
	 void                      PlayStaySound (  );                               		//  WGame.wHelicopterController.PlayStaySound
	 void                      PlayMoveSound (  );                               		//  WGame.wHelicopterController.PlayMoveSound
	 void                      Decelerate ( float dt );                          		//  WGame.wHelicopterController.Decelerate
	 void                      Accelerate ( float dt );                          		//  WGame.wHelicopterController.Accelerate
	 class APawn*              GetEnemy (  );                                    		//  WGame.wHelicopterController.GetEnemy
	 float                     GetDotAgainstGround ( class APawn* P );           		//  WGame.wHelicopterController.GetDotAgainstGround
	 float                     GetDot ( class APawn* P );                        		//  WGame.wHelicopterController.GetDot
	 struct FVector            GetMomentousRandomDest (  );                      		//  WGame.wHelicopterController.GetMomentousRandomDest
	 void                      ProgressFlyingPathNode (  );                      		//  WGame.wHelicopterController.ProgressFlyingPathNode
	 class ANavigationPoint*   GetNextFlyingPathNode (  );                       		//  WGame.wHelicopterController.GetNextFlyingPathNode
	 int                       Degree2Unreal ( float Angle );                    		//  WGame.wHelicopterController.Degree2Unreal
	 int                       GetSignedRandom ( int Min, int Max );             		//  WGame.wHelicopterController.GetSignedRandom
	 struct FRotator           AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError );		//  WGame.wHelicopterController.AdjustAim
	 class APlayerReplicationInfo* GetPRI (  );                                      		//  WGame.wHelicopterController.GetPRI
	 void                      GameHasEnded (  );                                		//  WGame.wHelicopterController.GameHasEnded
	 int                       GetTeamNum (  );                                  		// [ FUNC_Simulated ] WGame.wHelicopterController.GetTeamNum
	 class AwHelicopter*       GetHeli (  );                                     		//  WGame.wHelicopterController.GetHeli
	 void                      NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );		//  WGame.wHelicopterController.NotifyKilled
	 void                      Possess ( class APawn* aPawn );                   		//  WGame.wHelicopterController.Possess
	 void                      DisplayDebug ( class UCanvas* C, float* YL, float* YPos );		//  WGame.wHelicopterController.DisplayDebug
	 void                      IncY ( class UCanvas* C, float* YL, float* YPos );		//  WGame.wHelicopterController.IncY
	 struct FString            Rotator2String ( struct FRotator R );             		//  WGame.wHelicopterController.Rotator2String
	 struct FString            Vector2String ( struct FVector V );               		//  WGame.wHelicopterController.Vector2String
	 bool                      FireWeaponAt ( class AActor* A );                 		//  WGame.wHelicopterController.FireWeaponAt
	 void                      CancelCampFor ( class AController* C );           		//  WGame.wHelicopterController.CancelCampFor
}; // Size: 0x0084

// Class WGame.wHelicopterRSA
class DLL_IMPORT AwHelicopterRSA : public AwHelicopter
{
public:
}; // Size: 0x0000

// Class WGame.Goal_MoveToward
class DLL_IMPORT UGoal_MoveToward : public UGoal
{
public:
	class AActor*                                      Destination;                                      		// 0x0088 ( 0x0004 ) 
	class AActor*                                      Focus;                                            		// 0x008C ( 0x0004 ) 
	unsigned long                                      bSprint:1;                                        		// 0x0090 ( 0x0004 )  [0x00000001]
	unsigned long                                      bCrouch:1;                                        		// 0x0090 ( 0x0004 )  [0x00000002]
	unsigned long                                      bProne:1;                                         		// 0x0090 ( 0x0004 )  [0x00000004]
	float                                              ReachRadius;                                      		// 0x0094 ( 0x0004 ) 
	float                                              LostStartTime;                                    		// 0x0098 ( 0x0004 ) 
	struct FVector                                     checkpoint;                                       		// 0x009C ( 0x000C ) 
	float                                              CheckPointTime;                                   		// 0x00A8 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_MoveToward.ToString
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.Goal_MoveToward.NotifyDestroyed
	 bool                      SetFocusValue (  );                               		//  WGame.Goal_MoveToward.SetFocusValue
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_MoveToward.ActualWork
	 bool                      doSprint (  );                                    		//  WGame.Goal_MoveToward.doSprint
	 void                      Start (  );                                       		//  WGame.Goal_MoveToward.Start
	 bool                      PassedCheckPoint (  );                            		//  WGame.Goal_MoveToward.PassedCheckPoint
	 void                      ClearReferences (  );                             		//  WGame.Goal_MoveToward.ClearReferences
	 class UGoal_MoveToward*   Init ( class AwAIBotBase* inOwner, class AActor* inDestination, class AActor* inFocus, float inReachRadius, bool inSprint, bool inCrouch, bool inProne );		//  WGame.Goal_MoveToward.Init
}; // Size: 0x0024

// Class WGame.DAE
class DLL_IMPORT UDAE : public UObject
{
public:

	// UScript Functions
	 float                     Evaluate ( class UMemoryItem* MI );               		//  WGame.DAE.Evaluate
}; // Size: 0x0000

// Class WGame.DAE_Multiple
class DLL_IMPORT UDAE_Multiple : public UDAE
{
public:
	class TArray< class UDAE* >                        DAEs;                                             		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              Factors;                                          		// 0x0038 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              TotalFactors;                                     		// 0x0044 ( 0x0004 ) 

	// UScript Functions
	 float                     Evaluate ( class UMemoryItem* MI );               		//  WGame.DAE_Multiple.Evaluate
	 void                      Add ( float factor, class UDAE* inDAE );          		//  WGame.DAE_Multiple.Add
	 class UDAE_Multiple*      Create (  );                                      		//  WGame.DAE_Multiple.Create
}; // Size: 0x001C

// Class WGame.DAE_InSight
class DLL_IMPORT UDAE_InSight : public UDAE
{
public:
	class AwAIBotBase*                                 Owner;                                            		// 0x002C ( 0x0004 ) 

	// UScript Functions
	 float                     Evaluate ( class UMemoryItem* MI );               		//  WGame.DAE_InSight.Evaluate
	 class UDAE_InSight*       Create ( class AwAIBotBase* inOwner );            		//  WGame.DAE_InSight.Create
}; // Size: 0x0004

// Class WGame.DAE_Visibility
class DLL_IMPORT UDAE_Visibility : public UDAE
{
public:
	class AwAIBotBase*                                 Owner;                                            		// 0x002C ( 0x0004 ) 

	// UScript Functions
	 float                     Evaluate ( class UMemoryItem* MI );               		//  WGame.DAE_Visibility.Evaluate
	 class UDAE_Visibility*    Create ( class AwAIBotBase* inOwner );            		//  WGame.DAE_Visibility.Create
}; // Size: 0x0004

// Class WGame.DAE_Proximity
class DLL_IMPORT UDAE_Proximity : public UDAE
{
public:
	float                                              MaxDistance;                                      		// 0x002C ( 0x0004 ) 
	class AwAIBotBase*                                 Owner;                                            		// 0x0030 ( 0x0004 ) 

	// UScript Functions
	 float                     Evaluate ( class UMemoryItem* MI );               		//  WGame.DAE_Proximity.Evaluate
	 class UDAE_Proximity*     Create ( class AwAIBotBase* inOwner, float inMaxDistance );		//  WGame.DAE_Proximity.Create
}; // Size: 0x0008

// Class WGame.DAE_IsTurret
class DLL_IMPORT UDAE_IsTurret : public UDAE
{
public:

	// UScript Functions
	 float                     Evaluate ( class UMemoryItem* MI );               		//  WGame.DAE_IsTurret.Evaluate
	 class UDAE_IsTurret*      Create (  );                                      		//  WGame.DAE_IsTurret.Create
}; // Size: 0x0000

// Class WGame.DAE_RecentTarget
class DLL_IMPORT UDAE_RecentTarget : public UDAE
{
public:
	float                                              Time;                                             		// 0x002C ( 0x0004 ) 
	class AwAIBotBase*                                 Owner;                                            		// 0x0030 ( 0x0004 ) 

	// UScript Functions
	 float                     Evaluate ( class UMemoryItem* MI );               		//  WGame.DAE_RecentTarget.Evaluate
	 class UDAE_RecentTarget*  Create ( class AwAIBotBase* inOwner, float InTime );		//  WGame.DAE_RecentTarget.Create
}; // Size: 0x0008

// Class WGame.wAction_Empty
class DLL_IMPORT UwAction_Empty : public UwAction
{
public:

	// UScript Functions
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_Empty.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_Empty.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_Empty.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_Empty.CheckRequirement
	 class UwAction_Empty*     Init (  );                                        		//  WGame.wAction_Empty.Init
}; // Size: 0x0000

// Class WGame.wActionLayer
class DLL_IMPORT UwActionLayer : public UObject
{
public:
	class TArray< class UwAction* >                    Actions;                                          		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 class UwActionLayer*      Init (  );                                        		//  WGame.wActionLayer.Init
}; // Size: 0x000C

// Class WGame.wAction_Fire
class DLL_IMPORT UwAction_Fire : public UwAction
{
public:

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_Fire.GetGoal
	 int                       GetWeaponMultiplier ( class UwState* ws );        		//  WGame.wAction_Fire.GetWeaponMultiplier
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_Fire.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_Fire.Sim_PreEffect
	 float                     CalcDamage ( class UwState* ws );                 		//  WGame.wAction_Fire.CalcDamage
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_Fire.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_Fire.CheckRequirement
	 class UwAction_Fire*      Init (  );                                        		//  WGame.wAction_Fire.Init
}; // Size: 0x0000

// Class WGame.wAction_Reload
class DLL_IMPORT UwAction_Reload : public UwAction
{
public:

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_Reload.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_Reload.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_Reload.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_Reload.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_Reload.CheckRequirement
	 class UwAction_Reload*    Init (  );                                        		//  WGame.wAction_Reload.Init
}; // Size: 0x0000

// Class WGame.wAction_Explore
class DLL_IMPORT UwAction_Explore : public UwAction
{
public:

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_Explore.GetGoal
	 float                     CalcMeetNewEnemyProbability ( class UwState* ws );		//  WGame.wAction_Explore.CalcMeetNewEnemyProbability
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_Explore.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_Explore.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_Explore.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_Explore.CheckRequirement
	 class UwAction_Explore*   Init (  );                                        		//  WGame.wAction_Explore.Init
}; // Size: 0x0000

// Class WGame.wAction_ExploreTutorial
class DLL_IMPORT UwAction_ExploreTutorial : public UwAction_Explore
{
public:

	// UScript Functions
	 float                     CalcMeetNewEnemyProbability ( class UwState* ws );		//  WGame.wAction_ExploreTutorial.CalcMeetNewEnemyProbability
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_ExploreTutorial.CheckRequirement
}; // Size: 0x0000

// Class WGame.wAction_IdleHands
class DLL_IMPORT UwAction_IdleHands : public UwAction
{
public:
	float                                              IdleTime;                                         		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_IdleHands.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_IdleHands.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_IdleHands.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_IdleHands.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_IdleHands.CheckRequirement
	 class UwAction_IdleHands* Init ( float inIdleTime );                        		//  WGame.wAction_IdleHands.Init
}; // Size: 0x0004

// Class WGame.wAction_ApproachAndMelee
class DLL_IMPORT UwAction_ApproachAndMelee : public UwAction
{
public:

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_ApproachAndMelee.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_ApproachAndMelee.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_ApproachAndMelee.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_ApproachAndMelee.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_ApproachAndMelee.CheckRequirement
	 class UwAction_ApproachAndMelee* Init (  );                                        		//  WGame.wAction_ApproachAndMelee.Init
}; // Size: 0x0000

// Class WGame.wAction_MoveToEnemyInfluence
class DLL_IMPORT UwAction_MoveToEnemyInfluence : public UwAction
{
public:

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_MoveToEnemyInfluence.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_MoveToEnemyInfluence.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_MoveToEnemyInfluence.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_MoveToEnemyInfluence.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_MoveToEnemyInfluence.CheckRequirement
	 class UwAction_MoveToEnemyInfluence* Init (  );                                        		//  WGame.wAction_MoveToEnemyInfluence.Init
}; // Size: 0x0000

// Class WGame.wAction_MoveToSeeTarget
class DLL_IMPORT UwAction_MoveToSeeTarget : public UwAction
{
public:

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_MoveToSeeTarget.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_MoveToSeeTarget.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_MoveToSeeTarget.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_MoveToSeeTarget.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_MoveToSeeTarget.CheckRequirement
	 class UwAction_MoveToSeeTarget* Init (  );                                        		//  WGame.wAction_MoveToSeeTarget.Init
}; // Size: 0x0000

// Class WGame.wAction_LookAround
class DLL_IMPORT UwAction_LookAround : public UwAction
{
public:
	float                                              Duration;                                         		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_LookAround.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_LookAround.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_LookAround.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_LookAround.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_LookAround.CheckRequirement
	 class UwAction_LookAround* Init ( float inDuration );                        		//  WGame.wAction_LookAround.Init
}; // Size: 0x0004

// Class WGame.wAction_UseHelicopter
class DLL_IMPORT UwAction_UseHelicopter : public UwAction
{
public:

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_UseHelicopter.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_UseHelicopter.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_UseHelicopter.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_UseHelicopter.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_UseHelicopter.CheckRequirement
	 class UwAction_UseHelicopter* Init (  );                                        		//  WGame.wAction_UseHelicopter.Init
}; // Size: 0x0000

// Class WGame.wAction_UseAIrstrikeRealTime
class DLL_IMPORT UwAction_UseAIrstrikeRealTime : public UwAction
{
public:

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_UseAIrstrikeRealTime.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_UseAIrstrikeRealTime.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_UseAIrstrikeRealTime.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_UseAIrstrikeRealTime.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_UseAIrstrikeRealTime.CheckRequirement
	 class UwAction_UseAIrstrikeRealTime* Init (  );                                        		//  WGame.wAction_UseAIrstrikeRealTime.Init
}; // Size: 0x0000

// Class WGame.wAction_UseUAV
class DLL_IMPORT UwAction_UseUAV : public UwAction
{
public:

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_UseUAV.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_UseUAV.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_UseUAV.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_UseUAV.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_UseUAV.CheckRequirement
	 class UwAction_UseUAV*    Init (  );                                        		//  WGame.wAction_UseUAV.Init
}; // Size: 0x0000

// Class WGame.wAction_MeleeNoTarget
class DLL_IMPORT UwAction_MeleeNoTarget : public UwAction
{
public:

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_MeleeNoTarget.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_MeleeNoTarget.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_MeleeNoTarget.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_MeleeNoTarget.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_MeleeNoTarget.CheckRequirement
	 class UwAction_MeleeNoTarget* Init (  );                                        		//  WGame.wAction_MeleeNoTarget.Init
}; // Size: 0x0000

// Class WGame.wAction_FireSpecialTarget
class DLL_IMPORT UwAction_FireSpecialTarget : public UwAction_Fire
{
public:
	class AActor*                                      Target;                                           		// 0x0040 ( 0x0004 ) 
	float                                              DmgFactor;                                        		// 0x0044 ( 0x0004 ) 

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_FireSpecialTarget.GetGoal
	 float                     CalcDamage ( class UwState* ws );                 		//  WGame.wAction_FireSpecialTarget.CalcDamage
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_FireSpecialTarget.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_FireSpecialTarget.CheckRequirement
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.wAction_FireSpecialTarget.NotifyDestroyed
	 class UwAction_FireSpecialTarget* Init2 ( class AActor* inTarget, float inDmgFactor );		//  WGame.wAction_FireSpecialTarget.Init2
}; // Size: 0x0008

// Class WGame.wAction_PickTarget
class DLL_IMPORT UwAction_PickTarget : public UwAction
{
public:
	class UMemoryItem*                                 TargetMemoryItem;                                 		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_PickTarget.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_PickTarget.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_PickTarget.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_PickTarget.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_PickTarget.CheckRequirement
	 void                      ClearReferences (  );                             		//  WGame.wAction_PickTarget.ClearReferences
	 class UwAction_PickTarget* Init ( class UMemoryItem* inTarget );             		//  WGame.wAction_PickTarget.Init
}; // Size: 0x0004

// Class WGame.wAction_ThrowGrenadeRealTime
class DLL_IMPORT UwAction_ThrowGrenadeRealTime : public UwAction
{
public:

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_ThrowGrenadeRealTime.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_ThrowGrenadeRealTime.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_ThrowGrenadeRealTime.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_ThrowGrenadeRealTime.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_ThrowGrenadeRealTime.CheckRequirement
	 class UwAction_ThrowGrenadeRealTime* Init (  );                                        		//  WGame.wAction_ThrowGrenadeRealTime.Init
}; // Size: 0x0000

// Class WGame.wAction_PickHealth
class DLL_IMPORT UwAction_PickHealth : public UwAction
{
public:
	class APickup*                                     Pack;                                             		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.wAction_PickHealth.NotifyDestroyed
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_PickHealth.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_PickHealth.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_PickHealth.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_PickHealth.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_PickHealth.CheckRequirement
	 void                      ClearReferences (  );                             		//  WGame.wAction_PickHealth.ClearReferences
	 class UwAction_PickHealth* Init ( class APickup* inPack );                   		//  WGame.wAction_PickHealth.Init
}; // Size: 0x0004

// Class WGame.wAction_PickHelicopter
class DLL_IMPORT UwAction_PickHelicopter : public UwAction
{
public:
	class APickup*                                     Pack;                                             		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.wAction_PickHelicopter.NotifyDestroyed
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_PickHelicopter.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_PickHelicopter.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_PickHelicopter.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_PickHelicopter.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_PickHelicopter.CheckRequirement
	 void                      ClearReferences (  );                             		//  WGame.wAction_PickHelicopter.ClearReferences
	 class UwAction_PickHelicopter* Init ( class APickup* inPack );                   		//  WGame.wAction_PickHelicopter.Init
}; // Size: 0x0004

// Class WGame.wAction_PickAirstrike
class DLL_IMPORT UwAction_PickAirstrike : public UwAction
{
public:
	class APickup*                                     Pack;                                             		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.wAction_PickAirstrike.NotifyDestroyed
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_PickAirstrike.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_PickAirstrike.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_PickAirstrike.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_PickAirstrike.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_PickAirstrike.CheckRequirement
	 void                      ClearReferences (  );                             		//  WGame.wAction_PickAirstrike.ClearReferences
	 class UwAction_PickAirstrike* Init ( class APickup* inPack );                   		//  WGame.wAction_PickAirstrike.Init
}; // Size: 0x0004

// Class WGame.wAction_PickUAV
class DLL_IMPORT UwAction_PickUAV : public UwAction
{
public:
	class APickup*                                     Pack;                                             		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.wAction_PickUAV.NotifyDestroyed
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_PickUAV.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_PickUAV.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_PickUAV.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_PickUAV.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_PickUAV.CheckRequirement
	 void                      ClearReferences (  );                             		//  WGame.wAction_PickUAV.ClearReferences
	 class UwAction_PickUAV*   Init ( class APickup* inPack );                   		//  WGame.wAction_PickUAV.Init
}; // Size: 0x0004

// Class WGame.wAction_SwitchWeapon
class DLL_IMPORT UwAction_SwitchWeapon : public UwAction
{
public:
	class AwWeapon*                                    Weapon;                                           		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_SwitchWeapon.GetGoal
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_SwitchWeapon.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_SwitchWeapon.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_SwitchWeapon.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_SwitchWeapon.CheckRequirement
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.wAction_SwitchWeapon.NotifyDestroyed
	 void                      ClearReferences (  );                             		//  WGame.wAction_SwitchWeapon.ClearReferences
	 class UwAction_SwitchWeapon* Init ( class AwWeapon* inWeapon );                		//  WGame.wAction_SwitchWeapon.Init
}; // Size: 0x0004

// Class WGame.wAIBot
class DLL_IMPORT AwAIBot : public AwAIBotBase
{
public:
	struct FPlayerRecord                               PawnSetupRecord;                                  		// 0x067C ( 0x00FC ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UClass*                                      ShortMemoryClass;                                 		// 0x0778 ( 0x0004 ) 
	class UClass*                                      TargetingSystemClass;                             		// 0x077C ( 0x0004 ) 

	// UScript Functions
	 void                      Possess ( class APawn* aPawn );                   		//  WGame.wAIBot.Possess
	 void                      SetPawnClass ( struct FString inClass, struct FString InCharacter );		//  WGame.wAIBot.SetPawnClass
}; // Size: 0x0104

// Class WGame.Goal_Stay
class DLL_IMPORT UGoal_Stay : public UGoal
{
public:
	float                                              StayLength;                                       		// 0x0088 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_Stay.ToString
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_Stay.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_Stay.Start
	 class UGoal_Stay*         Init ( class AwAIBotBase* inOwner, float inStayLength );		//  WGame.Goal_Stay.Init
}; // Size: 0x0004

// Class WGame.Goal_SwitchWeapon
class DLL_IMPORT UGoal_SwitchWeapon : public UGoal
{
public:
	unsigned char                                      Group;                                            		// 0x0088 ( 0x0001 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_SwitchWeapon.ToString
	 bool                      SetFocusValue (  );                               		//  WGame.Goal_SwitchWeapon.SetFocusValue
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_SwitchWeapon.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_SwitchWeapon.Start
	 class UGoal_SwitchWeapon* Init ( class AwAIBotBase* inOwner, unsigned char InGroup );		//  WGame.Goal_SwitchWeapon.Init
}; // Size: 0x0004

// Class WGame.Goal_ExecPlan
class DLL_IMPORT UGoal_ExecPlan : public UGoal
{
public:
	class UwActionContainer*                           Plan;                                             		// 0x0088 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_ExecPlan.ToString
	 bool                      SetFocusValue (  );                               		//  WGame.Goal_ExecPlan.SetFocusValue
	 void                      End (  );                                         		//  WGame.Goal_ExecPlan.End
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_ExecPlan.ActualWork
	 float                     GetProgress (  );                                 		//  WGame.Goal_ExecPlan.GetProgress
	 void                      InitSubGoals (  );                                		//  WGame.Goal_ExecPlan.InitSubGoals
	 void                      Start (  );                                       		//  WGame.Goal_ExecPlan.Start
	 void                      ClearReferences (  );                             		//  WGame.Goal_ExecPlan.ClearReferences
	 class UGoal_ExecPlan*     Init ( class AwAIBotBase* inOwner, class UwActionContainer* inPlan );		//  WGame.Goal_ExecPlan.Init
}; // Size: 0x0004

// Class WGame.Goal_UseAirstrikeRealTime
class DLL_IMPORT UGoal_UseAirstrikeRealTime : public UGoal
{
public:
	class ANavigationPoint*                            Target;                                           		// 0x0088 ( 0x0004 ) 
	class UGoal*                                       Goal1;                                            		// 0x008C ( 0x0004 ) 
	class UGoal*                                       Goal2;                                            		// 0x0090 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_UseAirstrikeRealTime.ToString
	 class ANavigationPoint*   GetTarget (  );                                   		//  WGame.Goal_UseAirstrikeRealTime.GetTarget
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_UseAirstrikeRealTime.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_UseAirstrikeRealTime.Start
	 void                      ClearReferences (  );                             		//  WGame.Goal_UseAirstrikeRealTime.ClearReferences
	 class UGoal_UseAirstrikeRealTime* Init ( class AwAIBotBase* inOwner );              		//  WGame.Goal_UseAirstrikeRealTime.Init
}; // Size: 0x000C

// Class WGame.Goal_SwitchAndUse
class DLL_IMPORT UGoal_SwitchAndUse : public UGoal
{
public:
	int                                                Group;                                            		// 0x0088 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_SwitchAndUse.ToString
	 void                      End (  );                                         		//  WGame.Goal_SwitchAndUse.End
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_SwitchAndUse.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_SwitchAndUse.Start
	 class UGoal_SwitchAndUse* Init ( class AwAIBotBase* inOwner, int InGroup ); 		//  WGame.Goal_SwitchAndUse.Init
}; // Size: 0x0004

// Class WGame.Goal_Reload
class DLL_IMPORT UGoal_Reload : public UGoal
{
public:
	class AwGun*                                       Gun;                                              		// 0x0088 ( 0x0004 ) 
	unsigned long                                      ReloadAttempted:1;                                		// 0x008C ( 0x0004 )  [0x00000001]

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_Reload.ToString
	 bool                      SetFocusValue (  );                               		//  WGame.Goal_Reload.SetFocusValue
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_Reload.ActualWork
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.Goal_Reload.NotifyDestroyed
	 void                      Start (  );                                       		//  WGame.Goal_Reload.Start
	 void                      ClearReferences (  );                             		//  WGame.Goal_Reload.ClearReferences
	 class UGoal_Reload*       Init ( class AwAIBotBase* inOwner );              		//  WGame.Goal_Reload.Init
}; // Size: 0x0008

// Class WGame.Goal_Fail
class DLL_IMPORT UGoal_Fail : public UGoal
{
public:

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_Fail.ToString
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_Fail.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_Fail.Start
	 class UGoal_Fail*         Init ( class AwAIBotBase* inOwner );              		//  WGame.Goal_Fail.Init
}; // Size: 0x0000

// Class WGame.Goal_MoveToEnemyInfluence
class DLL_IMPORT UGoal_MoveToEnemyInfluence : public UGoal
{
public:

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_MoveToEnemyInfluence.ToString
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_MoveToEnemyInfluence.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_MoveToEnemyInfluence.Start
	 class UGoal_MoveToEnemyInfluence* Init ( class AwAIBotBase* inOwner );              		//  WGame.Goal_MoveToEnemyInfluence.Init
}; // Size: 0x0000

// Class WGame.Goal_MeleeNoTarget
class DLL_IMPORT UGoal_MeleeNoTarget : public UGoal
{
public:
	float                                              FireCheckInterval;                                		// 0x0088 ( 0x0004 ) 
	float                                              elapsed;                                          		// 0x008C ( 0x0004 ) 
	float                                              FailTime;                                         		// 0x0090 ( 0x0004 ) 
	int                                                MeleeCount;                                       		// 0x0094 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_MeleeNoTarget.ToString
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_MeleeNoTarget.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_MeleeNoTarget.Start
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.Goal_MeleeNoTarget.NotifyDestroyed
	 class UGoal_MeleeNoTarget* Init ( class AwAIBotBase* inOwner, int inMeleeCount );		//  WGame.Goal_MeleeNoTarget.Init
}; // Size: 0x0010

// Class WGame.Goal_LookAround
class DLL_IMPORT UGoal_LookAround : public UGoal
{
public:
	float                                              LastFocusTime;                                    		// 0x0088 ( 0x0004 ) 
	float                                              Duration;                                         		// 0x008C ( 0x0004 ) 
	float                                              StartTime;                                        		// 0x0090 ( 0x0004 ) 
	struct FVector                                     FocalPoint;                                       		// 0x0094 ( 0x000C ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_LookAround.ToString
	 void                      End (  );                                         		//  WGame.Goal_LookAround.End
	 bool                      SetFocusValue (  );                               		//  WGame.Goal_LookAround.SetFocusValue
	 void                      NextFocusTarget (  );                             		//  WGame.Goal_LookAround.NextFocusTarget
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_LookAround.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_LookAround.Start
	 class UGoal_LookAround*   Init ( class AwAIBotBase* inOwner, float inDuration );		//  WGame.Goal_LookAround.Init
}; // Size: 0x0018

// Class WGame.Goal_ApproachAndMelee
class DLL_IMPORT UGoal_ApproachAndMelee : public UGoal
{
public:
	class APawn*                                       Target;                                           		// 0x0088 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_ApproachAndMelee.ToString
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_ApproachAndMelee.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_ApproachAndMelee.Start
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.Goal_ApproachAndMelee.NotifyDestroyed
	 void                      ClearReferences (  );                             		//  WGame.Goal_ApproachAndMelee.ClearReferences
	 class UGoal_ApproachAndMelee* Init ( class AwAIBotBase* inOwner, class APawn* inTarget );		//  WGame.Goal_ApproachAndMelee.Init
}; // Size: 0x0004

// Class WGame.Goal_ThrowGrenadeRealTime
class DLL_IMPORT UGoal_ThrowGrenadeRealTime : public UGoal
{
public:
	class ANavigationPoint*                            Target;                                           		// 0x0088 ( 0x0004 ) 
	class UGoal*                                       Goal1;                                            		// 0x008C ( 0x0004 ) 
	class UGoal*                                       Goal2;                                            		// 0x0090 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_ThrowGrenadeRealTime.ToString
	 class ANavigationPoint*   GetTarget (  );                                   		//  WGame.Goal_ThrowGrenadeRealTime.GetTarget
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_ThrowGrenadeRealTime.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_ThrowGrenadeRealTime.Start
	 void                      ClearReferences (  );                             		//  WGame.Goal_ThrowGrenadeRealTime.ClearReferences
	 class UGoal_ThrowGrenadeRealTime* Init ( class AwAIBotBase* inOwner );              		//  WGame.Goal_ThrowGrenadeRealTime.Init
}; // Size: 0x000C

// Class WGame.Goal_PickTarget
class DLL_IMPORT UGoal_PickTarget : public UGoal
{
public:
	class UMemoryItem*                                 MI;                                               		// 0x0088 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_PickTarget.ToString
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_PickTarget.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_PickTarget.Start
	 void                      ClearReferences (  );                             		//  WGame.Goal_PickTarget.ClearReferences
	 class UGoal_PickTarget*   Init ( class AwAIBotBase* inOwner, class UMemoryItem* inMI );		//  WGame.Goal_PickTarget.Init
}; // Size: 0x0004

// Class WGame.Goal_MoveToSeeTarget
class DLL_IMPORT UGoal_MoveToSeeTarget : public UGoal
{
public:

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_MoveToSeeTarget.ToString
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_MoveToSeeTarget.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_MoveToSeeTarget.Start
	 class UGoal_MoveToSeeTarget* Init ( class AwAIBotBase* inOwner );              		//  WGame.Goal_MoveToSeeTarget.Init
}; // Size: 0x0000

// Class WGame.Goal_ExecPartialPlan
class DLL_IMPORT UGoal_ExecPartialPlan : public UGoal
{
public:
	class UwActionContainer*                           PartialPlan;                                      		// 0x0088 ( 0x0004 ) 
	class UGoal*                                       GoalMain;                                         		// 0x008C ( 0x0004 ) 
	class UGoal_ExecPartialPlan*                       GoalSub;                                          		// 0x0090 ( 0x0004 ) 
	int                                                GoalSubIndex;                                     		// 0x0094 ( 0x0004 ) 
	float                                              Progress;                                         		// 0x0098 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_ExecPartialPlan.ToString
	 void                      DisplayDebug ( class UCanvas* C, int Level, float* YL, float* YPos );		//  WGame.Goal_ExecPartialPlan.DisplayDebug
	 bool                      SetFocus (  );                                    		//  WGame.Goal_ExecPartialPlan.SetFocus
	 void                      ClearSubgoals ( bool free );                      		//  WGame.Goal_ExecPartialPlan.ClearSubgoals
	 void                      End (  );                                         		//  WGame.Goal_ExecPartialPlan.End
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_ExecPartialPlan.ActualWork
	 class UGoal_ExecPartialPlan* GetNextSubGoal (  );                              		//  WGame.Goal_ExecPartialPlan.GetNextSubGoal
	 float                     GetProgress ( float Min, float Size );            		//  WGame.Goal_ExecPartialPlan.GetProgress
	 void                      Start (  );                                       		//  WGame.Goal_ExecPartialPlan.Start
	 void                      ClearReferences (  );                             		//  WGame.Goal_ExecPartialPlan.ClearReferences
	 class UGoal_ExecPartialPlan* Init ( class AwAIBotBase* inOwner, class UwActionContainer* inPartialPlan );		//  WGame.Goal_ExecPartialPlan.Init
}; // Size: 0x0014

// Class WGame.Goal_Melee
class DLL_IMPORT UGoal_Melee : public UGoal
{
public:
	class AActor*                                      Target;                                           		// 0x0088 ( 0x0004 ) 
	float                                              FireCheckInterval;                                		// 0x008C ( 0x0004 ) 
	float                                              elapsed;                                          		// 0x0090 ( 0x0004 ) 
	unsigned long                                      DidMelee:1;                                       		// 0x0094 ( 0x0004 )  [0x00000001]
	float                                              FailTime;                                         		// 0x0098 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_Melee.ToString
	 bool                      SetFocusValue (  );                               		//  WGame.Goal_Melee.SetFocusValue
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_Melee.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_Melee.Start
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.Goal_Melee.NotifyDestroyed
	 void                      ClearReferences (  );                             		//  WGame.Goal_Melee.ClearReferences
	 class UGoal_Melee*        Init ( class AwAIBotBase* inOwner, class AActor* inTarget );		//  WGame.Goal_Melee.Init
}; // Size: 0x0014

// Class WGame.Goal_Throw
class DLL_IMPORT UGoal_Throw : public UGoal
{
public:
	class AActor*                                      Target;                                           		// 0x0088 ( 0x0004 ) 
	float                                              minDist;                                          		// 0x008C ( 0x0004 ) 
	float                                              MaxDist;                                          		// 0x0090 ( 0x0004 ) 
	float                                              MinAngle;                                         		// 0x0094 ( 0x0004 ) 
	float                                              MaxAngle;                                         		// 0x0098 ( 0x0004 ) 
	class UGoal_Look*                                  GoalLook;                                         		// 0x009C ( 0x0004 ) 
	struct FVector                                     ViewLocation;                                     		// 0x00A0 ( 0x000C ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_Throw.ToString
	 void                      End (  );                                         		//  WGame.Goal_Throw.End
	 bool                      SetFocusValue (  );                               		//  WGame.Goal_Throw.SetFocusValue
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_Throw.ActualWork
	 bool                      GetViewLocation ( struct FVector curLocation, struct FVector fallLocation, struct FVector* ViewLocation );		//  WGame.Goal_Throw.GetViewLocation
	 bool                      CanThrowTo ( class ALevelInfo* Level, struct FVector From, struct FVector to, bool checkUp, bool checkDown, struct FVector* View );		//  WGame.Goal_Throw.CanThrowTo
	 void                      SpawnTrail ( struct FVector ViewLocation );       		//  WGame.Goal_Throw.SpawnTrail
	 void                      Start (  );                                       		//  WGame.Goal_Throw.Start
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.Goal_Throw.NotifyDestroyed
	 void                      ClearReferences (  );                             		//  WGame.Goal_Throw.ClearReferences
	 class UGoal_Throw*        Init ( class AwAIBotBase* inOwner, class AActor* inTarget );		//  WGame.Goal_Throw.Init
}; // Size: 0x0024

// Class WGame.Goal_SwitchAndThrow
class DLL_IMPORT UGoal_SwitchAndThrow : public UGoal
{
public:
	class AActor*                                      Target;                                           		// 0x0088 ( 0x0004 ) 
	int                                                Group;                                            		// 0x008C ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_SwitchAndThrow.ToString
	 void                      End (  );                                         		//  WGame.Goal_SwitchAndThrow.End
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_SwitchAndThrow.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_SwitchAndThrow.Start
	 void                      NotifyDestroyed ( class AActor* A );              		//  WGame.Goal_SwitchAndThrow.NotifyDestroyed
	 void                      ClearReferences (  );                             		//  WGame.Goal_SwitchAndThrow.ClearReferences
	 class UGoal_SwitchAndThrow* Init ( class AwAIBotBase* inOwner, class AActor* inTarget, int InGroup );		//  WGame.Goal_SwitchAndThrow.Init
}; // Size: 0x0008

// Class WGame.Goal_SwitchAndFire
class DLL_IMPORT UGoal_SwitchAndFire : public UGoal
{
public:
	int                                                Group;                                            		// 0x0088 ( 0x0004 ) 
	class AActor*                                      Target;                                           		// 0x008C ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_SwitchAndFire.ToString
	 void                      End (  );                                         		//  WGame.Goal_SwitchAndFire.End
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_SwitchAndFire.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_SwitchAndFire.Start
	 void                      ClearReferences (  );                             		//  WGame.Goal_SwitchAndFire.ClearReferences
	 class UGoal_SwitchAndFire* Init ( class AwAIBotBase* inOwner, int InGroup, class AActor* inTarget );		//  WGame.Goal_SwitchAndFire.Init
}; // Size: 0x0008

// Class WGame.Goal_Look
class DLL_IMPORT UGoal_Look : public UGoal
{
public:
	struct FVector                                     LookLocation;                                     		// 0x0088 ( 0x000C ) 
	unsigned char                                      old;                                              		// 0x0094 ( 0x0001 ) 
	unsigned long                                      pitchSet:1;                                       		// 0x0098 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_Look.ToString
	 void                      End (  );                                         		//  WGame.Goal_Look.End
	 bool                      SetFocusValue (  );                               		//  WGame.Goal_Look.SetFocusValue
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_Look.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_Look.Start
	 class UGoal_Look*         Init ( class AwAIBotBase* inOwner, struct FVector inLookLocation );		//  WGame.Goal_Look.Init
}; // Size: 0x0014

// Class WGame.wDeathMessage
class DLL_IMPORT AwDeathMessage : public ALocalMessage
{
public:
	struct FString                                     KilledString;                                     		// 0x0440 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SomeoneString;                                    		// 0x044C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bNoConsoleDeathMessages:1;                        		// 0x0458 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  WGame.wDeathMessage.ClientReceive
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  WGame.wDeathMessage.GetString
	 class FColor              GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI_1 );		//  WGame.wDeathMessage.GetConsoleColor
}; // Size: 0x001C

// Class WGame.wWeaponPickup_Location
class DLL_IMPORT AwWeaponPickup_Location : public AwWeaponPickup
{
public:
	struct FName                                       ClassName;                                        		// 0x0460 ( 0x0004 ) 
	int                                                RespawnLimit;                                     		// 0x0464 ( 0x0004 ) [ CPF_Edit ]
	int                                                RespawnCount;                                     		// 0x0468 ( 0x0004 ) 

	// UScript Functions
	 void                      Reset (  );                                       		//  WGame.wWeaponPickup_Location.Reset
	 void                      PickWeapon ( class AActor* Other );               		//  WGame.wWeaponPickup_Location.PickWeapon
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] WGame.wWeaponPickup_Location.PostNetBeginPlay
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Simulated | FUNC_Event ] WGame.wWeaponPickup_Location.PreBeginPlay
}; // Size: 0x000C

// Class WGame.wWeaponPickup_M2B
class DLL_IMPORT AwWeaponPickup_M2B : public AwWeaponPickup_Location
{
public:

	// UScript Functions
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Simulated | FUNC_Event ] WGame.wWeaponPickup_M2B.PreBeginPlay
}; // Size: 0x0000

// Class WGame.wWeaponPickup_RPG7
class DLL_IMPORT AwWeaponPickup_RPG7 : public AwWeaponPickup_Location
{
public:

	// UScript Functions
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Simulated | FUNC_Event ] WGame.wWeaponPickup_RPG7.PreBeginPlay
}; // Size: 0x0000

// Class WGame.wVehicle
class DLL_IMPORT AwVehicle : public AVehicle
{
public:
	struct FString                                     DefaultWeaponClassName;                           		// 0x11C8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FVector                                     VehicleProjSpawnOffset;                           		// 0x11D4 ( 0x000C ) [ CPF_Edit ]
	class APawn*                                       DamLastInstigator;                                		// 0x11E0 ( 0x0004 ) 
	float                                              DamLastDamageTime;                                		// 0x11E4 ( 0x0004 ) 
	class UMaterial*                                   DefaultCrosshair;                                 		// 0x11E8 ( 0x0004 ) 
	class UMaterial*                                   CrosshairHitFeedbackTex;                          		// 0x11EC ( 0x0004 ) 
	float                                              CrosshairScale;                                   		// 0x11F0 ( 0x0004 ) 
	unsigned long                                      bCHZeroYOffset:1;                                 		// 0x11F4 ( 0x0004 )  [0x00000001]
	unsigned long                                      bCustomHealthDisplay:1;                           		// 0x11F4 ( 0x0004 )  [0x00000002]
	float                                              LastCalcWeaponFire;                               		// 0x11F8 ( 0x0004 ) 
	class AActor*                                      LastCalcHA;                                       		// 0x11FC ( 0x0004 ) 
	struct FVector                                     LastCalcHL;                                       		// 0x1200 ( 0x000C ) 
	struct FVector                                     LastCalcHN;                                       		// 0x120C ( 0x000C ) 
	class USound*                                      LockedOnSound;                                    		// 0x1218 ( 0x0004 ) [ CPF_Edit ]
	class AController*                                 DestroyPrevController;                            		// 0x121C ( 0x0004 ) 
	class AEmitter*                                    ExplosionEffect;                                  		// 0x1220 ( 0x0004 ) 
	class AEmitter*                                    DebugFX;                                          		// 0x1224 ( 0x0004 ) 
	struct FVector                                     BotError;                                         		// 0x1228 ( 0x000C ) 
	class AActor*                                      OldTarget;                                        		// 0x1234 ( 0x0004 ) 

	// UScript Functions
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] WGame.wVehicle.UpdatePrecacheMaterials
	 void                      StaticPrecache ( class ALevelInfo* L );           		//  WGame.wVehicle.StaticPrecache
	 class AActor*             PerformTrace ( struct FVector End, struct FVector Start, struct FVector* HitLocation, struct FVector* HitNormal );		// [ FUNC_Simulated ] WGame.wVehicle.PerformTrace
	 class AActor*             CalcWeaponFire ( struct FVector* HitLocation, struct FVector* HitNormal );		// [ FUNC_Simulated ] WGame.wVehicle.CalcWeaponFire
	 struct FVector            GetBotError ( struct FVector StartLocation );     		//  WGame.wVehicle.GetBotError
	 struct FVector            GetFireStart ( float XOffset );                   		// [ FUNC_Simulated ] WGame.wVehicle.GetFireStart
	 struct FVector            GetCrosshairWorldLocation (  );                   		// [ FUNC_Simulated ] WGame.wVehicle.GetCrosshairWorldLocation
	 void                      eventNotifyEnemyLockedOn (  );                    		// [ FUNC_Event ] WGame.wVehicle.NotifyEnemyLockedOn
	 void                      DrawCrosshairAlignment ( class UCanvas* C, struct FVector ScreenPos );		// [ FUNC_Simulated ] WGame.wVehicle.DrawCrosshairAlignment
	 bool                      WeaponHitsCrosshairsHL (  );                      		// [ FUNC_Simulated ] WGame.wVehicle.WeaponHitsCrosshairsHL
	 bool                      DrawCrosshair ( class UCanvas* C, struct FVector* ScreenPos );		// [ FUNC_Simulated ] WGame.wVehicle.DrawCrosshair
	 void                      DrawHealthInfo ( class UCanvas* C, class APlayerController* PC );		// [ FUNC_Simulated ] WGame.wVehicle.DrawHealthInfo
	 void                      DrawWeaponInfo ( class UCanvas* C, class AHUD* H );		// [ FUNC_Simulated ] WGame.wVehicle.DrawWeaponInfo
	 void                      DrawVehicleHUD ( class UCanvas* C, class APlayerController* PC );		// [ FUNC_Simulated ] WGame.wVehicle.DrawVehicleHUD
	 void                      SpecialDrawCrosshair ( class UCanvas* C );        		// [ FUNC_Simulated ] WGame.wVehicle.SpecialDrawCrosshair
	 void                      DrawHUD ( class UCanvas* C );                     		// [ FUNC_Simulated ] WGame.wVehicle.DrawHUD
	 struct FName              GetWeaponBoneFor ( class AInventory* i );         		//  WGame.wVehicle.GetWeaponBoneFor
	 void                      eventPlayDying ( class UClass* DamageType, struct FVector HitLoc, int CollisionPart );		// [ FUNC_Simulated | FUNC_Event ] WGame.wVehicle.PlayDying
	 float                     CalcInertia ( float DeltaTime, float FrictionFactor, float OldValue, float NewValue );		// [ FUNC_Final | FUNC_Simulated ] WGame.wVehicle.CalcInertia
	 void                      Explode ( struct FVector HitLocation, struct FVector HitNormal );		// [ FUNC_Simulated ] WGame.wVehicle.Explode
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  WGame.wVehicle.TakeDamage
	 bool                      StopWeaponFiring (  );                            		// [ FUNC_Simulated ] WGame.wVehicle.StopWeaponFiring
	 void                      ClientKDriverLeave ( class APlayerController* PC );		// [ FUNC_Simulated ] WGame.wVehicle.ClientKDriverLeave
	 void                      ClientKDriverEnter ( class APlayerController* PC );		// [ FUNC_Simulated ] WGame.wVehicle.ClientKDriverEnter
	 bool                      eventKDriverLeave ( bool bForceLeave );           		// [ FUNC_Event ] WGame.wVehicle.KDriverLeave
	 void                      UnPossessed (  );                                 		//  WGame.wVehicle.UnPossessed
	 void                      PossessedBy ( class AController* C );             		//  WGame.wVehicle.PossessedBy
	 void                      AddDefaultInventory (  );                         		//  WGame.wVehicle.AddDefaultInventory
	 void                      eventDestroyed (  );                              		// [ FUNC_Simulated | FUNC_Event ] WGame.wVehicle.Destroyed
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Simulated | FUNC_Event ] WGame.wVehicle.PostBeginPlay
	 void                      Tick ( float DeltaTime );                         		// [ FUNC_Simulated ] WGame.wVehicle.Tick
	 void                      ClientDying ( class UClass* DamageType, struct FVector HitLocation );		//  WGame.wVehicle.ClientDying
	 void                      PlayHit ( float Damage, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, int CollisionPart );		//  WGame.wVehicle.PlayHit
}; // Size: 0x0070

// Class WGame.wTurret
class DLL_IMPORT AwTurret : public AwVehicle
{
public:
	class UClass*                                      TurretBaseClass;                                  		// 0x1238 ( 0x0004 ) 
	class AwTurret_Base*                               TurretBase;                                       		// 0x123C ( 0x0004 ) 
	struct FRotator                                    OriginalRotation;                                 		// 0x1240 ( 0x000C ) [ CPF_Net ]
	struct FVector                                     OriginalLocation;                                 		// 0x124C ( 0x000C ) [ CPF_Net ]
	struct FVector                                     OriginalDirection;                                		// 0x1258 ( 0x000C ) [ CPF_Net ]
	struct FRotator                                    EnterRotation;                                    		// 0x1264 ( 0x000C ) [ CPF_Net ]
	float                                              TurretFOV;                                        		// 0x1270 ( 0x0004 ) 
	struct FVector                                     DriverEnteredLocation;                            		// 0x1274 ( 0x000C ) 
	class UClass*                                      TurretSwivelClass;                                		// 0x1280 ( 0x0004 ) 
	class AwTurret_Base*                               TurretSwivel;                                     		// 0x1284 ( 0x0004 ) 
	float                                              YawAccel;                                         		// 0x1288 ( 0x0004 ) 
	float                                              PitchAccel;                                       		// 0x128C ( 0x0004 ) 
	float                                              RotationInertia;                                  		// 0x1290 ( 0x0004 ) [ CPF_Edit | CPF_Const ]
	float                                              RotationSpeed;                                    		// 0x1294 ( 0x0004 ) [ CPF_Edit | CPF_Const ]
	struct FVector                                     CamAbsLocation;                                   		// 0x1298 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     CamRelLocation;                                   		// 0x12A4 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     CamDistance;                                      		// 0x12B0 ( 0x000C ) [ CPF_Edit ]
	float                                              RotYawConstrant_Left;                             		// 0x12BC ( 0x0004 ) [ CPF_Net ]
	float                                              RotYawConstrant_Right;                            		// 0x12C0 ( 0x0004 ) [ CPF_Net ]
	float                                              RotPitchConstant_Up;                              		// 0x12C4 ( 0x0004 ) [ CPF_Net ]
	float                                              RotPitchConstant_Down;                            		// 0x12C8 ( 0x0004 ) [ CPF_Net ]
	float                                              RotSpeed_Yaw;                                     		// 0x12CC ( 0x0004 ) [ CPF_Net ]
	float                                              RotSpeed_Pitch;                                   		// 0x12D0 ( 0x0004 ) [ CPF_Net ]
	struct FRotator                                    LastCamRot;                                       		// 0x12D4 ( 0x000C ) 
	float                                              LastTimeSeconds;                                  		// 0x12E0 ( 0x0004 ) 
	float                                              CamRotationInertia;                               		// 0x12E4 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bZooming:1;                                       		// 0x12E8 ( 0x0004 )  [0x00000001]
	float                                              DesiredPlayerFOV;                                 		// 0x12EC ( 0x0004 ) [ CPF_Edit ]
	float                                              MinPlayerFOV;                                     		// 0x12F0 ( 0x0004 ) [ CPF_Edit ]
	float                                              OldFOV;                                           		// 0x12F4 ( 0x0004 ) [ CPF_Edit ]
	float                                              ZoomSpeed;                                        		// 0x12F8 ( 0x0004 ) [ CPF_Edit ]
	float                                              ZoomWeaponOffsetAdjust;                           		// 0x12FC ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   ZoomTick;                                         		// 0x1300 ( 0x0004 ) 
	class UMaterial*                                   ZoomTickTex;                                      		// 0x1304 ( 0x0004 ) 
	class UTexture*                                    WeaponInfoTexture;                                		// 0x1308 ( 0x0004 ) 
	struct FName                                       ObjectiveTag[ 0x06 ];                             		// 0x130C ( 0x0018 ) [ CPF_Edit ]
	class TArray< class ASVehicleTrigger* >            EntryTriggers;                                    		// 0x1324 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                AnimRotBase;                                      		// 0x1330 ( 0x0004 ) 
	struct FVector                                     vDriverAttachPos;                                 		// 0x1334 ( 0x000C ) 
	float                                              NotifyElapsed;                                    		// 0x1340 ( 0x0004 ) 

	// UScript Functions
	 void                      MakeFireNoise (  );                               		// [ FUNC_Simulated ] WGame.wTurret.MakeFireNoise
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  WGame.wTurret.TakeDamage
	 void                      InitBaseRotation (  );                            		// [ FUNC_Simulated ] WGame.wTurret.InitBaseRotation
	 bool                      PlaceExitingDriver (  );                          		//  WGame.wTurret.PlaceExitingDriver
	 bool                      PointOfView (  );                                 		// [ FUNC_Simulated ] WGame.wTurret.PointOfView
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] WGame.wTurret.UpdatePrecacheMaterials
	 void                      StaticPrecache ( class ALevelInfo* L );           		//  WGame.wTurret.StaticPrecache
	 bool                      eventKDriverLeave ( bool bForceLeave );           		// [ FUNC_Event ] WGame.wTurret.KDriverLeave
	 void                      KDriverEnter ( class APawn* P );                  		//  WGame.wTurret.KDriverEnter
	 void                      ClientKDriverEnter ( class APlayerController* PC );		// [ FUNC_Simulated ] WGame.wTurret.ClientKDriverEnter
	 void                      AttachDriver ( class APawn* P );                  		// [ FUNC_Simulated ] WGame.wTurret.AttachDriver
	 void                      PostZoomAdjust ( float ZoomPct );                 		// [ FUNC_Simulated ] WGame.wTurret.PostZoomAdjust
	 bool                      DrawCrosshair ( class UCanvas* C, struct FVector* ScreenPos );		// [ FUNC_Simulated ] WGame.wTurret.DrawCrosshair
	 class AActor*             PerformTrace ( struct FVector End, struct FVector Start, struct FVector* HitLocation, struct FVector* HitNormal );		// [ FUNC_Simulated ] WGame.wTurret.PerformTrace
	 void                      DrawHealthInfo ( class UCanvas* C, class APlayerController* PC );		// [ FUNC_Simulated ] WGame.wTurret.DrawHealthInfo
	 void                      Explode ( struct FVector HitLocation, struct FVector HitNormal );		// [ FUNC_Simulated ] WGame.wTurret.Explode
	 void                      PlayFiring ( float Rate, struct FName FiringMode );		// [ FUNC_Simulated ] WGame.wTurret.PlayFiring
	 struct FRotator           GetViewRotation (  );                             		// [ FUNC_Simulated ] WGame.wTurret.GetViewRotation
	 void                      SpecialCalcFirstPersonView ( class APlayerController* PC, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation );		// [ FUNC_Simulated ] WGame.wTurret.SpecialCalcFirstPersonView
	 bool                      SpecialCalcView ( class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation );		// [ FUNC_Simulated ] WGame.wTurret.SpecialCalcView
	 void                      TestSetDriverFrame ( float frame, float UpDownFrame );		// [ FUNC_Simulated ] WGame.wTurret.TestSetDriverFrame
	 void                      Tick ( float DeltaTime );                         		// [ FUNC_Simulated ] WGame.wTurret.Tick
	 void                      NotifyAllControllers ( float dt );                		//  WGame.wTurret.NotifyAllControllers
	 void                      UpdateRocketAcceleration ( float DeltaTime, float YawChange, float PitchChange );		// [ FUNC_Simulated ] WGame.wTurret.UpdateRocketAcceleration
	 void                      eventDestroyed (  );                              		// [ FUNC_Simulated | FUNC_Event ] WGame.wTurret.Destroyed
	 void                      SetRotateForPlayerView ( struct FRotator PCRot ); 		// [ FUNC_Simulated ] WGame.wTurret.SetRotateForPlayerView
	 bool                      HasAmmo (  );                                     		// [ FUNC_Simulated ] WGame.wTurret.HasAmmo
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] WGame.wTurret.PostNetBeginPlay
	 void                      UnPossessed (  );                                 		//  WGame.wTurret.UnPossessed
	 void                      PossessedBy ( class AController* C );             		//  WGame.wTurret.PossessedBy
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Simulated | FUNC_Event ] WGame.wTurret.PostBeginPlay
	 void                      ServerSwitchTurret ( bool bNextTurret );          		//  WGame.wTurret.ServerSwitchTurret
	 void                      NextWeapon (  );                                  		// [ FUNC_Simulated ] WGame.wTurret.NextWeapon
	 void                      PrevWeapon (  );                                  		// [ FUNC_Simulated ] WGame.wTurret.PrevWeapon
	 float                     BotDesireability ( class AActor* S, int TeamIndex, class AActor* Objective );		//  WGame.wTurret.BotDesireability
	 bool                      StronglyRecommended ( class AActor* S, int TeamIndex, class AActor* Objective );		//  WGame.wTurret.StronglyRecommended
	 bool                      RecommendLongRangedAttack (  );                   		//  WGame.wTurret.RecommendLongRangedAttack
}; // Size: 0x010C

// Class WGame.wTurret_FNM240
class DLL_IMPORT AwTurret_FNM240 : public AwTurret
{
public:
	struct FRotator                                    rOriginalRot;                                     		// 0x1344 ( 0x000C ) 

	// UScript Functions
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] WGame.wTurret_FNM240.DisplayDebug
	 struct FRotator           GetViewRotation (  );                             		// [ FUNC_Simulated ] WGame.wTurret_FNM240.GetViewRotation
	 void                      execTZ ( int iZ );                                		// [ FUNC_Exec ] WGame.wTurret_FNM240.TZ
	 void                      execty ( int iY );                                		// [ FUNC_Exec ] WGame.wTurret_FNM240.ty
	 void                      execTX ( int iX );                                		// [ FUNC_Exec ] WGame.wTurret_FNM240.TX
	 void                      exect ( int iType );                              		// [ FUNC_Exec ] WGame.wTurret_FNM240.t
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] WGame.wTurret_FNM240.UpdatePrecacheMaterials
	 void                      UpdatePrecacheStaticMeshes (  );                  		// [ FUNC_Simulated ] WGame.wTurret_FNM240.UpdatePrecacheStaticMeshes
	 void                      StaticPrecache ( class ALevelInfo* L );           		//  WGame.wTurret_FNM240.StaticPrecache
	 void                      SetExitViewRotation ( class APawn* Driver );      		//  WGame.wTurret_FNM240.SetExitViewRotation
	 void                      MakeFireNoise (  );                               		// [ FUNC_Simulated ] WGame.wTurret_FNM240.MakeFireNoise
	 void                      ClientKDriverLeave ( class APlayerController* PC );		// [ FUNC_Simulated ] WGame.wTurret_FNM240.ClientKDriverLeave
	 void                      ClientKDriverEnter ( class APlayerController* PC );		// [ FUNC_Simulated ] WGame.wTurret_FNM240.ClientKDriverEnter
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Simulated | FUNC_Event ] WGame.wTurret_FNM240.PostBeginPlay
}; // Size: 0x000C

// Class WGame.wAmmoSupplyObjective
class DLL_IMPORT AwAmmoSupplyObjective : public AGameObjective
{
public:
	int                                                MagazineSkillID;                                  		// 0x06E4 ( 0x0004 ) [ CPF_Edit ]
	class TArray< int >                                WeaponGroups;                                     		// 0x06E8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	int                                                SupplyCount;                                      		// 0x06F4 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      ChargeSound;                                      		// 0x06F8 ( 0x0004 ) 

	// UScript Functions
	 bool                      ChargeAmmo ( class AwPawn* P );                   		//  WGame.wAmmoSupplyObjective.ChargeAmmo
	 void                      eventTouch ( class AActor* Other );               		// [ FUNC_Event ] WGame.wAmmoSupplyObjective.Touch
	 void                      PostBeginPlay (  );                               		//  WGame.wAmmoSupplyObjective.PostBeginPlay
}; // Size: 0x0018

// Class WGame.wBTR_ArrangeTurret
class DLL_IMPORT AwBTR_ArrangeTurret : public AwArrangeTurret
{
public:
	unsigned long                                      bEnabled:1;                                       		// 0x03D8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bVehicleTeamLock:1;                               		// 0x03D8 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bEnter_TeamUnlocks:1;                             		// 0x03D8 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bHUDTrackVehicle:1;                               		// 0x03D8 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bRespawnWhenDestroyed:1;                          		// 0x03D8 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bSpawnProtected:1;                                		// 0x03D8 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bHighScoreKill:1;                                 		// 0x03D8 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bKeyVehicle:1;                                    		// 0x03D8 ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      bSpawnBuildEffect:1;                              		// 0x03D8 ( 0x0004 )  [0x00000100][ CPF_Edit ]
	unsigned long                                      BACKUP_bEnabled:1;                                		// 0x03D8 ( 0x0004 )  [0x00000200]
	unsigned long                                      bSoundsPrecached:1;                               		// 0x03D8 ( 0x0004 )  [0x00000400]
	unsigned long                                      bResetting:1;                                     		// 0x03D8 ( 0x0004 )  [0x00000800]
	unsigned char                                      VehicleTeam;                                      		// 0x03DC ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      TriggeredFunction;                                		// 0x03DD ( 0x0001 ) [ CPF_Edit ]
	struct FName                                       VehicleTag;                                       		// 0x03E0 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       VehicleEvent;                                     		// 0x03E4 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       VehiclePossessedEvent;                            		// 0x03E8 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     VehicleClassStr;                                  		// 0x03EC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              RespawnDelay;                                     		// 0x03F8 ( 0x0004 ) [ CPF_Edit ]
	int                                                VehicleHealth;                                    		// 0x03FC ( 0x0004 ) [ CPF_Edit ]
	float                                              VehicleDriverDamageMult;                          		// 0x0400 ( 0x0004 ) [ CPF_Edit ]
	float                                              VehicleDamageMomentumScale;                       		// 0x0404 ( 0x0004 ) [ CPF_Edit ]
	float                                              VehicleLinkHealMult;                              		// 0x0408 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      Announcement_Destroyed;                           		// 0x040C ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      VehicleAmbientGlow;                               		// 0x0410 ( 0x0001 ) [ CPF_Edit ]
	float                                              AIVisibilityDist;                                 		// 0x0414 ( 0x0004 ) [ CPF_Edit ]
	class AVehicle*                                    Child;                                            		// 0x0418 ( 0x0004 ) 
	float                                              SpawnDelay;                                       		// 0x041C ( 0x0004 ) 
	int                                                MaxSpawnBlockCount;                               		// 0x0420 ( 0x0004 ) [ CPF_Edit ]
	int                                                BlockCount;                                       		// 0x0424 ( 0x0004 ) 
	class AEmitter*                                    BuildEffect;                                      		// 0x0428 ( 0x0004 ) 
	class UClass*                                      BuildEffectClass;                                 		// 0x042C ( 0x0004 ) 
	float                                              RotYawConstrant_Left;                             		// 0x0430 ( 0x0004 ) [ CPF_Edit ]
	float                                              RotYawConstrant_Right;                            		// 0x0434 ( 0x0004 ) [ CPF_Edit ]
	float                                              RotPitchConstant_Up;                              		// 0x0438 ( 0x0004 ) [ CPF_Edit ]
	float                                              RotPitchConstant_Down;                            		// 0x043C ( 0x0004 ) [ CPF_Edit ]
	float                                              RotSpeed_Yaw;                                     		// 0x0440 ( 0x0004 ) [ CPF_Edit ]
	float                                              RotSpeed_Pitch;                                   		// 0x0444 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 void                      ForceSpawnVehicle (  );                           		//  WGame.wBTR_ArrangeTurret.ForceSpawnVehicle
	 void                      ForceDestroyVehicle (  );                         		//  WGame.wBTR_ArrangeTurret.ForceDestroyVehicle
	 void                      PrecacheAnnouncer ( class AAnnouncerVoice* V, bool bRewardSounds );		// [ FUNC_Simulated ] WGame.wBTR_ArrangeTurret.PrecacheAnnouncer
	 void                      eventVehicleDestroyed ( class AVehicle* V );      		// [ FUNC_Event ] WGame.wBTR_ArrangeTurret.VehicleDestroyed
	 void                      eventVehiclePossessed ( class AVehicle* V );      		// [ FUNC_Event ] WGame.wBTR_ArrangeTurret.VehiclePossessed
	 void                      Timer (  );                                       		//  WGame.wBTR_ArrangeTurret.Timer
	 void                      Reset (  );                                       		//  WGame.wBTR_ArrangeTurret.Reset
	 unsigned char             SetVehicleTeam (  );                              		//  WGame.wBTR_ArrangeTurret.SetVehicleTeam
	 void                      VehicleSpawned (  );                              		//  WGame.wBTR_ArrangeTurret.VehicleSpawned
	 void                      SpawnBuildEffect (  );                            		//  WGame.wBTR_ArrangeTurret.SpawnBuildEffect
	 void                      SpawnVehicle ( bool noCollisionFail );            		//  WGame.wBTR_ArrangeTurret.SpawnVehicle
	 void                      Shutdown (  );                                    		//  WGame.wBTR_ArrangeTurret.Shutdown
	 void                      SetEnabled ( bool bNewEnabled );                  		//  WGame.wBTR_ArrangeTurret.SetEnabled
	 void                      eventTrigger ( class AActor* Other, class APawn* EventInstigator );		// [ FUNC_Event ] WGame.wBTR_ArrangeTurret.Trigger
	 bool                      SelfTriggered (  );                               		//  WGame.wBTR_ArrangeTurret.SelfTriggered
	 void                      UpdatePrecacheStaticMeshes (  );                  		// [ FUNC_Simulated ] WGame.wBTR_ArrangeTurret.UpdatePrecacheStaticMeshes
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] WGame.wBTR_ArrangeTurret.UpdatePrecacheMaterials
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] WGame.wBTR_ArrangeTurret.PostBeginPlay
}; // Size: 0x0070

// Class WGame.wBTR_Turret_FNM240
class DLL_IMPORT AwBTR_Turret_FNM240 : public AwBTR_ArrangeTurret
{
public:
	struct FName                                       ObjectiveTag[ 0x06 ];                             		// 0x0448 ( 0x0018 ) [ CPF_Edit ]

	// UScript Functions
	 void                      VehicleSpawned (  );                              		//  WGame.wBTR_Turret_FNM240.VehicleSpawned
}; // Size: 0x0018

// Class WGame.wTurret_Base
class DLL_IMPORT AwTurret_Base : public AActor
{
public:
	float                                              LastUpdateFreq;                                   		// 0x03C8 ( 0x0004 ) 

	// UScript Functions
	 void                      UpdateOverlay (  );                               		// [ FUNC_Simulated ] WGame.wTurret_Base.UpdateOverlay
	 void                      eventTimer (  );                                  		// [ FUNC_Simulated | FUNC_Event ] WGame.wTurret_Base.Timer
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  WGame.wTurret_Base.TakeDamage
	 void                      UpdateSwivelRotation ( struct FRotator TurretRotation );		// [ FUNC_Simulated ] WGame.wTurret_Base.UpdateSwivelRotation
	 void                      UpdateBaseRotation ( struct FRotator TurretRotation );		// [ FUNC_Simulated ] WGame.wTurret_Base.UpdateBaseRotation
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Simulated | FUNC_Event ] WGame.wTurret_Base.PostBeginPlay
}; // Size: 0x0004

// Class WGame.wKillerMessagePlus
class DLL_IMPORT AwKillerMessagePlus : public ALocalMessage
{
public:
	struct FString                                     YouKilled;                                        		// 0x0440 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     YouKilledTrailer;                                 		// 0x044C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  WGame.wKillerMessagePlus.GetString
}; // Size: 0x0018

// Class WGame.wTurret_FNM240_Base
class DLL_IMPORT AwTurret_FNM240_Base : public AwTurret_Base
{
public:

	// UScript Functions
	 void                      UpdateBaseRotation ( struct FRotator TurretRotation );		// [ FUNC_Simulated ] WGame.wTurret_FNM240_Base.UpdateBaseRotation
}; // Size: 0x0000

// Class WGame.wTurret_FNM240_Swivel
class DLL_IMPORT AwTurret_FNM240_Swivel : public AwTurret_Base
{
public:

	// UScript Functions
	 void                      UpdateSwivelRotation ( struct FRotator TurretRotation );		// [ FUNC_Simulated ] WGame.wTurret_FNM240_Swivel.UpdateSwivelRotation
}; // Size: 0x0000

// Class WGame.BulletSplash
class DLL_IMPORT ABulletSplash : public AEmitter
{
public:
}; // Size: 0x0000

// Class WGame.PrecacheGameClient
class DLL_IMPORT UPrecacheGameClient : public UPrecacheInterface
{
public:

	// UScript Functions
	 void                      PrecacheGameSkeletalMeshes ( class ALevelInfo* myLevel );		//  WGame.PrecacheGameClient.PrecacheGameSkeletalMeshes
	 void                      PrecacheGameStaticMeshes ( class ALevelInfo* myLevel );		//  WGame.PrecacheGameClient.PrecacheGameStaticMeshes
	 void                      PrecacheGameTextures ( class ALevelInfo* myLevel );		//  WGame.PrecacheGameClient.PrecacheGameTextures
}; // Size: 0x0000

// Class WGame.wTeamGame
class DLL_IMPORT AwTeamGame : public ATeamGame
{
public:
	struct FString                                     ResultMenuClass;                                  		// 0x15C4 ( 0x000C ) [ CPF_Edit | CPF_Config | CPF_NeedCtorLink ]

	// UScript Functions
	 class ANavigationPoint*   FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName );		//  WGame.wTeamGame.FindPlayerStart
	 void                      GetGameSpecificPurposes ( class AController* Owner, class TArray< class UObject* >* purposes );		//  WGame.wTeamGame.GetGameSpecificPurposes
	 void                      EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );		//  WGame.wTeamGame.EndGame
	 void                      execstatai (  );                                  		// [ FUNC_Exec ] WGame.wTeamGame.statai
	 void                      eventSetOldTeamInfo ( class AGameReplicationInfo* OldGRI );		// [ FUNC_Event ] WGame.wTeamGame.SetOldTeamInfo
	 int                       GetBootySeedValue (  );                           		//  WGame.wTeamGame.GetBootySeedValue
	 void                      StartMatch (  );                                  		//  WGame.wTeamGame.StartMatch
	 void                      CalcResultPoints (  );                            		//  WGame.wTeamGame.CalcResultPoints
	 void                      eventInitGame ( struct FString Options, struct FString* Error );		// [ FUNC_Event ] WGame.wTeamGame.InitGame
	 void                      eventPostLogin ( class APlayerController* NewPlayer );		// [ FUNC_Event ] WGame.wTeamGame.PostLogin
	 void                      PrecacheGameSkeletalMeshes ( class ALevelInfo* myLevel );		//  WGame.wTeamGame.PrecacheGameSkeletalMeshes
	 void                      PrecacheGameStaticMeshes ( class ALevelInfo* myLevel );		//  WGame.wTeamGame.PrecacheGameStaticMeshes
	 void                      PrecacheGameTextures ( class ALevelInfo* myLevel );		//  WGame.wTeamGame.PrecacheGameTextures
}; // Size: 0x000C

// Class WGame.wPurposeAttackTarget
class DLL_IMPORT UwPurposeAttackTarget : public UwPurpose
{
public:

	// UScript Functions
	 float                     GetActivationScore (  );                          		//  WGame.wPurposeAttackTarget.GetActivationScore
	 float                     Evaluate ( class UwState** S );                   		//  WGame.wPurposeAttackTarget.Evaluate
}; // Size: 0x0000

// Class WGame.wPurposeAttackTargetDOM
class DLL_IMPORT UwPurposeAttackTargetDOM : public UwPurposeAttackTarget
{
public:
	float                                              FightDist;                                        		// 0x0050 ( 0x0004 ) 

	// UScript Functions
	 float                     GetActivationScore (  );                          		//  WGame.wPurposeAttackTargetDOM.GetActivationScore
}; // Size: 0x0004

// Class WGame.wPurposeCaptureFlag
class DLL_IMPORT UwPurposeCaptureFlag : public UwPurpose
{
public:

	// UScript Functions
	 float                     GetActivationScore (  );                          		//  WGame.wPurposeCaptureFlag.GetActivationScore
	 float                     Evaluate ( class UwState** S );                   		//  WGame.wPurposeCaptureFlag.Evaluate
}; // Size: 0x0000

// Class WGame.wAction_GotoFlag
class DLL_IMPORT UwAction_GotoFlag : public UwAction
{
public:
	class AwFlagObjectiveBase*                         flag;                                             		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_GotoFlag.GetGoal
	 void                      WriteFutureState ( class UwFutureState** fs );    		//  WGame.wAction_GotoFlag.WriteFutureState
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_GotoFlag.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_GotoFlag.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_GotoFlag.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_GotoFlag.CheckRequirement
	 void                      ClearReferences (  );                             		//  WGame.wAction_GotoFlag.ClearReferences
	 class UwAction_GotoFlag*  Init ( class AwFlagObjectiveBase* inFlag );       		//  WGame.wAction_GotoFlag.Init
}; // Size: 0x0004

// Class WGame.wAction_CaptureFlag
class DLL_IMPORT UwAction_CaptureFlag : public UwAction
{
public:
	class AwFlagObjectiveBase*                         flag;                                             		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 class UGoal*              GetGoal ( class AwAIBotBase* Owner );             		//  WGame.wAction_CaptureFlag.GetGoal
	 void                      WriteFutureState ( class UwFutureState** fs );    		//  WGame.wAction_CaptureFlag.WriteFutureState
	 void                      Sim_PostEffect ( class UwState* ws );             		//  WGame.wAction_CaptureFlag.Sim_PostEffect
	 void                      Sim_PreEffect ( class UwState* ws );              		//  WGame.wAction_CaptureFlag.Sim_PreEffect
	 float                     Sim_GetTime ( class UwState* ws );                		//  WGame.wAction_CaptureFlag.Sim_GetTime
	 bool                      CheckRequirement ( class UwState* ws );           		//  WGame.wAction_CaptureFlag.CheckRequirement
	 void                      ClearReferences (  );                             		//  WGame.wAction_CaptureFlag.ClearReferences
	 class UwAction_CaptureFlag* Init ( class AwFlagObjectiveBase* inFlag );       		//  WGame.wAction_CaptureFlag.Init
}; // Size: 0x0004

// Class WGame.Goal_CaptureFlag
class DLL_IMPORT UGoal_CaptureFlag : public UGoal
{
public:
	class AwFlagObjectiveBase*                         flag;                                             		// 0x0088 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_CaptureFlag.ToString
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_CaptureFlag.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_CaptureFlag.Start
	 void                      ClearReferences (  );                             		//  WGame.Goal_CaptureFlag.ClearReferences
	 class UGoal_CaptureFlag*  Init ( class AwAIBotBase* inOwner, class AwFlagObjectiveBase* inFlag );		//  WGame.Goal_CaptureFlag.Init
}; // Size: 0x0004

// Class WGame.Goal_GoToFlag
class DLL_IMPORT UGoal_GoToFlag : public UGoal
{
public:
	class AwFlagObjectiveBase*                         flag;                                             		// 0x0088 ( 0x0004 ) 

	// UScript Functions
	 struct FString            ToString (  );                                    		//  WGame.Goal_GoToFlag.ToString
	 unsigned char             ActualWork ( float dt );                          		//  WGame.Goal_GoToFlag.ActualWork
	 void                      Start (  );                                       		//  WGame.Goal_GoToFlag.Start
	 void                      ClearReferences (  );                             		//  WGame.Goal_GoToFlag.ClearReferences
	 class UGoal_GoToFlag*     Init ( class AwAIBotBase* inOwner, class AwFlagObjectiveBase* inFlag );		//  WGame.Goal_GoToFlag.Init
}; // Size: 0x0004

// Class WGame.wTeamRoster
class DLL_IMPORT AwTeamRoster : public AUnrealTeamInfo
{
public:

	// UScript Functions
	 bool                      BelongsOnTeam ( class UClass* PawnClass );        		//  WGame.wTeamRoster.BelongsOnTeam
	 bool                      AlreadyExistsEntry ( struct FString CharacterName, bool bNoRecursion );		//  WGame.wTeamRoster.AlreadyExistsEntry
	 bool                      AvailableRecord ( struct FString MenuString );    		//  WGame.wTeamRoster.AvailableRecord
	 class URosterEntry*       GetRandomPlayer (  );                             		//  WGame.wTeamRoster.GetRandomPlayer
	 void                      FillPlayerTeam ( class UGameProfile* G );         		//  WGame.wTeamRoster.FillPlayerTeam
	 void                      Initialize ( int TeamBots );                      		//  WGame.wTeamRoster.Initialize
	 class URosterEntry*       GetNamedBot ( struct FString botname );           		//  WGame.wTeamRoster.GetNamedBot
	 void                      PostBeginPlay (  );                               		//  WGame.wTeamRoster.PostBeginPlay
}; // Size: 0x0000

#ifdef _MSC_VER
#pragma pack ( pop )
#endif

