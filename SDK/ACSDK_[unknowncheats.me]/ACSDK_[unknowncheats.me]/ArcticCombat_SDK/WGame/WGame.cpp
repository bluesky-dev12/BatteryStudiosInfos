#include "stdafx.h"
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : WGame
# >    File : Code.cpp
# ======================================================================================== #
*/

/*void AwAILevel::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	AwAILevel_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*void AwAILevel::BotsLovePeace (  )
{
	static UFunction* pBotsLovePeace = 0;
	AwAILevel_execBotsLovePeace_Parms parms;

	if ( !pBotsLovePeace )
		pBotsLovePeace = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.BotsLovePeace" );

	this->ProcessEvent ( pBotsLovePeace, &parms, NULL );

}*/

/*void AwAILevel::execResetNames (  )
{
	static UFunction* pResetNames = 0;
	AwAILevel_execResetNames_Parms parms;

	if ( !pResetNames )
		pResetNames = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.ResetNames" );

	this->ProcessEvent ( pResetNames, &parms, NULL );

}*/

/*class UwNPCItemGroupParam* AwAILevel::GetItemParamByGroupID ( int GroupID )
{
	static UFunction* pGetItemParamByGroupID = 0;
	AwAILevel_execGetItemParamByGroupID_Parms parms;

	if ( !pGetItemParamByGroupID )
		pGetItemParamByGroupID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.GetItemParamByGroupID" );

	parms.GroupID = GroupID;
	this->ProcessEvent ( pGetItemParamByGroupID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AwAILevel::GetName ( int NameGroupID )
{
	static UFunction* pGetName = 0;
	AwAILevel_execGetName_Parms parms;

	if ( !pGetName )
		pGetName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.GetName" );

	parms.NameGroupID = NameGroupID;
	this->ProcessEvent ( pGetName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwAILevel::KillBot ( class AAIController* Bot )
{
	static UFunction* pKillBot = 0;
	AwAILevel_execKillBot_Parms parms;

	if ( !pKillBot )
		pKillBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.KillBot" );

	parms.Bot = Bot;
	this->ProcessEvent ( pKillBot, &parms, NULL );

}*/

/*void AwAILevel::KillBots ( int Num )
{
	static UFunction* pKillBots = 0;
	AwAILevel_execKillBots_Parms parms;

	if ( !pKillBots )
		pKillBots = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.KillBots" );

	parms.Num = Num;
	this->ProcessEvent ( pKillBots, &parms, NULL );

}*/

/*void AwAILevel::KillBotsTeam ( int Num, int inTeam )
{
	static UFunction* pKillBotsTeam = 0;
	AwAILevel_execKillBotsTeam_Parms parms;

	if ( !pKillBotsTeam )
		pKillBotsTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.KillBotsTeam" );

	parms.Num = Num;
	parms.inTeam = inTeam;
	this->ProcessEvent ( pKillBotsTeam, &parms, NULL );

}*/

/*void AwAILevel::RegisterBot ( class AwAIBotBase* Bot )
{
	static UFunction* pRegisterBot = 0;
	AwAILevel_execRegisterBot_Parms parms;

	if ( !pRegisterBot )
		pRegisterBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.RegisterBot" );

	parms.Bot = Bot;
	this->ProcessEvent ( pRegisterBot, &parms, NULL );

}*/

/*class UwNPCActions* AwAILevel::GetNPCAction ( int ActionGroupID )
{
	static UFunction* pGetNPCAction = 0;
	AwAILevel_execGetNPCAction_Parms parms;

	if ( !pGetNPCAction )
		pGetNPCAction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.GetNPCAction" );

	parms.ActionGroupID = ActionGroupID;
	this->ProcessEvent ( pGetNPCAction, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwAILevel::ActionExists ( int ActionGroupID, struct FString Action )
{
	static UFunction* pActionExists = 0;
	AwAILevel_execActionExists_Parms parms;

	if ( !pActionExists )
		pActionExists = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.ActionExists" );

	parms.ActionGroupID = ActionGroupID;
	parms.Action = Action;
	this->ProcessEvent ( pActionExists, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwNPCParam* AwAILevel::GetNPCParam ( int Grade )
{
	static UFunction* pGetNPCParam = 0;
	AwAILevel_execGetNPCParam_Parms parms;

	if ( !pGetNPCParam )
		pGetNPCParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.GetNPCParam" );

	parms.Grade = Grade;
	this->ProcessEvent ( pGetNPCParam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwNPCParam* AwAILevel::GetNPCParamByNPCID ( int NPCID )
{
	static UFunction* pGetNPCParamByNPCID = 0;
	AwAILevel_execGetNPCParamByNPCID_Parms parms;

	if ( !pGetNPCParamByNPCID )
		pGetNPCParamByNPCID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.GetNPCParamByNPCID" );

	parms.NPCID = NPCID;
	this->ProcessEvent ( pGetNPCParamByNPCID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwAILevel::UpdateInfluenceListScript (  )
{
	static UFunction* pUpdateInfluenceListScript = 0;
	AwAILevel_execUpdateInfluenceListScript_Parms parms;

	if ( !pUpdateInfluenceListScript )
		pUpdateInfluenceListScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.UpdateInfluenceListScript" );

	this->ProcessEvent ( pUpdateInfluenceListScript, &parms, NULL );

}*/

/*void AwAILevel::UpdateInfluenceList (  )
{
	static UFunction* pUpdateInfluenceList = 0;
	AwAILevel_execUpdateInfluenceList_Parms parms;

	if ( !pUpdateInfluenceList )
		pUpdateInfluenceList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.UpdateInfluenceList" );

	this->ProcessEvent ( pUpdateInfluenceList, &parms, NULL );

}*/

/*void AwAILevel::UpdateInfluenceListNative (  )
{
	static UFunction* pUpdateInfluenceListNative = 0;
	AwAILevel_execUpdateInfluenceListNative_Parms parms;

	if ( !pUpdateInfluenceListNative )
		pUpdateInfluenceListNative = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.UpdateInfluenceListNative" );

	this->ProcessEvent ( pUpdateInfluenceListNative, &parms, NULL );

}*/

/*void AwAILevel::UpdateAllNavs (  )
{
	static UFunction* pUpdateAllNavs = 0;
	AwAILevel_execUpdateAllNavs_Parms parms;

	if ( !pUpdateAllNavs )
		pUpdateAllNavs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.UpdateAllNavs" );

	this->ProcessEvent ( pUpdateAllNavs, &parms, NULL );

}*/

/*class ANavigationPoint* AwAILevel::GetRandomDestFromInfluence ( unsigned char inTeam )
{
	static UFunction* pGetRandomDestFromInfluence = 0;
	AwAILevel_execGetRandomDestFromInfluence_Parms parms;

	if ( !pGetRandomDestFromInfluence )
		pGetRandomDestFromInfluence = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.GetRandomDestFromInfluence" );

	parms.inTeam = inTeam;
	this->ProcessEvent ( pGetRandomDestFromInfluence, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class ANavigationPoint* AwAILevel::GetRandomDestFromFrontLine ( unsigned char inTeam )
{
	static UFunction* pGetRandomDestFromFrontLine = 0;
	AwAILevel_execGetRandomDestFromFrontLine_Parms parms;

	if ( !pGetRandomDestFromFrontLine )
		pGetRandomDestFromFrontLine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.GetRandomDestFromFrontLine" );

	parms.inTeam = inTeam;
	this->ProcessEvent ( pGetRandomDestFromFrontLine, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwAILevel::InitFrontLine (  )
{
	static UFunction* pInitFrontLine = 0;
	AwAILevel_execInitFrontLine_Parms parms;

	if ( !pInitFrontLine )
		pInitFrontLine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.InitFrontLine" );

	this->ProcessEvent ( pInitFrontLine, &parms, NULL );

}*/

/*void AwAILevel::eventTick ( float dt )
{
	static UFunction* pTick = 0;
	AwAILevel_eventTick_Parms parms;

	if ( !pTick )
		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.Tick" );

	parms.dt = dt;
	this->ProcessEvent ( pTick, &parms, NULL );

}*/

/*void AwAILevel::InitInfluenceList (  )
{
	static UFunction* pInitInfluenceList = 0;
	AwAILevel_execInitInfluenceList_Parms parms;

	if ( !pInitInfluenceList )
		pInitInfluenceList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.InitInfluenceList" );

	this->ProcessEvent ( pInitInfluenceList, &parms, NULL );

}*/

/*void AwAILevel::Initialize (  )
{
	static UFunction* pInitialize = 0;
	AwAILevel_execInitialize_Parms parms;

	if ( !pInitialize )
		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.Initialize" );

	this->ProcessEvent ( pInitialize, &parms, NULL );

}*/

/*void AwAILevel::eventPreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	AwAILevel_eventPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAILevel.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*class UwState* UwState::Create (  )
{
	static UFunction* pCreate = 0;
	UwState_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wState.Create" );

	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UShortMemory::DisplayDebug ( class UCanvas* C, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	UShortMemory_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ShortMemory.DisplayDebug" );

	parms.C = C;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*class UMemoryItem* UShortMemory::eventGetByPawn ( class APawn* P, bool createIfNotFound )
{
	static UFunction* pGetByPawn = 0;
	UShortMemory_eventGetByPawn_Parms parms;

	if ( !pGetByPawn )
		pGetByPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ShortMemory.GetByPawn" );

	parms.P = P;
	parms.createIfNotFound = createIfNotFound;
	this->ProcessEvent ( pGetByPawn, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UMemoryItem* UShortMemory::eventGetByPawn2 ( class APawn* P )
{
	static UFunction* pGetByPawn2 = 0;
	UShortMemory_eventGetByPawn2_Parms parms;

	if ( !pGetByPawn2 )
		pGetByPawn2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ShortMemory.GetByPawn2" );

	parms.P = P;
	this->ProcessEvent ( pGetByPawn2, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UShortMemory::RemoveByPawn ( class APawn* P )
{
	static UFunction* pRemoveByPawn = 0;
	UShortMemory_execRemoveByPawn_Parms parms;

	if ( !pRemoveByPawn )
		pRemoveByPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ShortMemory.RemoveByPawn" );

	parms.P = P;
	this->ProcessEvent ( pRemoveByPawn, &parms, NULL );

}*/

/*void UShortMemory::RemoveAll (  )
{
	static UFunction* pRemoveAll = 0;
	UShortMemory_execRemoveAll_Parms parms;

	if ( !pRemoveAll )
		pRemoveAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ShortMemory.RemoveAll" );

	this->ProcessEvent ( pRemoveAll, &parms, NULL );

}*/

/*void UShortMemory::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UShortMemory_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ShortMemory.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*void UShortMemory::RemoveMemoriesOverRetentionTime (  )
{
	static UFunction* pRemoveMemoriesOverRetentionTime = 0;
	UShortMemory_execRemoveMemoriesOverRetentionTime_Parms parms;

	if ( !pRemoveMemoriesOverRetentionTime )
		pRemoveMemoriesOverRetentionTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ShortMemory.RemoveMemoriesOverRetentionTime" );

	this->ProcessEvent ( pRemoveMemoriesOverRetentionTime, &parms, NULL );

}*/

/*bool UShortMemory::ByVision2 ( class APawn* P, class AController* C )
{
	static UFunction* pByVision2 = 0;
	UShortMemory_execByVision2_Parms parms;

	if ( !pByVision2 )
		pByVision2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ShortMemory.ByVision2" );

	parms.P = P;
	parms.C = C;
	this->ProcessEvent ( pByVision2, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UShortMemory::ByVision ( class APawn* P )
{
	static UFunction* pByVision = 0;
	UShortMemory_execByVision_Parms parms;

	if ( !pByVision )
		pByVision = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ShortMemory.ByVision" );

	parms.P = P;
	this->ProcessEvent ( pByVision, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UShortMemory::BySound ( class APawn* P, float Loudness )
{
	static UFunction* pBySound = 0;
	UShortMemory_execBySound_Parms parms;

	if ( !pBySound )
		pBySound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ShortMemory.BySound" );

	parms.P = P;
	parms.Loudness = Loudness;
	this->ProcessEvent ( pBySound, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UShortMemory::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UShortMemory_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ShortMemory.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*void UShortMemory::Update ( float dt )
{
	static UFunction* pUpdate = 0;
	UShortMemory_execUpdate_Parms parms;

	if ( !pUpdate )
		pUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ShortMemory.Update" );

	parms.dt = dt;
	this->ProcessEvent ( pUpdate, &parms, NULL );

}*/

/*class UShortMemory* UShortMemory::Create ( class AwAIBotBase* inOwner, float inResponseTime )
{
	static UFunction* pCreate = 0;
	UShortMemory_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ShortMemory.Create" );

	parms.inOwner = inOwner;
	parms.inResponseTime = inResponseTime;
	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UMemoryItem::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UMemoryItem_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.MemoryItem.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*void UMemoryItem::Update (  )
{
	static UFunction* pUpdate = 0;
	UMemoryItem_execUpdate_Parms parms;

	if ( !pUpdate )
		pUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.MemoryItem.Update" );

	this->ProcessEvent ( pUpdate, &parms, NULL );

}*/

/*void UMemoryItem::AddKnownPosition ( struct FVector V, float t )
{
	static UFunction* pAddKnownPosition = 0;
	UMemoryItem_execAddKnownPosition_Parms parms;

	if ( !pAddKnownPosition )
		pAddKnownPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.MemoryItem.AddKnownPosition" );

	parms.V = V;
	parms.t = t;
	this->ProcessEvent ( pAddKnownPosition, &parms, NULL );

}*/

/*void UMemoryItem::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UMemoryItem_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.MemoryItem.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*class UMemoryItem* UMemoryItem::Create ( class AwAIBotBase* inOwner, class APawn* P )
{
	static UFunction* pCreate = 0;
	UMemoryItem_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.MemoryItem.Create" );

	parms.inOwner = inOwner;
	parms.P = P;
	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwAIBotBase::DisplayDebug_Path ( class UCanvas* C, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug_Path = 0;
	AwAIBotBase_execDisplayDebug_Path_Parms parms;

	if ( !pDisplayDebug_Path )
		pDisplayDebug_Path = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.DisplayDebug_Path" );

	parms.C = C;
	this->ProcessEvent ( pDisplayDebug_Path, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*void AwAIBotBase::DisplayDebug ( class UCanvas* C, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	AwAIBotBase_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.DisplayDebug" );

	parms.C = C;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*int AwAIBotBase::SetFireYaw ( int FireYaw )
{
	static UFunction* pSetFireYaw = 0;
	AwAIBotBase_execSetFireYaw_Parms parms;

	if ( !pSetFireYaw )
		pSetFireYaw = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.SetFireYaw" );

	parms.FireYaw = FireYaw;
	this->ProcessEvent ( pSetFireYaw, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FRotator AwAIBotBase::AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError )
{
	static UFunction* pAdjustAim = 0;
	AwAIBotBase_execAdjustAim_Parms parms;

	if ( !pAdjustAim )
		pAdjustAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.AdjustAim" );

	parms.FiredAmmunition = FiredAmmunition;
	parms.projStart = projStart;
	parms.AimError = AimError;
	this->ProcessEvent ( pAdjustAim, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwAIBotBase::CallHelicopter ( bool ignoreSupply )
{
	static UFunction* pCallHelicopter = 0;
	AwAIBotBase_execCallHelicopter_Parms parms;

	if ( !pCallHelicopter )
		pCallHelicopter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.CallHelicopter" );

	parms.ignoreSupply = ignoreSupply;
	this->ProcessEvent ( pCallHelicopter, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwAIBotBase::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
{
	static UFunction* pNotifyKilled = 0;
	AwAIBotBase_execNotifyKilled_Parms parms;

	if ( !pNotifyKilled )
		pNotifyKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.NotifyKilled" );

	parms.Killer = Killer;
	parms.Killed = Killed;
	parms.KilledPawn = KilledPawn;
	this->ProcessEvent ( pNotifyKilled, &parms, NULL );

}*/

/*void AwAIBotBase::HearNoise ( float Loudness, class AActor* NoiseMaker )
{
	static UFunction* pHearNoise = 0;
	AwAIBotBase_execHearNoise_Parms parms;

	if ( !pHearNoise )
		pHearNoise = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.HearNoise" );

	parms.Loudness = Loudness;
	parms.NoiseMaker = NoiseMaker;
	this->ProcessEvent ( pHearNoise, &parms, NULL );

}*/

/*void AwAIBotBase::eventSeePlayer ( class APawn* SeenPlayer )
{
	static UFunction* pSeePlayer = 0;
	AwAIBotBase_eventSeePlayer_Parms parms;

	if ( !pSeePlayer )
		pSeePlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.SeePlayer" );

	parms.SeenPlayer = SeenPlayer;
	this->ProcessEvent ( pSeePlayer, &parms, NULL );

}*/

/*void AwAIBotBase::NotifyVehicle ( class AVehicle* V )
{
	static UFunction* pNotifyVehicle = 0;
	AwAIBotBase_execNotifyVehicle_Parms parms;

	if ( !pNotifyVehicle )
		pNotifyVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.NotifyVehicle" );

	parms.V = V;
	this->ProcessEvent ( pNotifyVehicle, &parms, NULL );

}*/

/*void AwAIBotBase::OnMemoryVisibleChanged (  )
{
	static UFunction* pOnMemoryVisibleChanged = 0;
	AwAIBotBase_execOnMemoryVisibleChanged_Parms parms;

	if ( !pOnMemoryVisibleChanged )
		pOnMemoryVisibleChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.OnMemoryVisibleChanged" );

	this->ProcessEvent ( pOnMemoryVisibleChanged, &parms, NULL );

}*/

/*void AwAIBotBase::HandleMessage ( struct FString Msg )
{
	static UFunction* pHandleMessage = 0;
	AwAIBotBase_execHandleMessage_Parms parms;

	if ( !pHandleMessage )
		pHandleMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.HandleMessage" );

	parms.Msg = Msg;
	this->ProcessEvent ( pHandleMessage, &parms, NULL );

}*/

/*void AwAIBotBase::wClientFlash ( float fTime )
{
	static UFunction* pwClientFlash = 0;
	AwAIBotBase_execwClientFlash_Parms parms;

	if ( !pwClientFlash )
		pwClientFlash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.wClientFlash" );

	parms.fTime = fTime;
	this->ProcessEvent ( pwClientFlash, &parms, NULL );

}*/

/*bool AwAIBotBase::IsProning (  )
{
	static UFunction* pIsProning = 0;
	AwAIBotBase_execIsProning_Parms parms;

	if ( !pIsProning )
		pIsProning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.IsProning" );

	this->ProcessEvent ( pIsProning, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwAIBotBase::TryProne (  )
{
	static UFunction* pTryProne = 0;
	AwAIBotBase_execTryProne_Parms parms;

	if ( !pTryProne )
		pTryProne = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.TryProne" );

	this->ProcessEvent ( pTryProne, &parms, NULL );

}*/

/*bool AwAIBotBase::IsCrouching (  )
{
	static UFunction* pIsCrouching = 0;
	AwAIBotBase_execIsCrouching_Parms parms;

	if ( !pIsCrouching )
		pIsCrouching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.IsCrouching" );

	this->ProcessEvent ( pIsCrouching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwAIBotBase::TryCrouch (  )
{
	static UFunction* pTryCrouch = 0;
	AwAIBotBase_execTryCrouch_Parms parms;

	if ( !pTryCrouch )
		pTryCrouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.TryCrouch" );

	this->ProcessEvent ( pTryCrouch, &parms, NULL );

}*/

/*bool AwAIBotBase::IsStandingUp (  )
{
	static UFunction* pIsStandingUp = 0;
	AwAIBotBase_execIsStandingUp_Parms parms;

	if ( !pIsStandingUp )
		pIsStandingUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.IsStandingUp" );

	this->ProcessEvent ( pIsStandingUp, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwAIBotBase::TryStandUp (  )
{
	static UFunction* pTryStandUp = 0;
	AwAIBotBase_execTryStandUp_Parms parms;

	if ( !pTryStandUp )
		pTryStandUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.TryStandUp" );

	this->ProcessEvent ( pTryStandUp, &parms, NULL );

}*/

/*bool AwAIBotBase::IsSprinting (  )
{
	static UFunction* pIsSprinting = 0;
	AwAIBotBase_execIsSprinting_Parms parms;

	if ( !pIsSprinting )
		pIsSprinting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.IsSprinting" );

	this->ProcessEvent ( pIsSprinting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwAIBotBase::SetSprint ( bool Value )
{
	static UFunction* pSetSprint = 0;
	AwAIBotBase_execSetSprint_Parms parms;

	if ( !pSetSprint )
		pSetSprint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.SetSprint" );

	parms.Value = Value;
	this->ProcessEvent ( pSetSprint, &parms, NULL );

}*/

/*void AwAIBotBase::PawnDied ( class APawn* P )
{
	static UFunction* pPawnDied = 0;
	AwAIBotBase_execPawnDied_Parms parms;

	if ( !pPawnDied )
		pPawnDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.PawnDied" );

	parms.P = P;
	this->ProcessEvent ( pPawnDied, &parms, NULL );

}*/

/*void AwAIBotBase::ClientOnEndWaitingForStart (  )
{
	static UFunction* pClientOnEndWaitingForStart = 0;
	AwAIBotBase_execClientOnEndWaitingForStart_Parms parms;

	if ( !pClientOnEndWaitingForStart )
		pClientOnEndWaitingForStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.ClientOnEndWaitingForStart" );

	this->ProcessEvent ( pClientOnEndWaitingForStart, &parms, NULL );

}*/

/*void AwAIBotBase::ZeroExtraCost (  )
{
	static UFunction* pZeroExtraCost = 0;
	AwAIBotBase_execZeroExtraCost_Parms parms;

	if ( !pZeroExtraCost )
		pZeroExtraCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.ZeroExtraCost" );

	this->ProcessEvent ( pZeroExtraCost, &parms, NULL );

}*/

/*void AwAIBotBase::CopyNavExtraCost (  )
{
	static UFunction* pCopyNavExtraCost = 0;
	AwAIBotBase_execCopyNavExtraCost_Parms parms;

	if ( !pCopyNavExtraCost )
		pCopyNavExtraCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.CopyNavExtraCost" );

	this->ProcessEvent ( pCopyNavExtraCost, &parms, NULL );

}*/

/*void AwAIBotBase::UpdateNavDetourExtraCostScript ( struct FVector S, struct FVector E )
{
	static UFunction* pUpdateNavDetourExtraCostScript = 0;
	AwAIBotBase_execUpdateNavDetourExtraCostScript_Parms parms;

	if ( !pUpdateNavDetourExtraCostScript )
		pUpdateNavDetourExtraCostScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.UpdateNavDetourExtraCostScript" );

	parms.S = S;
	parms.E = E;
	this->ProcessEvent ( pUpdateNavDetourExtraCostScript, &parms, NULL );

}*/

/*void AwAIBotBase::UpdateNavDetourExtraCost ( struct FVector S, struct FVector E )
{
	static UFunction* pUpdateNavDetourExtraCost = 0;
	AwAIBotBase_execUpdateNavDetourExtraCost_Parms parms;

	if ( !pUpdateNavDetourExtraCost )
		pUpdateNavDetourExtraCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.UpdateNavDetourExtraCost" );

	parms.S = S;
	parms.E = E;
	this->ProcessEvent ( pUpdateNavDetourExtraCost, &parms, NULL );

}*/

/*void AwAIBotBase::UpdateNavDetourExtraCostNative ( struct FVector S, struct FVector E )
{
	static UFunction* pUpdateNavDetourExtraCostNative = 0;
	AwAIBotBase_execUpdateNavDetourExtraCostNative_Parms parms;

	if ( !pUpdateNavDetourExtraCostNative )
		pUpdateNavDetourExtraCostNative = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.UpdateNavDetourExtraCostNative" );

	parms.S = S;
	parms.E = E;
	this->ProcessEvent ( pUpdateNavDetourExtraCostNative, &parms, NULL );

}*/

/*void AwAIBotBase::InitNavExtraCost (  )
{
	static UFunction* pInitNavExtraCost = 0;
	AwAIBotBase_execInitNavExtraCost_Parms parms;

	if ( !pInitNavExtraCost )
		pInitNavExtraCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.InitNavExtraCost" );

	this->ProcessEvent ( pInitNavExtraCost, &parms, NULL );

}*/

/*void AwAIBotBase::execCmd ( struct FString P1, struct FString P2, struct FString p3, struct FString p4, struct FString p5 )
{
	static UFunction* pCmd = 0;
	AwAIBotBase_execCmd_Parms parms;

	if ( !pCmd )
		pCmd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.Cmd" );

	parms.P1 = P1;
	parms.P2 = P2;
	parms.p3 = p3;
	parms.p4 = p4;
	parms.p5 = p5;
	this->ProcessEvent ( pCmd, &parms, NULL );

}*/

/*float AwAIBotBase::EvaluateState ( class UwState* S )
{
	static UFunction* pEvaluateState = 0;
	AwAIBotBase_execEvaluateState_Parms parms;

	if ( !pEvaluateState )
		pEvaluateState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.EvaluateState" );

	parms.S = S;
	this->ProcessEvent ( pEvaluateState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwAIBotBase::SetupWStateScript ( class UwState** S )
{
	static UFunction* pSetupWStateScript = 0;
	AwAIBotBase_execSetupWStateScript_Parms parms;

	if ( !pSetupWStateScript )
		pSetupWStateScript = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.SetupWStateScript" );

	parms.S = *S;
	this->ProcessEvent ( pSetupWStateScript, &parms, NULL );

	*S = parms.S;
}*/

/*void AwAIBotBase::SetupWState ( class UwState** S )
{
	static UFunction* pSetupWState = 0;
	AwAIBotBase_execSetupWState_Parms parms;

	if ( !pSetupWState )
		pSetupWState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.SetupWState" );

	parms.S = *S;
	this->ProcessEvent ( pSetupWState, &parms, NULL );

	*S = parms.S;
}*/

/*void AwAIBotBase::SetupWStateNative ( class UwState** S )
{
	static UFunction* pSetupWStateNative = 0;
	AwAIBotBase_execSetupWStateNative_Parms parms;

	if ( !pSetupWStateNative )
		pSetupWStateNative = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.SetupWStateNative" );

	parms.S = *S;
	this->ProcessEvent ( pSetupWStateNative, &parms, NULL );

	*S = parms.S;
}*/

/*void AwAIBotBase::NotifyAddDefaultInventory (  )
{
	static UFunction* pNotifyAddDefaultInventory = 0;
	AwAIBotBase_execNotifyAddDefaultInventory_Parms parms;

	if ( !pNotifyAddDefaultInventory )
		pNotifyAddDefaultInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.NotifyAddDefaultInventory" );

	this->ProcessEvent ( pNotifyAddDefaultInventory, &parms, NULL );

}*/

/*void AwAIBotBase::NotifyAddInventory ( class AInventory* NewItem )
{
	static UFunction* pNotifyAddInventory = 0;
	AwAIBotBase_execNotifyAddInventory_Parms parms;

	if ( !pNotifyAddInventory )
		pNotifyAddInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.NotifyAddInventory" );

	parms.NewItem = NewItem;
	this->ProcessEvent ( pNotifyAddInventory, &parms, NULL );

}*/

/*void AwAIBotBase::SetupWeapons ( class APawn* aPawn )
{
	static UFunction* pSetupWeapons = 0;
	AwAIBotBase_execSetupWeapons_Parms parms;

	if ( !pSetupWeapons )
		pSetupWeapons = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.SetupWeapons" );

	parms.aPawn = aPawn;
	this->ProcessEvent ( pSetupWeapons, &parms, NULL );

}*/

/*void AwAIBotBase::SetPawnClass ( struct FString inClass, struct FString InCharacter )
{
	static UFunction* pSetPawnClass = 0;
	AwAIBotBase_execSetPawnClass_Parms parms;

	if ( !pSetPawnClass )
		pSetPawnClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.SetPawnClass" );

	parms.inClass = inClass;
	parms.InCharacter = InCharacter;
	this->ProcessEvent ( pSetPawnClass, &parms, NULL );

}*/

/*void AwAIBotBase::SetName ( class UwNPCParam* Param )
{
	static UFunction* pSetName = 0;
	AwAIBotBase_execSetName_Parms parms;

	if ( !pSetName )
		pSetName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.SetName" );

	parms.Param = Param;
	this->ProcessEvent ( pSetName, &parms, NULL );

}*/

/*void AwAIBotBase::InitBot ( int Grade )
{
	static UFunction* pInitBot = 0;
	AwAIBotBase_execInitBot_Parms parms;

	if ( !pInitBot )
		pInitBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.InitBot" );

	parms.Grade = Grade;
	this->ProcessEvent ( pInitBot, &parms, NULL );

}*/

/*void AwAIBotBase::eventPostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwAIBotBase_eventPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwAIBotBase::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	AwAIBotBase_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*bool AwAIBotBase::WeaponFireAgain ( float RefireRate, bool bFinishedFire )
{
	static UFunction* pWeaponFireAgain = 0;
	AwAIBotBase_execWeaponFireAgain_Parms parms;

	if ( !pWeaponFireAgain )
		pWeaponFireAgain = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBotBase.WeaponFireAgain" );

	parms.RefireRate = RefireRate;
	parms.bFinishedFire = bFinishedFire;
	this->ProcessEvent ( pWeaponFireAgain, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwPlayerInfo::Setup ( class AwPawn* P, struct FPlayerRecord Rec )
{
	static UFunction* pSetup = 0;
	UwPlayerInfo_execSetup_Parms parms;

	if ( !pSetup )
		pSetup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayerInfo.Setup" );

	parms.P = P;
	parms.Rec = Rec;
	this->ProcessEvent ( pSetup, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwPlayerInfo::SetupPawn ( class AwPawn* P, int iBodyItemID, int iHeadItemID, int iHelmetItemID, int iAcceItemID, int iTeamIndex )
{
	static UFunction* pSetupPawn = 0;
	UwPlayerInfo_execSetupPawn_Parms parms;

	if ( !pSetupPawn )
		pSetupPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayerInfo.SetupPawn" );

	parms.P = P;
	parms.iBodyItemID = iBodyItemID;
	parms.iHeadItemID = iHeadItemID;
	parms.iHelmetItemID = iHelmetItemID;
	parms.iAcceItemID = iAcceItemID;
	parms.iTeamIndex = iTeamIndex;
	this->ProcessEvent ( pSetupPawn, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int USpeciesType::GetOffsetForSequence ( struct FName Sequence )
{
	static UFunction* pGetOffsetForSequence = 0;
	USpeciesType_execGetOffsetForSequence_Parms parms;

	if ( !pGetOffsetForSequence )
		pGetOffsetForSequence = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.SpeciesType.GetOffsetForSequence" );

	parms.Sequence = Sequence;
	this->ProcessEvent ( pGetOffsetForSequence, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool USpeciesType::Setup ( class AwPawn* P, struct FPlayerRecord Rec )
{
	static UFunction* pSetup = 0;
	USpeciesType_execSetup_Parms parms;

	if ( !pSetup )
		pSetup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.SpeciesType.Setup" );

	parms.P = P;
	parms.Rec = Rec;
	this->ProcessEvent ( pSetup, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void USpeciesType::SetTeamSkin ( class AwPawn* P, struct FPlayerRecord Rec, int TeamNum )
{
	static UFunction* pSetTeamSkin = 0;
	USpeciesType_execSetTeamSkin_Parms parms;

	if ( !pSetTeamSkin )
		pSetTeamSkin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.SpeciesType.SetTeamSkin" );

	parms.P = P;
	parms.Rec = Rec;
	parms.TeamNum = TeamNum;
	this->ProcessEvent ( pSetTeamSkin, &parms, NULL );

}*/

/*struct FString USpeciesType::GetRagSkelName ( struct FString MeshName )
{
	static UFunction* pGetRagSkelName = 0;
	USpeciesType_execGetRagSkelName_Parms parms;

	if ( !pGetRagSkelName )
		pGetRagSkelName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.SpeciesType.GetRagSkelName" );

	parms.MeshName = MeshName;
	this->ProcessEvent ( pGetRagSkelName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void USpeciesType::ModifyPawn ( class APawn* P )
{
	static UFunction* pModifyPawn = 0;
	USpeciesType_execModifyPawn_Parms parms;

	if ( !pModifyPawn )
		pModifyPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.SpeciesType.ModifyPawn" );

	parms.P = P;
	this->ProcessEvent ( pModifyPawn, &parms, NULL );

}*/

/*int USpeciesType::ModifyImpartedDamage ( int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType )
{
	static UFunction* pModifyImpartedDamage = 0;
	USpeciesType_execModifyImpartedDamage_Parms parms;

	if ( !pModifyImpartedDamage )
		pModifyImpartedDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.SpeciesType.ModifyImpartedDamage" );

	parms.Damage = Damage;
	parms.injured = injured;
	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.Momentum = Momentum;
	parms.DamageType = DamageType;
	this->ProcessEvent ( pModifyImpartedDamage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int USpeciesType::ModifyReceivedDamage ( int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType )
{
	static UFunction* pModifyReceivedDamage = 0;
	USpeciesType_execModifyReceivedDamage_Parms parms;

	if ( !pModifyReceivedDamage )
		pModifyReceivedDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.SpeciesType.ModifyReceivedDamage" );

	parms.Damage = Damage;
	parms.injured = injured;
	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.Momentum = Momentum;
	parms.DamageType = DamageType;
	this->ProcessEvent ( pModifyReceivedDamage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void USpeciesType::LoadResources ( struct FPlayerRecord Rec, class ALevelInfo* Level, class APlayerReplicationInfo* PRI, int TeamNum )
{
	static UFunction* pLoadResources = 0;
	USpeciesType_execLoadResources_Parms parms;

	if ( !pLoadResources )
		pLoadResources = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.SpeciesType.LoadResources" );

	parms.Rec = Rec;
	parms.Level = Level;
	parms.PRI = PRI;
	parms.TeamNum = TeamNum;
	this->ProcessEvent ( pLoadResources, &parms, NULL );

}*/

/*struct FString USpeciesType::GetVoiceType ( bool bIsFemale, class ALevelInfo* Level )
{
	static UFunction* pGetVoiceType = 0;
	USpeciesType_execGetVoiceType_Parms parms;

	if ( !pGetVoiceType )
		pGetVoiceType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.SpeciesType.GetVoiceType" );

	parms.bIsFemale = bIsFemale;
	parms.Level = Level;
	this->ProcessEvent ( pGetVoiceType, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class TArray< class UClass* > UwUtil::GetMutatorClasses ( class TArray< struct FString > MutClassNames )
{
	static UFunction* pGetMutatorClasses = 0;
	UwUtil_execGetMutatorClasses_Parms parms;

	if ( !pGetMutatorClasses )
		pGetMutatorClasses = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.GetMutatorClasses" );

	parms.MutClassNames = MutClassNames;
	this->ProcessEvent ( pGetMutatorClasses, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::GetTeamInfoSalaryFor ( class AUnrealTeamInfo* UT, int lineupsize )
{
	static UFunction* pGetTeamInfoSalaryFor = 0;
	UwUtil_execGetTeamInfoSalaryFor_Parms parms;

	if ( !pGetTeamInfoSalaryFor )
		pGetTeamInfoSalaryFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.GetTeamInfoSalaryFor" );

	parms.UT = UT;
	parms.lineupsize = lineupsize;
	this->ProcessEvent ( pGetTeamInfoSalaryFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::GetTeamSalaryFor ( class UGameProfile* GP, int lineupsize )
{
	static UFunction* pGetTeamSalaryFor = 0;
	UwUtil_execGetTeamSalaryFor_Parms parms;

	if ( !pGetTeamSalaryFor )
		pGetTeamSalaryFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.GetTeamSalaryFor" );

	parms.GP = GP;
	parms.lineupsize = lineupsize;
	this->ProcessEvent ( pGetTeamSalaryFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::TeamArrayTacticsRating ( class TArray< struct FString > Players )
{
	static UFunction* pTeamArrayTacticsRating = 0;
	UwUtil_execTeamArrayTacticsRating_Parms parms;

	if ( !pTeamArrayTacticsRating )
		pTeamArrayTacticsRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.TeamArrayTacticsRating" );

	parms.Players = Players;
	this->ProcessEvent ( pTeamArrayTacticsRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::TeamInfoTacticsRating ( class AUnrealTeamInfo* UT, int lineupsize )
{
	static UFunction* pTeamInfoTacticsRating = 0;
	UwUtil_execTeamInfoTacticsRating_Parms parms;

	if ( !pTeamInfoTacticsRating )
		pTeamInfoTacticsRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.TeamInfoTacticsRating" );

	parms.UT = UT;
	parms.lineupsize = lineupsize;
	this->ProcessEvent ( pTeamInfoTacticsRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::TeamTacticsRating ( class UGameProfile* GP, int lineupsize )
{
	static UFunction* pTeamTacticsRating = 0;
	UwUtil_execTeamTacticsRating_Parms parms;

	if ( !pTeamTacticsRating )
		pTeamTacticsRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.TeamTacticsRating" );

	parms.GP = GP;
	parms.lineupsize = lineupsize;
	this->ProcessEvent ( pTeamTacticsRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::TeamArrayAgilityRating ( class TArray< struct FString > Players )
{
	static UFunction* pTeamArrayAgilityRating = 0;
	UwUtil_execTeamArrayAgilityRating_Parms parms;

	if ( !pTeamArrayAgilityRating )
		pTeamArrayAgilityRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.TeamArrayAgilityRating" );

	parms.Players = Players;
	this->ProcessEvent ( pTeamArrayAgilityRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::TeamInfoAgilityRating ( class AUnrealTeamInfo* UT, int lineupsize )
{
	static UFunction* pTeamInfoAgilityRating = 0;
	UwUtil_execTeamInfoAgilityRating_Parms parms;

	if ( !pTeamInfoAgilityRating )
		pTeamInfoAgilityRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.TeamInfoAgilityRating" );

	parms.UT = UT;
	parms.lineupsize = lineupsize;
	this->ProcessEvent ( pTeamInfoAgilityRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::TeamAgilityRating ( class UGameProfile* GP, int lineupsize )
{
	static UFunction* pTeamAgilityRating = 0;
	UwUtil_execTeamAgilityRating_Parms parms;

	if ( !pTeamAgilityRating )
		pTeamAgilityRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.TeamAgilityRating" );

	parms.GP = GP;
	parms.lineupsize = lineupsize;
	this->ProcessEvent ( pTeamAgilityRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::TeamArrayAggressivenessRating ( class TArray< struct FString > Players )
{
	static UFunction* pTeamArrayAggressivenessRating = 0;
	UwUtil_execTeamArrayAggressivenessRating_Parms parms;

	if ( !pTeamArrayAggressivenessRating )
		pTeamArrayAggressivenessRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.TeamArrayAggressivenessRating" );

	parms.Players = Players;
	this->ProcessEvent ( pTeamArrayAggressivenessRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::TeamInfoAggressivenessRating ( class AUnrealTeamInfo* UT, int lineupsize )
{
	static UFunction* pTeamInfoAggressivenessRating = 0;
	UwUtil_execTeamInfoAggressivenessRating_Parms parms;

	if ( !pTeamInfoAggressivenessRating )
		pTeamInfoAggressivenessRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.TeamInfoAggressivenessRating" );

	parms.UT = UT;
	parms.lineupsize = lineupsize;
	this->ProcessEvent ( pTeamInfoAggressivenessRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::TeamAggressivenessRating ( class UGameProfile* GP, int lineupsize )
{
	static UFunction* pTeamAggressivenessRating = 0;
	UwUtil_execTeamAggressivenessRating_Parms parms;

	if ( !pTeamAggressivenessRating )
		pTeamAggressivenessRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.TeamAggressivenessRating" );

	parms.GP = GP;
	parms.lineupsize = lineupsize;
	this->ProcessEvent ( pTeamAggressivenessRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::TeamArrayAccuracyRating ( class TArray< struct FString > Players )
{
	static UFunction* pTeamArrayAccuracyRating = 0;
	UwUtil_execTeamArrayAccuracyRating_Parms parms;

	if ( !pTeamArrayAccuracyRating )
		pTeamArrayAccuracyRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.TeamArrayAccuracyRating" );

	parms.Players = Players;
	this->ProcessEvent ( pTeamArrayAccuracyRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::TeamInfoAccuracyRating ( class AUnrealTeamInfo* UT, int lineupsize )
{
	static UFunction* pTeamInfoAccuracyRating = 0;
	UwUtil_execTeamInfoAccuracyRating_Parms parms;

	if ( !pTeamInfoAccuracyRating )
		pTeamInfoAccuracyRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.TeamInfoAccuracyRating" );

	parms.UT = UT;
	parms.lineupsize = lineupsize;
	this->ProcessEvent ( pTeamInfoAccuracyRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::TeamAccuracyRating ( class UGameProfile* GP, int lineupsize )
{
	static UFunction* pTeamAccuracyRating = 0;
	UwUtil_execTeamAccuracyRating_Parms parms;

	if ( !pTeamAccuracyRating )
		pTeamAccuracyRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.TeamAccuracyRating" );

	parms.GP = GP;
	parms.lineupsize = lineupsize;
	this->ProcessEvent ( pTeamAccuracyRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::AggressivenessRating ( struct FPlayerRecord PRE )
{
	static UFunction* pAggressivenessRating = 0;
	UwUtil_execAggressivenessRating_Parms parms;

	if ( !pAggressivenessRating )
		pAggressivenessRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.AggressivenessRating" );

	parms.PRE = PRE;
	this->ProcessEvent ( pAggressivenessRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::TacticsRating ( struct FPlayerRecord PRE )
{
	static UFunction* pTacticsRating = 0;
	UwUtil_execTacticsRating_Parms parms;

	if ( !pTacticsRating )
		pTacticsRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.TacticsRating" );

	parms.PRE = PRE;
	this->ProcessEvent ( pTacticsRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::AgilityRating ( struct FPlayerRecord PRE )
{
	static UFunction* pAgilityRating = 0;
	UwUtil_execAgilityRating_Parms parms;

	if ( !pAgilityRating )
		pAgilityRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.AgilityRating" );

	parms.PRE = PRE;
	this->ProcessEvent ( pAgilityRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::AccuracyRating ( struct FPlayerRecord PRE )
{
	static UFunction* pAccuracyRating = 0;
	UwUtil_execAccuracyRating_Parms parms;

	if ( !pAccuracyRating )
		pAccuracyRating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.AccuracyRating" );

	parms.PRE = PRE;
	this->ProcessEvent ( pAccuracyRating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::RatingModifier ( struct FString CharacterName )
{
	static UFunction* pRatingModifier = 0;
	UwUtil_execRatingModifier_Parms parms;

	if ( !pRatingModifier )
		pRatingModifier = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.RatingModifier" );

	parms.CharacterName = CharacterName;
	this->ProcessEvent ( pRatingModifier, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UwUtil::GetFavoriteWeaponFor ( struct FPlayerRecord PRE )
{
	static UFunction* pGetFavoriteWeaponFor = 0;
	UwUtil_execGetFavoriteWeaponFor_Parms parms;

	if ( !pGetFavoriteWeaponFor )
		pGetFavoriteWeaponFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.GetFavoriteWeaponFor" );

	parms.PRE = PRE;
	this->ProcessEvent ( pGetFavoriteWeaponFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwUtil::GetSalaryFor ( struct FPlayerRecord PRE )
{
	static UFunction* pGetSalaryFor = 0;
	UwUtil_execGetSalaryFor_Parms parms;

	if ( !pGetSalaryFor )
		pGetSalaryFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.GetSalaryFor" );

	parms.PRE = PRE;
	this->ProcessEvent ( pGetSalaryFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FPlayerRecord UwUtil::FindPlayerRecord ( struct FString CharName )
{
	static UFunction* pFindPlayerRecord = 0;
	UwUtil_execFindPlayerRecord_Parms parms;

	if ( !pFindPlayerRecord )
		pFindPlayerRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.FindPlayerRecord" );

	parms.CharName = CharName;
	this->ProcessEvent ( pFindPlayerRecord, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwUtil::GetMutatorList ( class TArray< struct FMutatorRecord > MutatorRecords )
{
	static UFunction* pGetMutatorList = 0;
	UwUtil_execGetMutatorList_Parms parms;

	if ( !pGetMutatorList )
		pGetMutatorList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.GetMutatorList" );

	parms.MutatorRecords = MutatorRecords;
	this->ProcessEvent ( pGetMutatorList, &parms, NULL );

}*/

/*class UDecoText* UwUtil::LoadDecoText ( struct FString PackageName, struct FString DecoTextName, int ColumnCount )
{
	static UFunction* pLoadDecoText = 0;
	UwUtil_execLoadDecoText_Parms parms;

	if ( !pLoadDecoText )
		pLoadDecoText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.LoadDecoText" );

	parms.PackageName = PackageName;
	parms.DecoTextName = DecoTextName;
	parms.ColumnCount = ColumnCount;
	this->ProcessEvent ( pLoadDecoText, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FPlayerRecord UwUtil::FindUPLPlayerRecord ( struct FString CharName )
{
	static UFunction* pFindUPLPlayerRecord = 0;
	UwUtil_execFindUPLPlayerRecord_Parms parms;

	if ( !pFindUPLPlayerRecord )
		pFindUPLPlayerRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.FindUPLPlayerRecord" );

	WORD iNative = pFindUPLPlayerRecord->iNative;
	pFindUPLPlayerRecord->FunctionFlags &= ~FUNC_Native;
	pFindUPLPlayerRecord->iNative = 0;

	parms.CharName = CharName;
	this->ProcessEvent ( pFindUPLPlayerRecord, &parms, NULL );

	pFindUPLPlayerRecord->iNative = iNative;
	pFindUPLPlayerRecord->FunctionFlags |= FUNC_Native;
	return parms.ReturnValue;
}*/

/*struct FPlayerRecord UwUtil::GetPlayerRecord ( int Index )
{
	static UFunction* pGetPlayerRecord = 0;
	UwUtil_execGetPlayerRecord_Parms parms;

	if ( !pGetPlayerRecord )
		pGetPlayerRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.GetPlayerRecord" );

	WORD iNative = pGetPlayerRecord->iNative;
	pGetPlayerRecord->FunctionFlags &= ~FUNC_Native;
	pGetPlayerRecord->iNative = 0;

	parms.Index = Index;
	this->ProcessEvent ( pGetPlayerRecord, &parms, NULL );

	pGetPlayerRecord->iNative = iNative;
	pGetPlayerRecord->FunctionFlags |= FUNC_Native;
	return parms.ReturnValue;
}*/

/*void UwUtil::GetPlayerList ( class TArray< struct FPlayerRecord >* PlayerRecords )
{
	static UFunction* pGetPlayerList = 0;
	UwUtil_execGetPlayerList_Parms parms;

	if ( !pGetPlayerList )
		pGetPlayerList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUtil.GetPlayerList" );

	WORD iNative = pGetPlayerList->iNative;
	pGetPlayerList->FunctionFlags &= ~FUNC_Native;
	pGetPlayerList->iNative = 0;

	parms.PlayerRecords = *PlayerRecords;
	this->ProcessEvent ( pGetPlayerList, &parms, NULL );

	pGetPlayerList->iNative = iNative;
	pGetPlayerList->FunctionFlags |= FUNC_Native;
	*PlayerRecords = parms.PlayerRecords;
}*/

/*void AwEntryGameInfo::PrecacheGameSkeletalMeshes ( class ALevelInfo* myLevel )
{
	static UFunction* pPrecacheGameSkeletalMeshes = 0;
	AwEntryGameInfo_execPrecacheGameSkeletalMeshes_Parms parms;

	if ( !pPrecacheGameSkeletalMeshes )
		pPrecacheGameSkeletalMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wEntryGameInfo.PrecacheGameSkeletalMeshes" );

	parms.myLevel = myLevel;
	this->ProcessEvent ( pPrecacheGameSkeletalMeshes, &parms, NULL );

}*/

/*void AwEntryGameInfo::PrecacheGameStaticMeshes ( class ALevelInfo* myLevel )
{
	static UFunction* pPrecacheGameStaticMeshes = 0;
	AwEntryGameInfo_execPrecacheGameStaticMeshes_Parms parms;

	if ( !pPrecacheGameStaticMeshes )
		pPrecacheGameStaticMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wEntryGameInfo.PrecacheGameStaticMeshes" );

	parms.myLevel = myLevel;
	this->ProcessEvent ( pPrecacheGameStaticMeshes, &parms, NULL );

}*/

/*void AwEntryGameInfo::PrecacheGameTextures ( class ALevelInfo* myLevel )
{
	static UFunction* pPrecacheGameTextures = 0;
	AwEntryGameInfo_execPrecacheGameTextures_Parms parms;

	if ( !pPrecacheGameTextures )
		pPrecacheGameTextures = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wEntryGameInfo.PrecacheGameTextures" );

	parms.myLevel = myLevel;
	this->ProcessEvent ( pPrecacheGameTextures, &parms, NULL );

}*/

/*void AwEntryGameInfo::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pPostLogin = 0;
	AwEntryGameInfo_eventPostLogin_Parms parms;

	if ( !pPostLogin )
		pPostLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wEntryGameInfo.PostLogin" );

	parms.NewPlayer = NewPlayer;
	this->ProcessEvent ( pPostLogin, &parms, NULL );

}*/

/*struct FPlayerRecord UPlayerRecordClass::FillPlayerRecord (  )
{
	static UFunction* pFillPlayerRecord = 0;
	UPlayerRecordClass_execFillPlayerRecord_Parms parms;

	if ( !pFillPlayerRecord )
		pFillPlayerRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.PlayerRecordClass.FillPlayerRecord" );

	this->ProcessEvent ( pFillPlayerRecord, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::AddIdentificationFriend (  )
{
	static UFunction* pAddIdentificationFriend = 0;
	AwPawn_execAddIdentificationFriend_Parms parms;

	if ( !pAddIdentificationFriend )
		pAddIdentificationFriend = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AddIdentificationFriend" );

	this->ProcessEvent ( pAddIdentificationFriend, &parms, NULL );

}*/

/*void AwPawn::execreset_weapon (  )
{
	static UFunction* preset_weapon = 0;
	AwPawn_execreset_weapon_Parms parms;

	if ( !preset_weapon )
		preset_weapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.reset_weapon" );

	this->ProcessEvent ( preset_weapon, &parms, NULL );

}*/

/*void AwPawn::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	AwPawn_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.DisplayDebug" );

	parms.Canvas = Canvas;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*void AwPawn::SetBurning ( bool bBurn, class AwProjectile* proj )
{
	static UFunction* pSetBurning = 0;
	AwPawn_execSetBurning_Parms parms;

	if ( !pSetBurning )
		pSetBurning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetBurning" );

	parms.bBurn = bBurn;
	parms.proj = proj;
	this->ProcessEvent ( pSetBurning, &parms, NULL );

}*/

/*void AwPawn::GetWeaponAttachmentInfo ( unsigned char* byFlashCount, unsigned char* byFiringMode )
{
	static UFunction* pGetWeaponAttachmentInfo = 0;
	AwPawn_execGetWeaponAttachmentInfo_Parms parms;

	if ( !pGetWeaponAttachmentInfo )
		pGetWeaponAttachmentInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetWeaponAttachmentInfo" );

	parms.byFlashCount = *byFlashCount;
	parms.byFiringMode = *byFiringMode;
	this->ProcessEvent ( pGetWeaponAttachmentInfo, &parms, NULL );

	*byFlashCount = parms.byFlashCount;
	*byFiringMode = parms.byFiringMode;
}*/

/*void AwPawn::SetWeaponQuickChange ( bool bOn )
{
	static UFunction* pSetWeaponQuickChange = 0;
	AwPawn_execSetWeaponQuickChange_Parms parms;

	if ( !pSetWeaponQuickChange )
		pSetWeaponQuickChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetWeaponQuickChange" );

	parms.bOn = bOn;
	this->ProcessEvent ( pSetWeaponQuickChange, &parms, NULL );

}*/

/*void AwPawn::SetWeaponQuickReload ( bool bOn )
{
	static UFunction* pSetWeaponQuickReload = 0;
	AwPawn_execSetWeaponQuickReload_Parms parms;

	if ( !pSetWeaponQuickReload )
		pSetWeaponQuickReload = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetWeaponQuickReload" );

	parms.bOn = bOn;
	this->ProcessEvent ( pSetWeaponQuickReload, &parms, NULL );

}*/

/*void AwPawn::SetWeaponQuickAimZoom ( bool bOn )
{
	static UFunction* pSetWeaponQuickAimZoom = 0;
	AwPawn_execSetWeaponQuickAimZoom_Parms parms;

	if ( !pSetWeaponQuickAimZoom )
		pSetWeaponQuickAimZoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetWeaponQuickAimZoom" );

	parms.bOn = bOn;
	this->ProcessEvent ( pSetWeaponQuickAimZoom, &parms, NULL );

}*/

/*void AwPawn::AddWeaponMagazine (  )
{
	static UFunction* pAddWeaponMagazine = 0;
	AwPawn_execAddWeaponMagazine_Parms parms;

	if ( !pAddWeaponMagazine )
		pAddWeaponMagazine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AddWeaponMagazine" );

	this->ProcessEvent ( pAddWeaponMagazine, &parms, NULL );

}*/

/*void AwPawn::SetRemoveWeaponSkill ( class AwWeapon* W )
{
	static UFunction* pSetRemoveWeaponSkill = 0;
	AwPawn_execSetRemoveWeaponSkill_Parms parms;

	if ( !pSetRemoveWeaponSkill )
		pSetRemoveWeaponSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetRemoveWeaponSkill" );

	parms.W = W;
	this->ProcessEvent ( pSetRemoveWeaponSkill, &parms, NULL );

}*/

/*void AwPawn::SetAddWeaponSkill ( class AwWeapon* W, int iaWeaponID, int iPartsID )
{
	static UFunction* pSetAddWeaponSkill = 0;
	AwPawn_execSetAddWeaponSkill_Parms parms;

	if ( !pSetAddWeaponSkill )
		pSetAddWeaponSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetAddWeaponSkill" );

	parms.W = W;
	parms.iaWeaponID = iaWeaponID;
	parms.iPartsID = iPartsID;
	this->ProcessEvent ( pSetAddWeaponSkill, &parms, NULL );

}*/

/*void AwPawn::RenderFPWeaponAttachment ( class UCanvas* C )
{
	static UFunction* pRenderFPWeaponAttachment = 0;
	AwPawn_execRenderFPWeaponAttachment_Parms parms;

	if ( !pRenderFPWeaponAttachment )
		pRenderFPWeaponAttachment = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.RenderFPWeaponAttachment" );

	parms.C = C;
	this->ProcessEvent ( pRenderFPWeaponAttachment, &parms, NULL );

}*/

/*void AwPawn::MakeShellEffect_Rechamber (  )
{
	static UFunction* pMakeShellEffect_Rechamber = 0;
	AwPawn_execMakeShellEffect_Rechamber_Parms parms;

	if ( !pMakeShellEffect_Rechamber )
		pMakeShellEffect_Rechamber = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.MakeShellEffect_Rechamber" );

	this->ProcessEvent ( pMakeShellEffect_Rechamber, &parms, NULL );

}*/

/*void AwPawn::MakeShellEffect (  )
{
	static UFunction* pMakeShellEffect = 0;
	AwPawn_execMakeShellEffect_Parms parms;

	if ( !pMakeShellEffect )
		pMakeShellEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.MakeShellEffect" );

	this->ProcessEvent ( pMakeShellEffect, &parms, NULL );

}*/

/*void AwPawn::ServerCallNoWeaponMessage ( unsigned char bySlot )
{
	static UFunction* pServerCallNoWeaponMessage = 0;
	AwPawn_execServerCallNoWeaponMessage_Parms parms;

	if ( !pServerCallNoWeaponMessage )
		pServerCallNoWeaponMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ServerCallNoWeaponMessage" );

	parms.bySlot = bySlot;
	this->ProcessEvent ( pServerCallNoWeaponMessage, &parms, NULL );

}*/

/*void AwPawn::AddNoWeaponChangeMessage ( unsigned char bySlot )
{
	static UFunction* pAddNoWeaponChangeMessage = 0;
	AwPawn_execAddNoWeaponChangeMessage_Parms parms;

	if ( !pAddNoWeaponChangeMessage )
		pAddNoWeaponChangeMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AddNoWeaponChangeMessage" );

	parms.bySlot = bySlot;
	this->ProcessEvent ( pAddNoWeaponChangeMessage, &parms, NULL );

}*/

/*void AwPawn::HandlePickup ( class APickup* pick )
{
	static UFunction* pHandlePickup = 0;
	AwPawn_execHandlePickup_Parms parms;

	if ( !pHandlePickup )
		pHandlePickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.HandlePickup" );

	parms.pick = pick;
	this->ProcessEvent ( pHandlePickup, &parms, NULL );

}*/

/*void AwPawn::PlayReload (  )
{
	static UFunction* pPlayReload = 0;
	AwPawn_execPlayReload_Parms parms;

	if ( !pPlayReload )
		pPlayReload = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayReload" );

	this->ProcessEvent ( pPlayReload, &parms, NULL );

}*/

/*void AwPawn::PlayRechamber (  )
{
	static UFunction* pPlayRechamber = 0;
	AwPawn_execPlayRechamber_Parms parms;

	if ( !pPlayRechamber )
		pPlayRechamber = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayRechamber" );

	this->ProcessEvent ( pPlayRechamber, &parms, NULL );

}*/

/*void AwPawn::PlayMelee ( bool bMeleeKnifeOrButt )
{
	static UFunction* pPlayMelee = 0;
	AwPawn_execPlayMelee_Parms parms;

	if ( !pPlayMelee )
		pPlayMelee = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayMelee" );

	parms.bMeleeKnifeOrButt = bMeleeKnifeOrButt;
	this->ProcessEvent ( pPlayMelee, &parms, NULL );

}*/

/*void AwPawn::eventPostRender2D ( class UCanvas* C, float ScreenLocX, float ScreenLocY )
{
	static UFunction* pPostRender2D = 0;
	AwPawn_eventPostRender2D_Parms parms;

	if ( !pPostRender2D )
		pPostRender2D = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PostRender2D" );

	parms.C = C;
	parms.ScreenLocX = ScreenLocX;
	parms.ScreenLocY = ScreenLocY;
	this->ProcessEvent ( pPostRender2D, &parms, NULL );

}*/

/*int AwPawn::SpawnSupplyItem (  )
{
	static UFunction* pSpawnSupplyItem = 0;
	AwPawn_execSpawnSupplyItem_Parms parms;

	if ( !pSpawnSupplyItem )
		pSpawnSupplyItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SpawnSupplyItem" );

	this->ProcessEvent ( pSpawnSupplyItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::SpawnMedals (  )
{
	static UFunction* pSpawnMedals = 0;
	AwPawn_execSpawnMedals_Parms parms;

	if ( !pSpawnMedals )
		pSpawnMedals = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SpawnMedals" );

	this->ProcessEvent ( pSpawnMedals, &parms, NULL );

}*/

/*void AwPawn::ClientSwitchToLastWeapon ( unsigned char defuseSwitch )
{
	static UFunction* pClientSwitchToLastWeapon = 0;
	AwPawn_execClientSwitchToLastWeapon_Parms parms;

	if ( !pClientSwitchToLastWeapon )
		pClientSwitchToLastWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ClientSwitchToLastWeapon" );

	parms.defuseSwitch = defuseSwitch;
	this->ProcessEvent ( pClientSwitchToLastWeapon, &parms, NULL );

}*/

/*void AwPawn::SetSpecialState ( unsigned char byState )
{
	static UFunction* pSetSpecialState = 0;
	AwPawn_execSetSpecialState_Parms parms;

	if ( !pSetSpecialState )
		pSetSpecialState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetSpecialState" );

	parms.byState = byState;
	this->ProcessEvent ( pSetSpecialState, &parms, NULL );

}*/

/*void AwPawn::ServerQSlotChangeCheck (  )
{
	static UFunction* pServerQSlotChangeCheck = 0;
	AwPawn_execServerQSlotChangeCheck_Parms parms;

	if ( !pServerQSlotChangeCheck )
		pServerQSlotChangeCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ServerQSlotChangeCheck" );

	this->ProcessEvent ( pServerQSlotChangeCheck, &parms, NULL );

}*/

/*void AwPawn::ClientQSlotChangeCheck (  )
{
	static UFunction* pClientQSlotChangeCheck = 0;
	AwPawn_execClientQSlotChangeCheck_Parms parms;

	if ( !pClientQSlotChangeCheck )
		pClientQSlotChangeCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ClientQSlotChangeCheck" );

	this->ProcessEvent ( pClientQSlotChangeCheck, &parms, NULL );

}*/

/*void AwPawn::AddBaseInvenWeapon ( class UwMatchUserInfo* kUser, int iPos )
{
	static UFunction* pAddBaseInvenWeapon = 0;
	AwPawn_execAddBaseInvenWeapon_Parms parms;

	if ( !pAddBaseInvenWeapon )
		pAddBaseInvenWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AddBaseInvenWeapon" );

	parms.kUser = kUser;
	parms.iPos = iPos;
	this->ProcessEvent ( pAddBaseInvenWeapon, &parms, NULL );

}*/

/*void AwPawn::SetSelectedQuickSlotInventory ( class UwMatchUserInfo* kUser, bool bQuickslotChange )
{
	static UFunction* pSetSelectedQuickSlotInventory = 0;
	AwPawn_execSetSelectedQuickSlotInventory_Parms parms;

	if ( !pSetSelectedQuickSlotInventory )
		pSetSelectedQuickSlotInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetSelectedQuickSlotInventory" );

	parms.kUser = kUser;
	parms.bQuickslotChange = bQuickslotChange;
	this->ProcessEvent ( pSetSelectedQuickSlotInventory, &parms, NULL );

}*/

/*void AwPawn::AddWeaponByWeaponLimited ( int iWeaponID, int iPartsID, struct FBtrDouble UniqueID )
{
	static UFunction* pAddWeaponByWeaponLimited = 0;
	AwPawn_execAddWeaponByWeaponLimited_Parms parms;

	if ( !pAddWeaponByWeaponLimited )
		pAddWeaponByWeaponLimited = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AddWeaponByWeaponLimited" );

	parms.iWeaponID = iWeaponID;
	parms.iPartsID = iPartsID;
	parms.UniqueID = UniqueID;
	this->ProcessEvent ( pAddWeaponByWeaponLimited, &parms, NULL );

}*/

/*void AwPawn::SetInfiniteAmmoTutorial ( bool bDeleteGranade, int iGranadeCount )
{
	static UFunction* pSetInfiniteAmmoTutorial = 0;
	AwPawn_execSetInfiniteAmmoTutorial_Parms parms;

	if ( !pSetInfiniteAmmoTutorial )
		pSetInfiniteAmmoTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetInfiniteAmmoTutorial" );

	parms.bDeleteGranade = bDeleteGranade;
	parms.iGranadeCount = iGranadeCount;
	this->ProcessEvent ( pSetInfiniteAmmoTutorial, &parms, NULL );

}*/

/*void AwPawn::SetInfiniteAmmo ( int ammoCount )
{
	static UFunction* pSetInfiniteAmmo = 0;
	AwPawn_execSetInfiniteAmmo_Parms parms;

	if ( !pSetInfiniteAmmo )
		pSetInfiniteAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetInfiniteAmmo" );

	parms.ammoCount = ammoCount;
	this->ProcessEvent ( pSetInfiniteAmmo, &parms, NULL );

}*/

/*void AwPawn::DoSortEquipedItems ( class UwMatchUserInfo* kUserInfo )
{
	static UFunction* pDoSortEquipedItems = 0;
	AwPawn_execDoSortEquipedItems_Parms parms;

	if ( !pDoSortEquipedItems )
		pDoSortEquipedItems = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.DoSortEquipedItems" );

	parms.kUserInfo = kUserInfo;
	this->ProcessEvent ( pDoSortEquipedItems, &parms, NULL );

}*/

/*bool AwPawn::CheckWeaponBySubGameMode ( class UwMatchUserInfo* kUser )
{
	static UFunction* pCheckWeaponBySubGameMode = 0;
	AwPawn_execCheckWeaponBySubGameMode_Parms parms;

	if ( !pCheckWeaponBySubGameMode )
		pCheckWeaponBySubGameMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.CheckWeaponBySubGameMode" );

	parms.kUser = kUser;
	this->ProcessEvent ( pCheckWeaponBySubGameMode, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::AddDefaultInventoryDOA ( bool bQuickslotChange )
{
	static UFunction* pAddDefaultInventoryDOA = 0;
	AwPawn_execAddDefaultInventoryDOA_Parms parms;

	if ( !pAddDefaultInventoryDOA )
		pAddDefaultInventoryDOA = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AddDefaultInventoryDOA" );

	parms.bQuickslotChange = bQuickslotChange;
	this->ProcessEvent ( pAddDefaultInventoryDOA, &parms, NULL );

}*/

/*void AwPawn::SetGrenadlInvenByWeaponLimited ( int i, class UwMatchMaker* kMM, class UwMatchUserInfo* kUser, bool IsQuick )
{
	static UFunction* pSetGrenadlInvenByWeaponLimited = 0;
	AwPawn_execSetGrenadlInvenByWeaponLimited_Parms parms;

	if ( !pSetGrenadlInvenByWeaponLimited )
		pSetGrenadlInvenByWeaponLimited = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetGrenadlInvenByWeaponLimited" );

	parms.i = i;
	parms.kMM = kMM;
	parms.kUser = kUser;
	parms.IsQuick = IsQuick;
	this->ProcessEvent ( pSetGrenadlInvenByWeaponLimited, &parms, NULL );

}*/

/*void AwPawn::SetFlameThrowerlInvenByWeaponLimited ( int i, class UwMatchMaker* kMM, class UwMatchUserInfo* kUser, bool IsQuick )
{
	static UFunction* pSetFlameThrowerlInvenByWeaponLimited = 0;
	AwPawn_execSetFlameThrowerlInvenByWeaponLimited_Parms parms;

	if ( !pSetFlameThrowerlInvenByWeaponLimited )
		pSetFlameThrowerlInvenByWeaponLimited = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetFlameThrowerlInvenByWeaponLimited" );

	parms.i = i;
	parms.kMM = kMM;
	parms.kUser = kUser;
	parms.IsQuick = IsQuick;
	this->ProcessEvent ( pSetFlameThrowerlInvenByWeaponLimited, &parms, NULL );

}*/

/*void AwPawn::SetMGlInvenByWeaponLimited ( int i, class UwMatchMaker* kMM, class UwMatchUserInfo* kUser, bool IsQuick )
{
	static UFunction* pSetMGlInvenByWeaponLimited = 0;
	AwPawn_execSetMGlInvenByWeaponLimited_Parms parms;

	if ( !pSetMGlInvenByWeaponLimited )
		pSetMGlInvenByWeaponLimited = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetMGlInvenByWeaponLimited" );

	parms.i = i;
	parms.kMM = kMM;
	parms.kUser = kUser;
	parms.IsQuick = IsQuick;
	this->ProcessEvent ( pSetMGlInvenByWeaponLimited, &parms, NULL );

}*/

/*void AwPawn::SetShotGunlInvenByWeaponLimited ( int i, class UwMatchMaker* kMM, class UwMatchUserInfo* kUser, bool IsQuick )
{
	static UFunction* pSetShotGunlInvenByWeaponLimited = 0;
	AwPawn_execSetShotGunlInvenByWeaponLimited_Parms parms;

	if ( !pSetShotGunlInvenByWeaponLimited )
		pSetShotGunlInvenByWeaponLimited = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetShotGunlInvenByWeaponLimited" );

	parms.i = i;
	parms.kMM = kMM;
	parms.kUser = kUser;
	parms.IsQuick = IsQuick;
	this->ProcessEvent ( pSetShotGunlInvenByWeaponLimited, &parms, NULL );

}*/

/*void AwPawn::SetPistolInvenByWeaponLimited ( int i, class UwMatchMaker* kMM, class UwMatchUserInfo* kUser, bool IsQuick )
{
	static UFunction* pSetPistolInvenByWeaponLimited = 0;
	AwPawn_execSetPistolInvenByWeaponLimited_Parms parms;

	if ( !pSetPistolInvenByWeaponLimited )
		pSetPistolInvenByWeaponLimited = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetPistolInvenByWeaponLimited" );

	parms.i = i;
	parms.kMM = kMM;
	parms.kUser = kUser;
	parms.IsQuick = IsQuick;
	this->ProcessEvent ( pSetPistolInvenByWeaponLimited, &parms, NULL );

}*/

/*void AwPawn::AddDefaultInventory ( bool bQuickslotChange )
{
	static UFunction* pAddDefaultInventory = 0;
	AwPawn_execAddDefaultInventory_Parms parms;

	if ( !pAddDefaultInventory )
		pAddDefaultInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AddDefaultInventory" );

	parms.bQuickslotChange = bQuickslotChange;
	this->ProcessEvent ( pAddDefaultInventory, &parms, NULL );

}*/

/*void AwPawn::RemoveAllInventory (  )
{
	static UFunction* pRemoveAllInventory = 0;
	AwPawn_execRemoveAllInventory_Parms parms;

	if ( !pRemoveAllInventory )
		pRemoveAllInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.RemoveAllInventory" );

	this->ProcessEvent ( pRemoveAllInventory, &parms, NULL );

}*/

/*void AwPawn::ChangeInventoryByQSlot (  )
{
	static UFunction* pChangeInventoryByQSlot = 0;
	AwPawn_execChangeInventoryByQSlot_Parms parms;

	if ( !pChangeInventoryByQSlot )
		pChangeInventoryByQSlot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ChangeInventoryByQSlot" );

	this->ProcessEvent ( pChangeInventoryByQSlot, &parms, NULL );

}*/

/*int AwPawn::GetSlotPosbySkillID ( class UwMatchUserInfo* kUser, int iSkillID )
{
	static UFunction* pGetSlotPosbySkillID = 0;
	AwPawn_execGetSlotPosbySkillID_Parms parms;

	if ( !pGetSlotPosbySkillID )
		pGetSlotPosbySkillID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetSlotPosbySkillID" );

	parms.kUser = kUser;
	parms.iSkillID = iSkillID;
	this->ProcessEvent ( pGetSlotPosbySkillID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwPawn::GetInvenSkillIDbyPos ( class UwMatchUserInfo* kUser, int iPos )
{
	static UFunction* pGetInvenSkillIDbyPos = 0;
	AwPawn_execGetInvenSkillIDbyPos_Parms parms;

	if ( !pGetInvenSkillIDbyPos )
		pGetInvenSkillIDbyPos = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetInvenSkillIDbyPos" );

	parms.kUser = kUser;
	parms.iPos = iPos;
	this->ProcessEvent ( pGetInvenSkillIDbyPos, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::AddBaseInvenSkill ( class UwMatchUserInfo* kUser, int iPos )
{
	static UFunction* pAddBaseInvenSkill = 0;
	AwPawn_execAddBaseInvenSkill_Parms parms;

	if ( !pAddBaseInvenSkill )
		pAddBaseInvenSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AddBaseInvenSkill" );

	parms.kUser = kUser;
	parms.iPos = iPos;
	this->ProcessEvent ( pAddBaseInvenSkill, &parms, NULL );

}*/

/*void AwPawn::SetSelectedQuickSlotSkills ( class UwMatchUserInfo* kUser )
{
	static UFunction* pSetSelectedQuickSlotSkills = 0;
	AwPawn_execSetSelectedQuickSlotSkills_Parms parms;

	if ( !pSetSelectedQuickSlotSkills )
		pSetSelectedQuickSlotSkills = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetSelectedQuickSlotSkills" );

	parms.kUser = kUser;
	this->ProcessEvent ( pSetSelectedQuickSlotSkills, &parms, NULL );

}*/

/*void AwPawn::AddWeaponFromSkill ( struct FBtrDouble iUniqueID, int iaWeaponID )
{
	static UFunction* pAddWeaponFromSkill = 0;
	AwPawn_execAddWeaponFromSkill_Parms parms;

	if ( !pAddWeaponFromSkill )
		pAddWeaponFromSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AddWeaponFromSkill" );

	parms.iUniqueID = iUniqueID;
	parms.iaWeaponID = iaWeaponID;
	this->ProcessEvent ( pAddWeaponFromSkill, &parms, NULL );

}*/

/*void AwPawn::AddSkillByInventory ( class UwMatchUserInfo* kUser )
{
	static UFunction* pAddSkillByInventory = 0;
	AwPawn_execAddSkillByInventory_Parms parms;

	if ( !pAddSkillByInventory )
		pAddSkillByInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AddSkillByInventory" );

	parms.kUser = kUser;
	this->ProcessEvent ( pAddSkillByInventory, &parms, NULL );

}*/

/*void AwPawn::AddDefaultSkills ( bool bQuickslotChange )
{
	static UFunction* pAddDefaultSkills = 0;
	AwPawn_execAddDefaultSkills_Parms parms;

	if ( !pAddDefaultSkills )
		pAddDefaultSkills = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AddDefaultSkills" );

	parms.bQuickslotChange = bQuickslotChange;
	this->ProcessEvent ( pAddDefaultSkills, &parms, NULL );

}*/

/*unsigned char AwPawn::GetGibParts ( int iCollisionPart )
{
	static UFunction* pGetGibParts = 0;
	AwPawn_execGetGibParts_Parms parms;

	if ( !pGetGibParts )
		pGetGibParts = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetGibParts" );

	parms.iCollisionPart = iCollisionPart;
	this->ProcessEvent ( pGetGibParts, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::SpawnGoreGiblet ( int iIndex )
{
	static UFunction* pSpawnGoreGiblet = 0;
	AwPawn_execSpawnGoreGiblet_Parms parms;

	if ( !pSpawnGoreGiblet )
		pSpawnGoreGiblet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SpawnGoreGiblet" );

	parms.iIndex = iIndex;
	this->ProcessEvent ( pSpawnGoreGiblet, &parms, NULL );

}*/

/*void AwPawn::MakeGorePawn ( int iPart )
{
	static UFunction* pMakeGorePawn = 0;
	AwPawn_execMakeGorePawn_Parms parms;

	if ( !pMakeGorePawn )
		pMakeGorePawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.MakeGorePawn" );

	parms.iPart = iPart;
	this->ProcessEvent ( pMakeGorePawn, &parms, NULL );

}*/

/*void AwPawn::eventEndCrouch ( float HeightAdjust )
{
	static UFunction* pEndCrouch = 0;
	AwPawn_eventEndCrouch_Parms parms;

	if ( !pEndCrouch )
		pEndCrouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.EndCrouch" );

	parms.HeightAdjust = HeightAdjust;
	this->ProcessEvent ( pEndCrouch, &parms, NULL );

}*/

/*void AwPawn::eventEndProne ( float HeightAdjust )
{
	static UFunction* pEndProne = 0;
	AwPawn_eventEndProne_Parms parms;

	if ( !pEndProne )
		pEndProne = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.EndProne" );

	parms.HeightAdjust = HeightAdjust;
	this->ProcessEvent ( pEndProne, &parms, NULL );

}*/

/*void AwPawn::SetParts ( unsigned char iPartsIndex, class UMesh* resMesh, class UStaticMesh* resStaticMesh )
{
	static UFunction* pSetParts = 0;
	AwPawn_execSetParts_Parms parms;

	if ( !pSetParts )
		pSetParts = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetParts" );

	parms.iPartsIndex = iPartsIndex;
	parms.resMesh = resMesh;
	parms.resStaticMesh = resStaticMesh;
	this->ProcessEvent ( pSetParts, &parms, NULL );

}*/

/*void AwPawn::ResetAllParts (  )
{
	static UFunction* pResetAllParts = 0;
	AwPawn_execResetAllParts_Parms parms;

	if ( !pResetAllParts )
		pResetAllParts = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ResetAllParts" );

	this->ProcessEvent ( pResetAllParts, &parms, NULL );

}*/

/*void AwPawn::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int CollisionPart, int WeaponType, bool bWallShot )
{
	static UFunction* pDied = 0;
	AwPawn_execDied_Parms parms;

	if ( !pDied )
		pDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.Died" );

	parms.Killer = Killer;
	parms.DamageType = DamageType;
	parms.HitLocation = HitLocation;
	parms.CollisionPart = CollisionPart;
	parms.WeaponType = WeaponType;
	parms.bWallShot = bWallShot;
	this->ProcessEvent ( pDied, &parms, NULL );

}*/

/*void AwPawn::DoDerezEffect (  )
{
	static UFunction* pDoDerezEffect = 0;
	AwPawn_execDoDerezEffect_Parms parms;

	if ( !pDoDerezEffect )
		pDoDerezEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.DoDerezEffect" );

	this->ProcessEvent ( pDoDerezEffect, &parms, NULL );

}*/

/*class UClass* AwPawn::GetGibClass ( unsigned char gibType )
{
	static UFunction* pGetGibClass = 0;
	AwPawn_execGetGibClass_Parms parms;

	if ( !pGetGibClass )
		pGetGibClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetGibClass" );

	parms.gibType = gibType;
	this->ProcessEvent ( pGetGibClass, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class USound* AwPawn::GetSound ( unsigned char soundType )
{
	static UFunction* pGetSound = 0;
	AwPawn_execGetSound_Parms parms;

	if ( !pGetSound )
		pGetSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetSound" );

	parms.soundType = soundType;
	this->ProcessEvent ( pGetSound, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::ResetPhysicsBasedAnim (  )
{
	static UFunction* pResetPhysicsBasedAnim = 0;
	AwPawn_execResetPhysicsBasedAnim_Parms parms;

	if ( !pResetPhysicsBasedAnim )
		pResetPhysicsBasedAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ResetPhysicsBasedAnim" );

	this->ProcessEvent ( pResetPhysicsBasedAnim, &parms, NULL );

}*/

/*void AwPawn::Setup ( struct FPlayerRecord Rec, bool bLoadNow )
{
	static UFunction* pSetup = 0;
	AwPawn_execSetup_Parms parms;

	if ( !pSetup )
		pSetup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.Setup" );

	parms.Rec = Rec;
	parms.bLoadNow = bLoadNow;
	this->ProcessEvent ( pSetup, &parms, NULL );

}*/

/*struct FString AwPawn::GetDefaultCharacter (  )
{
	static UFunction* pGetDefaultCharacter = 0;
	AwPawn_execGetDefaultCharacter_Parms parms;

	if ( !pGetDefaultCharacter )
		pGetDefaultCharacter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetDefaultCharacter" );

	this->ProcessEvent ( pGetDefaultCharacter, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwPawn::ForceDefaultCharacter (  )
{
	static UFunction* pForceDefaultCharacter = 0;
	AwPawn_execForceDefaultCharacter_Parms parms;

	if ( !pForceDefaultCharacter )
		pForceDefaultCharacter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ForceDefaultCharacter" );

	this->ProcessEvent ( pForceDefaultCharacter, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwPawn::CheckValidMaleDefault (  )
{
	static UFunction* pCheckValidMaleDefault = 0;
	AwPawn_execCheckValidMaleDefault_Parms parms;

	if ( !pCheckValidMaleDefault )
		pCheckValidMaleDefault = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.CheckValidMaleDefault" );

	this->ProcessEvent ( pCheckValidMaleDefault, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwPawn::CheckValidFemaleDefault (  )
{
	static UFunction* pCheckValidFemaleDefault = 0;
	AwPawn_execCheckValidFemaleDefault_Parms parms;

	if ( !pCheckValidFemaleDefault )
		pCheckValidFemaleDefault = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.CheckValidFemaleDefault" );

	this->ProcessEvent ( pCheckValidFemaleDefault, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::ClientReStart (  )
{
	static UFunction* pClientReStart = 0;
	AwPawn_execClientReStart_Parms parms;

	if ( !pClientReStart )
		pClientReStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ClientReStart" );

	this->ProcessEvent ( pClientReStart, &parms, NULL );

}*/

/*void AwPawn::eventPostNetReceive (  )
{
	static UFunction* pPostNetReceive = 0;
	AwPawn_eventPostNetReceive_Parms parms;

	if ( !pPostNetReceive )
		pPostNetReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PostNetReceive" );

	this->ProcessEvent ( pPostNetReceive, &parms, NULL );

}*/

/*void AwPawn::NotifyTeamChanged (  )
{
	static UFunction* pNotifyTeamChanged = 0;
	AwPawn_execNotifyTeamChanged_Parms parms;

	if ( !pNotifyTeamChanged )
		pNotifyTeamChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.NotifyTeamChanged" );

	this->ProcessEvent ( pNotifyTeamChanged, &parms, NULL );

}*/

/*bool AwPawn::DoJump ( bool bUpdating )
{
	static UFunction* pDoJump = 0;
	AwPawn_execDoJump_Parms parms;

	if ( !pDoJump )
		pDoJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.DoJump" );

	parms.bUpdating = bUpdating;
	this->ProcessEvent ( pDoJump, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwPawn::CanMultiJump (  )
{
	static UFunction* pCanMultiJump = 0;
	AwPawn_execCanMultiJump_Parms parms;

	if ( !pCanMultiJump )
		pCanMultiJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.CanMultiJump" );

	this->ProcessEvent ( pCanMultiJump, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwPawn::CanDoubleJump (  )
{
	static UFunction* pCanDoubleJump = 0;
	AwPawn_execCanDoubleJump_Parms parms;

	if ( !pCanDoubleJump )
		pCanDoubleJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.CanDoubleJump" );

	this->ProcessEvent ( pCanDoubleJump, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::DoDoubleJump ( bool bUpdating )
{
	static UFunction* pDoDoubleJump = 0;
	AwPawn_execDoDoubleJump_Parms parms;

	if ( !pDoDoubleJump )
		pDoDoubleJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.DoDoubleJump" );

	parms.bUpdating = bUpdating;
	this->ProcessEvent ( pDoDoubleJump, &parms, NULL );

}*/

/*bool AwPawn::PerformDodge ( unsigned char DoubleClickMove, struct FVector Dir, struct FVector Cross )
{
	static UFunction* pPerformDodge = 0;
	AwPawn_execPerformDodge_Parms parms;

	if ( !pPerformDodge )
		pPerformDodge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PerformDodge" );

	parms.DoubleClickMove = DoubleClickMove;
	parms.Dir = Dir;
	parms.Cross = Cross;
	this->ProcessEvent ( pPerformDodge, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwPawn::Dodge ( unsigned char DoubleClickMove )
{
	static UFunction* pDodge = 0;
	AwPawn_execDodge_Parms parms;

	if ( !pDodge )
		pDodge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.Dodge" );

	parms.DoubleClickMove = DoubleClickMove;
	this->ProcessEvent ( pDodge, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FVector AwPawn::BotDodge ( struct FVector Dir )
{
	static UFunction* pBotDodge = 0;
	AwPawn_execBotDodge_Parms parms;

	if ( !pBotDodge )
		pBotDodge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.BotDodge" );

	parms.Dir = Dir;
	this->ProcessEvent ( pBotDodge, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::SetInvisibility ( float Time )
{
	static UFunction* pSetInvisibility = 0;
	AwPawn_execSetInvisibility_Parms parms;

	if ( !pSetInvisibility )
		pSetInvisibility = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetInvisibility" );

	parms.Time = Time;
	this->ProcessEvent ( pSetInvisibility, &parms, NULL );

}*/

/*void AwPawn::ServerChangedWeapon ( class AwWeapon* OldWeapon, class AwWeapon* newWeapon )
{
	static UFunction* pServerChangedWeapon = 0;
	AwPawn_execServerChangedWeapon_Parms parms;

	if ( !pServerChangedWeapon )
		pServerChangedWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ServerChangedWeapon" );

	parms.OldWeapon = OldWeapon;
	parms.newWeapon = newWeapon;
	this->ProcessEvent ( pServerChangedWeapon, &parms, NULL );

}*/

/*void AwPawn::ChangedWeapon (  )
{
	static UFunction* pChangedWeapon = 0;
	AwPawn_execChangedWeapon_Parms parms;

	if ( !pChangedWeapon )
		pChangedWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ChangedWeapon" );

	this->ProcessEvent ( pChangedWeapon, &parms, NULL );

}*/

/*void AwPawn::SetWeaponOverlay ( class UMaterial* mat, float Time, bool override )
{
	static UFunction* pSetWeaponOverlay = 0;
	AwPawn_execSetWeaponOverlay_Parms parms;

	if ( !pSetWeaponOverlay )
		pSetWeaponOverlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetWeaponOverlay" );

	parms.mat = mat;
	parms.Time = Time;
	parms.override = override;
	this->ProcessEvent ( pSetWeaponOverlay, &parms, NULL );

}*/

/*void AwPawn::DisableUDamage (  )
{
	static UFunction* pDisableUDamage = 0;
	AwPawn_execDisableUDamage_Parms parms;

	if ( !pDisableUDamage )
		pDisableUDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.DisableUDamage" );

	this->ProcessEvent ( pDisableUDamage, &parms, NULL );

}*/

/*void AwPawn::EnableUDamage ( float Amount )
{
	static UFunction* pEnableUDamage = 0;
	AwPawn_execEnableUDamage_Parms parms;

	if ( !pEnableUDamage )
		pEnableUDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.EnableUDamage" );

	parms.Amount = Amount;
	this->ProcessEvent ( pEnableUDamage, &parms, NULL );

}*/

/*bool AwPawn::HasUDamage (  )
{
	static UFunction* pHasUDamage = 0;
	AwPawn_execHasUDamage_Parms parms;

	if ( !pHasUDamage )
		pHasUDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.HasUDamage" );

	this->ProcessEvent ( pHasUDamage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::DoCombo ( class UClass* ComboClass )
{
	static UFunction* pDoCombo = 0;
	AwPawn_execDoCombo_Parms parms;

	if ( !pDoCombo )
		pDoCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.DoCombo" );

	parms.ComboClass = ComboClass;
	this->ProcessEvent ( pDoCombo, &parms, NULL );

}*/

/*void AwPawn::DoComboName ( struct FString ComboClassName )
{
	static UFunction* pDoComboName = 0;
	AwPawn_execDoComboName_Parms parms;

	if ( !pDoComboName )
		pDoComboName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.DoComboName" );

	parms.ComboClassName = ComboClassName;
	this->ProcessEvent ( pDoComboName, &parms, NULL );

}*/

/*bool AwPawn::InCurrentCombo (  )
{
	static UFunction* pInCurrentCombo = 0;
	AwPawn_execInCurrentCombo_Parms parms;

	if ( !pInCurrentCombo )
		pInCurrentCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.InCurrentCombo" );

	this->ProcessEvent ( pInCurrentCombo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwPawn::AddShieldStrength ( int ShieldAmount )
{
	static UFunction* pAddShieldStrength = 0;
	AwPawn_execAddShieldStrength_Parms parms;

	if ( !pAddShieldStrength )
		pAddShieldStrength = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AddShieldStrength" );

	parms.ShieldAmount = ShieldAmount;
	this->ProcessEvent ( pAddShieldStrength, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwPawn::CanUseShield ( int ShieldAmount )
{
	static UFunction* pCanUseShield = 0;
	AwPawn_execCanUseShield_Parms parms;

	if ( !pCanUseShield )
		pCanUseShield = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.CanUseShield" );

	parms.ShieldAmount = ShieldAmount;
	this->ProcessEvent ( pCanUseShield, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AwPawn::GetShieldStrength (  )
{
	static UFunction* pGetShieldStrength = 0;
	AwPawn_execGetShieldStrength_Parms parms;

	if ( !pGetShieldStrength )
		pGetShieldStrength = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetShieldStrength" );

	this->ProcessEvent ( pGetShieldStrength, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AwPawn::GetShieldStrengthMax (  )
{
	static UFunction* pGetShieldStrengthMax = 0;
	AwPawn_execGetShieldStrengthMax_Parms parms;

	if ( !pGetShieldStrengthMax )
		pGetShieldStrengthMax = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetShieldStrengthMax" );

	this->ProcessEvent ( pGetShieldStrengthMax, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::TakeDamageSound ( int LeftHealth, int ActualDamage, struct FVector HitLocation, class UClass* DamageType, int CollisionPart, int WeaponType, class AController* Killer )
{
	static UFunction* pTakeDamageSound = 0;
	AwPawn_execTakeDamageSound_Parms parms;

	if ( !pTakeDamageSound )
		pTakeDamageSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.TakeDamageSound" );

	parms.LeftHealth = LeftHealth;
	parms.ActualDamage = ActualDamage;
	parms.HitLocation = HitLocation;
	parms.DamageType = DamageType;
	parms.CollisionPart = CollisionPart;
	parms.WeaponType = WeaponType;
	parms.Killer = Killer;
	this->ProcessEvent ( pTakeDamageSound, &parms, NULL );

}*/

/*void AwPawn::PlayFootStepRight (  )
{
	static UFunction* pPlayFootStepRight = 0;
	AwPawn_execPlayFootStepRight_Parms parms;

	if ( !pPlayFootStepRight )
		pPlayFootStepRight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayFootStepRight" );

	this->ProcessEvent ( pPlayFootStepRight, &parms, NULL );

}*/

/*void AwPawn::PlayFootStepLeft (  )
{
	static UFunction* pPlayFootStepLeft = 0;
	AwPawn_execPlayFootStepLeft_Parms parms;

	if ( !pPlayFootStepLeft )
		pPlayFootStepLeft = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayFootStepLeft" );

	this->ProcessEvent ( pPlayFootStepLeft, &parms, NULL );

}*/

/*void AwPawn::FootStepping ( int side )
{
	static UFunction* pFootStepping = 0;
	AwPawn_execFootStepping_Parms parms;

	if ( !pFootStepping )
		pFootStepping = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.FootStepping" );

	parms.side = side;
	this->ProcessEvent ( pFootStepping, &parms, NULL );

}*/

/*void AwPawn::PlayEquipHitSound (  )
{
	static UFunction* pPlayEquipHitSound = 0;
	AwPawn_execPlayEquipHitSound_Parms parms;

	if ( !pPlayEquipHitSound )
		pPlayEquipHitSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayEquipHitSound" );

	this->ProcessEvent ( pPlayEquipHitSound, &parms, NULL );

}*/

/*void AwPawn::PlayBreathSound (  )
{
	static UFunction* pPlayBreathSound = 0;
	AwPawn_execPlayBreathSound_Parms parms;

	if ( !pPlayBreathSound )
		pPlayBreathSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayBreathSound" );

	this->ProcessEvent ( pPlayBreathSound, &parms, NULL );

}*/

/*void AwPawn::PlayDirectionalHit ( struct FVector HitLoc, bool bUseHitStun, bool bGoreChange )
{
	static UFunction* pPlayDirectionalHit = 0;
	AwPawn_execPlayDirectionalHit_Parms parms;

	if ( !pPlayDirectionalHit )
		pPlayDirectionalHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayDirectionalHit" );

	parms.HitLoc = HitLoc;
	parms.bUseHitStun = bUseHitStun;
	parms.bGoreChange = bGoreChange;
	this->ProcessEvent ( pPlayDirectionalHit, &parms, NULL );

}*/

/*void AwPawn::PlayDirectionalDeath ( struct FVector HitLoc )
{
	static UFunction* pPlayDirectionalDeath = 0;
	AwPawn_execPlayDirectionalDeath_Parms parms;

	if ( !pPlayDirectionalDeath )
		pPlayDirectionalDeath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayDirectionalDeath" );

	parms.HitLoc = HitLoc;
	this->ProcessEvent ( pPlayDirectionalDeath, &parms, NULL );

}*/

/*void AwPawn::eventKImpact ( class AActor* Other, struct FVector pos, struct FVector impactVel, struct FVector impactNorm )
{
	static UFunction* pKImpact = 0;
	AwPawn_eventKImpact_Parms parms;

	if ( !pKImpact )
		pKImpact = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.KImpact" );

	parms.Other = Other;
	parms.pos = pos;
	parms.impactVel = impactVel;
	parms.impactNorm = impactNorm;
	this->ProcessEvent ( pKImpact, &parms, NULL );

}*/

/*void AwPawn::PlayTakeHit ( struct FVector HitLocation, int Damage, class UClass* DamageType )
{
	static UFunction* pPlayTakeHit = 0;
	AwPawn_execPlayTakeHit_Parms parms;

	if ( !pPlayTakeHit )
		pPlayTakeHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayTakeHit" );

	parms.HitLocation = HitLocation;
	parms.Damage = Damage;
	parms.DamageType = DamageType;
	this->ProcessEvent ( pPlayTakeHit, &parms, NULL );

}*/

/*void AwPawn::ClientDying ( class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pClientDying = 0;
	AwPawn_execClientDying_Parms parms;

	if ( !pClientDying )
		pClientDying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ClientDying" );

	parms.DamageType = DamageType;
	parms.HitLocation = HitLocation;
	this->ProcessEvent ( pClientDying, &parms, NULL );

}*/

/*void AwPawn::SpawnGibs ( struct FRotator HitRotation, float ChunkPerterbation )
{
	static UFunction* pSpawnGibs = 0;
	AwPawn_execSpawnGibs_Parms parms;

	if ( !pSpawnGibs )
		pSpawnGibs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SpawnGibs" );

	parms.HitRotation = HitRotation;
	parms.ChunkPerterbation = ChunkPerterbation;
	this->ProcessEvent ( pSpawnGibs, &parms, NULL );

}*/

/*void AwPawn::PlayDyingAnimation ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pPlayDyingAnimation = 0;
	AwPawn_execPlayDyingAnimation_Parms parms;

	if ( !pPlayDyingAnimation )
		pPlayDyingAnimation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayDyingAnimation" );

	parms.DamageType = DamageType;
	parms.HitLoc = HitLoc;
	this->ProcessEvent ( pPlayDyingAnimation, &parms, NULL );

}*/

/*void AwPawn::PlayDying ( class UClass* DamageType, struct FVector HitLoc, int CollisionPart )
{
	static UFunction* pPlayDying = 0;
	AwPawn_execPlayDying_Parms parms;

	if ( !pPlayDying )
		pPlayDying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayDying" );

	parms.DamageType = DamageType;
	parms.HitLoc = HitLoc;
	parms.CollisionPart = CollisionPart;
	this->ProcessEvent ( pPlayDying, &parms, NULL );

}*/

/*void AwPawn::RandSpin ( float spinRate )
{
	static UFunction* pRandSpin = 0;
	AwPawn_execRandSpin_Parms parms;

	if ( !pRandSpin )
		pRandSpin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.RandSpin" );

	parms.spinRate = spinRate;
	this->ProcessEvent ( pRandSpin, &parms, NULL );

}*/

/*void AwPawn::eventKSkelConvulse (  )
{
	static UFunction* pKSkelConvulse = 0;
	AwPawn_eventKSkelConvulse_Parms parms;

	if ( !pKSkelConvulse )
		pKSkelConvulse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.KSkelConvulse" );

	this->ProcessEvent ( pKSkelConvulse, &parms, NULL );

}*/

/*void AwPawn::SetWeaponAttachment ( class AwWeaponAttachment* NewAtt )
{
	static UFunction* pSetWeaponAttachment = 0;
	AwPawn_execSetWeaponAttachment_Parms parms;

	if ( !pSetWeaponAttachment )
		pSetWeaponAttachment = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetWeaponAttachment" );

	parms.NewAtt = NewAtt;
	this->ProcessEvent ( pSetWeaponAttachment, &parms, NULL );

}*/

/*void AwPawn::PlayVictoryAnimation (  )
{
	static UFunction* pPlayVictoryAnimation = 0;
	AwPawn_execPlayVictoryAnimation_Parms parms;

	if ( !pPlayVictoryAnimation )
		pPlayVictoryAnimation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayVictoryAnimation" );

	this->ProcessEvent ( pPlayVictoryAnimation, &parms, NULL );

}*/

/*void AwPawn::eventCheckProneAni ( bool bGoProne )
{
	static UFunction* pCheckProneAni = 0;
	AwPawn_eventCheckProneAni_Parms parms;

	if ( !pCheckProneAni )
		pCheckProneAni = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.CheckProneAni" );

	parms.bGoProne = bGoProne;
	this->ProcessEvent ( pCheckProneAni, &parms, NULL );

}*/

/*void AwPawn::ServerThrowsWeaponAnim ( bool bQuick )
{
	static UFunction* pServerThrowsWeaponAnim = 0;
	AwPawn_execServerThrowsWeaponAnim_Parms parms;

	if ( !pServerThrowsWeaponAnim )
		pServerThrowsWeaponAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ServerThrowsWeaponAnim" );

	parms.bQuick = bQuick;
	this->ProcessEvent ( pServerThrowsWeaponAnim, &parms, NULL );

}*/

/*void AwPawn::ServerPlayPutdownWeaponAnim ( bool bQuick )
{
	static UFunction* pServerPlayPutdownWeaponAnim = 0;
	AwPawn_execServerPlayPutdownWeaponAnim_Parms parms;

	if ( !pServerPlayPutdownWeaponAnim )
		pServerPlayPutdownWeaponAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ServerPlayPutdownWeaponAnim" );

	parms.bQuick = bQuick;
	this->ProcessEvent ( pServerPlayPutdownWeaponAnim, &parms, NULL );

}*/

/*void AwPawn::PlayWeaponSwitch ( class AwWeapon* newWeapon )
{
	static UFunction* pPlayWeaponSwitch = 0;
	AwPawn_execPlayWeaponSwitch_Parms parms;

	if ( !pPlayWeaponSwitch )
		pPlayWeaponSwitch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayWeaponSwitch" );

	parms.newWeapon = newWeapon;
	this->ProcessEvent ( pPlayWeaponSwitch, &parms, NULL );

}*/

/*void AwPawn::eventAnimEnd ( int Channel )
{
	static UFunction* pAnimEnd = 0;
	AwPawn_eventAnimEnd_Parms parms;

	if ( !pAnimEnd )
		pAnimEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AnimEnd" );

	parms.Channel = Channel;
	this->ProcessEvent ( pAnimEnd, &parms, NULL );

}*/

/*void AwPawn::ScriptPlayIdle ( int Channel )
{
	static UFunction* pScriptPlayIdle = 0;
	AwPawn_execScriptPlayIdle_Parms parms;

	if ( !pScriptPlayIdle )
		pScriptPlayIdle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ScriptPlayIdle" );

	parms.Channel = Channel;
	this->ProcessEvent ( pScriptPlayIdle, &parms, NULL );

}*/

/*void AwPawn::eventInitialPlayer (  )
{
	static UFunction* pInitialPlayer = 0;
	AwPawn_eventInitialPlayer_Parms parms;

	if ( !pInitialPlayer )
		pInitialPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.InitialPlayer" );

	this->ProcessEvent ( pInitialPlayer, &parms, NULL );

}*/

/*bool AwPawn::GetIsFiring (  )
{
	static UFunction* pGetIsFiring = 0;
	AwPawn_execGetIsFiring_Parms parms;

	if ( !pGetIsFiring )
		pGetIsFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetIsFiring" );

	this->ProcessEvent ( pGetIsFiring, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::StopFiring (  )
{
	static UFunction* pStopFiring = 0;
	AwPawn_execStopFiring_Parms parms;

	if ( !pStopFiring )
		pStopFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.StopFiring" );

	this->ProcessEvent ( pStopFiring, &parms, NULL );

}*/

/*void AwPawn::StartFiring ( bool bHeavy, bool bRapid )
{
	static UFunction* pStartFiring = 0;
	AwPawn_execStartFiring_Parms parms;

	if ( !pStartFiring )
		pStartFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.StartFiring" );

	parms.bHeavy = bHeavy;
	parms.bRapid = bRapid;
	this->ProcessEvent ( pStartFiring, &parms, NULL );

}*/

/*void AwPawn::eventSetAnimAction ( struct FName NewAction )
{
	static UFunction* pSetAnimAction = 0;
	AwPawn_eventSetAnimAction_Parms parms;

	if ( !pSetAnimAction )
		pSetAnimAction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetAnimAction" );

	parms.NewAction = NewAction;
	this->ProcessEvent ( pSetAnimAction, &parms, NULL );

}*/

/*bool AwPawn::FindValidTaunt ( struct FName* Sequence )
{
	static UFunction* pFindValidTaunt = 0;
	AwPawn_execFindValidTaunt_Parms parms;

	if ( !pFindValidTaunt )
		pFindValidTaunt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.FindValidTaunt" );

	parms.Sequence = *Sequence;
	this->ProcessEvent ( pFindValidTaunt, &parms, NULL );

	*Sequence = parms.Sequence;
	return parms.ReturnValue;
}*/

/*void AwPawn::PlayDoubleJump (  )
{
	static UFunction* pPlayDoubleJump = 0;
	AwPawn_execPlayDoubleJump_Parms parms;

	if ( !pPlayDoubleJump )
		pPlayDoubleJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayDoubleJump" );

	this->ProcessEvent ( pPlayDoubleJump, &parms, NULL );

}*/

/*struct FName AwPawn::GetAnimSequence (  )
{
	static UFunction* pGetAnimSequence = 0;
	AwPawn_execGetAnimSequence_Parms parms;

	if ( !pGetAnimSequence )
		pGetAnimSequence = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetAnimSequence" );

	this->ProcessEvent ( pGetAnimSequence, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::eventLanded ( struct FVector HitNormal )
{
	static UFunction* pLanded = 0;
	AwPawn_eventLanded_Parms parms;

	if ( !pLanded )
		pLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.Landed" );

	parms.HitNormal = HitNormal;
	this->ProcessEvent ( pLanded, &parms, NULL );

}*/

/*void AwPawn::eventPlayLandedSound ( int SurfType )
{
	static UFunction* pPlayLandedSound = 0;
	AwPawn_eventPlayLandedSound_Parms parms;

	if ( !pPlayLandedSound )
		pPlayLandedSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayLandedSound" );

	parms.SurfType = SurfType;
	this->ProcessEvent ( pPlayLandedSound, &parms, NULL );

}*/

/*struct FName AwPawn::GetOffhandBoneFor ( class AInventory* i )
{
	static UFunction* pGetOffhandBoneFor = 0;
	AwPawn_execGetOffhandBoneFor_Parms parms;

	if ( !pGetOffhandBoneFor )
		pGetOffhandBoneFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetOffhandBoneFor" );

	parms.i = i;
	this->ProcessEvent ( pGetOffhandBoneFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FName AwPawn::GetWeaponBoneFor ( class AInventory* i )
{
	static UFunction* pGetWeaponBoneFor = 0;
	AwPawn_execGetWeaponBoneFor_Parms parms;

	if ( !pGetWeaponBoneFor )
		pGetWeaponBoneFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetWeaponBoneFor" );

	parms.i = i;
	this->ProcessEvent ( pGetWeaponBoneFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwPawn::CheckReflect ( struct FVector HitLocation, int Damage, struct FVector* RefNormal )
{
	static UFunction* pCheckReflect = 0;
	AwPawn_execCheckReflect_Parms parms;

	if ( !pCheckReflect )
		pCheckReflect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.CheckReflect" );

	parms.HitLocation = HitLocation;
	parms.Damage = Damage;
	this->ProcessEvent ( pCheckReflect, &parms, NULL );

	*RefNormal = parms.RefNormal;
	return parms.ReturnValue;
}*/

/*void AwPawn::PlayHit ( float Damage, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, int CollisionPart )
{
	static UFunction* pPlayHit = 0;
	AwPawn_execPlayHit_Parms parms;

	if ( !pPlayHit )
		pPlayHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayHit" );

	parms.Damage = Damage;
	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.DamageType = DamageType;
	parms.Momentum = Momentum;
	parms.CollisionPart = CollisionPart;
	this->ProcessEvent ( pPlayHit, &parms, NULL );

}*/

/*void AwPawn::PostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AwPawn_execPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AwPawn::InitMyParam (  )
{
	static UFunction* pInitMyParam = 0;
	AwPawn_execInitMyParam_Parms parms;

	if ( !pInitMyParam )
		pInitMyParam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.InitMyParam" );

	this->ProcessEvent ( pInitMyParam, &parms, NULL );

}*/

/*void AwPawn::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwPawn_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwPawn::eventTick ( float DeltaTime )
{
	static UFunction* pTick = 0;
	AwPawn_eventTick_Parms parms;

	if ( !pTick )
		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.Tick" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pTick, &parms, NULL );

}*/

/*void AwPawn::TestVersion_SetParameters (  )
{
	static UFunction* pTestVersion_SetParameters = 0;
	AwPawn_execTestVersion_SetParameters_Parms parms;

	if ( !pTestVersion_SetParameters )
		pTestVersion_SetParameters = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.TestVersion_SetParameters" );

	this->ProcessEvent ( pTestVersion_SetParameters, &parms, NULL );

}*/

/*void AwPawn::TickDeRes ( float DeltaTime )
{
	static UFunction* pTickDeRes = 0;
	AwPawn_execTickDeRes_Parms parms;

	if ( !pTickDeRes )
		pTickDeRes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.TickDeRes" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pTickDeRes, &parms, NULL );

}*/

/*void AwPawn::SetOverlayMaterial ( class UMaterial* mat, float Time, bool bOverride )
{
	static UFunction* pSetOverlayMaterial = 0;
	AwPawn_execSetOverlayMaterial_Parms parms;

	if ( !pSetOverlayMaterial )
		pSetOverlayMaterial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetOverlayMaterial" );

	parms.mat = mat;
	parms.Time = Time;
	parms.bOverride = bOverride;
	this->ProcessEvent ( pSetOverlayMaterial, &parms, NULL );

}*/

/*void AwPawn::StartDeRes (  )
{
	static UFunction* pStartDeRes = 0;
	AwPawn_execStartDeRes_Parms parms;

	if ( !pStartDeRes )
		pStartDeRes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.StartDeRes" );

	this->ProcessEvent ( pStartDeRes, &parms, NULL );

}*/

/*void AwPawn::DoDamageFX ( struct FName BoneName, int Damage, class UClass* DamageType, struct FRotator R, struct FVector HitLoc, int CollisionPart )
{
	static UFunction* pDoDamageFX = 0;
	AwPawn_execDoDamageFX_Parms parms;

	if ( !pDoDamageFX )
		pDoDamageFX = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.DoDamageFX" );

	parms.BoneName = BoneName;
	parms.Damage = Damage;
	parms.DamageType = DamageType;
	parms.R = R;
	parms.HitLoc = HitLoc;
	parms.CollisionPart = CollisionPart;
	this->ProcessEvent ( pDoDamageFX, &parms, NULL );

}*/

/*void AwPawn::GetBoneNameByCollisionID ( int CollisionID, struct FName* BoneName )
{
	static UFunction* pGetBoneNameByCollisionID = 0;
	AwPawn_execGetBoneNameByCollisionID_Parms parms;

	if ( !pGetBoneNameByCollisionID )
		pGetBoneNameByCollisionID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetBoneNameByCollisionID" );

	parms.CollisionID = CollisionID;
	this->ProcessEvent ( pGetBoneNameByCollisionID, &parms, NULL );

	*BoneName = parms.BoneName;
}*/

/*void AwPawn::CalcHitLoc ( struct FVector HitLoc, struct FVector hitRay, struct FName* BoneName, float* dist )
{
	static UFunction* pCalcHitLoc = 0;
	AwPawn_execCalcHitLoc_Parms parms;

	if ( !pCalcHitLoc )
		pCalcHitLoc = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.CalcHitLoc" );

	parms.HitLoc = HitLoc;
	parms.hitRay = hitRay;
	this->ProcessEvent ( pCalcHitLoc, &parms, NULL );

	*BoneName = parms.BoneName;
	*dist = parms.dist;
}*/

/*void AwPawn::HideBone ( struct FName BoneName )
{
	static UFunction* pHideBone = 0;
	AwPawn_execHideBone_Parms parms;

	if ( !pHideBone )
		pHideBone = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.HideBone" );

	parms.BoneName = BoneName;
	this->ProcessEvent ( pHideBone, &parms, NULL );

}*/

/*class UClass* AwPawn::GetBloodHitClass ( bool bHeadShot )
{
	static UFunction* pGetBloodHitClass = 0;
	AwPawn_execGetBloodHitClass_Parms parms;

	if ( !pGetBloodHitClass )
		pGetBloodHitClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetBloodHitClass" );

	parms.bHeadShot = bHeadShot;
	this->ProcessEvent ( pGetBloodHitClass, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::ProcessHitFX (  )
{
	static UFunction* pProcessHitFX = 0;
	AwPawn_execProcessHitFX_Parms parms;

	if ( !pProcessHitFX )
		pProcessHitFX = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ProcessHitFX" );

	this->ProcessEvent ( pProcessHitFX, &parms, NULL );

}*/

/*void AwPawn::SpawnGiblet ( class UClass* GibClass, struct FVector Location, struct FRotator Rotation, float GibPerterbation, struct FVector GibVelocity )
{
	static UFunction* pSpawnGiblet = 0;
	AwPawn_execSpawnGiblet_Parms parms;

	if ( !pSpawnGiblet )
		pSpawnGiblet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SpawnGiblet" );

	parms.GibClass = GibClass;
	parms.Location = Location;
	parms.Rotation = Rotation;
	parms.GibPerterbation = GibPerterbation;
	parms.GibVelocity = GibVelocity;
	this->ProcessEvent ( pSpawnGiblet, &parms, NULL );

}*/

/*void AwPawn::eventSetHeadScale ( float NewScale )
{
	static UFunction* pSetHeadScale = 0;
	AwPawn_eventSetHeadScale_Parms parms;

	if ( !pSetHeadScale )
		pSetHeadScale = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SetHeadScale" );

	parms.NewScale = NewScale;
	this->ProcessEvent ( pSetHeadScale, &parms, NULL );

}*/

/*void AwPawn::AttachEffect ( class UClass* EmitterClass, struct FName BoneName, struct FVector Location, struct FRotator Rotation )
{
	static UFunction* pAttachEffect = 0;
	AwPawn_execAttachEffect_Parms parms;

	if ( !pAttachEffect )
		pAttachEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AttachEffect" );

	parms.EmitterClass = EmitterClass;
	parms.BoneName = BoneName;
	parms.Location = Location;
	parms.Rotation = Rotation;
	this->ProcessEvent ( pAttachEffect, &parms, NULL );

}*/

/*void AwPawn::StopDriving ( class AVehicle* V )
{
	static UFunction* pStopDriving = 0;
	AwPawn_execStopDriving_Parms parms;

	if ( !pStopDriving )
		pStopDriving = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.StopDriving" );

	parms.V = V;
	this->ProcessEvent ( pStopDriving, &parms, NULL );

}*/

/*void AwPawn::StartDriving ( class AVehicle* V )
{
	static UFunction* pStartDriving = 0;
	AwPawn_execStartDriving_Parms parms;

	if ( !pStartDriving )
		pStartDriving = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.StartDriving" );

	parms.V = V;
	this->ProcessEvent ( pStartDriving, &parms, NULL );

}*/

/*void AwPawn::TickDamage ( float DeltaTime )
{
	static UFunction* pTickDamage = 0;
	AwPawn_execTickDamage_Parms parms;

	if ( !pTickDamage )
		pTickDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.TickDamage" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pTickDamage, &parms, NULL );

}*/

/*void AwPawn::TickFX ( float DeltaTime )
{
	static UFunction* pTickFX = 0;
	AwPawn_execTickFX_Parms parms;

	if ( !pTickFX )
		pTickFX = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.TickFX" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pTickFX, &parms, NULL );

}*/

/*void AwPawn::RemovePowerups (  )
{
	static UFunction* pRemovePowerups = 0;
	AwPawn_execRemovePowerups_Parms parms;

	if ( !pRemovePowerups )
		pRemovePowerups = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.RemovePowerups" );

	this->ProcessEvent ( pRemovePowerups, &parms, NULL );

}*/

/*class ATeamInfo* AwPawn::GetTeam (  )
{
	static UFunction* pGetTeam = 0;
	AwPawn_execGetTeam_Parms parms;

	if ( !pGetTeam )
		pGetTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetTeam" );

	this->ProcessEvent ( pGetTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwPawn::GetTeamNum (  )
{
	static UFunction* pGetTeamNum = 0;
	AwPawn_execGetTeamNum_Parms parms;

	if ( !pGetTeamNum )
		pGetTeamNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetTeamNum" );

	this->ProcessEvent ( pGetTeamNum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AController* AwPawn::GetKillerController (  )
{
	static UFunction* pGetKillerController = 0;
	AwPawn_execGetKillerController_Parms parms;

	if ( !pGetKillerController )
		pGetKillerController = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetKillerController" );

	this->ProcessEvent ( pGetKillerController, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::Gasp (  )
{
	static UFunction* pGasp = 0;
	AwPawn_execGasp_Parms parms;

	if ( !pGasp )
		pGasp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.Gasp" );

	this->ProcessEvent ( pGasp, &parms, NULL );

}*/

/*void AwPawn::PlayDyingSound (  )
{
	static UFunction* pPlayDyingSound = 0;
	AwPawn_execPlayDyingSound_Parms parms;

	if ( !pPlayDyingSound )
		pPlayDyingSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayDyingSound" );

	this->ProcessEvent ( pPlayDyingSound, &parms, NULL );

}*/

/*void AwPawn::PlayMoverHitSound (  )
{
	static UFunction* pPlayMoverHitSound = 0;
	AwPawn_execPlayMoverHitSound_Parms parms;

	if ( !pPlayMoverHitSound )
		pPlayMoverHitSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayMoverHitSound" );

	this->ProcessEvent ( pPlayMoverHitSound, &parms, NULL );

}*/

/*void AwPawn::PlayTeleportEffect ( bool bOut, bool bSound )
{
	static UFunction* pPlayTeleportEffect = 0;
	AwPawn_execPlayTeleportEffect_Parms parms;

	if ( !pPlayTeleportEffect )
		pPlayTeleportEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayTeleportEffect" );

	parms.bOut = bOut;
	parms.bSound = bSound;
	this->ProcessEvent ( pPlayTeleportEffect, &parms, NULL );

}*/

/*void AwPawn::DeactivateSpawnProtection (  )
{
	static UFunction* pDeactivateSpawnProtection = 0;
	AwPawn_execDeactivateSpawnProtection_Parms parms;

	if ( !pDeactivateSpawnProtection )
		pDeactivateSpawnProtection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.DeactivateSpawnProtection" );

	this->ProcessEvent ( pDeactivateSpawnProtection, &parms, NULL );

}*/

/*float AwPawn::AdjustedStrength (  )
{
	static UFunction* pAdjustedStrength = 0;
	AwPawn_execAdjustedStrength_Parms parms;

	if ( !pAdjustedStrength )
		pAdjustedStrength = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AdjustedStrength" );

	this->ProcessEvent ( pAdjustedStrength, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pPhysicsVolumeChange = 0;
	AwPawn_eventPhysicsVolumeChange_Parms parms;

	if ( !pPhysicsVolumeChange )
		pPhysicsVolumeChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PhysicsVolumeChange" );

	parms.NewVolume = NewVolume;
	this->ProcessEvent ( pPhysicsVolumeChange, &parms, NULL );

}*/

/*void AwPawn::RemoveFlamingEffects (  )
{
	static UFunction* pRemoveFlamingEffects = 0;
	AwPawn_execRemoveFlamingEffects_Parms parms;

	if ( !pRemoveFlamingEffects )
		pRemoveFlamingEffects = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.RemoveFlamingEffects" );

	this->ProcessEvent ( pRemoveFlamingEffects, &parms, NULL );

}*/

/*void AwPawn::Destroyed (  )
{
	static UFunction* pDestroyed = 0;
	AwPawn_execDestroyed_Parms parms;

	if ( !pDestroyed )
		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.Destroyed" );

	this->ProcessEvent ( pDestroyed, &parms, NULL );

}*/

/*void AwPawn::AssignInitialPose (  )
{
	static UFunction* pAssignInitialPose = 0;
	AwPawn_execAssignInitialPose_Parms parms;

	if ( !pAssignInitialPose )
		pAssignInitialPose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AssignInitialPose" );

	this->ProcessEvent ( pAssignInitialPose, &parms, NULL );

}*/

/*void AwPawn::DoTranslocateOut ( struct FVector PrevLocation )
{
	static UFunction* pDoTranslocateOut = 0;
	AwPawn_execDoTranslocateOut_Parms parms;

	if ( !pDoTranslocateOut )
		pDoTranslocateOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.DoTranslocateOut" );

	parms.PrevLocation = PrevLocation;
	this->ProcessEvent ( pDoTranslocateOut, &parms, NULL );

}*/

/*bool AwPawn::WasPlayerPawn (  )
{
	static UFunction* pWasPlayerPawn = 0;
	AwPawn_execWasPlayerPawn_Parms parms;

	if ( !pWasPlayerPawn )
		pWasPlayerPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.WasPlayerPawn" );

	this->ProcessEvent ( pWasPlayerPawn, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::UnPossessed (  )
{
	static UFunction* pUnPossessed = 0;
	AwPawn_execUnPossessed_Parms parms;

	if ( !pUnPossessed )
		pUnPossessed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.UnPossessed" );

	this->ProcessEvent ( pUnPossessed, &parms, NULL );

}*/

/*void AwPawn::PossessedBy ( class AController* C )
{
	static UFunction* pPossessedBy = 0;
	AwPawn_execPossessedBy_Parms parms;

	if ( !pPossessedBy )
		pPossessedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PossessedBy" );

	parms.C = C;
	this->ProcessEvent ( pPossessedBy, &parms, NULL );

}*/

/*class URosterEntry* AwPawn::GetPlacedRoster (  )
{
	static UFunction* pGetPlacedRoster = 0;
	AwPawn_execGetPlacedRoster_Parms parms;

	if ( !pGetPlacedRoster )
		pGetPlacedRoster = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.GetPlacedRoster" );

	this->ProcessEvent ( pGetPlacedRoster, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPawn::PlayWaiting (  )
{
	static UFunction* pPlayWaiting = 0;
	AwPawn_execPlayWaiting_Parms parms;

	if ( !pPlayWaiting )
		pPlayWaiting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayWaiting" );

	this->ProcessEvent ( pPlayWaiting, &parms, NULL );

}*/

/*void AwPawn::AltFire ( float f )
{
	static UFunction* pAltFire = 0;
	AwPawn_execAltFire_Parms parms;

	if ( !pAltFire )
		pAltFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.AltFire" );

	parms.f = f;
	this->ProcessEvent ( pAltFire, &parms, NULL );

}*/

/*void AwPawn::Fire ( float f )
{
	static UFunction* pFire = 0;
	AwPawn_execFire_Parms parms;

	if ( !pFire )
		pFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.Fire" );

	parms.f = f;
	this->ProcessEvent ( pFire, &parms, NULL );

}*/

/*void AwPawn::ClientWeaponReset (  )
{
	static UFunction* pClientWeaponReset = 0;
	AwPawn_execClientWeaponReset_Parms parms;

	if ( !pClientWeaponReset )
		pClientWeaponReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.ClientWeaponReset" );

	this->ProcessEvent ( pClientWeaponReset, &parms, NULL );

}*/

/*void AwPawn::SimulatedSetRotation ( struct FRotator R )
{
	static UFunction* pSimulatedSetRotation = 0;
	AwPawn_execSimulatedSetRotation_Parms parms;

	if ( !pSimulatedSetRotation )
		pSimulatedSetRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.SimulatedSetRotation" );

	parms.R = R;
	this->ProcessEvent ( pSimulatedSetRotation, &parms, NULL );

}*/

/*void AwPawn::PlayTurretIdleAnim ( bool UpDown )
{
	static UFunction* pPlayTurretIdleAnim = 0;
	AwPawn_execPlayTurretIdleAnim_Parms parms;

	if ( !pPlayTurretIdleAnim )
		pPlayTurretIdleAnim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawn.PlayTurretIdleAnim" );

	parms.UpDown = UpDown;
	this->ProcessEvent ( pPlayTurretIdleAnim, &parms, NULL );

}*/

/*class USound* UwPawnSoundGroup::GetEquipHitSound (  )
{
	static UFunction* pGetEquipHitSound = 0;
	UwPawnSoundGroup_execGetEquipHitSound_Parms parms;

	if ( !pGetEquipHitSound )
		pGetEquipHitSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawnSoundGroup.GetEquipHitSound" );

	this->ProcessEvent ( pGetEquipHitSound, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class USound* UwPawnSoundGroup::GetBreathSound (  )
{
	static UFunction* pGetBreathSound = 0;
	UwPawnSoundGroup_execGetBreathSound_Parms parms;

	if ( !pGetBreathSound )
		pGetBreathSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawnSoundGroup.GetBreathSound" );

	this->ProcessEvent ( pGetBreathSound, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class USound* UwPawnSoundGroup::GetSound ( unsigned char soundType )
{
	static UFunction* pGetSound = 0;
	UwPawnSoundGroup_execGetSound_Parms parms;

	if ( !pGetSound )
		pGetSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawnSoundGroup.GetSound" );

	parms.soundType = soundType;
	this->ProcessEvent ( pGetSound, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class USound* UwPawnSoundGroup::GetLanedSound ( int SurfType, bool bFirstPerson )
{
	static UFunction* pGetLanedSound = 0;
	UwPawnSoundGroup_execGetLanedSound_Parms parms;

	if ( !pGetLanedSound )
		pGetLanedSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawnSoundGroup.GetLanedSound" );

	parms.SurfType = SurfType;
	parms.bFirstPerson = bFirstPerson;
	this->ProcessEvent ( pGetLanedSound, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class USound* UwPawnSoundGroup::GetDeathSound (  )
{
	static UFunction* pGetDeathSound = 0;
	UwPawnSoundGroup_execGetDeathSound_Parms parms;

	if ( !pGetDeathSound )
		pGetDeathSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawnSoundGroup.GetDeathSound" );

	this->ProcessEvent ( pGetDeathSound, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class USound* UwPawnSoundGroup::GetHitSound (  )
{
	static UFunction* pGetHitSound = 0;
	UwPawnSoundGroup_execGetHitSound_Parms parms;

	if ( !pGetHitSound )
		pGetHitSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPawnSoundGroup.GetHitSound" );

	this->ProcessEvent ( pGetHitSound, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPlayer::execAnimRate ( float fAnimRate )
{
	static UFunction* pAnimRate = 0;
	AwPlayer_execAnimRate_Parms parms;

	if ( !pAnimRate )
		pAnimRate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.AnimRate" );

	parms.fAnimRate = fAnimRate;
	this->ProcessEvent ( pAnimRate, &parms, NULL );

}*/

/*void AwPlayer::execUseRagdoll ( bool bUse )
{
	static UFunction* pUseRagdoll = 0;
	AwPlayer_execUseRagdoll_Parms parms;

	if ( !pUseRagdoll )
		pUseRagdoll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.UseRagdoll" );

	parms.bUse = bUse;
	this->ProcessEvent ( pUseRagdoll, &parms, NULL );

}*/

/*void AwPlayer::execBodyRot_BR ( float fR )
{
	static UFunction* pBodyRot_BR = 0;
	AwPlayer_execBodyRot_BR_Parms parms;

	if ( !pBodyRot_BR )
		pBodyRot_BR = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.BodyRot_BR" );

	parms.fR = fR;
	this->ProcessEvent ( pBodyRot_BR, &parms, NULL );

}*/

/*void AwPlayer::execBodyRot_BL ( float fR )
{
	static UFunction* pBodyRot_BL = 0;
	AwPlayer_execBodyRot_BL_Parms parms;

	if ( !pBodyRot_BL )
		pBodyRot_BL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.BodyRot_BL" );

	parms.fR = fR;
	this->ProcessEvent ( pBodyRot_BL, &parms, NULL );

}*/

/*void AwPlayer::execBodyRot_FR ( float fR )
{
	static UFunction* pBodyRot_FR = 0;
	AwPlayer_execBodyRot_FR_Parms parms;

	if ( !pBodyRot_FR )
		pBodyRot_FR = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.BodyRot_FR" );

	parms.fR = fR;
	this->ProcessEvent ( pBodyRot_FR, &parms, NULL );

}*/

/*void AwPlayer::execBodyRot_FL ( float fR )
{
	static UFunction* pBodyRot_FL = 0;
	AwPlayer_execBodyRot_FL_Parms parms;

	if ( !pBodyRot_FL )
		pBodyRot_FL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.BodyRot_FL" );

	parms.fR = fR;
	this->ProcessEvent ( pBodyRot_FL, &parms, NULL );

}*/

/*void AwPlayer::execRot_CBR ( struct FString fX, struct FString fY, struct FString fZ )
{
	static UFunction* pRot_CBR = 0;
	AwPlayer_execRot_CBR_Parms parms;

	if ( !pRot_CBR )
		pRot_CBR = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.Rot_CBR" );

	parms.fX = fX;
	parms.fY = fY;
	parms.fZ = fZ;
	this->ProcessEvent ( pRot_CBR, &parms, NULL );

}*/

/*void AwPlayer::execRot_CBL ( struct FString fX, struct FString fY, struct FString fZ )
{
	static UFunction* pRot_CBL = 0;
	AwPlayer_execRot_CBL_Parms parms;

	if ( !pRot_CBL )
		pRot_CBL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.Rot_CBL" );

	parms.fX = fX;
	parms.fY = fY;
	parms.fZ = fZ;
	this->ProcessEvent ( pRot_CBL, &parms, NULL );

}*/

/*void AwPlayer::execRot_CFR ( struct FString fX, struct FString fY, struct FString fZ )
{
	static UFunction* pRot_CFR = 0;
	AwPlayer_execRot_CFR_Parms parms;

	if ( !pRot_CFR )
		pRot_CFR = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.Rot_CFR" );

	parms.fX = fX;
	parms.fY = fY;
	parms.fZ = fZ;
	this->ProcessEvent ( pRot_CFR, &parms, NULL );

}*/

/*void AwPlayer::execRot_CFL ( struct FString fX, struct FString fY, struct FString fZ )
{
	static UFunction* pRot_CFL = 0;
	AwPlayer_execRot_CFL_Parms parms;

	if ( !pRot_CFL )
		pRot_CFL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.Rot_CFL" );

	parms.fX = fX;
	parms.fY = fY;
	parms.fZ = fZ;
	this->ProcessEvent ( pRot_CFL, &parms, NULL );

}*/

/*void AwPlayer::execRot_BR ( struct FString fX, struct FString fY, struct FString fZ )
{
	static UFunction* pRot_BR = 0;
	AwPlayer_execRot_BR_Parms parms;

	if ( !pRot_BR )
		pRot_BR = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.Rot_BR" );

	parms.fX = fX;
	parms.fY = fY;
	parms.fZ = fZ;
	this->ProcessEvent ( pRot_BR, &parms, NULL );

}*/

/*void AwPlayer::execRot_BL ( struct FString fX, struct FString fY, struct FString fZ )
{
	static UFunction* pRot_BL = 0;
	AwPlayer_execRot_BL_Parms parms;

	if ( !pRot_BL )
		pRot_BL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.Rot_BL" );

	parms.fX = fX;
	parms.fY = fY;
	parms.fZ = fZ;
	this->ProcessEvent ( pRot_BL, &parms, NULL );

}*/

/*void AwPlayer::execRot_FR ( struct FString fX, struct FString fY, struct FString fZ )
{
	static UFunction* pRot_FR = 0;
	AwPlayer_execRot_FR_Parms parms;

	if ( !pRot_FR )
		pRot_FR = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.Rot_FR" );

	parms.fX = fX;
	parms.fY = fY;
	parms.fZ = fZ;
	this->ProcessEvent ( pRot_FR, &parms, NULL );

}*/

/*void AwPlayer::execRot_FL ( struct FString fX, struct FString fY, struct FString fZ )
{
	static UFunction* pRot_FL = 0;
	AwPlayer_execRot_FL_Parms parms;

	if ( !pRot_FL )
		pRot_FL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.Rot_FL" );

	parms.fX = fX;
	parms.fY = fY;
	parms.fZ = fZ;
	this->ProcessEvent ( pRot_FL, &parms, NULL );

}*/

/*void AwPlayer::execShowRot (  )
{
	static UFunction* pShowRot = 0;
	AwPlayer_execShowRot_Parms parms;

	if ( !pShowRot )
		pShowRot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ShowRot" );

	this->ProcessEvent ( pShowRot, &parms, NULL );

}*/

/*void AwPlayer::RenderSpectatorFPWeapon ( class UCanvas* Canvas, bool bClearedZBuffer )
{
	static UFunction* pRenderSpectatorFPWeapon = 0;
	AwPlayer_execRenderSpectatorFPWeapon_Parms parms;

	if ( !pRenderSpectatorFPWeapon )
		pRenderSpectatorFPWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.RenderSpectatorFPWeapon" );

	parms.Canvas = Canvas;
	parms.bClearedZBuffer = bClearedZBuffer;
	this->ProcessEvent ( pRenderSpectatorFPWeapon, &parms, NULL );

}*/

/*void AwPlayer::ChangeMouseSenseAim ( float dt )
{
	static UFunction* pChangeMouseSenseAim = 0;
	AwPlayer_execChangeMouseSenseAim_Parms parms;

	if ( !pChangeMouseSenseAim )
		pChangeMouseSenseAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ChangeMouseSenseAim" );

	parms.dt = dt;
	this->ProcessEvent ( pChangeMouseSenseAim, &parms, NULL );

}*/

/*void AwPlayer::ChangeMouseSense ( float dt )
{
	static UFunction* pChangeMouseSense = 0;
	AwPlayer_execChangeMouseSense_Parms parms;

	if ( !pChangeMouseSense )
		pChangeMouseSense = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ChangeMouseSense" );

	parms.dt = dt;
	this->ProcessEvent ( pChangeMouseSense, &parms, NULL );

}*/

/*void AwPlayer::execMouseSenseDownAim (  )
{
	static UFunction* pMouseSenseDownAim = 0;
	AwPlayer_execMouseSenseDownAim_Parms parms;

	if ( !pMouseSenseDownAim )
		pMouseSenseDownAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.MouseSenseDownAim" );

	this->ProcessEvent ( pMouseSenseDownAim, &parms, NULL );

}*/

/*void AwPlayer::execMouseSenseUpAim (  )
{
	static UFunction* pMouseSenseUpAim = 0;
	AwPlayer_execMouseSenseUpAim_Parms parms;

	if ( !pMouseSenseUpAim )
		pMouseSenseUpAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.MouseSenseUpAim" );

	this->ProcessEvent ( pMouseSenseUpAim, &parms, NULL );

}*/

/*void AwPlayer::execMouseSenseDown (  )
{
	static UFunction* pMouseSenseDown = 0;
	AwPlayer_execMouseSenseDown_Parms parms;

	if ( !pMouseSenseDown )
		pMouseSenseDown = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.MouseSenseDown" );

	this->ProcessEvent ( pMouseSenseDown, &parms, NULL );

}*/

/*void AwPlayer::execMouseSenseUp (  )
{
	static UFunction* pMouseSenseUp = 0;
	AwPlayer_execMouseSenseUp_Parms parms;

	if ( !pMouseSenseUp )
		pMouseSenseUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.MouseSenseUp" );

	this->ProcessEvent ( pMouseSenseUp, &parms, NULL );

}*/

/*void AwPlayer::RemoveSkill_Client ( int iSkillID )
{
	static UFunction* pRemoveSkill_Client = 0;
	AwPlayer_execRemoveSkill_Client_Parms parms;

	if ( !pRemoveSkill_Client )
		pRemoveSkill_Client = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.RemoveSkill_Client" );

	parms.iSkillID = iSkillID;
	this->ProcessEvent ( pRemoveSkill_Client, &parms, NULL );

}*/

/*void AwPlayer::RemoveSkill ( int iSkillID )
{
	static UFunction* pRemoveSkill = 0;
	AwPlayer_execRemoveSkill_Parms parms;

	if ( !pRemoveSkill )
		pRemoveSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.RemoveSkill" );

	parms.iSkillID = iSkillID;
	this->ProcessEvent ( pRemoveSkill, &parms, NULL );

}*/

/*void AwPlayer::ClientReStart ( class APawn* NewPawn )
{
	static UFunction* pClientReStart = 0;
	AwPlayer_execClientReStart_Parms parms;

	if ( !pClientReStart )
		pClientReStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ClientReStart" );

	parms.NewPawn = NewPawn;
	this->ProcessEvent ( pClientReStart, &parms, NULL );

}*/

/*void AwPlayer::ServerSkillUsedByWeapon ( int iWeaponID )
{
	static UFunction* pServerSkillUsedByWeapon = 0;
	AwPlayer_execServerSkillUsedByWeapon_Parms parms;

	if ( !pServerSkillUsedByWeapon )
		pServerSkillUsedByWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ServerSkillUsedByWeapon" );

	parms.iWeaponID = iWeaponID;
	this->ProcessEvent ( pServerSkillUsedByWeapon, &parms, NULL );

}*/

/*void AwPlayer::SkillUsedByWeapon ( int iWeaponID )
{
	static UFunction* pSkillUsedByWeapon = 0;
	AwPlayer_execSkillUsedByWeapon_Parms parms;

	if ( !pSkillUsedByWeapon )
		pSkillUsedByWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.SkillUsedByWeapon" );

	parms.iWeaponID = iWeaponID;
	this->ProcessEvent ( pSkillUsedByWeapon, &parms, NULL );

}*/

/*void AwPlayer::ApplySkill_Client ( int iSkillID )
{
	static UFunction* pApplySkill_Client = 0;
	AwPlayer_execApplySkill_Client_Parms parms;

	if ( !pApplySkill_Client )
		pApplySkill_Client = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ApplySkill_Client" );

	parms.iSkillID = iSkillID;
	this->ProcessEvent ( pApplySkill_Client, &parms, NULL );

}*/

/*void AwPlayer::AddSkill_Client ( int iSkillID )
{
	static UFunction* pAddSkill_Client = 0;
	AwPlayer_execAddSkill_Client_Parms parms;

	if ( !pAddSkill_Client )
		pAddSkill_Client = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.AddSkill_Client" );

	parms.iSkillID = iSkillID;
	this->ProcessEvent ( pAddSkill_Client, &parms, NULL );

}*/

/*void AwPlayer::SkillInit_Server ( bool bQuickslotChange )
{
	static UFunction* pSkillInit_Server = 0;
	AwPlayer_execSkillInit_Server_Parms parms;

	if ( !pSkillInit_Server )
		pSkillInit_Server = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.SkillInit_Server" );

	parms.bQuickslotChange = bQuickslotChange;
	this->ProcessEvent ( pSkillInit_Server, &parms, NULL );

}*/

/*void AwPlayer::AddSkill ( int iSkillID )
{
	static UFunction* pAddSkill = 0;
	AwPlayer_execAddSkill_Parms parms;

	if ( !pAddSkill )
		pAddSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.AddSkill" );

	parms.iSkillID = iSkillID;
	this->ProcessEvent ( pAddSkill, &parms, NULL );

}*/

/*void AwPlayer::ShowResultMenu (  )
{
	static UFunction* pShowResultMenu = 0;
	AwPlayer_execShowResultMenu_Parms parms;

	if ( !pShowResultMenu )
		pShowResultMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ShowResultMenu" );

	this->ProcessEvent ( pShowResultMenu, &parms, NULL );

}*/

/*void AwPlayer::execHIJTest00 (  )
{
	static UFunction* pHIJTest00 = 0;
	AwPlayer_execHIJTest00_Parms parms;

	if ( !pHIJTest00 )
		pHIJTest00 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.HIJTest00" );

	this->ProcessEvent ( pHIJTest00, &parms, NULL );

}*/

/*void AwPlayer::execPartsTest (  )
{
	static UFunction* pPartsTest = 0;
	AwPlayer_execPartsTest_Parms parms;

	if ( !pPartsTest )
		pPartsTest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.PartsTest" );

	this->ProcessEvent ( pPartsTest, &parms, NULL );

}*/

/*void AwPlayer::exectT ( float fRate )
{
	static UFunction* ptT = 0;
	AwPlayer_exectT_Parms parms;

	if ( !ptT )
		ptT = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.tT" );

	parms.fRate = fRate;
	this->ProcessEvent ( ptT, &parms, NULL );

}*/

/*void AwPlayer::execTTT (  )
{
	static UFunction* pTTT = 0;
	AwPlayer_execTTT_Parms parms;

	if ( !pTTT )
		pTTT = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.TTT" );

	this->ProcessEvent ( pTTT, &parms, NULL );

}*/

/*void AwPlayer::execHIJ2 (  )
{
	static UFunction* pHIJ2 = 0;
	AwPlayer_execHIJ2_Parms parms;

	if ( !pHIJ2 )
		pHIJ2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.HIJ2" );

	this->ProcessEvent ( pHIJ2, &parms, NULL );

}*/

/*void AwPlayer::execHIJ (  )
{
	static UFunction* pHIJ = 0;
	AwPlayer_execHIJ_Parms parms;

	if ( !pHIJ )
		pHIJ = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.HIJ" );

	this->ProcessEvent ( pHIJ, &parms, NULL );

}*/

/*void AwPlayer::ServerWarp (  )
{
	static UFunction* pServerWarp = 0;
	AwPlayer_execServerWarp_Parms parms;

	if ( !pServerWarp )
		pServerWarp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ServerWarp" );

	this->ProcessEvent ( pServerWarp, &parms, NULL );

}*/

/*void AwPlayer::execWarp (  )
{
	static UFunction* pWarp = 0;
	AwPlayer_execWarp_Parms parms;

	if ( !pWarp )
		pWarp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.Warp" );

	this->ProcessEvent ( pWarp, &parms, NULL );

}*/

/*bool AwPlayer::CallUAV (  )
{
	static UFunction* pCallUAV = 0;
	AwPlayer_execCallUAV_Parms parms;

	if ( !pCallUAV )
		pCallUAV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.CallUAV" );

	this->ProcessEvent ( pCallUAV, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPlayer::execUAV (  )
{
	static UFunction* pUAV = 0;
	AwPlayer_execUAV_Parms parms;

	if ( !pUAV )
		pUAV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.UAV" );

	this->ProcessEvent ( pUAV, &parms, NULL );

}*/

/*bool AwPlayer::CallAirFire (  )
{
	static UFunction* pCallAirFire = 0;
	AwPlayer_execCallAirFire_Parms parms;

	if ( !pCallAirFire )
		pCallAirFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.CallAirFire" );

	this->ProcessEvent ( pCallAirFire, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FVector AwPlayer::ClipAirStrikeLocation ( class TArray< struct FVector > vLocation, struct FVector* vMin, struct FVector* vMax )
{
	static UFunction* pClipAirStrikeLocation = 0;
	AwPlayer_execClipAirStrikeLocation_Parms parms;

	if ( !pClipAirStrikeLocation )
		pClipAirStrikeLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ClipAirStrikeLocation" );

	parms.vLocation = vLocation;
	this->ProcessEvent ( pClipAirStrikeLocation, &parms, NULL );

	*vMin = parms.vMin;
	*vMax = parms.vMax;
	return parms.ReturnValue;
}*/

/*void AwPlayer::DoAirStrikeFire ( struct FVector HitLocation )
{
	static UFunction* pDoAirStrikeFire = 0;
	AwPlayer_execDoAirStrikeFire_Parms parms;

	if ( !pDoAirStrikeFire )
		pDoAirStrikeFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.DoAirStrikeFire" );

	parms.HitLocation = HitLocation;
	this->ProcessEvent ( pDoAirStrikeFire, &parms, NULL );

}*/

/*bool AwPlayer::IsActiveUAV (  )
{
	static UFunction* pIsActiveUAV = 0;
	AwPlayer_execIsActiveUAV_Parms parms;

	if ( !pIsActiveUAV )
		pIsActiveUAV = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.IsActiveUAV" );

	this->ProcessEvent ( pIsActiveUAV, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwPlayer::IsActiveHelicopter (  )
{
	static UFunction* pIsActiveHelicopter = 0;
	AwPlayer_execIsActiveHelicopter_Parms parms;

	if ( !pIsActiveHelicopter )
		pIsActiveHelicopter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.IsActiveHelicopter" );

	this->ProcessEvent ( pIsActiveHelicopter, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwPlayer::IsActiveAirFire (  )
{
	static UFunction* pIsActiveAirFire = 0;
	AwPlayer_execIsActiveAirFire_Parms parms;

	if ( !pIsActiveAirFire )
		pIsActiveAirFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.IsActiveAirFire" );

	this->ProcessEvent ( pIsActiveAirFire, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwPlayer::CallHelicopter ( bool ignoreSupply )
{
	static UFunction* pCallHelicopter = 0;
	AwPlayer_execCallHelicopter_Parms parms;

	if ( !pCallHelicopter )
		pCallHelicopter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.CallHelicopter" );

	parms.ignoreSupply = ignoreSupply;
	this->ProcessEvent ( pCallHelicopter, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPlayer::execheli (  )
{
	static UFunction* pheli = 0;
	AwPlayer_execheli_Parms parms;

	if ( !pheli )
		pheli = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.heli" );

	this->ProcessEvent ( pheli, &parms, NULL );

}*/

/*void AwPlayer::execc4 (  )
{
	static UFunction* pc4 = 0;
	AwPlayer_execc4_Parms parms;

	if ( !pc4 )
		pc4 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.c4" );

	this->ProcessEvent ( pc4, &parms, NULL );

}*/

/*void AwPlayer::execart (  )
{
	static UFunction* part = 0;
	AwPlayer_execart_Parms parms;

	if ( !part )
		part = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.art" );

	this->ProcessEvent ( part, &parms, NULL );

}*/

void AwPlayer::ServerCallAirStrike ( class AController* Caller )
{
	static UFunction* pServerCallAirStrike = 0;
	AwPlayer_execServerCallAirStrike_Parms parms;

	if ( !pServerCallAirStrike )
		pServerCallAirStrike = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ServerCallAirStrike" );

	parms.Caller = Caller;
	this->ProcessEvent ( pServerCallAirStrike, &parms, NULL );

}

struct FVector AwPlayer::CalcAirStrikeLocation ( float fMaxDist )
{
	static UFunction* pCalcAirStrikeLocation = 0;
	AwPlayer_execCalcAirStrikeLocation_Parms parms;

	if ( !pCalcAirStrikeLocation )
		pCalcAirStrikeLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.CalcAirStrikeLocation" );

	parms.fMaxDist = fMaxDist;
	this->ProcessEvent ( pCalcAirStrikeLocation, &parms, NULL );

	return parms.ReturnValue;
}

void AwPlayer::ServerCallHelicopter ( class APawn* lastHeliPawn, class AController* Caller )
{
	static UFunction* pServerCallHelicopter = 0;
	AwPlayer_execServerCallHelicopter_Parms parms;

	if ( !pServerCallHelicopter )
		pServerCallHelicopter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ServerCallHelicopter" );

	parms.lastHeliPawn = lastHeliPawn;
	parms.Caller = Caller;
	this->ProcessEvent ( pServerCallHelicopter, &parms, NULL );

}

/*void AwPlayer::execCheck (  )
{
	static UFunction* pCheck = 0;
	AwPlayer_execCheck_Parms parms;

	if ( !pCheck )
		pCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.Check" );

	this->ProcessEvent ( pCheck, &parms, NULL );

}*/

/*void AwPlayer::execShowBindings (  )
{
	static UFunction* pShowBindings = 0;
	AwPlayer_execShowBindings_Parms parms;

	if ( !pShowBindings )
		pShowBindings = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ShowBindings" );

	this->ProcessEvent ( pShowBindings, &parms, NULL );

}*/

/*void AwPlayer::execShowAliases (  )
{
	static UFunction* pShowAliases = 0;
	AwPlayer_execShowAliases_Parms parms;

	if ( !pShowAliases )
		pShowAliases = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ShowAliases" );

	this->ProcessEvent ( pShowAliases, &parms, NULL );

}*/

/*void AwPlayer::InitializeVoiceChat (  )
{
	static UFunction* pInitializeVoiceChat = 0;
	AwPlayer_execInitializeVoiceChat_Parms parms;

	if ( !pInitializeVoiceChat )
		pInitializeVoiceChat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.InitializeVoiceChat" );

	this->ProcessEvent ( pInitializeVoiceChat, &parms, NULL );

}*/

/*void AwPlayer::ClientReceiveBan ( struct FString BanInfo )
{
	static UFunction* pClientReceiveBan = 0;
	AwPlayer_execClientReceiveBan_Parms parms;

	if ( !pClientReceiveBan )
		pClientReceiveBan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ClientReceiveBan" );

	parms.BanInfo = BanInfo;
	this->ProcessEvent ( pClientReceiveBan, &parms, NULL );

}*/

/*void AwPlayer::ServerRequestBanInfo ( int PlayerID )
{
	static UFunction* pServerRequestBanInfo = 0;
	AwPlayer_execServerRequestBanInfo_Parms parms;

	if ( !pServerRequestBanInfo )
		pServerRequestBanInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ServerRequestBanInfo" );

	parms.PlayerID = PlayerID;
	this->ProcessEvent ( pServerRequestBanInfo, &parms, NULL );

}*/

/*void AwPlayer::ServerSpecViewGoal (  )
{
	static UFunction* pServerSpecViewGoal = 0;
	AwPlayer_execServerSpecViewGoal_Parms parms;

	if ( !pServerSpecViewGoal )
		pServerSpecViewGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ServerSpecViewGoal" );

	this->ProcessEvent ( pServerSpecViewGoal, &parms, NULL );

}*/

/*void AwPlayer::execSpecViewGoal (  )
{
	static UFunction* pSpecViewGoal = 0;
	AwPlayer_execSpecViewGoal_Parms parms;

	if ( !pSpecViewGoal )
		pSpecViewGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.SpecViewGoal" );

	this->ProcessEvent ( pSpecViewGoal, &parms, NULL );

}*/

/*void AwPlayer::ServerRequestPlayerInfo (  )
{
	static UFunction* pServerRequestPlayerInfo = 0;
	AwPlayer_execServerRequestPlayerInfo_Parms parms;

	if ( !pServerRequestPlayerInfo )
		pServerRequestPlayerInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ServerRequestPlayerInfo" );

	this->ProcessEvent ( pServerRequestPlayerInfo, &parms, NULL );

}*/

/*void AwPlayer::execAdminMenu ( struct FString CommandLine )
{
	static UFunction* pAdminMenu = 0;
	AwPlayer_execAdminMenu_Parms parms;

	if ( !pAdminMenu )
		pAdminMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.AdminMenu" );

	parms.CommandLine = CommandLine;
	this->ProcessEvent ( pAdminMenu, &parms, NULL );

}*/

/*void AwPlayer::eventPostNetReceive (  )
{
	static UFunction* pPostNetReceive = 0;
	AwPlayer_eventPostNetReceive_Parms parms;

	if ( !pPostNetReceive )
		pPostNetReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.PostNetReceive" );

	this->ProcessEvent ( pPostNetReceive, &parms, NULL );

}*/

/*bool AwPlayer::NeedNetNotify (  )
{
	static UFunction* pNeedNetNotify = 0;
	AwPlayer_execNeedNetNotify_Parms parms;

	if ( !pNeedNetNotify )
		pNeedNetNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.NeedNetNotify" );

	this->ProcessEvent ( pNeedNetNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPlayer::execChangeCharacter ( struct FString newCharacter )
{
	static UFunction* pChangeCharacter = 0;
	AwPlayer_execChangeCharacter_Parms parms;

	if ( !pChangeCharacter )
		pChangeCharacter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ChangeCharacter" );

	parms.newCharacter = newCharacter;
	this->ProcessEvent ( pChangeCharacter, &parms, NULL );

}*/

/*void AwPlayer::Possess ( class APawn* aPawn )
{
	static UFunction* pPossess = 0;
	AwPlayer_execPossess_Parms parms;

	if ( !pPossess )
		pPossess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.Possess" );

	parms.aPawn = aPawn;
	this->ProcessEvent ( pPossess, &parms, NULL );

}*/

/*void AwPlayer::SetPawnFemale (  )
{
	static UFunction* pSetPawnFemale = 0;
	AwPlayer_execSetPawnFemale_Parms parms;

	if ( !pSetPawnFemale )
		pSetPawnFemale = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.SetPawnFemale" );

	this->ProcessEvent ( pSetPawnFemale, &parms, NULL );

}*/

/*void AwPlayer::SetPlayerEquipInfo (  )
{
	static UFunction* pSetPlayerEquipInfo = 0;
	AwPlayer_execSetPlayerEquipInfo_Parms parms;

	if ( !pSetPlayerEquipInfo )
		pSetPlayerEquipInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.SetPlayerEquipInfo" );

	this->ProcessEvent ( pSetPlayerEquipInfo, &parms, NULL );

}*/

/*void AwPlayer::SetPawnClass ( struct FString inClass, struct FString InCharacter )
{
	static UFunction* pSetPawnClass = 0;
	AwPlayer_execSetPawnClass_Parms parms;

	if ( !pSetPawnClass )
		pSetPawnClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.SetPawnClass" );

	parms.inClass = inClass;
	parms.InCharacter = InCharacter;
	this->ProcessEvent ( pSetPawnClass, &parms, NULL );

}*/

/*void AwPlayer::PawnDied ( class APawn* P )
{
	static UFunction* pPawnDied = 0;
	AwPlayer_execPawnDied_Parms parms;

	if ( !pPawnDied )
		pPawnDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.PawnDied" );

	parms.P = P;
	this->ProcessEvent ( pPawnDied, &parms, NULL );

}*/

/*struct FRotator AwPlayer::CameraTrack ( class APawn* Target, float DeltaTime )
{
	static UFunction* pCameraTrack = 0;
	AwPlayer_execCameraTrack_Parms parms;

	if ( !pCameraTrack )
		pCameraTrack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.CameraTrack" );

	parms.Target = Target;
	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pCameraTrack, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwPlayer::LineOfSight ( int C, class APawn* Target )
{
	static UFunction* pLineOfSight = 0;
	AwPlayer_execLineOfSight_Parms parms;

	if ( !pLineOfSight )
		pLineOfSight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.LineOfSight" );

	parms.C = C;
	parms.Target = Target;
	this->ProcessEvent ( pLineOfSight, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class APawn* AwPlayer::PickNextBot ( class APawn* Current )
{
	static UFunction* pPickNextBot = 0;
	AwPlayer_execPickNextBot_Parms parms;

	if ( !pPickNextBot )
		pPickNextBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.PickNextBot" );

	parms.Current = Current;
	this->ProcessEvent ( pPickNextBot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FVector AwPlayer::FindFloatingCam ( class APawn* Target )
{
	static UFunction* pFindFloatingCam = 0;
	AwPlayer_execFindFloatingCam_Parms parms;

	if ( !pFindFloatingCam )
		pFindFloatingCam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.FindFloatingCam" );

	parms.Target = Target;
	this->ProcessEvent ( pFindFloatingCam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwPlayer::FindFixedCam ( class APawn* Target, int* newcam )
{
	static UFunction* pFindFixedCam = 0;
	AwPlayer_execFindFixedCam_Parms parms;

	if ( !pFindFixedCam )
		pFindFixedCam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.FindFixedCam" );

	parms.Target = Target;
	this->ProcessEvent ( pFindFixedCam, &parms, NULL );

	*newcam = parms.newcam;
	return parms.ReturnValue;
}*/

/*void AwPlayer::FillCameraList (  )
{
	static UFunction* pFillCameraList = 0;
	AwPlayer_execFillCameraList_Parms parms;

	if ( !pFillCameraList )
		pFillCameraList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.FillCameraList" );

	this->ProcessEvent ( pFillCameraList, &parms, NULL );

}*/

/*void AwPlayer::ServerDoCombo ( class UClass* ComboClass )
{
	static UFunction* pServerDoCombo = 0;
	AwPlayer_execServerDoCombo_Parms parms;

	if ( !pServerDoCombo )
		pServerDoCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ServerDoCombo" );

	parms.ComboClass = ComboClass;
	this->ProcessEvent ( pServerDoCombo, &parms, NULL );

}*/

/*void AwPlayer::DoCombo ( class UClass* ComboClass )
{
	static UFunction* pDoCombo = 0;
	AwPlayer_execDoCombo_Parms parms;

	if ( !pDoCombo )
		pDoCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.DoCombo" );

	parms.ComboClass = ComboClass;
	this->ProcessEvent ( pDoCombo, &parms, NULL );

}*/

/*void AwPlayer::ServerPlayWeaponNullSound ( class AwWeapon* Wpn, unsigned char Slot, bool UseStereo )
{
	static UFunction* pServerPlayWeaponNullSound = 0;
	AwPlayer_execServerPlayWeaponNullSound_Parms parms;

	if ( !pServerPlayWeaponNullSound )
		pServerPlayWeaponNullSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ServerPlayWeaponNullSound" );

	parms.Wpn = Wpn;
	parms.Slot = Slot;
	parms.UseStereo = UseStereo;
	this->ProcessEvent ( pServerPlayWeaponNullSound, &parms, NULL );

}*/

/*void AwPlayer::ProcessQuickGrenadeKey2 (  )
{
	static UFunction* pProcessQuickGrenadeKey2 = 0;
	AwPlayer_execProcessQuickGrenadeKey2_Parms parms;

	if ( !pProcessQuickGrenadeKey2 )
		pProcessQuickGrenadeKey2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ProcessQuickGrenadeKey2" );

	this->ProcessEvent ( pProcessQuickGrenadeKey2, &parms, NULL );

}*/

/*void AwPlayer::ProcessQuickGrenadeKey (  )
{
	static UFunction* pProcessQuickGrenadeKey = 0;
	AwPlayer_execProcessQuickGrenadeKey_Parms parms;

	if ( !pProcessQuickGrenadeKey )
		pProcessQuickGrenadeKey = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ProcessQuickGrenadeKey" );

	this->ProcessEvent ( pProcessQuickGrenadeKey, &parms, NULL );

}*/

/*void AwPlayer::ProcessSwitchDemoPack ( bool hasBomb, bool bSettingBomb, unsigned char* byUsed )
{
	static UFunction* pProcessSwitchDemoPack = 0;
	AwPlayer_execProcessSwitchDemoPack_Parms parms;

	if ( !pProcessSwitchDemoPack )
		pProcessSwitchDemoPack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ProcessSwitchDemoPack" );

	parms.hasBomb = hasBomb;
	parms.bSettingBomb = bSettingBomb;
	this->ProcessEvent ( pProcessSwitchDemoPack, &parms, NULL );

	*byUsed = parms.byUsed;
}*/

/*void AwPlayer::ProcessSetObjective (  )
{
	static UFunction* pProcessSetObjective = 0;
	AwPlayer_execProcessSetObjective_Parms parms;

	if ( !pProcessSetObjective )
		pProcessSetObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ProcessSetObjective" );

	this->ProcessEvent ( pProcessSetObjective, &parms, NULL );

}*/

/*void AwPlayer::ProcessUseKey (  )
{
	static UFunction* pProcessUseKey = 0;
	AwPlayer_execProcessUseKey_Parms parms;

	if ( !pProcessUseKey )
		pProcessUseKey = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ProcessUseKey" );

	this->ProcessEvent ( pProcessUseKey, &parms, NULL );

}*/

/*void AwPlayer::eventPlayerTick ( float DeltaTime )
{
	static UFunction* pPlayerTick = 0;
	AwPlayer_eventPlayerTick_Parms parms;

	if ( !pPlayerTick )
		pPlayerTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.PlayerTick" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pPlayerTick, &parms, NULL );

}*/

/*void AwPlayer::NotifyTakeHit ( class APawn* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, int CollisionPart )
{
	static UFunction* pNotifyTakeHit = 0;
	AwPlayer_execNotifyTakeHit_Parms parms;

	if ( !pNotifyTakeHit )
		pNotifyTakeHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.NotifyTakeHit" );

	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.Damage = Damage;
	parms.DamageType = DamageType;
	parms.Momentum = Momentum;
	parms.CollisionPart = CollisionPart;
	this->ProcessEvent ( pNotifyTakeHit, &parms, NULL );

}*/

/*void AwPlayer::ClientReceiveCombo ( struct FString NewCombo )
{
	static UFunction* pClientReceiveCombo = 0;
	AwPlayer_execClientReceiveCombo_Parms parms;

	if ( !pClientReceiveCombo )
		pClientReceiveCombo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ClientReceiveCombo" );

	parms.NewCombo = NewCombo;
	this->ProcessEvent ( pClientReceiveCombo, &parms, NULL );

}*/

/*void AwPlayer::ServerSetClassicTrans ( bool B )
{
	static UFunction* pServerSetClassicTrans = 0;
	AwPlayer_execServerSetClassicTrans_Parms parms;

	if ( !pServerSetClassicTrans )
		pServerSetClassicTrans = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ServerSetClassicTrans" );

	parms.B = B;
	this->ProcessEvent ( pServerSetClassicTrans, &parms, NULL );

}*/

/*void AwPlayer::eventPostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AwPlayer_eventPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AwPlayer::eventPostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwPlayer_eventPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwPlayer::execMakeItemBox ( struct FString t )
{
	static UFunction* pMakeItemBox = 0;
	AwPlayer_execMakeItemBox_Parms parms;

	if ( !pMakeItemBox )
		pMakeItemBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.MakeItemBox" );

	parms.t = t;
	this->ProcessEvent ( pMakeItemBox, &parms, NULL );

}*/

/*void AwPlayer::execL33TPhrase ( int PhraseNum )
{
	static UFunction* pL33TPhrase = 0;
	AwPlayer_execL33TPhrase_Parms parms;

	if ( !pL33TPhrase )
		pL33TPhrase = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.L33TPhrase" );

	parms.PhraseNum = PhraseNum;
	this->ProcessEvent ( pL33TPhrase, &parms, NULL );

}*/

/*float AwPlayer::RateWeapon ( class AwWeapon* W )
{
	static UFunction* pRateWeapon = 0;
	AwPlayer_execRateWeapon_Parms parms;

	if ( !pRateWeapon )
		pRateWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.RateWeapon" );

	parms.W = W;
	this->ProcessEvent ( pRateWeapon, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPlayer::PlayBeepSound (  )
{
	static UFunction* pPlayBeepSound = 0;
	AwPlayer_execPlayBeepSound_Parms parms;

	if ( !pPlayBeepSound )
		pPlayBeepSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.PlayBeepSound" );

	this->ProcessEvent ( pPlayBeepSound, &parms, NULL );

}*/

/*void AwPlayer::StopFiring (  )
{
	static UFunction* pStopFiring = 0;
	AwPlayer_execStopFiring_Parms parms;

	if ( !pStopFiring )
		pStopFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.StopFiring" );

	this->ProcessEvent ( pStopFiring, &parms, NULL );

}*/

/*void AwPlayer::ClientReceiveMapName ( struct FString NewMap )
{
	static UFunction* pClientReceiveMapName = 0;
	AwPlayer_execClientReceiveMapName_Parms parms;

	if ( !pClientReceiveMapName )
		pClientReceiveMapName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ClientReceiveMapName" );

	parms.NewMap = NewMap;
	this->ProcessEvent ( pClientReceiveMapName, &parms, NULL );

}*/

/*void AwPlayer::ServerRequestMapList (  )
{
	static UFunction* pServerRequestMapList = 0;
	AwPlayer_execServerRequestMapList_Parms parms;

	if ( !pServerRequestMapList )
		pServerRequestMapList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ServerRequestMapList" );

	this->ProcessEvent ( pServerRequestMapList, &parms, NULL );

}*/

/*void AwPlayer::ClientReceiveResultMenu ( struct FString MenuClass )
{
	static UFunction* pClientReceiveResultMenu = 0;
	AwPlayer_execClientReceiveResultMenu_Parms parms;

	if ( !pClientReceiveResultMenu )
		pClientReceiveResultMenu = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ClientReceiveResultMenu" );

	parms.MenuClass = MenuClass;
	this->ProcessEvent ( pClientReceiveResultMenu, &parms, NULL );

}*/

/*void AwPlayer::ClientReceiveRule ( struct FString NewRule )
{
	static UFunction* pClientReceiveRule = 0;
	AwPlayer_execClientReceiveRule_Parms parms;

	if ( !pClientReceiveRule )
		pClientReceiveRule = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ClientReceiveRule" );

	parms.NewRule = NewRule;
	this->ProcessEvent ( pClientReceiveRule, &parms, NULL );

}*/

/*void AwPlayer::ServerRequestRules (  )
{
	static UFunction* pServerRequestRules = 0;
	AwPlayer_execServerRequestRules_Parms parms;

	if ( !pServerRequestRules )
		pServerRequestRules = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ServerRequestRules" );

	this->ProcessEvent ( pServerRequestRules, &parms, NULL );

}*/

/*struct FString AwPlayer::GetPhysicsString (  )
{
	static UFunction* pGetPhysicsString = 0;
	AwPlayer_execGetPhysicsString_Parms parms;

	if ( !pGetPhysicsString )
		pGetPhysicsString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.GetPhysicsString" );

	this->ProcessEvent ( pGetPhysicsString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AwPlayer::GetRoleString (  )
{
	static UFunction* pGetRoleString = 0;
	AwPlayer_execGetRoleString_Parms parms;

	if ( !pGetRoleString )
		pGetRoleString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.GetRoleString" );

	this->ProcessEvent ( pGetRoleString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPlayer::DebugMessage ( struct FString DebugString, struct FName Type )
{
	static UFunction* pDebugMessage = 0;
	AwPlayer_execDebugMessage_Parms parms;

	if ( !pDebugMessage )
		pDebugMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.DebugMessage" );

	parms.DebugString = DebugString;
	parms.Type = Type;
	this->ProcessEvent ( pDebugMessage, &parms, NULL );

}*/

/*void AwPlayer::execCheckPriority (  )
{
	static UFunction* pCheckPriority = 0;
	AwPlayer_execCheckPriority_Parms parms;

	if ( !pCheckPriority )
		pCheckPriority = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.CheckPriority" );

	this->ProcessEvent ( pCheckPriority, &parms, NULL );

}*/

/*bool AwPlayer::InInventoryRebuildSkipList ( class AwWeapon* W )
{
	static UFunction* pInInventoryRebuildSkipList = 0;
	AwPlayer_execInInventoryRebuildSkipList_Parms parms;

	if ( !pInInventoryRebuildSkipList )
		pInInventoryRebuildSkipList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.InInventoryRebuildSkipList" );

	parms.W = W;
	this->ProcessEvent ( pInInventoryRebuildSkipList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPlayer::ServerRequestWeapon ( int iWeaponID )
{
	static UFunction* pServerRequestWeapon = 0;
	AwPlayer_execServerRequestWeapon_Parms parms;

	if ( !pServerRequestWeapon )
		pServerRequestWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ServerRequestWeapon" );

	parms.iWeaponID = iWeaponID;
	this->ProcessEvent ( pServerRequestWeapon, &parms, NULL );

}*/

/*void AwPlayer::execSetSpeed ( float factor )
{
	static UFunction* pSetSpeed = 0;
	AwPlayer_execSetSpeed_Parms parms;

	if ( !pSetSpeed )
		pSetSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.SetSpeed" );

	parms.factor = factor;
	this->ProcessEvent ( pSetSpeed, &parms, NULL );

}*/

/*void AwPlayer::execResetNames (  )
{
	static UFunction* pResetNames = 0;
	AwPlayer_execResetNames_Parms parms;

	if ( !pResetNames )
		pResetNames = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ResetNames" );

	this->ProcessEvent ( pResetNames, &parms, NULL );

}*/

/*void AwPlayer::execsetcmd ( struct FString targetName )
{
	static UFunction* psetcmd = 0;
	AwPlayer_execsetcmd_Parms parms;

	if ( !psetcmd )
		psetcmd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.setcmd" );

	parms.targetName = targetName;
	this->ProcessEvent ( psetcmd, &parms, NULL );

}*/

/*void AwPlayer::execCmd ( struct FString P1, struct FString P2, struct FString p3, struct FString p4, struct FString p5 )
{
	static UFunction* pCmd = 0;
	AwPlayer_execCmd_Parms parms;

	if ( !pCmd )
		pCmd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.Cmd" );

	parms.P1 = P1;
	parms.P2 = P2;
	parms.p3 = p3;
	parms.p4 = p4;
	parms.p5 = p5;
	this->ProcessEvent ( pCmd, &parms, NULL );

}*/

/*void AwPlayer::execSetDoTraceNativeInstant ( bool val )
{
	static UFunction* pSetDoTraceNativeInstant = 0;
	AwPlayer_execSetDoTraceNativeInstant_Parms parms;

	if ( !pSetDoTraceNativeInstant )
		pSetDoTraceNativeInstant = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.SetDoTraceNativeInstant" );

	parms.val = val;
	this->ProcessEvent ( pSetDoTraceNativeInstant, &parms, NULL );

}*/

/*void AwPlayer::execSetFovSpeed ( float V )
{
	static UFunction* pSetFovSpeed = 0;
	AwPlayer_execSetFovSpeed_Parms parms;

	if ( !pSetFovSpeed )
		pSetFovSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.SetFovSpeed" );

	parms.V = V;
	this->ProcessEvent ( pSetFovSpeed, &parms, NULL );

}*/

/*float AwPlayer::GetFovSpeed (  )
{
	static UFunction* pGetFovSpeed = 0;
	AwPlayer_execGetFovSpeed_Parms parms;

	if ( !pGetFovSpeed )
		pGetFovSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.GetFovSpeed" );

	this->ProcessEvent ( pGetFovSpeed, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPlayer::ShowPathToActor ( class AActor* A )
{
	static UFunction* pShowPathToActor = 0;
	AwPlayer_execShowPathToActor_Parms parms;

	if ( !pShowPathToActor )
		pShowPathToActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ShowPathToActor" );

	parms.A = A;
	this->ProcessEvent ( pShowPathToActor, &parms, NULL );

}*/

/*void AwPlayer::ProcessMapName ( struct FString NewMap )
{
	static UFunction* pProcessMapName = 0;
	AwPlayer_execProcessMapName_Parms parms;

	if ( !pProcessMapName )
		pProcessMapName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ProcessMapName" );

	parms.NewMap = NewMap;
	this->ProcessEvent ( pProcessMapName, &parms, NULL );

}*/

/*void AwPlayer::ProcessRule ( struct FString NewRule )
{
	static UFunction* pProcessRule = 0;
	AwPlayer_execProcessRule_Parms parms;

	if ( !pProcessRule )
		pProcessRule = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayer.ProcessRule" );

	parms.NewRule = NewRule;
	this->ProcessEvent ( pProcessRule, &parms, NULL );

}*/

/*void AwSupplyPack::eventLanded ( struct FVector HitNormal )
{
	static UFunction* pLanded = 0;
	AwSupplyPack_eventLanded_Parms parms;

	if ( !pLanded )
		pLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wSupplyPack.Landed" );

	parms.HitNormal = HitNormal;
	this->ProcessEvent ( pLanded, &parms, NULL );

}*/

/*int AwHealthPack::GetHealMax ( class APawn* P )
{
	static UFunction* pGetHealMax = 0;
	AwHealthPack_execGetHealMax_Parms parms;

	if ( !pGetHealMax )
		pGetHealMax = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHealthPack.GetHealMax" );

	parms.P = P;
	this->ProcessEvent ( pGetHealMax, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHealthPack::Reset (  )
{
	static UFunction* pReset = 0;
	AwHealthPack_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHealthPack.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AwHealthPack::DisplayEvent ( class APawn* P )
{
	static UFunction* pDisplayEvent = 0;
	AwHealthPack_execDisplayEvent_Parms parms;

	if ( !pDisplayEvent )
		pDisplayEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHealthPack.DisplayEvent" );

	parms.P = P;
	this->ProcessEvent ( pDisplayEvent, &parms, NULL );

}*/

/*void AwHealthPack::DeleteSuppliesPositions (  )
{
	static UFunction* pDeleteSuppliesPositions = 0;
	AwHealthPack_execDeleteSuppliesPositions_Parms parms;

	if ( !pDeleteSuppliesPositions )
		pDeleteSuppliesPositions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHealthPack.DeleteSuppliesPositions" );

	this->ProcessEvent ( pDeleteSuppliesPositions, &parms, NULL );

}*/

/*void AwHealthPack::eventPostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AwHealthPack_eventPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHealthPack.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AwHealthPack::UpdateHUD ( class AHUD* H )
{
	static UFunction* pUpdateHUD = 0;
	AwHealthPack_execUpdateHUD_Parms parms;

	if ( !pUpdateHUD )
		pUpdateHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHealthPack.UpdateHUD" );

	parms.H = H;
	this->ProcessEvent ( pUpdateHUD, &parms, NULL );

}*/

/*bool AwUAVPack::CanAdUAVpack ( class APawn* P )
{
	static UFunction* pCanAdUAVpack = 0;
	AwUAVPack_execCanAdUAVpack_Parms parms;

	if ( !pCanAdUAVpack )
		pCanAdUAVpack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUAVPack.CanAdUAVpack" );

	parms.P = P;
	this->ProcessEvent ( pCanAdUAVpack, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwUAVPack::AnnouncePickup ( class APawn* Receiver )
{
	static UFunction* pAnnouncePickup = 0;
	AwUAVPack_execAnnouncePickup_Parms parms;

	if ( !pAnnouncePickup )
		pAnnouncePickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUAVPack.AnnouncePickup" );

	parms.Receiver = Receiver;
	this->ProcessEvent ( pAnnouncePickup, &parms, NULL );

}*/

/*void AwUAVPack::Reset (  )
{
	static UFunction* pReset = 0;
	AwUAVPack_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUAVPack.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AwUAVPack::DeleteSuppliesPositions (  )
{
	static UFunction* pDeleteSuppliesPositions = 0;
	AwUAVPack_execDeleteSuppliesPositions_Parms parms;

	if ( !pDeleteSuppliesPositions )
		pDeleteSuppliesPositions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUAVPack.DeleteSuppliesPositions" );

	this->ProcessEvent ( pDeleteSuppliesPositions, &parms, NULL );

}*/

/*void AwUAVPack::eventPostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AwUAVPack_eventPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUAVPack.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AwUAVPack::DisplayEvent ( class APawn* P )
{
	static UFunction* pDisplayEvent = 0;
	AwUAVPack_execDisplayEvent_Parms parms;

	if ( !pDisplayEvent )
		pDisplayEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUAVPack.DisplayEvent" );

	parms.P = P;
	this->ProcessEvent ( pDisplayEvent, &parms, NULL );

}*/

/*void AwUAVPack::UpdateHUD ( class AHUD* H )
{
	static UFunction* pUpdateHUD = 0;
	AwUAVPack_execUpdateHUD_Parms parms;

	if ( !pUpdateHUD )
		pUpdateHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wUAVPack.UpdateHUD" );

	parms.H = H;
	this->ProcessEvent ( pUpdateHUD, &parms, NULL );

}*/

/*bool AwHeliPack::CanAddHelipack ( class APawn* P )
{
	static UFunction* pCanAddHelipack = 0;
	AwHeliPack_execCanAddHelipack_Parms parms;

	if ( !pCanAddHelipack )
		pCanAddHelipack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHeliPack.CanAddHelipack" );

	parms.P = P;
	this->ProcessEvent ( pCanAddHelipack, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHeliPack::AnnouncePickup ( class APawn* Receiver )
{
	static UFunction* pAnnouncePickup = 0;
	AwHeliPack_execAnnouncePickup_Parms parms;

	if ( !pAnnouncePickup )
		pAnnouncePickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHeliPack.AnnouncePickup" );

	parms.Receiver = Receiver;
	this->ProcessEvent ( pAnnouncePickup, &parms, NULL );

}*/

/*void AwHeliPack::Reset (  )
{
	static UFunction* pReset = 0;
	AwHeliPack_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHeliPack.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AwHeliPack::DeleteSuppliesPositions (  )
{
	static UFunction* pDeleteSuppliesPositions = 0;
	AwHeliPack_execDeleteSuppliesPositions_Parms parms;

	if ( !pDeleteSuppliesPositions )
		pDeleteSuppliesPositions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHeliPack.DeleteSuppliesPositions" );

	this->ProcessEvent ( pDeleteSuppliesPositions, &parms, NULL );

}*/

/*void AwHeliPack::eventPostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AwHeliPack_eventPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHeliPack.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AwHeliPack::DisplayEvent ( class APawn* P )
{
	static UFunction* pDisplayEvent = 0;
	AwHeliPack_execDisplayEvent_Parms parms;

	if ( !pDisplayEvent )
		pDisplayEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHeliPack.DisplayEvent" );

	parms.P = P;
	this->ProcessEvent ( pDisplayEvent, &parms, NULL );

}*/

/*void AwHeliPack::UpdateHUD ( class AHUD* H )
{
	static UFunction* pUpdateHUD = 0;
	AwHeliPack_execUpdateHUD_Parms parms;

	if ( !pUpdateHUD )
		pUpdateHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHeliPack.UpdateHUD" );

	parms.H = H;
	this->ProcessEvent ( pUpdateHUD, &parms, NULL );

}*/

/*bool AwArtilleryPack::CanAddArtilleryPack ( class APawn* P )
{
	static UFunction* pCanAddArtilleryPack = 0;
	AwArtilleryPack_execCanAddArtilleryPack_Parms parms;

	if ( !pCanAddArtilleryPack )
		pCanAddArtilleryPack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wArtilleryPack.CanAddArtilleryPack" );

	parms.P = P;
	this->ProcessEvent ( pCanAddArtilleryPack, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwArtilleryPack::AnnouncePickup ( class APawn* Receiver )
{
	static UFunction* pAnnouncePickup = 0;
	AwArtilleryPack_execAnnouncePickup_Parms parms;

	if ( !pAnnouncePickup )
		pAnnouncePickup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wArtilleryPack.AnnouncePickup" );

	parms.Receiver = Receiver;
	this->ProcessEvent ( pAnnouncePickup, &parms, NULL );

}*/

/*void AwArtilleryPack::Reset (  )
{
	static UFunction* pReset = 0;
	AwArtilleryPack_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wArtilleryPack.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AwArtilleryPack::DeleteSuppliesPositions (  )
{
	static UFunction* pDeleteSuppliesPositions = 0;
	AwArtilleryPack_execDeleteSuppliesPositions_Parms parms;

	if ( !pDeleteSuppliesPositions )
		pDeleteSuppliesPositions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wArtilleryPack.DeleteSuppliesPositions" );

	this->ProcessEvent ( pDeleteSuppliesPositions, &parms, NULL );

}*/

/*void AwArtilleryPack::eventPostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AwArtilleryPack_eventPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wArtilleryPack.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AwArtilleryPack::UpdateHUD ( class AHUD* H )
{
	static UFunction* pUpdateHUD = 0;
	AwArtilleryPack_execUpdateHUD_Parms parms;

	if ( !pUpdateHUD )
		pUpdateHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wArtilleryPack.UpdateHUD" );

	parms.H = H;
	this->ProcessEvent ( pUpdateHUD, &parms, NULL );

}*/

/*void AwMedalPack::Reset (  )
{
	static UFunction* pReset = 0;
	AwMedalPack_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wMedalPack.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AwMedalPack::DisplayEvent ( class APawn* P )
{
	static UFunction* pDisplayEvent = 0;
	AwMedalPack_execDisplayEvent_Parms parms;

	if ( !pDisplayEvent )
		pDisplayEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wMedalPack.DisplayEvent" );

	parms.P = P;
	this->ProcessEvent ( pDisplayEvent, &parms, NULL );

}*/

/*void AwMedalPack::DeleteSuppliesPositions (  )
{
	static UFunction* pDeleteSuppliesPositions = 0;
	AwMedalPack_execDeleteSuppliesPositions_Parms parms;

	if ( !pDeleteSuppliesPositions )
		pDeleteSuppliesPositions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wMedalPack.DeleteSuppliesPositions" );

	this->ProcessEvent ( pDeleteSuppliesPositions, &parms, NULL );

}*/

/*void AwMedalPack::eventPostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AwMedalPack_eventPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wMedalPack.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AwMedalPack::UpdateHUD ( class AHUD* H )
{
	static UFunction* pUpdateHUD = 0;
	AwMedalPack_execUpdateHUD_Parms parms;

	if ( !pUpdateHUD )
		pUpdateHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wMedalPack.UpdateHUD" );

	parms.H = H;
	this->ProcessEvent ( pUpdateHUD, &parms, NULL );

}*/

/*void AwBotVehicleController::GameHasEnded (  )
{
	static UFunction* pGameHasEnded = 0;
	AwBotVehicleController_execGameHasEnded_Parms parms;

	if ( !pGameHasEnded )
		pGameHasEnded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.GameHasEnded" );

	this->ProcessEvent ( pGameHasEnded, &parms, NULL );

}*/

/*bool AwBotVehicleController::Stopped (  )
{
	static UFunction* pStopped = 0;
	AwBotVehicleController_execStopped_Parms parms;

	if ( !pStopped )
		pStopped = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.Stopped" );

	this->ProcessEvent ( pStopped, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::IsHunting (  )
{
	static UFunction* pIsHunting = 0;
	AwBotVehicleController_execIsHunting_Parms parms;

	if ( !pIsHunting )
		pIsHunting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.IsHunting" );

	this->ProcessEvent ( pIsHunting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::IsStrafing (  )
{
	static UFunction* pIsStrafing = 0;
	AwBotVehicleController_execIsStrafing_Parms parms;

	if ( !pIsStrafing )
		pIsStrafing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.IsStrafing" );

	this->ProcessEvent ( pIsStrafing, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::DefendMelee ( float dist )
{
	static UFunction* pDefendMelee = 0;
	AwBotVehicleController_execDefendMelee_Parms parms;

	if ( !pDefendMelee )
		pDefendMelee = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.DefendMelee" );

	parms.dist = dist;
	this->ProcessEvent ( pDefendMelee, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::DoTacticalMove (  )
{
	static UFunction* pDoTacticalMove = 0;
	AwBotVehicleController_execDoTacticalMove_Parms parms;

	if ( !pDoTacticalMove )
		pDoTacticalMove = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.DoTacticalMove" );

	this->ProcessEvent ( pDoTacticalMove, &parms, NULL );

}*/

/*void AwBotVehicleController::DoCharge (  )
{
	static UFunction* pDoCharge = 0;
	AwBotVehicleController_execDoCharge_Parms parms;

	if ( !pDoCharge )
		pDoCharge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.DoCharge" );

	this->ProcessEvent ( pDoCharge, &parms, NULL );

}*/

/*void AwBotVehicleController::DoStakeOut (  )
{
	static UFunction* pDoStakeOut = 0;
	AwBotVehicleController_execDoStakeOut_Parms parms;

	if ( !pDoStakeOut )
		pDoStakeOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.DoStakeOut" );

	this->ProcessEvent ( pDoStakeOut, &parms, NULL );

}*/

/*void AwBotVehicleController::Celebrate (  )
{
	static UFunction* pCelebrate = 0;
	AwBotVehicleController_execCelebrate_Parms parms;

	if ( !pCelebrate )
		pCelebrate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.Celebrate" );

	this->ProcessEvent ( pCelebrate, &parms, NULL );

}*/

/*bool AwBotVehicleController::Formation (  )
{
	static UFunction* pFormation = 0;
	AwBotVehicleController_execFormation_Parms parms;

	if ( !pFormation )
		pFormation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.Formation" );

	this->ProcessEvent ( pFormation, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::NotifyTakeHit ( class APawn* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, int CollisionPart )
{
	static UFunction* pNotifyTakeHit = 0;
	AwBotVehicleController_execNotifyTakeHit_Parms parms;

	if ( !pNotifyTakeHit )
		pNotifyTakeHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.NotifyTakeHit" );

	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.Damage = Damage;
	parms.DamageType = DamageType;
	parms.Momentum = Momentum;
	parms.CollisionPart = CollisionPart;
	this->ProcessEvent ( pNotifyTakeHit, &parms, NULL );

}*/

/*int AwBotVehicleController::GetTeamNum (  )
{
	static UFunction* pGetTeamNum = 0;
	AwBotVehicleController_execGetTeamNum_Parms parms;

	if ( !pGetTeamNum )
		pGetTeamNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.GetTeamNum" );

	this->ProcessEvent ( pGetTeamNum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::GetNextPathForMoveTarget (  )
{
	static UFunction* pGetNextPathForMoveTarget = 0;
	AwBotVehicleController_execGetNextPathForMoveTarget_Parms parms;

	if ( !pGetNextPathForMoveTarget )
		pGetNextPathForMoveTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.GetNextPathForMoveTarget" );

	this->ProcessEvent ( pGetNextPathForMoveTarget, &parms, NULL );

}*/

/*class AwHelicopter* AwBotVehicleController::GetHeli (  )
{
	static UFunction* pGetHeli = 0;
	AwBotVehicleController_execGetHeli_Parms parms;

	if ( !pGetHeli )
		pGetHeli = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.GetHeli" );

	this->ProcessEvent ( pGetHeli, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::damageAttitudeTo ( class APawn* Other, float Damage )
{
	static UFunction* pdamageAttitudeTo = 0;
	AwBotVehicleController_execdamageAttitudeTo_Parms parms;

	if ( !pdamageAttitudeTo )
		pdamageAttitudeTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.damageAttitudeTo" );

	parms.Other = Other;
	parms.Damage = Damage;
	this->ProcessEvent ( pdamageAttitudeTo, &parms, NULL );

}*/

/*float AwBotVehicleController::eventDesireability ( class APickup* P )
{
	static UFunction* pDesireability = 0;
	AwBotVehicleController_eventDesireability_Parms parms;

	if ( !pDesireability )
		pDesireability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.Desireability" );

	parms.P = P;
	this->ProcessEvent ( pDesireability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AActor* AwBotVehicleController::FaceActor ( float StrafingModifier )
{
	static UFunction* pFaceActor = 0;
	AwBotVehicleController_execFaceActor_Parms parms;

	if ( !pFaceActor )
		pFaceActor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.FaceActor" );

	parms.StrafingModifier = StrafingModifier;
	this->ProcessEvent ( pFaceActor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::ShouldStrafeTo ( class AActor* WayPoint )
{
	static UFunction* pShouldStrafeTo = 0;
	AwBotVehicleController_execShouldStrafeTo_Parms parms;

	if ( !pShouldStrafeTo )
		pShouldStrafeTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.ShouldStrafeTo" );

	parms.WayPoint = WayPoint;
	this->ProcessEvent ( pShouldStrafeTo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AActor* AwBotVehicleController::FaceMoveTarget (  )
{
	static UFunction* pFaceMoveTarget = 0;
	AwBotVehicleController_execFaceMoveTarget_Parms parms;

	if ( !pFaceMoveTarget )
		pFaceMoveTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.FaceMoveTarget" );

	this->ProcessEvent ( pFaceMoveTarget, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
{
	static UFunction* pNotifyKilled = 0;
	AwBotVehicleController_execNotifyKilled_Parms parms;

	if ( !pNotifyKilled )
		pNotifyKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.NotifyKilled" );

	parms.Killer = Killer;
	parms.Killed = Killed;
	parms.KilledPawn = KilledPawn;
	this->ProcessEvent ( pNotifyKilled, &parms, NULL );

}*/

/*bool AwBotVehicleController::TryToDuck ( struct FVector duckDir, bool bReversed )
{
	static UFunction* pTryToDuck = 0;
	AwBotVehicleController_execTryToDuck_Parms parms;

	if ( !pTryToDuck )
		pTryToDuck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.TryToDuck" );

	parms.duckDir = duckDir;
	parms.bReversed = bReversed;
	this->ProcessEvent ( pTryToDuck, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::ReceiveWarning ( class APawn* shooter, float projSpeed, struct FVector FireDir )
{
	static UFunction* pReceiveWarning = 0;
	AwBotVehicleController_execReceiveWarning_Parms parms;

	if ( !pReceiveWarning )
		pReceiveWarning = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.ReceiveWarning" );

	parms.shooter = shooter;
	parms.projSpeed = projSpeed;
	parms.FireDir = FireDir;
	this->ProcessEvent ( pReceiveWarning, &parms, NULL );

}*/

/*struct FRotator AwBotVehicleController::AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError )
{
	static UFunction* pAdjustAim = 0;
	AwBotVehicleController_execAdjustAim_Parms parms;

	if ( !pAdjustAim )
		pAdjustAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.AdjustAim" );

	parms.FiredAmmunition = FiredAmmunition;
	parms.projStart = projStart;
	parms.AimError = AimError;
	this->ProcessEvent ( pAdjustAim, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AwBotVehicleController::AdjustAimError ( float AimError, float TargetDist, bool bDefendMelee, bool bInstantProj, bool bLeadTargetNow )
{
	static UFunction* pAdjustAimError = 0;
	AwBotVehicleController_execAdjustAimError_Parms parms;

	if ( !pAdjustAimError )
		pAdjustAimError = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.AdjustAimError" );

	parms.AimError = AimError;
	parms.TargetDist = TargetDist;
	parms.bDefendMelee = bDefendMelee;
	parms.bInstantProj = bInstantProj;
	parms.bLeadTargetNow = bLeadTargetNow;
	this->ProcessEvent ( pAdjustAimError, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::CheckFutureSight ( float DeltaTime )
{
	static UFunction* pCheckFutureSight = 0;
	AwBotVehicleController_execCheckFutureSight_Parms parms;

	if ( !pCheckFutureSight )
		pCheckFutureSight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.CheckFutureSight" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pCheckFutureSight, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::NearWall ( float walldist )
{
	static UFunction* pNearWall = 0;
	AwBotVehicleController_execNearWall_Parms parms;

	if ( !pNearWall )
		pNearWall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.NearWall" );

	parms.walldist = walldist;
	this->ProcessEvent ( pNearWall, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::NeedToTurn ( struct FVector targ )
{
	static UFunction* pNeedToTurn = 0;
	AwBotVehicleController_execNeedToTurn_Parms parms;

	if ( !pNeedToTurn )
		pNeedToTurn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.NeedToTurn" );

	parms.targ = targ;
	this->ProcessEvent ( pNeedToTurn, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::FindBestPathToward ( class AActor* A, bool bCheckedReach, bool bAllowDetour )
{
	static UFunction* pFindBestPathToward = 0;
	AwBotVehicleController_execFindBestPathToward_Parms parms;

	if ( !pFindBestPathToward )
		pFindBestPathToward = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.FindBestPathToward" );

	parms.A = A;
	parms.bCheckedReach = bCheckedReach;
	parms.bAllowDetour = bAllowDetour;
	this->ProcessEvent ( pFindBestPathToward, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::NotifyLanded ( struct FVector HitNormal )
{
	static UFunction* pNotifyLanded = 0;
	AwBotVehicleController_execNotifyLanded_Parms parms;

	if ( !pNotifyLanded )
		pNotifyLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.NotifyLanded" );

	parms.HitNormal = HitNormal;
	this->ProcessEvent ( pNotifyLanded, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::SetFall (  )
{
	static UFunction* pSetFall = 0;
	AwBotVehicleController_execSetFall_Parms parms;

	if ( !pSetFall )
		pSetFall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.SetFall" );

	this->ProcessEvent ( pSetFall, &parms, NULL );

}*/

/*bool AwBotVehicleController::eventNotifyBump ( class AActor* Other )
{
	static UFunction* pNotifyBump = 0;
	AwBotVehicleController_eventNotifyBump_Parms parms;

	if ( !pNotifyBump )
		pNotifyBump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.NotifyBump" );

	parms.Other = Other;
	this->ProcessEvent ( pNotifyBump, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::AdjustAround ( class APawn* Other )
{
	static UFunction* pAdjustAround = 0;
	AwBotVehicleController_execAdjustAround_Parms parms;

	if ( !pAdjustAround )
		pAdjustAround = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.AdjustAround" );

	parms.Other = Other;
	this->ProcessEvent ( pAdjustAround, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::CancelCampFor ( class AController* C )
{
	static UFunction* pCancelCampFor = 0;
	AwBotVehicleController_execCancelCampFor_Parms parms;

	if ( !pCancelCampFor )
		pCancelCampFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.CancelCampFor" );

	parms.C = C;
	this->ProcessEvent ( pCancelCampFor, &parms, NULL );

}*/

/*void AwBotVehicleController::Restart (  )
{
	static UFunction* pRestart = 0;
	AwBotVehicleController_execRestart_Parms parms;

	if ( !pRestart )
		pRestart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.Restart" );

	this->ProcessEvent ( pRestart, &parms, NULL );

}*/

/*bool AwBotVehicleController::TestDirection ( struct FVector Dir, struct FVector* pick )
{
	static UFunction* pTestDirection = 0;
	AwBotVehicleController_execTestDirection_Parms parms;

	if ( !pTestDirection )
		pTestDirection = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.TestDirection" );

	parms.Dir = Dir;
	this->ProcessEvent ( pTestDirection, &parms, NULL );

	*pick = parms.pick;
	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::FindRoamDest (  )
{
	static UFunction* pFindRoamDest = 0;
	AwBotVehicleController_execFindRoamDest_Parms parms;

	if ( !pFindRoamDest )
		pFindRoamDest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.FindRoamDest" );

	this->ProcessEvent ( pFindRoamDest, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::eventSoakStop ( struct FString problem )
{
	static UFunction* pSoakStop = 0;
	AwBotVehicleController_eventSoakStop_Parms parms;

	if ( !pSoakStop )
		pSoakStop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.SoakStop" );

	parms.problem = problem;
	this->ProcessEvent ( pSoakStop, &parms, NULL );

}*/

/*void AwBotVehicleController::DoRangedAttackOn ( class AActor* A )
{
	static UFunction* pDoRangedAttackOn = 0;
	AwBotVehicleController_execDoRangedAttackOn_Parms parms;

	if ( !pDoRangedAttackOn )
		pDoRangedAttackOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.DoRangedAttackOn" );

	parms.A = A;
	this->ProcessEvent ( pDoRangedAttackOn, &parms, NULL );

}*/

/*bool AwBotVehicleController::EnemyVisible (  )
{
	static UFunction* pEnemyVisible = 0;
	AwBotVehicleController_execEnemyVisible_Parms parms;

	if ( !pEnemyVisible )
		pEnemyVisible = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.EnemyVisible" );

	this->ProcessEvent ( pEnemyVisible, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::DoWaitForLanding (  )
{
	static UFunction* pDoWaitForLanding = 0;
	AwBotVehicleController_execDoWaitForLanding_Parms parms;

	if ( !pDoWaitForLanding )
		pDoWaitForLanding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.DoWaitForLanding" );

	this->ProcessEvent ( pDoWaitForLanding, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::ExecuteWhatToDoNext (  )
{
	static UFunction* pExecuteWhatToDoNext = 0;
	AwBotVehicleController_execExecuteWhatToDoNext_Parms parms;

	if ( !pExecuteWhatToDoNext )
		pExecuteWhatToDoNext = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.ExecuteWhatToDoNext" );

	this->ProcessEvent ( pExecuteWhatToDoNext, &parms, NULL );

}*/

/*struct FString AwBotVehicleController::GetEnemyName (  )
{
	static UFunction* pGetEnemyName = 0;
	AwBotVehicleController_execGetEnemyName_Parms parms;

	if ( !pGetEnemyName )
		pGetEnemyName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.GetEnemyName" );

	this->ProcessEvent ( pGetEnemyName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AwBotVehicleController::GetOldEnemyName (  )
{
	static UFunction* pGetOldEnemyName = 0;
	AwBotVehicleController_execGetOldEnemyName_Parms parms;

	if ( !pGetOldEnemyName )
		pGetOldEnemyName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.GetOldEnemyName" );

	this->ProcessEvent ( pGetOldEnemyName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::TryToWalk (  )
{
	static UFunction* pTryToWalk = 0;
	AwBotVehicleController_execTryToWalk_Parms parms;

	if ( !pTryToWalk )
		pTryToWalk = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.TryToWalk" );

	this->ProcessEvent ( pTryToWalk, &parms, NULL );

}*/

/*void AwBotVehicleController::WhatToDoNext ( unsigned char CallingByte )
{
	static UFunction* pWhatToDoNext = 0;
	AwBotVehicleController_execWhatToDoNext_Parms parms;

	if ( !pWhatToDoNext )
		pWhatToDoNext = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.WhatToDoNext" );

	parms.CallingByte = CallingByte;
	this->ProcessEvent ( pWhatToDoNext, &parms, NULL );

}*/

/*void AwBotVehicleController::SetPeripheralVision (  )
{
	static UFunction* pSetPeripheralVision = 0;
	AwBotVehicleController_execSetPeripheralVision_Parms parms;

	if ( !pSetPeripheralVision )
		pSetPeripheralVision = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.SetPeripheralVision" );

	this->ProcessEvent ( pSetPeripheralVision, &parms, NULL );

}*/

/*void AwBotVehicleController::SetMaxDesiredSpeed (  )
{
	static UFunction* pSetMaxDesiredSpeed = 0;
	AwBotVehicleController_execSetMaxDesiredSpeed_Parms parms;

	if ( !pSetMaxDesiredSpeed )
		pSetMaxDesiredSpeed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.SetMaxDesiredSpeed" );

	this->ProcessEvent ( pSetMaxDesiredSpeed, &parms, NULL );

}*/

/*void AwBotVehicleController::ResetSkill (  )
{
	static UFunction* pResetSkill = 0;
	AwBotVehicleController_execResetSkill_Parms parms;

	if ( !pResetSkill )
		pResetSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.ResetSkill" );

	this->ProcessEvent ( pResetSkill, &parms, NULL );

}*/

/*void AwBotVehicleController::InitializeSkill ( float InSkill )
{
	static UFunction* pInitializeSkill = 0;
	AwBotVehicleController_execInitializeSkill_Parms parms;

	if ( !pInitializeSkill )
		pInitializeSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.InitializeSkill" );

	parms.InSkill = InSkill;
	this->ProcessEvent ( pInitializeSkill, &parms, NULL );

}*/

/*void AwBotVehicleController::Possess ( class APawn* aPawn )
{
	static UFunction* pPossess = 0;
	AwBotVehicleController_execPossess_Parms parms;

	if ( !pPossess )
		pPossess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.Possess" );

	parms.aPawn = aPawn;
	this->ProcessEvent ( pPossess, &parms, NULL );

}*/

/*void AwBotVehicleController::eventNotifyMissedJump (  )
{
	static UFunction* pNotifyMissedJump = 0;
	AwBotVehicleController_eventNotifyMissedJump_Parms parms;

	if ( !pNotifyMissedJump )
		pNotifyMissedJump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.NotifyMissedJump" );

	this->ProcessEvent ( pNotifyMissedJump, &parms, NULL );

}*/

/*bool AwBotVehicleController::NotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pNotifyPhysicsVolumeChange = 0;
	AwBotVehicleController_execNotifyPhysicsVolumeChange_Parms parms;

	if ( !pNotifyPhysicsVolumeChange )
		pNotifyPhysicsVolumeChange = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.NotifyPhysicsVolumeChange" );

	parms.NewVolume = NewVolume;
	this->ProcessEvent ( pNotifyPhysicsVolumeChange, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::StrafeFromDamage ( float Damage, class UClass* DamageType, bool bFindDest )
{
	static UFunction* pStrafeFromDamage = 0;
	AwBotVehicleController_execStrafeFromDamage_Parms parms;

	if ( !pStrafeFromDamage )
		pStrafeFromDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.StrafeFromDamage" );

	parms.Damage = Damage;
	parms.DamageType = DamageType;
	parms.bFindDest = bFindDest;
	this->ProcessEvent ( pStrafeFromDamage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::EnemyChanged ( bool bNewEnemyVisible )
{
	static UFunction* pEnemyChanged = 0;
	AwBotVehicleController_execEnemyChanged_Parms parms;

	if ( !pEnemyChanged )
		pEnemyChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.EnemyChanged" );

	parms.bNewEnemyVisible = bNewEnemyVisible;
	this->ProcessEvent ( pEnemyChanged, &parms, NULL );

}*/

/*void AwBotVehicleController::SetEnemyInfo ( bool bNewEnemyVisible )
{
	static UFunction* pSetEnemyInfo = 0;
	AwBotVehicleController_execSetEnemyInfo_Parms parms;

	if ( !pSetEnemyInfo )
		pSetEnemyInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.SetEnemyInfo" );

	parms.bNewEnemyVisible = bNewEnemyVisible;
	this->ProcessEvent ( pSetEnemyInfo, &parms, NULL );

}*/

/*void AwBotVehicleController::Trigger ( class AActor* Other, class APawn* EventInstigator )
{
	static UFunction* pTrigger = 0;
	AwBotVehicleController_execTrigger_Parms parms;

	if ( !pTrigger )
		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.Trigger" );

	parms.Other = Other;
	parms.EventInstigator = EventInstigator;
	this->ProcessEvent ( pTrigger, &parms, NULL );

}*/

/*void AwBotVehicleController::CheckIfShouldCrouch ( struct FVector StartPosition, struct FVector TargetPosition, float Probability )
{
	static UFunction* pCheckIfShouldCrouch = 0;
	AwBotVehicleController_execCheckIfShouldCrouch_Parms parms;

	if ( !pCheckIfShouldCrouch )
		pCheckIfShouldCrouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.CheckIfShouldCrouch" );

	parms.StartPosition = StartPosition;
	parms.TargetPosition = TargetPosition;
	parms.Probability = Probability;
	this->ProcessEvent ( pCheckIfShouldCrouch, &parms, NULL );

}*/

/*bool AwBotVehicleController::ClearShot ( struct FVector TargetLoc, bool bImmediateFire )
{
	static UFunction* pClearShot = 0;
	AwBotVehicleController_execClearShot_Parms parms;

	if ( !pClearShot )
		pClearShot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.ClearShot" );

	parms.TargetLoc = TargetLoc;
	parms.bImmediateFire = bImmediateFire;
	this->ProcessEvent ( pClearShot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::eventSeePlayer ( class APawn* SeenPlayer )
{
	static UFunction* pSeePlayer = 0;
	AwBotVehicleController_eventSeePlayer_Parms parms;

	if ( !pSeePlayer )
		pSeePlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.SeePlayer" );

	parms.SeenPlayer = SeenPlayer;
	this->ProcessEvent ( pSeePlayer, &parms, NULL );

}*/

/*void AwBotVehicleController::HearNoise ( float Loudness, class AActor* NoiseMaker )
{
	static UFunction* pHearNoise = 0;
	AwBotVehicleController_execHearNoise_Parms parms;

	if ( !pHearNoise )
		pHearNoise = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.HearNoise" );

	parms.Loudness = Loudness;
	parms.NoiseMaker = NoiseMaker;
	this->ProcessEvent ( pHearNoise, &parms, NULL );

}*/

/*bool AwBotVehicleController::SetEnemy ( class APawn* NewEnemy, bool bHateMonster )
{
	static UFunction* pSetEnemy = 0;
	AwBotVehicleController_execSetEnemy_Parms parms;

	if ( !pSetEnemy )
		pSetEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.SetEnemy" );

	parms.NewEnemy = NewEnemy;
	parms.bHateMonster = bHateMonster;
	this->ProcessEvent ( pSetEnemy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::ChangeEnemy ( class APawn* NewEnemy, bool bCanSeeNewEnemy )
{
	static UFunction* pChangeEnemy = 0;
	AwBotVehicleController_execChangeEnemy_Parms parms;

	if ( !pChangeEnemy )
		pChangeEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.ChangeEnemy" );

	parms.NewEnemy = NewEnemy;
	parms.bCanSeeNewEnemy = bCanSeeNewEnemy;
	this->ProcessEvent ( pChangeEnemy, &parms, NULL );

}*/

/*bool AwBotVehicleController::FindNewEnemy (  )
{
	static UFunction* pFindNewEnemy = 0;
	AwBotVehicleController_execFindNewEnemy_Parms parms;

	if ( !pFindNewEnemy )
		pFindNewEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.FindNewEnemy" );

	this->ProcessEvent ( pFindNewEnemy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	AwBotVehicleController_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.DisplayDebug" );

	parms.Canvas = Canvas;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*void AwBotVehicleController::StopFiring (  )
{
	static UFunction* pStopFiring = 0;
	AwBotVehicleController_execStopFiring_Parms parms;

	if ( !pStopFiring )
		pStopFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.StopFiring" );

	this->ProcessEvent ( pStopFiring, &parms, NULL );

}*/

/*bool AwBotVehicleController::CanAttack ( class AActor* Other )
{
	static UFunction* pCanAttack = 0;
	AwBotVehicleController_execCanAttack_Parms parms;

	if ( !pCanAttack )
		pCanAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.CanAttack" );

	parms.Other = Other;
	this->ProcessEvent ( pCanAttack, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicleController::FireWeaponAt ( class AActor* A )
{
	static UFunction* pFireWeaponAt = 0;
	AwBotVehicleController_execFireWeaponAt_Parms parms;

	if ( !pFireWeaponAt )
		pFireWeaponAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.FireWeaponAt" );

	parms.A = A;
	this->ProcessEvent ( pFireWeaponAt, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicleController::TimedFireWeaponAtEnemy (  )
{
	static UFunction* pTimedFireWeaponAtEnemy = 0;
	AwBotVehicleController_execTimedFireWeaponAtEnemy_Parms parms;

	if ( !pTimedFireWeaponAtEnemy )
		pTimedFireWeaponAtEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.TimedFireWeaponAtEnemy" );

	this->ProcessEvent ( pTimedFireWeaponAtEnemy, &parms, NULL );

}*/

/*void AwBotVehicleController::WaitForMover ( class AMover* M )
{
	static UFunction* pWaitForMover = 0;
	AwBotVehicleController_execWaitForMover_Parms parms;

	if ( !pWaitForMover )
		pWaitForMover = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.WaitForMover" );

	parms.M = M;
	this->ProcessEvent ( pWaitForMover, &parms, NULL );

}*/

/*void AwBotVehicleController::SetCombatTimer (  )
{
	static UFunction* pSetCombatTimer = 0;
	AwBotVehicleController_execSetCombatTimer_Parms parms;

	if ( !pSetCombatTimer )
		pSetCombatTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.SetCombatTimer" );

	this->ProcessEvent ( pSetCombatTimer, &parms, NULL );

}*/

/*void AwBotVehicleController::FearThisSpot ( class AAvoidMarker* aSpot )
{
	static UFunction* pFearThisSpot = 0;
	AwBotVehicleController_execFearThisSpot_Parms parms;

	if ( !pFearThisSpot )
		pFearThisSpot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.FearThisSpot" );

	parms.aSpot = aSpot;
	this->ProcessEvent ( pFearThisSpot, &parms, NULL );

}*/

/*void AwBotVehicleController::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwBotVehicleController_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicleController.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void ACombo::Tick ( float DeltaTime )
{
	static UFunction* pTick = 0;
	ACombo_execTick_Parms parms;

	if ( !pTick )
		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Combo.Tick" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pTick, &parms, NULL );

}*/

/*void ACombo::StopEffect ( class AwPawn* P )
{
	static UFunction* pStopEffect = 0;
	ACombo_execStopEffect_Parms parms;

	if ( !pStopEffect )
		pStopEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Combo.StopEffect" );

	parms.P = P;
	this->ProcessEvent ( pStopEffect, &parms, NULL );

}*/

/*void ACombo::StartEffect ( class AwPawn* P )
{
	static UFunction* pStartEffect = 0;
	ACombo_execStartEffect_Parms parms;

	if ( !pStartEffect )
		pStartEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Combo.StartEffect" );

	parms.P = P;
	this->ProcessEvent ( pStartEffect, &parms, NULL );

}*/

/*void ACombo::Destroyed (  )
{
	static UFunction* pDestroyed = 0;
	ACombo_execDestroyed_Parms parms;

	if ( !pDestroyed )
		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Combo.Destroyed" );

	this->ProcessEvent ( pDestroyed, &parms, NULL );

}*/

/*void ACombo::AdrenalineEmpty (  )
{
	static UFunction* pAdrenalineEmpty = 0;
	ACombo_execAdrenalineEmpty_Parms parms;

	if ( !pAdrenalineEmpty )
		pAdrenalineEmpty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Combo.AdrenalineEmpty" );

	this->ProcessEvent ( pAdrenalineEmpty, &parms, NULL );

}*/

/*void ACombo::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	ACombo_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Combo.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwWeaponAttachment::Timer (  )
{
	static UFunction* pTimer = 0;
	AwWeaponAttachment_execTimer_Parms parms;

	if ( !pTimer )
		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponAttachment.Timer" );

	this->ProcessEvent ( pTimer, &parms, NULL );

}*/

/*void AwWeaponAttachment::InitFor ( class AInventory* i )
{
	static UFunction* pInitFor = 0;
	AwWeaponAttachment_execInitFor_Parms parms;

	if ( !pInitFor )
		pInitFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponAttachment.InitFor" );

	parms.i = i;
	this->ProcessEvent ( pInitFor, &parms, NULL );

}*/

/*void AwWeaponAttachment::WeaponLight (  )
{
	static UFunction* pWeaponLight = 0;
	AwWeaponAttachment_execWeaponLight_Parms parms;

	if ( !pWeaponLight )
		pWeaponLight = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponAttachment.WeaponLight" );

	this->ProcessEvent ( pWeaponLight, &parms, NULL );

}*/

/*struct FVector AwWeaponAttachment::GetTipLocation (  )
{
	static UFunction* pGetTipLocation = 0;
	AwWeaponAttachment_execGetTipLocation_Parms parms;

	if ( !pGetTipLocation )
		pGetTipLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponAttachment.GetTipLocation" );

	this->ProcessEvent ( pGetTipLocation, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwWeaponAttachment::PostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AwWeaponAttachment_execPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponAttachment.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AwWeaponAttachment::eventThirdPersonEffects (  )
{
	static UFunction* pThirdPersonEffects = 0;
	AwWeaponAttachment_eventThirdPersonEffects_Parms parms;

	if ( !pThirdPersonEffects )
		pThirdPersonEffects = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponAttachment.ThirdPersonEffects" );

	this->ProcessEvent ( pThirdPersonEffects, &parms, NULL );

}*/

/*void AwWeaponAttachment::UpdateHit ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, class UMaterial* HitMaterial )
{
	static UFunction* pUpdateHit = 0;
	AwWeaponAttachment_execUpdateHit_Parms parms;

	if ( !pUpdateHit )
		pUpdateHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponAttachment.UpdateHit" );

	parms.HitActor = HitActor;
	parms.HitLocation = HitLocation;
	parms.HitNormal = HitNormal;
	parms.HitMaterial = HitMaterial;
	this->ProcessEvent ( pUpdateHit, &parms, NULL );

}*/

/*void AwWeaponAttachment::UpdatePenetrateHit ( class AActor** mHitActor, struct FVector* mHitLocation, struct FVector* mHitNormal, class UMaterial** mHitMaterial, int mLastHitIdx )
{
	static UFunction* pUpdatePenetrateHit = 0;
	AwWeaponAttachment_execUpdatePenetrateHit_Parms parms;

	if ( !pUpdatePenetrateHit )
		pUpdatePenetrateHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponAttachment.UpdatePenetrateHit" );

	parms.mHitActor = mHitActor;
	parms.mHitLocation = mHitLocation;
	parms.mHitNormal = mHitNormal;
	parms.mHitMaterial = mHitMaterial;
	parms.mLastHitIdx = mLastHitIdx;
	this->ProcessEvent ( pUpdatePenetrateHit, &parms, NULL );

}*/

/*void AwWeaponAttachment::Hide ( bool NewbHidden )
{
	static UFunction* pHide = 0;
	AwWeaponAttachment_execHide_Parms parms;

	if ( !pHide )
		pHide = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponAttachment.Hide" );

	parms.NewbHidden = NewbHidden;
	this->ProcessEvent ( pHide, &parms, NULL );

}*/

/*void AwWeaponAttachment::GetHitInfo ( int nIndex, int i )
{
	static UFunction* pGetHitInfo = 0;
	AwWeaponAttachment_execGetHitInfo_Parms parms;

	if ( !pGetHitInfo )
		pGetHitInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponAttachment.GetHitInfo" );

	parms.nIndex = nIndex;
	parms.i = i;
	this->ProcessEvent ( pGetHitInfo, &parms, NULL );

}*/

/*void AwWeaponAttachment::MakeSpawnShell ( bool bRechamber )
{
	static UFunction* pMakeSpawnShell = 0;
	AwWeaponAttachment_execMakeSpawnShell_Parms parms;

	if ( !pMakeSpawnShell )
		pMakeSpawnShell = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponAttachment.MakeSpawnShell" );

	parms.bRechamber = bRechamber;
	this->ProcessEvent ( pMakeSpawnShell, &parms, NULL );

}*/

/*void UwRosterEntry::InitBot ( class ABot* B )
{
	static UFunction* pInitBot = 0;
	UwRosterEntry_execInitBot_Parms parms;

	if ( !pInitBot )
		pInitBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wRosterEntry.InitBot" );

	parms.B = B;
	this->ProcessEvent ( pInitBot, &parms, NULL );

}*/

/*void UwRosterEntry::PrecacheRosterFor ( class AUnrealTeamInfo* t )
{
	static UFunction* pPrecacheRosterFor = 0;
	UwRosterEntry_execPrecacheRosterFor_Parms parms;

	if ( !pPrecacheRosterFor )
		pPrecacheRosterFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wRosterEntry.PrecacheRosterFor" );

	parms.t = t;
	this->ProcessEvent ( pPrecacheRosterFor, &parms, NULL );

}*/

/*class UwRosterEntry* UwRosterEntry::CreateRosterEntryCharacter ( struct FString CharName )
{
	static UFunction* pCreateRosterEntryCharacter = 0;
	UwRosterEntry_execCreateRosterEntryCharacter_Parms parms;

	if ( !pCreateRosterEntryCharacter )
		pCreateRosterEntryCharacter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wRosterEntry.CreateRosterEntryCharacter" );

	parms.CharName = CharName;
	this->ProcessEvent ( pCreateRosterEntryCharacter, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwRosterEntry* UwRosterEntry::CreateRosterEntry ( int prIdx )
{
	static UFunction* pCreateRosterEntry = 0;
	UwRosterEntry_execCreateRosterEntry_Parms parms;

	if ( !pCreateRosterEntry )
		pCreateRosterEntry = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wRosterEntry.CreateRosterEntry" );

	parms.prIdx = prIdx;
	this->ProcessEvent ( pCreateRosterEntry, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString USPECIES_Merc::GetRagSkelName ( struct FString MeshName )
{
	static UFunction* pGetRagSkelName = 0;
	USPECIES_Merc_execGetRagSkelName_Parms parms;

	if ( !pGetRagSkelName )
		pGetRagSkelName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.SPECIES_Merc.GetRagSkelName" );

	parms.MeshName = MeshName;
	this->ProcessEvent ( pGetRagSkelName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBot::Possess ( class APawn* aPawn )
{
	static UFunction* pPossess = 0;
	AwBot_execPossess_Parms parms;

	if ( !pPossess )
		pPossess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBot.Possess" );

	parms.aPawn = aPawn;
	this->ProcessEvent ( pPossess, &parms, NULL );

}*/

/*void AwBot::SetPawnClass ( struct FString inClass, struct FString InCharacter )
{
	static UFunction* pSetPawnClass = 0;
	AwBot_execSetPawnClass_Parms parms;

	if ( !pSetPawnClass )
		pSetPawnClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBot.SetPawnClass" );

	parms.inClass = inClass;
	parms.InCharacter = InCharacter;
	this->ProcessEvent ( pSetPawnClass, &parms, NULL );

}*/

/*void AwBotVehicle::StartDeRes (  )
{
	static UFunction* pStartDeRes = 0;
	AwBotVehicle_execStartDeRes_Parms parms;

	if ( !pStartDeRes )
		pStartDeRes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.StartDeRes" );

	this->ProcessEvent ( pStartDeRes, &parms, NULL );

}*/

/*void AwBotVehicle::SetCaller ( class AController* C )
{
	static UFunction* pSetCaller = 0;
	AwBotVehicle_execSetCaller_Parms parms;

	if ( !pSetCaller )
		pSetCaller = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.SetCaller" );

	parms.C = C;
	this->ProcessEvent ( pSetCaller, &parms, NULL );

}*/

/*void AwBotVehicle::CreateGib ( struct FName BoneName, class UClass* DamageType, struct FRotator R )
{
	static UFunction* pCreateGib = 0;
	AwBotVehicle_execCreateGib_Parms parms;

	if ( !pCreateGib )
		pCreateGib = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.CreateGib" );

	parms.BoneName = BoneName;
	parms.DamageType = DamageType;
	parms.R = R;
	this->ProcessEvent ( pCreateGib, &parms, NULL );

}*/

/*void AwBotVehicle::eventSetAnimAction ( struct FName NewAction )
{
	static UFunction* pSetAnimAction = 0;
	AwBotVehicle_eventSetAnimAction_Parms parms;

	if ( !pSetAnimAction )
		pSetAnimAction = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.SetAnimAction" );

	parms.NewAction = NewAction;
	this->ProcessEvent ( pSetAnimAction, &parms, NULL );

}*/

/*void AwBotVehicle::PlayVictoryAnimation (  )
{
	static UFunction* pPlayVictoryAnimation = 0;
	AwBotVehicle_execPlayVictoryAnimation_Parms parms;

	if ( !pPlayVictoryAnimation )
		pPlayVictoryAnimation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.PlayVictoryAnimation" );

	this->ProcessEvent ( pPlayVictoryAnimation, &parms, NULL );

}*/

/*bool AwBotVehicle::MeleeDamageTarget ( int hitdamage, struct FVector pushdir )
{
	static UFunction* pMeleeDamageTarget = 0;
	AwBotVehicle_execMeleeDamageTarget_Parms parms;

	if ( !pMeleeDamageTarget )
		pMeleeDamageTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.MeleeDamageTarget" );

	parms.hitdamage = hitdamage;
	parms.pushdir = pushdir;
	this->ProcessEvent ( pMeleeDamageTarget, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicle::PlayDyingSound (  )
{
	static UFunction* pPlayDyingSound = 0;
	AwBotVehicle_execPlayDyingSound_Parms parms;

	if ( !pPlayDyingSound )
		pPlayDyingSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.PlayDyingSound" );

	this->ProcessEvent ( pPlayDyingSound, &parms, NULL );

}*/

/*void AwBotVehicle::PlayDying ( class UClass* DamageType, struct FVector HitLoc, int CollisionPart )
{
	static UFunction* pPlayDying = 0;
	AwBotVehicle_execPlayDying_Parms parms;

	if ( !pPlayDying )
		pPlayDying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.PlayDying" );

	parms.DamageType = DamageType;
	parms.HitLoc = HitLoc;
	parms.CollisionPart = CollisionPart;
	this->ProcessEvent ( pPlayDying, &parms, NULL );

}*/

/*void AwBotVehicle::PlayTakeHit ( struct FVector HitLocation, int Damage, class UClass* DamageType )
{
	static UFunction* pPlayTakeHit = 0;
	AwBotVehicle_execPlayTakeHit_Parms parms;

	if ( !pPlayTakeHit )
		pPlayTakeHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.PlayTakeHit" );

	parms.HitLocation = HitLocation;
	parms.Damage = Damage;
	parms.DamageType = DamageType;
	this->ProcessEvent ( pPlayTakeHit, &parms, NULL );

}*/

/*bool AwBotVehicle::IsPlayerPawn (  )
{
	static UFunction* pIsPlayerPawn = 0;
	AwBotVehicle_execIsPlayerPawn_Parms parms;

	if ( !pIsPlayerPawn )
		pIsPlayerPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.IsPlayerPawn" );

	this->ProcessEvent ( pIsPlayerPawn, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicle::SetMovementPhysics (  )
{
	static UFunction* pSetMovementPhysics = 0;
	AwBotVehicle_execSetMovementPhysics_Parms parms;

	if ( !pSetMovementPhysics )
		pSetMovementPhysics = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.SetMovementPhysics" );

	this->ProcessEvent ( pSetMovementPhysics, &parms, NULL );

}*/

/*void AwBotVehicle::AnimEnd ( int Channel )
{
	static UFunction* pAnimEnd = 0;
	AwBotVehicle_execAnimEnd_Parms parms;

	if ( !pAnimEnd )
		pAnimEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.AnimEnd" );

	parms.Channel = Channel;
	this->ProcessEvent ( pAnimEnd, &parms, NULL );

}*/

/*void AwBotVehicle::PlayVictory (  )
{
	static UFunction* pPlayVictory = 0;
	AwBotVehicle_execPlayVictory_Parms parms;

	if ( !pPlayVictory )
		pPlayVictory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.PlayVictory" );

	this->ProcessEvent ( pPlayVictory, &parms, NULL );

}*/

/*void AwBotVehicle::Destroyed (  )
{
	static UFunction* pDestroyed = 0;
	AwBotVehicle_execDestroyed_Parms parms;

	if ( !pDestroyed )
		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.Destroyed" );

	this->ProcessEvent ( pDestroyed, &parms, NULL );

}*/

/*void AwBotVehicle::PlayChallengeSound (  )
{
	static UFunction* pPlayChallengeSound = 0;
	AwBotVehicle_execPlayChallengeSound_Parms parms;

	if ( !pPlayChallengeSound )
		pPlayChallengeSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.PlayChallengeSound" );

	this->ProcessEvent ( pPlayChallengeSound, &parms, NULL );

}*/

/*void AwBotVehicle::AssignInitialPose (  )
{
	static UFunction* pAssignInitialPose = 0;
	AwBotVehicle_execAssignInitialPose_Parms parms;

	if ( !pAssignInitialPose )
		pAssignInitialPose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.AssignInitialPose" );

	this->ProcessEvent ( pAssignInitialPose, &parms, NULL );

}*/

/*bool AwBotVehicle::SameSpeciesAs ( class APawn* P )
{
	static UFunction* pSameSpeciesAs = 0;
	AwBotVehicle_execSameSpeciesAs_Parms parms;

	if ( !pSameSpeciesAs )
		pSameSpeciesAs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.SameSpeciesAs" );

	parms.P = P;
	this->ProcessEvent ( pSameSpeciesAs, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicle::LandThump (  )
{
	static UFunction* pLandThump = 0;
	AwBotVehicle_execLandThump_Parms parms;

	if ( !pLandThump )
		pLandThump = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.LandThump" );

	this->ProcessEvent ( pLandThump, &parms, NULL );

}*/

/*void AwBotVehicle::SpawnGiblet ( class UClass* GibClass, struct FVector Location, struct FRotator Rotation, float GibPerterbation, struct FVector GibVelocity )
{
	static UFunction* pSpawnGiblet = 0;
	AwBotVehicle_execSpawnGiblet_Parms parms;

	if ( !pSpawnGiblet )
		pSpawnGiblet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.SpawnGiblet" );

	parms.GibClass = GibClass;
	parms.Location = Location;
	parms.Rotation = Rotation;
	parms.GibPerterbation = GibPerterbation;
	parms.GibVelocity = GibVelocity;
	this->ProcessEvent ( pSpawnGiblet, &parms, NULL );

}*/

/*void AwBotVehicle::eventPostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwBotVehicle_eventPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwBotVehicle::FireProjectile (  )
{
	static UFunction* pFireProjectile = 0;
	AwBotVehicle_execFireProjectile_Parms parms;

	if ( !pFireProjectile )
		pFireProjectile = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.FireProjectile" );

	this->ProcessEvent ( pFireProjectile, &parms, NULL );

}*/

/*struct FVector AwBotVehicle::GetFireStart ( struct FVector X, struct FVector Y, struct FVector Z )
{
	static UFunction* pGetFireStart = 0;
	AwBotVehicle_execGetFireStart_Parms parms;

	if ( !pGetFireStart )
		pGetFireStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.GetFireStart" );

	parms.X = X;
	parms.Y = Y;
	parms.Z = Z;
	this->ProcessEvent ( pGetFireStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AwBotVehicle::RangedAttackTime (  )
{
	static UFunction* pRangedAttackTime = 0;
	AwBotVehicle_execRangedAttackTime_Parms parms;

	if ( !pRangedAttackTime )
		pRangedAttackTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.RangedAttackTime" );

	this->ProcessEvent ( pRangedAttackTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicle::HasRangedAttack (  )
{
	static UFunction* pHasRangedAttack = 0;
	AwBotVehicle_execHasRangedAttack_Parms parms;

	if ( !pHasRangedAttack )
		pHasRangedAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.HasRangedAttack" );

	this->ProcessEvent ( pHasRangedAttack, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicle::PreferMelee (  )
{
	static UFunction* pPreferMelee = 0;
	AwBotVehicle_execPreferMelee_Parms parms;

	if ( !pPreferMelee )
		pPreferMelee = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.PreferMelee" );

	this->ProcessEvent ( pPreferMelee, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicle::Fire ( float f )
{
	static UFunction* pFire = 0;
	AwBotVehicle_execFire_Parms parms;

	if ( !pFire )
		pFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.Fire" );

	parms.f = f;
	this->ProcessEvent ( pFire, &parms, NULL );

}*/

/*bool AwBotVehicle::IsHeadShot ( struct FVector loc, struct FVector ray, float AdditionalScale )
{
	static UFunction* pIsHeadShot = 0;
	AwBotVehicle_execIsHeadShot_Parms parms;

	if ( !pIsHeadShot )
		pIsHeadShot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.IsHeadShot" );

	parms.loc = loc;
	parms.ray = ray;
	parms.AdditionalScale = AdditionalScale;
	this->ProcessEvent ( pIsHeadShot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicle::ForceDefaultCharacter (  )
{
	static UFunction* pForceDefaultCharacter = 0;
	AwBotVehicle_execForceDefaultCharacter_Parms parms;

	if ( !pForceDefaultCharacter )
		pForceDefaultCharacter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.ForceDefaultCharacter" );

	this->ProcessEvent ( pForceDefaultCharacter, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicle::TurnOff (  )
{
	static UFunction* pTurnOff = 0;
	AwBotVehicle_execTurnOff_Parms parms;

	if ( !pTurnOff )
		pTurnOff = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.TurnOff" );

	this->ProcessEvent ( pTurnOff, &parms, NULL );

}*/

/*bool AwBotVehicle::RecommendSplashDamage (  )
{
	static UFunction* pRecommendSplashDamage = 0;
	AwBotVehicle_execRecommendSplashDamage_Parms parms;

	if ( !pRecommendSplashDamage )
		pRecommendSplashDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.RecommendSplashDamage" );

	this->ProcessEvent ( pRecommendSplashDamage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AwBotVehicle::GetDamageRadius (  )
{
	static UFunction* pGetDamageRadius = 0;
	AwBotVehicle_execGetDamageRadius_Parms parms;

	if ( !pGetDamageRadius )
		pGetDamageRadius = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.GetDamageRadius" );

	this->ProcessEvent ( pGetDamageRadius, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBotVehicle::SplashDamage (  )
{
	static UFunction* pSplashDamage = 0;
	AwBotVehicle_execSplashDamage_Parms parms;

	if ( !pSplashDamage )
		pSplashDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.SplashDamage" );

	this->ProcessEvent ( pSplashDamage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicle::StopFiring (  )
{
	static UFunction* pStopFiring = 0;
	AwBotVehicle_execStopFiring_Parms parms;

	if ( !pStopFiring )
		pStopFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.StopFiring" );

	this->ProcessEvent ( pStopFiring, &parms, NULL );

}*/

/*bool AwBotVehicle::CanAttack ( class AActor* A )
{
	static UFunction* pCanAttack = 0;
	AwBotVehicle_execCanAttack_Parms parms;

	if ( !pCanAttack )
		pCanAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.CanAttack" );

	parms.A = A;
	this->ProcessEvent ( pCanAttack, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBotVehicle::RangedAttack ( class AActor* A )
{
	static UFunction* pRangedAttack = 0;
	AwBotVehicle_execRangedAttack_Parms parms;

	if ( !pRangedAttack )
		pRangedAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBotVehicle.RangedAttack" );

	parms.A = A;
	this->ProcessEvent ( pRangedAttack, &parms, NULL );

}*/

/*bool AwHelicopter::Call ( class ALevelInfo* Level, class AwHelicopter* lastHeli, class AController* Caller )
{
	static UFunction* pCall = 0;
	AwHelicopter_execCall_Parms parms;

	if ( !pCall )
		pCall = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.Call" );

	parms.Level = Level;
	parms.lastHeli = lastHeli;
	parms.Caller = Caller;
	this->ProcessEvent ( pCall, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class ANavigationPoint* AwHelicopter::GetFlyingPathNode ( class ALevelInfo* Level, int idx, int RegenLoc )
{
	static UFunction* pGetFlyingPathNode = 0;
	AwHelicopter_execGetFlyingPathNode_Parms parms;

	if ( !pGetFlyingPathNode )
		pGetFlyingPathNode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.GetFlyingPathNode" );

	parms.Level = Level;
	parms.idx = idx;
	parms.RegenLoc = RegenLoc;
	this->ProcessEvent ( pGetFlyingPathNode, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHelicopter::TossWeapon ( struct FVector TossVel )
{
	static UFunction* pTossWeapon = 0;
	AwHelicopter_execTossWeapon_Parms parms;

	if ( !pTossWeapon )
		pTossWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.TossWeapon" );

	parms.TossVel = TossVel;
	this->ProcessEvent ( pTossWeapon, &parms, NULL );

}*/

/*class UClass* AwHelicopter::GetBloodHitClass ( bool bHeadShot )
{
	static UFunction* pGetBloodHitClass = 0;
	AwHelicopter_execGetBloodHitClass_Parms parms;

	if ( !pGetBloodHitClass )
		pGetBloodHitClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.GetBloodHitClass" );

	parms.bHeadShot = bHeadShot;
	this->ProcessEvent ( pGetBloodHitClass, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwHelicopter::deleOnReachedDestination ( struct FVector Dir, class AActor* GoalActor )
{
	static UFunction* pdeleOnReachedDestination = 0;
	AwHelicopter_execdeleOnReachedDestination_Parms parms;

	if ( !pdeleOnReachedDestination )
		pdeleOnReachedDestination = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.deleOnReachedDestination" );

	parms.Dir = Dir;
	parms.GoalActor = GoalActor;
	this->ProcessEvent ( pdeleOnReachedDestination, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FName AwHelicopter::GetWeaponBoneFor ( class AInventory* i )
{
	static UFunction* pGetWeaponBoneFor = 0;
	AwHelicopter_execGetWeaponBoneFor_Parms parms;

	if ( !pGetWeaponBoneFor )
		pGetWeaponBoneFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.GetWeaponBoneFor" );

	parms.i = i;
	this->ProcessEvent ( pGetWeaponBoneFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHelicopter::PoundDamageTarget (  )
{
	static UFunction* pPoundDamageTarget = 0;
	AwHelicopter_execPoundDamageTarget_Parms parms;

	if ( !pPoundDamageTarget )
		pPoundDamageTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.PoundDamageTarget" );

	this->ProcessEvent ( pPoundDamageTarget, &parms, NULL );

}*/

/*void AwHelicopter::PunchDamageTarget (  )
{
	static UFunction* pPunchDamageTarget = 0;
	AwHelicopter_execPunchDamageTarget_Parms parms;

	if ( !pPunchDamageTarget )
		pPunchDamageTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.PunchDamageTarget" );

	this->ProcessEvent ( pPunchDamageTarget, &parms, NULL );

}*/

/*struct FVector AwHelicopter::GetFireStart ( struct FVector X, struct FVector Y, struct FVector Z )
{
	static UFunction* pGetFireStart = 0;
	AwHelicopter_execGetFireStart_Parms parms;

	if ( !pGetFireStart )
		pGetFireStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.GetFireStart" );

	parms.X = X;
	parms.Y = Y;
	parms.Z = Z;
	this->ProcessEvent ( pGetFireStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHelicopter::SpawnBelch (  )
{
	static UFunction* pSpawnBelch = 0;
	AwHelicopter_execSpawnBelch_Parms parms;

	if ( !pSpawnBelch )
		pSpawnBelch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.SpawnBelch" );

	this->ProcessEvent ( pSpawnBelch, &parms, NULL );

}*/

/*void AwHelicopter::PlayVictory (  )
{
	static UFunction* pPlayVictory = 0;
	AwHelicopter_execPlayVictory_Parms parms;

	if ( !pPlayVictory )
		pPlayVictory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.PlayVictory" );

	this->ProcessEvent ( pPlayVictory, &parms, NULL );

}*/

/*void AwHelicopter::PlayDirectionalHit ( struct FVector HitLoc, bool bUseHitStun, bool bGoreChange )
{
	static UFunction* pPlayDirectionalHit = 0;
	AwHelicopter_execPlayDirectionalHit_Parms parms;

	if ( !pPlayDirectionalHit )
		pPlayDirectionalHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.PlayDirectionalHit" );

	parms.HitLoc = HitLoc;
	parms.bUseHitStun = bUseHitStun;
	parms.bGoreChange = bGoreChange;
	this->ProcessEvent ( pPlayDirectionalHit, &parms, NULL );

}*/

/*void AwHelicopter::PlayDirectionalDeath ( struct FVector HitLoc )
{
	static UFunction* pPlayDirectionalDeath = 0;
	AwHelicopter_execPlayDirectionalDeath_Parms parms;

	if ( !pPlayDirectionalDeath )
		pPlayDirectionalDeath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.PlayDirectionalDeath" );

	parms.HitLoc = HitLoc;
	this->ProcessEvent ( pPlayDirectionalDeath, &parms, NULL );

}*/

/*void AwHelicopter::Falling (  )
{
	static UFunction* pFalling = 0;
	AwHelicopter_execFalling_Parms parms;

	if ( !pFalling )
		pFalling = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.Falling" );

	this->ProcessEvent ( pFalling, &parms, NULL );

}*/

/*void AwHelicopter::SetMovementPhysics (  )
{
	static UFunction* pSetMovementPhysics = 0;
	AwHelicopter_execSetMovementPhysics_Parms parms;

	if ( !pSetMovementPhysics )
		pSetMovementPhysics = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.SetMovementPhysics" );

	this->ProcessEvent ( pSetMovementPhysics, &parms, NULL );

}*/

/*bool AwHelicopter::Dodge ( unsigned char DoubleClickMove )
{
	static UFunction* pDodge = 0;
	AwHelicopter_execDodge_Parms parms;

	if ( !pDodge )
		pDodge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.Dodge" );

	parms.DoubleClickMove = DoubleClickMove;
	this->ProcessEvent ( pDodge, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHelicopter::RangedAttack ( class AActor* A )
{
	static UFunction* pRangedAttack = 0;
	AwHelicopter_execRangedAttack_Parms parms;

	if ( !pRangedAttack )
		pRangedAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.RangedAttack" );

	parms.A = A;
	this->ProcessEvent ( pRangedAttack, &parms, NULL );

}*/

/*void AwHelicopter::eventPostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwHelicopter_eventPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwHelicopter::ClientPlayStaySound (  )
{
	static UFunction* pClientPlayStaySound = 0;
	AwHelicopter_execClientPlayStaySound_Parms parms;

	if ( !pClientPlayStaySound )
		pClientPlayStaySound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.ClientPlayStaySound" );

	this->ProcessEvent ( pClientPlayStaySound, &parms, NULL );

}*/

/*void AwHelicopter::ClientPlayMoveSound (  )
{
	static UFunction* pClientPlayMoveSound = 0;
	AwHelicopter_execClientPlayMoveSound_Parms parms;

	if ( !pClientPlayMoveSound )
		pClientPlayMoveSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.ClientPlayMoveSound" );

	this->ProcessEvent ( pClientPlayMoveSound, &parms, NULL );

}*/

/*void AwHelicopter::ClientStopAllHeliSound (  )
{
	static UFunction* pClientStopAllHeliSound = 0;
	AwHelicopter_execClientStopAllHeliSound_Parms parms;

	if ( !pClientStopAllHeliSound )
		pClientStopAllHeliSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.ClientStopAllHeliSound" );

	this->ProcessEvent ( pClientStopAllHeliSound, &parms, NULL );

}*/

/*void AwHelicopter::StopAllHeliSound (  )
{
	static UFunction* pStopAllHeliSound = 0;
	AwHelicopter_execStopAllHeliSound_Parms parms;

	if ( !pStopAllHeliSound )
		pStopAllHeliSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.StopAllHeliSound" );

	this->ProcessEvent ( pStopAllHeliSound, &parms, NULL );

}*/

/*void AwHelicopter::eventDestroyed (  )
{
	static UFunction* pDestroyed = 0;
	AwHelicopter_eventDestroyed_Parms parms;

	if ( !pDestroyed )
		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.Destroyed" );

	this->ProcessEvent ( pDestroyed, &parms, NULL );

}*/

/*void AwHelicopter::RemoveLevelHelicopter (  )
{
	static UFunction* pRemoveLevelHelicopter = 0;
	AwHelicopter_execRemoveLevelHelicopter_Parms parms;

	if ( !pRemoveLevelHelicopter )
		pRemoveLevelHelicopter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopter.RemoveLevelHelicopter" );

	this->ProcessEvent ( pRemoveLevelHelicopter, &parms, NULL );

}*/

/*void AComboMessage::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pClientReceive = 0;
	AComboMessage_execClientReceive_Parms parms;

	if ( !pClientReceive )
		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ComboMessage.ClientReceive" );

	parms.P = P;
	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pClientReceive, &parms, NULL );

}*/

/*struct FString AComboMessage::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pGetString = 0;
	AComboMessage_execGetString_Parms parms;

	if ( !pGetString )
		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.ComboMessage.GetString" );

	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pGetString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UMaterial* AwPlayerReplicationInfo::GetPortrait (  )
{
	static UFunction* pGetPortrait = 0;
	AwPlayerReplicationInfo_execGetPortrait_Parms parms;

	if ( !pGetPortrait )
		pGetPortrait = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayerReplicationInfo.GetPortrait" );

	this->ProcessEvent ( pGetPortrait, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwPlayerReplicationInfo::eventUpdateCharacter (  )
{
	static UFunction* pUpdateCharacter = 0;
	AwPlayerReplicationInfo_eventUpdateCharacter_Parms parms;

	if ( !pUpdateCharacter )
		pUpdateCharacter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayerReplicationInfo.UpdateCharacter" );

	this->ProcessEvent ( pUpdateCharacter, &parms, NULL );

}*/

/*void AwPlayerReplicationInfo::SetCharacterName ( struct FString S )
{
	static UFunction* pSetCharacterName = 0;
	AwPlayerReplicationInfo_execSetCharacterName_Parms parms;

	if ( !pSetCharacterName )
		pSetCharacterName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayerReplicationInfo.SetCharacterName" );

	parms.S = S;
	this->ProcessEvent ( pSetCharacterName, &parms, NULL );

}*/

/*void AwPlayerReplicationInfo::UpdatePrecacheMaterials (  )
{
	static UFunction* pUpdatePrecacheMaterials = 0;
	AwPlayerReplicationInfo_execUpdatePrecacheMaterials_Parms parms;

	if ( !pUpdatePrecacheMaterials )
		pUpdatePrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlayerReplicationInfo.UpdatePrecacheMaterials" );

	this->ProcessEvent ( pUpdatePrecacheMaterials, &parms, NULL );

}*/

/*bool UGoal::SetFocus (  )
{
	static UFunction* pSetFocus = 0;
	UGoal_execSetFocus_Parms parms;

	if ( !pSetFocus )
		pSetFocus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.SetFocus" );

	this->ProcessEvent ( pSetFocus, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UGoal::SetFocusValue (  )
{
	static UFunction* pSetFocusValue = 0;
	UGoal_execSetFocusValue_Parms parms;

	if ( !pSetFocusValue )
		pSetFocusValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.SetFocusValue" );

	this->ProcessEvent ( pSetFocusValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UGoal::SetFocusValueToTarget (  )
{
	static UFunction* pSetFocusValueToTarget = 0;
	UGoal_execSetFocusValueToTarget_Parms parms;

	if ( !pSetFocusValueToTarget )
		pSetFocusValueToTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.SetFocusValueToTarget" );

	this->ProcessEvent ( pSetFocusValueToTarget, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal::DisplayDebug ( class UCanvas* C, int Level, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	UGoal_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.DisplayDebug" );

	parms.C = C;
	parms.Level = Level;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*void UGoal::HandleMessage ( struct FString Msg )
{
	static UFunction* pHandleMessage = 0;
	UGoal_execHandleMessage_Parms parms;

	if ( !pHandleMessage )
		pHandleMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.HandleMessage" );

	parms.Msg = Msg;
	this->ProcessEvent ( pHandleMessage, &parms, NULL );

}*/

/*void UGoal::End (  )
{
	static UFunction* pEnd = 0;
	UGoal_execEnd_Parms parms;

	if ( !pEnd )
		pEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.End" );

	this->ProcessEvent ( pEnd, &parms, NULL );

}*/

/*unsigned char UGoal::ProcessSubGoals ( float dt )
{
	static UFunction* pProcessSubGoals = 0;
	UGoal_execProcessSubGoals_Parms parms;

	if ( !pProcessSubGoals )
		pProcessSubGoals = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.ProcessSubGoals" );

	parms.dt = dt;
	this->ProcessEvent ( pProcessSubGoals, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal::Process ( float dt )
{
	static UFunction* pProcess = 0;
	UGoal_execProcess_Parms parms;

	if ( !pProcess )
		pProcess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.Process" );

	parms.dt = dt;
	this->ProcessEvent ( pProcess, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal::StartIfNotStarted (  )
{
	static UFunction* pStartIfNotStarted = 0;
	UGoal_execStartIfNotStarted_Parms parms;

	if ( !pStartIfNotStarted )
		pStartIfNotStarted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.StartIfNotStarted" );

	this->ProcessEvent ( pStartIfNotStarted, &parms, NULL );

}*/

/*void UGoal::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal::ClearSubgoals ( bool free )
{
	static UFunction* pClearSubgoals = 0;
	UGoal_execClearSubgoals_Parms parms;

	if ( !pClearSubgoals )
		pClearSubgoals = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.ClearSubgoals" );

	parms.free = free;
	this->ProcessEvent ( pClearSubgoals, &parms, NULL );

}*/

/*void UGoal::AddSubgoal ( class UGoal* inGoal )
{
	static UFunction* pAddSubgoal = 0;
	UGoal_execAddSubgoal_Parms parms;

	if ( !pAddSubgoal )
		pAddSubgoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.AddSubgoal" );

	parms.inGoal = inGoal;
	this->ProcessEvent ( pAddSubgoal, &parms, NULL );

}*/

/*void UGoal::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UGoal_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*void UGoal::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*void UGoal::InitBase ( class AwAIBotBase* inOwner )
{
	static UFunction* pInitBase = 0;
	UGoal_execInitBase_Parms parms;

	if ( !pInitBase )
		pInitBase = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal.InitBase" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pInitBase, &parms, NULL );

}*/

/*struct FString UGoal_PlanAndExec::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_PlanAndExec_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PlanAndExec.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_PlanAndExec::HandleMessage ( struct FString Msg )
{
	static UFunction* pHandleMessage = 0;
	UGoal_PlanAndExec_execHandleMessage_Parms parms;

	if ( !pHandleMessage )
		pHandleMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PlanAndExec.HandleMessage" );

	parms.Msg = Msg;
	this->ProcessEvent ( pHandleMessage, &parms, NULL );

}*/

/*unsigned char UGoal_PlanAndExec::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_PlanAndExec_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PlanAndExec.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_PlanAndExec::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_PlanAndExec_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PlanAndExec.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_PlanAndExec::LogFlag (  )
{
	static UFunction* pLogFlag = 0;
	UGoal_PlanAndExec_execLogFlag_Parms parms;

	if ( !pLogFlag )
		pLogFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PlanAndExec.LogFlag" );

	this->ProcessEvent ( pLogFlag, &parms, NULL );

}*/

/*void UGoal_PlanAndExec::LogPlan ( int tries, float planScore, class UwActionContainer** Plan )
{
	static UFunction* pLogPlan = 0;
	UGoal_PlanAndExec_execLogPlan_Parms parms;

	if ( !pLogPlan )
		pLogPlan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PlanAndExec.LogPlan" );

	parms.tries = tries;
	parms.planScore = planScore;
	this->ProcessEvent ( pLogPlan, &parms, NULL );

	*Plan = parms.Plan;
}*/

/*void UGoal_PlanAndExec::LookForBetterPlan ( int tries )
{
	static UFunction* pLookForBetterPlan = 0;
	UGoal_PlanAndExec_execLookForBetterPlan_Parms parms;

	if ( !pLookForBetterPlan )
		pLookForBetterPlan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PlanAndExec.LookForBetterPlan" );

	parms.tries = tries;
	this->ProcessEvent ( pLookForBetterPlan, &parms, NULL );

}*/

/*void UGoal_PlanAndExec::Replan (  )
{
	static UFunction* pReplan = 0;
	UGoal_PlanAndExec_execReplan_Parms parms;

	if ( !pReplan )
		pReplan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PlanAndExec.Replan" );

	this->ProcessEvent ( pReplan, &parms, NULL );

}*/

/*void UGoal_PlanAndExec::DecidePurposeToActivate (  )
{
	static UFunction* pDecidePurposeToActivate = 0;
	UGoal_PlanAndExec_execDecidePurposeToActivate_Parms parms;

	if ( !pDecidePurposeToActivate )
		pDecidePurposeToActivate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PlanAndExec.DecidePurposeToActivate" );

	this->ProcessEvent ( pDecidePurposeToActivate, &parms, NULL );

}*/

/*void UGoal_PlanAndExec::InitPurposes (  )
{
	static UFunction* pInitPurposes = 0;
	UGoal_PlanAndExec_execInitPurposes_Parms parms;

	if ( !pInitPurposes )
		pInitPurposes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PlanAndExec.InitPurposes" );

	this->ProcessEvent ( pInitPurposes, &parms, NULL );

}*/

/*void UGoal_PlanAndExec::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_PlanAndExec_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PlanAndExec.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_PlanAndExec* UGoal_PlanAndExec::Init ( class AwAIBotBase* inOwner, class UwActionPlanner* inPlaner )
{
	static UFunction* pInit = 0;
	UGoal_PlanAndExec_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PlanAndExec.Init" );

	parms.inOwner = inOwner;
	parms.inPlaner = inPlaner;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_Fire::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_Fire_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Fire.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Fire::End (  )
{
	static UFunction* pEnd = 0;
	UGoal_Fire_execEnd_Parms parms;

	if ( !pEnd )
		pEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Fire.End" );

	this->ProcessEvent ( pEnd, &parms, NULL );

}*/

/*unsigned char UGoal_Fire::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_Fire_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Fire.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Fire::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_Fire_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Fire.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*bool UGoal_Fire::SetFocusValue (  )
{
	static UFunction* pSetFocusValue = 0;
	UGoal_Fire_execSetFocusValue_Parms parms;

	if ( !pSetFocusValue )
		pSetFocusValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Fire.SetFocusValue" );

	this->ProcessEvent ( pSetFocusValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Fire::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UGoal_Fire_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Fire.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*void UGoal_Fire::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_Fire_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Fire.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_Fire* UGoal_Fire::Init ( class AwAIBotBase* inOwner, class AActor* inTarget, bool inDoAim, int inFireCount )
{
	static UFunction* pInit = 0;
	UGoal_Fire_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Fire.Init" );

	parms.inOwner = inOwner;
	parms.inTarget = inTarget;
	parms.inDoAim = inDoAim;
	parms.inFireCount = inFireCount;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_MovePathToward::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UGoal_MovePathToward_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MovePathToward.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*struct FString UGoal_MovePathToward::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_MovePathToward_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MovePathToward.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UGoal_MovePathToward::AddGoalMoveToward ( int stackLevel )
{
	static UFunction* pAddGoalMoveToward = 0;
	UGoal_MovePathToward_execAddGoalMoveToward_Parms parms;

	if ( !pAddGoalMoveToward )
		pAddGoalMoveToward = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MovePathToward.AddGoalMoveToward" );

	parms.stackLevel = stackLevel;
	this->ProcessEvent ( pAddGoalMoveToward, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_MovePathToward::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_MovePathToward_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MovePathToward.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_MovePathToward::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_MovePathToward_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MovePathToward.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_MovePathToward::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_MovePathToward_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MovePathToward.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_MovePathToward* UGoal_MovePathToward::Init ( class AwAIBotBase* inOwner, class AActor* inDestination, float inReachRadius )
{
	static UFunction* pInit = 0;
	UGoal_MovePathToward_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MovePathToward.Init" );

	parms.inOwner = inOwner;
	parms.inDestination = inDestination;
	parms.inReachRadius = inReachRadius;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_Roam::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_Roam_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Roam.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Roam::AddGoalMovePathToward (  )
{
	static UFunction* pAddGoalMovePathToward = 0;
	UGoal_Roam_execAddGoalMovePathToward_Parms parms;

	if ( !pAddGoalMovePathToward )
		pAddGoalMovePathToward = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Roam.AddGoalMovePathToward" );

	this->ProcessEvent ( pAddGoalMovePathToward, &parms, NULL );

}*/

/*unsigned char UGoal_Roam::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_Roam_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Roam.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Roam::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_Roam_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Roam.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*class UGoal_Roam* UGoal_Roam::Init ( class AwAIBotBase* inOwner )
{
	static UFunction* pInit = 0;
	UGoal_Roam_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Roam.Init" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_Shoot::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_Shoot_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Shoot.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_Shoot::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_Shoot_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Shoot.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Shoot::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_Shoot_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Shoot.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_Shoot::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_Shoot_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Shoot.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_Shoot* UGoal_Shoot::Init ( class AwAIBotBase* inOwner, class AActor* inTarget, bool inDoAim )
{
	static UFunction* pInit = 0;
	UGoal_Shoot_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Shoot.Init" );

	parms.inOwner = inOwner;
	parms.inTarget = inTarget;
	parms.inDoAim = inDoAim;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_Test::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_Test_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Test.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Test::AddGoal (  )
{
	static UFunction* pAddGoal = 0;
	UGoal_Test_execAddGoal_Parms parms;

	if ( !pAddGoal )
		pAddGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Test.AddGoal" );

	this->ProcessEvent ( pAddGoal, &parms, NULL );

}*/

/*class ANavigationPoint* UGoal_Test::GetReachableRandomTarget (  )
{
	static UFunction* pGetReachableRandomTarget = 0;
	UGoal_Test_execGetReachableRandomTarget_Parms parms;

	if ( !pGetReachableRandomTarget )
		pGetReachableRandomTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Test.GetReachableRandomTarget" );

	this->ProcessEvent ( pGetReachableRandomTarget, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Test::End (  )
{
	static UFunction* pEnd = 0;
	UGoal_Test_execEnd_Parms parms;

	if ( !pEnd )
		pEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Test.End" );

	this->ProcessEvent ( pEnd, &parms, NULL );

}*/

/*unsigned char UGoal_Test::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_Test_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Test.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Test::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_Test_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Test.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*class UGoal_Test* UGoal_Test::Init ( class AwAIBotBase* inOwner )
{
	static UFunction* pInit = 0;
	UGoal_Test_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Test.Init" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UwPurpose::GetActivationScore (  )
{
	static UFunction* pGetActivationScore = 0;
	UwPurpose_execGetActivationScore_Parms parms;

	if ( !pGetActivationScore )
		pGetActivationScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPurpose.GetActivationScore" );

	this->ProcessEvent ( pGetActivationScore, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UwPurpose::Evaluate ( class UwState** S )
{
	static UFunction* pEvaluate = 0;
	UwPurpose_execEvaluate_Parms parms;

	if ( !pEvaluate )
		pEvaluate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPurpose.Evaluate" );

	parms.S = *S;
	this->ProcessEvent ( pEvaluate, &parms, NULL );

	*S = parms.S;
	return parms.ReturnValue;
}*/

/*class UwPurpose* UwPurpose::Create ( class AwAIBotBase* inOwner )
{
	static UFunction* pCreate = 0;
	UwPurpose_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPurpose.Create" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UwPurposeExplore::GetActivationScore (  )
{
	static UFunction* pGetActivationScore = 0;
	UwPurposeExplore_execGetActivationScore_Parms parms;

	if ( !pGetActivationScore )
		pGetActivationScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPurposeExplore.GetActivationScore" );

	this->ProcessEvent ( pGetActivationScore, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UwPurposeExplore::Evaluate ( class UwState** S )
{
	static UFunction* pEvaluate = 0;
	UwPurposeExplore_execEvaluate_Parms parms;

	if ( !pEvaluate )
		pEvaluate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPurposeExplore.Evaluate" );

	parms.S = *S;
	this->ProcessEvent ( pEvaluate, &parms, NULL );

	*S = parms.S;
	return parms.ReturnValue;
}*/

/*struct FString UwActionContainer::ToString (  )
{
	static UFunction* pToString = 0;
	UwActionContainer_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionContainer.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwActionContainer::FreeActionContainers (  )
{
	static UFunction* pFreeActionContainers = 0;
	UwActionContainer_execFreeActionContainers_Parms parms;

	if ( !pFreeActionContainers )
		pFreeActionContainers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionContainer.FreeActionContainers" );

	this->ProcessEvent ( pFreeActionContainers, &parms, NULL );

}*/

/*void UwActionContainer::FreeActions (  )
{
	static UFunction* pFreeActions = 0;
	UwActionContainer_execFreeActions_Parms parms;

	if ( !pFreeActions )
		pFreeActions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionContainer.FreeActions" );

	this->ProcessEvent ( pFreeActions, &parms, NULL );

}*/

/*void UwActionContainer::FreeAll (  )
{
	static UFunction* pFreeAll = 0;
	UwActionContainer_execFreeAll_Parms parms;

	if ( !pFreeAll )
		pFreeAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionContainer.FreeAll" );

	this->ProcessEvent ( pFreeAll, &parms, NULL );

}*/

/*void UwActionContainer::WriteFutureState ( class UwFutureState** fs )
{
	static UFunction* pWriteFutureState = 0;
	UwActionContainer_execWriteFutureState_Parms parms;

	if ( !pWriteFutureState )
		pWriteFutureState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionContainer.WriteFutureState" );

	parms.fs = *fs;
	this->ProcessEvent ( pWriteFutureState, &parms, NULL );

	*fs = parms.fs;
}*/

/*bool UwActionContainer::Includes ( class UwAction* testAction )
{
	static UFunction* pIncludes = 0;
	UwActionContainer_execIncludes_Parms parms;

	if ( !pIncludes )
		pIncludes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionContainer.Includes" );

	parms.testAction = testAction;
	this->ProcessEvent ( pIncludes, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwActionContainer* UwActionContainer::AddSubContainer ( class UwAction* inAction )
{
	static UFunction* pAddSubContainer = 0;
	UwActionContainer_execAddSubContainer_Parms parms;

	if ( !pAddSubContainer )
		pAddSubContainer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionContainer.AddSubContainer" );

	parms.inAction = inAction;
	this->ProcessEvent ( pAddSubContainer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwActionContainer::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UwActionContainer_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionContainer.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UwActionContainer* UwActionContainer::Init ( class AwAIBotBase* inOwner )
{
	static UFunction* pInit = 0;
	UwActionContainer_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionContainer.Init" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwAIPawn::CheckEntryVehicle (  )
{
	static UFunction* pCheckEntryVehicle = 0;
	AwAIPawn_execCheckEntryVehicle_Parms parms;

	if ( !pCheckEntryVehicle )
		pCheckEntryVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIPawn.CheckEntryVehicle" );

	this->ProcessEvent ( pCheckEntryVehicle, &parms, NULL );

}*/

/*void AwAIPawn::eventTick ( float dt )
{
	static UFunction* pTick = 0;
	AwAIPawn_eventTick_Parms parms;

	if ( !pTick )
		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIPawn.Tick" );

	parms.dt = dt;
	this->ProcessEvent ( pTick, &parms, NULL );

}*/

/*void AwAIPawn::UpdateCannotFindPath (  )
{
	static UFunction* pUpdateCannotFindPath = 0;
	AwAIPawn_execUpdateCannotFindPath_Parms parms;

	if ( !pUpdateCannotFindPath )
		pUpdateCannotFindPath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIPawn.UpdateCannotFindPath" );

	this->ProcessEvent ( pUpdateCannotFindPath, &parms, NULL );

}*/

/*void AwAIPawn::LogCannotFindPath ( class AActor* Dest )
{
	static UFunction* pLogCannotFindPath = 0;
	AwAIPawn_execLogCannotFindPath_Parms parms;

	if ( !pLogCannotFindPath )
		pLogCannotFindPath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIPawn.LogCannotFindPath" );

	parms.Dest = Dest;
	this->ProcessEvent ( pLogCannotFindPath, &parms, NULL );

}*/

/*void AwAIPawn::SetCannotFIndPath ( class AActor* Dest )
{
	static UFunction* pSetCannotFIndPath = 0;
	AwAIPawn_execSetCannotFIndPath_Parms parms;

	if ( !pSetCannotFIndPath )
		pSetCannotFIndPath = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIPawn.SetCannotFIndPath" );

	parms.Dest = Dest;
	this->ProcessEvent ( pSetCannotFIndPath, &parms, NULL );

}*/

/*void AwAIPawn::AddDefaultInventory ( bool bQuickslotChange )
{
	static UFunction* pAddDefaultInventory = 0;
	AwAIPawn_execAddDefaultInventory_Parms parms;

	if ( !pAddDefaultInventory )
		pAddDefaultInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIPawn.AddDefaultInventory" );

	parms.bQuickslotChange = bQuickslotChange;
	this->ProcessEvent ( pAddDefaultInventory, &parms, NULL );

}*/

/*class UwActionContainer* UwActionPlanner::Plan ( class UwPurpose* purpose, int tries, float* bestPlanScore )
{
	static UFunction* pPlan = 0;
	UwActionPlanner_execPlan_Parms parms;

	if ( !pPlan )
		pPlan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionPlanner.Plan" );

	parms.purpose = purpose;
	parms.tries = tries;
	this->ProcessEvent ( pPlan, &parms, NULL );

	*bestPlanScore = parms.bestPlanScore;
	return parms.ReturnValue;
}*/

/*void UwActionPlanner::SubPlan ( int Layer, class UwPurpose* purpose, float parentActionTime, class UwActionContainer** acon, class UwState** S, class TArray< class UwActionLayer* >* Actions )
{
	static UFunction* pSubPlan = 0;
	UwActionPlanner_execSubPlan_Parms parms;

	if ( !pSubPlan )
		pSubPlan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionPlanner.SubPlan" );

	parms.Layer = Layer;
	parms.purpose = purpose;
	parms.parentActionTime = parentActionTime;
	this->ProcessEvent ( pSubPlan, &parms, NULL );

	*acon = parms.acon;
	*S = parms.S;
	*Actions = parms.Actions;
}*/

/*void UwActionPlanner::GetActionCandidatesByLayer ( class TArray< class UwAction* >* rawActions, class TArray< class UwActionLayer* >* actionsByLayer )
{
	static UFunction* pGetActionCandidatesByLayer = 0;
	UwActionPlanner_execGetActionCandidatesByLayer_Parms parms;

	if ( !pGetActionCandidatesByLayer )
		pGetActionCandidatesByLayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionPlanner.GetActionCandidatesByLayer" );

	parms.rawActions = *rawActions;
	parms.actionsByLayer = *actionsByLayer;
	this->ProcessEvent ( pGetActionCandidatesByLayer, &parms, NULL );

	*rawActions = parms.rawActions;
	*actionsByLayer = parms.actionsByLayer;
}*/

/*void UwActionPlanner::GetActionCandidates ( class TArray< class UwAction* >* Actions )
{
	static UFunction* pGetActionCandidates = 0;
	UwActionPlanner_execGetActionCandidates_Parms parms;

	if ( !pGetActionCandidates )
		pGetActionCandidates = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionPlanner.GetActionCandidates" );

	parms.Actions = *Actions;
	this->ProcessEvent ( pGetActionCandidates, &parms, NULL );

	*Actions = parms.Actions;
}*/

/*void UwActionPlanner::GetActionCandidates_Pick ( class TArray< class UwAction* >* Actions )
{
	static UFunction* pGetActionCandidates_Pick = 0;
	UwActionPlanner_execGetActionCandidates_Pick_Parms parms;

	if ( !pGetActionCandidates_Pick )
		pGetActionCandidates_Pick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionPlanner.GetActionCandidates_Pick" );

	parms.Actions = *Actions;
	this->ProcessEvent ( pGetActionCandidates_Pick, &parms, NULL );

	*Actions = parms.Actions;
}*/

/*void UwActionPlanner::GetActionCandidates_SwitchWeapon ( class TArray< class UwAction* >* Actions )
{
	static UFunction* pGetActionCandidates_SwitchWeapon = 0;
	UwActionPlanner_execGetActionCandidates_SwitchWeapon_Parms parms;

	if ( !pGetActionCandidates_SwitchWeapon )
		pGetActionCandidates_SwitchWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionPlanner.GetActionCandidates_SwitchWeapon" );

	parms.Actions = *Actions;
	this->ProcessEvent ( pGetActionCandidates_SwitchWeapon, &parms, NULL );

	*Actions = parms.Actions;
}*/

/*void UwActionPlanner::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UwActionPlanner_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionPlanner.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UwActionPlanner* UwActionPlanner::Create ( class AwAIBotBase* inOwner, class UwNPCActions* Actions )
{
	static UFunction* pCreate = 0;
	UwActionPlanner_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionPlanner.Create" );

	parms.inOwner = inOwner;
	parms.Actions = Actions;
	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwFutureState::Init (  )
{
	static UFunction* pInit = 0;
	UwFutureState_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wFutureState.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

}*/

/*class UwFutureState* UwFutureState::Create (  )
{
	static UFunction* pCreate = 0;
	UwFutureState_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wFutureState.Create" );

	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UTargetingSystem::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UTargetingSystem_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.TargetingSystem.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*void UTargetingSystem::DisplayDebug ( class UCanvas* C, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	UTargetingSystem_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.TargetingSystem.DisplayDebug" );

	parms.C = C;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*void UTargetingSystem::Update ( float dt )
{
	static UFunction* pUpdate = 0;
	UTargetingSystem_execUpdate_Parms parms;

	if ( !pUpdate )
		pUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.TargetingSystem.Update" );

	parms.dt = dt;
	this->ProcessEvent ( pUpdate, &parms, NULL );

}*/

/*class UMemoryItem* UTargetingSystem::GetTarget (  )
{
	static UFunction* pGetTarget = 0;
	UTargetingSystem_execGetTarget_Parms parms;

	if ( !pGetTarget )
		pGetTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.TargetingSystem.GetTarget" );

	this->ProcessEvent ( pGetTarget, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UTargetingSystem::InitEvaluator (  )
{
	static UFunction* pInitEvaluator = 0;
	UTargetingSystem_execInitEvaluator_Parms parms;

	if ( !pInitEvaluator )
		pInitEvaluator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.TargetingSystem.InitEvaluator" );

	this->ProcessEvent ( pInitEvaluator, &parms, NULL );

}*/

/*class UTargetingSystem* UTargetingSystem::Create ( class AwAIBotBase* inOwner )
{
	static UFunction* pCreate = 0;
	UTargetingSystem_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.TargetingSystem.Create" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwPlanMaster::_request ( int i )
{
	static UFunction* p_request = 0;
	UwPlanMaster_exec_request_Parms parms;

	if ( !p_request )
		p_request = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlanMaster._request" );

	parms.i = i;
	this->ProcessEvent ( p_request, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwPlanMaster::RequestItr (  )
{
	static UFunction* pRequestItr = 0;
	UwPlanMaster_execRequestItr_Parms parms;

	if ( !pRequestItr )
		pRequestItr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlanMaster.RequestItr" );

	this->ProcessEvent ( pRequestItr, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwPlanMaster::RequestUpdateItr (  )
{
	static UFunction* pRequestUpdateItr = 0;
	UwPlanMaster_execRequestUpdateItr_Parms parms;

	if ( !pRequestUpdateItr )
		pRequestUpdateItr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlanMaster.RequestUpdateItr" );

	this->ProcessEvent ( pRequestUpdateItr, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwPlanMaster::Update ( float dt )
{
	static UFunction* pUpdate = 0;
	UwPlanMaster_execUpdate_Parms parms;

	if ( !pUpdate )
		pUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlanMaster.Update" );

	parms.dt = dt;
	this->ProcessEvent ( pUpdate, &parms, NULL );

}*/

/*class UwPlanMaster* UwPlanMaster::Create ( class AwAILevel* inLevel )
{
	static UFunction* pCreate = 0;
	UwPlanMaster_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPlanMaster.Create" );

	parms.inLevel = inLevel;
	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UwAction_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*void UwAction::WriteFutureState ( class UwFutureState** fs )
{
	static UFunction* pWriteFutureState = 0;
	UwAction_execWriteFutureState_Parms parms;

	if ( !pWriteFutureState )
		pWriteFutureState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction.WriteFutureState" );

	parms.fs = *fs;
	this->ProcessEvent ( pWriteFutureState, &parms, NULL );

	*fs = parms.fs;
}*/

/*void UwAction::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHelicopterController::OnEndRound (  )
{
	static UFunction* pOnEndRound = 0;
	AwHelicopterController_execOnEndRound_Parms parms;

	if ( !pOnEndRound )
		pOnEndRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.OnEndRound" );

	this->ProcessEvent ( pOnEndRound, &parms, NULL );

}*/

/*void AwHelicopterController::PawnDied ( class APawn* P )
{
	static UFunction* pPawnDied = 0;
	AwHelicopterController_execPawnDied_Parms parms;

	if ( !pPawnDied )
		pPawnDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.PawnDied" );

	parms.P = P;
	this->ProcessEvent ( pPawnDied, &parms, NULL );

}*/

/*void AwHelicopterController::ClientOnEndWaitingForStart (  )
{
	static UFunction* pClientOnEndWaitingForStart = 0;
	AwHelicopterController_execClientOnEndWaitingForStart_Parms parms;

	if ( !pClientOnEndWaitingForStart )
		pClientOnEndWaitingForStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.ClientOnEndWaitingForStart" );

	this->ProcessEvent ( pClientOnEndWaitingForStart, &parms, NULL );

}*/

/*void AwHelicopterController::Disappear (  )
{
	static UFunction* pDisappear = 0;
	AwHelicopterController_execDisappear_Parms parms;

	if ( !pDisappear )
		pDisappear = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.Disappear" );

	this->ProcessEvent ( pDisappear, &parms, NULL );

}*/

/*void AwHelicopterController::ServerStopAllSoundByHeliHK ( class APawn* P )
{
	static UFunction* pServerStopAllSoundByHeliHK = 0;
	AwHelicopterController_execServerStopAllSoundByHeliHK_Parms parms;

	if ( !pServerStopAllSoundByHeliHK )
		pServerStopAllSoundByHeliHK = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.ServerStopAllSoundByHeliHK" );

	parms.P = P;
	this->ProcessEvent ( pServerStopAllSoundByHeliHK, &parms, NULL );

}*/

/*void AwHelicopterController::PlayStaySound (  )
{
	static UFunction* pPlayStaySound = 0;
	AwHelicopterController_execPlayStaySound_Parms parms;

	if ( !pPlayStaySound )
		pPlayStaySound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.PlayStaySound" );

	this->ProcessEvent ( pPlayStaySound, &parms, NULL );

}*/

/*void AwHelicopterController::PlayMoveSound (  )
{
	static UFunction* pPlayMoveSound = 0;
	AwHelicopterController_execPlayMoveSound_Parms parms;

	if ( !pPlayMoveSound )
		pPlayMoveSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.PlayMoveSound" );

	this->ProcessEvent ( pPlayMoveSound, &parms, NULL );

}*/

/*void AwHelicopterController::Decelerate ( float dt )
{
	static UFunction* pDecelerate = 0;
	AwHelicopterController_execDecelerate_Parms parms;

	if ( !pDecelerate )
		pDecelerate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.Decelerate" );

	parms.dt = dt;
	this->ProcessEvent ( pDecelerate, &parms, NULL );

}*/

/*void AwHelicopterController::Accelerate ( float dt )
{
	static UFunction* pAccelerate = 0;
	AwHelicopterController_execAccelerate_Parms parms;

	if ( !pAccelerate )
		pAccelerate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.Accelerate" );

	parms.dt = dt;
	this->ProcessEvent ( pAccelerate, &parms, NULL );

}*/

/*class APawn* AwHelicopterController::GetEnemy (  )
{
	static UFunction* pGetEnemy = 0;
	AwHelicopterController_execGetEnemy_Parms parms;

	if ( !pGetEnemy )
		pGetEnemy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.GetEnemy" );

	this->ProcessEvent ( pGetEnemy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AwHelicopterController::GetDotAgainstGround ( class APawn* P )
{
	static UFunction* pGetDotAgainstGround = 0;
	AwHelicopterController_execGetDotAgainstGround_Parms parms;

	if ( !pGetDotAgainstGround )
		pGetDotAgainstGround = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.GetDotAgainstGround" );

	parms.P = P;
	this->ProcessEvent ( pGetDotAgainstGround, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AwHelicopterController::GetDot ( class APawn* P )
{
	static UFunction* pGetDot = 0;
	AwHelicopterController_execGetDot_Parms parms;

	if ( !pGetDot )
		pGetDot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.GetDot" );

	parms.P = P;
	this->ProcessEvent ( pGetDot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FVector AwHelicopterController::GetMomentousRandomDest (  )
{
	static UFunction* pGetMomentousRandomDest = 0;
	AwHelicopterController_execGetMomentousRandomDest_Parms parms;

	if ( !pGetMomentousRandomDest )
		pGetMomentousRandomDest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.GetMomentousRandomDest" );

	this->ProcessEvent ( pGetMomentousRandomDest, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHelicopterController::ProgressFlyingPathNode (  )
{
	static UFunction* pProgressFlyingPathNode = 0;
	AwHelicopterController_execProgressFlyingPathNode_Parms parms;

	if ( !pProgressFlyingPathNode )
		pProgressFlyingPathNode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.ProgressFlyingPathNode" );

	this->ProcessEvent ( pProgressFlyingPathNode, &parms, NULL );

}*/

/*class ANavigationPoint* AwHelicopterController::GetNextFlyingPathNode (  )
{
	static UFunction* pGetNextFlyingPathNode = 0;
	AwHelicopterController_execGetNextFlyingPathNode_Parms parms;

	if ( !pGetNextFlyingPathNode )
		pGetNextFlyingPathNode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.GetNextFlyingPathNode" );

	this->ProcessEvent ( pGetNextFlyingPathNode, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwHelicopterController::Degree2Unreal ( float Angle )
{
	static UFunction* pDegree2Unreal = 0;
	AwHelicopterController_execDegree2Unreal_Parms parms;

	if ( !pDegree2Unreal )
		pDegree2Unreal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.Degree2Unreal" );

	parms.Angle = Angle;
	this->ProcessEvent ( pDegree2Unreal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwHelicopterController::GetSignedRandom ( int Min, int Max )
{
	static UFunction* pGetSignedRandom = 0;
	AwHelicopterController_execGetSignedRandom_Parms parms;

	if ( !pGetSignedRandom )
		pGetSignedRandom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.GetSignedRandom" );

	parms.Min = Min;
	parms.Max = Max;
	this->ProcessEvent ( pGetSignedRandom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FRotator AwHelicopterController::AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError )
{
	static UFunction* pAdjustAim = 0;
	AwHelicopterController_execAdjustAim_Parms parms;

	if ( !pAdjustAim )
		pAdjustAim = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.AdjustAim" );

	parms.FiredAmmunition = FiredAmmunition;
	parms.projStart = projStart;
	parms.AimError = AimError;
	this->ProcessEvent ( pAdjustAim, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class APlayerReplicationInfo* AwHelicopterController::GetPRI (  )
{
	static UFunction* pGetPRI = 0;
	AwHelicopterController_execGetPRI_Parms parms;

	if ( !pGetPRI )
		pGetPRI = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.GetPRI" );

	this->ProcessEvent ( pGetPRI, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHelicopterController::GameHasEnded (  )
{
	static UFunction* pGameHasEnded = 0;
	AwHelicopterController_execGameHasEnded_Parms parms;

	if ( !pGameHasEnded )
		pGameHasEnded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.GameHasEnded" );

	this->ProcessEvent ( pGameHasEnded, &parms, NULL );

}*/

/*int AwHelicopterController::GetTeamNum (  )
{
	static UFunction* pGetTeamNum = 0;
	AwHelicopterController_execGetTeamNum_Parms parms;

	if ( !pGetTeamNum )
		pGetTeamNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.GetTeamNum" );

	this->ProcessEvent ( pGetTeamNum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AwHelicopter* AwHelicopterController::GetHeli (  )
{
	static UFunction* pGetHeli = 0;
	AwHelicopterController_execGetHeli_Parms parms;

	if ( !pGetHeli )
		pGetHeli = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.GetHeli" );

	this->ProcessEvent ( pGetHeli, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHelicopterController::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn )
{
	static UFunction* pNotifyKilled = 0;
	AwHelicopterController_execNotifyKilled_Parms parms;

	if ( !pNotifyKilled )
		pNotifyKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.NotifyKilled" );

	parms.Killer = Killer;
	parms.Killed = Killed;
	parms.KilledPawn = KilledPawn;
	this->ProcessEvent ( pNotifyKilled, &parms, NULL );

}*/

/*void AwHelicopterController::Possess ( class APawn* aPawn )
{
	static UFunction* pPossess = 0;
	AwHelicopterController_execPossess_Parms parms;

	if ( !pPossess )
		pPossess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.Possess" );

	parms.aPawn = aPawn;
	this->ProcessEvent ( pPossess, &parms, NULL );

}*/

/*void AwHelicopterController::DisplayDebug ( class UCanvas* C, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	AwHelicopterController_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.DisplayDebug" );

	parms.C = C;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*void AwHelicopterController::IncY ( class UCanvas* C, float* YL, float* YPos )
{
	static UFunction* pIncY = 0;
	AwHelicopterController_execIncY_Parms parms;

	if ( !pIncY )
		pIncY = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.IncY" );

	parms.C = C;
	this->ProcessEvent ( pIncY, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*struct FString AwHelicopterController::Rotator2String ( struct FRotator R )
{
	static UFunction* pRotator2String = 0;
	AwHelicopterController_execRotator2String_Parms parms;

	if ( !pRotator2String )
		pRotator2String = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.Rotator2String" );

	parms.R = R;
	this->ProcessEvent ( pRotator2String, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AwHelicopterController::Vector2String ( struct FVector V )
{
	static UFunction* pVector2String = 0;
	AwHelicopterController_execVector2String_Parms parms;

	if ( !pVector2String )
		pVector2String = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.Vector2String" );

	parms.V = V;
	this->ProcessEvent ( pVector2String, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwHelicopterController::FireWeaponAt ( class AActor* A )
{
	static UFunction* pFireWeaponAt = 0;
	AwHelicopterController_execFireWeaponAt_Parms parms;

	if ( !pFireWeaponAt )
		pFireWeaponAt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.FireWeaponAt" );

	parms.A = A;
	this->ProcessEvent ( pFireWeaponAt, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHelicopterController::CancelCampFor ( class AController* C )
{
	static UFunction* pCancelCampFor = 0;
	AwHelicopterController_execCancelCampFor_Parms parms;

	if ( !pCancelCampFor )
		pCancelCampFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wHelicopterController.CancelCampFor" );

	parms.C = C;
	this->ProcessEvent ( pCancelCampFor, &parms, NULL );

}*/

/*struct FString UGoal_MoveToward::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_MoveToward_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToward.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_MoveToward::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UGoal_MoveToward_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToward.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*bool UGoal_MoveToward::SetFocusValue (  )
{
	static UFunction* pSetFocusValue = 0;
	UGoal_MoveToward_execSetFocusValue_Parms parms;

	if ( !pSetFocusValue )
		pSetFocusValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToward.SetFocusValue" );

	this->ProcessEvent ( pSetFocusValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_MoveToward::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_MoveToward_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToward.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UGoal_MoveToward::doSprint (  )
{
	static UFunction* pdoSprint = 0;
	UGoal_MoveToward_execdoSprint_Parms parms;

	if ( !pdoSprint )
		pdoSprint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToward.doSprint" );

	this->ProcessEvent ( pdoSprint, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_MoveToward::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_MoveToward_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToward.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*bool UGoal_MoveToward::PassedCheckPoint (  )
{
	static UFunction* pPassedCheckPoint = 0;
	UGoal_MoveToward_execPassedCheckPoint_Parms parms;

	if ( !pPassedCheckPoint )
		pPassedCheckPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToward.PassedCheckPoint" );

	this->ProcessEvent ( pPassedCheckPoint, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_MoveToward::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_MoveToward_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToward.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_MoveToward* UGoal_MoveToward::Init ( class AwAIBotBase* inOwner, class AActor* inDestination, class AActor* inFocus, float inReachRadius, bool inSprint, bool inCrouch, bool inProne )
{
	static UFunction* pInit = 0;
	UGoal_MoveToward_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToward.Init" );

	parms.inOwner = inOwner;
	parms.inDestination = inDestination;
	parms.inFocus = inFocus;
	parms.inReachRadius = inReachRadius;
	parms.inSprint = inSprint;
	parms.inCrouch = inCrouch;
	parms.inProne = inProne;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UDAE::Evaluate ( class UMemoryItem* MI )
{
	static UFunction* pEvaluate = 0;
	UDAE_execEvaluate_Parms parms;

	if ( !pEvaluate )
		pEvaluate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE.Evaluate" );

	parms.MI = MI;
	this->ProcessEvent ( pEvaluate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UDAE_Multiple::Evaluate ( class UMemoryItem* MI )
{
	static UFunction* pEvaluate = 0;
	UDAE_Multiple_execEvaluate_Parms parms;

	if ( !pEvaluate )
		pEvaluate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE_Multiple.Evaluate" );

	parms.MI = MI;
	this->ProcessEvent ( pEvaluate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UDAE_Multiple::Add ( float factor, class UDAE* inDAE )
{
	static UFunction* pAdd = 0;
	UDAE_Multiple_execAdd_Parms parms;

	if ( !pAdd )
		pAdd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE_Multiple.Add" );

	parms.factor = factor;
	parms.inDAE = inDAE;
	this->ProcessEvent ( pAdd, &parms, NULL );

}*/

/*class UDAE_Multiple* UDAE_Multiple::Create (  )
{
	static UFunction* pCreate = 0;
	UDAE_Multiple_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE_Multiple.Create" );

	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UDAE_InSight::Evaluate ( class UMemoryItem* MI )
{
	static UFunction* pEvaluate = 0;
	UDAE_InSight_execEvaluate_Parms parms;

	if ( !pEvaluate )
		pEvaluate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE_InSight.Evaluate" );

	parms.MI = MI;
	this->ProcessEvent ( pEvaluate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UDAE_InSight* UDAE_InSight::Create ( class AwAIBotBase* inOwner )
{
	static UFunction* pCreate = 0;
	UDAE_InSight_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE_InSight.Create" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UDAE_Visibility::Evaluate ( class UMemoryItem* MI )
{
	static UFunction* pEvaluate = 0;
	UDAE_Visibility_execEvaluate_Parms parms;

	if ( !pEvaluate )
		pEvaluate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE_Visibility.Evaluate" );

	parms.MI = MI;
	this->ProcessEvent ( pEvaluate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UDAE_Visibility* UDAE_Visibility::Create ( class AwAIBotBase* inOwner )
{
	static UFunction* pCreate = 0;
	UDAE_Visibility_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE_Visibility.Create" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UDAE_Proximity::Evaluate ( class UMemoryItem* MI )
{
	static UFunction* pEvaluate = 0;
	UDAE_Proximity_execEvaluate_Parms parms;

	if ( !pEvaluate )
		pEvaluate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE_Proximity.Evaluate" );

	parms.MI = MI;
	this->ProcessEvent ( pEvaluate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UDAE_Proximity* UDAE_Proximity::Create ( class AwAIBotBase* inOwner, float inMaxDistance )
{
	static UFunction* pCreate = 0;
	UDAE_Proximity_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE_Proximity.Create" );

	parms.inOwner = inOwner;
	parms.inMaxDistance = inMaxDistance;
	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UDAE_IsTurret::Evaluate ( class UMemoryItem* MI )
{
	static UFunction* pEvaluate = 0;
	UDAE_IsTurret_execEvaluate_Parms parms;

	if ( !pEvaluate )
		pEvaluate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE_IsTurret.Evaluate" );

	parms.MI = MI;
	this->ProcessEvent ( pEvaluate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UDAE_IsTurret* UDAE_IsTurret::Create (  )
{
	static UFunction* pCreate = 0;
	UDAE_IsTurret_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE_IsTurret.Create" );

	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UDAE_RecentTarget::Evaluate ( class UMemoryItem* MI )
{
	static UFunction* pEvaluate = 0;
	UDAE_RecentTarget_execEvaluate_Parms parms;

	if ( !pEvaluate )
		pEvaluate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE_RecentTarget.Evaluate" );

	parms.MI = MI;
	this->ProcessEvent ( pEvaluate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UDAE_RecentTarget* UDAE_RecentTarget::Create ( class AwAIBotBase* inOwner, float InTime )
{
	static UFunction* pCreate = 0;
	UDAE_RecentTarget_execCreate_Parms parms;

	if ( !pCreate )
		pCreate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.DAE_RecentTarget.Create" );

	parms.inOwner = inOwner;
	parms.InTime = InTime;
	this->ProcessEvent ( pCreate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_Empty::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_Empty_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Empty.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_Empty::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_Empty_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Empty.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_Empty::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_Empty_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Empty.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_Empty::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_Empty_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Empty.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_Empty* UwAction_Empty::Init (  )
{
	static UFunction* pInit = 0;
	UwAction_Empty_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Empty.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwActionLayer* UwActionLayer::Init (  )
{
	static UFunction* pInit = 0;
	UwActionLayer_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wActionLayer.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_Fire::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_Fire_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Fire.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UwAction_Fire::GetWeaponMultiplier ( class UwState* ws )
{
	static UFunction* pGetWeaponMultiplier = 0;
	UwAction_Fire_execGetWeaponMultiplier_Parms parms;

	if ( !pGetWeaponMultiplier )
		pGetWeaponMultiplier = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Fire.GetWeaponMultiplier" );

	parms.ws = ws;
	this->ProcessEvent ( pGetWeaponMultiplier, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_Fire::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_Fire_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Fire.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_Fire::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_Fire_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Fire.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_Fire::CalcDamage ( class UwState* ws )
{
	static UFunction* pCalcDamage = 0;
	UwAction_Fire_execCalcDamage_Parms parms;

	if ( !pCalcDamage )
		pCalcDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Fire.CalcDamage" );

	parms.ws = ws;
	this->ProcessEvent ( pCalcDamage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UwAction_Fire::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_Fire_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Fire.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_Fire::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_Fire_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Fire.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_Fire* UwAction_Fire::Init (  )
{
	static UFunction* pInit = 0;
	UwAction_Fire_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Fire.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_Reload::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_Reload_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Reload.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_Reload::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_Reload_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Reload.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_Reload::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_Reload_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Reload.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_Reload::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_Reload_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Reload.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_Reload::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_Reload_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Reload.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_Reload* UwAction_Reload::Init (  )
{
	static UFunction* pInit = 0;
	UwAction_Reload_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Reload.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_Explore::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_Explore_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Explore.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UwAction_Explore::CalcMeetNewEnemyProbability ( class UwState* ws )
{
	static UFunction* pCalcMeetNewEnemyProbability = 0;
	UwAction_Explore_execCalcMeetNewEnemyProbability_Parms parms;

	if ( !pCalcMeetNewEnemyProbability )
		pCalcMeetNewEnemyProbability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Explore.CalcMeetNewEnemyProbability" );

	parms.ws = ws;
	this->ProcessEvent ( pCalcMeetNewEnemyProbability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_Explore::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_Explore_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Explore.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_Explore::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_Explore_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Explore.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_Explore::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_Explore_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Explore.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_Explore::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_Explore_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Explore.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_Explore* UwAction_Explore::Init (  )
{
	static UFunction* pInit = 0;
	UwAction_Explore_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_Explore.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UwAction_ExploreTutorial::CalcMeetNewEnemyProbability ( class UwState* ws )
{
	static UFunction* pCalcMeetNewEnemyProbability = 0;
	UwAction_ExploreTutorial_execCalcMeetNewEnemyProbability_Parms parms;

	if ( !pCalcMeetNewEnemyProbability )
		pCalcMeetNewEnemyProbability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ExploreTutorial.CalcMeetNewEnemyProbability" );

	parms.ws = ws;
	this->ProcessEvent ( pCalcMeetNewEnemyProbability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_ExploreTutorial::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_ExploreTutorial_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ExploreTutorial.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_IdleHands::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_IdleHands_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_IdleHands.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_IdleHands::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_IdleHands_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_IdleHands.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_IdleHands::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_IdleHands_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_IdleHands.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_IdleHands::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_IdleHands_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_IdleHands.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_IdleHands::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_IdleHands_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_IdleHands.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_IdleHands* UwAction_IdleHands::Init ( float inIdleTime )
{
	static UFunction* pInit = 0;
	UwAction_IdleHands_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_IdleHands.Init" );

	parms.inIdleTime = inIdleTime;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_ApproachAndMelee::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_ApproachAndMelee_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ApproachAndMelee.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_ApproachAndMelee::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_ApproachAndMelee_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ApproachAndMelee.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_ApproachAndMelee::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_ApproachAndMelee_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ApproachAndMelee.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_ApproachAndMelee::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_ApproachAndMelee_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ApproachAndMelee.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_ApproachAndMelee::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_ApproachAndMelee_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ApproachAndMelee.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_ApproachAndMelee* UwAction_ApproachAndMelee::Init (  )
{
	static UFunction* pInit = 0;
	UwAction_ApproachAndMelee_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ApproachAndMelee.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_MoveToEnemyInfluence::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_MoveToEnemyInfluence_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MoveToEnemyInfluence.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_MoveToEnemyInfluence::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_MoveToEnemyInfluence_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MoveToEnemyInfluence.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_MoveToEnemyInfluence::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_MoveToEnemyInfluence_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MoveToEnemyInfluence.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_MoveToEnemyInfluence::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_MoveToEnemyInfluence_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MoveToEnemyInfluence.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_MoveToEnemyInfluence::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_MoveToEnemyInfluence_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MoveToEnemyInfluence.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_MoveToEnemyInfluence* UwAction_MoveToEnemyInfluence::Init (  )
{
	static UFunction* pInit = 0;
	UwAction_MoveToEnemyInfluence_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MoveToEnemyInfluence.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_MoveToSeeTarget::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_MoveToSeeTarget_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MoveToSeeTarget.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_MoveToSeeTarget::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_MoveToSeeTarget_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MoveToSeeTarget.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_MoveToSeeTarget::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_MoveToSeeTarget_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MoveToSeeTarget.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_MoveToSeeTarget::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_MoveToSeeTarget_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MoveToSeeTarget.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_MoveToSeeTarget::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_MoveToSeeTarget_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MoveToSeeTarget.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_MoveToSeeTarget* UwAction_MoveToSeeTarget::Init (  )
{
	static UFunction* pInit = 0;
	UwAction_MoveToSeeTarget_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MoveToSeeTarget.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_LookAround::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_LookAround_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_LookAround.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_LookAround::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_LookAround_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_LookAround.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_LookAround::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_LookAround_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_LookAround.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_LookAround::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_LookAround_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_LookAround.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_LookAround::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_LookAround_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_LookAround.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_LookAround* UwAction_LookAround::Init ( float inDuration )
{
	static UFunction* pInit = 0;
	UwAction_LookAround_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_LookAround.Init" );

	parms.inDuration = inDuration;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_UseHelicopter::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_UseHelicopter_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseHelicopter.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_UseHelicopter::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_UseHelicopter_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseHelicopter.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_UseHelicopter::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_UseHelicopter_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseHelicopter.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_UseHelicopter::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_UseHelicopter_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseHelicopter.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_UseHelicopter::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_UseHelicopter_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseHelicopter.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_UseHelicopter* UwAction_UseHelicopter::Init (  )
{
	static UFunction* pInit = 0;
	UwAction_UseHelicopter_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseHelicopter.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_UseAIrstrikeRealTime::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_UseAIrstrikeRealTime_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseAIrstrikeRealTime.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_UseAIrstrikeRealTime::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_UseAIrstrikeRealTime_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseAIrstrikeRealTime.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_UseAIrstrikeRealTime::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_UseAIrstrikeRealTime_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseAIrstrikeRealTime.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_UseAIrstrikeRealTime::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_UseAIrstrikeRealTime_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseAIrstrikeRealTime.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_UseAIrstrikeRealTime::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_UseAIrstrikeRealTime_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseAIrstrikeRealTime.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_UseAIrstrikeRealTime* UwAction_UseAIrstrikeRealTime::Init (  )
{
	static UFunction* pInit = 0;
	UwAction_UseAIrstrikeRealTime_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseAIrstrikeRealTime.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_UseUAV::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_UseUAV_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseUAV.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_UseUAV::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_UseUAV_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseUAV.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_UseUAV::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_UseUAV_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseUAV.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_UseUAV::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_UseUAV_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseUAV.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_UseUAV::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_UseUAV_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseUAV.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_UseUAV* UwAction_UseUAV::Init (  )
{
	static UFunction* pInit = 0;
	UwAction_UseUAV_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_UseUAV.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_MeleeNoTarget::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_MeleeNoTarget_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MeleeNoTarget.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_MeleeNoTarget::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_MeleeNoTarget_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MeleeNoTarget.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_MeleeNoTarget::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_MeleeNoTarget_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MeleeNoTarget.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_MeleeNoTarget::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_MeleeNoTarget_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MeleeNoTarget.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_MeleeNoTarget::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_MeleeNoTarget_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MeleeNoTarget.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_MeleeNoTarget* UwAction_MeleeNoTarget::Init (  )
{
	static UFunction* pInit = 0;
	UwAction_MeleeNoTarget_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_MeleeNoTarget.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_FireSpecialTarget::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_FireSpecialTarget_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_FireSpecialTarget.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UwAction_FireSpecialTarget::CalcDamage ( class UwState* ws )
{
	static UFunction* pCalcDamage = 0;
	UwAction_FireSpecialTarget_execCalcDamage_Parms parms;

	if ( !pCalcDamage )
		pCalcDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_FireSpecialTarget.CalcDamage" );

	parms.ws = ws;
	this->ProcessEvent ( pCalcDamage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UwAction_FireSpecialTarget::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_FireSpecialTarget_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_FireSpecialTarget.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_FireSpecialTarget::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_FireSpecialTarget_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_FireSpecialTarget.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_FireSpecialTarget::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UwAction_FireSpecialTarget_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_FireSpecialTarget.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*class UwAction_FireSpecialTarget* UwAction_FireSpecialTarget::Init2 ( class AActor* inTarget, float inDmgFactor )
{
	static UFunction* pInit2 = 0;
	UwAction_FireSpecialTarget_execInit2_Parms parms;

	if ( !pInit2 )
		pInit2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_FireSpecialTarget.Init2" );

	parms.inTarget = inTarget;
	parms.inDmgFactor = inDmgFactor;
	this->ProcessEvent ( pInit2, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_PickTarget::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_PickTarget_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickTarget.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickTarget::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_PickTarget_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickTarget.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_PickTarget::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_PickTarget_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickTarget.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_PickTarget::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_PickTarget_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickTarget.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_PickTarget::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_PickTarget_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickTarget.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickTarget::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UwAction_PickTarget_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickTarget.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UwAction_PickTarget* UwAction_PickTarget::Init ( class UMemoryItem* inTarget )
{
	static UFunction* pInit = 0;
	UwAction_PickTarget_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickTarget.Init" );

	parms.inTarget = inTarget;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_ThrowGrenadeRealTime::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_ThrowGrenadeRealTime_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ThrowGrenadeRealTime.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_ThrowGrenadeRealTime::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_ThrowGrenadeRealTime_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ThrowGrenadeRealTime.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_ThrowGrenadeRealTime::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_ThrowGrenadeRealTime_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ThrowGrenadeRealTime.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_ThrowGrenadeRealTime::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_ThrowGrenadeRealTime_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ThrowGrenadeRealTime.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_ThrowGrenadeRealTime::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_ThrowGrenadeRealTime_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ThrowGrenadeRealTime.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UwAction_ThrowGrenadeRealTime* UwAction_ThrowGrenadeRealTime::Init (  )
{
	static UFunction* pInit = 0;
	UwAction_ThrowGrenadeRealTime_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_ThrowGrenadeRealTime.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickHealth::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UwAction_PickHealth_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHealth.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*class UGoal* UwAction_PickHealth::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_PickHealth_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHealth.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickHealth::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_PickHealth_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHealth.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_PickHealth::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_PickHealth_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHealth.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_PickHealth::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_PickHealth_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHealth.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_PickHealth::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_PickHealth_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHealth.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickHealth::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UwAction_PickHealth_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHealth.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UwAction_PickHealth* UwAction_PickHealth::Init ( class APickup* inPack )
{
	static UFunction* pInit = 0;
	UwAction_PickHealth_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHealth.Init" );

	parms.inPack = inPack;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickHelicopter::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UwAction_PickHelicopter_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHelicopter.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*class UGoal* UwAction_PickHelicopter::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_PickHelicopter_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHelicopter.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickHelicopter::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_PickHelicopter_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHelicopter.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_PickHelicopter::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_PickHelicopter_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHelicopter.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_PickHelicopter::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_PickHelicopter_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHelicopter.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_PickHelicopter::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_PickHelicopter_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHelicopter.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickHelicopter::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UwAction_PickHelicopter_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHelicopter.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UwAction_PickHelicopter* UwAction_PickHelicopter::Init ( class APickup* inPack )
{
	static UFunction* pInit = 0;
	UwAction_PickHelicopter_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickHelicopter.Init" );

	parms.inPack = inPack;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickAirstrike::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UwAction_PickAirstrike_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickAirstrike.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*class UGoal* UwAction_PickAirstrike::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_PickAirstrike_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickAirstrike.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickAirstrike::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_PickAirstrike_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickAirstrike.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_PickAirstrike::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_PickAirstrike_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickAirstrike.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_PickAirstrike::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_PickAirstrike_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickAirstrike.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_PickAirstrike::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_PickAirstrike_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickAirstrike.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickAirstrike::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UwAction_PickAirstrike_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickAirstrike.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UwAction_PickAirstrike* UwAction_PickAirstrike::Init ( class APickup* inPack )
{
	static UFunction* pInit = 0;
	UwAction_PickAirstrike_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickAirstrike.Init" );

	parms.inPack = inPack;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickUAV::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UwAction_PickUAV_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickUAV.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*class UGoal* UwAction_PickUAV::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_PickUAV_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickUAV.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickUAV::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_PickUAV_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickUAV.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_PickUAV::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_PickUAV_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickUAV.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_PickUAV::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_PickUAV_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickUAV.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_PickUAV::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_PickUAV_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickUAV.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_PickUAV::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UwAction_PickUAV_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickUAV.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UwAction_PickUAV* UwAction_PickUAV::Init ( class APickup* inPack )
{
	static UFunction* pInit = 0;
	UwAction_PickUAV_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_PickUAV.Init" );

	parms.inPack = inPack;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_SwitchWeapon::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_SwitchWeapon_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_SwitchWeapon.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_SwitchWeapon::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_SwitchWeapon_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_SwitchWeapon.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_SwitchWeapon::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_SwitchWeapon_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_SwitchWeapon.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_SwitchWeapon::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_SwitchWeapon_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_SwitchWeapon.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_SwitchWeapon::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_SwitchWeapon_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_SwitchWeapon.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_SwitchWeapon::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UwAction_SwitchWeapon_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_SwitchWeapon.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*void UwAction_SwitchWeapon::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UwAction_SwitchWeapon_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_SwitchWeapon.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UwAction_SwitchWeapon* UwAction_SwitchWeapon::Init ( class AwWeapon* inWeapon )
{
	static UFunction* pInit = 0;
	UwAction_SwitchWeapon_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_SwitchWeapon.Init" );

	parms.inWeapon = inWeapon;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwAIBot::Possess ( class APawn* aPawn )
{
	static UFunction* pPossess = 0;
	AwAIBot_execPossess_Parms parms;

	if ( !pPossess )
		pPossess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBot.Possess" );

	parms.aPawn = aPawn;
	this->ProcessEvent ( pPossess, &parms, NULL );

}*/

/*void AwAIBot::SetPawnClass ( struct FString inClass, struct FString InCharacter )
{
	static UFunction* pSetPawnClass = 0;
	AwAIBot_execSetPawnClass_Parms parms;

	if ( !pSetPawnClass )
		pSetPawnClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAIBot.SetPawnClass" );

	parms.inClass = inClass;
	parms.InCharacter = InCharacter;
	this->ProcessEvent ( pSetPawnClass, &parms, NULL );

}*/

/*struct FString UGoal_Stay::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_Stay_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Stay.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_Stay::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_Stay_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Stay.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Stay::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_Stay_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Stay.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*class UGoal_Stay* UGoal_Stay::Init ( class AwAIBotBase* inOwner, float inStayLength )
{
	static UFunction* pInit = 0;
	UGoal_Stay_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Stay.Init" );

	parms.inOwner = inOwner;
	parms.inStayLength = inStayLength;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_SwitchWeapon::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_SwitchWeapon_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchWeapon.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UGoal_SwitchWeapon::SetFocusValue (  )
{
	static UFunction* pSetFocusValue = 0;
	UGoal_SwitchWeapon_execSetFocusValue_Parms parms;

	if ( !pSetFocusValue )
		pSetFocusValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchWeapon.SetFocusValue" );

	this->ProcessEvent ( pSetFocusValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_SwitchWeapon::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_SwitchWeapon_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchWeapon.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_SwitchWeapon::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_SwitchWeapon_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchWeapon.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*class UGoal_SwitchWeapon* UGoal_SwitchWeapon::Init ( class AwAIBotBase* inOwner, unsigned char InGroup )
{
	static UFunction* pInit = 0;
	UGoal_SwitchWeapon_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchWeapon.Init" );

	parms.inOwner = inOwner;
	parms.InGroup = InGroup;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_ExecPlan::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_ExecPlan_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPlan.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UGoal_ExecPlan::SetFocusValue (  )
{
	static UFunction* pSetFocusValue = 0;
	UGoal_ExecPlan_execSetFocusValue_Parms parms;

	if ( !pSetFocusValue )
		pSetFocusValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPlan.SetFocusValue" );

	this->ProcessEvent ( pSetFocusValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_ExecPlan::End (  )
{
	static UFunction* pEnd = 0;
	UGoal_ExecPlan_execEnd_Parms parms;

	if ( !pEnd )
		pEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPlan.End" );

	this->ProcessEvent ( pEnd, &parms, NULL );

}*/

/*unsigned char UGoal_ExecPlan::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_ExecPlan_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPlan.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UGoal_ExecPlan::GetProgress (  )
{
	static UFunction* pGetProgress = 0;
	UGoal_ExecPlan_execGetProgress_Parms parms;

	if ( !pGetProgress )
		pGetProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPlan.GetProgress" );

	this->ProcessEvent ( pGetProgress, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_ExecPlan::InitSubGoals (  )
{
	static UFunction* pInitSubGoals = 0;
	UGoal_ExecPlan_execInitSubGoals_Parms parms;

	if ( !pInitSubGoals )
		pInitSubGoals = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPlan.InitSubGoals" );

	this->ProcessEvent ( pInitSubGoals, &parms, NULL );

}*/

/*void UGoal_ExecPlan::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_ExecPlan_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPlan.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_ExecPlan::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_ExecPlan_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPlan.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_ExecPlan* UGoal_ExecPlan::Init ( class AwAIBotBase* inOwner, class UwActionContainer* inPlan )
{
	static UFunction* pInit = 0;
	UGoal_ExecPlan_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPlan.Init" );

	parms.inOwner = inOwner;
	parms.inPlan = inPlan;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_UseAirstrikeRealTime::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_UseAirstrikeRealTime_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_UseAirstrikeRealTime.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class ANavigationPoint* UGoal_UseAirstrikeRealTime::GetTarget (  )
{
	static UFunction* pGetTarget = 0;
	UGoal_UseAirstrikeRealTime_execGetTarget_Parms parms;

	if ( !pGetTarget )
		pGetTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_UseAirstrikeRealTime.GetTarget" );

	this->ProcessEvent ( pGetTarget, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_UseAirstrikeRealTime::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_UseAirstrikeRealTime_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_UseAirstrikeRealTime.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_UseAirstrikeRealTime::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_UseAirstrikeRealTime_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_UseAirstrikeRealTime.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_UseAirstrikeRealTime::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_UseAirstrikeRealTime_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_UseAirstrikeRealTime.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_UseAirstrikeRealTime* UGoal_UseAirstrikeRealTime::Init ( class AwAIBotBase* inOwner )
{
	static UFunction* pInit = 0;
	UGoal_UseAirstrikeRealTime_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_UseAirstrikeRealTime.Init" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_SwitchAndUse::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_SwitchAndUse_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndUse.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_SwitchAndUse::End (  )
{
	static UFunction* pEnd = 0;
	UGoal_SwitchAndUse_execEnd_Parms parms;

	if ( !pEnd )
		pEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndUse.End" );

	this->ProcessEvent ( pEnd, &parms, NULL );

}*/

/*unsigned char UGoal_SwitchAndUse::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_SwitchAndUse_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndUse.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_SwitchAndUse::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_SwitchAndUse_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndUse.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*class UGoal_SwitchAndUse* UGoal_SwitchAndUse::Init ( class AwAIBotBase* inOwner, int InGroup )
{
	static UFunction* pInit = 0;
	UGoal_SwitchAndUse_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndUse.Init" );

	parms.inOwner = inOwner;
	parms.InGroup = InGroup;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_Reload::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_Reload_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Reload.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UGoal_Reload::SetFocusValue (  )
{
	static UFunction* pSetFocusValue = 0;
	UGoal_Reload_execSetFocusValue_Parms parms;

	if ( !pSetFocusValue )
		pSetFocusValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Reload.SetFocusValue" );

	this->ProcessEvent ( pSetFocusValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_Reload::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_Reload_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Reload.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Reload::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UGoal_Reload_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Reload.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*void UGoal_Reload::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_Reload_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Reload.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_Reload::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_Reload_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Reload.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_Reload* UGoal_Reload::Init ( class AwAIBotBase* inOwner )
{
	static UFunction* pInit = 0;
	UGoal_Reload_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Reload.Init" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_Fail::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_Fail_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Fail.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_Fail::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_Fail_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Fail.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Fail::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_Fail_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Fail.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*class UGoal_Fail* UGoal_Fail::Init ( class AwAIBotBase* inOwner )
{
	static UFunction* pInit = 0;
	UGoal_Fail_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Fail.Init" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_MoveToEnemyInfluence::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_MoveToEnemyInfluence_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToEnemyInfluence.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_MoveToEnemyInfluence::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_MoveToEnemyInfluence_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToEnemyInfluence.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_MoveToEnemyInfluence::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_MoveToEnemyInfluence_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToEnemyInfluence.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*class UGoal_MoveToEnemyInfluence* UGoal_MoveToEnemyInfluence::Init ( class AwAIBotBase* inOwner )
{
	static UFunction* pInit = 0;
	UGoal_MoveToEnemyInfluence_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToEnemyInfluence.Init" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_MeleeNoTarget::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_MeleeNoTarget_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MeleeNoTarget.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_MeleeNoTarget::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_MeleeNoTarget_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MeleeNoTarget.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_MeleeNoTarget::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_MeleeNoTarget_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MeleeNoTarget.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_MeleeNoTarget::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UGoal_MeleeNoTarget_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MeleeNoTarget.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*class UGoal_MeleeNoTarget* UGoal_MeleeNoTarget::Init ( class AwAIBotBase* inOwner, int inMeleeCount )
{
	static UFunction* pInit = 0;
	UGoal_MeleeNoTarget_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MeleeNoTarget.Init" );

	parms.inOwner = inOwner;
	parms.inMeleeCount = inMeleeCount;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_LookAround::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_LookAround_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_LookAround.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_LookAround::End (  )
{
	static UFunction* pEnd = 0;
	UGoal_LookAround_execEnd_Parms parms;

	if ( !pEnd )
		pEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_LookAround.End" );

	this->ProcessEvent ( pEnd, &parms, NULL );

}*/

/*bool UGoal_LookAround::SetFocusValue (  )
{
	static UFunction* pSetFocusValue = 0;
	UGoal_LookAround_execSetFocusValue_Parms parms;

	if ( !pSetFocusValue )
		pSetFocusValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_LookAround.SetFocusValue" );

	this->ProcessEvent ( pSetFocusValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_LookAround::NextFocusTarget (  )
{
	static UFunction* pNextFocusTarget = 0;
	UGoal_LookAround_execNextFocusTarget_Parms parms;

	if ( !pNextFocusTarget )
		pNextFocusTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_LookAround.NextFocusTarget" );

	this->ProcessEvent ( pNextFocusTarget, &parms, NULL );

}*/

/*unsigned char UGoal_LookAround::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_LookAround_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_LookAround.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_LookAround::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_LookAround_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_LookAround.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*class UGoal_LookAround* UGoal_LookAround::Init ( class AwAIBotBase* inOwner, float inDuration )
{
	static UFunction* pInit = 0;
	UGoal_LookAround_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_LookAround.Init" );

	parms.inOwner = inOwner;
	parms.inDuration = inDuration;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_ApproachAndMelee::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_ApproachAndMelee_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ApproachAndMelee.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_ApproachAndMelee::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_ApproachAndMelee_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ApproachAndMelee.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_ApproachAndMelee::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_ApproachAndMelee_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ApproachAndMelee.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_ApproachAndMelee::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UGoal_ApproachAndMelee_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ApproachAndMelee.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*void UGoal_ApproachAndMelee::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_ApproachAndMelee_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ApproachAndMelee.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_ApproachAndMelee* UGoal_ApproachAndMelee::Init ( class AwAIBotBase* inOwner, class APawn* inTarget )
{
	static UFunction* pInit = 0;
	UGoal_ApproachAndMelee_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ApproachAndMelee.Init" );

	parms.inOwner = inOwner;
	parms.inTarget = inTarget;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_ThrowGrenadeRealTime::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_ThrowGrenadeRealTime_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ThrowGrenadeRealTime.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class ANavigationPoint* UGoal_ThrowGrenadeRealTime::GetTarget (  )
{
	static UFunction* pGetTarget = 0;
	UGoal_ThrowGrenadeRealTime_execGetTarget_Parms parms;

	if ( !pGetTarget )
		pGetTarget = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ThrowGrenadeRealTime.GetTarget" );

	this->ProcessEvent ( pGetTarget, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_ThrowGrenadeRealTime::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_ThrowGrenadeRealTime_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ThrowGrenadeRealTime.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_ThrowGrenadeRealTime::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_ThrowGrenadeRealTime_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ThrowGrenadeRealTime.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_ThrowGrenadeRealTime::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_ThrowGrenadeRealTime_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ThrowGrenadeRealTime.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_ThrowGrenadeRealTime* UGoal_ThrowGrenadeRealTime::Init ( class AwAIBotBase* inOwner )
{
	static UFunction* pInit = 0;
	UGoal_ThrowGrenadeRealTime_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ThrowGrenadeRealTime.Init" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_PickTarget::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_PickTarget_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PickTarget.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_PickTarget::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_PickTarget_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PickTarget.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_PickTarget::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_PickTarget_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PickTarget.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_PickTarget::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_PickTarget_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PickTarget.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_PickTarget* UGoal_PickTarget::Init ( class AwAIBotBase* inOwner, class UMemoryItem* inMI )
{
	static UFunction* pInit = 0;
	UGoal_PickTarget_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_PickTarget.Init" );

	parms.inOwner = inOwner;
	parms.inMI = inMI;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_MoveToSeeTarget::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_MoveToSeeTarget_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToSeeTarget.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_MoveToSeeTarget::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_MoveToSeeTarget_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToSeeTarget.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_MoveToSeeTarget::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_MoveToSeeTarget_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToSeeTarget.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*class UGoal_MoveToSeeTarget* UGoal_MoveToSeeTarget::Init ( class AwAIBotBase* inOwner )
{
	static UFunction* pInit = 0;
	UGoal_MoveToSeeTarget_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_MoveToSeeTarget.Init" );

	parms.inOwner = inOwner;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_ExecPartialPlan::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_ExecPartialPlan_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPartialPlan.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_ExecPartialPlan::DisplayDebug ( class UCanvas* C, int Level, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	UGoal_ExecPartialPlan_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPartialPlan.DisplayDebug" );

	parms.C = C;
	parms.Level = Level;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*bool UGoal_ExecPartialPlan::SetFocus (  )
{
	static UFunction* pSetFocus = 0;
	UGoal_ExecPartialPlan_execSetFocus_Parms parms;

	if ( !pSetFocus )
		pSetFocus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPartialPlan.SetFocus" );

	this->ProcessEvent ( pSetFocus, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_ExecPartialPlan::ClearSubgoals ( bool free )
{
	static UFunction* pClearSubgoals = 0;
	UGoal_ExecPartialPlan_execClearSubgoals_Parms parms;

	if ( !pClearSubgoals )
		pClearSubgoals = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPartialPlan.ClearSubgoals" );

	parms.free = free;
	this->ProcessEvent ( pClearSubgoals, &parms, NULL );

}*/

/*void UGoal_ExecPartialPlan::End (  )
{
	static UFunction* pEnd = 0;
	UGoal_ExecPartialPlan_execEnd_Parms parms;

	if ( !pEnd )
		pEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPartialPlan.End" );

	this->ProcessEvent ( pEnd, &parms, NULL );

}*/

/*unsigned char UGoal_ExecPartialPlan::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_ExecPartialPlan_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPartialPlan.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal_ExecPartialPlan* UGoal_ExecPartialPlan::GetNextSubGoal (  )
{
	static UFunction* pGetNextSubGoal = 0;
	UGoal_ExecPartialPlan_execGetNextSubGoal_Parms parms;

	if ( !pGetNextSubGoal )
		pGetNextSubGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPartialPlan.GetNextSubGoal" );

	this->ProcessEvent ( pGetNextSubGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UGoal_ExecPartialPlan::GetProgress ( float Min, float Size )
{
	static UFunction* pGetProgress = 0;
	UGoal_ExecPartialPlan_execGetProgress_Parms parms;

	if ( !pGetProgress )
		pGetProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPartialPlan.GetProgress" );

	parms.Min = Min;
	parms.Size = Size;
	this->ProcessEvent ( pGetProgress, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_ExecPartialPlan::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_ExecPartialPlan_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPartialPlan.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_ExecPartialPlan::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_ExecPartialPlan_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPartialPlan.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_ExecPartialPlan* UGoal_ExecPartialPlan::Init ( class AwAIBotBase* inOwner, class UwActionContainer* inPartialPlan )
{
	static UFunction* pInit = 0;
	UGoal_ExecPartialPlan_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_ExecPartialPlan.Init" );

	parms.inOwner = inOwner;
	parms.inPartialPlan = inPartialPlan;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_Melee::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_Melee_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Melee.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UGoal_Melee::SetFocusValue (  )
{
	static UFunction* pSetFocusValue = 0;
	UGoal_Melee_execSetFocusValue_Parms parms;

	if ( !pSetFocusValue )
		pSetFocusValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Melee.SetFocusValue" );

	this->ProcessEvent ( pSetFocusValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_Melee::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_Melee_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Melee.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Melee::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_Melee_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Melee.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_Melee::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UGoal_Melee_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Melee.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*void UGoal_Melee::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_Melee_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Melee.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_Melee* UGoal_Melee::Init ( class AwAIBotBase* inOwner, class AActor* inTarget )
{
	static UFunction* pInit = 0;
	UGoal_Melee_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Melee.Init" );

	parms.inOwner = inOwner;
	parms.inTarget = inTarget;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_Throw::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_Throw_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Throw.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Throw::End (  )
{
	static UFunction* pEnd = 0;
	UGoal_Throw_execEnd_Parms parms;

	if ( !pEnd )
		pEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Throw.End" );

	this->ProcessEvent ( pEnd, &parms, NULL );

}*/

/*bool UGoal_Throw::SetFocusValue (  )
{
	static UFunction* pSetFocusValue = 0;
	UGoal_Throw_execSetFocusValue_Parms parms;

	if ( !pSetFocusValue )
		pSetFocusValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Throw.SetFocusValue" );

	this->ProcessEvent ( pSetFocusValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_Throw::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_Throw_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Throw.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UGoal_Throw::GetViewLocation ( struct FVector curLocation, struct FVector fallLocation, struct FVector* ViewLocation )
{
	static UFunction* pGetViewLocation = 0;
	UGoal_Throw_execGetViewLocation_Parms parms;

	if ( !pGetViewLocation )
		pGetViewLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Throw.GetViewLocation" );

	parms.curLocation = curLocation;
	parms.fallLocation = fallLocation;
	this->ProcessEvent ( pGetViewLocation, &parms, NULL );

	*ViewLocation = parms.ViewLocation;
	return parms.ReturnValue;
}*/

/*bool UGoal_Throw::CanThrowTo ( class ALevelInfo* Level, struct FVector From, struct FVector to, bool checkUp, bool checkDown, struct FVector* View )
{
	static UFunction* pCanThrowTo = 0;
	UGoal_Throw_execCanThrowTo_Parms parms;

	if ( !pCanThrowTo )
		pCanThrowTo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Throw.CanThrowTo" );

	parms.Level = Level;
	parms.From = From;
	parms.to = to;
	parms.checkUp = checkUp;
	parms.checkDown = checkDown;
	this->ProcessEvent ( pCanThrowTo, &parms, NULL );

	*View = parms.View;
	return parms.ReturnValue;
}*/

/*void UGoal_Throw::SpawnTrail ( struct FVector ViewLocation )
{
	static UFunction* pSpawnTrail = 0;
	UGoal_Throw_execSpawnTrail_Parms parms;

	if ( !pSpawnTrail )
		pSpawnTrail = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Throw.SpawnTrail" );

	parms.ViewLocation = ViewLocation;
	this->ProcessEvent ( pSpawnTrail, &parms, NULL );

}*/

/*void UGoal_Throw::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_Throw_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Throw.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_Throw::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UGoal_Throw_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Throw.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*void UGoal_Throw::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_Throw_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Throw.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_Throw* UGoal_Throw::Init ( class AwAIBotBase* inOwner, class AActor* inTarget )
{
	static UFunction* pInit = 0;
	UGoal_Throw_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Throw.Init" );

	parms.inOwner = inOwner;
	parms.inTarget = inTarget;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_SwitchAndThrow::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_SwitchAndThrow_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndThrow.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_SwitchAndThrow::End (  )
{
	static UFunction* pEnd = 0;
	UGoal_SwitchAndThrow_execEnd_Parms parms;

	if ( !pEnd )
		pEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndThrow.End" );

	this->ProcessEvent ( pEnd, &parms, NULL );

}*/

/*unsigned char UGoal_SwitchAndThrow::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_SwitchAndThrow_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndThrow.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_SwitchAndThrow::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_SwitchAndThrow_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndThrow.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_SwitchAndThrow::NotifyDestroyed ( class AActor* A )
{
	static UFunction* pNotifyDestroyed = 0;
	UGoal_SwitchAndThrow_execNotifyDestroyed_Parms parms;

	if ( !pNotifyDestroyed )
		pNotifyDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndThrow.NotifyDestroyed" );

	parms.A = A;
	this->ProcessEvent ( pNotifyDestroyed, &parms, NULL );

}*/

/*void UGoal_SwitchAndThrow::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_SwitchAndThrow_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndThrow.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_SwitchAndThrow* UGoal_SwitchAndThrow::Init ( class AwAIBotBase* inOwner, class AActor* inTarget, int InGroup )
{
	static UFunction* pInit = 0;
	UGoal_SwitchAndThrow_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndThrow.Init" );

	parms.inOwner = inOwner;
	parms.inTarget = inTarget;
	parms.InGroup = InGroup;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_SwitchAndFire::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_SwitchAndFire_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndFire.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_SwitchAndFire::End (  )
{
	static UFunction* pEnd = 0;
	UGoal_SwitchAndFire_execEnd_Parms parms;

	if ( !pEnd )
		pEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndFire.End" );

	this->ProcessEvent ( pEnd, &parms, NULL );

}*/

/*unsigned char UGoal_SwitchAndFire::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_SwitchAndFire_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndFire.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_SwitchAndFire::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_SwitchAndFire_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndFire.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_SwitchAndFire::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_SwitchAndFire_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndFire.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_SwitchAndFire* UGoal_SwitchAndFire::Init ( class AwAIBotBase* inOwner, int InGroup, class AActor* inTarget )
{
	static UFunction* pInit = 0;
	UGoal_SwitchAndFire_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_SwitchAndFire.Init" );

	parms.inOwner = inOwner;
	parms.InGroup = InGroup;
	parms.inTarget = inTarget;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_Look::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_Look_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Look.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Look::End (  )
{
	static UFunction* pEnd = 0;
	UGoal_Look_execEnd_Parms parms;

	if ( !pEnd )
		pEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Look.End" );

	this->ProcessEvent ( pEnd, &parms, NULL );

}*/

/*bool UGoal_Look::SetFocusValue (  )
{
	static UFunction* pSetFocusValue = 0;
	UGoal_Look_execSetFocusValue_Parms parms;

	if ( !pSetFocusValue )
		pSetFocusValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Look.SetFocusValue" );

	this->ProcessEvent ( pSetFocusValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_Look::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_Look_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Look.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_Look::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_Look_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Look.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*class UGoal_Look* UGoal_Look::Init ( class AwAIBotBase* inOwner, struct FVector inLookLocation )
{
	static UFunction* pInit = 0;
	UGoal_Look_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_Look.Init" );

	parms.inOwner = inOwner;
	parms.inLookLocation = inLookLocation;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwDeathMessage::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pClientReceive = 0;
	AwDeathMessage_execClientReceive_Parms parms;

	if ( !pClientReceive )
		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wDeathMessage.ClientReceive" );

	parms.P = P;
	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pClientReceive, &parms, NULL );

}*/

/*struct FString AwDeathMessage::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pGetString = 0;
	AwDeathMessage_execGetString_Parms parms;

	if ( !pGetString )
		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wDeathMessage.GetString" );

	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pGetString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class FColor AwDeathMessage::GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI_1 )
{
	static UFunction* pGetConsoleColor = 0;
	AwDeathMessage_execGetConsoleColor_Parms parms;

	if ( !pGetConsoleColor )
		pGetConsoleColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wDeathMessage.GetConsoleColor" );

	parms.RelatedPRI_1 = RelatedPRI_1;
	this->ProcessEvent ( pGetConsoleColor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwWeaponPickup_Location::Reset (  )
{
	static UFunction* pReset = 0;
	AwWeaponPickup_Location_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponPickup_Location.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AwWeaponPickup_Location::PickWeapon ( class AActor* Other )
{
	static UFunction* pPickWeapon = 0;
	AwWeaponPickup_Location_execPickWeapon_Parms parms;

	if ( !pPickWeapon )
		pPickWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponPickup_Location.PickWeapon" );

	parms.Other = Other;
	this->ProcessEvent ( pPickWeapon, &parms, NULL );

}*/

/*void AwWeaponPickup_Location::eventPostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AwWeaponPickup_Location_eventPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponPickup_Location.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AwWeaponPickup_Location::eventPreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	AwWeaponPickup_Location_eventPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponPickup_Location.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*void AwWeaponPickup_M2B::eventPreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	AwWeaponPickup_M2B_eventPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponPickup_M2B.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*void AwWeaponPickup_RPG7::eventPreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	AwWeaponPickup_RPG7_eventPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wWeaponPickup_RPG7.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*void AwVehicle::UpdatePrecacheMaterials (  )
{
	static UFunction* pUpdatePrecacheMaterials = 0;
	AwVehicle_execUpdatePrecacheMaterials_Parms parms;

	if ( !pUpdatePrecacheMaterials )
		pUpdatePrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.UpdatePrecacheMaterials" );

	this->ProcessEvent ( pUpdatePrecacheMaterials, &parms, NULL );

}*/

/*void AwVehicle::StaticPrecache ( class ALevelInfo* L )
{
	static UFunction* pStaticPrecache = 0;
	AwVehicle_execStaticPrecache_Parms parms;

	if ( !pStaticPrecache )
		pStaticPrecache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.StaticPrecache" );

	parms.L = L;
	this->ProcessEvent ( pStaticPrecache, &parms, NULL );

}*/

/*class AActor* AwVehicle::PerformTrace ( struct FVector End, struct FVector Start, struct FVector* HitLocation, struct FVector* HitNormal )
{
	static UFunction* pPerformTrace = 0;
	AwVehicle_execPerformTrace_Parms parms;

	if ( !pPerformTrace )
		pPerformTrace = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.PerformTrace" );

	parms.End = End;
	parms.Start = Start;
	this->ProcessEvent ( pPerformTrace, &parms, NULL );

	*HitLocation = parms.HitLocation;
	*HitNormal = parms.HitNormal;
	return parms.ReturnValue;
}*/

/*class AActor* AwVehicle::CalcWeaponFire ( struct FVector* HitLocation, struct FVector* HitNormal )
{
	static UFunction* pCalcWeaponFire = 0;
	AwVehicle_execCalcWeaponFire_Parms parms;

	if ( !pCalcWeaponFire )
		pCalcWeaponFire = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.CalcWeaponFire" );

	parms.HitLocation = *HitLocation;
	parms.HitNormal = *HitNormal;
	this->ProcessEvent ( pCalcWeaponFire, &parms, NULL );

	*HitLocation = parms.HitLocation;
	*HitNormal = parms.HitNormal;
	return parms.ReturnValue;
}*/

/*struct FVector AwVehicle::GetBotError ( struct FVector StartLocation )
{
	static UFunction* pGetBotError = 0;
	AwVehicle_execGetBotError_Parms parms;

	if ( !pGetBotError )
		pGetBotError = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.GetBotError" );

	parms.StartLocation = StartLocation;
	this->ProcessEvent ( pGetBotError, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FVector AwVehicle::GetFireStart ( float XOffset )
{
	static UFunction* pGetFireStart = 0;
	AwVehicle_execGetFireStart_Parms parms;

	if ( !pGetFireStart )
		pGetFireStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.GetFireStart" );

	parms.XOffset = XOffset;
	this->ProcessEvent ( pGetFireStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FVector AwVehicle::GetCrosshairWorldLocation (  )
{
	static UFunction* pGetCrosshairWorldLocation = 0;
	AwVehicle_execGetCrosshairWorldLocation_Parms parms;

	if ( !pGetCrosshairWorldLocation )
		pGetCrosshairWorldLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.GetCrosshairWorldLocation" );

	this->ProcessEvent ( pGetCrosshairWorldLocation, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwVehicle::eventNotifyEnemyLockedOn (  )
{
	static UFunction* pNotifyEnemyLockedOn = 0;
	AwVehicle_eventNotifyEnemyLockedOn_Parms parms;

	if ( !pNotifyEnemyLockedOn )
		pNotifyEnemyLockedOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.NotifyEnemyLockedOn" );

	this->ProcessEvent ( pNotifyEnemyLockedOn, &parms, NULL );

}*/

/*void AwVehicle::DrawCrosshairAlignment ( class UCanvas* C, struct FVector ScreenPos )
{
	static UFunction* pDrawCrosshairAlignment = 0;
	AwVehicle_execDrawCrosshairAlignment_Parms parms;

	if ( !pDrawCrosshairAlignment )
		pDrawCrosshairAlignment = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.DrawCrosshairAlignment" );

	parms.C = C;
	parms.ScreenPos = ScreenPos;
	this->ProcessEvent ( pDrawCrosshairAlignment, &parms, NULL );

}*/

/*bool AwVehicle::WeaponHitsCrosshairsHL (  )
{
	static UFunction* pWeaponHitsCrosshairsHL = 0;
	AwVehicle_execWeaponHitsCrosshairsHL_Parms parms;

	if ( !pWeaponHitsCrosshairsHL )
		pWeaponHitsCrosshairsHL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.WeaponHitsCrosshairsHL" );

	this->ProcessEvent ( pWeaponHitsCrosshairsHL, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwVehicle::DrawCrosshair ( class UCanvas* C, struct FVector* ScreenPos )
{
	static UFunction* pDrawCrosshair = 0;
	AwVehicle_execDrawCrosshair_Parms parms;

	if ( !pDrawCrosshair )
		pDrawCrosshair = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.DrawCrosshair" );

	parms.C = C;
	this->ProcessEvent ( pDrawCrosshair, &parms, NULL );

	*ScreenPos = parms.ScreenPos;
	return parms.ReturnValue;
}*/

/*void AwVehicle::DrawHealthInfo ( class UCanvas* C, class APlayerController* PC )
{
	static UFunction* pDrawHealthInfo = 0;
	AwVehicle_execDrawHealthInfo_Parms parms;

	if ( !pDrawHealthInfo )
		pDrawHealthInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.DrawHealthInfo" );

	parms.C = C;
	parms.PC = PC;
	this->ProcessEvent ( pDrawHealthInfo, &parms, NULL );

}*/

/*void AwVehicle::DrawWeaponInfo ( class UCanvas* C, class AHUD* H )
{
	static UFunction* pDrawWeaponInfo = 0;
	AwVehicle_execDrawWeaponInfo_Parms parms;

	if ( !pDrawWeaponInfo )
		pDrawWeaponInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.DrawWeaponInfo" );

	parms.C = C;
	parms.H = H;
	this->ProcessEvent ( pDrawWeaponInfo, &parms, NULL );

}*/

/*void AwVehicle::DrawVehicleHUD ( class UCanvas* C, class APlayerController* PC )
{
	static UFunction* pDrawVehicleHUD = 0;
	AwVehicle_execDrawVehicleHUD_Parms parms;

	if ( !pDrawVehicleHUD )
		pDrawVehicleHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.DrawVehicleHUD" );

	parms.C = C;
	parms.PC = PC;
	this->ProcessEvent ( pDrawVehicleHUD, &parms, NULL );

}*/

/*void AwVehicle::SpecialDrawCrosshair ( class UCanvas* C )
{
	static UFunction* pSpecialDrawCrosshair = 0;
	AwVehicle_execSpecialDrawCrosshair_Parms parms;

	if ( !pSpecialDrawCrosshair )
		pSpecialDrawCrosshair = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.SpecialDrawCrosshair" );

	parms.C = C;
	this->ProcessEvent ( pSpecialDrawCrosshair, &parms, NULL );

}*/

/*void AwVehicle::DrawHUD ( class UCanvas* C )
{
	static UFunction* pDrawHUD = 0;
	AwVehicle_execDrawHUD_Parms parms;

	if ( !pDrawHUD )
		pDrawHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.DrawHUD" );

	parms.C = C;
	this->ProcessEvent ( pDrawHUD, &parms, NULL );

}*/

/*struct FName AwVehicle::GetWeaponBoneFor ( class AInventory* i )
{
	static UFunction* pGetWeaponBoneFor = 0;
	AwVehicle_execGetWeaponBoneFor_Parms parms;

	if ( !pGetWeaponBoneFor )
		pGetWeaponBoneFor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.GetWeaponBoneFor" );

	parms.i = i;
	this->ProcessEvent ( pGetWeaponBoneFor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwVehicle::eventPlayDying ( class UClass* DamageType, struct FVector HitLoc, int CollisionPart )
{
	static UFunction* pPlayDying = 0;
	AwVehicle_eventPlayDying_Parms parms;

	if ( !pPlayDying )
		pPlayDying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.PlayDying" );

	parms.DamageType = DamageType;
	parms.HitLoc = HitLoc;
	parms.CollisionPart = CollisionPart;
	this->ProcessEvent ( pPlayDying, &parms, NULL );

}*/

/*float AwVehicle::CalcInertia ( float DeltaTime, float FrictionFactor, float OldValue, float NewValue )
{
	static UFunction* pCalcInertia = 0;
	AwVehicle_execCalcInertia_Parms parms;

	if ( !pCalcInertia )
		pCalcInertia = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.CalcInertia" );

	parms.DeltaTime = DeltaTime;
	parms.FrictionFactor = FrictionFactor;
	parms.OldValue = OldValue;
	parms.NewValue = NewValue;
	this->ProcessEvent ( pCalcInertia, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwVehicle::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pExplode = 0;
	AwVehicle_execExplode_Parms parms;

	if ( !pExplode )
		pExplode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.Explode" );

	parms.HitLocation = HitLocation;
	parms.HitNormal = HitNormal;
	this->ProcessEvent ( pExplode, &parms, NULL );

}*/

/*void AwVehicle::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
{
	static UFunction* pTakeDamage = 0;
	AwVehicle_execTakeDamage_Parms parms;

	if ( !pTakeDamage )
		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.TakeDamage" );

	parms.Damage = Damage;
	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.Momentum = Momentum;
	parms.DamageType = DamageType;
	parms.CollisionPart = CollisionPart;
	parms.WeaponType = WeaponType;
	parms.bWallShot = bWallShot;
	this->ProcessEvent ( pTakeDamage, &parms, NULL );

}*/

/*bool AwVehicle::StopWeaponFiring (  )
{
	static UFunction* pStopWeaponFiring = 0;
	AwVehicle_execStopWeaponFiring_Parms parms;

	if ( !pStopWeaponFiring )
		pStopWeaponFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.StopWeaponFiring" );

	this->ProcessEvent ( pStopWeaponFiring, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwVehicle::ClientKDriverLeave ( class APlayerController* PC )
{
	static UFunction* pClientKDriverLeave = 0;
	AwVehicle_execClientKDriverLeave_Parms parms;

	if ( !pClientKDriverLeave )
		pClientKDriverLeave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.ClientKDriverLeave" );

	parms.PC = PC;
	this->ProcessEvent ( pClientKDriverLeave, &parms, NULL );

}*/

/*void AwVehicle::ClientKDriverEnter ( class APlayerController* PC )
{
	static UFunction* pClientKDriverEnter = 0;
	AwVehicle_execClientKDriverEnter_Parms parms;

	if ( !pClientKDriverEnter )
		pClientKDriverEnter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.ClientKDriverEnter" );

	parms.PC = PC;
	this->ProcessEvent ( pClientKDriverEnter, &parms, NULL );

}*/

/*bool AwVehicle::eventKDriverLeave ( bool bForceLeave )
{
	static UFunction* pKDriverLeave = 0;
	AwVehicle_eventKDriverLeave_Parms parms;

	if ( !pKDriverLeave )
		pKDriverLeave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.KDriverLeave" );

	parms.bForceLeave = bForceLeave;
	this->ProcessEvent ( pKDriverLeave, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwVehicle::UnPossessed (  )
{
	static UFunction* pUnPossessed = 0;
	AwVehicle_execUnPossessed_Parms parms;

	if ( !pUnPossessed )
		pUnPossessed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.UnPossessed" );

	this->ProcessEvent ( pUnPossessed, &parms, NULL );

}*/

/*void AwVehicle::PossessedBy ( class AController* C )
{
	static UFunction* pPossessedBy = 0;
	AwVehicle_execPossessedBy_Parms parms;

	if ( !pPossessedBy )
		pPossessedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.PossessedBy" );

	parms.C = C;
	this->ProcessEvent ( pPossessedBy, &parms, NULL );

}*/

/*void AwVehicle::AddDefaultInventory (  )
{
	static UFunction* pAddDefaultInventory = 0;
	AwVehicle_execAddDefaultInventory_Parms parms;

	if ( !pAddDefaultInventory )
		pAddDefaultInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.AddDefaultInventory" );

	this->ProcessEvent ( pAddDefaultInventory, &parms, NULL );

}*/

/*void AwVehicle::eventDestroyed (  )
{
	static UFunction* pDestroyed = 0;
	AwVehicle_eventDestroyed_Parms parms;

	if ( !pDestroyed )
		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.Destroyed" );

	this->ProcessEvent ( pDestroyed, &parms, NULL );

}*/

/*void AwVehicle::eventPostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwVehicle_eventPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwVehicle::Tick ( float DeltaTime )
{
	static UFunction* pTick = 0;
	AwVehicle_execTick_Parms parms;

	if ( !pTick )
		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.Tick" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pTick, &parms, NULL );

}*/

/*void AwVehicle::ClientDying ( class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pClientDying = 0;
	AwVehicle_execClientDying_Parms parms;

	if ( !pClientDying )
		pClientDying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.ClientDying" );

	parms.DamageType = DamageType;
	parms.HitLocation = HitLocation;
	this->ProcessEvent ( pClientDying, &parms, NULL );

}*/

/*void AwVehicle::PlayHit ( float Damage, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, int CollisionPart )
{
	static UFunction* pPlayHit = 0;
	AwVehicle_execPlayHit_Parms parms;

	if ( !pPlayHit )
		pPlayHit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wVehicle.PlayHit" );

	parms.Damage = Damage;
	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.DamageType = DamageType;
	parms.Momentum = Momentum;
	parms.CollisionPart = CollisionPart;
	this->ProcessEvent ( pPlayHit, &parms, NULL );

}*/

/*void AwTurret::MakeFireNoise (  )
{
	static UFunction* pMakeFireNoise = 0;
	AwTurret_execMakeFireNoise_Parms parms;

	if ( !pMakeFireNoise )
		pMakeFireNoise = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.MakeFireNoise" );

	this->ProcessEvent ( pMakeFireNoise, &parms, NULL );

}*/

/*void AwTurret::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
{
	static UFunction* pTakeDamage = 0;
	AwTurret_execTakeDamage_Parms parms;

	if ( !pTakeDamage )
		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.TakeDamage" );

	parms.Damage = Damage;
	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.Momentum = Momentum;
	parms.DamageType = DamageType;
	parms.CollisionPart = CollisionPart;
	parms.WeaponType = WeaponType;
	parms.bWallShot = bWallShot;
	this->ProcessEvent ( pTakeDamage, &parms, NULL );

}*/

/*void AwTurret::InitBaseRotation (  )
{
	static UFunction* pInitBaseRotation = 0;
	AwTurret_execInitBaseRotation_Parms parms;

	if ( !pInitBaseRotation )
		pInitBaseRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.InitBaseRotation" );

	this->ProcessEvent ( pInitBaseRotation, &parms, NULL );

}*/

/*bool AwTurret::PlaceExitingDriver (  )
{
	static UFunction* pPlaceExitingDriver = 0;
	AwTurret_execPlaceExitingDriver_Parms parms;

	if ( !pPlaceExitingDriver )
		pPlaceExitingDriver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.PlaceExitingDriver" );

	this->ProcessEvent ( pPlaceExitingDriver, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwTurret::PointOfView (  )
{
	static UFunction* pPointOfView = 0;
	AwTurret_execPointOfView_Parms parms;

	if ( !pPointOfView )
		pPointOfView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.PointOfView" );

	this->ProcessEvent ( pPointOfView, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwTurret::UpdatePrecacheMaterials (  )
{
	static UFunction* pUpdatePrecacheMaterials = 0;
	AwTurret_execUpdatePrecacheMaterials_Parms parms;

	if ( !pUpdatePrecacheMaterials )
		pUpdatePrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.UpdatePrecacheMaterials" );

	this->ProcessEvent ( pUpdatePrecacheMaterials, &parms, NULL );

}*/

/*void AwTurret::StaticPrecache ( class ALevelInfo* L )
{
	static UFunction* pStaticPrecache = 0;
	AwTurret_execStaticPrecache_Parms parms;

	if ( !pStaticPrecache )
		pStaticPrecache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.StaticPrecache" );

	parms.L = L;
	this->ProcessEvent ( pStaticPrecache, &parms, NULL );

}*/

/*bool AwTurret::eventKDriverLeave ( bool bForceLeave )
{
	static UFunction* pKDriverLeave = 0;
	AwTurret_eventKDriverLeave_Parms parms;

	if ( !pKDriverLeave )
		pKDriverLeave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.KDriverLeave" );

	parms.bForceLeave = bForceLeave;
	this->ProcessEvent ( pKDriverLeave, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwTurret::KDriverEnter ( class APawn* P )
{
	static UFunction* pKDriverEnter = 0;
	AwTurret_execKDriverEnter_Parms parms;

	if ( !pKDriverEnter )
		pKDriverEnter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.KDriverEnter" );

	parms.P = P;
	this->ProcessEvent ( pKDriverEnter, &parms, NULL );

}*/

/*void AwTurret::ClientKDriverEnter ( class APlayerController* PC )
{
	static UFunction* pClientKDriverEnter = 0;
	AwTurret_execClientKDriverEnter_Parms parms;

	if ( !pClientKDriverEnter )
		pClientKDriverEnter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.ClientKDriverEnter" );

	parms.PC = PC;
	this->ProcessEvent ( pClientKDriverEnter, &parms, NULL );

}*/

/*void AwTurret::AttachDriver ( class APawn* P )
{
	static UFunction* pAttachDriver = 0;
	AwTurret_execAttachDriver_Parms parms;

	if ( !pAttachDriver )
		pAttachDriver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.AttachDriver" );

	parms.P = P;
	this->ProcessEvent ( pAttachDriver, &parms, NULL );

}*/

/*void AwTurret::PostZoomAdjust ( float ZoomPct )
{
	static UFunction* pPostZoomAdjust = 0;
	AwTurret_execPostZoomAdjust_Parms parms;

	if ( !pPostZoomAdjust )
		pPostZoomAdjust = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.PostZoomAdjust" );

	parms.ZoomPct = ZoomPct;
	this->ProcessEvent ( pPostZoomAdjust, &parms, NULL );

}*/

/*bool AwTurret::DrawCrosshair ( class UCanvas* C, struct FVector* ScreenPos )
{
	static UFunction* pDrawCrosshair = 0;
	AwTurret_execDrawCrosshair_Parms parms;

	if ( !pDrawCrosshair )
		pDrawCrosshair = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.DrawCrosshair" );

	parms.C = C;
	this->ProcessEvent ( pDrawCrosshair, &parms, NULL );

	*ScreenPos = parms.ScreenPos;
	return parms.ReturnValue;
}*/

/*class AActor* AwTurret::PerformTrace ( struct FVector End, struct FVector Start, struct FVector* HitLocation, struct FVector* HitNormal )
{
	static UFunction* pPerformTrace = 0;
	AwTurret_execPerformTrace_Parms parms;

	if ( !pPerformTrace )
		pPerformTrace = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.PerformTrace" );

	parms.End = End;
	parms.Start = Start;
	this->ProcessEvent ( pPerformTrace, &parms, NULL );

	*HitLocation = parms.HitLocation;
	*HitNormal = parms.HitNormal;
	return parms.ReturnValue;
}*/

/*void AwTurret::DrawHealthInfo ( class UCanvas* C, class APlayerController* PC )
{
	static UFunction* pDrawHealthInfo = 0;
	AwTurret_execDrawHealthInfo_Parms parms;

	if ( !pDrawHealthInfo )
		pDrawHealthInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.DrawHealthInfo" );

	parms.C = C;
	parms.PC = PC;
	this->ProcessEvent ( pDrawHealthInfo, &parms, NULL );

}*/

/*void AwTurret::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pExplode = 0;
	AwTurret_execExplode_Parms parms;

	if ( !pExplode )
		pExplode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.Explode" );

	parms.HitLocation = HitLocation;
	parms.HitNormal = HitNormal;
	this->ProcessEvent ( pExplode, &parms, NULL );

}*/

/*void AwTurret::PlayFiring ( float Rate, struct FName FiringMode )
{
	static UFunction* pPlayFiring = 0;
	AwTurret_execPlayFiring_Parms parms;

	if ( !pPlayFiring )
		pPlayFiring = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.PlayFiring" );

	parms.Rate = Rate;
	parms.FiringMode = FiringMode;
	this->ProcessEvent ( pPlayFiring, &parms, NULL );

}*/

/*struct FRotator AwTurret::GetViewRotation (  )
{
	static UFunction* pGetViewRotation = 0;
	AwTurret_execGetViewRotation_Parms parms;

	if ( !pGetViewRotation )
		pGetViewRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.GetViewRotation" );

	this->ProcessEvent ( pGetViewRotation, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwTurret::SpecialCalcFirstPersonView ( class APlayerController* PC, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation )
{
	static UFunction* pSpecialCalcFirstPersonView = 0;
	AwTurret_execSpecialCalcFirstPersonView_Parms parms;

	if ( !pSpecialCalcFirstPersonView )
		pSpecialCalcFirstPersonView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.SpecialCalcFirstPersonView" );

	parms.PC = PC;
	this->ProcessEvent ( pSpecialCalcFirstPersonView, &parms, NULL );

	*ViewActor = parms.ViewActor;
	*CameraLocation = parms.CameraLocation;
	*CameraRotation = parms.CameraRotation;
}*/

/*bool AwTurret::SpecialCalcView ( class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation )
{
	static UFunction* pSpecialCalcView = 0;
	AwTurret_execSpecialCalcView_Parms parms;

	if ( !pSpecialCalcView )
		pSpecialCalcView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.SpecialCalcView" );

	parms.ViewActor = *ViewActor;
	parms.CameraLocation = *CameraLocation;
	parms.CameraRotation = *CameraRotation;
	this->ProcessEvent ( pSpecialCalcView, &parms, NULL );

	*ViewActor = parms.ViewActor;
	*CameraLocation = parms.CameraLocation;
	*CameraRotation = parms.CameraRotation;
	return parms.ReturnValue;
}*/

/*void AwTurret::TestSetDriverFrame ( float frame, float UpDownFrame )
{
	static UFunction* pTestSetDriverFrame = 0;
	AwTurret_execTestSetDriverFrame_Parms parms;

	if ( !pTestSetDriverFrame )
		pTestSetDriverFrame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.TestSetDriverFrame" );

	parms.frame = frame;
	parms.UpDownFrame = UpDownFrame;
	this->ProcessEvent ( pTestSetDriverFrame, &parms, NULL );

}*/

/*void AwTurret::Tick ( float DeltaTime )
{
	static UFunction* pTick = 0;
	AwTurret_execTick_Parms parms;

	if ( !pTick )
		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.Tick" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pTick, &parms, NULL );

}*/

/*void AwTurret::NotifyAllControllers ( float dt )
{
	static UFunction* pNotifyAllControllers = 0;
	AwTurret_execNotifyAllControllers_Parms parms;

	if ( !pNotifyAllControllers )
		pNotifyAllControllers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.NotifyAllControllers" );

	parms.dt = dt;
	this->ProcessEvent ( pNotifyAllControllers, &parms, NULL );

}*/

/*void AwTurret::UpdateRocketAcceleration ( float DeltaTime, float YawChange, float PitchChange )
{
	static UFunction* pUpdateRocketAcceleration = 0;
	AwTurret_execUpdateRocketAcceleration_Parms parms;

	if ( !pUpdateRocketAcceleration )
		pUpdateRocketAcceleration = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.UpdateRocketAcceleration" );

	parms.DeltaTime = DeltaTime;
	parms.YawChange = YawChange;
	parms.PitchChange = PitchChange;
	this->ProcessEvent ( pUpdateRocketAcceleration, &parms, NULL );

}*/

/*void AwTurret::eventDestroyed (  )
{
	static UFunction* pDestroyed = 0;
	AwTurret_eventDestroyed_Parms parms;

	if ( !pDestroyed )
		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.Destroyed" );

	this->ProcessEvent ( pDestroyed, &parms, NULL );

}*/

/*void AwTurret::SetRotateForPlayerView ( struct FRotator PCRot )
{
	static UFunction* pSetRotateForPlayerView = 0;
	AwTurret_execSetRotateForPlayerView_Parms parms;

	if ( !pSetRotateForPlayerView )
		pSetRotateForPlayerView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.SetRotateForPlayerView" );

	parms.PCRot = PCRot;
	this->ProcessEvent ( pSetRotateForPlayerView, &parms, NULL );

}*/

/*bool AwTurret::HasAmmo (  )
{
	static UFunction* pHasAmmo = 0;
	AwTurret_execHasAmmo_Parms parms;

	if ( !pHasAmmo )
		pHasAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.HasAmmo" );

	this->ProcessEvent ( pHasAmmo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwTurret::eventPostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AwTurret_eventPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AwTurret::UnPossessed (  )
{
	static UFunction* pUnPossessed = 0;
	AwTurret_execUnPossessed_Parms parms;

	if ( !pUnPossessed )
		pUnPossessed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.UnPossessed" );

	this->ProcessEvent ( pUnPossessed, &parms, NULL );

}*/

/*void AwTurret::PossessedBy ( class AController* C )
{
	static UFunction* pPossessedBy = 0;
	AwTurret_execPossessedBy_Parms parms;

	if ( !pPossessedBy )
		pPossessedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.PossessedBy" );

	parms.C = C;
	this->ProcessEvent ( pPossessedBy, &parms, NULL );

}*/

/*void AwTurret::eventPostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwTurret_eventPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwTurret::ServerSwitchTurret ( bool bNextTurret )
{
	static UFunction* pServerSwitchTurret = 0;
	AwTurret_execServerSwitchTurret_Parms parms;

	if ( !pServerSwitchTurret )
		pServerSwitchTurret = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.ServerSwitchTurret" );

	parms.bNextTurret = bNextTurret;
	this->ProcessEvent ( pServerSwitchTurret, &parms, NULL );

}*/

/*void AwTurret::NextWeapon (  )
{
	static UFunction* pNextWeapon = 0;
	AwTurret_execNextWeapon_Parms parms;

	if ( !pNextWeapon )
		pNextWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.NextWeapon" );

	this->ProcessEvent ( pNextWeapon, &parms, NULL );

}*/

/*void AwTurret::PrevWeapon (  )
{
	static UFunction* pPrevWeapon = 0;
	AwTurret_execPrevWeapon_Parms parms;

	if ( !pPrevWeapon )
		pPrevWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.PrevWeapon" );

	this->ProcessEvent ( pPrevWeapon, &parms, NULL );

}*/

/*float AwTurret::BotDesireability ( class AActor* S, int TeamIndex, class AActor* Objective )
{
	static UFunction* pBotDesireability = 0;
	AwTurret_execBotDesireability_Parms parms;

	if ( !pBotDesireability )
		pBotDesireability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.BotDesireability" );

	parms.S = S;
	parms.TeamIndex = TeamIndex;
	parms.Objective = Objective;
	this->ProcessEvent ( pBotDesireability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwTurret::StronglyRecommended ( class AActor* S, int TeamIndex, class AActor* Objective )
{
	static UFunction* pStronglyRecommended = 0;
	AwTurret_execStronglyRecommended_Parms parms;

	if ( !pStronglyRecommended )
		pStronglyRecommended = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.StronglyRecommended" );

	parms.S = S;
	parms.TeamIndex = TeamIndex;
	parms.Objective = Objective;
	this->ProcessEvent ( pStronglyRecommended, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwTurret::RecommendLongRangedAttack (  )
{
	static UFunction* pRecommendLongRangedAttack = 0;
	AwTurret_execRecommendLongRangedAttack_Parms parms;

	if ( !pRecommendLongRangedAttack )
		pRecommendLongRangedAttack = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret.RecommendLongRangedAttack" );

	this->ProcessEvent ( pRecommendLongRangedAttack, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwTurret_FNM240::DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos )
{
	static UFunction* pDisplayDebug = 0;
	AwTurret_FNM240_execDisplayDebug_Parms parms;

	if ( !pDisplayDebug )
		pDisplayDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.DisplayDebug" );

	parms.Canvas = Canvas;
	this->ProcessEvent ( pDisplayDebug, &parms, NULL );

	*YL = parms.YL;
	*YPos = parms.YPos;
}*/

/*struct FRotator AwTurret_FNM240::GetViewRotation (  )
{
	static UFunction* pGetViewRotation = 0;
	AwTurret_FNM240_execGetViewRotation_Parms parms;

	if ( !pGetViewRotation )
		pGetViewRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.GetViewRotation" );

	this->ProcessEvent ( pGetViewRotation, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwTurret_FNM240::execTZ ( int iZ )
{
	static UFunction* pTZ = 0;
	AwTurret_FNM240_execTZ_Parms parms;

	if ( !pTZ )
		pTZ = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.TZ" );

	parms.iZ = iZ;
	this->ProcessEvent ( pTZ, &parms, NULL );

}*/

/*void AwTurret_FNM240::execty ( int iY )
{
	static UFunction* pty = 0;
	AwTurret_FNM240_execty_Parms parms;

	if ( !pty )
		pty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.ty" );

	parms.iY = iY;
	this->ProcessEvent ( pty, &parms, NULL );

}*/

/*void AwTurret_FNM240::execTX ( int iX )
{
	static UFunction* pTX = 0;
	AwTurret_FNM240_execTX_Parms parms;

	if ( !pTX )
		pTX = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.TX" );

	parms.iX = iX;
	this->ProcessEvent ( pTX, &parms, NULL );

}*/

/*void AwTurret_FNM240::exect ( int iType )
{
	static UFunction* pt = 0;
	AwTurret_FNM240_exect_Parms parms;

	if ( !pt )
		pt = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.t" );

	parms.iType = iType;
	this->ProcessEvent ( pt, &parms, NULL );

}*/

/*void AwTurret_FNM240::UpdatePrecacheMaterials (  )
{
	static UFunction* pUpdatePrecacheMaterials = 0;
	AwTurret_FNM240_execUpdatePrecacheMaterials_Parms parms;

	if ( !pUpdatePrecacheMaterials )
		pUpdatePrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.UpdatePrecacheMaterials" );

	this->ProcessEvent ( pUpdatePrecacheMaterials, &parms, NULL );

}*/

/*void AwTurret_FNM240::UpdatePrecacheStaticMeshes (  )
{
	static UFunction* pUpdatePrecacheStaticMeshes = 0;
	AwTurret_FNM240_execUpdatePrecacheStaticMeshes_Parms parms;

	if ( !pUpdatePrecacheStaticMeshes )
		pUpdatePrecacheStaticMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.UpdatePrecacheStaticMeshes" );

	this->ProcessEvent ( pUpdatePrecacheStaticMeshes, &parms, NULL );

}*/

/*void AwTurret_FNM240::StaticPrecache ( class ALevelInfo* L )
{
	static UFunction* pStaticPrecache = 0;
	AwTurret_FNM240_execStaticPrecache_Parms parms;

	if ( !pStaticPrecache )
		pStaticPrecache = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.StaticPrecache" );

	parms.L = L;
	this->ProcessEvent ( pStaticPrecache, &parms, NULL );

}*/

/*void AwTurret_FNM240::SetExitViewRotation ( class APawn* Driver )
{
	static UFunction* pSetExitViewRotation = 0;
	AwTurret_FNM240_execSetExitViewRotation_Parms parms;

	if ( !pSetExitViewRotation )
		pSetExitViewRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.SetExitViewRotation" );

	parms.Driver = Driver;
	this->ProcessEvent ( pSetExitViewRotation, &parms, NULL );

}*/

/*void AwTurret_FNM240::MakeFireNoise (  )
{
	static UFunction* pMakeFireNoise = 0;
	AwTurret_FNM240_execMakeFireNoise_Parms parms;

	if ( !pMakeFireNoise )
		pMakeFireNoise = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.MakeFireNoise" );

	this->ProcessEvent ( pMakeFireNoise, &parms, NULL );

}*/

/*void AwTurret_FNM240::ClientKDriverLeave ( class APlayerController* PC )
{
	static UFunction* pClientKDriverLeave = 0;
	AwTurret_FNM240_execClientKDriverLeave_Parms parms;

	if ( !pClientKDriverLeave )
		pClientKDriverLeave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.ClientKDriverLeave" );

	parms.PC = PC;
	this->ProcessEvent ( pClientKDriverLeave, &parms, NULL );

}*/

/*void AwTurret_FNM240::ClientKDriverEnter ( class APlayerController* PC )
{
	static UFunction* pClientKDriverEnter = 0;
	AwTurret_FNM240_execClientKDriverEnter_Parms parms;

	if ( !pClientKDriverEnter )
		pClientKDriverEnter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.ClientKDriverEnter" );

	parms.PC = PC;
	this->ProcessEvent ( pClientKDriverEnter, &parms, NULL );

}*/

/*void AwTurret_FNM240::eventPostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwTurret_FNM240_eventPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*bool AwAmmoSupplyObjective::ChargeAmmo ( class AwPawn* P )
{
	static UFunction* pChargeAmmo = 0;
	AwAmmoSupplyObjective_execChargeAmmo_Parms parms;

	if ( !pChargeAmmo )
		pChargeAmmo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAmmoSupplyObjective.ChargeAmmo" );

	parms.P = P;
	this->ProcessEvent ( pChargeAmmo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwAmmoSupplyObjective::eventTouch ( class AActor* Other )
{
	static UFunction* pTouch = 0;
	AwAmmoSupplyObjective_eventTouch_Parms parms;

	if ( !pTouch )
		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAmmoSupplyObjective.Touch" );

	parms.Other = Other;
	this->ProcessEvent ( pTouch, &parms, NULL );

}*/

/*void AwAmmoSupplyObjective::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwAmmoSupplyObjective_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAmmoSupplyObjective.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::ForceSpawnVehicle (  )
{
	static UFunction* pForceSpawnVehicle = 0;
	AwBTR_ArrangeTurret_execForceSpawnVehicle_Parms parms;

	if ( !pForceSpawnVehicle )
		pForceSpawnVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.ForceSpawnVehicle" );

	this->ProcessEvent ( pForceSpawnVehicle, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::ForceDestroyVehicle (  )
{
	static UFunction* pForceDestroyVehicle = 0;
	AwBTR_ArrangeTurret_execForceDestroyVehicle_Parms parms;

	if ( !pForceDestroyVehicle )
		pForceDestroyVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.ForceDestroyVehicle" );

	this->ProcessEvent ( pForceDestroyVehicle, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::PrecacheAnnouncer ( class AAnnouncerVoice* V, bool bRewardSounds )
{
	static UFunction* pPrecacheAnnouncer = 0;
	AwBTR_ArrangeTurret_execPrecacheAnnouncer_Parms parms;

	if ( !pPrecacheAnnouncer )
		pPrecacheAnnouncer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.PrecacheAnnouncer" );

	parms.V = V;
	parms.bRewardSounds = bRewardSounds;
	this->ProcessEvent ( pPrecacheAnnouncer, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::eventVehicleDestroyed ( class AVehicle* V )
{
	static UFunction* pVehicleDestroyed = 0;
	AwBTR_ArrangeTurret_eventVehicleDestroyed_Parms parms;

	if ( !pVehicleDestroyed )
		pVehicleDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.VehicleDestroyed" );

	parms.V = V;
	this->ProcessEvent ( pVehicleDestroyed, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::eventVehiclePossessed ( class AVehicle* V )
{
	static UFunction* pVehiclePossessed = 0;
	AwBTR_ArrangeTurret_eventVehiclePossessed_Parms parms;

	if ( !pVehiclePossessed )
		pVehiclePossessed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.VehiclePossessed" );

	parms.V = V;
	this->ProcessEvent ( pVehiclePossessed, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::Timer (  )
{
	static UFunction* pTimer = 0;
	AwBTR_ArrangeTurret_execTimer_Parms parms;

	if ( !pTimer )
		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.Timer" );

	this->ProcessEvent ( pTimer, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::Reset (  )
{
	static UFunction* pReset = 0;
	AwBTR_ArrangeTurret_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*unsigned char AwBTR_ArrangeTurret::SetVehicleTeam (  )
{
	static UFunction* pSetVehicleTeam = 0;
	AwBTR_ArrangeTurret_execSetVehicleTeam_Parms parms;

	if ( !pSetVehicleTeam )
		pSetVehicleTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.SetVehicleTeam" );

	this->ProcessEvent ( pSetVehicleTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBTR_ArrangeTurret::VehicleSpawned (  )
{
	static UFunction* pVehicleSpawned = 0;
	AwBTR_ArrangeTurret_execVehicleSpawned_Parms parms;

	if ( !pVehicleSpawned )
		pVehicleSpawned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.VehicleSpawned" );

	this->ProcessEvent ( pVehicleSpawned, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::SpawnBuildEffect (  )
{
	static UFunction* pSpawnBuildEffect = 0;
	AwBTR_ArrangeTurret_execSpawnBuildEffect_Parms parms;

	if ( !pSpawnBuildEffect )
		pSpawnBuildEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.SpawnBuildEffect" );

	this->ProcessEvent ( pSpawnBuildEffect, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::SpawnVehicle ( bool noCollisionFail )
{
	static UFunction* pSpawnVehicle = 0;
	AwBTR_ArrangeTurret_execSpawnVehicle_Parms parms;

	if ( !pSpawnVehicle )
		pSpawnVehicle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.SpawnVehicle" );

	parms.noCollisionFail = noCollisionFail;
	this->ProcessEvent ( pSpawnVehicle, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::Shutdown (  )
{
	static UFunction* pShutdown = 0;
	AwBTR_ArrangeTurret_execShutdown_Parms parms;

	if ( !pShutdown )
		pShutdown = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.Shutdown" );

	this->ProcessEvent ( pShutdown, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::SetEnabled ( bool bNewEnabled )
{
	static UFunction* pSetEnabled = 0;
	AwBTR_ArrangeTurret_execSetEnabled_Parms parms;

	if ( !pSetEnabled )
		pSetEnabled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.SetEnabled" );

	parms.bNewEnabled = bNewEnabled;
	this->ProcessEvent ( pSetEnabled, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::eventTrigger ( class AActor* Other, class APawn* EventInstigator )
{
	static UFunction* pTrigger = 0;
	AwBTR_ArrangeTurret_eventTrigger_Parms parms;

	if ( !pTrigger )
		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.Trigger" );

	parms.Other = Other;
	parms.EventInstigator = EventInstigator;
	this->ProcessEvent ( pTrigger, &parms, NULL );

}*/

/*bool AwBTR_ArrangeTurret::SelfTriggered (  )
{
	static UFunction* pSelfTriggered = 0;
	AwBTR_ArrangeTurret_execSelfTriggered_Parms parms;

	if ( !pSelfTriggered )
		pSelfTriggered = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.SelfTriggered" );

	this->ProcessEvent ( pSelfTriggered, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBTR_ArrangeTurret::UpdatePrecacheStaticMeshes (  )
{
	static UFunction* pUpdatePrecacheStaticMeshes = 0;
	AwBTR_ArrangeTurret_execUpdatePrecacheStaticMeshes_Parms parms;

	if ( !pUpdatePrecacheStaticMeshes )
		pUpdatePrecacheStaticMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.UpdatePrecacheStaticMeshes" );

	this->ProcessEvent ( pUpdatePrecacheStaticMeshes, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::UpdatePrecacheMaterials (  )
{
	static UFunction* pUpdatePrecacheMaterials = 0;
	AwBTR_ArrangeTurret_execUpdatePrecacheMaterials_Parms parms;

	if ( !pUpdatePrecacheMaterials )
		pUpdatePrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.UpdatePrecacheMaterials" );

	this->ProcessEvent ( pUpdatePrecacheMaterials, &parms, NULL );

}*/

/*void AwBTR_ArrangeTurret::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwBTR_ArrangeTurret_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_ArrangeTurret.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwBTR_Turret_FNM240::VehicleSpawned (  )
{
	static UFunction* pVehicleSpawned = 0;
	AwBTR_Turret_FNM240_execVehicleSpawned_Parms parms;

	if ( !pVehicleSpawned )
		pVehicleSpawned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wBTR_Turret_FNM240.VehicleSpawned" );

	this->ProcessEvent ( pVehicleSpawned, &parms, NULL );

}*/

/*void AwTurret_Base::UpdateOverlay (  )
{
	static UFunction* pUpdateOverlay = 0;
	AwTurret_Base_execUpdateOverlay_Parms parms;

	if ( !pUpdateOverlay )
		pUpdateOverlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_Base.UpdateOverlay" );

	this->ProcessEvent ( pUpdateOverlay, &parms, NULL );

}*/

/*void AwTurret_Base::eventTimer (  )
{
	static UFunction* pTimer = 0;
	AwTurret_Base_eventTimer_Parms parms;

	if ( !pTimer )
		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_Base.Timer" );

	this->ProcessEvent ( pTimer, &parms, NULL );

}*/

/*void AwTurret_Base::TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
{
	static UFunction* pTakeDamage = 0;
	AwTurret_Base_execTakeDamage_Parms parms;

	if ( !pTakeDamage )
		pTakeDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_Base.TakeDamage" );

	parms.Damage = Damage;
	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.Momentum = Momentum;
	parms.DamageType = DamageType;
	parms.CollisionPart = CollisionPart;
	parms.WeaponType = WeaponType;
	parms.bWallShot = bWallShot;
	this->ProcessEvent ( pTakeDamage, &parms, NULL );

}*/

/*void AwTurret_Base::UpdateSwivelRotation ( struct FRotator TurretRotation )
{
	static UFunction* pUpdateSwivelRotation = 0;
	AwTurret_Base_execUpdateSwivelRotation_Parms parms;

	if ( !pUpdateSwivelRotation )
		pUpdateSwivelRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_Base.UpdateSwivelRotation" );

	parms.TurretRotation = TurretRotation;
	this->ProcessEvent ( pUpdateSwivelRotation, &parms, NULL );

}*/

/*void AwTurret_Base::UpdateBaseRotation ( struct FRotator TurretRotation )
{
	static UFunction* pUpdateBaseRotation = 0;
	AwTurret_Base_execUpdateBaseRotation_Parms parms;

	if ( !pUpdateBaseRotation )
		pUpdateBaseRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_Base.UpdateBaseRotation" );

	parms.TurretRotation = TurretRotation;
	this->ProcessEvent ( pUpdateBaseRotation, &parms, NULL );

}*/

/*void AwTurret_Base::eventPostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwTurret_Base_eventPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_Base.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*struct FString AwKillerMessagePlus::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pGetString = 0;
	AwKillerMessagePlus_execGetString_Parms parms;

	if ( !pGetString )
		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wKillerMessagePlus.GetString" );

	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pGetString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwTurret_FNM240_Base::UpdateBaseRotation ( struct FRotator TurretRotation )
{
	static UFunction* pUpdateBaseRotation = 0;
	AwTurret_FNM240_Base_execUpdateBaseRotation_Parms parms;

	if ( !pUpdateBaseRotation )
		pUpdateBaseRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240_Base.UpdateBaseRotation" );

	parms.TurretRotation = TurretRotation;
	this->ProcessEvent ( pUpdateBaseRotation, &parms, NULL );

}*/

/*void AwTurret_FNM240_Swivel::UpdateSwivelRotation ( struct FRotator TurretRotation )
{
	static UFunction* pUpdateSwivelRotation = 0;
	AwTurret_FNM240_Swivel_execUpdateSwivelRotation_Parms parms;

	if ( !pUpdateSwivelRotation )
		pUpdateSwivelRotation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTurret_FNM240_Swivel.UpdateSwivelRotation" );

	parms.TurretRotation = TurretRotation;
	this->ProcessEvent ( pUpdateSwivelRotation, &parms, NULL );

}*/

/*void UPrecacheGameClient::PrecacheGameSkeletalMeshes ( class ALevelInfo* myLevel )
{
	static UFunction* pPrecacheGameSkeletalMeshes = 0;
	UPrecacheGameClient_execPrecacheGameSkeletalMeshes_Parms parms;

	if ( !pPrecacheGameSkeletalMeshes )
		pPrecacheGameSkeletalMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.PrecacheGameClient.PrecacheGameSkeletalMeshes" );

	parms.myLevel = myLevel;
	this->ProcessEvent ( pPrecacheGameSkeletalMeshes, &parms, NULL );

}*/

/*void UPrecacheGameClient::PrecacheGameStaticMeshes ( class ALevelInfo* myLevel )
{
	static UFunction* pPrecacheGameStaticMeshes = 0;
	UPrecacheGameClient_execPrecacheGameStaticMeshes_Parms parms;

	if ( !pPrecacheGameStaticMeshes )
		pPrecacheGameStaticMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.PrecacheGameClient.PrecacheGameStaticMeshes" );

	parms.myLevel = myLevel;
	this->ProcessEvent ( pPrecacheGameStaticMeshes, &parms, NULL );

}*/

/*void UPrecacheGameClient::PrecacheGameTextures ( class ALevelInfo* myLevel )
{
	static UFunction* pPrecacheGameTextures = 0;
	UPrecacheGameClient_execPrecacheGameTextures_Parms parms;

	if ( !pPrecacheGameTextures )
		pPrecacheGameTextures = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.PrecacheGameClient.PrecacheGameTextures" );

	parms.myLevel = myLevel;
	this->ProcessEvent ( pPrecacheGameTextures, &parms, NULL );

}*/

/*class ANavigationPoint* AwTeamGame::FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName )
{
	static UFunction* pFindPlayerStart = 0;
	AwTeamGame_execFindPlayerStart_Parms parms;

	if ( !pFindPlayerStart )
		pFindPlayerStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamGame.FindPlayerStart" );

	parms.Player = Player;
	parms.inTeam = inTeam;
	parms.incomingName = incomingName;
	this->ProcessEvent ( pFindPlayerStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwTeamGame::GetGameSpecificPurposes ( class AController* Owner, class TArray< class UObject* >* purposes )
{
	static UFunction* pGetGameSpecificPurposes = 0;
	AwTeamGame_execGetGameSpecificPurposes_Parms parms;

	if ( !pGetGameSpecificPurposes )
		pGetGameSpecificPurposes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamGame.GetGameSpecificPurposes" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGameSpecificPurposes, &parms, NULL );

	*purposes = parms.purposes;
}*/

/*void AwTeamGame::EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pEndGame = 0;
	AwTeamGame_execEndGame_Parms parms;

	if ( !pEndGame )
		pEndGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamGame.EndGame" );

	parms.Winner = Winner;
	parms.Reason = Reason;
	this->ProcessEvent ( pEndGame, &parms, NULL );

}*/

/*void AwTeamGame::execstatai (  )
{
	static UFunction* pstatai = 0;
	AwTeamGame_execstatai_Parms parms;

	if ( !pstatai )
		pstatai = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamGame.statai" );

	this->ProcessEvent ( pstatai, &parms, NULL );

}*/

/*void AwTeamGame::eventSetOldTeamInfo ( class AGameReplicationInfo* OldGRI )
{
	static UFunction* pSetOldTeamInfo = 0;
	AwTeamGame_eventSetOldTeamInfo_Parms parms;

	if ( !pSetOldTeamInfo )
		pSetOldTeamInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamGame.SetOldTeamInfo" );

	parms.OldGRI = OldGRI;
	this->ProcessEvent ( pSetOldTeamInfo, &parms, NULL );

}*/

/*int AwTeamGame::GetBootySeedValue (  )
{
	static UFunction* pGetBootySeedValue = 0;
	AwTeamGame_execGetBootySeedValue_Parms parms;

	if ( !pGetBootySeedValue )
		pGetBootySeedValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamGame.GetBootySeedValue" );

	this->ProcessEvent ( pGetBootySeedValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwTeamGame::StartMatch (  )
{
	static UFunction* pStartMatch = 0;
	AwTeamGame_execStartMatch_Parms parms;

	if ( !pStartMatch )
		pStartMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamGame.StartMatch" );

	this->ProcessEvent ( pStartMatch, &parms, NULL );

}*/

/*void AwTeamGame::CalcResultPoints (  )
{
	static UFunction* pCalcResultPoints = 0;
	AwTeamGame_execCalcResultPoints_Parms parms;

	if ( !pCalcResultPoints )
		pCalcResultPoints = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamGame.CalcResultPoints" );

	this->ProcessEvent ( pCalcResultPoints, &parms, NULL );

}*/

/*void AwTeamGame::eventInitGame ( struct FString Options, struct FString* Error )
{
	static UFunction* pInitGame = 0;
	AwTeamGame_eventInitGame_Parms parms;

	if ( !pInitGame )
		pInitGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamGame.InitGame" );

	parms.Options = Options;
	this->ProcessEvent ( pInitGame, &parms, NULL );

	*Error = parms.Error;
}*/

/*void AwTeamGame::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pPostLogin = 0;
	AwTeamGame_eventPostLogin_Parms parms;

	if ( !pPostLogin )
		pPostLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamGame.PostLogin" );

	parms.NewPlayer = NewPlayer;
	this->ProcessEvent ( pPostLogin, &parms, NULL );

}*/

/*void AwTeamGame::PrecacheGameSkeletalMeshes ( class ALevelInfo* myLevel )
{
	static UFunction* pPrecacheGameSkeletalMeshes = 0;
	AwTeamGame_execPrecacheGameSkeletalMeshes_Parms parms;

	if ( !pPrecacheGameSkeletalMeshes )
		pPrecacheGameSkeletalMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamGame.PrecacheGameSkeletalMeshes" );

	parms.myLevel = myLevel;
	this->ProcessEvent ( pPrecacheGameSkeletalMeshes, &parms, NULL );

}*/

/*void AwTeamGame::PrecacheGameStaticMeshes ( class ALevelInfo* myLevel )
{
	static UFunction* pPrecacheGameStaticMeshes = 0;
	AwTeamGame_execPrecacheGameStaticMeshes_Parms parms;

	if ( !pPrecacheGameStaticMeshes )
		pPrecacheGameStaticMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamGame.PrecacheGameStaticMeshes" );

	parms.myLevel = myLevel;
	this->ProcessEvent ( pPrecacheGameStaticMeshes, &parms, NULL );

}*/

/*void AwTeamGame::PrecacheGameTextures ( class ALevelInfo* myLevel )
{
	static UFunction* pPrecacheGameTextures = 0;
	AwTeamGame_execPrecacheGameTextures_Parms parms;

	if ( !pPrecacheGameTextures )
		pPrecacheGameTextures = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamGame.PrecacheGameTextures" );

	parms.myLevel = myLevel;
	this->ProcessEvent ( pPrecacheGameTextures, &parms, NULL );

}*/

/*float UwPurposeAttackTarget::GetActivationScore (  )
{
	static UFunction* pGetActivationScore = 0;
	UwPurposeAttackTarget_execGetActivationScore_Parms parms;

	if ( !pGetActivationScore )
		pGetActivationScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPurposeAttackTarget.GetActivationScore" );

	this->ProcessEvent ( pGetActivationScore, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UwPurposeAttackTarget::Evaluate ( class UwState** S )
{
	static UFunction* pEvaluate = 0;
	UwPurposeAttackTarget_execEvaluate_Parms parms;

	if ( !pEvaluate )
		pEvaluate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPurposeAttackTarget.Evaluate" );

	parms.S = *S;
	this->ProcessEvent ( pEvaluate, &parms, NULL );

	*S = parms.S;
	return parms.ReturnValue;
}*/

/*float UwPurposeAttackTargetDOM::GetActivationScore (  )
{
	static UFunction* pGetActivationScore = 0;
	UwPurposeAttackTargetDOM_execGetActivationScore_Parms parms;

	if ( !pGetActivationScore )
		pGetActivationScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPurposeAttackTargetDOM.GetActivationScore" );

	this->ProcessEvent ( pGetActivationScore, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UwPurposeCaptureFlag::GetActivationScore (  )
{
	static UFunction* pGetActivationScore = 0;
	UwPurposeCaptureFlag_execGetActivationScore_Parms parms;

	if ( !pGetActivationScore )
		pGetActivationScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPurposeCaptureFlag.GetActivationScore" );

	this->ProcessEvent ( pGetActivationScore, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float UwPurposeCaptureFlag::Evaluate ( class UwState** S )
{
	static UFunction* pEvaluate = 0;
	UwPurposeCaptureFlag_execEvaluate_Parms parms;

	if ( !pEvaluate )
		pEvaluate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wPurposeCaptureFlag.Evaluate" );

	parms.S = *S;
	this->ProcessEvent ( pEvaluate, &parms, NULL );

	*S = parms.S;
	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_GotoFlag::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_GotoFlag_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_GotoFlag.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_GotoFlag::WriteFutureState ( class UwFutureState** fs )
{
	static UFunction* pWriteFutureState = 0;
	UwAction_GotoFlag_execWriteFutureState_Parms parms;

	if ( !pWriteFutureState )
		pWriteFutureState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_GotoFlag.WriteFutureState" );

	parms.fs = *fs;
	this->ProcessEvent ( pWriteFutureState, &parms, NULL );

	*fs = parms.fs;
}*/

/*void UwAction_GotoFlag::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_GotoFlag_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_GotoFlag.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_GotoFlag::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_GotoFlag_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_GotoFlag.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_GotoFlag::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_GotoFlag_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_GotoFlag.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_GotoFlag::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_GotoFlag_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_GotoFlag.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_GotoFlag::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UwAction_GotoFlag_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_GotoFlag.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UwAction_GotoFlag* UwAction_GotoFlag::Init ( class AwFlagObjectiveBase* inFlag )
{
	static UFunction* pInit = 0;
	UwAction_GotoFlag_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_GotoFlag.Init" );

	parms.inFlag = inFlag;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UGoal* UwAction_CaptureFlag::GetGoal ( class AwAIBotBase* Owner )
{
	static UFunction* pGetGoal = 0;
	UwAction_CaptureFlag_execGetGoal_Parms parms;

	if ( !pGetGoal )
		pGetGoal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_CaptureFlag.GetGoal" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGoal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_CaptureFlag::WriteFutureState ( class UwFutureState** fs )
{
	static UFunction* pWriteFutureState = 0;
	UwAction_CaptureFlag_execWriteFutureState_Parms parms;

	if ( !pWriteFutureState )
		pWriteFutureState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_CaptureFlag.WriteFutureState" );

	parms.fs = *fs;
	this->ProcessEvent ( pWriteFutureState, &parms, NULL );

	*fs = parms.fs;
}*/

/*void UwAction_CaptureFlag::Sim_PostEffect ( class UwState* ws )
{
	static UFunction* pSim_PostEffect = 0;
	UwAction_CaptureFlag_execSim_PostEffect_Parms parms;

	if ( !pSim_PostEffect )
		pSim_PostEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_CaptureFlag.Sim_PostEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PostEffect, &parms, NULL );

}*/

/*void UwAction_CaptureFlag::Sim_PreEffect ( class UwState* ws )
{
	static UFunction* pSim_PreEffect = 0;
	UwAction_CaptureFlag_execSim_PreEffect_Parms parms;

	if ( !pSim_PreEffect )
		pSim_PreEffect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_CaptureFlag.Sim_PreEffect" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_PreEffect, &parms, NULL );

}*/

/*float UwAction_CaptureFlag::Sim_GetTime ( class UwState* ws )
{
	static UFunction* pSim_GetTime = 0;
	UwAction_CaptureFlag_execSim_GetTime_Parms parms;

	if ( !pSim_GetTime )
		pSim_GetTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_CaptureFlag.Sim_GetTime" );

	parms.ws = ws;
	this->ProcessEvent ( pSim_GetTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UwAction_CaptureFlag::CheckRequirement ( class UwState* ws )
{
	static UFunction* pCheckRequirement = 0;
	UwAction_CaptureFlag_execCheckRequirement_Parms parms;

	if ( !pCheckRequirement )
		pCheckRequirement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_CaptureFlag.CheckRequirement" );

	parms.ws = ws;
	this->ProcessEvent ( pCheckRequirement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UwAction_CaptureFlag::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UwAction_CaptureFlag_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_CaptureFlag.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UwAction_CaptureFlag* UwAction_CaptureFlag::Init ( class AwFlagObjectiveBase* inFlag )
{
	static UFunction* pInit = 0;
	UwAction_CaptureFlag_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wAction_CaptureFlag.Init" );

	parms.inFlag = inFlag;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_CaptureFlag::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_CaptureFlag_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_CaptureFlag.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_CaptureFlag::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_CaptureFlag_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_CaptureFlag.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_CaptureFlag::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_CaptureFlag_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_CaptureFlag.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_CaptureFlag::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_CaptureFlag_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_CaptureFlag.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_CaptureFlag* UGoal_CaptureFlag::Init ( class AwAIBotBase* inOwner, class AwFlagObjectiveBase* inFlag )
{
	static UFunction* pInit = 0;
	UGoal_CaptureFlag_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_CaptureFlag.Init" );

	parms.inOwner = inOwner;
	parms.inFlag = inFlag;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UGoal_GoToFlag::ToString (  )
{
	static UFunction* pToString = 0;
	UGoal_GoToFlag_execToString_Parms parms;

	if ( !pToString )
		pToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_GoToFlag.ToString" );

	this->ProcessEvent ( pToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UGoal_GoToFlag::ActualWork ( float dt )
{
	static UFunction* pActualWork = 0;
	UGoal_GoToFlag_execActualWork_Parms parms;

	if ( !pActualWork )
		pActualWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_GoToFlag.ActualWork" );

	parms.dt = dt;
	this->ProcessEvent ( pActualWork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UGoal_GoToFlag::Start (  )
{
	static UFunction* pStart = 0;
	UGoal_GoToFlag_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_GoToFlag.Start" );

	this->ProcessEvent ( pStart, &parms, NULL );

}*/

/*void UGoal_GoToFlag::ClearReferences (  )
{
	static UFunction* pClearReferences = 0;
	UGoal_GoToFlag_execClearReferences_Parms parms;

	if ( !pClearReferences )
		pClearReferences = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_GoToFlag.ClearReferences" );

	this->ProcessEvent ( pClearReferences, &parms, NULL );

}*/

/*class UGoal_GoToFlag* UGoal_GoToFlag::Init ( class AwAIBotBase* inOwner, class AwFlagObjectiveBase* inFlag )
{
	static UFunction* pInit = 0;
	UGoal_GoToFlag_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.Goal_GoToFlag.Init" );

	parms.inOwner = inOwner;
	parms.inFlag = inFlag;
	this->ProcessEvent ( pInit, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwTeamRoster::BelongsOnTeam ( class UClass* PawnClass )
{
	static UFunction* pBelongsOnTeam = 0;
	AwTeamRoster_execBelongsOnTeam_Parms parms;

	if ( !pBelongsOnTeam )
		pBelongsOnTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamRoster.BelongsOnTeam" );

	parms.PawnClass = PawnClass;
	this->ProcessEvent ( pBelongsOnTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwTeamRoster::AlreadyExistsEntry ( struct FString CharacterName, bool bNoRecursion )
{
	static UFunction* pAlreadyExistsEntry = 0;
	AwTeamRoster_execAlreadyExistsEntry_Parms parms;

	if ( !pAlreadyExistsEntry )
		pAlreadyExistsEntry = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamRoster.AlreadyExistsEntry" );

	parms.CharacterName = CharacterName;
	parms.bNoRecursion = bNoRecursion;
	this->ProcessEvent ( pAlreadyExistsEntry, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwTeamRoster::AvailableRecord ( struct FString MenuString )
{
	static UFunction* pAvailableRecord = 0;
	AwTeamRoster_execAvailableRecord_Parms parms;

	if ( !pAvailableRecord )
		pAvailableRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamRoster.AvailableRecord" );

	parms.MenuString = MenuString;
	this->ProcessEvent ( pAvailableRecord, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class URosterEntry* AwTeamRoster::GetRandomPlayer (  )
{
	static UFunction* pGetRandomPlayer = 0;
	AwTeamRoster_execGetRandomPlayer_Parms parms;

	if ( !pGetRandomPlayer )
		pGetRandomPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamRoster.GetRandomPlayer" );

	this->ProcessEvent ( pGetRandomPlayer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwTeamRoster::FillPlayerTeam ( class UGameProfile* G )
{
	static UFunction* pFillPlayerTeam = 0;
	AwTeamRoster_execFillPlayerTeam_Parms parms;

	if ( !pFillPlayerTeam )
		pFillPlayerTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamRoster.FillPlayerTeam" );

	parms.G = G;
	this->ProcessEvent ( pFillPlayerTeam, &parms, NULL );

}*/

/*void AwTeamRoster::Initialize ( int TeamBots )
{
	static UFunction* pInitialize = 0;
	AwTeamRoster_execInitialize_Parms parms;

	if ( !pInitialize )
		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamRoster.Initialize" );

	parms.TeamBots = TeamBots;
	this->ProcessEvent ( pInitialize, &parms, NULL );

}*/

/*class URosterEntry* AwTeamRoster::GetNamedBot ( struct FString botname )
{
	static UFunction* pGetNamedBot = 0;
	AwTeamRoster_execGetNamedBot_Parms parms;

	if ( !pGetNamedBot )
		pGetNamedBot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamRoster.GetNamedBot" );

	parms.botname = botname;
	this->ProcessEvent ( pGetNamedBot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwTeamRoster::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwTeamRoster_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WGame.wTeamRoster.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

