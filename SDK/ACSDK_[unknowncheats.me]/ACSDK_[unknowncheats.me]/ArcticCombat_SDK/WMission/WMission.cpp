#include "stdafx.h"
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : WMission
# >    File : Code.cpp
# ======================================================================================== #
*/

/*void AwMSCinematic_Camera::Reset (  )
{
	static UFunction* pReset = 0;
	AwMSCinematic_Camera_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSCinematic_Camera.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AwMSCinematic_Camera::Trigger ( class AActor* Other, class APawn* EventInstigator )
{
	static UFunction* pTrigger = 0;
	AwMSCinematic_Camera_execTrigger_Parms parms;

	if ( !pTrigger )
		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSCinematic_Camera.Trigger" );

	parms.Other = Other;
	parms.EventInstigator = EventInstigator;
	this->ProcessEvent ( pTrigger, &parms, NULL );

}*/

/*void AwMSCinematic_Camera::Timer (  )
{
	static UFunction* pTimer = 0;
	AwMSCinematic_Camera_execTimer_Parms parms;

	if ( !pTimer )
		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSCinematic_Camera.Timer" );

	this->ProcessEvent ( pTimer, &parms, NULL );

}*/

/*void AwMSCinematic_Camera::SetView ( class AwMSCinematic_SceneManager* SM )
{
	static UFunction* pSetView = 0;
	AwMSCinematic_Camera_execSetView_Parms parms;

	if ( !pSetView )
		pSetView = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSCinematic_Camera.SetView" );

	parms.SM = SM;
	this->ProcessEvent ( pSetView, &parms, NULL );

}*/

/*void AwMSCinematic_Camera::ViewFixedObjective ( class APlayerController* PC, class AGameObjective* Go )
{
	static UFunction* pViewFixedObjective = 0;
	AwMSCinematic_Camera_execViewFixedObjective_Parms parms;

	if ( !pViewFixedObjective )
		pViewFixedObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSCinematic_Camera.ViewFixedObjective" );

	parms.PC = PC;
	parms.Go = Go;
	this->ProcessEvent ( pViewFixedObjective, &parms, NULL );

}*/

/*void AwMSCinematic_Camera::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwMSCinematic_Camera_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSCinematic_Camera.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwMSCinematic_SceneManager::eventSceneEnded (  )
{
	static UFunction* pSceneEnded = 0;
	AwMSCinematic_SceneManager_eventSceneEnded_Parms parms;

	if ( !pSceneEnded )
		pSceneEnded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSCinematic_SceneManager.SceneEnded" );

	this->ProcessEvent ( pSceneEnded, &parms, NULL );

}*/

/*void AwMSCinematic_SceneManager::eventShotEnded ( class AwMSCinematic_Camera* cam )
{
	static UFunction* pShotEnded = 0;
	AwMSCinematic_SceneManager_eventShotEnded_Parms parms;

	if ( !pShotEnded )
		pShotEnded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSCinematic_SceneManager.ShotEnded" );

	parms.cam = cam;
	this->ProcessEvent ( pShotEnded, &parms, NULL );

}*/

/*void AwMSCinematic_SceneManager::PlayScene (  )
{
	static UFunction* pPlayScene = 0;
	AwMSCinematic_SceneManager_execPlayScene_Parms parms;

	if ( !pPlayScene )
		pPlayScene = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSCinematic_SceneManager.PlayScene" );

	this->ProcessEvent ( pPlayScene, &parms, NULL );

}*/

/*void AwMSCinematic_SceneManager::Trigger ( class AActor* Other, class APawn* EventInstigator )
{
	static UFunction* pTrigger = 0;
	AwMSCinematic_SceneManager_execTrigger_Parms parms;

	if ( !pTrigger )
		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSCinematic_SceneManager.Trigger" );

	parms.Other = Other;
	parms.EventInstigator = EventInstigator;
	this->ProcessEvent ( pTrigger, &parms, NULL );

}*/

/*void AwMSCinematic_SceneManager::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwMSCinematic_SceneManager_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSCinematic_SceneManager.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwSetObjective::SetActive ( bool bActiveStatus )
{
	static UFunction* pSetActive = 0;
	AwSetObjective_execSetActive_Parms parms;

	if ( !pSetActive )
		pSetActive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.SetActive" );

	parms.bActiveStatus = bActiveStatus;
	this->ProcessEvent ( pSetActive, &parms, NULL );

}*/

/*void AwSetObjective::Reset (  )
{
	static UFunction* pReset = 0;
	AwSetObjective_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AwSetObjective::RefreshState (  )
{
	static UFunction* pRefreshState = 0;
	AwSetObjective_execRefreshState_Parms parms;

	if ( !pRefreshState )
		pRefreshState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.RefreshState" );

	this->ProcessEvent ( pRefreshState, &parms, NULL );

}*/

/*float AwSetObjective::GetObjectiveProgress (  )
{
	static UFunction* pGetObjectiveProgress = 0;
	AwSetObjective_execGetObjectiveProgress_Parms parms;

	if ( !pGetObjectiveProgress )
		pGetObjectiveProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.GetObjectiveProgress" );

	this->ProcessEvent ( pGetObjectiveProgress, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwSetObjective::PlayerToucherDied ( class APawn* P )
{
	static UFunction* pPlayerToucherDied = 0;
	AwSetObjective_execPlayerToucherDied_Parms parms;

	if ( !pPlayerToucherDied )
		pPlayerToucherDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.PlayerToucherDied" );

	parms.P = P;
	this->ProcessEvent ( pPlayerToucherDied, &parms, NULL );

}*/

/*bool AwSetObjective::IsRelevant ( class APawn* P, bool bAliveCheck )
{
	static UFunction* pIsRelevant = 0;
	AwSetObjective_execIsRelevant_Parms parms;

	if ( !pIsRelevant )
		pIsRelevant = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.IsRelevant" );

	parms.P = P;
	parms.bAliveCheck = bAliveCheck;
	this->ProcessEvent ( pIsRelevant, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwSetObjective::UnTouch ( class AActor* Other )
{
	static UFunction* pUnTouch = 0;
	AwSetObjective_execUnTouch_Parms parms;

	if ( !pUnTouch )
		pUnTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.UnTouch" );

	parms.Other = Other;
	this->ProcessEvent ( pUnTouch, &parms, NULL );

}*/

/*void AwSetObjective::Touch ( class AActor* Other )
{
	static UFunction* pTouch = 0;
	AwSetObjective_execTouch_Parms parms;

	if ( !pTouch )
		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.Touch" );

	parms.Other = Other;
	this->ProcessEvent ( pTouch, &parms, NULL );

}*/

/*bool AwSetObjective::CanPlant ( class APawn* P )
{
	static UFunction* pCanPlant = 0;
	AwSetObjective_execCanPlant_Parms parms;

	if ( !pCanPlant )
		pCanPlant = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.CanPlant" );

	parms.P = P;
	this->ProcessEvent ( pCanPlant, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwSetObjective::IsPlanting ( class APawn* P )
{
	static UFunction* pIsPlanting = 0;
	AwSetObjective_execIsPlanting_Parms parms;

	if ( !pIsPlanting )
		pIsPlanting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.IsPlanting" );

	parms.P = P;
	this->ProcessEvent ( pIsPlanting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwSetObjective::eventTick ( float DeltaTime )
{
	static UFunction* pTick = 0;
	AwSetObjective_eventTick_Parms parms;

	if ( !pTick )
		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.Tick" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pTick, &parms, NULL );

}*/

/*void AwSetObjective::SetDefuseLocation ( struct FVector loc, struct FName Tag )
{
	static UFunction* pSetDefuseLocation = 0;
	AwSetObjective_execSetDefuseLocation_Parms parms;

	if ( !pSetDefuseLocation )
		pSetDefuseLocation = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.SetDefuseLocation" );

	parms.loc = loc;
	parms.Tag = Tag;
	this->ProcessEvent ( pSetDefuseLocation, &parms, NULL );

}*/

/*void AwSetObjective::eventUsedBy ( class APawn* User )
{
	static UFunction* pUsedBy = 0;
	AwSetObjective_eventUsedBy_Parms parms;

	if ( !pUsedBy )
		pUsedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.UsedBy" );

	parms.User = User;
	this->ProcessEvent ( pUsedBy, &parms, NULL );

}*/

/*void AwSetObjective::eventPreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	AwSetObjective_eventPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSetObjective.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*bool AwMSGameReplicationInfo::IsGhostChatting ( class AActor* Sender )
{
	static UFunction* pIsGhostChatting = 0;
	AwMSGameReplicationInfo_execIsGhostChatting_Parms parms;

	if ( !pIsGhostChatting )
		pIsGhostChatting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameReplicationInfo.IsGhostChatting" );

	parms.Sender = Sender;
	this->ProcessEvent ( pIsGhostChatting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AwMSGameReplicationInfo::GetRoundWinnerString (  )
{
	static UFunction* pGetRoundWinnerString = 0;
	AwMSGameReplicationInfo_execGetRoundWinnerString_Parms parms;

	if ( !pGetRoundWinnerString )
		pGetRoundWinnerString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameReplicationInfo.GetRoundWinnerString" );

	this->ProcessEvent ( pGetRoundWinnerString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameReplicationInfo::SetMaxLives ( int iMaxLives )
{
	static UFunction* pSetMaxLives = 0;
	AwMSGameReplicationInfo_execSetMaxLives_Parms parms;

	if ( !pSetMaxLives )
		pSetMaxLives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameReplicationInfo.SetMaxLives" );

	parms.iMaxLives = iMaxLives;
	this->ProcessEvent ( pSetMaxLives, &parms, NULL );

}*/

/*int AwMSGameReplicationInfo::GetMaxLives (  )
{
	static UFunction* pGetMaxLives = 0;
	AwMSGameReplicationInfo_execGetMaxLives_Parms parms;

	if ( !pGetMaxLives )
		pGetMaxLives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameReplicationInfo.GetMaxLives" );

	this->ProcessEvent ( pGetMaxLives, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwMSGameReplicationInfo::IsDefender ( unsigned char Team )
{
	static UFunction* pIsDefender = 0;
	AwMSGameReplicationInfo_execIsDefender_Parms parms;

	if ( !pIsDefender )
		pIsDefender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameReplicationInfo.IsDefender" );

	parms.Team = Team;
	this->ProcessEvent ( pIsDefender, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwMSGameReplicationInfo::IsPracticeRound (  )
{
	static UFunction* pIsPracticeRound = 0;
	AwMSGameReplicationInfo_execIsPracticeRound_Parms parms;

	if ( !pIsPracticeRound )
		pIsPracticeRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameReplicationInfo.IsPracticeRound" );

	this->ProcessEvent ( pIsPracticeRound, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwMSGameReplicationInfo::GetRemainingTime (  )
{
	static UFunction* pGetRemainingTime = 0;
	AwMSGameReplicationInfo_execGetRemainingTime_Parms parms;

	if ( !pGetRemainingTime )
		pGetRemainingTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameReplicationInfo.GetRemainingTime" );

	this->ProcessEvent ( pGetRemainingTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameReplicationInfo::Timer (  )
{
	static UFunction* pTimer = 0;
	AwMSGameReplicationInfo_execTimer_Parms parms;

	if ( !pTimer )
		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameReplicationInfo.Timer" );

	this->ProcessEvent ( pTimer, &parms, NULL );

}*/

/*void AwMSGameReplicationInfo::SetupAssaultObjectivePriority (  )
{
	static UFunction* pSetupAssaultObjectivePriority = 0;
	AwMSGameReplicationInfo_execSetupAssaultObjectivePriority_Parms parms;

	if ( !pSetupAssaultObjectivePriority )
		pSetupAssaultObjectivePriority = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameReplicationInfo.SetupAssaultObjectivePriority" );

	this->ProcessEvent ( pSetupAssaultObjectivePriority, &parms, NULL );

}*/

/*void AwMSGameReplicationInfo::PostNetBeginPlay (  )
{
	static UFunction* pPostNetBeginPlay = 0;
	AwMSGameReplicationInfo_execPostNetBeginPlay_Parms parms;

	if ( !pPostNetBeginPlay )
		pPostNetBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameReplicationInfo.PostNetBeginPlay" );

	this->ProcessEvent ( pPostNetBeginPlay, &parms, NULL );

}*/

/*void AwMSGameReplicationInfo::PreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	AwMSGameReplicationInfo_execPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameReplicationInfo.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*void AwMSGameInfo::AddGameSpecificActions ( class TArray< class UwAction* >* Actions )
{
	static UFunction* pAddGameSpecificActions = 0;
	AwMSGameInfo_execAddGameSpecificActions_Parms parms;

	if ( !pAddGameSpecificActions )
		pAddGameSpecificActions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.AddGameSpecificActions" );

	parms.Actions = *Actions;
	this->ProcessEvent ( pAddGameSpecificActions, &parms, NULL );

	*Actions = parms.Actions;
}*/

/*bool AwMSGameInfo::DoProcessKillMessage ( class UClass* DamageType )
{
	static UFunction* pDoProcessKillMessage = 0;
	AwMSGameInfo_execDoProcessKillMessage_Parms parms;

	if ( !pDoProcessKillMessage )
		pDoProcessKillMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.DoProcessKillMessage" );

	parms.DamageType = DamageType;
	this->ProcessEvent ( pDoProcessKillMessage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwMSGameInfo::GetTotalPlayedTime (  )
{
	static UFunction* pGetTotalPlayedTime = 0;
	AwMSGameInfo_execGetTotalPlayedTime_Parms parms;

	if ( !pGetTotalPlayedTime )
		pGetTotalPlayedTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.GetTotalPlayedTime" );

	this->ProcessEvent ( pGetTotalPlayedTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwMSGameInfo::GetBootySeedValue (  )
{
	static UFunction* pGetBootySeedValue = 0;
	AwMSGameInfo_execGetBootySeedValue_Parms parms;

	if ( !pGetBootySeedValue )
		pGetBootySeedValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.GetBootySeedValue" );

	this->ProcessEvent ( pGetBootySeedValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::CheckScore ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pCheckScore = 0;
	AwMSGameInfo_execCheckScore_Parms parms;

	if ( !pCheckScore )
		pCheckScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.CheckScore" );

	parms.Scorer = Scorer;
	this->ProcessEvent ( pCheckScore, &parms, NULL );

}*/

/*void AwMSGameInfo::CheckLastMan ( int TeamIndex )
{
	static UFunction* pCheckLastMan = 0;
	AwMSGameInfo_execCheckLastMan_Parms parms;

	if ( !pCheckLastMan )
		pCheckLastMan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.CheckLastMan" );

	parms.TeamIndex = TeamIndex;
	this->ProcessEvent ( pCheckLastMan, &parms, NULL );

}*/

/*bool AwMSGameInfo::CheckMaxLives ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pCheckMaxLives = 0;
	AwMSGameInfo_execCheckMaxLives_Parms parms;

	if ( !pCheckMaxLives )
		pCheckMaxLives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.CheckMaxLives" );

	parms.Scorer = Scorer;
	this->ProcessEvent ( pCheckMaxLives, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwMSGameInfo::EndGameByTeamNoneLeft ( class APlayerReplicationInfo* Living )
{
	static UFunction* pEndGameByTeamNoneLeft = 0;
	AwMSGameInfo_execEndGameByTeamNoneLeft_Parms parms;

	if ( !pEndGameByTeamNoneLeft )
		pEndGameByTeamNoneLeft = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.EndGameByTeamNoneLeft" );

	parms.Living = Living;
	this->ProcessEvent ( pEndGameByTeamNoneLeft, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::LeaveLogOtherTeamNoneLeft ( class APlayerReplicationInfo* Living )
{
	static UFunction* pLeaveLogOtherTeamNoneLeft = 0;
	AwMSGameInfo_execLeaveLogOtherTeamNoneLeft_Parms parms;

	if ( !pLeaveLogOtherTeamNoneLeft )
		pLeaveLogOtherTeamNoneLeft = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.LeaveLogOtherTeamNoneLeft" );

	parms.Living = Living;
	this->ProcessEvent ( pLeaveLogOtherTeamNoneLeft, &parms, NULL );

}*/

/*void AwMSGameInfo::execlll (  )
{
	static UFunction* plll = 0;
	AwMSGameInfo_execlll_Parms parms;

	if ( !plll )
		plll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.lll" );

	this->ProcessEvent ( plll, &parms, NULL );

}*/

/*void AwMSGameInfo::FindLiving ( class APlayerReplicationInfo** Living, unsigned char* bOtherTeamNoneLeft )
{
	static UFunction* pFindLiving = 0;
	AwMSGameInfo_execFindLiving_Parms parms;

	if ( !pFindLiving )
		pFindLiving = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.FindLiving" );

	parms.Living = *Living;
	parms.bOtherTeamNoneLeft = *bOtherTeamNoneLeft;
	this->ProcessEvent ( pFindLiving, &parms, NULL );

	*Living = parms.Living;
	*bOtherTeamNoneLeft = parms.bOtherTeamNoneLeft;
}*/

/*bool AwMSGameInfo::AllowBecomeActivePlayer ( class APlayerController* P )
{
	static UFunction* pAllowBecomeActivePlayer = 0;
	AwMSGameInfo_execAllowBecomeActivePlayer_Parms parms;

	if ( !pAllowBecomeActivePlayer )
		pAllowBecomeActivePlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.AllowBecomeActivePlayer" );

	parms.P = P;
	this->ProcessEvent ( pAllowBecomeActivePlayer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwMSGameInfo::IsRightTimeForRespawn ( class AController* C )
{
	static UFunction* pIsRightTimeForRespawn = 0;
	AwMSGameInfo_execIsRightTimeForRespawn_Parms parms;

	if ( !pIsRightTimeForRespawn )
		pIsRightTimeForRespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.IsRightTimeForRespawn" );

	parms.C = C;
	this->ProcessEvent ( pIsRightTimeForRespawn, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwMSGameInfo::IsRespawnRestrictionTime (  )
{
	static UFunction* pIsRespawnRestrictionTime = 0;
	AwMSGameInfo_execIsRespawnRestrictionTime_Parms parms;

	if ( !pIsRespawnRestrictionTime )
		pIsRespawnRestrictionTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.IsRespawnRestrictionTime" );

	this->ProcessEvent ( pIsRespawnRestrictionTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwMSGameInfo::AllowMutator ( struct FString MutatorClassName )
{
	static UFunction* pAllowMutator = 0;
	AwMSGameInfo_execAllowMutator_Parms parms;

	if ( !pAllowMutator )
		pAllowMutator = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.AllowMutator" );

	parms.MutatorClassName = MutatorClassName;
	this->ProcessEvent ( pAllowMutator, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AwMSGameInfo::eventGetDescriptionText ( struct FString PropName )
{
	static UFunction* pGetDescriptionText = 0;
	AwMSGameInfo_eventGetDescriptionText_Parms parms;

	if ( !pGetDescriptionText )
		pGetDescriptionText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.GetDescriptionText" );

	parms.PropName = PropName;
	this->ProcessEvent ( pGetDescriptionText, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::FillPlayInfo ( class UPlayInfo* PlayInfo )
{
	static UFunction* pFillPlayInfo = 0;
	AwMSGameInfo_execFillPlayInfo_Parms parms;

	if ( !pFillPlayInfo )
		pFillPlayInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.FillPlayInfo" );

	parms.PlayInfo = PlayInfo;
	this->ProcessEvent ( pFillPlayInfo, &parms, NULL );

}*/

/*bool AwMSGameInfo::eventAcceptPlayInfoProperty ( struct FString PropertyName )
{
	static UFunction* pAcceptPlayInfoProperty = 0;
	AwMSGameInfo_eventAcceptPlayInfoProperty_Parms parms;

	if ( !pAcceptPlayInfoProperty )
		pAcceptPlayInfoProperty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.AcceptPlayInfoProperty" );

	parms.PropertyName = PropertyName;
	this->ProcessEvent ( pAcceptPlayInfoProperty, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::GetServerDetails ( struct FServerResponseLine* ServerState )
{
	static UFunction* pGetServerDetails = 0;
	AwMSGameInfo_execGetServerDetails_Parms parms;

	if ( !pGetServerDetails )
		pGetServerDetails = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.GetServerDetails" );

	parms.ServerState = *ServerState;
	this->ProcessEvent ( pGetServerDetails, &parms, NULL );

	*ServerState = parms.ServerState;
}*/

/*void AwMSGameInfo::UpdateAnnouncements (  )
{
	static UFunction* pUpdateAnnouncements = 0;
	AwMSGameInfo_execUpdateAnnouncements_Parms parms;

	if ( !pUpdateAnnouncements )
		pUpdateAnnouncements = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.UpdateAnnouncements" );

	this->ProcessEvent ( pUpdateAnnouncements, &parms, NULL );

}*/

/*void AwMSGameInfo::PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds )
{
	static UFunction* pPrecacheGameAnnouncements = 0;
	AwMSGameInfo_execPrecacheGameAnnouncements_Parms parms;

	if ( !pPrecacheGameAnnouncements )
		pPrecacheGameAnnouncements = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.PrecacheGameAnnouncements" );

	parms.V = V;
	parms.bRewardSounds = bRewardSounds;
	this->ProcessEvent ( pPrecacheGameAnnouncements, &parms, NULL );

}*/

/*void AwMSGameInfo::QueueAnnouncerSound ( struct FString ASound, unsigned char AnnouncementLevel, unsigned char Team, unsigned char Priority, unsigned char Switch )
{
	static UFunction* pQueueAnnouncerSound = 0;
	AwMSGameInfo_execQueueAnnouncerSound_Parms parms;

	if ( !pQueueAnnouncerSound )
		pQueueAnnouncerSound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.QueueAnnouncerSound" );

	parms.ASound = ASound;
	parms.AnnouncementLevel = AnnouncementLevel;
	parms.Team = Team;
	parms.Priority = Priority;
	parms.Switch = Switch;
	this->ProcessEvent ( pQueueAnnouncerSound, &parms, NULL );

}*/

/*int AwMSGameInfo::AdjustDestroyObjectiveDamage ( int Damage, class AController* instigatedBy, class AGameObjective* Go )
{
	static UFunction* pAdjustDestroyObjectiveDamage = 0;
	AwMSGameInfo_execAdjustDestroyObjectiveDamage_Parms parms;

	if ( !pAdjustDestroyObjectiveDamage )
		pAdjustDestroyObjectiveDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.AdjustDestroyObjectiveDamage" );

	parms.Damage = Damage;
	parms.instigatedBy = instigatedBy;
	parms.Go = Go;
	this->ProcessEvent ( pAdjustDestroyObjectiveDamage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwMSGameInfo::ReduceDamage ( int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, int iWeaponType, struct FVector* Momentum )
{
	static UFunction* pReduceDamage = 0;
	AwMSGameInfo_execReduceDamage_Parms parms;

	if ( !pReduceDamage )
		pReduceDamage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.ReduceDamage" );

	parms.Damage = Damage;
	parms.injured = injured;
	parms.instigatedBy = instigatedBy;
	parms.HitLocation = HitLocation;
	parms.DamageType = DamageType;
	parms.iWeaponType = iWeaponType;
	this->ProcessEvent ( pReduceDamage, &parms, NULL );

	*Momentum = parms.Momentum;
	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::SetObjectiveSetted ( class APawn* TP, struct FName ObjectTag, struct FVector FlagLocation )
{
	static UFunction* pSetObjectiveSetted = 0;
	AwMSGameInfo_execSetObjectiveSetted_Parms parms;

	if ( !pSetObjectiveSetted )
		pSetObjectiveSetted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.SetObjectiveSetted" );

	parms.TP = TP;
	parms.ObjectTag = ObjectTag;
	parms.FlagLocation = FlagLocation;
	this->ProcessEvent ( pSetObjectiveSetted, &parms, NULL );

}*/

/*int AwMSGameInfo::GetRemainingTime (  )
{
	static UFunction* pGetRemainingTime = 0;
	AwMSGameInfo_execGetRemainingTime_Parms parms;

	if ( !pGetRemainingTime )
		pGetRemainingTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.GetRemainingTime" );

	this->ProcessEvent ( pGetRemainingTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::SetRemainingTime ( int remain )
{
	static UFunction* pSetRemainingTime = 0;
	AwMSGameInfo_execSetRemainingTime_Parms parms;

	if ( !pSetRemainingTime )
		pSetRemainingTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.SetRemainingTime" );

	parms.remain = remain;
	this->ProcessEvent ( pSetRemainingTime, &parms, NULL );

}*/

/*class ANavigationPoint* AwMSGameInfo::FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName )
{
	static UFunction* pFindPlayerStart = 0;
	AwMSGameInfo_execFindPlayerStart_Parms parms;

	if ( !pFindPlayerStart )
		pFindPlayerStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.FindPlayerStart" );

	parms.Player = Player;
	parms.inTeam = inTeam;
	parms.incomingName = incomingName;
	this->ProcessEvent ( pFindPlayerStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwMSGameInfo::GetPlayerStartTeam ( class ANavigationPoint* N, int Team )
{
	static UFunction* pGetPlayerStartTeam = 0;
	AwMSGameInfo_execGetPlayerStartTeam_Parms parms;

	if ( !pGetPlayerStartTeam )
		pGetPlayerStartTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.GetPlayerStartTeam" );

	parms.N = N;
	parms.Team = Team;
	this->ProcessEvent ( pGetPlayerStartTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::PossessPawn ( class AController* C, class APawn* P )
{
	static UFunction* pPossessPawn = 0;
	AwMSGameInfo_execPossessPawn_Parms parms;

	if ( !pPossessPawn )
		pPossessPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.PossessPawn" );

	parms.C = C;
	parms.P = P;
	this->ProcessEvent ( pPossessPawn, &parms, NULL );

}*/

/*bool AwMSGameInfo::SpawnAndPossessPawn ( class AController* C, struct FString PawnClassName )
{
	static UFunction* pSpawnAndPossessPawn = 0;
	AwMSGameInfo_execSpawnAndPossessPawn_Parms parms;

	if ( !pSpawnAndPossessPawn )
		pSpawnAndPossessPawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.SpawnAndPossessPawn" );

	parms.C = C;
	parms.PawnClassName = PawnClassName;
	this->ProcessEvent ( pSpawnAndPossessPawn, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class UClass* AwMSGameInfo::GetDefaultPlayerClass ( class AController* C )
{
	static UFunction* pGetDefaultPlayerClass = 0;
	AwMSGameInfo_execGetDefaultPlayerClass_Parms parms;

	if ( !pGetDefaultPlayerClass )
		pGetDefaultPlayerClass = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.GetDefaultPlayerClass" );

	parms.C = C;
	this->ProcessEvent ( pGetDefaultPlayerClass, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::AddDefaultInventory ( class APawn* PlayerPawn )
{
	static UFunction* pAddDefaultInventory = 0;
	AwMSGameInfo_execAddDefaultInventory_Parms parms;

	if ( !pAddDefaultInventory )
		pAddDefaultInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.AddDefaultInventory" );

	parms.PlayerPawn = PlayerPawn;
	this->ProcessEvent ( pAddDefaultInventory, &parms, NULL );

}*/

/*void AwMSGameInfo::RespawnPlayer ( class AController* C, bool bClearSpecials )
{
	static UFunction* pRespawnPlayer = 0;
	AwMSGameInfo_execRespawnPlayer_Parms parms;

	if ( !pRespawnPlayer )
		pRespawnPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.RespawnPlayer" );

	parms.C = C;
	parms.bClearSpecials = bClearSpecials;
	this->ProcessEvent ( pRespawnPlayer, &parms, NULL );

}*/

/*void AwMSGameInfo::RestartPlayer ( class AController* aPlayer )
{
	static UFunction* pRestartPlayer = 0;
	AwMSGameInfo_execRestartPlayer_Parms parms;

	if ( !pRestartPlayer )
		pRestartPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.RestartPlayer" );

	parms.aPlayer = aPlayer;
	this->ProcessEvent ( pRestartPlayer, &parms, NULL );

}*/

/*void AwMSGameInfo::ForceRestartPlayer ( class AController* aPlayer )
{
	static UFunction* pForceRestartPlayer = 0;
	AwMSGameInfo_execForceRestartPlayer_Parms parms;

	if ( !pForceRestartPlayer )
		pForceRestartPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.ForceRestartPlayer" );

	parms.aPlayer = aPlayer;
	this->ProcessEvent ( pForceRestartPlayer, &parms, NULL );

}*/

/*void AwMSGameInfo::TeamScoreEvent ( int Team, float Points, struct FString Desc )
{
	static UFunction* pTeamScoreEvent = 0;
	AwMSGameInfo_execTeamScoreEvent_Parms parms;

	if ( !pTeamScoreEvent )
		pTeamScoreEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.TeamScoreEvent" );

	parms.Team = Team;
	parms.Points = Points;
	parms.Desc = Desc;
	this->ProcessEvent ( pTeamScoreEvent, &parms, NULL );

}*/

/*void AwMSGameInfo::ScoreEvent ( class APlayerReplicationInfo* Who, float Points, struct FString Desc )
{
	static UFunction* pScoreEvent = 0;
	AwMSGameInfo_execScoreEvent_Parms parms;

	if ( !pScoreEvent )
		pScoreEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.ScoreEvent" );

	parms.Who = Who;
	parms.Points = Points;
	parms.Desc = Desc;
	this->ProcessEvent ( pScoreEvent, &parms, NULL );

}*/

/*void AwMSGameInfo::KillEvent ( struct FString KillType, class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, class UClass* Damage )
{
	static UFunction* pKillEvent = 0;
	AwMSGameInfo_execKillEvent_Parms parms;

	if ( !pKillEvent )
		pKillEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.KillEvent" );

	parms.KillType = KillType;
	parms.Killer = Killer;
	parms.Victim = Victim;
	parms.Damage = Damage;
	this->ProcessEvent ( pKillEvent, &parms, NULL );

}*/

/*void AwMSGameInfo::SpecialEvent ( class APlayerReplicationInfo* Who, struct FString Desc )
{
	static UFunction* pSpecialEvent = 0;
	AwMSGameInfo_execSpecialEvent_Parms parms;

	if ( !pSpecialEvent )
		pSpecialEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.SpecialEvent" );

	parms.Who = Who;
	parms.Desc = Desc;
	this->ProcessEvent ( pSpecialEvent, &parms, NULL );

}*/

/*bool AwMSGameInfo::CriticalPlayer ( class AController* Other )
{
	static UFunction* pCriticalPlayer = 0;
	AwMSGameInfo_execCriticalPlayer_Parms parms;

	if ( !pCriticalPlayer )
		pCriticalPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.CriticalPlayer" );

	parms.Other = Other;
	this->ProcessEvent ( pCriticalPlayer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwMSGameInfo::VehicleScoreKill ( class AController* Killer, class AController* Killed, class AVehicle* DestroyedVehicle, struct FString* KillInfo )
{
	static UFunction* pVehicleScoreKill = 0;
	AwMSGameInfo_execVehicleScoreKill_Parms parms;

	if ( !pVehicleScoreKill )
		pVehicleScoreKill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.VehicleScoreKill" );

	parms.Killer = Killer;
	parms.Killed = Killed;
	parms.DestroyedVehicle = DestroyedVehicle;
	this->ProcessEvent ( pVehicleScoreKill, &parms, NULL );

	*KillInfo = parms.KillInfo;
	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::Killed ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot )
{
	static UFunction* pKilled = 0;
	AwMSGameInfo_execKilled_Parms parms;

	if ( !pKilled )
		pKilled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.Killed" );

	parms.Killer = Killer;
	parms.Killed = Killed;
	parms.KilledPawn = KilledPawn;
	parms.DamageType = DamageType;
	parms.CollisionPart = CollisionPart;
	parms.WeaponType = WeaponType;
	parms.bWallShot = bWallShot;
	this->ProcessEvent ( pKilled, &parms, NULL );

}*/

/*void AwMSGameInfo::TeleportPlayerToSpawn ( class AController* C )
{
	static UFunction* pTeleportPlayerToSpawn = 0;
	AwMSGameInfo_execTeleportPlayerToSpawn_Parms parms;

	if ( !pTeleportPlayerToSpawn )
		pTeleportPlayerToSpawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.TeleportPlayerToSpawn" );

	parms.C = C;
	this->ProcessEvent ( pTeleportPlayerToSpawn, &parms, NULL );

}*/

/*void AwMSGameInfo::eventNoTranslocatorKeyPressed ( class APlayerController* PC )
{
	static UFunction* pNoTranslocatorKeyPressed = 0;
	AwMSGameInfo_eventNoTranslocatorKeyPressed_Parms parms;

	if ( !pNoTranslocatorKeyPressed )
		pNoTranslocatorKeyPressed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.NoTranslocatorKeyPressed" );

	parms.PC = PC;
	this->ProcessEvent ( pNoTranslocatorKeyPressed, &parms, NULL );

}*/

/*void AwMSGameInfo::eventNewSpawnAreaEnabled ( bool bDefenders )
{
	static UFunction* pNewSpawnAreaEnabled = 0;
	AwMSGameInfo_eventNewSpawnAreaEnabled_Parms parms;

	if ( !pNewSpawnAreaEnabled )
		pNewSpawnAreaEnabled = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.NewSpawnAreaEnabled" );

	parms.bDefenders = bDefenders;
	this->ProcessEvent ( pNewSpawnAreaEnabled, &parms, NULL );

}*/

/*bool AwMSGameInfo::CanDisableObjective ( class AGameObjective* Go )
{
	static UFunction* pCanDisableObjective = 0;
	AwMSGameInfo_execCanDisableObjective_Parms parms;

	if ( !pCanDisableObjective )
		pCanDisableObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.CanDisableObjective" );

	parms.Go = Go;
	this->ProcessEvent ( pCanDisableObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwMSGameInfo::NeedToRespawnSD (  )
{
	static UFunction* pNeedToRespawnSD = 0;
	AwMSGameInfo_execNeedToRespawnSD_Parms parms;

	if ( !pNeedToRespawnSD )
		pNeedToRespawnSD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.NeedToRespawnSD" );

	this->ProcessEvent ( pNeedToRespawnSD, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwMSGameInfo::IsPlaying (  )
{
	static UFunction* pIsPlaying = 0;
	AwMSGameInfo_execIsPlaying_Parms parms;

	if ( !pIsPlaying )
		pIsPlaying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.IsPlaying" );

	this->ProcessEvent ( pIsPlaying, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwMSGameInfo::IsPracticeRound (  )
{
	static UFunction* pIsPracticeRound = 0;
	AwMSGameInfo_execIsPracticeRound_Parms parms;

	if ( !pIsPracticeRound )
		pIsPracticeRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.IsPracticeRound" );

	this->ProcessEvent ( pIsPracticeRound, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwMSGameInfo::IsPlayingIntro (  )
{
	static UFunction* pIsPlayingIntro = 0;
	AwMSGameInfo_execIsPlayingIntro_Parms parms;

	if ( !pIsPlayingIntro )
		pIsPlayingIntro = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.IsPlayingIntro" );

	this->ProcessEvent ( pIsPlayingIntro, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwMSGameInfo::GetDefenderNum (  )
{
	static UFunction* pGetDefenderNum = 0;
	AwMSGameInfo_execGetDefenderNum_Parms parms;

	if ( !pGetDefenderNum )
		pGetDefenderNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.GetDefenderNum" );

	this->ProcessEvent ( pGetDefenderNum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwMSGameInfo::GetAttackingTeam (  )
{
	static UFunction* pGetAttackingTeam = 0;
	AwMSGameInfo_execGetAttackingTeam_Parms parms;

	if ( !pGetAttackingTeam )
		pGetAttackingTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.GetAttackingTeam" );

	this->ProcessEvent ( pGetAttackingTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwMSGameInfo::IsAttackingTeam ( int TeamNumber )
{
	static UFunction* pIsAttackingTeam = 0;
	AwMSGameInfo_execIsAttackingTeam_Parms parms;

	if ( !pIsAttackingTeam )
		pIsAttackingTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.IsAttackingTeam" );

	parms.TeamNumber = TeamNumber;
	this->ProcessEvent ( pIsAttackingTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::BeginNewPairOfRounds (  )
{
	static UFunction* pBeginNewPairOfRounds = 0;
	AwMSGameInfo_execBeginNewPairOfRounds_Parms parms;

	if ( !pBeginNewPairOfRounds )
		pBeginNewPairOfRounds = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.BeginNewPairOfRounds" );

	this->ProcessEvent ( pBeginNewPairOfRounds, &parms, NULL );

}*/

/*void AwMSGameInfo::BeginRound ( bool bNoReset )
{
	static UFunction* pBeginRound = 0;
	AwMSGameInfo_execBeginRound_Parms parms;

	if ( !pBeginRound )
		pBeginRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.BeginRound" );

	parms.bNoReset = bNoReset;
	this->ProcessEvent ( pBeginRound, &parms, NULL );

}*/

/*void AwMSGameInfo::DestoryPawns (  )
{
	static UFunction* pDestoryPawns = 0;
	AwMSGameInfo_execDestoryPawns_Parms parms;

	if ( !pDestoryPawns )
		pDestoryPawns = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.DestoryPawns" );

	this->ProcessEvent ( pDestoryPawns, &parms, NULL );

}*/

/*bool AwMSGameInfo::ProcessSwitchTeam ( bool bNoReset )
{
	static UFunction* pProcessSwitchTeam = 0;
	AwMSGameInfo_execProcessSwitchTeam_Parms parms;

	if ( !pProcessSwitchTeam )
		pProcessSwitchTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.ProcessSwitchTeam" );

	parms.bNoReset = bNoReset;
	this->ProcessEvent ( pProcessSwitchTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::SetRoundTimeLimit (  )
{
	static UFunction* pSetRoundTimeLimit = 0;
	AwMSGameInfo_execSetRoundTimeLimit_Parms parms;

	if ( !pSetRoundTimeLimit )
		pSetRoundTimeLimit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.SetRoundTimeLimit" );

	this->ProcessEvent ( pSetRoundTimeLimit, &parms, NULL );

}*/

/*void AwMSGameInfo::InitializeGameInfo ( bool bNoReset, bool bChangeTeam )
{
	static UFunction* pInitializeGameInfo = 0;
	AwMSGameInfo_execInitializeGameInfo_Parms parms;

	if ( !pInitializeGameInfo )
		pInitializeGameInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.InitializeGameInfo" );

	parms.bNoReset = bNoReset;
	parms.bChangeTeam = bChangeTeam;
	this->ProcessEvent ( pInitializeGameInfo, &parms, NULL );

}*/

/*void AwMSGameInfo::AnnounceSwitchTeam (  )
{
	static UFunction* pAnnounceSwitchTeam = 0;
	AwMSGameInfo_execAnnounceSwitchTeam_Parms parms;

	if ( !pAnnounceSwitchTeam )
		pAnnounceSwitchTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.AnnounceSwitchTeam" );

	this->ProcessEvent ( pAnnounceSwitchTeam, &parms, NULL );

}*/

/*void AwMSGameInfo::NewRoundSwitchTeam (  )
{
	static UFunction* pNewRoundSwitchTeam = 0;
	AwMSGameInfo_execNewRoundSwitchTeam_Parms parms;

	if ( !pNewRoundSwitchTeam )
		pNewRoundSwitchTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.NewRoundSwitchTeam" );

	this->ProcessEvent ( pNewRoundSwitchTeam, &parms, NULL );

}*/

/*void AwMSGameInfo::ResetLevel ( bool hiddenAll )
{
	static UFunction* pResetLevel = 0;
	AwMSGameInfo_execResetLevel_Parms parms;

	if ( !pResetLevel )
		pResetLevel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.ResetLevel" );

	parms.hiddenAll = hiddenAll;
	this->ProcessEvent ( pResetLevel, &parms, NULL );

}*/

/*void AwMSGameInfo::StartNewRound (  )
{
	static UFunction* pStartNewRound = 0;
	AwMSGameInfo_execStartNewRound_Parms parms;

	if ( !pStartNewRound )
		pStartNewRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.StartNewRound" );

	this->ProcessEvent ( pStartNewRound, &parms, NULL );

}*/

/*void AwMSGameInfo::execNewRound (  )
{
	static UFunction* pNewRound = 0;
	AwMSGameInfo_execNewRound_Parms parms;

	if ( !pNewRound )
		pNewRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.NewRound" );

	this->ProcessEvent ( pNewRound, &parms, NULL );

}*/

/*void AwMSGameInfo::AnnounceScore ( int ScoringTeam )
{
	static UFunction* pAnnounceScore = 0;
	AwMSGameInfo_execAnnounceScore_Parms parms;

	if ( !pAnnounceScore )
		pAnnounceScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.AnnounceScore" );

	parms.ScoringTeam = ScoringTeam;
	this->ProcessEvent ( pAnnounceScore, &parms, NULL );

}*/

/*void AwMSGameInfo::SetRoundWinner ( int WinningTeam )
{
	static UFunction* pSetRoundWinner = 0;
	AwMSGameInfo_execSetRoundWinner_Parms parms;

	if ( !pSetRoundWinner )
		pSetRoundWinner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.SetRoundWinner" );

	parms.WinningTeam = WinningTeam;
	this->ProcessEvent ( pSetRoundWinner, &parms, NULL );

}*/

/*void AwMSGameInfo::PracticeRoundEnded (  )
{
	static UFunction* pPracticeRoundEnded = 0;
	AwMSGameInfo_execPracticeRoundEnded_Parms parms;

	if ( !pPracticeRoundEnded )
		pPracticeRoundEnded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.PracticeRoundEnded" );

	this->ProcessEvent ( pPracticeRoundEnded, &parms, NULL );

}*/

/*bool AwMSGameInfo::IsRoundLimitReached (  )
{
	static UFunction* pIsRoundLimitReached = 0;
	AwMSGameInfo_execIsRoundLimitReached_Parms parms;

	if ( !pIsRoundLimitReached )
		pIsRoundLimitReached = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.IsRoundLimitReached" );

	this->ProcessEvent ( pIsRoundLimitReached, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::EndRound ( unsigned char RoundEndReason, class APawn* Instigator, struct FString Reason )
{
	static UFunction* pEndRound = 0;
	AwMSGameInfo_execEndRound_Parms parms;

	if ( !pEndRound )
		pEndRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.EndRound" );

	parms.RoundEndReason = RoundEndReason;
	parms.Instigator = Instigator;
	parms.Reason = Reason;
	this->ProcessEvent ( pEndRound, &parms, NULL );

}*/

/*void AwMSGameInfo::NotifyEndRound (  )
{
	static UFunction* pNotifyEndRound = 0;
	AwMSGameInfo_execNotifyEndRound_Parms parms;

	if ( !pNotifyEndRound )
		pNotifyEndRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.NotifyEndRound" );

	this->ProcessEvent ( pNotifyEndRound, &parms, NULL );

}*/

/*void AwMSGameInfo::NotifyBeginRound (  )
{
	static UFunction* pNotifyBeginRound = 0;
	AwMSGameInfo_execNotifyBeginRound_Parms parms;

	if ( !pNotifyBeginRound )
		pNotifyBeginRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.NotifyBeginRound" );

	this->ProcessEvent ( pNotifyBeginRound, &parms, NULL );

}*/

/*void AwMSGameInfo::CalcRoundResultPoints ( int ScoringTeam )
{
	static UFunction* pCalcRoundResultPoints = 0;
	AwMSGameInfo_execCalcRoundResultPoints_Parms parms;

	if ( !pCalcRoundResultPoints )
		pCalcRoundResultPoints = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.CalcRoundResultPoints" );

	parms.ScoringTeam = ScoringTeam;
	this->ProcessEvent ( pCalcRoundResultPoints, &parms, NULL );

}*/

/*void AwMSGameInfo::ProcessEndGame (  )
{
	static UFunction* pProcessEndGame = 0;
	AwMSGameInfo_execProcessEndGame_Parms parms;

	if ( !pProcessEndGame )
		pProcessEndGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.ProcessEndGame" );

	this->ProcessEvent ( pProcessEndGame, &parms, NULL );

}*/

/*void AwMSGameInfo::PlayEndOfMatchMessage (  )
{
	static UFunction* pPlayEndOfMatchMessage = 0;
	AwMSGameInfo_execPlayEndOfMatchMessage_Parms parms;

	if ( !pPlayEndOfMatchMessage )
		pPlayEndOfMatchMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.PlayEndOfMatchMessage" );

	this->ProcessEvent ( pPlayEndOfMatchMessage, &parms, NULL );

}*/

/*bool AwMSGameInfo::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pCheckEndGame = 0;
	AwMSGameInfo_execCheckEndGame_Parms parms;

	if ( !pCheckEndGame )
		pCheckEndGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.CheckEndGame" );

	parms.Winner = Winner;
	parms.Reason = Reason;
	this->ProcessEvent ( pCheckEndGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::eventSceneStarted ( class ASceneManager* SM, class AActor* Other )
{
	static UFunction* pSceneStarted = 0;
	AwMSGameInfo_eventSceneStarted_Parms parms;

	if ( !pSceneStarted )
		pSceneStarted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.SceneStarted" );

	parms.SM = SM;
	parms.Other = Other;
	this->ProcessEvent ( pSceneStarted, &parms, NULL );

}*/

/*void AwMSGameInfo::ProcessRespawn (  )
{
	static UFunction* pProcessRespawn = 0;
	AwMSGameInfo_execProcessRespawn_Parms parms;

	if ( !pProcessRespawn )
		pProcessRespawn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.ProcessRespawn" );

	this->ProcessEvent ( pProcessRespawn, &parms, NULL );

}*/

/*void AwMSGameInfo::ExplodeBomb (  )
{
	static UFunction* pExplodeBomb = 0;
	AwMSGameInfo_execExplodeBomb_Parms parms;

	if ( !pExplodeBomb )
		pExplodeBomb = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.ExplodeBomb" );

	this->ProcessEvent ( pExplodeBomb, &parms, NULL );

}*/

/*void AwMSGameInfo::ProcessEndRound (  )
{
	static UFunction* pProcessEndRound = 0;
	AwMSGameInfo_execProcessEndRound_Parms parms;

	if ( !pProcessEndRound )
		pProcessEndRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.ProcessEndRound" );

	this->ProcessEvent ( pProcessEndRound, &parms, NULL );

}*/

/*int AwMSGameInfo::GetTimeSecondsLeft (  )
{
	static UFunction* pGetTimeSecondsLeft = 0;
	AwMSGameInfo_execGetTimeSecondsLeft_Parms parms;

	if ( !pGetTimeSecondsLeft )
		pGetTimeSecondsLeft = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.GetTimeSecondsLeft" );

	this->ProcessEvent ( pGetTimeSecondsLeft, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::CheckEndGameAfterRoundTimeOver (  )
{
	static UFunction* pCheckEndGameAfterRoundTimeOver = 0;
	AwMSGameInfo_execCheckEndGameAfterRoundTimeOver_Parms parms;

	if ( !pCheckEndGameAfterRoundTimeOver )
		pCheckEndGameAfterRoundTimeOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.CheckEndGameAfterRoundTimeOver" );

	this->ProcessEvent ( pCheckEndGameAfterRoundTimeOver, &parms, NULL );

}*/

/*void AwMSGameInfo::execfEndRound ( unsigned char Team )
{
	static UFunction* pfEndRound = 0;
	AwMSGameInfo_execfEndRound_Parms parms;

	if ( !pfEndRound )
		pfEndRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.fEndRound" );

	parms.Team = Team;
	this->ProcessEvent ( pfEndRound, &parms, NULL );

}*/

/*void AwMSGameInfo::OnRoundTimeOverWithoutObjectPlanted (  )
{
	static UFunction* pOnRoundTimeOverWithoutObjectPlanted = 0;
	AwMSGameInfo_execOnRoundTimeOverWithoutObjectPlanted_Parms parms;

	if ( !pOnRoundTimeOverWithoutObjectPlanted )
		pOnRoundTimeOverWithoutObjectPlanted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.OnRoundTimeOverWithoutObjectPlanted" );

	this->ProcessEvent ( pOnRoundTimeOverWithoutObjectPlanted, &parms, NULL );

}*/

/*void AwMSGameInfo::BroadCast_AssaultRole_Message ( class APlayerController* C )
{
	static UFunction* pBroadCast_AssaultRole_Message = 0;
	AwMSGameInfo_execBroadCast_AssaultRole_Message_Parms parms;

	if ( !pBroadCast_AssaultRole_Message )
		pBroadCast_AssaultRole_Message = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.BroadCast_AssaultRole_Message" );

	parms.C = C;
	this->ProcessEvent ( pBroadCast_AssaultRole_Message, &parms, NULL );

}*/

/*void AwMSGameInfo::GameObjectDropped ( class ADecoration* D )
{
	static UFunction* pGameObjectDropped = 0;
	AwMSGameInfo_execGameObjectDropped_Parms parms;

	if ( !pGameObjectDropped )
		pGameObjectDropped = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.GameObjectDropped" );

	parms.D = D;
	this->ProcessEvent ( pGameObjectDropped, &parms, NULL );

}*/

/*void AwMSGameInfo::DiscardInventory ( class APawn* Other )
{
	static UFunction* pDiscardInventory = 0;
	AwMSGameInfo_execDiscardInventory_Parms parms;

	if ( !pDiscardInventory )
		pDiscardInventory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.DiscardInventory" );

	parms.Other = Other;
	this->ProcessEvent ( pDiscardInventory, &parms, NULL );

}*/

/*void AwMSGameInfo::OnKillingDropOut ( class APawn* P )
{
	static UFunction* pOnKillingDropOut = 0;
	AwMSGameInfo_execOnKillingDropOut_Parms parms;

	if ( !pOnKillingDropOut )
		pOnKillingDropOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.OnKillingDropOut" );

	parms.P = P;
	this->ProcessEvent ( pOnKillingDropOut, &parms, NULL );

}*/

/*void AwMSGameInfo::Logout ( class AController* Exiting )
{
	static UFunction* pLogout = 0;
	AwMSGameInfo_execLogout_Parms parms;

	if ( !pLogout )
		pLogout = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.Logout" );

	parms.Exiting = Exiting;
	this->ProcessEvent ( pLogout, &parms, NULL );

}*/

/*void AwMSGameInfo::InitGameReplicationInfo (  )
{
	static UFunction* pInitGameReplicationInfo = 0;
	AwMSGameInfo_execInitGameReplicationInfo_Parms parms;

	if ( !pInitGameReplicationInfo )
		pInitGameReplicationInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.InitGameReplicationInfo" );

	this->ProcessEvent ( pInitGameReplicationInfo, &parms, NULL );

}*/

/*void AwMSGameInfo::StartMatch (  )
{
	static UFunction* pStartMatch = 0;
	AwMSGameInfo_execStartMatch_Parms parms;

	if ( !pStartMatch )
		pStartMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.StartMatch" );

	this->ProcessEvent ( pStartMatch, &parms, NULL );

}*/

/*void AwMSGameInfo::StartMatchChangedHost (  )
{
	static UFunction* pStartMatchChangedHost = 0;
	AwMSGameInfo_execStartMatchChangedHost_Parms parms;

	if ( !pStartMatchChangedHost )
		pStartMatchChangedHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.StartMatchChangedHost" );

	this->ProcessEvent ( pStartMatchChangedHost, &parms, NULL );

}*/

/*void AwMSGameInfo::eventInitGame ( struct FString Options, struct FString* Error )
{
	static UFunction* pInitGame = 0;
	AwMSGameInfo_eventInitGame_Parms parms;

	if ( !pInitGame )
		pInitGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.InitGame" );

	parms.Options = Options;
	this->ProcessEvent ( pInitGame, &parms, NULL );

	*Error = parms.Error;
}*/

/*class APlayerController* AwMSGameInfo::eventLogin ( struct FString Portal, struct FString Options, struct FString* Error )
{
	static UFunction* pLogin = 0;
	AwMSGameInfo_eventLogin_Parms parms;

	if ( !pLogin )
		pLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.Login" );

	parms.Portal = Portal;
	parms.Options = Options;
	this->ProcessEvent ( pLogin, &parms, NULL );

	*Error = parms.Error;
	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwMSGameInfo_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwMSGameInfo::ForceObjectiveDefenderTeamIndex (  )
{
	static UFunction* pForceObjectiveDefenderTeamIndex = 0;
	AwMSGameInfo_execForceObjectiveDefenderTeamIndex_Parms parms;

	if ( !pForceObjectiveDefenderTeamIndex )
		pForceObjectiveDefenderTeamIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.ForceObjectiveDefenderTeamIndex" );

	this->ProcessEvent ( pForceObjectiveDefenderTeamIndex, &parms, NULL );

}*/

/*void AwMSGameInfo::TweakSkill ( class ABot* B )
{
	static UFunction* pTweakSkill = 0;
	AwMSGameInfo_execTweakSkill_Parms parms;

	if ( !pTweakSkill )
		pTweakSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.TweakSkill" );

	parms.B = B;
	this->ProcessEvent ( pTweakSkill, &parms, NULL );

}*/

/*bool AwMSGameInfo::NeverAllowTransloc (  )
{
	static UFunction* pNeverAllowTransloc = 0;
	AwMSGameInfo_execNeverAllowTransloc_Parms parms;

	if ( !pNeverAllowTransloc )
		pNeverAllowTransloc = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.NeverAllowTransloc" );

	this->ProcessEvent ( pNeverAllowTransloc, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwMSGameInfo::AllowTransloc (  )
{
	static UFunction* pAllowTransloc = 0;
	AwMSGameInfo_execAllowTransloc_Parms parms;

	if ( !pAllowTransloc )
		pAllowTransloc = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.AllowTransloc" );

	this->ProcessEvent ( pAllowTransloc, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwMSGameInfo::DivertSpaceFighter (  )
{
	static UFunction* pDivertSpaceFighter = 0;
	AwMSGameInfo_execDivertSpaceFighter_Parms parms;

	if ( !pDivertSpaceFighter )
		pDivertSpaceFighter = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.DivertSpaceFighter" );

	this->ProcessEvent ( pDivertSpaceFighter, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSGameInfo::CheckReady (  )
{
	static UFunction* pCheckReady = 0;
	AwMSGameInfo_execCheckReady_Parms parms;

	if ( !pCheckReady )
		pCheckReady = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.CheckReady" );

	this->ProcessEvent ( pCheckReady, &parms, NULL );

}*/

/*void AwMSGameInfo::Reset (  )
{
	static UFunction* pReset = 0;
	AwMSGameInfo_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSGameInfo.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AwDiffuseObjective::Reset (  )
{
	static UFunction* pReset = 0;
	AwDiffuseObjective_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AwDiffuseObjective::RefreshState (  )
{
	static UFunction* pRefreshState = 0;
	AwDiffuseObjective_execRefreshState_Parms parms;

	if ( !pRefreshState )
		pRefreshState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.RefreshState" );

	this->ProcessEvent ( pRefreshState, &parms, NULL );

}*/

/*float AwDiffuseObjective::GetObjectiveProgress (  )
{
	static UFunction* pGetObjectiveProgress = 0;
	AwDiffuseObjective_execGetObjectiveProgress_Parms parms;

	if ( !pGetObjectiveProgress )
		pGetObjectiveProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.GetObjectiveProgress" );

	this->ProcessEvent ( pGetObjectiveProgress, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwDiffuseObjective::PlayerToucherDied ( class APawn* P )
{
	static UFunction* pPlayerToucherDied = 0;
	AwDiffuseObjective_execPlayerToucherDied_Parms parms;

	if ( !pPlayerToucherDied )
		pPlayerToucherDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.PlayerToucherDied" );

	parms.P = P;
	this->ProcessEvent ( pPlayerToucherDied, &parms, NULL );

}*/

/*bool AwDiffuseObjective::IsRelevant ( class APawn* P, bool bAliveCheck )
{
	static UFunction* pIsRelevant = 0;
	AwDiffuseObjective_execIsRelevant_Parms parms;

	if ( !pIsRelevant )
		pIsRelevant = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.IsRelevant" );

	parms.P = P;
	parms.bAliveCheck = bAliveCheck;
	this->ProcessEvent ( pIsRelevant, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwDiffuseObjective::UnTouch ( class AActor* Other )
{
	static UFunction* pUnTouch = 0;
	AwDiffuseObjective_execUnTouch_Parms parms;

	if ( !pUnTouch )
		pUnTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.UnTouch" );

	parms.Other = Other;
	this->ProcessEvent ( pUnTouch, &parms, NULL );

}*/

/*void AwDiffuseObjective::Touch ( class AActor* Other )
{
	static UFunction* pTouch = 0;
	AwDiffuseObjective_execTouch_Parms parms;

	if ( !pTouch )
		pTouch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.Touch" );

	parms.Other = Other;
	this->ProcessEvent ( pTouch, &parms, NULL );

}*/

/*bool AwDiffuseObjective::CanDefuse ( class APawn* P )
{
	static UFunction* pCanDefuse = 0;
	AwDiffuseObjective_execCanDefuse_Parms parms;

	if ( !pCanDefuse )
		pCanDefuse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.CanDefuse" );

	parms.P = P;
	this->ProcessEvent ( pCanDefuse, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwDiffuseObjective::IsDefusing ( class APawn* P )
{
	static UFunction* pIsDefusing = 0;
	AwDiffuseObjective_execIsDefusing_Parms parms;

	if ( !pIsDefusing )
		pIsDefusing = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.IsDefusing" );

	parms.P = P;
	this->ProcessEvent ( pIsDefusing, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwDiffuseObjective::eventTick ( float DeltaTime )
{
	static UFunction* pTick = 0;
	AwDiffuseObjective_eventTick_Parms parms;

	if ( !pTick )
		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.Tick" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pTick, &parms, NULL );

}*/

/*void AwDiffuseObjective::PlayBombDefusedMessage ( class APawn* TP )
{
	static UFunction* pPlayBombDefusedMessage = 0;
	AwDiffuseObjective_execPlayBombDefusedMessage_Parms parms;

	if ( !pPlayBombDefusedMessage )
		pPlayBombDefusedMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.PlayBombDefusedMessage" );

	parms.TP = TP;
	this->ProcessEvent ( pPlayBombDefusedMessage, &parms, NULL );

}*/

/*void AwDiffuseObjective::OnBombDiffused ( class APawn* P )
{
	static UFunction* pOnBombDiffused = 0;
	AwDiffuseObjective_execOnBombDiffused_Parms parms;

	if ( !pOnBombDiffused )
		pOnBombDiffused = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.OnBombDiffused" );

	parms.P = P;
	this->ProcessEvent ( pOnBombDiffused, &parms, NULL );

}*/

/*void AwDiffuseObjective::UpdateBombs (  )
{
	static UFunction* pUpdateBombs = 0;
	AwDiffuseObjective_execUpdateBombs_Parms parms;

	if ( !pUpdateBombs )
		pUpdateBombs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.UpdateBombs" );

	this->ProcessEvent ( pUpdateBombs, &parms, NULL );

}*/

/*void AwDiffuseObjective::SetBombVisibility ( bool val )
{
	static UFunction* pSetBombVisibility = 0;
	AwDiffuseObjective_execSetBombVisibility_Parms parms;

	if ( !pSetBombVisibility )
		pSetBombVisibility = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.SetBombVisibility" );

	parms.val = val;
	this->ProcessEvent ( pSetBombVisibility, &parms, NULL );

}*/

/*void AwDiffuseObjective::eventUsedBy ( class APawn* User )
{
	static UFunction* pUsedBy = 0;
	AwDiffuseObjective_eventUsedBy_Parms parms;

	if ( !pUsedBy )
		pUsedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.UsedBy" );

	parms.User = User;
	this->ProcessEvent ( pUsedBy, &parms, NULL );

}*/

/*void AwDiffuseObjective::eventPreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	AwDiffuseObjective_eventPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDiffuseObjective.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*void AwGameObject_Bomb::PrecacheAnnouncer ( class AAnnouncerVoice* V, bool bRewardSounds )
{
	static UFunction* pPrecacheAnnouncer = 0;
	AwGameObject_Bomb_execPrecacheAnnouncer_Parms parms;

	if ( !pPrecacheAnnouncer )
		pPrecacheAnnouncer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.PrecacheAnnouncer" );

	parms.V = V;
	parms.bRewardSounds = bRewardSounds;
	this->ProcessEvent ( pPrecacheAnnouncer, &parms, NULL );

}*/

/*void AwGameObject_Bomb::LogReturned (  )
{
	static UFunction* pLogReturned = 0;
	AwGameObject_Bomb_execLogReturned_Parms parms;

	if ( !pLogReturned )
		pLogReturned = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.LogReturned" );

	this->ProcessEvent ( pLogReturned, &parms, NULL );

}*/

/*void AwGameObject_Bomb::HolderDied (  )
{
	static UFunction* pHolderDied = 0;
	AwGameObject_Bomb_execHolderDied_Parms parms;

	if ( !pHolderDied )
		pHolderDied = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.HolderDied" );

	this->ProcessEvent ( pHolderDied, &parms, NULL );

}*/

/*void AwGameObject_Bomb::Landed ( struct FVector HitNormal )
{
	static UFunction* pLanded = 0;
	AwGameObject_Bomb_execLanded_Parms parms;

	if ( !pLanded )
		pLanded = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.Landed" );

	parms.HitNormal = HitNormal;
	this->ProcessEvent ( pLanded, &parms, NULL );

}*/

/*void AwGameObject_Bomb::Drop ( struct FVector NewVel, struct FString sReason )
{
	static UFunction* pDrop = 0;
	AwGameObject_Bomb_execDrop_Parms parms;

	if ( !pDrop )
		pDrop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.Drop" );

	parms.NewVel = NewVel;
	parms.sReason = sReason;
	this->ProcessEvent ( pDrop, &parms, NULL );

}*/

/*void AwGameObject_Bomb::ProcessThrowMessage (  )
{
	static UFunction* pProcessThrowMessage = 0;
	AwGameObject_Bomb_execProcessThrowMessage_Parms parms;

	if ( !pProcessThrowMessage )
		pProcessThrowMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.ProcessThrowMessage" );

	this->ProcessEvent ( pProcessThrowMessage, &parms, NULL );

}*/

/*void AwGameObject_Bomb::ProcessDropMessage (  )
{
	static UFunction* pProcessDropMessage = 0;
	AwGameObject_Bomb_execProcessDropMessage_Parms parms;

	if ( !pProcessDropMessage )
		pProcessDropMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.ProcessDropMessage" );

	this->ProcessEvent ( pProcessDropMessage, &parms, NULL );

}*/

/*void AwGameObject_Bomb::ClearHolder (  )
{
	static UFunction* pClearHolder = 0;
	AwGameObject_Bomb_execClearHolder_Parms parms;

	if ( !pClearHolder )
		pClearHolder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.ClearHolder" );

	this->ProcessEvent ( pClearHolder, &parms, NULL );

}*/

/*void AwGameObject_Bomb::SetHolder ( class AController* C )
{
	static UFunction* pSetHolder = 0;
	AwGameObject_Bomb_execSetHolder_Parms parms;

	if ( !pSetHolder )
		pSetHolder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.SetHolder" );

	parms.C = C;
	this->ProcessEvent ( pSetHolder, &parms, NULL );

}*/

/*void AwGameObject_Bomb::ProcessSetHolderMessage ( class AController* C )
{
	static UFunction* pProcessSetHolderMessage = 0;
	AwGameObject_Bomb_execProcessSetHolderMessage_Parms parms;

	if ( !pProcessSetHolderMessage )
		pProcessSetHolderMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.ProcessSetHolderMessage" );

	parms.C = C;
	this->ProcessEvent ( pProcessSetHolderMessage, &parms, NULL );

}*/

/*void AwGameObject_Bomb::OnSetHolder ( class AController* C )
{
	static UFunction* pOnSetHolder = 0;
	AwGameObject_Bomb_execOnSetHolder_Parms parms;

	if ( !pOnSetHolder )
		pOnSetHolder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.OnSetHolder" );

	parms.C = C;
	this->ProcessEvent ( pOnSetHolder, &parms, NULL );

}*/

/*bool AwGameObject_Bomb::ValidHolder ( class AActor* Other )
{
	static UFunction* pValidHolder = 0;
	AwGameObject_Bomb_execValidHolder_Parms parms;

	if ( !pValidHolder )
		pValidHolder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.ValidHolder" );

	parms.Other = Other;
	this->ProcessEvent ( pValidHolder, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwGameObject_Bomb::PostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwGameObject_Bomb_execPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*bool AwGameObject_Bomb::CanBePickedUpBy ( class APawn* P )
{
	static UFunction* pCanBePickedUpBy = 0;
	AwGameObject_Bomb_execCanBePickedUpBy_Parms parms;

	if ( !pCanBePickedUpBy )
		pCanBePickedUpBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_Bomb.CanBePickedUpBy" );

	parms.P = P;
	this->ProcessEvent ( pCanBePickedUpBy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwSDGameInfo::EndGameByTeamNoneLeft ( class APlayerReplicationInfo* Living )
{
	static UFunction* pEndGameByTeamNoneLeft = 0;
	AwSDGameInfo_execEndGameByTeamNoneLeft_Parms parms;

	if ( !pEndGameByTeamNoneLeft )
		pEndGameByTeamNoneLeft = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.EndGameByTeamNoneLeft" );

	parms.Living = Living;
	this->ProcessEvent ( pEndGameByTeamNoneLeft, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwSDGameInfo::AnnounceAlmostWinningTeam (  )
{
	static UFunction* pAnnounceAlmostWinningTeam = 0;
	AwSDGameInfo_execAnnounceAlmostWinningTeam_Parms parms;

	if ( !pAnnounceAlmostWinningTeam )
		pAnnounceAlmostWinningTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.AnnounceAlmostWinningTeam" );

	this->ProcessEvent ( pAnnounceAlmostWinningTeam, &parms, NULL );

}*/

/*void AwSDGameInfo::AnnounceWinningTeam (  )
{
	static UFunction* pAnnounceWinningTeam = 0;
	AwSDGameInfo_execAnnounceWinningTeam_Parms parms;

	if ( !pAnnounceWinningTeam )
		pAnnounceWinningTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.AnnounceWinningTeam" );

	this->ProcessEvent ( pAnnounceWinningTeam, &parms, NULL );

}*/

/*float AwSDGameInfo::GetResultPointRatio_Intervention ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pGetResultPointRatio_Intervention = 0;
	AwSDGameInfo_execGetResultPointRatio_Intervention_Parms parms;

	if ( !pGetResultPointRatio_Intervention )
		pGetResultPointRatio_Intervention = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.GetResultPointRatio_Intervention" );

	parms.PRI = PRI;
	this->ProcessEvent ( pGetResultPointRatio_Intervention, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwSDGameInfo::SetPRI4Intervention ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pSetPRI4Intervention = 0;
	AwSDGameInfo_execSetPRI4Intervention_Parms parms;

	if ( !pSetPRI4Intervention )
		pSetPRI4Intervention = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.SetPRI4Intervention" );

	parms.PRI = PRI;
	this->ProcessEvent ( pSetPRI4Intervention, &parms, NULL );

}*/

/*void AwSDGameInfo::CalcRoundResultPoints ( int ScoringTeam )
{
	static UFunction* pCalcRoundResultPoints = 0;
	AwSDGameInfo_execCalcRoundResultPoints_Parms parms;

	if ( !pCalcRoundResultPoints )
		pCalcRoundResultPoints = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.CalcRoundResultPoints" );

	parms.ScoringTeam = ScoringTeam;
	this->ProcessEvent ( pCalcRoundResultPoints, &parms, NULL );

}*/

/*void AwSDGameInfo::CalcResultPoints (  )
{
	static UFunction* pCalcResultPoints = 0;
	AwSDGameInfo_execCalcResultPoints_Parms parms;

	if ( !pCalcResultPoints )
		pCalcResultPoints = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.CalcResultPoints" );

	this->ProcessEvent ( pCalcResultPoints, &parms, NULL );

}*/

/*void AwSDGameInfo::AnnounceMatchInfo_SD (  )
{
	static UFunction* pAnnounceMatchInfo_SD = 0;
	AwSDGameInfo_execAnnounceMatchInfo_SD_Parms parms;

	if ( !pAnnounceMatchInfo_SD )
		pAnnounceMatchInfo_SD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.AnnounceMatchInfo_SD" );

	this->ProcessEvent ( pAnnounceMatchInfo_SD, &parms, NULL );

}*/

/*void AwSDGameInfo::AnnounceSwitchTeam (  )
{
	static UFunction* pAnnounceSwitchTeam = 0;
	AwSDGameInfo_execAnnounceSwitchTeam_Parms parms;

	if ( !pAnnounceSwitchTeam )
		pAnnounceSwitchTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.AnnounceSwitchTeam" );

	this->ProcessEvent ( pAnnounceSwitchTeam, &parms, NULL );

}*/

/*void AwSDGameInfo::PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds )
{
	static UFunction* pPrecacheGameAnnouncements = 0;
	AwSDGameInfo_execPrecacheGameAnnouncements_Parms parms;

	if ( !pPrecacheGameAnnouncements )
		pPrecacheGameAnnouncements = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.PrecacheGameAnnouncements" );

	parms.V = V;
	parms.bRewardSounds = bRewardSounds;
	this->ProcessEvent ( pPrecacheGameAnnouncements, &parms, NULL );

}*/

/*void AwSDGameInfo::InitializeSetObjectives (  )
{
	static UFunction* pInitializeSetObjectives = 0;
	AwSDGameInfo_execInitializeSetObjectives_Parms parms;

	if ( !pInitializeSetObjectives )
		pInitializeSetObjectives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.InitializeSetObjectives" );

	this->ProcessEvent ( pInitializeSetObjectives, &parms, NULL );

}*/

/*void AwSDGameInfo::EndRound ( unsigned char RoundEndReason, class APawn* Instigator, struct FString Reason )
{
	static UFunction* pEndRound = 0;
	AwSDGameInfo_execEndRound_Parms parms;

	if ( !pEndRound )
		pEndRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.EndRound" );

	parms.RoundEndReason = RoundEndReason;
	parms.Instigator = Instigator;
	parms.Reason = Reason;
	this->ProcessEvent ( pEndRound, &parms, NULL );

}*/

/*void AwSDGameInfo::ServerLogEndRound ( unsigned char RoundEndReason, class APawn* Instigator, struct FString Reason )
{
	static UFunction* pServerLogEndRound = 0;
	AwSDGameInfo_execServerLogEndRound_Parms parms;

	if ( !pServerLogEndRound )
		pServerLogEndRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.ServerLogEndRound" );

	parms.RoundEndReason = RoundEndReason;
	parms.Instigator = Instigator;
	parms.Reason = Reason;
	this->ProcessEvent ( pServerLogEndRound, &parms, NULL );

}*/

/*int AwSDGameInfo::GetWinTeamAD ( int winTeam )
{
	static UFunction* pGetWinTeamAD = 0;
	AwSDGameInfo_execGetWinTeamAD_Parms parms;

	if ( !pGetWinTeamAD )
		pGetWinTeamAD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.GetWinTeamAD" );

	parms.winTeam = winTeam;
	this->ProcessEvent ( pGetWinTeamAD, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwSDGameInfo::GetWinTeam ( unsigned char RoundEndReason )
{
	static UFunction* pGetWinTeam = 0;
	AwSDGameInfo_execGetWinTeam_Parms parms;

	if ( !pGetWinTeam )
		pGetWinTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.GetWinTeam" );

	parms.RoundEndReason = RoundEndReason;
	this->ProcessEvent ( pGetWinTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwSDGameInfo::GetRoundEndType ( unsigned char RoundEndReason )
{
	static UFunction* pGetRoundEndType = 0;
	AwSDGameInfo_execGetRoundEndType_Parms parms;

	if ( !pGetRoundEndType )
		pGetRoundEndType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.GetRoundEndType" );

	parms.RoundEndReason = RoundEndReason;
	this->ProcessEvent ( pGetRoundEndType, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwSDGameInfo::CountPlayersByTeam ( int Team )
{
	static UFunction* pCountPlayersByTeam = 0;
	AwSDGameInfo_execCountPlayersByTeam_Parms parms;

	if ( !pCountPlayersByTeam )
		pCountPlayersByTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.CountPlayersByTeam" );

	parms.Team = Team;
	this->ProcessEvent ( pCountPlayersByTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwSDGameInfo::AnnounceBeginRound (  )
{
	static UFunction* pAnnounceBeginRound = 0;
	AwSDGameInfo_execAnnounceBeginRound_Parms parms;

	if ( !pAnnounceBeginRound )
		pAnnounceBeginRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.AnnounceBeginRound" );

	this->ProcessEvent ( pAnnounceBeginRound, &parms, NULL );

}*/

/*void AwSDGameInfo::BeginRound ( bool bNoReset )
{
	static UFunction* pBeginRound = 0;
	AwSDGameInfo_execBeginRound_Parms parms;

	if ( !pBeginRound )
		pBeginRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.BeginRound" );

	parms.bNoReset = bNoReset;
	this->ProcessEvent ( pBeginRound, &parms, NULL );

}*/

/*void AwSDGameInfo::OnBombDiffused ( class APawn* TP, struct FName Tag, struct FVector FlagLocation )
{
	static UFunction* pOnBombDiffused = 0;
	AwSDGameInfo_execOnBombDiffused_Parms parms;

	if ( !pOnBombDiffused )
		pOnBombDiffused = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.OnBombDiffused" );

	parms.TP = TP;
	parms.Tag = Tag;
	parms.FlagLocation = FlagLocation;
	this->ProcessEvent ( pOnBombDiffused, &parms, NULL );

}*/

/*void AwSDGameInfo::SetObjectiveSetted ( class APawn* TP, struct FName ObjectTag, struct FVector FlagLocation )
{
	static UFunction* pSetObjectiveSetted = 0;
	AwSDGameInfo_execSetObjectiveSetted_Parms parms;

	if ( !pSetObjectiveSetted )
		pSetObjectiveSetted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.SetObjectiveSetted" );

	parms.TP = TP;
	parms.ObjectTag = ObjectTag;
	parms.FlagLocation = FlagLocation;
	this->ProcessEvent ( pSetObjectiveSetted, &parms, NULL );

}*/

/*void AwSDGameInfo::PlayObjectiveSetVociceBGM ( class APawn* TP )
{
	static UFunction* pPlayObjectiveSetVociceBGM = 0;
	AwSDGameInfo_execPlayObjectiveSetVociceBGM_Parms parms;

	if ( !pPlayObjectiveSetVociceBGM )
		pPlayObjectiveSetVociceBGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.PlayObjectiveSetVociceBGM" );

	parms.TP = TP;
	this->ProcessEvent ( pPlayObjectiveSetVociceBGM, &parms, NULL );

}*/

/*void AwSDGameInfo::GotoDefusePhase ( struct FName ObjectTag )
{
	static UFunction* pGotoDefusePhase = 0;
	AwSDGameInfo_execGotoDefusePhase_Parms parms;

	if ( !pGotoDefusePhase )
		pGotoDefusePhase = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.GotoDefusePhase" );

	parms.ObjectTag = ObjectTag;
	this->ProcessEvent ( pGotoDefusePhase, &parms, NULL );

}*/

/*void AwSDGameInfo::eventInitGame ( struct FString Options, struct FString* Error )
{
	static UFunction* pInitGame = 0;
	AwSDGameInfo_eventInitGame_Parms parms;

	if ( !pInitGame )
		pInitGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSDGameInfo.InitGame" );

	parms.Options = Options;
	this->ProcessEvent ( pInitGame, &parms, NULL );

	*Error = parms.Error;
}*/

/*float AwFlagObjective::GetObjectiveProgress (  )
{
	static UFunction* pGetObjectiveProgress = 0;
	AwFlagObjective_execGetObjectiveProgress_Parms parms;

	if ( !pGetObjectiveProgress )
		pGetObjectiveProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wFlagObjective.GetObjectiveProgress" );

	this->ProcessEvent ( pGetObjectiveProgress, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwFlagObjective::Reset (  )
{
	static UFunction* pReset = 0;
	AwFlagObjective_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wFlagObjective.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*bool AwFlagObjective::IsRelevant ( class APawn* P, bool bAliveCheck )
{
	static UFunction* pIsRelevant = 0;
	AwFlagObjective_execIsRelevant_Parms parms;

	if ( !pIsRelevant )
		pIsRelevant = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wFlagObjective.IsRelevant" );

	parms.P = P;
	parms.bAliveCheck = bAliveCheck;
	this->ProcessEvent ( pIsRelevant, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwFlagObjective::RemoveTouchingPlayer ( class APawn* P )
{
	static UFunction* pRemoveTouchingPlayer = 0;
	AwFlagObjective_execRemoveTouchingPlayer_Parms parms;

	if ( !pRemoveTouchingPlayer )
		pRemoveTouchingPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wFlagObjective.RemoveTouchingPlayer" );

	parms.P = P;
	this->ProcessEvent ( pRemoveTouchingPlayer, &parms, NULL );

}*/

/*void AwFlagObjective::AddNewTouchingPlayer ( class APawn* P )
{
	static UFunction* pAddNewTouchingPlayer = 0;
	AwFlagObjective_execAddNewTouchingPlayer_Parms parms;

	if ( !pAddNewTouchingPlayer )
		pAddNewTouchingPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wFlagObjective.AddNewTouchingPlayer" );

	parms.P = P;
	this->ProcessEvent ( pAddNewTouchingPlayer, &parms, NULL );

}*/

/*void AwFlagObjective::eventTick ( float DeltaTime )
{
	static UFunction* pTick = 0;
	AwFlagObjective_eventTick_Parms parms;

	if ( !pTick )
		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wFlagObjective.Tick" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pTick, &parms, NULL );

}*/

/*void AwFlagObjective::eventPreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	AwFlagObjective_eventPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wFlagObjective.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*void AwFlagObjective::eventUsedBy ( class APawn* User )
{
	static UFunction* pUsedBy = 0;
	AwFlagObjective_eventUsedBy_Parms parms;

	if ( !pUsedBy )
		pUsedBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wFlagObjective.UsedBy" );

	parms.User = User;
	this->ProcessEvent ( pUsedBy, &parms, NULL );

}*/

/*void AwDOMGameInfo::GetGameSpecificPurposes ( class AController* Owner, class TArray< class UObject* >* purposes )
{
	static UFunction* pGetGameSpecificPurposes = 0;
	AwDOMGameInfo_execGetGameSpecificPurposes_Parms parms;

	if ( !pGetGameSpecificPurposes )
		pGetGameSpecificPurposes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.GetGameSpecificPurposes" );

	parms.Owner = Owner;
	this->ProcessEvent ( pGetGameSpecificPurposes, &parms, NULL );

	*purposes = parms.purposes;
}*/

/*void AwDOMGameInfo::PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds )
{
	static UFunction* pPrecacheGameAnnouncements = 0;
	AwDOMGameInfo_execPrecacheGameAnnouncements_Parms parms;

	if ( !pPrecacheGameAnnouncements )
		pPrecacheGameAnnouncements = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.PrecacheGameAnnouncements" );

	parms.V = V;
	parms.bRewardSounds = bRewardSounds;
	this->ProcessEvent ( pPrecacheGameAnnouncements, &parms, NULL );

}*/

/*void AwDOMGameInfo::GetFlagsInfo ( int* outNumFlags, int* outNumCapturedFlagsByTeam1, int* outNumCapturedFlagsByTeam2 )
{
	static UFunction* pGetFlagsInfo = 0;
	AwDOMGameInfo_execGetFlagsInfo_Parms parms;

	if ( !pGetFlagsInfo )
		pGetFlagsInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.GetFlagsInfo" );

	parms.outNumFlags = *outNumFlags;
	parms.outNumCapturedFlagsByTeam1 = *outNumCapturedFlagsByTeam1;
	parms.outNumCapturedFlagsByTeam2 = *outNumCapturedFlagsByTeam2;
	this->ProcessEvent ( pGetFlagsInfo, &parms, NULL );

	*outNumFlags = parms.outNumFlags;
	*outNumCapturedFlagsByTeam1 = parms.outNumCapturedFlagsByTeam1;
	*outNumCapturedFlagsByTeam2 = parms.outNumCapturedFlagsByTeam2;
}*/

/*void AwDOMGameInfo::StartMatch (  )
{
	static UFunction* pStartMatch = 0;
	AwDOMGameInfo_execStartMatch_Parms parms;

	if ( !pStartMatch )
		pStartMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.StartMatch" );

	this->ProcessEvent ( pStartMatch, &parms, NULL );

}*/

/*void AwDOMGameInfo::CheckLastMan ( int TeamIndex )
{
	static UFunction* pCheckLastMan = 0;
	AwDOMGameInfo_execCheckLastMan_Parms parms;

	if ( !pCheckLastMan )
		pCheckLastMan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.CheckLastMan" );

	parms.TeamIndex = TeamIndex;
	this->ProcessEvent ( pCheckLastMan, &parms, NULL );

}*/

/*int AwDOMGameInfo::GetBootySeedValue (  )
{
	static UFunction* pGetBootySeedValue = 0;
	AwDOMGameInfo_execGetBootySeedValue_Parms parms;

	if ( !pGetBootySeedValue )
		pGetBootySeedValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.GetBootySeedValue" );

	this->ProcessEvent ( pGetBootySeedValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwDOMGameInfo::GetTotalPlayedTime (  )
{
	static UFunction* pGetTotalPlayedTime = 0;
	AwDOMGameInfo_execGetTotalPlayedTime_Parms parms;

	if ( !pGetTotalPlayedTime )
		pGetTotalPlayedTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.GetTotalPlayedTime" );

	this->ProcessEvent ( pGetTotalPlayedTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwDOMGameInfo::CalcResultPoints (  )
{
	static UFunction* pCalcResultPoints = 0;
	AwDOMGameInfo_execCalcResultPoints_Parms parms;

	if ( !pCalcResultPoints )
		pCalcResultPoints = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.CalcResultPoints" );

	this->ProcessEvent ( pCalcResultPoints, &parms, NULL );

}*/

/*void AwDOMGameInfo::PlayEndOfMatchMessage (  )
{
	static UFunction* pPlayEndOfMatchMessage = 0;
	AwDOMGameInfo_execPlayEndOfMatchMessage_Parms parms;

	if ( !pPlayEndOfMatchMessage )
		pPlayEndOfMatchMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.PlayEndOfMatchMessage" );

	this->ProcessEvent ( pPlayEndOfMatchMessage, &parms, NULL );

}*/

/*void AwDOMGameInfo::ClearTakerInfo (  )
{
	static UFunction* pClearTakerInfo = 0;
	AwDOMGameInfo_execClearTakerInfo_Parms parms;

	if ( !pClearTakerInfo )
		pClearTakerInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.ClearTakerInfo" );

	this->ProcessEvent ( pClearTakerInfo, &parms, NULL );

}*/

/*void AwDOMGameInfo::TakerInfo ( class APawn* TakerPawn, struct FVector FlagLocation )
{
	static UFunction* pTakerInfo = 0;
	AwDOMGameInfo_execTakerInfo_Parms parms;

	if ( !pTakerInfo )
		pTakerInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.TakerInfo" );

	parms.TakerPawn = TakerPawn;
	parms.FlagLocation = FlagLocation;
	this->ProcessEvent ( pTakerInfo, &parms, NULL );

}*/

/*void AwDOMGameInfo::FlagState_UpdateDomScore ( int AFScore, int RSAScore )
{
	static UFunction* pFlagState_UpdateDomScore = 0;
	AwDOMGameInfo_execFlagState_UpdateDomScore_Parms parms;

	if ( !pFlagState_UpdateDomScore )
		pFlagState_UpdateDomScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.FlagState_UpdateDomScore" );

	parms.AFScore = AFScore;
	parms.RSAScore = RSAScore;
	this->ProcessEvent ( pFlagState_UpdateDomScore, &parms, NULL );

}*/

/*void AwDOMGameInfo::FlagState_TakePoint ( class TArray< int > TakerUID, struct FName FlagTag )
{
	static UFunction* pFlagState_TakePoint = 0;
	AwDOMGameInfo_execFlagState_TakePoint_Parms parms;

	if ( !pFlagState_TakePoint )
		pFlagState_TakePoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.FlagState_TakePoint" );

	parms.TakerUID = TakerUID;
	parms.FlagTag = FlagTag;
	this->ProcessEvent ( pFlagState_TakePoint, &parms, NULL );

}*/

/*void AwDOMGameInfo::AnnounceFlagState ( unsigned char byState, unsigned char byTeam, struct FName FlagTag )
{
	static UFunction* pAnnounceFlagState = 0;
	AwDOMGameInfo_execAnnounceFlagState_Parms parms;

	if ( !pAnnounceFlagState )
		pAnnounceFlagState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.AnnounceFlagState" );

	parms.byState = byState;
	parms.byTeam = byTeam;
	parms.FlagTag = FlagTag;
	this->ProcessEvent ( pAnnounceFlagState, &parms, NULL );

}*/

/*void AwDOMGameInfo::AnnounceFlagCapture ( unsigned char byState, unsigned char byTeam, unsigned char byFlagIndex )
{
	static UFunction* pAnnounceFlagCapture = 0;
	AwDOMGameInfo_execAnnounceFlagCapture_Parms parms;

	if ( !pAnnounceFlagCapture )
		pAnnounceFlagCapture = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.AnnounceFlagCapture" );

	parms.byState = byState;
	parms.byTeam = byTeam;
	parms.byFlagIndex = byFlagIndex;
	this->ProcessEvent ( pAnnounceFlagCapture, &parms, NULL );

}*/

/*void AwDOMGameInfo::InitializeCodes (  )
{
	static UFunction* pInitializeCodes = 0;
	AwDOMGameInfo_execInitializeCodes_Parms parms;

	if ( !pInitializeCodes )
		pInitializeCodes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.InitializeCodes" );

	this->ProcessEvent ( pInitializeCodes, &parms, NULL );

}*/

/*void AwDOMGameInfo::AnnounceAllFlagCaptured ( unsigned char byTeam )
{
	static UFunction* pAnnounceAllFlagCaptured = 0;
	AwDOMGameInfo_execAnnounceAllFlagCaptured_Parms parms;

	if ( !pAnnounceAllFlagCaptured )
		pAnnounceAllFlagCaptured = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.AnnounceAllFlagCaptured" );

	parms.byTeam = byTeam;
	this->ProcessEvent ( pAnnounceAllFlagCaptured, &parms, NULL );

}*/

/*bool AwDOMGameInfo::IsAllFlagCaptured (  )
{
	static UFunction* pIsAllFlagCaptured = 0;
	AwDOMGameInfo_execIsAllFlagCaptured_Parms parms;

	if ( !pIsAllFlagCaptured )
		pIsAllFlagCaptured = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.IsAllFlagCaptured" );

	this->ProcessEvent ( pIsAllFlagCaptured, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AwDOMGameInfo::RatePlayerStart ( class ANavigationPoint* N, unsigned char Team, class AController* Player )
{
	static UFunction* pRatePlayerStart = 0;
	AwDOMGameInfo_execRatePlayerStart_Parms parms;

	if ( !pRatePlayerStart )
		pRatePlayerStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.RatePlayerStart" );

	parms.N = N;
	parms.Team = Team;
	parms.Player = Player;
	this->ProcessEvent ( pRatePlayerStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class ANavigationPoint* AwDOMGameInfo::FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName )
{
	static UFunction* pFindPlayerStart = 0;
	AwDOMGameInfo_execFindPlayerStart_Parms parms;

	if ( !pFindPlayerStart )
		pFindPlayerStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.FindPlayerStart" );

	parms.Player = Player;
	parms.inTeam = inTeam;
	parms.incomingName = incomingName;
	this->ProcessEvent ( pFindPlayerStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwDOMGameInfo::IsSDRespawnTime (  )
{
	static UFunction* pIsSDRespawnTime = 0;
	AwDOMGameInfo_execIsSDRespawnTime_Parms parms;

	if ( !pIsSDRespawnTime )
		pIsSDRespawnTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.IsSDRespawnTime" );

	this->ProcessEvent ( pIsSDRespawnTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class TArray< unsigned char > AwDOMGameInfo::GetShuffledFlags (  )
{
	static UFunction* pGetShuffledFlags = 0;
	AwDOMGameInfo_execGetShuffledFlags_Parms parms;

	if ( !pGetShuffledFlags )
		pGetShuffledFlags = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.GetShuffledFlags" );

	this->ProcessEvent ( pGetShuffledFlags, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AwFlagObjective* AwDOMGameInfo::GetFlagObjectiveByType ( unsigned char FlagType )
{
	static UFunction* pGetFlagObjectiveByType = 0;
	AwDOMGameInfo_execGetFlagObjectiveByType_Parms parms;

	if ( !pGetFlagObjectiveByType )
		pGetFlagObjectiveByType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.GetFlagObjectiveByType" );

	parms.FlagType = FlagType;
	this->ProcessEvent ( pGetFlagObjectiveByType, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class TArray< class ANavigationPoint* > AwDOMGameInfo::GetRespawnPointsFlagNeutral ( bool checkFail )
{
	static UFunction* pGetRespawnPointsFlagNeutral = 0;
	AwDOMGameInfo_execGetRespawnPointsFlagNeutral_Parms parms;

	if ( !pGetRespawnPointsFlagNeutral )
		pGetRespawnPointsFlagNeutral = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.GetRespawnPointsFlagNeutral" );

	parms.checkFail = checkFail;
	this->ProcessEvent ( pGetRespawnPointsFlagNeutral, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class TArray< class ANavigationPoint* > AwDOMGameInfo::GetRespawnPointsForFlag ( class AwFlagObjective* flag )
{
	static UFunction* pGetRespawnPointsForFlag = 0;
	AwDOMGameInfo_execGetRespawnPointsForFlag_Parms parms;

	if ( !pGetRespawnPointsForFlag )
		pGetRespawnPointsForFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.GetRespawnPointsForFlag" );

	parms.flag = flag;
	this->ProcessEvent ( pGetRespawnPointsForFlag, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwDOMGameInfo::IsAppropriateRespawnPoint ( class ANavigationPoint* N, unsigned char Team )
{
	static UFunction* pIsAppropriateRespawnPoint = 0;
	AwDOMGameInfo_execIsAppropriateRespawnPoint_Parms parms;

	if ( !pIsAppropriateRespawnPoint )
		pIsAppropriateRespawnPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.IsAppropriateRespawnPoint" );

	parms.N = N;
	parms.Team = Team;
	this->ProcessEvent ( pIsAppropriateRespawnPoint, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwDOMGameInfo::RespawnPlayer ( class AController* C, bool bClearSpecials )
{
	static UFunction* pRespawnPlayer = 0;
	AwDOMGameInfo_execRespawnPlayer_Parms parms;

	if ( !pRespawnPlayer )
		pRespawnPlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.RespawnPlayer" );

	parms.C = C;
	parms.bClearSpecials = bClearSpecials;
	this->ProcessEvent ( pRespawnPlayer, &parms, NULL );

}*/

/*void AwDOMGameInfo::EndDOMGame ( int iWinningTeam, class APawn* Instigator, struct FString Reason )
{
	static UFunction* pEndDOMGame = 0;
	AwDOMGameInfo_execEndDOMGame_Parms parms;

	if ( !pEndDOMGame )
		pEndDOMGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.EndDOMGame" );

	parms.iWinningTeam = iWinningTeam;
	parms.Instigator = Instigator;
	parms.Reason = Reason;
	this->ProcessEvent ( pEndDOMGame, &parms, NULL );

}*/

/*void AwDOMGameInfo::OnRoundTimeOverWithoutObjectPlanted (  )
{
	static UFunction* pOnRoundTimeOverWithoutObjectPlanted = 0;
	AwDOMGameInfo_execOnRoundTimeOverWithoutObjectPlanted_Parms parms;

	if ( !pOnRoundTimeOverWithoutObjectPlanted )
		pOnRoundTimeOverWithoutObjectPlanted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.OnRoundTimeOverWithoutObjectPlanted" );

	this->ProcessEvent ( pOnRoundTimeOverWithoutObjectPlanted, &parms, NULL );

}*/

/*void AwDOMGameInfo::EndRound ( unsigned char RoundEndReason, class APawn* Instigator, struct FString Reason )
{
	static UFunction* pEndRound = 0;
	AwDOMGameInfo_execEndRound_Parms parms;

	if ( !pEndRound )
		pEndRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.EndRound" );

	parms.RoundEndReason = RoundEndReason;
	parms.Instigator = Instigator;
	parms.Reason = Reason;
	this->ProcessEvent ( pEndRound, &parms, NULL );

}*/

/*void AwDOMGameInfo::AddTeamScore ( int iTeamIndex )
{
	static UFunction* pAddTeamScore = 0;
	AwDOMGameInfo_execAddTeamScore_Parms parms;

	if ( !pAddTeamScore )
		pAddTeamScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.AddTeamScore" );

	parms.iTeamIndex = iTeamIndex;
	this->ProcessEvent ( pAddTeamScore, &parms, NULL );

}*/

/*void AwDOMGameInfo::CheckEndGameAfterRoundTimeOver (  )
{
	static UFunction* pCheckEndGameAfterRoundTimeOver = 0;
	AwDOMGameInfo_execCheckEndGameAfterRoundTimeOver_Parms parms;

	if ( !pCheckEndGameAfterRoundTimeOver )
		pCheckEndGameAfterRoundTimeOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.CheckEndGameAfterRoundTimeOver" );

	this->ProcessEvent ( pCheckEndGameAfterRoundTimeOver, &parms, NULL );

}*/

/*void AwDOMGameInfo::ContinueMatch (  )
{
	static UFunction* pContinueMatch = 0;
	AwDOMGameInfo_execContinueMatch_Parms parms;

	if ( !pContinueMatch )
		pContinueMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.ContinueMatch" );

	this->ProcessEvent ( pContinueMatch, &parms, NULL );

}*/

/*void AwDOMGameInfo::ChangeHostExtraWork (  )
{
	static UFunction* pChangeHostExtraWork = 0;
	AwDOMGameInfo_execChangeHostExtraWork_Parms parms;

	if ( !pChangeHostExtraWork )
		pChangeHostExtraWork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.ChangeHostExtraWork" );

	this->ProcessEvent ( pChangeHostExtraWork, &parms, NULL );

}*/

/*class AActor* AwDOMGameInfo::GetNearFlag ( class AActor* A )
{
	static UFunction* pGetNearFlag = 0;
	AwDOMGameInfo_execGetNearFlag_Parms parms;

	if ( !pGetNearFlag )
		pGetNearFlag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.GetNearFlag" );

	parms.A = A;
	this->ProcessEvent ( pGetNearFlag, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwDOMGameInfo::GetGameSpecificActions ( class AController* C, class UwNPCActions* npcActions, class TArray< class UObject* >* Actions )
{
	static UFunction* pGetGameSpecificActions = 0;
	AwDOMGameInfo_execGetGameSpecificActions_Parms parms;

	if ( !pGetGameSpecificActions )
		pGetGameSpecificActions = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wDOMGameInfo.GetGameSpecificActions" );

	parms.C = C;
	parms.npcActions = npcActions;
	this->ProcessEvent ( pGetGameSpecificActions, &parms, NULL );

	*Actions = parms.Actions;
}*/

/*void AwBombObjective::PrecacheAnnouncer ( class AAnnouncerVoice* V, bool bRewardSounds )
{
	static UFunction* pPrecacheAnnouncer = 0;
	AwBombObjective_execPrecacheAnnouncer_Parms parms;

	if ( !pPrecacheAnnouncer )
		pPrecacheAnnouncer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wBombObjective.PrecacheAnnouncer" );

	parms.V = V;
	parms.bRewardSounds = bRewardSounds;
	this->ProcessEvent ( pPrecacheAnnouncer, &parms, NULL );

}*/

/*void AwBombObjective::Reset (  )
{
	static UFunction* pReset = 0;
	AwBombObjective_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wBombObjective.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*bool AwBombObjective::BetterObjectiveThan ( class AGameObjective* Best, unsigned char DesiredTeamNum, unsigned char RequesterTeamNum )
{
	static UFunction* pBetterObjectiveThan = 0;
	AwBombObjective_execBetterObjectiveThan_Parms parms;

	if ( !pBetterObjectiveThan )
		pBetterObjectiveThan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wBombObjective.BetterObjectiveThan" );

	parms.Best = Best;
	parms.DesiredTeamNum = DesiredTeamNum;
	parms.RequesterTeamNum = RequesterTeamNum;
	this->ProcessEvent ( pBetterObjectiveThan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwBombObjective::BotNearObjective ( class ABot* B )
{
	static UFunction* pBotNearObjective = 0;
	AwBombObjective_execBotNearObjective_Parms parms;

	if ( !pBotNearObjective )
		pBotNearObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wBombObjective.BotNearObjective" );

	parms.B = B;
	this->ProcessEvent ( pBotNearObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBombObjective::SetActive ( bool bActiveStatus )
{
	static UFunction* pSetActive = 0;
	AwBombObjective_execSetActive_Parms parms;

	if ( !pSetActive )
		pSetActive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wBombObjective.SetActive" );

	parms.bActiveStatus = bActiveStatus;
	this->ProcessEvent ( pSetActive, &parms, NULL );

}*/

/*void AwBombObjective::eventPreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	AwBombObjective_eventPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wBombObjective.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*void AwGameObject_SBTBomb::Drop ( struct FVector NewVel, struct FString sReason )
{
	static UFunction* pDrop = 0;
	AwGameObject_SBTBomb_execDrop_Parms parms;

	if ( !pDrop )
		pDrop = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_SBTBomb.Drop" );

	parms.NewVel = NewVel;
	parms.sReason = sReason;
	this->ProcessEvent ( pDrop, &parms, NULL );

}*/

/*void AwGameObject_SBTBomb::ProcessDropMessage (  )
{
	static UFunction* pProcessDropMessage = 0;
	AwGameObject_SBTBomb_execProcessDropMessage_Parms parms;

	if ( !pProcessDropMessage )
		pProcessDropMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_SBTBomb.ProcessDropMessage" );

	this->ProcessEvent ( pProcessDropMessage, &parms, NULL );

}*/

/*void AwGameObject_SBTBomb::ProcessSetHolderMessage ( class AController* C )
{
	static UFunction* pProcessSetHolderMessage = 0;
	AwGameObject_SBTBomb_execProcessSetHolderMessage_Parms parms;

	if ( !pProcessSetHolderMessage )
		pProcessSetHolderMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_SBTBomb.ProcessSetHolderMessage" );

	parms.C = C;
	this->ProcessEvent ( pProcessSetHolderMessage, &parms, NULL );

}*/

/*void AwGameObject_SBTBomb::SetAttackingTeam ( int Team )
{
	static UFunction* pSetAttackingTeam = 0;
	AwGameObject_SBTBomb_execSetAttackingTeam_Parms parms;

	if ( !pSetAttackingTeam )
		pSetAttackingTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_SBTBomb.SetAttackingTeam" );

	parms.Team = Team;
	this->ProcessEvent ( pSetAttackingTeam, &parms, NULL );

}*/

/*void AwGameObject_SBTBomb::OnSetHolder ( class AController* C )
{
	static UFunction* pOnSetHolder = 0;
	AwGameObject_SBTBomb_execOnSetHolder_Parms parms;

	if ( !pOnSetHolder )
		pOnSetHolder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_SBTBomb.OnSetHolder" );

	parms.C = C;
	this->ProcessEvent ( pOnSetHolder, &parms, NULL );

}*/

/*bool AwGameObject_SBTBomb::CanBePickedUpBy ( class APawn* P )
{
	static UFunction* pCanBePickedUpBy = 0;
	AwGameObject_SBTBomb_execCanBePickedUpBy_Parms parms;

	if ( !pCanBePickedUpBy )
		pCanBePickedUpBy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wGameObject_SBTBomb.CanBePickedUpBy" );

	parms.P = P;
	this->ProcessEvent ( pCanBePickedUpBy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwSBTSetObjective::eventPreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	AwSBTSetObjective_eventPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTSetObjective.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*void AwSBTDiffuseObjective::OnBombDiffused ( class APawn* P )
{
	static UFunction* pOnBombDiffused = 0;
	AwSBTDiffuseObjective_execOnBombDiffused_Parms parms;

	if ( !pOnBombDiffused )
		pOnBombDiffused = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTDiffuseObjective.OnBombDiffused" );

	parms.P = P;
	this->ProcessEvent ( pOnBombDiffused, &parms, NULL );

}*/

/*void AwSBTDiffuseObjective::SetBombHolder ( class APawn* P )
{
	static UFunction* pSetBombHolder = 0;
	AwSBTDiffuseObjective_execSetBombHolder_Parms parms;

	if ( !pSetBombHolder )
		pSetBombHolder = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTDiffuseObjective.SetBombHolder" );

	parms.P = P;
	this->ProcessEvent ( pSetBombHolder, &parms, NULL );

}*/

/*void AwSBTDiffuseObjective::ResetGameInfoOnBombDiffused (  )
{
	static UFunction* pResetGameInfoOnBombDiffused = 0;
	AwSBTDiffuseObjective_execResetGameInfoOnBombDiffused_Parms parms;

	if ( !pResetGameInfoOnBombDiffused )
		pResetGameInfoOnBombDiffused = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTDiffuseObjective.ResetGameInfoOnBombDiffused" );

	this->ProcessEvent ( pResetGameInfoOnBombDiffused, &parms, NULL );

}*/

/*void AwSBTDiffuseObjective::SetActive ( bool bActiveStatus )
{
	static UFunction* pSetActive = 0;
	AwSBTDiffuseObjective_execSetActive_Parms parms;

	if ( !pSetActive )
		pSetActive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTDiffuseObjective.SetActive" );

	parms.bActiveStatus = bActiveStatus;
	this->ProcessEvent ( pSetActive, &parms, NULL );

}*/

/*void AwSBTDiffuseObjective::SetTeam ( unsigned char TeamIndex )
{
	static UFunction* pSetTeam = 0;
	AwSBTDiffuseObjective_execSetTeam_Parms parms;

	if ( !pSetTeam )
		pSetTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTDiffuseObjective.SetTeam" );

	parms.TeamIndex = TeamIndex;
	this->ProcessEvent ( pSetTeam, &parms, NULL );

}*/

/*void AwSBTDiffuseObjective::eventPreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	AwSBTDiffuseObjective_eventPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTDiffuseObjective.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*void AwSBTGameInfo::AnnounceAlmostWinningTeam (  )
{
	static UFunction* pAnnounceAlmostWinningTeam = 0;
	AwSBTGameInfo_execAnnounceAlmostWinningTeam_Parms parms;

	if ( !pAnnounceAlmostWinningTeam )
		pAnnounceAlmostWinningTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.AnnounceAlmostWinningTeam" );

	this->ProcessEvent ( pAnnounceAlmostWinningTeam, &parms, NULL );

}*/

/*int AwSBTGameInfo::GetWinTeamAD ( int winTeam )
{
	static UFunction* pGetWinTeamAD = 0;
	AwSBTGameInfo_execGetWinTeamAD_Parms parms;

	if ( !pGetWinTeamAD )
		pGetWinTeamAD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.GetWinTeamAD" );

	parms.winTeam = winTeam;
	this->ProcessEvent ( pGetWinTeamAD, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwSBTGameInfo::ProcessSwitchTeam ( bool bNoReset )
{
	static UFunction* pProcessSwitchTeam = 0;
	AwSBTGameInfo_execProcessSwitchTeam_Parms parms;

	if ( !pProcessSwitchTeam )
		pProcessSwitchTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.ProcessSwitchTeam" );

	parms.bNoReset = bNoReset;
	this->ProcessEvent ( pProcessSwitchTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AwSBTGameInfo::RatePlayerStart ( class ANavigationPoint* N, unsigned char Team, class AController* Player )
{
	static UFunction* pRatePlayerStart = 0;
	AwSBTGameInfo_execRatePlayerStart_Parms parms;

	if ( !pRatePlayerStart )
		pRatePlayerStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.RatePlayerStart" );

	parms.N = N;
	parms.Team = Team;
	parms.Player = Player;
	this->ProcessEvent ( pRatePlayerStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class ANavigationPoint* AwSBTGameInfo::FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName )
{
	static UFunction* pFindPlayerStart = 0;
	AwSBTGameInfo_execFindPlayerStart_Parms parms;

	if ( !pFindPlayerStart )
		pFindPlayerStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.FindPlayerStart" );

	parms.Player = Player;
	parms.inTeam = inTeam;
	parms.incomingName = incomingName;
	this->ProcessEvent ( pFindPlayerStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwSBTGameInfo::IsSDRespawnTime (  )
{
	static UFunction* pIsSDRespawnTime = 0;
	AwSBTGameInfo_execIsSDRespawnTime_Parms parms;

	if ( !pIsSDRespawnTime )
		pIsSDRespawnTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.IsSDRespawnTime" );

	this->ProcessEvent ( pIsSDRespawnTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class TArray< class ANavigationPoint* > AwSBTGameInfo::GetRespawnCandidatesByTeamGG ( unsigned char Team )
{
	static UFunction* pGetRespawnCandidatesByTeamGG = 0;
	AwSBTGameInfo_execGetRespawnCandidatesByTeamGG_Parms parms;

	if ( !pGetRespawnCandidatesByTeamGG )
		pGetRespawnCandidatesByTeamGG = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.GetRespawnCandidatesByTeamGG" );

	parms.Team = Team;
	this->ProcessEvent ( pGetRespawnCandidatesByTeamGG, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class TArray< class ANavigationPoint* > AwSBTGameInfo::GetRespawnCandidatesByTeam ( unsigned char Team, bool checkFail )
{
	static UFunction* pGetRespawnCandidatesByTeam = 0;
	AwSBTGameInfo_execGetRespawnCandidatesByTeam_Parms parms;

	if ( !pGetRespawnCandidatesByTeam )
		pGetRespawnCandidatesByTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.GetRespawnCandidatesByTeam" );

	parms.Team = Team;
	parms.checkFail = checkFail;
	this->ProcessEvent ( pGetRespawnCandidatesByTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwSBTGameInfo::IsAppropriateRespawnPoint ( class ANavigationPoint* N, unsigned char Team )
{
	static UFunction* pIsAppropriateRespawnPoint = 0;
	AwSBTGameInfo_execIsAppropriateRespawnPoint_Parms parms;

	if ( !pIsAppropriateRespawnPoint )
		pIsAppropriateRespawnPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.IsAppropriateRespawnPoint" );

	parms.N = N;
	parms.Team = Team;
	this->ProcessEvent ( pIsAppropriateRespawnPoint, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwSBTGameInfo::AnnounceSwitchTeam (  )
{
	static UFunction* pAnnounceSwitchTeam = 0;
	AwSBTGameInfo_execAnnounceSwitchTeam_Parms parms;

	if ( !pAnnounceSwitchTeam )
		pAnnounceSwitchTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.AnnounceSwitchTeam" );

	this->ProcessEvent ( pAnnounceSwitchTeam, &parms, NULL );

}*/

/*int AwSBTGameInfo::GetPlayerStartTeam ( class ANavigationPoint* N, int Team )
{
	static UFunction* pGetPlayerStartTeam = 0;
	AwSBTGameInfo_execGetPlayerStartTeam_Parms parms;

	if ( !pGetPlayerStartTeam )
		pGetPlayerStartTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.GetPlayerStartTeam" );

	parms.N = N;
	parms.Team = Team;
	this->ProcessEvent ( pGetPlayerStartTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwSBTGameInfo::ForceObjectiveDefenderTeamIndex (  )
{
	static UFunction* pForceObjectiveDefenderTeamIndex = 0;
	AwSBTGameInfo_execForceObjectiveDefenderTeamIndex_Parms parms;

	if ( !pForceObjectiveDefenderTeamIndex )
		pForceObjectiveDefenderTeamIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.ForceObjectiveDefenderTeamIndex" );

	this->ProcessEvent ( pForceObjectiveDefenderTeamIndex, &parms, NULL );

}*/

/*void AwSBTGameInfo::OnRoundTimeOverWithoutObjectPlanted (  )
{
	static UFunction* pOnRoundTimeOverWithoutObjectPlanted = 0;
	AwSBTGameInfo_execOnRoundTimeOverWithoutObjectPlanted_Parms parms;

	if ( !pOnRoundTimeOverWithoutObjectPlanted )
		pOnRoundTimeOverWithoutObjectPlanted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.OnRoundTimeOverWithoutObjectPlanted" );

	this->ProcessEvent ( pOnRoundTimeOverWithoutObjectPlanted, &parms, NULL );

}*/

/*void AwSBTGameInfo::SetObjectiveSetted ( class APawn* TP, struct FName ObjectTag, struct FVector FlagLocation )
{
	static UFunction* pSetObjectiveSetted = 0;
	AwSBTGameInfo_execSetObjectiveSetted_Parms parms;

	if ( !pSetObjectiveSetted )
		pSetObjectiveSetted = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.SetObjectiveSetted" );

	parms.TP = TP;
	parms.ObjectTag = ObjectTag;
	parms.FlagLocation = FlagLocation;
	this->ProcessEvent ( pSetObjectiveSetted, &parms, NULL );

}*/

/*void AwSBTGameInfo::PlayObjectiveSetVociceBGM ( class APawn* TP )
{
	static UFunction* pPlayObjectiveSetVociceBGM = 0;
	AwSBTGameInfo_execPlayObjectiveSetVociceBGM_Parms parms;

	if ( !pPlayObjectiveSetVociceBGM )
		pPlayObjectiveSetVociceBGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.PlayObjectiveSetVociceBGM" );

	parms.TP = TP;
	this->ProcessEvent ( pPlayObjectiveSetVociceBGM, &parms, NULL );

}*/

/*void AwSBTGameInfo::GotoDefusePhase ( struct FName ObjectTag )
{
	static UFunction* pGotoDefusePhase = 0;
	AwSBTGameInfo_execGotoDefusePhase_Parms parms;

	if ( !pGotoDefusePhase )
		pGotoDefusePhase = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.GotoDefusePhase" );

	parms.ObjectTag = ObjectTag;
	this->ProcessEvent ( pGotoDefusePhase, &parms, NULL );

}*/

/*void AwSBTGameInfo::AnnounceBeginRound (  )
{
	static UFunction* pAnnounceBeginRound = 0;
	AwSBTGameInfo_execAnnounceBeginRound_Parms parms;

	if ( !pAnnounceBeginRound )
		pAnnounceBeginRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.AnnounceBeginRound" );

	this->ProcessEvent ( pAnnounceBeginRound, &parms, NULL );

}*/

/*void AwSBTGameInfo::BeginRound ( bool bNoReset )
{
	static UFunction* pBeginRound = 0;
	AwSBTGameInfo_execBeginRound_Parms parms;

	if ( !pBeginRound )
		pBeginRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.BeginRound" );

	parms.bNoReset = bNoReset;
	this->ProcessEvent ( pBeginRound, &parms, NULL );

}*/

/*class APlayerController* AwSBTGameInfo::eventLogin ( struct FString Portal, struct FString Options, struct FString* Error )
{
	static UFunction* pLogin = 0;
	AwSBTGameInfo_eventLogin_Parms parms;

	if ( !pLogin )
		pLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.Login" );

	parms.Portal = Portal;
	parms.Options = Options;
	this->ProcessEvent ( pLogin, &parms, NULL );

	*Error = parms.Error;
	return parms.ReturnValue;
}*/

/*void AwSBTGameInfo::StartHumanPlayers (  )
{
	static UFunction* pStartHumanPlayers = 0;
	AwSBTGameInfo_execStartHumanPlayers_Parms parms;

	if ( !pStartHumanPlayers )
		pStartHumanPlayers = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.StartHumanPlayers" );

	this->ProcessEvent ( pStartHumanPlayers, &parms, NULL );

}*/

/*void AwSBTGameInfo::CheckLastMan ( int TeamIndex )
{
	static UFunction* pCheckLastMan = 0;
	AwSBTGameInfo_execCheckLastMan_Parms parms;

	if ( !pCheckLastMan )
		pCheckLastMan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.CheckLastMan" );

	parms.TeamIndex = TeamIndex;
	this->ProcessEvent ( pCheckLastMan, &parms, NULL );

}*/

/*bool AwSBTGameInfo::EndGameByTeamNoneLeft ( class APlayerReplicationInfo* Living )
{
	static UFunction* pEndGameByTeamNoneLeft = 0;
	AwSBTGameInfo_execEndGameByTeamNoneLeft_Parms parms;

	if ( !pEndGameByTeamNoneLeft )
		pEndGameByTeamNoneLeft = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.EndGameByTeamNoneLeft" );

	parms.Living = Living;
	this->ProcessEvent ( pEndGameByTeamNoneLeft, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwSBTGameInfo::AllowBecomeActivePlayer ( class APlayerController* P )
{
	static UFunction* pAllowBecomeActivePlayer = 0;
	AwSBTGameInfo_execAllowBecomeActivePlayer_Parms parms;

	if ( !pAllowBecomeActivePlayer )
		pAllowBecomeActivePlayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.AllowBecomeActivePlayer" );

	parms.P = P;
	this->ProcessEvent ( pAllowBecomeActivePlayer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwSBTGameInfo::CalcRoundResultPoints ( int ScoringTeam )
{
	static UFunction* pCalcRoundResultPoints = 0;
	AwSBTGameInfo_execCalcRoundResultPoints_Parms parms;

	if ( !pCalcRoundResultPoints )
		pCalcRoundResultPoints = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.CalcRoundResultPoints" );

	parms.ScoringTeam = ScoringTeam;
	this->ProcessEvent ( pCalcRoundResultPoints, &parms, NULL );

}*/

/*void AwSBTGameInfo::CalcResultPoints (  )
{
	static UFunction* pCalcResultPoints = 0;
	AwSBTGameInfo_execCalcResultPoints_Parms parms;

	if ( !pCalcResultPoints )
		pCalcResultPoints = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.CalcResultPoints" );

	this->ProcessEvent ( pCalcResultPoints, &parms, NULL );

}*/

/*void AwSBTGameInfo::PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds )
{
	static UFunction* pPrecacheGameAnnouncements = 0;
	AwSBTGameInfo_execPrecacheGameAnnouncements_Parms parms;

	if ( !pPrecacheGameAnnouncements )
		pPrecacheGameAnnouncements = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.PrecacheGameAnnouncements" );

	parms.V = V;
	parms.bRewardSounds = bRewardSounds;
	this->ProcessEvent ( pPrecacheGameAnnouncements, &parms, NULL );

}*/

/*bool AwSBTGameInfo::IsNewPlayerGotoSpectating (  )
{
	static UFunction* pIsNewPlayerGotoSpectating = 0;
	AwSBTGameInfo_execIsNewPlayerGotoSpectating_Parms parms;

	if ( !pIsNewPlayerGotoSpectating )
		pIsNewPlayerGotoSpectating = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.IsNewPlayerGotoSpectating" );

	this->ProcessEvent ( pIsNewPlayerGotoSpectating, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwSBTGameInfo::InitializeGameInfo ( bool bNoReset, bool bChangeTeam )
{
	static UFunction* pInitializeGameInfo = 0;
	AwSBTGameInfo_execInitializeGameInfo_Parms parms;

	if ( !pInitializeGameInfo )
		pInitializeGameInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.InitializeGameInfo" );

	parms.bNoReset = bNoReset;
	parms.bChangeTeam = bChangeTeam;
	this->ProcessEvent ( pInitializeGameInfo, &parms, NULL );

}*/

/*void AwSBTGameInfo::eventInitGame ( struct FString Options, struct FString* Error )
{
	static UFunction* pInitGame = 0;
	AwSBTGameInfo_eventInitGame_Parms parms;

	if ( !pInitGame )
		pInitGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wSBTGameInfo.InitGame" );

	parms.Options = Options;
	this->ProcessEvent ( pInitGame, &parms, NULL );

	*Error = parms.Error;
}*/

/*bool AwBombObjective_Delivery::TellBotHowToDisable ( class ABot* B )
{
	static UFunction* pTellBotHowToDisable = 0;
	AwBombObjective_Delivery_execTellBotHowToDisable_Parms parms;

	if ( !pTellBotHowToDisable )
		pTellBotHowToDisable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wBombObjective_Delivery.TellBotHowToDisable" );

	parms.B = B;
	this->ProcessEvent ( pTellBotHowToDisable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBombObjective_Delivery::ForceDisableObjective ( class APawn* Instigator )
{
	static UFunction* pForceDisableObjective = 0;
	AwBombObjective_Delivery_execForceDisableObjective_Parms parms;

	if ( !pForceDisableObjective )
		pForceDisableObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wBombObjective_Delivery.ForceDisableObjective" );

	parms.Instigator = Instigator;
	this->ProcessEvent ( pForceDisableObjective, &parms, NULL );

}*/

/*void AwBombObjective_Delivery::DisableObjective ( class APawn* Instigator )
{
	static UFunction* pDisableObjective = 0;
	AwBombObjective_Delivery_execDisableObjective_Parms parms;

	if ( !pDisableObjective )
		pDisableObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wBombObjective_Delivery.DisableObjective" );

	parms.Instigator = Instigator;
	this->ProcessEvent ( pDisableObjective, &parms, NULL );

}*/

/*void AwBombObjective_Delivery::CompleteObjective ( class APawn* Instigator )
{
	static UFunction* pCompleteObjective = 0;
	AwBombObjective_Delivery_execCompleteObjective_Parms parms;

	if ( !pCompleteObjective )
		pCompleteObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wBombObjective_Delivery.CompleteObjective" );

	parms.Instigator = Instigator;
	this->ProcessEvent ( pCompleteObjective, &parms, NULL );

}*/

/*bool AwBombObjective_Delivery::IsRelevant ( class APawn* Instigator, bool bAliveCheck )
{
	static UFunction* pIsRelevant = 0;
	AwBombObjective_Delivery_execIsRelevant_Parms parms;

	if ( !pIsRelevant )
		pIsRelevant = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wBombObjective_Delivery.IsRelevant" );

	parms.Instigator = Instigator;
	parms.bAliveCheck = bAliveCheck;
	this->ProcessEvent ( pIsRelevant, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwBombObjective_Delivery::eventPreBeginPlay (  )
{
	static UFunction* pPreBeginPlay = 0;
	AwBombObjective_Delivery_eventPreBeginPlay_Parms parms;

	if ( !pPreBeginPlay )
		pPreBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wBombObjective_Delivery.PreBeginPlay" );

	this->ProcessEvent ( pPreBeginPlay, &parms, NULL );

}*/

/*void AwMSPlayerReplicationInfo::Reset (  )
{
	static UFunction* pReset = 0;
	AwMSPlayerReplicationInfo_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSPlayerReplicationInfo.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*bool AwMSPlayerReplicationInfo::CanBotTeleport ( class AController* C )
{
	static UFunction* pCanBotTeleport = 0;
	AwMSPlayerReplicationInfo_execCanBotTeleport_Parms parms;

	if ( !pCanBotTeleport )
		pCanBotTeleport = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSPlayerReplicationInfo.CanBotTeleport" );

	parms.C = C;
	this->ProcessEvent ( pCanBotTeleport, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwMSPlayerReplicationInfo::Timer (  )
{
	static UFunction* pTimer = 0;
	AwMSPlayerReplicationInfo_execTimer_Parms parms;

	if ( !pTimer )
		pTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMSPlayerReplicationInfo.Timer" );

	this->ProcessEvent ( pTimer, &parms, NULL );

}*/

/*void AwMessage_MSKillMessages::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pClientReceive = 0;
	AwMessage_MSKillMessages_execClientReceive_Parms parms;

	if ( !pClientReceive )
		pClientReceive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMessage_MSKillMessages.ClientReceive" );

	parms.P = P;
	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pClientReceive, &parms, NULL );

}*/

/*struct FString AwMessage_MSKillMessages::GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject )
{
	static UFunction* pGetString = 0;
	AwMessage_MSKillMessages_execGetString_Parms parms;

	if ( !pGetString )
		pGetString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wMessage_MSKillMessages.GetString" );

	parms.Switch = Switch;
	parms.RelatedPRI_1 = RelatedPRI_1;
	parms.RelatedPRI_2 = RelatedPRI_2;
	parms.OptionalObject = OptionalObject;
	this->ProcessEvent ( pGetString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHUD_Mission::DrawMissionIcon ( class UCanvas* C, class AwPawn* curPawn )
{
	static UFunction* pDrawMissionIcon = 0;
	AwHUD_Mission_execDrawMissionIcon_Parms parms;

	if ( !pDrawMissionIcon )
		pDrawMissionIcon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawMissionIcon" );

	parms.C = C;
	parms.curPawn = curPawn;
	this->ProcessEvent ( pDrawMissionIcon, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawIntroTitle ( class UCanvas* C )
{
	static UFunction* pDrawIntroTitle = 0;
	AwHUD_Mission_execDrawIntroTitle_Parms parms;

	if ( !pDrawIntroTitle )
		pDrawIntroTitle = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawIntroTitle" );

	parms.C = C;
	this->ProcessEvent ( pDrawIntroTitle, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawCinematicHUD ( class UCanvas* C )
{
	static UFunction* pDrawCinematicHUD = 0;
	AwHUD_Mission_execDrawCinematicHUD_Parms parms;

	if ( !pDrawCinematicHUD )
		pDrawCinematicHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawCinematicHUD" );

	parms.C = C;
	this->ProcessEvent ( pDrawCinematicHUD, &parms, NULL );

}*/

/*void AwHUD_Mission::UpdatePrecacheMaterials (  )
{
	static UFunction* pUpdatePrecacheMaterials = 0;
	AwHUD_Mission_execUpdatePrecacheMaterials_Parms parms;

	if ( !pUpdatePrecacheMaterials )
		pUpdatePrecacheMaterials = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.UpdatePrecacheMaterials" );

	this->ProcessEvent ( pUpdatePrecacheMaterials, &parms, NULL );

}*/

/*void AwHUD_Mission::UpdatePrecacheStaticMeshes (  )
{
	static UFunction* pUpdatePrecacheStaticMeshes = 0;
	AwHUD_Mission_execUpdatePrecacheStaticMeshes_Parms parms;

	if ( !pUpdatePrecacheStaticMeshes )
		pUpdatePrecacheStaticMeshes = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.UpdatePrecacheStaticMeshes" );

	this->ProcessEvent ( pUpdatePrecacheStaticMeshes, &parms, NULL );

}*/

/*struct FString AwHUD_Mission::GetInfoString (  )
{
	static UFunction* pGetInfoString = 0;
	AwHUD_Mission_execGetInfoString_Parms parms;

	if ( !pGetInfoString )
		pGetInfoString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.GetInfoString" );

	this->ProcessEvent ( pGetInfoString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHUD_Mission::CheckCountdown ( class AGameReplicationInfo* GRI )
{
	static UFunction* pCheckCountdown = 0;
	AwHUD_Mission_execCheckCountdown_Parms parms;

	if ( !pCheckCountdown )
		pCheckCountdown = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.CheckCountdown" );

	parms.GRI = GRI;
	this->ProcessEvent ( pCheckCountdown, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawPracticeRoundInfo ( class UCanvas* C )
{
	static UFunction* pDrawPracticeRoundInfo = 0;
	AwHUD_Mission_execDrawPracticeRoundInfo_Parms parms;

	if ( !pDrawPracticeRoundInfo )
		pDrawPracticeRoundInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawPracticeRoundInfo" );

	parms.C = C;
	this->ProcessEvent ( pDrawPracticeRoundInfo, &parms, NULL );

}*/

/*void AwHUD_Mission::eventTeamChanged (  )
{
	static UFunction* pTeamChanged = 0;
	AwHUD_Mission_eventTeamChanged_Parms parms;

	if ( !pTeamChanged )
		pTeamChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.TeamChanged" );

	this->ProcessEvent ( pTeamChanged, &parms, NULL );

}*/

/*void AwHUD_Mission::Tick ( float DeltaTime )
{
	static UFunction* pTick = 0;
	AwHUD_Mission_execTick_Parms parms;

	if ( !pTick )
		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.Tick" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pTick, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawTextWithBackground ( class UCanvas* C, struct FString Text, class FColor TextColor, float XO, float YO )
{
	static UFunction* pDrawTextWithBackground = 0;
	AwHUD_Mission_execDrawTextWithBackground_Parms parms;

	if ( !pDrawTextWithBackground )
		pDrawTextWithBackground = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawTextWithBackground" );

	parms.C = C;
	parms.Text = Text;
	parms.TextColor = TextColor;
	parms.XO = XO;
	parms.YO = YO;
	this->ProcessEvent ( pDrawTextWithBackground, &parms, NULL );

}*/

/*struct FVector AwHUD_Mission::GetScreenCorner ( class UCanvas* C, class AActor* A, struct FVector CornerVect, struct FVector IPScrO, struct FRotator CameraRotation, float ColExpand )
{
	static UFunction* pGetScreenCorner = 0;
	AwHUD_Mission_execGetScreenCorner_Parms parms;

	if ( !pGetScreenCorner )
		pGetScreenCorner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.GetScreenCorner" );

	parms.C = C;
	parms.A = A;
	parms.CornerVect = CornerVect;
	parms.IPScrO = IPScrO;
	parms.CameraRotation = CameraRotation;
	parms.ColExpand = ColExpand;
	this->ProcessEvent ( pGetScreenCorner, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHUD_Mission::Draw_2DCollisionBox ( class UCanvas* C, class AActor* A, struct FVector ScrPos, struct FString Description, float ColExpand, bool bSizeOverride )
{
	static UFunction* pDraw_2DCollisionBox = 0;
	AwHUD_Mission_execDraw_2DCollisionBox_Parms parms;

	if ( !pDraw_2DCollisionBox )
		pDraw_2DCollisionBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.Draw_2DCollisionBox" );

	parms.C = C;
	parms.A = A;
	parms.ScrPos = ScrPos;
	parms.Description = Description;
	parms.ColExpand = ColExpand;
	parms.bSizeOverride = bSizeOverride;
	this->ProcessEvent ( pDraw_2DCollisionBox, &parms, NULL );

}*/

/*class FColor AwHUD_Mission::GetGYRColorRamp ( float Pct )
{
	static UFunction* pGetGYRColorRamp = 0;
	AwHUD_Mission_execGetGYRColorRamp_Parms parms;

	if ( !pGetGYRColorRamp )
		pGetGYRColorRamp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.GetGYRColorRamp" );

	parms.Pct = Pct;
	this->ProcessEvent ( pGetGYRColorRamp, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class FColor AwHUD_Mission::GetObjectiveColor ( class AGameObjective* Go, unsigned char* bProgressPulsing )
{
	static UFunction* pGetObjectiveColor = 0;
	AwHUD_Mission_execGetObjectiveColor_Parms parms;

	if ( !pGetObjectiveColor )
		pGetObjectiveColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.GetObjectiveColor" );

	parms.Go = Go;
	this->ProcessEvent ( pGetObjectiveColor, &parms, NULL );

	*bProgressPulsing = parms.bProgressPulsing;
	return parms.ReturnValue;
}*/

/*class FColor AwHUD_Mission::GetTeamColor ( unsigned char Team )
{
	static UFunction* pGetTeamColor = 0;
	AwHUD_Mission_execGetTeamColor_Parms parms;

	if ( !pGetTeamColor )
		pGetTeamColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.GetTeamColor" );

	parms.Team = Team;
	this->ProcessEvent ( pGetTeamColor, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwHUD_Mission::CustomHUDColorAllowed (  )
{
	static UFunction* pCustomHUDColorAllowed = 0;
	AwHUD_Mission_execCustomHUDColorAllowed_Parms parms;

	if ( !pCustomHUDColorAllowed )
		pCustomHUDColorAllowed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.CustomHUDColorAllowed" );

	this->ProcessEvent ( pCustomHUDColorAllowed, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHUD_Mission::DrawCustomHealthInfo ( class UCanvas* C, class APlayerController* PC, bool bSkaarj )
{
	static UFunction* pDrawCustomHealthInfo = 0;
	AwHUD_Mission_execDrawCustomHealthInfo_Parms parms;

	if ( !pDrawCustomHealthInfo )
		pDrawCustomHealthInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawCustomHealthInfo" );

	parms.C = C;
	parms.PC = PC;
	parms.bSkaarj = bSkaarj;
	this->ProcessEvent ( pDrawCustomHealthInfo, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawInfoPods ( class UCanvas* C )
{
	static UFunction* pDrawInfoPods = 0;
	AwHUD_Mission_execDrawInfoPods_Parms parms;

	if ( !pDrawInfoPods )
		pDrawInfoPods = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawInfoPods" );

	parms.C = C;
	this->ProcessEvent ( pDrawInfoPods, &parms, NULL );

}*/

/*bool AwHUD_Mission::CanSpawnNotify (  )
{
	static UFunction* pCanSpawnNotify = 0;
	AwHUD_Mission_execCanSpawnNotify_Parms parms;

	if ( !pCanSpawnNotify )
		pCanSpawnNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.CanSpawnNotify" );

	this->ProcessEvent ( pCanSpawnNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*class AGameObjective* AwHUD_Mission::GetCurrentObjective (  )
{
	static UFunction* pGetCurrentObjective = 0;
	AwHUD_Mission_execGetCurrentObjective_Parms parms;

	if ( !pGetCurrentObjective )
		pGetCurrentObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.GetCurrentObjective" );

	this->ProcessEvent ( pGetCurrentObjective, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHUD_Mission::NotifyUpdatedObjective (  )
{
	static UFunction* pNotifyUpdatedObjective = 0;
	AwHUD_Mission_execNotifyUpdatedObjective_Parms parms;

	if ( !pNotifyUpdatedObjective )
		pNotifyUpdatedObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.NotifyUpdatedObjective" );

	this->ProcessEvent ( pNotifyUpdatedObjective, &parms, NULL );

}*/

/*void AwHUD_Mission::HighlightCurrentObjective ( bool bShowWayPoint )
{
	static UFunction* pHighlightCurrentObjective = 0;
	AwHUD_Mission_execHighlightCurrentObjective_Parms parms;

	if ( !pHighlightCurrentObjective )
		pHighlightCurrentObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.HighlightCurrentObjective" );

	parms.bShowWayPoint = bShowWayPoint;
	this->ProcessEvent ( pHighlightCurrentObjective, &parms, NULL );

}*/

/*void AwHUD_Mission::eventAnnouncementPlayed ( struct FString AnnouncerSound, unsigned char Switch )
{
	static UFunction* pAnnouncementPlayed = 0;
	AwHUD_Mission_eventAnnouncementPlayed_Parms parms;

	if ( !pAnnouncementPlayed )
		pAnnouncementPlayed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.AnnouncementPlayed" );

	parms.AnnouncerSound = AnnouncerSound;
	parms.Switch = Switch;
	this->ProcessEvent ( pAnnouncementPlayed, &parms, NULL );

}*/

/*bool AwHUD_Mission::IsObjectiveVisible ( class UCanvas* C, class AGameObjective* Target, struct FVector camLoc, struct FRotator camRot, struct FVector* ScreenPos )
{
	static UFunction* pIsObjectiveVisible = 0;
	AwHUD_Mission_execIsObjectiveVisible_Parms parms;

	if ( !pIsObjectiveVisible )
		pIsObjectiveVisible = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.IsObjectiveVisible" );

	parms.C = C;
	parms.Target = Target;
	parms.camLoc = camLoc;
	parms.camRot = camRot;
	this->ProcessEvent ( pIsObjectiveVisible, &parms, NULL );

	*ScreenPos = parms.ScreenPos;
	return parms.ReturnValue;
}*/

/*void AwHUD_Mission::DrawHealthBar ( class UCanvas* C, struct FVector HBScreenPos, float Health, float MaxHealth, class FColor ObjColor )
{
	static UFunction* pDrawHealthBar = 0;
	AwHUD_Mission_execDrawHealthBar_Parms parms;

	if ( !pDrawHealthBar )
		pDrawHealthBar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawHealthBar" );

	parms.C = C;
	parms.HBScreenPos = HBScreenPos;
	parms.Health = Health;
	parms.MaxHealth = MaxHealth;
	parms.ObjColor = ObjColor;
	this->ProcessEvent ( pDrawHealthBar, &parms, NULL );

}*/

/*void AwHUD_Mission::Release_ObjectivePointingArrow (  )
{
	static UFunction* pRelease_ObjectivePointingArrow = 0;
	AwHUD_Mission_execRelease_ObjectivePointingArrow_Parms parms;

	if ( !pRelease_ObjectivePointingArrow )
		pRelease_ObjectivePointingArrow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.Release_ObjectivePointingArrow" );

	this->ProcessEvent ( pRelease_ObjectivePointingArrow, &parms, NULL );

}*/

/*void AwHUD_Mission::Draw3dObjectiveArrow ( class UCanvas* C )
{
	static UFunction* pDraw3dObjectiveArrow = 0;
	AwHUD_Mission_execDraw3dObjectiveArrow_Parms parms;

	if ( !pDraw3dObjectiveArrow )
		pDraw3dObjectiveArrow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.Draw3dObjectiveArrow" );

	parms.C = C;
	this->ProcessEvent ( pDraw3dObjectiveArrow, &parms, NULL );

}*/

/*void AwHUD_Mission::Release_BehindObjectiveArrows (  )
{
	static UFunction* pRelease_BehindObjectiveArrows = 0;
	AwHUD_Mission_execRelease_BehindObjectiveArrows_Parms parms;

	if ( !pRelease_BehindObjectiveArrows )
		pRelease_BehindObjectiveArrows = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.Release_BehindObjectiveArrows" );

	this->ProcessEvent ( pRelease_BehindObjectiveArrows, &parms, NULL );

}*/

/*class UTexRotator* AwHUD_Mission::Get_BehindObjectiveArrow (  )
{
	static UFunction* pGet_BehindObjectiveArrow = 0;
	AwHUD_Mission_execGet_BehindObjectiveArrow_Parms parms;

	if ( !pGet_BehindObjectiveArrow )
		pGet_BehindObjectiveArrow = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.Get_BehindObjectiveArrow" );

	this->ProcessEvent ( pGet_BehindObjectiveArrow, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHUD_Mission::DrawObjectiveIcon ( class UCanvas* C, bool bOptionalObjective, float PosX, float PosY, float tileX, float tileY )
{
	static UFunction* pDrawObjectiveIcon = 0;
	AwHUD_Mission_execDrawObjectiveIcon_Parms parms;

	if ( !pDrawObjectiveIcon )
		pDrawObjectiveIcon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawObjectiveIcon" );

	parms.C = C;
	parms.bOptionalObjective = bOptionalObjective;
	parms.PosX = PosX;
	parms.PosY = PosY;
	parms.tileX = tileX;
	parms.tileY = tileY;
	this->ProcessEvent ( pDrawObjectiveIcon, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawObjectiveStatusOverlay ( class UCanvas* C, float Progress, bool bCriticalFlash, struct FVector ScreenPos, float Scale )
{
	static UFunction* pDrawObjectiveStatusOverlay = 0;
	AwHUD_Mission_execDrawObjectiveStatusOverlay_Parms parms;

	if ( !pDrawObjectiveStatusOverlay )
		pDrawObjectiveStatusOverlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawObjectiveStatusOverlay" );

	parms.C = C;
	parms.Progress = Progress;
	parms.bCriticalFlash = bCriticalFlash;
	parms.ScreenPos = ScreenPos;
	parms.Scale = Scale;
	this->ProcessEvent ( pDrawObjectiveStatusOverlay, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawCriticalObjectiveOverlay ( class UCanvas* C, struct FVector ScreenPos, float Scale )
{
	static UFunction* pDrawCriticalObjectiveOverlay = 0;
	AwHUD_Mission_execDrawCriticalObjectiveOverlay_Parms parms;

	if ( !pDrawCriticalObjectiveOverlay )
		pDrawCriticalObjectiveOverlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawCriticalObjectiveOverlay" );

	parms.C = C;
	parms.ScreenPos = ScreenPos;
	parms.Scale = Scale;
	this->ProcessEvent ( pDrawCriticalObjectiveOverlay, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawMiniMap ( class AwHudPart_MinimapBase* Minimap, class UCanvas* C )
{
	static UFunction* pDrawMiniMap = 0;
	AwHUD_Mission_execDrawMiniMap_Parms parms;

	if ( !pDrawMiniMap )
		pDrawMiniMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawMiniMap" );

	parms.Minimap = Minimap;
	parms.C = C;
	this->ProcessEvent ( pDrawMiniMap, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawBigmap_HUD ( class UCanvas* C )
{
	static UFunction* pDrawBigmap_HUD = 0;
	AwHUD_Mission_execDrawBigmap_HUD_Parms parms;

	if ( !pDrawBigmap_HUD )
		pDrawBigmap_HUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawBigmap_HUD" );

	parms.C = C;
	this->ProcessEvent ( pDrawBigmap_HUD, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawMinimap_HUD ( class UCanvas* C )
{
	static UFunction* pDrawMinimap_HUD = 0;
	AwHUD_Mission_execDrawMinimap_HUD_Parms parms;

	if ( !pDrawMinimap_HUD )
		pDrawMinimap_HUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawMinimap_HUD" );

	parms.C = C;
	this->ProcessEvent ( pDrawMinimap_HUD, &parms, NULL );

}*/

/*void AwHUD_Mission::CheckAndDrawProgress ( class AGameObjective* Go, class UCanvas* C )
{
	static UFunction* pCheckAndDrawProgress = 0;
	AwHUD_Mission_execCheckAndDrawProgress_Parms parms;

	if ( !pCheckAndDrawProgress )
		pCheckAndDrawProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.CheckAndDrawProgress" );

	parms.Go = Go;
	parms.C = C;
	this->ProcessEvent ( pCheckAndDrawProgress, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawProgressMessage ( class UCanvas* C, float ProgressPct )
{
	static UFunction* pDrawProgressMessage = 0;
	AwHUD_Mission_execDrawProgressMessage_Parms parms;

	if ( !pDrawProgressMessage )
		pDrawProgressMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawProgressMessage" );

	parms.C = C;
	parms.ProgressPct = ProgressPct;
	this->ProcessEvent ( pDrawProgressMessage, &parms, NULL );

}*/

/*int AwHUD_Mission::GetGameObjectIndexByTag ( struct FName Tag )
{
	static UFunction* pGetGameObjectIndexByTag = 0;
	AwHUD_Mission_execGetGameObjectIndexByTag_Parms parms;

	if ( !pGetGameObjectIndexByTag )
		pGetGameObjectIndexByTag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.GetGameObjectIndexByTag" );

	parms.Tag = Tag;
	this->ProcessEvent ( pGetGameObjectIndexByTag, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwHUD_Mission::GetGameObjectIndex ( class AGameObjective* Go )
{
	static UFunction* pGetGameObjectIndex = 0;
	AwHUD_Mission_execGetGameObjectIndex_Parms parms;

	if ( !pGetGameObjectIndex )
		pGetGameObjectIndex = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.GetGameObjectIndex" );

	parms.Go = Go;
	this->ProcessEvent ( pGetGameObjectIndex, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHUD_Mission::DrawObjectives ( class UCanvas* C )
{
	static UFunction* pDrawObjectives = 0;
	AwHUD_Mission_execDrawObjectives_Parms parms;

	if ( !pDrawObjectives )
		pDrawObjectives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawObjectives" );

	parms.C = C;
	this->ProcessEvent ( pDrawObjectives, &parms, NULL );

}*/

/*class FColor AwHUD_Mission::MultiplyColor ( class FColor c2, class FColor* c1 )
{
	static UFunction* pMultiplyColor = 0;
	AwHUD_Mission_execMultiplyColor_Parms parms;

	if ( !pMultiplyColor )
		pMultiplyColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.MultiplyColor" );

	parms.c2 = c2;
	this->ProcessEvent ( pMultiplyColor, &parms, NULL );

	*c1 = parms.c1;
	return parms.ReturnValue;
}*/

/*bool AwHUD_Mission::IsOnEdgeOfScreen ( class UCanvas* C, struct FVector pos, float W, float H )
{
	static UFunction* pIsOnEdgeOfScreen = 0;
	AwHUD_Mission_execIsOnEdgeOfScreen_Parms parms;

	if ( !pIsOnEdgeOfScreen )
		pIsOnEdgeOfScreen = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.IsOnEdgeOfScreen" );

	parms.C = C;
	parms.pos = pos;
	parms.W = W;
	parms.H = H;
	this->ProcessEvent ( pIsOnEdgeOfScreen, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FVector AwHUD_Mission::GetRadarDotPosition ( class UCanvas* C, struct FVector dist, struct FVector ViewX, struct FVector ViewY, float OffsetScale, float OffsetY )
{
	static UFunction* pGetRadarDotPosition = 0;
	AwHUD_Mission_execGetRadarDotPosition_Parms parms;

	if ( !pGetRadarDotPosition )
		pGetRadarDotPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.GetRadarDotPosition" );

	parms.C = C;
	parms.dist = dist;
	parms.ViewX = ViewX;
	parms.ViewY = ViewY;
	parms.OffsetScale = OffsetScale;
	parms.OffsetY = OffsetY;
	this->ProcessEvent ( pGetRadarDotPosition, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AwHUD_Mission::GetRadarDotDist ( struct FVector dist, struct FVector ViewX, struct FVector ViewY )
{
	static UFunction* pGetRadarDotDist = 0;
	AwHUD_Mission_execGetRadarDotDist_Parms parms;

	if ( !pGetRadarDotDist )
		pGetRadarDotDist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.GetRadarDotDist" );

	parms.dist = dist;
	parms.ViewX = ViewX;
	parms.ViewY = ViewY;
	this->ProcessEvent ( pGetRadarDotDist, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AwHUD_Mission::ApplySmartRangeDist ( float dist )
{
	static UFunction* pApplySmartRangeDist = 0;
	AwHUD_Mission_execApplySmartRangeDist_Parms parms;

	if ( !pApplySmartRangeDist )
		pApplySmartRangeDist = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.ApplySmartRangeDist" );

	parms.dist = dist;
	this->ProcessEvent ( pApplySmartRangeDist, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHUD_Mission::DrawRadarPassB ( class UCanvas* C )
{
	static UFunction* pDrawRadarPassB = 0;
	AwHUD_Mission_execDrawRadarPassB_Parms parms;

	if ( !pDrawRadarPassB )
		pDrawRadarPassB = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawRadarPassB" );

	parms.C = C;
	this->ProcessEvent ( pDrawRadarPassB, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawRadarPassA ( class UCanvas* C )
{
	static UFunction* pDrawRadarPassA = 0;
	AwHUD_Mission_execDrawRadarPassA_Parms parms;

	if ( !pDrawRadarPassA )
		pDrawRadarPassA = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawRadarPassA" );

	parms.C = C;
	this->ProcessEvent ( pDrawRadarPassA, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawDebug ( class UCanvas* C, int X, int dy, int* Y )
{
	static UFunction* pDrawDebug = 0;
	AwHUD_Mission_execDrawDebug_Parms parms;

	if ( !pDrawDebug )
		pDrawDebug = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawDebug" );

	parms.C = C;
	parms.X = X;
	parms.dy = dy;
	this->ProcessEvent ( pDrawDebug, &parms, NULL );

	*Y = parms.Y;
}*/

/*void AwHUD_Mission::DrawSpectatingHud ( class UCanvas* C )
{
	static UFunction* pDrawSpectatingHud = 0;
	AwHUD_Mission_execDrawSpectatingHud_Parms parms;

	if ( !pDrawSpectatingHud )
		pDrawSpectatingHud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawSpectatingHud" );

	parms.C = C;
	this->ProcessEvent ( pDrawSpectatingHud, &parms, NULL );

}*/

/*void AwHUD_Mission::ShowTeamScorePassC ( class UCanvas* C )
{
	static UFunction* pShowTeamScorePassC = 0;
	AwHUD_Mission_execShowTeamScorePassC_Parms parms;

	if ( !pShowTeamScorePassC )
		pShowTeamScorePassC = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.ShowTeamScorePassC" );

	parms.C = C;
	this->ProcessEvent ( pShowTeamScorePassC, &parms, NULL );

}*/

/*bool AwHUD_Mission::IsVSRelevant (  )
{
	static UFunction* pIsVSRelevant = 0;
	AwHUD_Mission_execIsVSRelevant_Parms parms;

	if ( !pIsVSRelevant )
		pIsVSRelevant = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.IsVSRelevant" );

	this->ProcessEvent ( pIsVSRelevant, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHUD_Mission::DrawTeamVS ( class UCanvas* C )
{
	static UFunction* pDrawTeamVS = 0;
	AwHUD_Mission_execDrawTeamVS_Parms parms;

	if ( !pDrawTeamVS )
		pDrawTeamVS = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawTeamVS" );

	parms.C = C;
	this->ProcessEvent ( pDrawTeamVS, &parms, NULL );

}*/

/*void AwHUD_Mission::ShowTeamScorePassA ( class UCanvas* C )
{
	static UFunction* pShowTeamScorePassA = 0;
	AwHUD_Mission_execShowTeamScorePassA_Parms parms;

	if ( !pShowTeamScorePassA )
		pShowTeamScorePassA = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.ShowTeamScorePassA" );

	parms.C = C;
	this->ProcessEvent ( pShowTeamScorePassA, &parms, NULL );

}*/

/*void AwHUD_Mission::UpdateHUD (  )
{
	static UFunction* pUpdateHUD = 0;
	AwHUD_Mission_execUpdateHUD_Parms parms;

	if ( !pUpdateHUD )
		pUpdateHUD = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.UpdateHUD" );

	this->ProcessEvent ( pUpdateHUD, &parms, NULL );

}*/

/*void AwHUD_Mission::updateScore (  )
{
	static UFunction* pupdateScore = 0;
	AwHUD_Mission_execupdateScore_Parms parms;

	if ( !pupdateScore )
		pupdateScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.updateScore" );

	this->ProcessEvent ( pupdateScore, &parms, NULL );

}*/

/*void AwHUD_Mission::UpdateTimer ( int* TimeMinutes, int* TimeSeconds )
{
	static UFunction* pUpdateTimer = 0;
	AwHUD_Mission_execUpdateTimer_Parms parms;

	if ( !pUpdateTimer )
		pUpdateTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.UpdateTimer" );

	parms.TimeMinutes = *TimeMinutes;
	parms.TimeSeconds = *TimeSeconds;
	this->ProcessEvent ( pUpdateTimer, &parms, NULL );

	*TimeMinutes = parms.TimeMinutes;
	*TimeSeconds = parms.TimeSeconds;
}*/

/*void AwHUD_Mission::UpdateTeamHud (  )
{
	static UFunction* pUpdateTeamHud = 0;
	AwHUD_Mission_execUpdateTeamHud_Parms parms;

	if ( !pUpdateTeamHud )
		pUpdateTeamHud = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.UpdateTeamHud" );

	this->ProcessEvent ( pUpdateTeamHud, &parms, NULL );

}*/

/*bool AwHUD_Mission::ShouldShowObjectiveBoard (  )
{
	static UFunction* pShouldShowObjectiveBoard = 0;
	AwHUD_Mission_execShouldShowObjectiveBoard_Parms parms;

	if ( !pShouldShowObjectiveBoard )
		pShouldShowObjectiveBoard = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.ShouldShowObjectiveBoard" );

	this->ProcessEvent ( pShouldShowObjectiveBoard, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwHUD_Mission::DrawAssaultHUDLayer ( class UCanvas* C )
{
	static UFunction* pDrawAssaultHUDLayer = 0;
	AwHUD_Mission_execDrawAssaultHUDLayer_Parms parms;

	if ( !pDrawAssaultHUDLayer )
		pDrawAssaultHUDLayer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawAssaultHUDLayer" );

	parms.C = C;
	this->ProcessEvent ( pDrawAssaultHUDLayer, &parms, NULL );

}*/

/*void AwHUD_Mission::CanvasDrawActors ( class UCanvas* C, bool bClearedZBuffer )
{
	static UFunction* pCanvasDrawActors = 0;
	AwHUD_Mission_execCanvasDrawActors_Parms parms;

	if ( !pCanvasDrawActors )
		pCanvasDrawActors = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.CanvasDrawActors" );

	parms.C = C;
	parms.bClearedZBuffer = bClearedZBuffer;
	this->ProcessEvent ( pCanvasDrawActors, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawHudPassC ( class UCanvas* C )
{
	static UFunction* pDrawHudPassC = 0;
	AwHUD_Mission_execDrawHudPassC_Parms parms;

	if ( !pDrawHudPassC )
		pDrawHudPassC = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawHudPassC" );

	parms.C = C;
	this->ProcessEvent ( pDrawHudPassC, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawHudPassB ( class UCanvas* C )
{
	static UFunction* pDrawHudPassB = 0;
	AwHUD_Mission_execDrawHudPassB_Parms parms;

	if ( !pDrawHudPassB )
		pDrawHudPassB = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawHudPassB" );

	parms.C = C;
	this->ProcessEvent ( pDrawHudPassB, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawDebugTime ( class UCanvas* C )
{
	static UFunction* pDrawDebugTime = 0;
	AwHUD_Mission_execDrawDebugTime_Parms parms;

	if ( !pDrawDebugTime )
		pDrawDebugTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawDebugTime" );

	parms.C = C;
	this->ProcessEvent ( pDrawDebugTime, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawDebugMission ( class UCanvas* C )
{
	static UFunction* pDrawDebugMission = 0;
	AwHUD_Mission_execDrawDebugMission_Parms parms;

	if ( !pDrawDebugMission )
		pDrawDebugMission = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawDebugMission" );

	parms.C = C;
	this->ProcessEvent ( pDrawDebugMission, &parms, NULL );

}*/

/*void AwHUD_Mission::CallEvent ( bool InvenCheck, int iReservation1, int iReservation2 )
{
	static UFunction* pCallEvent = 0;
	AwHUD_Mission_execCallEvent_Parms parms;

	if ( !pCallEvent )
		pCallEvent = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.CallEvent" );

	parms.InvenCheck = InvenCheck;
	parms.iReservation1 = iReservation1;
	parms.iReservation2 = iReservation2;
	this->ProcessEvent ( pCallEvent, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawHudPassA ( class UCanvas* C )
{
	static UFunction* pDrawHudPassA = 0;
	AwHUD_Mission_execDrawHudPassA_Parms parms;

	if ( !pDrawHudPassA )
		pDrawHudPassA = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawHudPassA" );

	parms.C = C;
	this->ProcessEvent ( pDrawHudPassA, &parms, NULL );

}*/

/*void AwHUD_Mission::eventDestroyed (  )
{
	static UFunction* pDestroyed = 0;
	AwHUD_Mission_eventDestroyed_Parms parms;

	if ( !pDestroyed )
		pDestroyed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.Destroyed" );

	this->ProcessEvent ( pDestroyed, &parms, NULL );

}*/

/*void AwHUD_Mission::UpdateOBJ (  )
{
	static UFunction* pUpdateOBJ = 0;
	AwHUD_Mission_execUpdateOBJ_Parms parms;

	if ( !pUpdateOBJ )
		pUpdateOBJ = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.UpdateOBJ" );

	this->ProcessEvent ( pUpdateOBJ, &parms, NULL );

}*/

/*void AwHUD_Mission::eventPostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwHUD_Mission_eventPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwHUD_Mission::PrecacheFonts ( class UCanvas* C )
{
	static UFunction* pPrecacheFonts = 0;
	AwHUD_Mission_execPrecacheFonts_Parms parms;

	if ( !pPrecacheFonts )
		pPrecacheFonts = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.PrecacheFonts" );

	parms.C = C;
	this->ProcessEvent ( pPrecacheFonts, &parms, NULL );

}*/

/*void AwHUD_Mission::execShowObjectiveBoard (  )
{
	static UFunction* pShowObjectiveBoard = 0;
	AwHUD_Mission_execShowObjectiveBoard_Parms parms;

	if ( !pShowObjectiveBoard )
		pShowObjectiveBoard = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.ShowObjectiveBoard" );

	this->ProcessEvent ( pShowObjectiveBoard, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawAdrenaline ( class UCanvas* C )
{
	static UFunction* pDrawAdrenaline = 0;
	AwHUD_Mission_execDrawAdrenaline_Parms parms;

	if ( !pDrawAdrenaline )
		pDrawAdrenaline = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawAdrenaline" );

	parms.C = C;
	this->ProcessEvent ( pDrawAdrenaline, &parms, NULL );

}*/

/*void AwHUD_Mission::DrawTimer ( class UCanvas* C )
{
	static UFunction* pDrawTimer = 0;
	AwHUD_Mission_execDrawTimer_Parms parms;

	if ( !pDrawTimer )
		pDrawTimer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wHUD_Mission.DrawTimer" );

	parms.C = C;
	this->ProcessEvent ( pDrawTimer, &parms, NULL );

}*/

/*void AwScoreBoard_Mission::DrawTeam ( int TeamNum, int PlayerCount, int OwnerOffset, class UCanvas* Canvas, int FontReduction, int BoxSpaceY, int PlayerBoxSizeY, int HeaderOffsetY )
{
	static UFunction* pDrawTeam = 0;
	AwScoreBoard_Mission_execDrawTeam_Parms parms;

	if ( !pDrawTeam )
		pDrawTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wScoreBoard_Mission.DrawTeam" );

	parms.TeamNum = TeamNum;
	parms.PlayerCount = PlayerCount;
	parms.OwnerOffset = OwnerOffset;
	parms.Canvas = Canvas;
	parms.FontReduction = FontReduction;
	parms.BoxSpaceY = BoxSpaceY;
	parms.PlayerBoxSizeY = PlayerBoxSizeY;
	parms.HeaderOffsetY = HeaderOffsetY;
	this->ProcessEvent ( pDrawTeam, &parms, NULL );

}*/

/*struct FString AwScoreBoard_Mission::GetDefaultScoreInfoString (  )
{
	static UFunction* pGetDefaultScoreInfoString = 0;
	AwScoreBoard_Mission_execGetDefaultScoreInfoString_Parms parms;

	if ( !pGetDefaultScoreInfoString )
		pGetDefaultScoreInfoString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wScoreBoard_Mission.GetDefaultScoreInfoString" );

	this->ProcessEvent ( pGetDefaultScoreInfoString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AwScoreBoard_Mission::GetRestartString (  )
{
	static UFunction* pGetRestartString = 0;
	AwScoreBoard_Mission_execGetRestartString_Parms parms;

	if ( !pGetRestartString )
		pGetRestartString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wScoreBoard_Mission.GetRestartString" );

	this->ProcessEvent ( pGetRestartString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AwScoreBoard_Mission::GetTitleString (  )
{
	static UFunction* pGetTitleString = 0;
	AwScoreBoard_Mission_execGetTitleString_Parms parms;

	if ( !pGetTitleString )
		pGetTitleString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wScoreBoard_Mission.GetTitleString" );

	this->ProcessEvent ( pGetTitleString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwInfoPod::DrawInfoPod_Texture ( class UCanvas* C, struct FVector IPScrO )
{
	static UFunction* pDrawInfoPod_Texture = 0;
	AwInfoPod_execDrawInfoPod_Texture_Parms parms;

	if ( !pDrawInfoPod_Texture )
		pDrawInfoPod_Texture = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wInfoPod.DrawInfoPod_Texture" );

	parms.C = C;
	parms.IPScrO = IPScrO;
	this->ProcessEvent ( pDrawInfoPod_Texture, &parms, NULL );

}*/

/*void AwInfoPod::DrawInfoPod_TextBrackets ( class UCanvas* C, struct FVector IPScrO, class APlayerController* PC )
{
	static UFunction* pDrawInfoPod_TextBrackets = 0;
	AwInfoPod_execDrawInfoPod_TextBrackets_Parms parms;

	if ( !pDrawInfoPod_TextBrackets )
		pDrawInfoPod_TextBrackets = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wInfoPod.DrawInfoPod_TextBrackets" );

	parms.C = C;
	parms.IPScrO = IPScrO;
	parms.PC = PC;
	this->ProcessEvent ( pDrawInfoPod_TextBrackets, &parms, NULL );

}*/

/*void AwInfoPod::DrawInfoPod_PlainText ( class UCanvas* C, struct FVector IPScreenPos, class APlayerController* PC )
{
	static UFunction* pDrawInfoPod_PlainText = 0;
	AwInfoPod_execDrawInfoPod_PlainText_Parms parms;

	if ( !pDrawInfoPod_PlainText )
		pDrawInfoPod_PlainText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wInfoPod.DrawInfoPod_PlainText" );

	parms.C = C;
	parms.IPScreenPos = IPScreenPos;
	parms.PC = PC;
	this->ProcessEvent ( pDrawInfoPod_PlainText, &parms, NULL );

}*/

/*void AwInfoPod::Render ( class UCanvas* C, struct FVector IPScreenPos, class APlayerController* PC )
{
	static UFunction* pRender = 0;
	AwInfoPod_execRender_Parms parms;

	if ( !pRender )
		pRender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wInfoPod.Render" );

	parms.C = C;
	parms.IPScreenPos = IPScreenPos;
	parms.PC = PC;
	this->ProcessEvent ( pRender, &parms, NULL );

}*/

/*bool AwInfoPod::IsInfoPodVisible ( class UCanvas* C, class APawn* P, struct FVector camLoc, struct FRotator camRot )
{
	static UFunction* pIsInfoPodVisible = 0;
	AwInfoPod_execIsInfoPodVisible_Parms parms;

	if ( !pIsInfoPodVisible )
		pIsInfoPodVisible = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wInfoPod.IsInfoPodVisible" );

	parms.C = C;
	parms.P = P;
	parms.camLoc = camLoc;
	parms.camRot = camRot;
	this->ProcessEvent ( pIsInfoPodVisible, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwInfoPod::Reset (  )
{
	static UFunction* pReset = 0;
	AwInfoPod_execReset_Parms parms;

	if ( !pReset )
		pReset = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wInfoPod.Reset" );

	this->ProcessEvent ( pReset, &parms, NULL );

}*/

/*void AwInfoPod::eventTrigger ( class AActor* Other, class APawn* EventInstigator )
{
	static UFunction* pTrigger = 0;
	AwInfoPod_eventTrigger_Parms parms;

	if ( !pTrigger )
		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wInfoPod.Trigger" );

	parms.Other = Other;
	parms.EventInstigator = EventInstigator;
	this->ProcessEvent ( pTrigger, &parms, NULL );

}*/

/*void AwInfoPod::eventPostBeginPlay (  )
{
	static UFunction* pPostBeginPlay = 0;
	AwInfoPod_eventPostBeginPlay_Parms parms;

	if ( !pPostBeginPlay )
		pPostBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wInfoPod.PostBeginPlay" );

	this->ProcessEvent ( pPostBeginPlay, &parms, NULL );

}*/

/*void AwTrigger_MSMessageTrigger::PrecacheAnnouncer ( class AAnnouncerVoice* V, bool bRewardSounds )
{
	static UFunction* pPrecacheAnnouncer = 0;
	AwTrigger_MSMessageTrigger_execPrecacheAnnouncer_Parms parms;

	if ( !pPrecacheAnnouncer )
		pPrecacheAnnouncer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wTrigger_MSMessageTrigger.PrecacheAnnouncer" );

	parms.V = V;
	parms.bRewardSounds = bRewardSounds;
	this->ProcessEvent ( pPrecacheAnnouncer, &parms, NULL );

}*/

/*unsigned char AwTrigger_MSMessageTrigger::GetTeamNum (  )
{
	static UFunction* pGetTeamNum = 0;
	AwTrigger_MSMessageTrigger_execGetTeamNum_Parms parms;

	if ( !pGetTeamNum )
		pGetTeamNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wTrigger_MSMessageTrigger.GetTeamNum" );

	this->ProcessEvent ( pGetTeamNum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwTrigger_MSMessageTrigger::eventTrigger ( class AActor* Other, class APawn* EventInstigator )
{
	static UFunction* pTrigger = 0;
	AwTrigger_MSMessageTrigger_eventTrigger_Parms parms;

	if ( !pTrigger )
		pTrigger = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wTrigger_MSMessageTrigger.Trigger" );

	parms.Other = Other;
	parms.EventInstigator = EventInstigator;
	this->ProcessEvent ( pTrigger, &parms, NULL );

}*/

/*void AwObjectivePointingArrow::Render ( class UCanvas* C, class APlayerController* PC, class AActor* TrackedActor )
{
	static UFunction* pRender = 0;
	AwObjectivePointingArrow_execRender_Parms parms;

	if ( !pRender )
		pRender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectivePointingArrow.Render" );

	parms.C = C;
	parms.PC = PC;
	parms.TrackedActor = TrackedActor;
	this->ProcessEvent ( pRender, &parms, NULL );

}*/

/*void AwObjectivePointingArrow::SetYellowColor ( bool bPulse )
{
	static UFunction* pSetYellowColor = 0;
	AwObjectivePointingArrow_execSetYellowColor_Parms parms;

	if ( !pSetYellowColor )
		pSetYellowColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectivePointingArrow.SetYellowColor" );

	parms.bPulse = bPulse;
	this->ProcessEvent ( pSetYellowColor, &parms, NULL );

}*/

/*void AwObjectivePointingArrow::SetTeamSkin ( unsigned char Team, bool bPulse )
{
	static UFunction* pSetTeamSkin = 0;
	AwObjectivePointingArrow_execSetTeamSkin_Parms parms;

	if ( !pSetTeamSkin )
		pSetTeamSkin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectivePointingArrow.SetTeamSkin" );

	parms.Team = Team;
	parms.bPulse = bPulse;
	this->ProcessEvent ( pSetTeamSkin, &parms, NULL );

}*/

/*struct FString AwObjectiveProgressDisplay::GetObjectiveDescription ( class AGameObjective* Go, bool bDefender )
{
	static UFunction* pGetObjectiveDescription = 0;
	AwObjectiveProgressDisplay_execGetObjectiveDescription_Parms parms;

	if ( !pGetObjectiveDescription )
		pGetObjectiveDescription = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectiveProgressDisplay.GetObjectiveDescription" );

	parms.Go = Go;
	parms.bDefender = bDefender;
	this->ProcessEvent ( pGetObjectiveDescription, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwObjectiveProgressDisplay::SetObjectiveColor ( class UCanvas* C, class AGameObjective* Go )
{
	static UFunction* pSetObjectiveColor = 0;
	AwObjectiveProgressDisplay_execSetObjectiveColor_Parms parms;

	if ( !pSetObjectiveColor )
		pSetObjectiveColor = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectiveProgressDisplay.SetObjectiveColor" );

	parms.C = C;
	parms.Go = Go;
	this->ProcessEvent ( pSetObjectiveColor, &parms, NULL );

}*/

/*bool AwObjectiveProgressDisplay::AnyOptionalObjectiveCritical (  )
{
	static UFunction* pAnyOptionalObjectiveCritical = 0;
	AwObjectiveProgressDisplay_execAnyOptionalObjectiveCritical_Parms parms;

	if ( !pAnyOptionalObjectiveCritical )
		pAnyOptionalObjectiveCritical = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectiveProgressDisplay.AnyOptionalObjectiveCritical" );

	this->ProcessEvent ( pAnyOptionalObjectiveCritical, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AwObjectiveProgressDisplay::AnyPrimaryObjectivesCritical (  )
{
	static UFunction* pAnyPrimaryObjectivesCritical = 0;
	AwObjectiveProgressDisplay_execAnyPrimaryObjectivesCritical_Parms parms;

	if ( !pAnyPrimaryObjectivesCritical )
		pAnyPrimaryObjectivesCritical = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectiveProgressDisplay.AnyPrimaryObjectivesCritical" );

	this->ProcessEvent ( pAnyPrimaryObjectivesCritical, &parms, NULL );

	return parms.ReturnValue;
}*/

/*float AwObjectiveProgressDisplay::GetGlobalObjectiveProgress (  )
{
	static UFunction* pGetGlobalObjectiveProgress = 0;
	AwObjectiveProgressDisplay_execGetGlobalObjectiveProgress_Parms parms;

	if ( !pGetGlobalObjectiveProgress )
		pGetGlobalObjectiveProgress = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectiveProgressDisplay.GetGlobalObjectiveProgress" );

	this->ProcessEvent ( pGetGlobalObjectiveProgress, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AwObjectiveProgressDisplay::GetPrimaryObjectiveCount (  )
{
	static UFunction* pGetPrimaryObjectiveCount = 0;
	AwObjectiveProgressDisplay_execGetPrimaryObjectiveCount_Parms parms;

	if ( !pGetPrimaryObjectiveCount )
		pGetPrimaryObjectiveCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectiveProgressDisplay.GetPrimaryObjectiveCount" );

	this->ProcessEvent ( pGetPrimaryObjectiveCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwObjectiveProgressDisplay::DrawBigCurrentObjective ( class UCanvas* C, bool bDefender, bool bCheckOverlap )
{
	static UFunction* pDrawBigCurrentObjective = 0;
	AwObjectiveProgressDisplay_execDrawBigCurrentObjective_Parms parms;

	if ( !pDrawBigCurrentObjective )
		pDrawBigCurrentObjective = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectiveProgressDisplay.DrawBigCurrentObjective" );

	parms.C = C;
	parms.bDefender = bDefender;
	parms.bCheckOverlap = bCheckOverlap;
	this->ProcessEvent ( pDrawBigCurrentObjective, &parms, NULL );

}*/

/*struct FString AwObjectiveProgressDisplay::CheckEntry ( class UCanvas* C, struct FString Entry )
{
	static UFunction* pCheckEntry = 0;
	AwObjectiveProgressDisplay_execCheckEntry_Parms parms;

	if ( !pCheckEntry )
		pCheckEntry = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectiveProgressDisplay.CheckEntry" );

	parms.C = C;
	parms.Entry = Entry;
	this->ProcessEvent ( pCheckEntry, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FVector AwObjectiveProgressDisplay::DrawObjectives ( class UCanvas* C, struct FVector BoxPivot, bool bDefender, bool bGetBoxSize )
{
	static UFunction* pDrawObjectives = 0;
	AwObjectiveProgressDisplay_execDrawObjectives_Parms parms;

	if ( !pDrawObjectives )
		pDrawObjectives = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectiveProgressDisplay.DrawObjectives" );

	parms.C = C;
	parms.BoxPivot = BoxPivot;
	parms.bDefender = bDefender;
	parms.bGetBoxSize = bGetBoxSize;
	this->ProcessEvent ( pDrawObjectives, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AwObjectiveProgressDisplay::PostRender ( class UCanvas* C, float DeltaTime, bool bDefender )
{
	static UFunction* pPostRender = 0;
	AwObjectiveProgressDisplay_execPostRender_Parms parms;

	if ( !pPostRender )
		pPostRender = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectiveProgressDisplay.PostRender" );

	parms.C = C;
	parms.DeltaTime = DeltaTime;
	parms.bDefender = bDefender;
	this->ProcessEvent ( pPostRender, &parms, NULL );

}*/

/*void AwObjectiveProgressDisplay::Initialize ( class AwHUD_Mission* H )
{
	static UFunction* pInitialize = 0;
	AwObjectiveProgressDisplay_execInitialize_Parms parms;

	if ( !pInitialize )
		pInitialize = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectiveProgressDisplay.Initialize" );

	parms.H = H;
	this->ProcessEvent ( pInitialize, &parms, NULL );

}*/

/*void AwObjectiveProgressDisplay::UpdateSlideScale ( float DeltaTime )
{
	static UFunction* pUpdateSlideScale = 0;
	AwObjectiveProgressDisplay_execUpdateSlideScale_Parms parms;

	if ( !pUpdateSlideScale )
		pUpdateSlideScale = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectiveProgressDisplay.UpdateSlideScale" );

	parms.DeltaTime = DeltaTime;
	this->ProcessEvent ( pUpdateSlideScale, &parms, NULL );

}*/

/*void AwObjectiveProgressDisplay::ShowStatus ( bool bShow )
{
	static UFunction* pShowStatus = 0;
	AwObjectiveProgressDisplay_execShowStatus_Parms parms;

	if ( !pShowStatus )
		pShowStatus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"WMission.wObjectiveProgressDisplay.ShowStatus" );

	parms.bShow = bShow;
	this->ProcessEvent ( pShowStatus, &parms, NULL );

}*/

