#pragma once
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : WMission
# >    File : Classes.h
# ======================================================================================== #
*/

#ifdef _MSC_VER
#pragma pack ( push, 4 )
#endif


/*
# ======================================================================================== #
# > Constants
# ======================================================================================== #
*/

#define CONST_MaxMSGs                                            8

/*
# ======================================================================================== #
# > Enums
# ======================================================================================== #
*/

// Enum WMission.wMSGameReplicationInfo.ERoundWinner
enum ERoundWinner
{
	ERW_None                                           = 0,
	ERW_PracticeRoundEnded                             = 1,
	ERW_RedAttacked                                    = 2,
	ERW_BlueAttacked                                   = 3,
	ERW_RedDefended                                    = 4,
	ERW_BlueDefended                                   = 5,
	ERW_RedMoreObjectives                              = 6,
	ERW_BlueMoreObjectives                             = 7,
	ERW_RedMoreProgress                                = 8,
	ERW_BlueMoreProgress                               = 9,
	ERW_RedGotSameOBJFaster                            = 10,
	ERW_BlueGotSameOBJFaster                           = 11,
	ERW_Draw                                           = 12
};

// Enum WMission.wMSGameInfo.ERER_Reason
enum ERER_Reason
{
	ERER_AttackersWin                                  = 0,
	ERER_AttackersLose                                 = 1,
	ERER_AttackersWin_DefendersDied                    = 2,
	ERER_AttackersLose_AttackersDied                   = 3,
	ERER_DrawGame                                      = 4,
	ERER_Team0                                         = 5,
	ERER_Team1                                         = 6
};

// Enum WMission.wInfoPod.EIP_InfoEffect
enum EIP_InfoEffect
{
	EIPE_Normal                                        = 0,
	EIPE_Blink                                         = 1,
	EIPE_Pulse                                         = 2
};

// Enum WMission.wInfoPod.EIP_InfoType
enum EIP_InfoType
{
	EIPT_PlainText                                     = 0,
	EIPT_TextBrackets                                  = 1,
	EIPT_Texture                                       = 2
};

// Enum WMission.wInfoPod.EIP_AssaultTeam
enum EIP_AssaultTeam
{
	EIP_All                                            = 0,
	EIP_Attackers                                      = 1,
	EIP_Defenders                                      = 2
};

// Enum WMission.wTrigger_MSMessageTrigger.EPSM_AssaultTeam
enum EPSM_AssaultTeam
{
	EMT_Attackers                                      = 0,
	EMT_Defenders                                      = 1,
	EMT_All                                            = 2
};


/*
# ======================================================================================== #
# > Classes
# ======================================================================================== #
*/

// Class WMission.wMSCinematic_Camera
class DLL_IMPORT AwMSCinematic_Camera : public AActor
{
public:
	float                                              ShotLength;                                       		// 0x03C8 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       EventViewingCamera;                               		// 0x03CC ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       NextCameraTag;                                    		// 0x03D0 ( 0x0004 ) [ CPF_Edit ]
	class AwMSCinematic_Camera*                        NextCamera;                                       		// 0x03D4 ( 0x0004 ) 
	unsigned long                                      bInitiallyActive:1;                               		// 0x03D8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bActive:1;                                        		// 0x03D8 ( 0x0004 )  [0x00000002]
	class AwMSCinematic_SceneManager*                  ASCSM;                                            		// 0x03DC ( 0x0004 ) 

	// UScript Functions
	 void                      Reset (  );                                       		//  WMission.wMSCinematic_Camera.Reset
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  WMission.wMSCinematic_Camera.Trigger
	 void                      Timer (  );                                       		//  WMission.wMSCinematic_Camera.Timer
	 void                      SetView ( class AwMSCinematic_SceneManager* SM ); 		//  WMission.wMSCinematic_Camera.SetView
	 void                      ViewFixedObjective ( class APlayerController* PC, class AGameObjective* Go );		//  WMission.wMSCinematic_Camera.ViewFixedObjective
	 void                      PostBeginPlay (  );                               		//  WMission.wMSCinematic_Camera.PostBeginPlay
}; // Size: 0x0018

// Class WMission.wMSCinematic_SceneManager
class DLL_IMPORT AwMSCinematic_SceneManager : public AInfo
{
public:
	struct FName                                       CameraTag;                                        		// 0x041C ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       EventSceneStarted;                                		// 0x0420 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       EventSceneEnded;                                  		// 0x0424 ( 0x0004 ) [ CPF_Edit ]
	class AwMSCinematic_Camera*                        Camera;                                           		// 0x0428 ( 0x0004 ) 

	// UScript Functions
	 void                      eventSceneEnded (  );                             		// [ FUNC_Event ] WMission.wMSCinematic_SceneManager.SceneEnded
	 void                      eventShotEnded ( class AwMSCinematic_Camera* cam );		// [ FUNC_Event ] WMission.wMSCinematic_SceneManager.ShotEnded
	 void                      PlayScene (  );                                   		//  WMission.wMSCinematic_SceneManager.PlayScene
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  WMission.wMSCinematic_SceneManager.Trigger
	 void                      PostBeginPlay (  );                               		//  WMission.wMSCinematic_SceneManager.PostBeginPlay
}; // Size: 0x0010

// Class WMission.wSetObjective
class DLL_IMPORT AwSetObjective : public AUseObjective
{
public:
	class APawn*                                       TP;                                               		// 0x06F4 ( 0x0004 ) 
	float                                              fSetTime;                                         		// 0x06F8 ( 0x0004 ) 
	float                                              fActiveStartTime;                                 		// 0x06FC ( 0x0004 ) 
	float                                              fSettingLength;                                   		// 0x0700 ( 0x0004 ) [ CPF_Edit ]
	int                                                iTest;                                            		// 0x0704 ( 0x0004 ) 
	float                                              fDecLength;                                       		// 0x0708 ( 0x0004 ) 
	unsigned long                                      bReplicateSettingOn:1;                            		// 0x070C ( 0x0004 )  [0x00000001]
	unsigned char                                      bySettingOn;                                      		// 0x0710 ( 0x0001 ) [ CPF_Net ]
	unsigned char                                      byOldSettingOn;                                   		// 0x0711 ( 0x0001 ) 
	float                                              fHudSetTime;                                      		// 0x0714 ( 0x0004 ) 

	// UScript Functions
	 void                      SetActive ( bool bActiveStatus );                 		//  WMission.wSetObjective.SetActive
	 void                      Reset (  );                                       		//  WMission.wSetObjective.Reset
	 void                      RefreshState (  );                                		//  WMission.wSetObjective.RefreshState
	 float                     GetObjectiveProgress (  );                        		// [ FUNC_Simulated ] WMission.wSetObjective.GetObjectiveProgress
	 void                      PlayerToucherDied ( class APawn* P );             		//  WMission.wSetObjective.PlayerToucherDied
	 bool                      IsRelevant ( class APawn* P, bool bAliveCheck );  		//  WMission.wSetObjective.IsRelevant
	 void                      UnTouch ( class AActor* Other );                  		//  WMission.wSetObjective.UnTouch
	 void                      Touch ( class AActor* Other );                    		//  WMission.wSetObjective.Touch
	 bool                      CanPlant ( class APawn* P );                      		// [ FUNC_Simulated ] WMission.wSetObjective.CanPlant
	 bool                      IsPlanting ( class APawn* P );                    		// [ FUNC_Simulated ] WMission.wSetObjective.IsPlanting
	 void                      eventTick ( float DeltaTime );                    		// [ FUNC_Event ] WMission.wSetObjective.Tick
	 void                      SetDefuseLocation ( struct FVector loc, struct FName Tag );		//  WMission.wSetObjective.SetDefuseLocation
	 void                      eventUsedBy ( class APawn* User );                		// [ FUNC_Event ] WMission.wSetObjective.UsedBy
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Simulated | FUNC_Event ] WMission.wSetObjective.PreBeginPlay
}; // Size: 0x0024

// Class WMission.wMSGameReplicationInfo
class DLL_IMPORT AwMSGameReplicationInfo : public AGameReplicationInfo
{
public:
	int                                                RoundTimeLimit;                                   		// 0x059C ( 0x0004 ) [ CPF_Net ]
	int                                                RoundStartTime;                                   		// 0x05A0 ( 0x0004 ) [ CPF_Net ]
	int                                                CurrentRound;                                     		// 0x05A4 ( 0x0004 ) [ CPF_Net ]
	int                                                MaxRounds;                                        		// 0x05A8 ( 0x0004 ) [ CPF_Net ]
	int                                                ReinforcementCountDown;                           		// 0x05AC ( 0x0004 ) [ CPF_Net ]
	int                                                PracticeTimeLimit;                                		// 0x05B0 ( 0x0004 ) 
	int                                                DefuseTimeLimit;                                  		// 0x05B4 ( 0x0004 ) [ CPF_Net ]
	int                                                RoundOverTime;                                    		// 0x05B8 ( 0x0004 ) [ CPF_Net ]
	int                                                MaxTeleportTime;                                  		// 0x05BC ( 0x0004 ) 
	int                                                ScoreLimit;                                       		// 0x05C0 ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      bChangeAttackingTeam:1;                           		// 0x05C4 ( 0x0004 )  [0x00000001][ CPF_Net ]
	int                                                ScoringTeam;                                      		// 0x05C8 ( 0x0004 ) [ CPF_Net ]
	float                                              fEndRoundTime;                                    		// 0x05CC ( 0x0004 ) [ CPF_Net ]
	unsigned char                                      ObjectiveProgress;                                		// 0x05D0 ( 0x0001 ) [ CPF_Net ]
	unsigned char                                      MaxObjectivePriority;                             		// 0x05D1 ( 0x0001 ) 
	int                                                PrimaryTeam;                                      		// 0x05D4 ( 0x0004 ) [ CPF_Net ]
	int                                                MaxLives;                                         		// 0x05D8 ( 0x0004 ) [ CPF_Net ]
	class AGameObjective*                              Objectives;                                       		// 0x05DC ( 0x0004 ) 
	class AGameObject*                                 GameObject;                                       		// 0x05E0 ( 0x0004 ) [ CPF_Net ]
	unsigned char                                      RoundWinner;                                      		// 0x05E4 ( 0x0001 ) [ CPF_Net ]
	struct FString                                     ERW_PracticeRoundEndedStr;                        		// 0x05E8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ERW_RedAttackedStr;                               		// 0x05F4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ERW_BlueAttackedStr;                              		// 0x0600 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ERW_RedDefendedStr;                               		// 0x060C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ERW_BlueDefendedStr;                              		// 0x0618 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ERW_DefendersStr;                                 		// 0x0624 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ERW_AttackersStr;                                 		// 0x0630 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ERW_RedMoreObjectivesStr;                         		// 0x063C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ERW_BlueMoreObjectivesStr;                        		// 0x0648 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ERW_RedMoreProgressStr;                           		// 0x0654 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ERW_BlueMoreProgressStr;                          		// 0x0660 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ERW_RedGotSameOBJFasterStr;                       		// 0x066C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ERW_BlueGotSameOBJFasterStr;                      		// 0x0678 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ERW_DrawStr;                                      		// 0x0684 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      IsGhostChatting ( class AActor* Sender );         		// [ FUNC_Simulated ] WMission.wMSGameReplicationInfo.IsGhostChatting
	 struct FString            GetRoundWinnerString (  );                        		// [ FUNC_Simulated ] WMission.wMSGameReplicationInfo.GetRoundWinnerString
	 void                      SetMaxLives ( int iMaxLives );                    		// [ FUNC_Simulated ] WMission.wMSGameReplicationInfo.SetMaxLives
	 int                       GetMaxLives (  );                                 		// [ FUNC_Simulated ] WMission.wMSGameReplicationInfo.GetMaxLives
	 bool                      IsDefender ( unsigned char Team );                		// [ FUNC_Simulated ] WMission.wMSGameReplicationInfo.IsDefender
	 bool                      IsPracticeRound (  );                             		// [ FUNC_Simulated ] WMission.wMSGameReplicationInfo.IsPracticeRound
	 int                       GetRemainingTime (  );                            		// [ FUNC_Simulated ] WMission.wMSGameReplicationInfo.GetRemainingTime
	 void                      Timer (  );                                       		// [ FUNC_Simulated ] WMission.wMSGameReplicationInfo.Timer
	 void                      SetupAssaultObjectivePriority (  );               		// [ FUNC_Simulated ] WMission.wMSGameReplicationInfo.SetupAssaultObjectivePriority
	 void                      PostNetBeginPlay (  );                            		// [ FUNC_Simulated ] WMission.wMSGameReplicationInfo.PostNetBeginPlay
	 void                      PreBeginPlay (  );                                		// [ FUNC_Simulated ] WMission.wMSGameReplicationInfo.PreBeginPlay
}; // Size: 0x00F4

// Class WMission.wMSGameInfo
class DLL_IMPORT AwMSGameInfo : public AwTeamGame
{
public:
	int                                                RoundLimit;                                       		// 0x15D0 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	int                                                MaxRounds;                                        		// 0x15D4 ( 0x0004 ) 
	int                                                RoundTimeLimit;                                   		// 0x15D8 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	int                                                PracticeTimeLimit;                                		// 0x15DC ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	int                                                DefuseTimeLimit;                                  		// 0x15E0 ( 0x0004 ) 
	int                                                ReinforcementsFreq;                               		// 0x15E4 ( 0x0004 ) [ CPF_Config ]
	int                                                ReinforcementsValidTime;                          		// 0x15E8 ( 0x0004 ) 
	int                                                ReinforcementsCount;                              		// 0x15EC ( 0x0004 ) 
	int                                                ScoreLimit;                                       		// 0x15F0 ( 0x0004 ) [ CPF_Edit ]
	int                                                ChangeAttackTeamRound;                            		// 0x15F4 ( 0x0004 ) [ CPF_Edit ]
	int                                                RespawnRestrictionTimeRound1;                     		// 0x15F8 ( 0x0004 ) 
	float                                              EnqueueRespawningControllersLastTIme;             		// 0x15FC ( 0x0004 ) 
	int                                                RemainingTimeWhenObjectIsSet;                     		// 0x1600 ( 0x0004 ) 
	unsigned long                                      bRoundOverProcessed:1;                            		// 0x1604 ( 0x0004 )  [0x00000001]
	float                                              RespawnElapsedTime;                               		// 0x1608 ( 0x0004 ) 
	float                                              LastRespawnTime;                                  		// 0x160C ( 0x0004 ) 
	unsigned long                                      bCheckPrecacheInProcessRespawn:1;                 		// 0x1610 ( 0x0004 )  [0x00000001]
	class TArray< class AController* >                 RespawningControllers;                            		// 0x1614 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      CurrentAttackingTeam;                             		// 0x1620 ( 0x0001 ) 
	unsigned char                                      FirstAttackingTeam;                               		// 0x1621 ( 0x0001 ) 
	unsigned char                                      CurrentRound;                                     		// 0x1622 ( 0x0001 ) 
	int                                                RoundStartTime;                                   		// 0x1624 ( 0x0004 ) 
	unsigned long                                      bDisableReinforcements:1;                         		// 0x1628 ( 0x0004 )  [0x00000001]
	struct FString                                     NewRoundSound;                                    		// 0x162C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FName                                       AttackerWinRound[ 0x02 ];                         		// 0x1638 ( 0x0008 ) 
	struct FName                                       DefenderWinRound[ 0x02 ];                         		// 0x1640 ( 0x0008 ) 
	struct FName                                       DrawGameSound;                                    		// 0x1648 ( 0x0004 ) 
	class AVehicle*                                    KeyVehicle;                                       		// 0x164C ( 0x0004 ) 
	class ASceneManager*                               CurrentMatineeScene;                              		// 0x1650 ( 0x0004 ) 
	class AwMSCinematic_SceneManager*                  EndCinematic;                                     		// 0x1654 ( 0x0004 ) 
	unsigned long                                      bObjectivePlanted:1;                              		// 0x1658 ( 0x0004 )  [0x00000001]
	struct FName                                       nPlantedObjectiveName;                            		// 0x165C ( 0x0004 ) 
	struct FString                                     sndChangeAttackTeam;                              		// 0x1660 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     sndLastMan;                                       		// 0x166C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     sndRoundWin;                                      		// 0x1678 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     sndRoundLose;                                     		// 0x1684 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     BombPlantedMessage;                               		// 0x1690 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bMultiBomb:1;                                     		// 0x169C ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      AddGameSpecificActions ( class TArray< class UwAction* >* Actions );		//  WMission.wMSGameInfo.AddGameSpecificActions
	 bool                      DoProcessKillMessage ( class UClass* DamageType );		//  WMission.wMSGameInfo.DoProcessKillMessage
	 int                       GetTotalPlayedTime (  );                          		//  WMission.wMSGameInfo.GetTotalPlayedTime
	 int                       GetBootySeedValue (  );                           		//  WMission.wMSGameInfo.GetBootySeedValue
	 void                      CheckScore ( class APlayerReplicationInfo* Scorer );		//  WMission.wMSGameInfo.CheckScore
	 void                      CheckLastMan ( int TeamIndex );                   		//  WMission.wMSGameInfo.CheckLastMan
	 bool                      CheckMaxLives ( class APlayerReplicationInfo* Scorer );		//  WMission.wMSGameInfo.CheckMaxLives
	 bool                      EndGameByTeamNoneLeft ( class APlayerReplicationInfo* Living );		//  WMission.wMSGameInfo.EndGameByTeamNoneLeft
	 void                      LeaveLogOtherTeamNoneLeft ( class APlayerReplicationInfo* Living );		//  WMission.wMSGameInfo.LeaveLogOtherTeamNoneLeft
	 void                      execlll (  );                                     		// [ FUNC_Exec ] WMission.wMSGameInfo.lll
	 void                      FindLiving ( class APlayerReplicationInfo** Living, unsigned char* bOtherTeamNoneLeft );		//  WMission.wMSGameInfo.FindLiving
	 bool                      AllowBecomeActivePlayer ( class APlayerController* P );		//  WMission.wMSGameInfo.AllowBecomeActivePlayer
	 bool                      IsRightTimeForRespawn ( class AController* C );   		//  WMission.wMSGameInfo.IsRightTimeForRespawn
	 bool                      IsRespawnRestrictionTime (  );                    		// [ FUNC_Simulated ] WMission.wMSGameInfo.IsRespawnRestrictionTime
	 bool                      AllowMutator ( struct FString MutatorClassName ); 		//  WMission.wMSGameInfo.AllowMutator
	 struct FString            eventGetDescriptionText ( struct FString PropName );		// [ FUNC_Event ] WMission.wMSGameInfo.GetDescriptionText
	 void                      FillPlayInfo ( class UPlayInfo* PlayInfo );       		//  WMission.wMSGameInfo.FillPlayInfo
	 bool                      eventAcceptPlayInfoProperty ( struct FString PropertyName );		// [ FUNC_Event ] WMission.wMSGameInfo.AcceptPlayInfoProperty
	 void                      GetServerDetails ( struct FServerResponseLine* ServerState );		//  WMission.wMSGameInfo.GetServerDetails
	 void                      UpdateAnnouncements (  );                         		// [ FUNC_Simulated ] WMission.wMSGameInfo.UpdateAnnouncements
	 void                      PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds );		//  WMission.wMSGameInfo.PrecacheGameAnnouncements
	 void                      QueueAnnouncerSound ( struct FString ASound, unsigned char AnnouncementLevel, unsigned char Team, unsigned char Priority, unsigned char Switch );		//  WMission.wMSGameInfo.QueueAnnouncerSound
	 int                       AdjustDestroyObjectiveDamage ( int Damage, class AController* instigatedBy, class AGameObjective* Go );		//  WMission.wMSGameInfo.AdjustDestroyObjectiveDamage
	 int                       ReduceDamage ( int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, int iWeaponType, struct FVector* Momentum );		//  WMission.wMSGameInfo.ReduceDamage
	 void                      SetObjectiveSetted ( class APawn* TP, struct FName ObjectTag, struct FVector FlagLocation );		//  WMission.wMSGameInfo.SetObjectiveSetted
	 int                       GetRemainingTime (  );                            		//  WMission.wMSGameInfo.GetRemainingTime
	 void                      SetRemainingTime ( int remain );                  		//  WMission.wMSGameInfo.SetRemainingTime
	 class ANavigationPoint*   FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName );		//  WMission.wMSGameInfo.FindPlayerStart
	 int                       GetPlayerStartTeam ( class ANavigationPoint* N, int Team );		//  WMission.wMSGameInfo.GetPlayerStartTeam
	 void                      PossessPawn ( class AController* C, class APawn* P );		//  WMission.wMSGameInfo.PossessPawn
	 bool                      SpawnAndPossessPawn ( class AController* C, struct FString PawnClassName );		//  WMission.wMSGameInfo.SpawnAndPossessPawn
	 class UClass*             GetDefaultPlayerClass ( class AController* C );   		//  WMission.wMSGameInfo.GetDefaultPlayerClass
	 void                      AddDefaultInventory ( class APawn* PlayerPawn );  		//  WMission.wMSGameInfo.AddDefaultInventory
	 void                      RespawnPlayer ( class AController* C, bool bClearSpecials );		//  WMission.wMSGameInfo.RespawnPlayer
	 void                      RestartPlayer ( class AController* aPlayer );     		//  WMission.wMSGameInfo.RestartPlayer
	 void                      ForceRestartPlayer ( class AController* aPlayer );		//  WMission.wMSGameInfo.ForceRestartPlayer
	 void                      TeamScoreEvent ( int Team, float Points, struct FString Desc );		//  WMission.wMSGameInfo.TeamScoreEvent
	 void                      ScoreEvent ( class APlayerReplicationInfo* Who, float Points, struct FString Desc );		//  WMission.wMSGameInfo.ScoreEvent
	 void                      KillEvent ( struct FString KillType, class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, class UClass* Damage );		//  WMission.wMSGameInfo.KillEvent
	 void                      SpecialEvent ( class APlayerReplicationInfo* Who, struct FString Desc );		//  WMission.wMSGameInfo.SpecialEvent
	 bool                      CriticalPlayer ( class AController* Other );      		//  WMission.wMSGameInfo.CriticalPlayer
	 int                       VehicleScoreKill ( class AController* Killer, class AController* Killed, class AVehicle* DestroyedVehicle, struct FString* KillInfo );		//  WMission.wMSGameInfo.VehicleScoreKill
	 void                      Killed ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  WMission.wMSGameInfo.Killed
	 void                      TeleportPlayerToSpawn ( class AController* C );   		//  WMission.wMSGameInfo.TeleportPlayerToSpawn
	 void                      eventNoTranslocatorKeyPressed ( class APlayerController* PC );		// [ FUNC_Event ] WMission.wMSGameInfo.NoTranslocatorKeyPressed
	 void                      eventNewSpawnAreaEnabled ( bool bDefenders );     		// [ FUNC_Event ] WMission.wMSGameInfo.NewSpawnAreaEnabled
	 bool                      CanDisableObjective ( class AGameObjective* Go ); 		//  WMission.wMSGameInfo.CanDisableObjective
	 bool                      NeedToRespawnSD (  );                             		//  WMission.wMSGameInfo.NeedToRespawnSD
	 bool                      IsPlaying (  );                                   		//  WMission.wMSGameInfo.IsPlaying
	 bool                      IsPracticeRound (  );                             		//  WMission.wMSGameInfo.IsPracticeRound
	 bool                      IsPlayingIntro (  );                              		//  WMission.wMSGameInfo.IsPlayingIntro
	 int                       GetDefenderNum (  );                              		//  WMission.wMSGameInfo.GetDefenderNum
	 int                       GetAttackingTeam (  );                            		//  WMission.wMSGameInfo.GetAttackingTeam
	 bool                      IsAttackingTeam ( int TeamNumber );               		//  WMission.wMSGameInfo.IsAttackingTeam
	 void                      BeginNewPairOfRounds (  );                        		//  WMission.wMSGameInfo.BeginNewPairOfRounds
	 void                      BeginRound ( bool bNoReset );                     		//  WMission.wMSGameInfo.BeginRound
	 void                      DestoryPawns (  );                                		//  WMission.wMSGameInfo.DestoryPawns
	 bool                      ProcessSwitchTeam ( bool bNoReset );              		//  WMission.wMSGameInfo.ProcessSwitchTeam
	 void                      SetRoundTimeLimit (  );                           		//  WMission.wMSGameInfo.SetRoundTimeLimit
	 void                      InitializeGameInfo ( bool bNoReset, bool bChangeTeam );		//  WMission.wMSGameInfo.InitializeGameInfo
	 void                      AnnounceSwitchTeam (  );                          		//  WMission.wMSGameInfo.AnnounceSwitchTeam
	 void                      NewRoundSwitchTeam (  );                          		//  WMission.wMSGameInfo.NewRoundSwitchTeam
	 void                      ResetLevel ( bool hiddenAll );                    		//  WMission.wMSGameInfo.ResetLevel
	 void                      StartNewRound (  );                               		//  WMission.wMSGameInfo.StartNewRound
	 void                      execNewRound (  );                                		// [ FUNC_Exec ] WMission.wMSGameInfo.NewRound
	 void                      AnnounceScore ( int ScoringTeam );                		//  WMission.wMSGameInfo.AnnounceScore
	 void                      SetRoundWinner ( int WinningTeam );               		//  WMission.wMSGameInfo.SetRoundWinner
	 void                      PracticeRoundEnded (  );                          		//  WMission.wMSGameInfo.PracticeRoundEnded
	 bool                      IsRoundLimitReached (  );                         		//  WMission.wMSGameInfo.IsRoundLimitReached
	 void                      EndRound ( unsigned char RoundEndReason, class APawn* Instigator, struct FString Reason );		//  WMission.wMSGameInfo.EndRound
	 void                      NotifyEndRound (  );                              		//  WMission.wMSGameInfo.NotifyEndRound
	 void                      NotifyBeginRound (  );                            		//  WMission.wMSGameInfo.NotifyBeginRound
	 void                      CalcRoundResultPoints ( int ScoringTeam );        		//  WMission.wMSGameInfo.CalcRoundResultPoints
	 void                      ProcessEndGame (  );                              		//  WMission.wMSGameInfo.ProcessEndGame
	 void                      PlayEndOfMatchMessage (  );                       		//  WMission.wMSGameInfo.PlayEndOfMatchMessage
	 bool                      CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );		//  WMission.wMSGameInfo.CheckEndGame
	 void                      eventSceneStarted ( class ASceneManager* SM, class AActor* Other );		// [ FUNC_Event ] WMission.wMSGameInfo.SceneStarted
	 void                      ProcessRespawn (  );                              		//  WMission.wMSGameInfo.ProcessRespawn
	 void                      ExplodeBomb (  );                                 		//  WMission.wMSGameInfo.ExplodeBomb
	 void                      ProcessEndRound (  );                             		//  WMission.wMSGameInfo.ProcessEndRound
	 int                       GetTimeSecondsLeft (  );                          		//  WMission.wMSGameInfo.GetTimeSecondsLeft
	 void                      CheckEndGameAfterRoundTimeOver (  );              		//  WMission.wMSGameInfo.CheckEndGameAfterRoundTimeOver
	 void                      execfEndRound ( unsigned char Team );             		// [ FUNC_Exec ] WMission.wMSGameInfo.fEndRound
	 void                      OnRoundTimeOverWithoutObjectPlanted (  );         		//  WMission.wMSGameInfo.OnRoundTimeOverWithoutObjectPlanted
	 void                      BroadCast_AssaultRole_Message ( class APlayerController* C );		//  WMission.wMSGameInfo.BroadCast_AssaultRole_Message
	 void                      GameObjectDropped ( class ADecoration* D );       		//  WMission.wMSGameInfo.GameObjectDropped
	 void                      DiscardInventory ( class APawn* Other );          		//  WMission.wMSGameInfo.DiscardInventory
	 void                      OnKillingDropOut ( class APawn* P );              		//  WMission.wMSGameInfo.OnKillingDropOut
	 void                      Logout ( class AController* Exiting );            		//  WMission.wMSGameInfo.Logout
	 void                      InitGameReplicationInfo (  );                     		//  WMission.wMSGameInfo.InitGameReplicationInfo
	 void                      StartMatch (  );                                  		//  WMission.wMSGameInfo.StartMatch
	 void                      StartMatchChangedHost (  );                       		//  WMission.wMSGameInfo.StartMatchChangedHost
	 void                      eventInitGame ( struct FString Options, struct FString* Error );		// [ FUNC_Event ] WMission.wMSGameInfo.InitGame
	 class APlayerController*  eventLogin ( struct FString Portal, struct FString Options, struct FString* Error );		// [ FUNC_Event ] WMission.wMSGameInfo.Login
	 void                      PostBeginPlay (  );                               		//  WMission.wMSGameInfo.PostBeginPlay
	 void                      ForceObjectiveDefenderTeamIndex (  );             		//  WMission.wMSGameInfo.ForceObjectiveDefenderTeamIndex
	 void                      TweakSkill ( class ABot* B );                     		//  WMission.wMSGameInfo.TweakSkill
	 bool                      NeverAllowTransloc (  );                          		//  WMission.wMSGameInfo.NeverAllowTransloc
	 bool                      AllowTransloc (  );                               		//  WMission.wMSGameInfo.AllowTransloc
	 bool                      DivertSpaceFighter (  );                          		//  WMission.wMSGameInfo.DivertSpaceFighter
	 void                      CheckReady (  );                                  		//  WMission.wMSGameInfo.CheckReady
	 void                      Reset (  );                                       		//  WMission.wMSGameInfo.Reset
}; // Size: 0x00D0

// Class WMission.wDiffuseObjective
class DLL_IMPORT AwDiffuseObjective : public AUseObjective
{
public:
	class APawn*                                       TP;                                               		// 0x06F4 ( 0x0004 ) 
	float                                              fSetTime;                                         		// 0x06F8 ( 0x0004 ) [ CPF_Net ]
	float                                              fSetTimeBefore;                                   		// 0x06FC ( 0x0004 ) 
	float                                              fSetTimeClient;                                   		// 0x0700 ( 0x0004 ) 
	float                                              fSettingLength;                                   		// 0x0704 ( 0x0004 ) [ CPF_Edit ]
	int                                                iTest;                                            		// 0x0708 ( 0x0004 ) 
	float                                              fDecLength;                                       		// 0x070C ( 0x0004 ) 
	unsigned long                                      bReplicateSettingOn:1;                            		// 0x0710 ( 0x0004 )  [0x00000001]
	unsigned char                                      bySettingOn;                                      		// 0x0714 ( 0x0001 ) [ CPF_Net ]
	unsigned long                                      lastBombVisibility:1;                             		// 0x0718 ( 0x0004 )  [0x00000001]
	class TArray< class APawn* >                       TouchingPawns;                                    		// 0x071C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class AwGameObject_Bomb* >           bombs;                                            		// 0x0728 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     BombDefusedMessage;                               		// 0x0734 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class AwGameObject_Bomb*                           Setbomb;                                          		// 0x0740 ( 0x0004 ) 

	// UScript Functions
	 void                      Reset (  );                                       		//  WMission.wDiffuseObjective.Reset
	 void                      RefreshState (  );                                		//  WMission.wDiffuseObjective.RefreshState
	 float                     GetObjectiveProgress (  );                        		// [ FUNC_Simulated ] WMission.wDiffuseObjective.GetObjectiveProgress
	 void                      PlayerToucherDied ( class APawn* P );             		//  WMission.wDiffuseObjective.PlayerToucherDied
	 bool                      IsRelevant ( class APawn* P, bool bAliveCheck );  		//  WMission.wDiffuseObjective.IsRelevant
	 void                      UnTouch ( class AActor* Other );                  		//  WMission.wDiffuseObjective.UnTouch
	 void                      Touch ( class AActor* Other );                    		//  WMission.wDiffuseObjective.Touch
	 bool                      CanDefuse ( class APawn* P );                     		// [ FUNC_Simulated ] WMission.wDiffuseObjective.CanDefuse
	 bool                      IsDefusing ( class APawn* P );                    		// [ FUNC_Simulated ] WMission.wDiffuseObjective.IsDefusing
	 void                      eventTick ( float DeltaTime );                    		// [ FUNC_Event ] WMission.wDiffuseObjective.Tick
	 void                      PlayBombDefusedMessage ( class APawn* TP );       		//  WMission.wDiffuseObjective.PlayBombDefusedMessage
	 void                      OnBombDiffused ( class APawn* P );                		//  WMission.wDiffuseObjective.OnBombDiffused
	 void                      UpdateBombs (  );                                 		//  WMission.wDiffuseObjective.UpdateBombs
	 void                      SetBombVisibility ( bool val );                   		//  WMission.wDiffuseObjective.SetBombVisibility
	 void                      eventUsedBy ( class APawn* User );                		// [ FUNC_Event ] WMission.wDiffuseObjective.UsedBy
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Simulated | FUNC_Event ] WMission.wDiffuseObjective.PreBeginPlay
}; // Size: 0x0050

// Class WMission.wGameObject_Bomb
class DLL_IMPORT AwGameObject_Bomb : public AGameObject
{
public:
	struct FString                                     PlayerDroppedMessage;                             		// 0x0450 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DroppedMessage;                                   		// 0x045C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EnergyCorePickedUp;                               		// 0x0468 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     PlayerPickedUpEnergyCore;                         		// 0x0474 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     PlayerCoreReset;                                  		// 0x0480 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EnemyPickedUpBomb;                                		// 0x048C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EnemyDroppedBomb;                                 		// 0x0498 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Announcer_EnergyCore_Dropped;                     		// 0x04A4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Announcer_EnergyCore_PickedUp;                    		// 0x04B0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Announcer_EnergyCore_Reset;                       		// 0x04BC ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bSoundsPrecached:1;                               		// 0x04C8 ( 0x0004 )  [0x00000001]
	class AwBombObjective*                             MySpawnObjective;                                 		// 0x04CC ( 0x0004 ) 
	struct FString                                     strPlayerName;                                    		// 0x04D0 ( 0x000C ) [ CPF_Net | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      PrecacheAnnouncer ( class AAnnouncerVoice* V, bool bRewardSounds );		// [ FUNC_Simulated ] WMission.wGameObject_Bomb.PrecacheAnnouncer
	 void                      LogReturned (  );                                 		//  WMission.wGameObject_Bomb.LogReturned
	 void                      HolderDied (  );                                  		//  WMission.wGameObject_Bomb.HolderDied
	 void                      Landed ( struct FVector HitNormal );              		//  WMission.wGameObject_Bomb.Landed
	 void                      Drop ( struct FVector NewVel, struct FString sReason );		//  WMission.wGameObject_Bomb.Drop
	 void                      ProcessThrowMessage (  );                         		//  WMission.wGameObject_Bomb.ProcessThrowMessage
	 void                      ProcessDropMessage (  );                          		//  WMission.wGameObject_Bomb.ProcessDropMessage
	 void                      ClearHolder (  );                                 		//  WMission.wGameObject_Bomb.ClearHolder
	 void                      SetHolder ( class AController* C );               		//  WMission.wGameObject_Bomb.SetHolder
	 void                      ProcessSetHolderMessage ( class AController* C ); 		//  WMission.wGameObject_Bomb.ProcessSetHolderMessage
	 void                      OnSetHolder ( class AController* C );             		//  WMission.wGameObject_Bomb.OnSetHolder
	 bool                      ValidHolder ( class AActor* Other );              		//  WMission.wGameObject_Bomb.ValidHolder
	 void                      PostBeginPlay (  );                               		//  WMission.wGameObject_Bomb.PostBeginPlay
	 bool                      CanBePickedUpBy ( class APawn* P );               		//  WMission.wGameObject_Bomb.CanBePickedUpBy
}; // Size: 0x008C

// Class WMission.wSDGameInfo
class DLL_IMPORT AwSDGameInfo : public AwMSGameInfo
{
public:
	struct FString                                     VoiceOurTeamPlantedBomb;                          		// 0x16A0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     VoiceEnemyPlantedBomb;                            		// 0x16AC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     sndModeExplain_Attack;                            		// 0x16B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     sndModeExplain_Defend;                            		// 0x16C4 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              AddScore_Plant;                                   		// 0x16D0 ( 0x0004 ) 
	float                                              AddScore_Defuse;                                  		// 0x16D4 ( 0x0004 ) 
	float                                              AddExp_Plant;                                     		// 0x16D8 ( 0x0004 ) 
	float                                              AddExp_Defuse;                                    		// 0x16DC ( 0x0004 ) 
	float                                              AddPoint_Plant;                                   		// 0x16E0 ( 0x0004 ) 
	float                                              AddPoint_Defuse;                                  		// 0x16E4 ( 0x0004 ) 
	int                                                StartPlayerCount;                                 		// 0x16E8 ( 0x0004 ) 
	unsigned long                                      bSentEndRound:1;                                  		// 0x16EC ( 0x0004 )  [0x00000001]

	// UScript Functions
	 bool                      EndGameByTeamNoneLeft ( class APlayerReplicationInfo* Living );		//  WMission.wSDGameInfo.EndGameByTeamNoneLeft
	 void                      AnnounceAlmostWinningTeam (  );                   		//  WMission.wSDGameInfo.AnnounceAlmostWinningTeam
	 void                      AnnounceWinningTeam (  );                         		//  WMission.wSDGameInfo.AnnounceWinningTeam
	 float                     GetResultPointRatio_Intervention ( class APlayerReplicationInfo* PRI );		//  WMission.wSDGameInfo.GetResultPointRatio_Intervention
	 void                      SetPRI4Intervention ( class APlayerReplicationInfo* PRI );		//  WMission.wSDGameInfo.SetPRI4Intervention
	 void                      CalcRoundResultPoints ( int ScoringTeam );        		//  WMission.wSDGameInfo.CalcRoundResultPoints
	 void                      CalcResultPoints (  );                            		//  WMission.wSDGameInfo.CalcResultPoints
	 void                      AnnounceMatchInfo_SD (  );                        		//  WMission.wSDGameInfo.AnnounceMatchInfo_SD
	 void                      AnnounceSwitchTeam (  );                          		//  WMission.wSDGameInfo.AnnounceSwitchTeam
	 void                      PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds );		//  WMission.wSDGameInfo.PrecacheGameAnnouncements
	 void                      InitializeSetObjectives (  );                     		//  WMission.wSDGameInfo.InitializeSetObjectives
	 void                      EndRound ( unsigned char RoundEndReason, class APawn* Instigator, struct FString Reason );		//  WMission.wSDGameInfo.EndRound
	 void                      ServerLogEndRound ( unsigned char RoundEndReason, class APawn* Instigator, struct FString Reason );		//  WMission.wSDGameInfo.ServerLogEndRound
	 int                       GetWinTeamAD ( int winTeam );                     		//  WMission.wSDGameInfo.GetWinTeamAD
	 int                       GetWinTeam ( unsigned char RoundEndReason );      		//  WMission.wSDGameInfo.GetWinTeam
	 int                       GetRoundEndType ( unsigned char RoundEndReason ); 		//  WMission.wSDGameInfo.GetRoundEndType
	 int                       CountPlayersByTeam ( int Team );                  		//  WMission.wSDGameInfo.CountPlayersByTeam
	 void                      AnnounceBeginRound (  );                          		//  WMission.wSDGameInfo.AnnounceBeginRound
	 void                      BeginRound ( bool bNoReset );                     		//  WMission.wSDGameInfo.BeginRound
	 void                      OnBombDiffused ( class APawn* TP, struct FName Tag, struct FVector FlagLocation );		//  WMission.wSDGameInfo.OnBombDiffused
	 void                      SetObjectiveSetted ( class APawn* TP, struct FName ObjectTag, struct FVector FlagLocation );		//  WMission.wSDGameInfo.SetObjectiveSetted
	 void                      PlayObjectiveSetVociceBGM ( class APawn* TP );    		//  WMission.wSDGameInfo.PlayObjectiveSetVociceBGM
	 void                      GotoDefusePhase ( struct FName ObjectTag );       		//  WMission.wSDGameInfo.GotoDefusePhase
	 void                      eventInitGame ( struct FString Options, struct FString* Error );		// [ FUNC_Event ] WMission.wSDGameInfo.InitGame
}; // Size: 0x0050

// Class WMission.wFlagObjective
class DLL_IMPORT AwFlagObjective : public AwFlagObjectiveBase
{
public:
	class TArray< class APawn* >                       LinkedTeam_C;                                     		// 0x0768 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 float                     GetObjectiveProgress (  );                        		// [ FUNC_Simulated ] WMission.wFlagObjective.GetObjectiveProgress
	 void                      Reset (  );                                       		//  WMission.wFlagObjective.Reset
	 bool                      IsRelevant ( class APawn* P, bool bAliveCheck );  		//  WMission.wFlagObjective.IsRelevant
	 void                      RemoveTouchingPlayer ( class APawn* P );          		//  WMission.wFlagObjective.RemoveTouchingPlayer
	 void                      AddNewTouchingPlayer ( class APawn* P );          		//  WMission.wFlagObjective.AddNewTouchingPlayer
	 void                      eventTick ( float DeltaTime );                    		// [ FUNC_Event ] WMission.wFlagObjective.Tick
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Simulated | FUNC_Event ] WMission.wFlagObjective.PreBeginPlay
	 void                      eventUsedBy ( class APawn* User );                		// [ FUNC_Event ] WMission.wFlagObjective.UsedBy
}; // Size: 0x000C

// Class WMission.wDOMGameInfo
class DLL_IMPORT AwDOMGameInfo : public AwMSGameInfo
{
public:
	class TArray< int >                                Codes_AllyCapturing;                              		// 0x16A0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                Codes_EnemyCapturing;                             		// 0x16AC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                Codes_AllyCaptured;                               		// 0x16B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                Codes_EnemyCaptured;                              		// 0x16C4 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                FlagScoreInterval;                                		// 0x16D0 ( 0x0004 ) 
	int                                                FlagScore;                                        		// 0x16D4 ( 0x0004 ) 
	class TArray< class AwFlagObjectiveBase* >         Flags;                                            		// 0x16D8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              afTakerXCoord;                                    		// 0x16E4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              afTakerYCoord;                                    		// 0x16F0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              afTakerZCoord;                                    		// 0x16FC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                aiTakerPos;                                       		// 0x1708 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                aiTakerWeapon;                                    		// 0x1714 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                aiTakerWeaponPart;                                		// 0x1720 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                aiTakerRange;                                     		// 0x172C ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      GetGameSpecificPurposes ( class AController* Owner, class TArray< class UObject* >* purposes );		//  WMission.wDOMGameInfo.GetGameSpecificPurposes
	 void                      PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds );		//  WMission.wDOMGameInfo.PrecacheGameAnnouncements
	 void                      GetFlagsInfo ( int* outNumFlags, int* outNumCapturedFlagsByTeam1, int* outNumCapturedFlagsByTeam2 );		//  WMission.wDOMGameInfo.GetFlagsInfo
	 void                      StartMatch (  );                                  		//  WMission.wDOMGameInfo.StartMatch
	 void                      CheckLastMan ( int TeamIndex );                   		//  WMission.wDOMGameInfo.CheckLastMan
	 int                       GetBootySeedValue (  );                           		//  WMission.wDOMGameInfo.GetBootySeedValue
	 int                       GetTotalPlayedTime (  );                          		//  WMission.wDOMGameInfo.GetTotalPlayedTime
	 void                      CalcResultPoints (  );                            		//  WMission.wDOMGameInfo.CalcResultPoints
	 void                      PlayEndOfMatchMessage (  );                       		//  WMission.wDOMGameInfo.PlayEndOfMatchMessage
	 void                      ClearTakerInfo (  );                              		//  WMission.wDOMGameInfo.ClearTakerInfo
	 void                      TakerInfo ( class APawn* TakerPawn, struct FVector FlagLocation );		//  WMission.wDOMGameInfo.TakerInfo
	 void                      FlagState_UpdateDomScore ( int AFScore, int RSAScore );		//  WMission.wDOMGameInfo.FlagState_UpdateDomScore
	 void                      FlagState_TakePoint ( class TArray< int > TakerUID, struct FName FlagTag );		//  WMission.wDOMGameInfo.FlagState_TakePoint
	 void                      AnnounceFlagState ( unsigned char byState, unsigned char byTeam, struct FName FlagTag );		//  WMission.wDOMGameInfo.AnnounceFlagState
	 void                      AnnounceFlagCapture ( unsigned char byState, unsigned char byTeam, unsigned char byFlagIndex );		//  WMission.wDOMGameInfo.AnnounceFlagCapture
	 void                      InitializeCodes (  );                             		//  WMission.wDOMGameInfo.InitializeCodes
	 void                      AnnounceAllFlagCaptured ( unsigned char byTeam ); 		//  WMission.wDOMGameInfo.AnnounceAllFlagCaptured
	 bool                      IsAllFlagCaptured (  );                           		//  WMission.wDOMGameInfo.IsAllFlagCaptured
	 float                     RatePlayerStart ( class ANavigationPoint* N, unsigned char Team, class AController* Player );		//  WMission.wDOMGameInfo.RatePlayerStart
	 class ANavigationPoint*   FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName );		//  WMission.wDOMGameInfo.FindPlayerStart
	 bool                      IsSDRespawnTime (  );                             		//  WMission.wDOMGameInfo.IsSDRespawnTime
	 class TArray< unsigned char > GetShuffledFlags (  );                            		//  WMission.wDOMGameInfo.GetShuffledFlags
	 class AwFlagObjective*    GetFlagObjectiveByType ( unsigned char FlagType );		//  WMission.wDOMGameInfo.GetFlagObjectiveByType
	 class TArray< class ANavigationPoint* > GetRespawnPointsFlagNeutral ( bool checkFail );   		//  WMission.wDOMGameInfo.GetRespawnPointsFlagNeutral
	 class TArray< class ANavigationPoint* > GetRespawnPointsForFlag ( class AwFlagObjective* flag );		//  WMission.wDOMGameInfo.GetRespawnPointsForFlag
	 bool                      IsAppropriateRespawnPoint ( class ANavigationPoint* N, unsigned char Team );		//  WMission.wDOMGameInfo.IsAppropriateRespawnPoint
	 void                      RespawnPlayer ( class AController* C, bool bClearSpecials );		//  WMission.wDOMGameInfo.RespawnPlayer
	 void                      EndDOMGame ( int iWinningTeam, class APawn* Instigator, struct FString Reason );		//  WMission.wDOMGameInfo.EndDOMGame
	 void                      OnRoundTimeOverWithoutObjectPlanted (  );         		//  WMission.wDOMGameInfo.OnRoundTimeOverWithoutObjectPlanted
	 void                      EndRound ( unsigned char RoundEndReason, class APawn* Instigator, struct FString Reason );		//  WMission.wDOMGameInfo.EndRound
	 void                      AddTeamScore ( int iTeamIndex );                  		//  WMission.wDOMGameInfo.AddTeamScore
	 void                      CheckEndGameAfterRoundTimeOver (  );              		//  WMission.wDOMGameInfo.CheckEndGameAfterRoundTimeOver
	 void                      ContinueMatch (  );                               		//  WMission.wDOMGameInfo.ContinueMatch
	 void                      ChangeHostExtraWork (  );                         		//  WMission.wDOMGameInfo.ChangeHostExtraWork
	 class AActor*             GetNearFlag ( class AActor* A );                  		//  WMission.wDOMGameInfo.GetNearFlag
	 void                      GetGameSpecificActions ( class AController* C, class UwNPCActions* npcActions, class TArray< class UObject* >* Actions );		//  WMission.wDOMGameInfo.GetGameSpecificActions
}; // Size: 0x0098

// Class WMission.wBombObjective
class DLL_IMPORT AwBombObjective : public AGameObjective
{
public:
	class USound*                                      TakenSound;                                       		// 0x06E4 ( 0x0004 ) [ CPF_Edit ]
	class AwGameObject_Bomb*                           myFlag;                                           		// 0x06E8 ( 0x0004 ) 
	class UClass*                                      FlagType;                                         		// 0x06EC ( 0x0004 ) 
	class UStaticMesh*                                 FlagMesh;                                         		// 0x06F0 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     PlayerDroppedMessage;                             		// 0x06F4 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DroppedMessage;                                   		// 0x0700 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EnergyCorePickedUp;                               		// 0x070C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     PlayerPickedUpEnergyCore;                         		// 0x0718 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     PlayerCoreReset;                                  		// 0x0724 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Announcer_EnergyCore_Dropped;                     		// 0x0730 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Announcer_EnergyCore_PickedUp;                    		// 0x073C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Announcer_EnergyCore_Reset;                       		// 0x0748 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      PrecacheAnnouncer ( class AAnnouncerVoice* V, bool bRewardSounds );		// [ FUNC_Simulated ] WMission.wBombObjective.PrecacheAnnouncer
	 void                      Reset (  );                                       		//  WMission.wBombObjective.Reset
	 bool                      BetterObjectiveThan ( class AGameObjective* Best, unsigned char DesiredTeamNum, unsigned char RequesterTeamNum );		//  WMission.wBombObjective.BetterObjectiveThan
	 bool                      BotNearObjective ( class ABot* B );               		//  WMission.wBombObjective.BotNearObjective
	 void                      SetActive ( bool bActiveStatus );                 		//  WMission.wBombObjective.SetActive
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Simulated | FUNC_Event ] WMission.wBombObjective.PreBeginPlay
}; // Size: 0x0070

// Class WMission.wSBTBombObjective
class DLL_IMPORT AwSBTBombObjective : public AwBombObjective
{
public:
}; // Size: 0x0000

// Class WMission.wGameObject_SBTBomb
class DLL_IMPORT AwGameObject_SBTBomb : public AwGameObject_Bomb
{
public:
	struct FVector                                     LastPosition;                                     		// 0x04DC ( 0x000C ) [ CPF_Net ]
	float                                              LastPositionUpdateInterval;                       		// 0x04E8 ( 0x0004 ) 

	// UScript Functions
	 void                      Drop ( struct FVector NewVel, struct FString sReason );		//  WMission.wGameObject_SBTBomb.Drop
	 void                      ProcessDropMessage (  );                          		//  WMission.wGameObject_SBTBomb.ProcessDropMessage
	 void                      ProcessSetHolderMessage ( class AController* C ); 		//  WMission.wGameObject_SBTBomb.ProcessSetHolderMessage
	 void                      SetAttackingTeam ( int Team );                    		//  WMission.wGameObject_SBTBomb.SetAttackingTeam
	 void                      OnSetHolder ( class AController* C );             		//  WMission.wGameObject_SBTBomb.OnSetHolder
	 bool                      CanBePickedUpBy ( class APawn* P );               		//  WMission.wGameObject_SBTBomb.CanBePickedUpBy
}; // Size: 0x0010

// Class WMission.wSBTSetObjective
class DLL_IMPORT AwSBTSetObjective : public AwSetObjective
{
public:

	// UScript Functions
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Simulated | FUNC_Event ] WMission.wSBTSetObjective.PreBeginPlay
}; // Size: 0x0000

// Class WMission.wSBTSetObjective_AF
class DLL_IMPORT AwSBTSetObjective_AF : public AwSBTSetObjective
{
public:
}; // Size: 0x0000

// Class WMission.wSBTDiffuseObjective
class DLL_IMPORT AwSBTDiffuseObjective : public AwDiffuseObjective
{
public:

	// UScript Functions
	 void                      OnBombDiffused ( class APawn* P );                		//  WMission.wSBTDiffuseObjective.OnBombDiffused
	 void                      SetBombHolder ( class APawn* P );                 		//  WMission.wSBTDiffuseObjective.SetBombHolder
	 void                      ResetGameInfoOnBombDiffused (  );                 		//  WMission.wSBTDiffuseObjective.ResetGameInfoOnBombDiffused
	 void                      SetActive ( bool bActiveStatus );                 		//  WMission.wSBTDiffuseObjective.SetActive
	 void                      SetTeam ( unsigned char TeamIndex );              		//  WMission.wSBTDiffuseObjective.SetTeam
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Simulated | FUNC_Event ] WMission.wSBTDiffuseObjective.PreBeginPlay
}; // Size: 0x0000

// Class WMission.wSBTDiffuseObjective_AF
class DLL_IMPORT AwSBTDiffuseObjective_AF : public AwSBTDiffuseObjective
{
public:
}; // Size: 0x0000

// Class WMission.wSBTGameInfo
class DLL_IMPORT AwSBTGameInfo : public AwSDGameInfo
{
public:
	int                                                PrimaryTeam;                                      		// 0x16F0 ( 0x0004 ) 

	// UScript Functions
	 void                      AnnounceAlmostWinningTeam (  );                   		//  WMission.wSBTGameInfo.AnnounceAlmostWinningTeam
	 int                       GetWinTeamAD ( int winTeam );                     		//  WMission.wSBTGameInfo.GetWinTeamAD
	 bool                      ProcessSwitchTeam ( bool bNoReset );              		//  WMission.wSBTGameInfo.ProcessSwitchTeam
	 float                     RatePlayerStart ( class ANavigationPoint* N, unsigned char Team, class AController* Player );		//  WMission.wSBTGameInfo.RatePlayerStart
	 class ANavigationPoint*   FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName );		//  WMission.wSBTGameInfo.FindPlayerStart
	 bool                      IsSDRespawnTime (  );                             		//  WMission.wSBTGameInfo.IsSDRespawnTime
	 class TArray< class ANavigationPoint* > GetRespawnCandidatesByTeamGG ( unsigned char Team );		//  WMission.wSBTGameInfo.GetRespawnCandidatesByTeamGG
	 class TArray< class ANavigationPoint* > GetRespawnCandidatesByTeam ( unsigned char Team, bool checkFail );		//  WMission.wSBTGameInfo.GetRespawnCandidatesByTeam
	 bool                      IsAppropriateRespawnPoint ( class ANavigationPoint* N, unsigned char Team );		//  WMission.wSBTGameInfo.IsAppropriateRespawnPoint
	 void                      AnnounceSwitchTeam (  );                          		//  WMission.wSBTGameInfo.AnnounceSwitchTeam
	 int                       GetPlayerStartTeam ( class ANavigationPoint* N, int Team );		//  WMission.wSBTGameInfo.GetPlayerStartTeam
	 void                      ForceObjectiveDefenderTeamIndex (  );             		//  WMission.wSBTGameInfo.ForceObjectiveDefenderTeamIndex
	 void                      OnRoundTimeOverWithoutObjectPlanted (  );         		//  WMission.wSBTGameInfo.OnRoundTimeOverWithoutObjectPlanted
	 void                      SetObjectiveSetted ( class APawn* TP, struct FName ObjectTag, struct FVector FlagLocation );		//  WMission.wSBTGameInfo.SetObjectiveSetted
	 void                      PlayObjectiveSetVociceBGM ( class APawn* TP );    		//  WMission.wSBTGameInfo.PlayObjectiveSetVociceBGM
	 void                      GotoDefusePhase ( struct FName ObjectTag );       		//  WMission.wSBTGameInfo.GotoDefusePhase
	 void                      AnnounceBeginRound (  );                          		//  WMission.wSBTGameInfo.AnnounceBeginRound
	 void                      BeginRound ( bool bNoReset );                     		//  WMission.wSBTGameInfo.BeginRound
	 class APlayerController*  eventLogin ( struct FString Portal, struct FString Options, struct FString* Error );		// [ FUNC_Event ] WMission.wSBTGameInfo.Login
	 void                      StartHumanPlayers (  );                           		//  WMission.wSBTGameInfo.StartHumanPlayers
	 void                      CheckLastMan ( int TeamIndex );                   		//  WMission.wSBTGameInfo.CheckLastMan
	 bool                      EndGameByTeamNoneLeft ( class APlayerReplicationInfo* Living );		//  WMission.wSBTGameInfo.EndGameByTeamNoneLeft
	 bool                      AllowBecomeActivePlayer ( class APlayerController* P );		//  WMission.wSBTGameInfo.AllowBecomeActivePlayer
	 void                      CalcRoundResultPoints ( int ScoringTeam );        		//  WMission.wSBTGameInfo.CalcRoundResultPoints
	 void                      CalcResultPoints (  );                            		//  WMission.wSBTGameInfo.CalcResultPoints
	 void                      PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds );		//  WMission.wSBTGameInfo.PrecacheGameAnnouncements
	 bool                      IsNewPlayerGotoSpectating (  );                   		//  WMission.wSBTGameInfo.IsNewPlayerGotoSpectating
	 void                      InitializeGameInfo ( bool bNoReset, bool bChangeTeam );		//  WMission.wSBTGameInfo.InitializeGameInfo
	 void                      eventInitGame ( struct FString Options, struct FString* Error );		// [ FUNC_Event ] WMission.wSBTGameInfo.InitGame
}; // Size: 0x0004

// Class WMission.wSBTSetObjective_RSA
class DLL_IMPORT AwSBTSetObjective_RSA : public AwSBTSetObjective
{
public:
}; // Size: 0x0000

// Class WMission.wSBTDiffuseObjective_RSA
class DLL_IMPORT AwSBTDiffuseObjective_RSA : public AwSBTDiffuseObjective
{
public:
}; // Size: 0x0000

// Class WMission.wBombObjective_Delivery
class DLL_IMPORT AwBombObjective_Delivery : public AProximityObjective
{
public:
	class AwGameObject_Bomb*                           EC;                                               		// 0x06E8 ( 0x0004 ) 
	class UClass*                                      DeliveringObject;                                 		// 0x06EC ( 0x0004 ) 
	struct FName                                       DeliveringObjectName;                             		// 0x06F0 ( 0x0004 ) 

	// UScript Functions
	 bool                      TellBotHowToDisable ( class ABot* B );            		//  WMission.wBombObjective_Delivery.TellBotHowToDisable
	 void                      ForceDisableObjective ( class APawn* Instigator );		//  WMission.wBombObjective_Delivery.ForceDisableObjective
	 void                      DisableObjective ( class APawn* Instigator );     		//  WMission.wBombObjective_Delivery.DisableObjective
	 void                      CompleteObjective ( class APawn* Instigator );    		//  WMission.wBombObjective_Delivery.CompleteObjective
	 bool                      IsRelevant ( class APawn* Instigator, bool bAliveCheck );		//  WMission.wBombObjective_Delivery.IsRelevant
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Simulated | FUNC_Event ] WMission.wBombObjective_Delivery.PreBeginPlay
}; // Size: 0x000C

// Class WMission.wMSPlayerReplicationInfo
class DLL_IMPORT AwMSPlayerReplicationInfo : public AwPlayerReplicationInfo
{
public:
	unsigned char                                      DisabledObjectivesCount;                          		// 0x0708 ( 0x0001 ) [ CPF_Net ]
	unsigned char                                      DisabledFinalObjective;                           		// 0x0709 ( 0x0001 ) [ CPF_Net ]
	unsigned char                                      DestroyedVehicles;                                		// 0x070A ( 0x0001 ) [ CPF_Net ]
	float                                              TrophiesXOffset;                                  		// 0x070C ( 0x0004 ) 
	struct FString                                     PawnOverrideClass;                                		// 0x0710 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bAutoRespawn:1;                                   		// 0x071C ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bTeleportToSpawnArea:1;                           		// 0x071C ( 0x0004 )  [0x00000002][ CPF_Net ]
	int                                                TeleportTime;                                     		// 0x0720 ( 0x0004 ) [ CPF_Net ]

	// UScript Functions
	 void                      Reset (  );                                       		//  WMission.wMSPlayerReplicationInfo.Reset
	 bool                      CanBotTeleport ( class AController* C );          		//  WMission.wMSPlayerReplicationInfo.CanBotTeleport
	 void                      Timer (  );                                       		//  WMission.wMSPlayerReplicationInfo.Timer
}; // Size: 0x001C

// Class WMission.wMessage_MSKillMessages
class DLL_IMPORT AwMessage_MSKillMessages : public ALocalMessage
{
public:
	struct FString                                     KillString[ 0x08 ];                               		// 0x0440 ( 0x0060 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FName                                       KillSound[ 0x08 ];                                		// 0x04A0 ( 0x0020 ) 

	// UScript Functions
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] WMission.wMessage_MSKillMessages.ClientReceive
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  WMission.wMessage_MSKillMessages.GetString
}; // Size: 0x0080

// Class WMission.wHUD_Mission
class DLL_IMPORT AwHUD_Mission : public AHudCTeamDeathMatch
{
public:
	float                                              ObjectiveScale;                                   		// 0x448C ( 0x0004 ) [ CPF_Config ]
	unsigned long                                      bOnHUDObjectiveNotification:1;                    		// 0x4490 ( 0x0004 )  [0x00000001][ CPF_Config ]
	unsigned long                                      bShowInfoPods:1;                                  		// 0x4490 ( 0x0004 )  [0x00000002][ CPF_Config ]
	unsigned long                                      bDrawAllObjectives:1;                             		// 0x4490 ( 0x0004 )  [0x00000004][ CPF_Config ]
	unsigned long                                      bShow3DArrow:1;                                   		// 0x4490 ( 0x0004 )  [0x00000008][ CPF_Config ]
	unsigned long                                      bObjectiveReminder:1;                             		// 0x4490 ( 0x0004 )  [0x00000010][ CPF_Config ]
	unsigned long                                      bDrawRadar:1;                                     		// 0x4490 ( 0x0004 )  [0x00000020][ CPF_Config ]
	unsigned long                                      bDrawRadarCardinalPoints:1;                       		// 0x4490 ( 0x0004 )  [0x00000040][ CPF_Config ]
	unsigned long                                      bShowWillowWhisp:1;                               		// 0x4490 ( 0x0004 )  [0x00000080][ CPF_Config ]
	int                                                wPawnCountsOld;                                   		// 0x4494 ( 0x0004 ) 
	unsigned long                                      bForceSpawnNotification:1;                        		// 0x4498 ( 0x0004 )  [0x00000001]
	unsigned long                                      bShowObjectiveBoard:1;                            		// 0x4498 ( 0x0004 )  [0x00000002]
	unsigned long                                      bForceObjectiveBoard:1;                           		// 0x4498 ( 0x0004 )  [0x00000004]
	unsigned long                                      bShowMissionIcon:1;                               		// 0x4498 ( 0x0004 )  [0x00000008]
	class TArray< class AGameObjective* >              obj;                                              		// 0x449C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class AwInfoPod* >                   InfoPods;                                         		// 0x44A8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class AwTrigger_MSMessageTrigger* >  MTrigger;                                         		// 0x44B4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UTexRotator* >                 BehindObjectiveArrows;                            		// 0x44C0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class AwObjectivePointingArrow*                    OBJPointingArrow;                                 		// 0x44CC ( 0x0004 ) 
	unsigned char                                      BehindObjectiveCount;                             		// 0x44D0 ( 0x0001 ) 
	float                                              OBJ_ReAppearTime;                                 		// 0x44D4 ( 0x0004 ) 
	float                                              OBJ_FadedOutTime;                                 		// 0x44D8 ( 0x0004 ) 
	float                                              Global_Delta;                                     		// 0x44DC ( 0x0004 ) 
	float                                              fBlink;                                           		// 0x44E0 ( 0x0004 ) 
	float                                              fPulse;                                           		// 0x44E4 ( 0x0004 ) 
	float                                              ASRadarScale;                                     		// 0x44E8 ( 0x0004 ) 
	float                                              ASRadarPosX;                                      		// 0x44EC ( 0x0004 ) [ CPF_Config ]
	float                                              ASRadarPosY;                                      		// 0x44F0 ( 0x0004 ) [ CPF_Config ]
	float                                              LastRadarUpdate;                                  		// 0x44F4 ( 0x0004 ) 
	class TArray< class AVehicle* >                    RadarVehicleCache;                                		// 0x44F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UMaterial*                                   HealthBarBackMat;                                 		// 0x4504 ( 0x0004 ) 
	class UMaterial*                                   HealthBarMat;                                     		// 0x4508 ( 0x0004 ) 
	float                                              HealthBarWidth;                                   		// 0x450C ( 0x0004 ) 
	float                                              HealthBarHeight;                                  		// 0x4510 ( 0x0004 ) 
	int                                                OldRemainingRoundTime;                            		// 0x4514 ( 0x0004 ) 
	struct FString                                     IP_Bracket_Open;                                  		// 0x4518 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     IP_Bracket_Close;                                 		// 0x4524 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Cardinal_North;                                   		// 0x4530 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Cardinal_East;                                    		// 0x453C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Cardinal_South;                                   		// 0x4548 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Cardinal_West;                                    		// 0x4554 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NoGameReplicationInfoString;                      		// 0x4560 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MetersString;                                     		// 0x456C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     TargetString;                                     		// 0x4578 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NoTargetString;                                   		// 0x4584 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     PracticeRoundString;                              		// 0x4590 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              AttackerProgressUpdateTime;                       		// 0x459C ( 0x0004 ) 
	float                                              ObjectiveProgressPulseTime;                       		// 0x45A0 ( 0x0004 ) [ CPF_Config ]
	unsigned char                                      ObjectiveProgress;                                		// 0x45A4 ( 0x0001 ) 
	unsigned char                                      OldObjectiveProgress;                             		// 0x45A5 ( 0x0001 ) 
	class AwMSGameReplicationInfo*                     MSGRI;                                            		// 0x45A8 ( 0x0004 ) 
	class AwMSPlayerReplicationInfo*                   MSPRI;                                            		// 0x45AC ( 0x0004 ) 
	class AGameObjective*                              CurrentObjective;                                 		// 0x45B0 ( 0x0004 ) 
	class AVehicle*                                    TrackedVehicle;                                   		// 0x45B4 ( 0x0004 ) 
	float                                              NextTrackedVehicleSearch;                         		// 0x45B8 ( 0x0004 ) 
	struct FSpriteWidget                               RoundTimeBackGround;                              		// 0x45BC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               ReinforceBackground;                              		// 0x45FC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               TeleportBackground;                               		// 0x463C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               VSBackground;                                     		// 0x467C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               RoundTimeIcon;                                    		// 0x46BC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               ReinforceIcon;                                    		// 0x46FC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               TeleportIcon;                                     		// 0x473C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               VSIcon;                                           		// 0x477C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               ReinforcePulse;                                   		// 0x47BC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               TeleportPulse;                                    		// 0x47FC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               VSPulse;                                          		// 0x483C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               RoundTimeBackGroundDisc;                          		// 0x487C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               ReinforceBackGroundDisc;                          		// 0x48BC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               TeleportBackgroundDisc;                           		// 0x48FC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               VSBackgroundDisc;                                 		// 0x493C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               RoundTimeSeparator;                               		// 0x497C ( 0x0040 ) [ CPF_Edit ]
	struct FNumericWidget                              RoundTimeMinutes;                                 		// 0x49BC ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              RoundTimeSeconds;                                 		// 0x49EC ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              ReinforceSprNum;                                  		// 0x4A1C ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              TeleportSprNum;                                   		// 0x4A4C ( 0x0030 ) [ CPF_Edit ]
	float                                              NextSpawnNotification;                            		// 0x4A7C ( 0x0004 ) 
	unsigned char                                      PrevTeam;                                         		// 0x4A80 ( 0x0001 ) 
	class AwObjectiveProgressDisplay*                  ObjectiveBoard;                                   		// 0x4A84 ( 0x0004 ) [ CPF_Edit ]
	float                                              IntroTitleFade;                                   		// 0x4A88 ( 0x0004 ) 
	float                                              fViewDelayTime;                                   		// 0x4A8C ( 0x0004 ) 
	float                                              fBeginDrawTime;                                   		// 0x4A90 ( 0x0004 ) 
	unsigned long                                      bViewRoundResult:1;                               		// 0x4A94 ( 0x0004 )  [0x00000001]
	struct FSpriteWidget                               PlantLabel;                                       		// 0x4A98 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               DiffuseLabel;                                     		// 0x4AD8 ( 0x0040 ) [ CPF_Edit ]
	unsigned long                                      bProgressDone:1;                                  		// 0x4B18 ( 0x0004 )  [0x00000001]
	float                                              fProgressDoneTime;                                		// 0x4B1C ( 0x0004 ) 
	class TArray< struct FSpriteWidget >               MinimapEnemyFlags;                                		// 0x4B20 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FSpriteWidget >               MinimapNoncapturedFlag;                           		// 0x4B2C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FSpriteWidget >               MinimapAllyFlag;                                  		// 0x4B38 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              LastSpectatingTime;                               		// 0x4B44 ( 0x0004 ) 
	float                                              BeginSpectatingTime;                              		// 0x4B48 ( 0x0004 ) 
	unsigned long                                      bDrawRoundResult:1;                               		// 0x4B4C ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      DrawMissionIcon ( class UCanvas* C, class AwPawn* curPawn );		//  WMission.wHUD_Mission.DrawMissionIcon
	 void                      DrawIntroTitle ( class UCanvas* C );              		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawIntroTitle
	 void                      DrawCinematicHUD ( class UCanvas* C );            		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawCinematicHUD
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] WMission.wHUD_Mission.UpdatePrecacheMaterials
	 void                      UpdatePrecacheStaticMeshes (  );                  		// [ FUNC_Simulated ] WMission.wHUD_Mission.UpdatePrecacheStaticMeshes
	 struct FString            GetInfoString (  );                               		// [ FUNC_Simulated ] WMission.wHUD_Mission.GetInfoString
	 void                      CheckCountdown ( class AGameReplicationInfo* GRI );		//  WMission.wHUD_Mission.CheckCountdown
	 void                      DrawPracticeRoundInfo ( class UCanvas* C );       		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawPracticeRoundInfo
	 void                      eventTeamChanged (  );                            		// [ FUNC_Simulated | FUNC_Event ] WMission.wHUD_Mission.TeamChanged
	 void                      Tick ( float DeltaTime );                         		// [ FUNC_Simulated ] WMission.wHUD_Mission.Tick
	 void                      DrawTextWithBackground ( class UCanvas* C, struct FString Text, class FColor TextColor, float XO, float YO );		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawTextWithBackground
	 struct FVector            GetScreenCorner ( class UCanvas* C, class AActor* A, struct FVector CornerVect, struct FVector IPScrO, struct FRotator CameraRotation, float ColExpand );		//  WMission.wHUD_Mission.GetScreenCorner
	 void                      Draw_2DCollisionBox ( class UCanvas* C, class AActor* A, struct FVector ScrPos, struct FString Description, float ColExpand, bool bSizeOverride );		//  WMission.wHUD_Mission.Draw_2DCollisionBox
	 class FColor              GetGYRColorRamp ( float Pct );                    		//  WMission.wHUD_Mission.GetGYRColorRamp
	 class FColor              GetObjectiveColor ( class AGameObjective* Go, unsigned char* bProgressPulsing );		// [ FUNC_Simulated ] WMission.wHUD_Mission.GetObjectiveColor
	 class FColor              GetTeamColor ( unsigned char Team );              		//  WMission.wHUD_Mission.GetTeamColor
	 bool                      CustomHUDColorAllowed (  );                       		//  WMission.wHUD_Mission.CustomHUDColorAllowed
	 void                      DrawCustomHealthInfo ( class UCanvas* C, class APlayerController* PC, bool bSkaarj );		//  WMission.wHUD_Mission.DrawCustomHealthInfo
	 void                      DrawInfoPods ( class UCanvas* C );                		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawInfoPods
	 bool                      CanSpawnNotify (  );                              		// [ FUNC_Simulated ] WMission.wHUD_Mission.CanSpawnNotify
	 class AGameObjective*     GetCurrentObjective (  );                         		// [ FUNC_Simulated ] WMission.wHUD_Mission.GetCurrentObjective
	 void                      NotifyUpdatedObjective (  );                      		// [ FUNC_Simulated ] WMission.wHUD_Mission.NotifyUpdatedObjective
	 void                      HighlightCurrentObjective ( bool bShowWayPoint ); 		// [ FUNC_Simulated ] WMission.wHUD_Mission.HighlightCurrentObjective
	 void                      eventAnnouncementPlayed ( struct FString AnnouncerSound, unsigned char Switch );		// [ FUNC_Event ] WMission.wHUD_Mission.AnnouncementPlayed
	 bool                      IsObjectiveVisible ( class UCanvas* C, class AGameObjective* Target, struct FVector camLoc, struct FRotator camRot, struct FVector* ScreenPos );		// [ FUNC_Final | FUNC_Simulated ] WMission.wHUD_Mission.IsObjectiveVisible
	 void                      DrawHealthBar ( class UCanvas* C, struct FVector HBScreenPos, float Health, float MaxHealth, class FColor ObjColor );		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawHealthBar
	 void                      Release_ObjectivePointingArrow (  );              		// [ FUNC_Simulated ] WMission.wHUD_Mission.Release_ObjectivePointingArrow
	 void                      Draw3dObjectiveArrow ( class UCanvas* C );        		// [ FUNC_Simulated ] WMission.wHUD_Mission.Draw3dObjectiveArrow
	 void                      Release_BehindObjectiveArrows (  );               		// [ FUNC_Simulated ] WMission.wHUD_Mission.Release_BehindObjectiveArrows
	 class UTexRotator*        Get_BehindObjectiveArrow (  );                    		// [ FUNC_Simulated ] WMission.wHUD_Mission.Get_BehindObjectiveArrow
	 void                      DrawObjectiveIcon ( class UCanvas* C, bool bOptionalObjective, float PosX, float PosY, float tileX, float tileY );		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawObjectiveIcon
	 void                      DrawObjectiveStatusOverlay ( class UCanvas* C, float Progress, bool bCriticalFlash, struct FVector ScreenPos, float Scale );		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawObjectiveStatusOverlay
	 void                      DrawCriticalObjectiveOverlay ( class UCanvas* C, struct FVector ScreenPos, float Scale );		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawCriticalObjectiveOverlay
	 void                      DrawMiniMap ( class AwHudPart_MinimapBase* Minimap, class UCanvas* C );		//  WMission.wHUD_Mission.DrawMiniMap
	 void                      DrawBigmap_HUD ( class UCanvas* C );              		//  WMission.wHUD_Mission.DrawBigmap_HUD
	 void                      DrawMinimap_HUD ( class UCanvas* C );             		//  WMission.wHUD_Mission.DrawMinimap_HUD
	 void                      CheckAndDrawProgress ( class AGameObjective* Go, class UCanvas* C );		//  WMission.wHUD_Mission.CheckAndDrawProgress
	 void                      DrawProgressMessage ( class UCanvas* C, float ProgressPct );		//  WMission.wHUD_Mission.DrawProgressMessage
	 int                       GetGameObjectIndexByTag ( struct FName Tag );     		//  WMission.wHUD_Mission.GetGameObjectIndexByTag
	 int                       GetGameObjectIndex ( class AGameObjective* Go );  		//  WMission.wHUD_Mission.GetGameObjectIndex
	 void                      DrawObjectives ( class UCanvas* C );              		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawObjectives
	 class FColor              MultiplyColor ( class FColor c2, class FColor* c1 );		//  WMission.wHUD_Mission.MultiplyColor
	 bool                      IsOnEdgeOfScreen ( class UCanvas* C, struct FVector pos, float W, float H );		//  WMission.wHUD_Mission.IsOnEdgeOfScreen
	 struct FVector            GetRadarDotPosition ( class UCanvas* C, struct FVector dist, struct FVector ViewX, struct FVector ViewY, float OffsetScale, float OffsetY );		//  WMission.wHUD_Mission.GetRadarDotPosition
	 float                     GetRadarDotDist ( struct FVector dist, struct FVector ViewX, struct FVector ViewY );		//  WMission.wHUD_Mission.GetRadarDotDist
	 float                     ApplySmartRangeDist ( float dist );               		//  WMission.wHUD_Mission.ApplySmartRangeDist
	 void                      DrawRadarPassB ( class UCanvas* C );              		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawRadarPassB
	 void                      DrawRadarPassA ( class UCanvas* C );              		//  WMission.wHUD_Mission.DrawRadarPassA
	 void                      DrawDebug ( class UCanvas* C, int X, int dy, int* Y );		//  WMission.wHUD_Mission.DrawDebug
	 void                      DrawSpectatingHud ( class UCanvas* C );           		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawSpectatingHud
	 void                      ShowTeamScorePassC ( class UCanvas* C );          		// [ FUNC_Simulated ] WMission.wHUD_Mission.ShowTeamScorePassC
	 bool                      IsVSRelevant (  );                                		// [ FUNC_Simulated ] WMission.wHUD_Mission.IsVSRelevant
	 void                      DrawTeamVS ( class UCanvas* C );                  		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawTeamVS
	 void                      ShowTeamScorePassA ( class UCanvas* C );          		// [ FUNC_Simulated ] WMission.wHUD_Mission.ShowTeamScorePassA
	 void                      UpdateHUD (  );                                   		// [ FUNC_Simulated ] WMission.wHUD_Mission.UpdateHUD
	 void                      updateScore (  );                                 		//  WMission.wHUD_Mission.updateScore
	 void                      UpdateTimer ( int* TimeMinutes, int* TimeSeconds );		// [ FUNC_Simulated ] WMission.wHUD_Mission.UpdateTimer
	 void                      UpdateTeamHud (  );                               		// [ FUNC_Simulated ] WMission.wHUD_Mission.UpdateTeamHud
	 bool                      ShouldShowObjectiveBoard (  );                    		// [ FUNC_Simulated ] WMission.wHUD_Mission.ShouldShowObjectiveBoard
	 void                      DrawAssaultHUDLayer ( class UCanvas* C );         		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawAssaultHUDLayer
	 void                      CanvasDrawActors ( class UCanvas* C, bool bClearedZBuffer );		//  WMission.wHUD_Mission.CanvasDrawActors
	 void                      DrawHudPassC ( class UCanvas* C );                		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawHudPassC
	 void                      DrawHudPassB ( class UCanvas* C );                		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawHudPassB
	 void                      DrawDebugTime ( class UCanvas* C );               		//  WMission.wHUD_Mission.DrawDebugTime
	 void                      DrawDebugMission ( class UCanvas* C );            		//  WMission.wHUD_Mission.DrawDebugMission
	 void                      CallEvent ( bool InvenCheck, int iReservation1, int iReservation2 );		//  WMission.wHUD_Mission.CallEvent
	 void                      DrawHudPassA ( class UCanvas* C );                		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawHudPassA
	 void                      eventDestroyed (  );                              		// [ FUNC_Simulated | FUNC_Event ] WMission.wHUD_Mission.Destroyed
	 void                      UpdateOBJ (  );                                   		// [ FUNC_Simulated ] WMission.wHUD_Mission.UpdateOBJ
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Simulated | FUNC_Event ] WMission.wHUD_Mission.PostBeginPlay
	 void                      PrecacheFonts ( class UCanvas* C );               		// [ FUNC_Simulated ] WMission.wHUD_Mission.PrecacheFonts
	 void                      execShowObjectiveBoard (  );                      		// [ FUNC_Exec ] WMission.wHUD_Mission.ShowObjectiveBoard
	 void                      DrawAdrenaline ( class UCanvas* C );              		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawAdrenaline
	 void                      DrawTimer ( class UCanvas* C );                   		// [ FUNC_Simulated ] WMission.wHUD_Mission.DrawTimer
}; // Size: 0x06C4

// Class WMission.wScoreBoard_Mission
class DLL_IMPORT AwScoreBoard_Mission : public AScoreBoardTeamDeathMatch
{
public:
	struct FString                                     RemainingRoundTime;                               		// 0x065C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     CurrentRound;                                     		// 0x0668 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     RoundSeparator;                                   		// 0x0674 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Defender;                                         		// 0x0680 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Attacker;                                         		// 0x068C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WaitForReinforcements;                            		// 0x0698 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WaitingToSpawnReinforcements;                     		// 0x06A4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     AutoRespawn;                                      		// 0x06B0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     YouWonRound;                                      		// 0x06BC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     YouLostRound;                                     		// 0x06C8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     PracticeRoundOver;                                		// 0x06D4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      DrawTeam ( int TeamNum, int PlayerCount, int OwnerOffset, class UCanvas* Canvas, int FontReduction, int BoxSpaceY, int PlayerBoxSizeY, int HeaderOffsetY );		//  WMission.wScoreBoard_Mission.DrawTeam
	 struct FString            GetDefaultScoreInfoString (  );                   		//  WMission.wScoreBoard_Mission.GetDefaultScoreInfoString
	 struct FString            GetRestartString (  );                            		//  WMission.wScoreBoard_Mission.GetRestartString
	 struct FString            GetTitleString (  );                              		//  WMission.wScoreBoard_Mission.GetTitleString
}; // Size: 0x0084

// Class WMission.wInfoPod
class DLL_IMPORT AwInfoPod : public AKeypoint
{
public:
	unsigned char                                      Team;                                             		// 0x03C8 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      InfoType;                                         		// 0x03C9 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      InfoEffect;                                       		// 0x03CA ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      bIsTriggered:1;                                   		// 0x03CC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bDisabled:1;                                      		// 0x03CC ( 0x0004 )  [0x00000002][ CPF_Edit | CPF_Net ]
	unsigned long                                      BACKUP_bDisabled:1;                               		// 0x03CC ( 0x0004 )  [0x00000004]
	unsigned long                                      bOverrideZoneCheck:1;                             		// 0x03CC ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bOverrideVisibilityCheck:1;                       		// 0x03CC ( 0x0004 )  [0x00000010][ CPF_Edit ]
	float                                              DrawDistThresHold;                                		// 0x03D0 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      InfoPodDrawStyle;                                 		// 0x03D4 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      DrawOpacity;                                      		// 0x03D5 ( 0x0001 ) [ CPF_Edit ]
	class UMaterial*                                   POD_Texture;                                      		// 0x03D8 ( 0x0004 ) [ CPF_Edit ]
	float                                              TextureScale;                                     		// 0x03DC ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     POD_Message;                                      		// 0x03E0 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	unsigned char                                      FontSize;                                         		// 0x03EC ( 0x0001 ) [ CPF_Edit ]

	// UScript Functions
	 void                      DrawInfoPod_Texture ( class UCanvas* C, struct FVector IPScrO );		// [ FUNC_Simulated ] WMission.wInfoPod.DrawInfoPod_Texture
	 void                      DrawInfoPod_TextBrackets ( class UCanvas* C, struct FVector IPScrO, class APlayerController* PC );		// [ FUNC_Simulated ] WMission.wInfoPod.DrawInfoPod_TextBrackets
	 void                      DrawInfoPod_PlainText ( class UCanvas* C, struct FVector IPScreenPos, class APlayerController* PC );		// [ FUNC_Simulated ] WMission.wInfoPod.DrawInfoPod_PlainText
	 void                      Render ( class UCanvas* C, struct FVector IPScreenPos, class APlayerController* PC );		// [ FUNC_Simulated ] WMission.wInfoPod.Render
	 bool                      IsInfoPodVisible ( class UCanvas* C, class APawn* P, struct FVector camLoc, struct FRotator camRot );		// [ FUNC_Final | FUNC_Simulated ] WMission.wInfoPod.IsInfoPodVisible
	 void                      Reset (  );                                       		//  WMission.wInfoPod.Reset
	 void                      eventTrigger ( class AActor* Other, class APawn* EventInstigator );		// [ FUNC_Event ] WMission.wInfoPod.Trigger
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] WMission.wInfoPod.PostBeginPlay
}; // Size: 0x0028

// Class WMission.wTrigger_MSMessageTrigger
class DLL_IMPORT AwTrigger_MSMessageTrigger : public ATriggers
{
public:
	unsigned char                                      AssaultTeam;                                      		// 0x03C8 ( 0x0001 ) [ CPF_Edit ]
	class USound*                                      AnnouncerSound;                                   		// 0x03CC ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     Message;                                          		// 0x03D0 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	unsigned char                                      AnnouncementLevel;                                		// 0x03DC ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      bSoundsPrecached:1;                               		// 0x03E0 ( 0x0004 )  [0x00000001]
	unsigned char                                      Priority;                                         		// 0x03E4 ( 0x0001 ) [ CPF_Edit ]

	// UScript Functions
	 void                      PrecacheAnnouncer ( class AAnnouncerVoice* V, bool bRewardSounds );		// [ FUNC_Simulated ] WMission.wTrigger_MSMessageTrigger.PrecacheAnnouncer
	 unsigned char             GetTeamNum (  );                                  		//  WMission.wTrigger_MSMessageTrigger.GetTeamNum
	 void                      eventTrigger ( class AActor* Other, class APawn* EventInstigator );		// [ FUNC_Event ] WMission.wTrigger_MSMessageTrigger.Trigger
}; // Size: 0x0020

// Class WMission.wObjectivePointingArrow
class DLL_IMPORT AwObjectivePointingArrow : public AActor
{
public:
	struct FVector                                     DrawOffset;                                       		// 0x03C8 ( 0x000C ) 
	class UMaterial*                                   PulseTeamSkin[ 0x02 ];                            		// 0x03D4 ( 0x0008 ) 
	class UMaterial*                                   TeamSkin[ 0x02 ];                                 		// 0x03DC ( 0x0008 ) 

	// UScript Functions
	 void                      Render ( class UCanvas* C, class APlayerController* PC, class AActor* TrackedActor );		// [ FUNC_Simulated ] WMission.wObjectivePointingArrow.Render
	 void                      SetYellowColor ( bool bPulse );                   		// [ FUNC_Simulated ] WMission.wObjectivePointingArrow.SetYellowColor
	 void                      SetTeamSkin ( unsigned char Team, bool bPulse );  		// [ FUNC_Simulated ] WMission.wObjectivePointingArrow.SetTeamSkin
}; // Size: 0x001C

// Class WMission.wAmmo_Dummy
class DLL_IMPORT AwAmmo_Dummy : public AwAmmunition
{
public:
}; // Size: 0x0000

// Class WMission.wObjectiveProgressDisplay
class DLL_IMPORT AwObjectiveProgressDisplay : public AInfo
{
public:
	class AwHUD_Mission*                               ASHUD;                                            		// 0x041C ( 0x0004 ) 
	struct FString                                     HeaderText;                                       		// 0x0420 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     OptionalObjectivePrefix;                          		// 0x042C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ObjTimesString;                                   		// 0x0438 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     TextCutSuffix;                                    		// 0x0444 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SpaceSeparator;                                   		// 0x0450 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     PrimaryObjectivePrefix;                           		// 0x045C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              SlideScale;                                       		// 0x0468 ( 0x0004 ) 
	struct FVector                                     BoxSize;                                          		// 0x046C ( 0x000C ) 
	struct FVector                                     BoxPivot;                                         		// 0x0478 ( 0x000C ) 
	float                                              SlideSpeed;                                       		// 0x0484 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 struct FString            GetObjectiveDescription ( class AGameObjective* Go, bool bDefender );		// [ FUNC_Simulated ] WMission.wObjectiveProgressDisplay.GetObjectiveDescription
	 void                      SetObjectiveColor ( class UCanvas* C, class AGameObjective* Go );		// [ FUNC_Simulated ] WMission.wObjectiveProgressDisplay.SetObjectiveColor
	 bool                      AnyOptionalObjectiveCritical (  );                		// [ FUNC_Simulated ] WMission.wObjectiveProgressDisplay.AnyOptionalObjectiveCritical
	 bool                      AnyPrimaryObjectivesCritical (  );                		// [ FUNC_Simulated ] WMission.wObjectiveProgressDisplay.AnyPrimaryObjectivesCritical
	 float                     GetGlobalObjectiveProgress (  );                  		// [ FUNC_Simulated ] WMission.wObjectiveProgressDisplay.GetGlobalObjectiveProgress
	 int                       GetPrimaryObjectiveCount (  );                    		// [ FUNC_Simulated ] WMission.wObjectiveProgressDisplay.GetPrimaryObjectiveCount
	 void                      DrawBigCurrentObjective ( class UCanvas* C, bool bDefender, bool bCheckOverlap );		// [ FUNC_Simulated ] WMission.wObjectiveProgressDisplay.DrawBigCurrentObjective
	 struct FString            CheckEntry ( class UCanvas* C, struct FString Entry );		// [ FUNC_Simulated ] WMission.wObjectiveProgressDisplay.CheckEntry
	 struct FVector            DrawObjectives ( class UCanvas* C, struct FVector BoxPivot, bool bDefender, bool bGetBoxSize );		// [ FUNC_Simulated ] WMission.wObjectiveProgressDisplay.DrawObjectives
	 void                      PostRender ( class UCanvas* C, float DeltaTime, bool bDefender );		// [ FUNC_Simulated ] WMission.wObjectiveProgressDisplay.PostRender
	 void                      Initialize ( class AwHUD_Mission* H );            		// [ FUNC_Simulated ] WMission.wObjectiveProgressDisplay.Initialize
	 void                      UpdateSlideScale ( float DeltaTime );             		// [ FUNC_Simulated ] WMission.wObjectiveProgressDisplay.UpdateSlideScale
	 void                      ShowStatus ( bool bShow );                        		// [ FUNC_Simulated ] WMission.wObjectiveProgressDisplay.ShowStatus
}; // Size: 0x006C

#ifdef _MSC_VER
#pragma pack ( pop )
#endif

